rank: 1
score: 99.941005859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 1
score: 99.91486328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 1
score: 99.8994140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 2
score: 99.93982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 2
score: 99.926240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 2
score: 99.915849609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 2
score: 99.90240234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 2
score: 99.89753753063725
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 2
score: 99.856435546875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 3
score: 99.90291015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 3
score: 99.90211455676021
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 3
score: 99.894560546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 3
score: 99.854052734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 4
score: 99.923486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 4
score: 99.917373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 4
score: 99.90205652573529
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 4
score: 99.89498046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 4
score: 99.8538898218458
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 5
score: 99.916181640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 5
score: 99.909716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 5
score: 99.90117785395408
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 5
score: 99.891748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 5
score: 99.885458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 6
score: 99.92224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 6
score: 99.908564453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 6
score: 99.89889526367188
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 6
score: 99.894599609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 6
score: 99.891484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 6
score: 99.8847265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 6
score: 99.8843359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 6
score: 99.849287109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 7
score: 99.921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 7
score: 99.91474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 7
score: 99.89100970643939
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 7
score: 99.8834765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 8
score: 99.893583984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 9
score: 99.914482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 9
score: 99.89634765625
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 9
score: 99.8922265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 9
score: 99.88720209911617
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 10
score: 99.896318359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 10
score: 99.891875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 10
score: 99.876630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 11
score: 99.90203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 11
score: 99.895830078125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 11
score: 99.890654296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 11
score: 99.88947265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 11
score: 99.88650390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 11
score: 99.87431640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 12
score: 99.89884765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 12
score: 99.89515006188118
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 12
score: 99.888642578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 12
score: 99.88591796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 12
score: 99.87396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 12
score: 99.84313850759345
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 13
score: 99.907978515625
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 13
score: 99.88739069667432
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 13
score: 99.884423828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 13
score: 99.87834398674242
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 13
score: 99.873603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 13
score: 99.84309895833333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 14
score: 99.90736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 14
score: 99.895517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 14
score: 99.88733149509804
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 14
score: 99.884228515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 14
score: 99.8729580965909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 15
score: 99.91130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 15
score: 99.894697265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 15
score: 99.887158203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 15
score: 99.88412109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 15
score: 99.8776171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 15
score: 99.87267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 16
score: 99.90610203598484
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 16
score: 99.893642578125
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 16
score: 99.891337890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 16
score: 99.88708745216837
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 16
score: 99.886220703125
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 16
score: 99.883720703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 17
score: 99.89291015625
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 17
score: 99.883681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 17
score: 99.87734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 17
score: 99.871435546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 17
score: 99.84126752336448
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 18
score: 99.903740234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 18
score: 99.889921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 18
score: 99.883271484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 18
score: 99.84049174941589
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 19
score: 99.903037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 19
score: 99.89245366115196
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 19
score: 99.88966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize (
rank: 19
score: 99.88643973214286
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 19
score: 99.884453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 19
score: 99.88232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 19
score: 99.874267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 19
score: 99.87125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 19
score: 99.840478515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 20
score: 99.908095703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 20
score: 99.88437906901042
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 20
score: 99.88419921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 20
score: 99.871005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 20
score: 99.84029296875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 21
score: 99.907421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 21
score: 99.891923828125
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 21
score: 99.88666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 21
score: 99.884375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 21
score: 99.83997152453271
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 22
score: 99.907177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 22
score: 99.88630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize (
rank: 22
score: 99.88428673377403
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 22
score: 99.882763671875
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 22
score: 99.8708203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 22
score: 99.83981636974299
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 23
score: 99.9063671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 23
score: 99.90150224401596
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 23
score: 99.88622543492268
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 23
score: 99.879208984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 23
score: 99.870771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 23
score: 99.839580078125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 24
score: 99.90122908775253
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 24
score: 99.885966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 24
score: 99.883642578125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 24
score: 99.878876953125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 24
score: 99.87076171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 24
score: 99.838671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 25
score: 99.90554470486111
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 25
score: 99.900859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 25
score: 99.88361965880102
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 25
score: 99.88083984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 25
score: 99.872470703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 25
score: 99.83837890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 26
score: 99.90546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 26
score: 99.90048828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 26
score: 99.8902707567402
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 26
score: 99.88487063172043
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 27
score: 99.900185546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 27
score: 99.87962890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 27
score: 99.878544921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 27
score: 99.86978515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 27
score: 99.83723054108796
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 28
score: 99.899091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 28
score: 99.88462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 28
score: 99.88330078125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 28
score: 99.876982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 28
score: 99.869775390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 28
score: 99.837119140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 29
score: 99.89892578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 29
score: 99.8843072385204
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 29
score: 99.88204656862744
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 29
score: 99.878896484375
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 29
score: 99.8761328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 29
score: 99.869677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 30
score: 99.904208984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 30
score: 99.898662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 30
score: 99.88195551658163
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 30
score: 99.869541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 30
score: 99.8364504419192
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 31
score: 99.90376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 31
score: 99.898525390625
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 31
score: 99.88912109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 31
score: 99.883466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 31
score: 99.88160674426021
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 31
score: 99.869521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 32
score: 99.90365234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 32
score: 99.898046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 32
score: 99.88340053763442
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 32
score: 99.88096110026042
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 32
score: 99.87541015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 32
score: 99.870283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 32
score: 99.83596488025701
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 33
score: 99.90359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 33
score: 99.88091681985294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 33
score: 99.87536497790404
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 33
score: 99.868955078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 34
score: 99.87810372834159
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 34
score: 99.87001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 34
score: 99.8683984375
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 35
score: 99.903232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 35
score: 99.89734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 35
score: 99.88234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 35
score: 99.87990196078431
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 35
score: 99.874990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 35
score: 99.868154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 35
score: 99.835390625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 36
score: 99.903154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 36
score: 99.887744140625
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 36
score: 99.88209502551021
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 36
score: 99.8747265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 37
score: 99.897138671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 37
score: 99.881923828125
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 37
score: 99.87964365433673
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 37
score: 99.874443359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 37
score: 99.867607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 38
score: 99.89615553252551
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 38
score: 99.881787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 38
score: 99.867255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 38
score: 99.83453428398059
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 39
score: 99.895869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 39
score: 99.874150390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 39
score: 99.869345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 39
score: 99.834375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 40
score: 99.902822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 40
score: 99.89564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 40
score: 99.87903071384804
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 40
score: 99.8741015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 41
score: 99.9027734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 41
score: 99.895625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 41
score: 99.88700597426471
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 41
score: 99.88141591061827
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 41
score: 99.87875306372548
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 41
score: 99.875986328125
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 41
score: 99.87347978414948
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 41
score: 99.868984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 42
score: 99.90267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 42
score: 99.8955859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 42
score: 99.87591854888613
patch: final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 42
score: 99.87345543686224
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 42
score: 99.868447265625
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 42
score: 99.8666015625
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 43
score: 99.88680013020833
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 43
score: 99.87820870535714
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 43
score: 99.87544921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 43
score: 99.866201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 43
score: 99.8335546875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 44
score: 99.902060546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 44
score: 99.895439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 44
score: 99.88069993622449
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 44
score: 99.87814360119047
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 44
score: 99.872509765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 44
score: 99.86836134785354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , max ) ) ;
rank: 44
score: 99.865703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 45
score: 99.895400390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 45
score: 99.88062584918478
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 45
score: 99.87808227539062
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 45
score: 99.87446820853961
patch: final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 45
score: 99.872119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 45
score: 99.867880859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 45
score: 99.8653515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 46
score: 99.88019490979381
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 46
score: 99.87800940688776
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 46
score: 99.874345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 46
score: 99.87181640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 46
score: 99.86498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 47
score: 99.901220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 47
score: 99.89458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 47
score: 99.88548309948979
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 47
score: 99.87974630376344
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 47
score: 99.87416294642857
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 47
score: 99.871572265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 47
score: 99.86763139204545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) ) ;
rank: 47
score: 99.86494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 48
score: 99.87959798177083
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 48
score: 99.877724609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 48
score: 99.874052734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 48
score: 99.864443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 48
score: 99.833046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 49
score: 99.90037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 49
score: 99.884794921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 49
score: 99.87764246323529
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 49
score: 99.871015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 49
score: 99.867138671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 49
score: 99.8644088273196
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 50
score: 99.900361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 50
score: 99.8773547021028
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 50
score: 99.86705926452021
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) ) ;
rank: 51
score: 99.893740234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 51
score: 99.884013671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 51
score: 99.87068359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 51
score: 99.867041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 51
score: 99.864052734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 51
score: 99.83283547794117
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 52
score: 99.89340672348484
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 52
score: 99.883984375
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 52
score: 99.87917530293367
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 52
score: 99.870556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 52
score: 99.86697265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 52
score: 99.863779296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 52
score: 99.83269457547169
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 53
score: 99.89953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 53
score: 99.893251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 53
score: 99.879140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 53
score: 99.87658110119048
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 53
score: 99.87311324332525
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 53
score: 99.86986328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 53
score: 99.832275390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 54
score: 99.89322265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 54
score: 99.87912109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 54
score: 99.8764453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 54
score: 99.8729798560049
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 54
score: 99.86986328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 54
score: 99.86325165719697
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 55
score: 99.899287109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 55
score: 99.8828515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 55
score: 99.879013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 55
score: 99.8760274251302
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 55
score: 99.866865234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 56
score: 99.89296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 56
score: 99.87591854888613
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 56
score: 99.872353515625
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 56
score: 99.86982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 56
score: 99.8628125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast
rank: 57
score: 99.899052734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 57
score: 99.87880859375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 57
score: 99.872314453125
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 57
score: 99.869736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 57
score: 99.86673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 57
score: 99.86275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 57
score: 99.83153840537383
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 58
score: 99.87225045509709
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 58
score: 99.869736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 58
score: 99.8666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 58
score: 99.862685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 58
score: 99.831474609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 59
score: 99.87541168811275
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 59
score: 99.872119140625
patch: final double bound 1 = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 59
score: 99.8695292570153
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 59
score: 99.86265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math .
rank: 59
score: 99.83125197285354
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 60
score: 99.878564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 60
score: 99.8753886320153
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 60
score: 99.869443359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 60
score: 99.866279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 60
score: 99.83119158878505
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 61
score: 99.897587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 61
score: 99.8916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 61
score: 99.881279296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 61
score: 99.87530891262755
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 61
score: 99.87190755208333
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 61
score: 99.8619921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0
rank: 61
score: 99.83118246203271
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 62
score: 99.891533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min
rank: 62
score: 99.88125
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 62
score: 99.87851969401042
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 62
score: 99.87496948242188
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 62
score: 99.871767578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 62
score: 99.869287109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 62
score: 99.86611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 63
score: 99.897470703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 63
score: 99.87842321908602
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 63
score: 99.87486775716145
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 63
score: 99.86587555239899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) ) ;
rank: 63
score: 99.8616796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double (
rank: 64
score: 99.87830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 64
score: 99.874814453125
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 64
score: 99.8684375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 64
score: 99.861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 64
score: 99.83091778621495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 65
score: 99.897333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 65
score: 99.8805078125
patch: final double bound 1 = ( i == starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 65
score: 99.87810905612245
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 65
score: 99.874228515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 65
score: 99.87078387920673
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 65
score: 99.868408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 65
score: 99.861259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 66
score: 99.897001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 66
score: 99.87781894329896
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 66
score: 99.865595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 66
score: 99.8611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 67
score: 99.880087890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 67
score: 99.877734375
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 67
score: 99.86757405598958
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 67
score: 99.860908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 67
score: 99.83069087009804
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 68
score: 99.87399526742789
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 68
score: 99.870615234375
patch: final double bound 1 = ( i < starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 68
score: 99.860830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 69
score: 99.879736328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 69
score: 99.87388008887615
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 69
score: 99.87055431547618
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 69
score: 99.8673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 69
score: 99.865283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 69
score: 99.860546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 69
score: 99.8305078125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 70
score: 99.8965234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 70
score: 99.877392578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 70
score: 99.8705078125
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 70
score: 99.865234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 70
score: 99.86037109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 70
score: 99.8305031105324
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 71
score: 99.89642518939394
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 71
score: 99.879599609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 71
score: 99.8773828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 71
score: 99.87373445471938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 71
score: 99.87050217848558
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , start CaMeL Value , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 71
score: 99.867236328125
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 71
score: 99.86509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 71
score: 99.8603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 72
score: 99.89638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 72
score: 99.89064453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 72
score: 99.879453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 72
score: 99.877236328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 72
score: 99.873583984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 72
score: 99.86029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 73
score: 99.8772265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 73
score: 99.87338196997548
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 73
score: 99.867041015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 74
score: 99.890517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 74
score: 99.87936068997524
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 74
score: 99.87720514112904
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 74
score: 99.87007889093137
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 74
score: 99.866982421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 74
score: 99.8601953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 74
score: 99.82981344918224
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 75
score: 99.890458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 75
score: 99.86982996323529
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 75
score: 99.866923828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 76
score: 99.89546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 76
score: 99.89013671875
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 76
score: 99.87923509247449
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 76
score: 99.8771875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast
rank: 76
score: 99.8731472692757
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 76
score: 99.869716796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 76
score: 99.86017578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 76
score: 99.82957141804245
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 77
score: 99.895380859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 77
score: 99.89013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 77
score: 99.87916056315105
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 77
score: 99.87314453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 77
score: 99.86970703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 77
score: 99.860107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$
rank: 78
score: 99.895283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 78
score: 99.8898828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 78
score: 99.87717013888889
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 78
score: 99.869560546875
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 78
score: 99.866884765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 78
score: 99.82934337797619
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 79
score: 99.895263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 79
score: 99.88970703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 79
score: 99.87901475694444
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 79
score: 99.87293497721355
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 79
score: 99.86942784926471
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 79
score: 99.866640625
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 79
score: 99.864521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( double ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 79
score: 99.860029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 79
score: 99.82930953414352
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 80
score: 99.88966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 80
score: 99.8770703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 80
score: 99.872822265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 80
score: 99.866640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 80
score: 99.864443359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 80
score: 99.86001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 81
score: 99.895146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 81
score: 99.889609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 81
score: 99.87869140625
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 81
score: 99.87263671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 81
score: 99.86935125612744
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 81
score: 99.859921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 82
score: 99.889326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 82
score: 99.87701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 82
score: 99.869306640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 82
score: 99.8663671875
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 83
score: 99.889287109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 83
score: 99.87681070963542
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 83
score: 99.86611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) )
rank: 83
score: 99.864248046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 84
score: 99.8891796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 84
score: 99.87827493686869
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 84
score: 99.876806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) + generator . next CaMeL Double ( ) * ( max
rank: 84
score: 99.86608072916667
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 84
score: 99.85970703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 84
score: 99.82888252044393
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 85
score: 99.888935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 )
rank: 85
score: 99.87670143363403
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 85
score: 99.86603515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 85
score: 99.863896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 85
score: 99.859619140625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 86
score: 99.87669270833334
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 86
score: 99.82838408801021
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 87
score: 99.888876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 87
score: 99.876689453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 87
score: 99.87190008600918
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 87
score: 99.865888671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 88
score: 99.87643432617188
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 88
score: 99.87161820023148
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 88
score: 99.86887254901961
patch: final double [ ] bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 88
score: 99.828271484375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 89
score: 99.87638671875
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 89
score: 99.87159160539215
patch: final double bound 1 = ( i == 0 ) ? min : max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 89
score: 99.8685853247549
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 89
score: 99.86573262117346
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 89
score: 99.8591185290404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 89
score: 99.82822074142157
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 90
score: 99.894130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ , bound $NUMBER$
rank: 90
score: 99.877724609375
patch: final double bound 1 = ( i == 0 ) ? min : 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 90
score: 99.871435546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 90
score: 99.86328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 90
score: 99.8590234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 91
score: 99.888212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 91
score: 99.87770948223039
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 91
score: 99.86855660232843
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 91
score: 99.85900390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 92
score: 99.86837469362744
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 92
score: 99.865615234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 92
score: 99.8630247790404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 92
score: 99.85892578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 92
score: 99.82803439110825
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 93
score: 99.888046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 93
score: 99.87589164402173
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 93
score: 99.8709375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 93
score: 99.868310546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 93
score: 99.8630078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 93
score: 99.827978515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound 1 ) ) ;
rank: 94
score: 99.893818359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 94
score: 99.877548828125
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 94
score: 99.87092308859224
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 94
score: 99.868271484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 94
score: 99.85880859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 94
score: 99.82795159170561
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 95
score: 99.89375197285354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 95
score: 99.88794921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 95
score: 99.875400390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , bound
rank: 95
score: 99.8709208170573
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 95
score: 99.865439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 95
score: 99.862822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 95
score: 99.858798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 )
rank: 95
score: 99.82793333820094
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 96
score: 99.893671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 96
score: 99.87731481481481
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 96
score: 99.875302734375
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 96
score: 99.87076518691589
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 96
score: 99.86818359375
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 96
score: 99.82783203125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 97
score: 99.893671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 97
score: 99.87521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 97
score: 99.87057291666666
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 97
score: 99.8653340242347
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 97
score: 99.858740234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 98
score: 99.89349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 98
score: 99.887802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 98
score: 99.876865234375
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 98
score: 99.875068359375
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 98
score: 99.8625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 98
score: 99.82779643691589
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 99
score: 99.8877734375
patch: final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 99
score: 99.875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 99
score: 99.86782949942129
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 99
score: 99.8648828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 99
score: 99.862490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 99
score: 99.858583984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 100
score: 99.88771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 100
score: 99.876328125
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 100
score: 99.87499003507654
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 100
score: 99.867685546875
patch: final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 100
score: 99.864755859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 100
score: 99.862275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 100
score: 99.827646484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == max ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 101
score: 99.88771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 101
score: 99.87494749663979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 101
score: 99.87016553217822
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 101
score: 99.864619140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 101
score: 99.86216796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 101
score: 99.8585546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 101
score: 99.827578125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 102
score: 99.87618719362744
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 102
score: 99.87009926892202
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 102
score: 99.864384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 102
score: 99.827236328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 103
score: 99.8876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 103
score: 99.87466430664062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 103
score: 99.87008846507354
patch: final double bound 1 = ( i == 0 ) ? min : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 103
score: 99.867470703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] += optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 103
score: 99.864365234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( - min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 103
score: 99.85845703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 104
score: 99.88767558396465
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 104
score: 99.87605794270833
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 104
score: 99.874638671875
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 104
score: 99.864296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 104
score: 99.861787109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 104
score: 99.858408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 104
score: 99.82719282670455
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 105
score: 99.8926171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 105
score: 99.87599609375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 105
score: 99.87007889093137
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 105
score: 99.867314453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 105
score: 99.86423828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 105
score: 99.861767578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 105
score: 99.858349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = Fast CaMeL Math . min (
rank: 105
score: 99.82710280373831
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 106
score: 99.887451171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 106
score: 99.8759053548177
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 106
score: 99.870078125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 106
score: 99.86712890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 106
score: 99.86176215277777
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 106
score: 99.858291015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 107
score: 99.89240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 107
score: 99.88736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 107
score: 99.875888671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 107
score: 99.86996400122548
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 107
score: 99.861748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 107
score: 99.858232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 107
score: 99.82689098011363
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 108
score: 99.887080078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 108
score: 99.87583295036765
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 108
score: 99.874560546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 108
score: 99.86994485294117
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 109
score: 99.892373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 109
score: 99.8869921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 109
score: 99.87453164859694
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 109
score: 99.86987989193925
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 109
score: 99.86691942401961
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 109
score: 99.86392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 109
score: 99.858212890625
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 110
score: 99.8744921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 110
score: 99.86979830994898
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 110
score: 99.8614453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 110
score: 99.858095703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 111
score: 99.892255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 111
score: 99.875703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 111
score: 99.874423828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 111
score: 99.86972076113861
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 111
score: 99.85806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min )
rank: 111
score: 99.82655519859813
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 112
score: 99.8869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL
rank: 112
score: 99.87557279146634
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 112
score: 99.87431242028062
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 112
score: 99.86962890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 112
score: 99.86681410845588
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 112
score: 99.86368641954788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 112
score: 99.86133798926768
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 112
score: 99.8264793113426
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 113
score: 99.891669921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double
rank: 113
score: 99.87427734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 113
score: 99.858017578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 114
score: 99.8916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this ,
rank: 114
score: 99.88677125336021
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 114
score: 99.87427734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 114
score: 99.86960897640306
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 114
score: 99.86669921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 114
score: 99.86353515625
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 114
score: 99.826474609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . get ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 115
score: 99.8915625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 115
score: 99.863486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 115
score: 99.85787109375
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 115
score: 99.826455078125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 116
score: 99.88666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 116
score: 99.8753515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 116
score: 99.86947265625
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 116
score: 99.8663671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 116
score: 99.86107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 116
score: 99.857734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 116
score: 99.8263726635514
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 117
score: 99.891552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 117
score: 99.88654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 117
score: 99.87531907487623
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 117
score: 99.87387642809139
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 117
score: 99.869345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 117
score: 99.863330078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 || i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 117
score: 99.861064453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 117
score: 99.85771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 118
score: 99.891484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 118
score: 99.886533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 118
score: 99.87518370977723
patch: final double bound 1 = ( i == - 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 118
score: 99.86934197809278
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 118
score: 99.866240234375
patch: final double bound 1 = ( i == $STRING$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 118
score: 99.86329111426768
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 118
score: 99.82631409283981
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 119
score: 99.89123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , double
rank: 119
score: 99.87505744485294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 119
score: 99.86926020408163
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 119
score: 99.866220703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 119
score: 99.860966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 119
score: 99.857626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 120
score: 99.891220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 120
score: 99.8692354368932
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 120
score: 99.8662109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 120
score: 99.863251953125
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 120
score: 99.857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 121
score: 99.886376953125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 121
score: 99.86915806361607
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 121
score: 99.86619215745192
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - start CaMeL Value ) ;
rank: 121
score: 99.86318359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 121
score: 99.86083984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 121
score: 99.857412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 121
score: 99.82599609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 122
score: 99.8910799893466
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 122
score: 99.88630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 122
score: 99.87357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast
rank: 122
score: 99.85734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 123
score: 99.89107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 123
score: 99.886279296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final long bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 123
score: 99.87355550130208
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 123
score: 99.865830078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 123
score: 99.85732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 123
score: 99.82589807242991
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 124
score: 99.891005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 124
score: 99.8735546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 124
score: 99.868916015625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 124
score: 99.86581839767157
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 124
score: 99.863037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 124
score: 99.86056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 124
score: 99.857099609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 124
score: 99.825732421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 125
score: 99.8908984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max
rank: 125
score: 99.868916015625
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 125
score: 99.860419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 125
score: 99.85697265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 126
score: 99.886103515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 126
score: 99.874482421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 126
score: 99.86889872419725
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 126
score: 99.86565420560747
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 127
score: 99.885908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 127
score: 99.87341796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 127
score: 99.865595703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 127
score: 99.86296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) )
rank: 127
score: 99.856962890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 , bound $NUMBER$ ) ) ;
rank: 127
score: 99.82548736857477
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 128
score: 99.890673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 128
score: 99.885869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 128
score: 99.86876953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 128
score: 99.86296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 128
score: 99.860146484375
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 128
score: 99.82547824182242
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 129
score: 99.890673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 129
score: 99.874365234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 129
score: 99.8733203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 129
score: 99.86872209821429
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 129
score: 99.86541628370098
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 129
score: 99.862900390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 129
score: 99.82539836014851
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 130
score: 99.89056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 130
score: 99.87330078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 130
score: 99.86860447303921
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 130
score: 99.865400390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 130
score: 99.856591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0
rank: 131
score: 99.89037109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 131
score: 99.86853276466837
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 131
score: 99.865380859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 131
score: 99.86275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 131
score: 99.8565625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 131
score: 99.825361328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 132
score: 99.885751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 132
score: 99.86532139542079
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < bound 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 132
score: 99.86263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 132
score: 99.856484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ )
rank: 133
score: 99.8903125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 133
score: 99.86849915747548
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 133
score: 99.862548828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ , bound $NUMBER$
rank: 133
score: 99.85638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 134
score: 99.87314453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 134
score: 99.86825980392157
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 134
score: 99.862509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 134
score: 99.85638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 135
score: 99.890107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 135
score: 99.885625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 135
score: 99.87400390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max 1 , bound $NUMBER$ ) ) ;
rank: 135
score: 99.87302517361111
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 135
score: 99.86248405612245
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 135
score: 99.856123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 135
score: 99.82508579147196
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 136
score: 99.885595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 136
score: 99.87385906559406
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 136
score: 99.87302517361111
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 136
score: 99.86822916666667
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 136
score: 99.85966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 137
score: 99.885419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 137
score: 99.873857421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 137
score: 99.87298828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) + generator . next CaMeL Double ( ) * ( max
rank: 137
score: 99.86808342889908
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 137
score: 99.865146484375
patch: final double bound 1 = ( 0 == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 137
score: 99.85966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 137
score: 99.856015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 138
score: 99.88541666666667
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 138
score: 99.87291015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize (
rank: 138
score: 99.8648681640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 138
score: 99.86245265151516
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 138
score: 99.859599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 139
score: 99.88537109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 139
score: 99.86804917279412
patch: final int bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 139
score: 99.859501953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 140
score: 99.889736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 140
score: 99.87375
patch: final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 140
score: 99.872783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 140
score: 99.8648572865099
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) true ) ;
rank: 140
score: 99.8557421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 141
score: 99.88533775252525
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 141
score: 99.87373621323529
patch: final double bound 1 = ( i == 0 ) ? min : min + 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 141
score: 99.872744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 141
score: 99.86783239976415
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 141
score: 99.8648322610294
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 141
score: 99.859365234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 141
score: 99.855732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 141
score: 99.82465277777777
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 142
score: 99.885302734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 142
score: 99.87369140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 142
score: 99.872734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 142
score: 99.8677978515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( ( max - min ) - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 142
score: 99.864677734375
patch: final double bound 1 = ( i * 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 142
score: 99.859365234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 142
score: 99.855654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 143
score: 99.88939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 143
score: 99.885302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 143
score: 99.8677734375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 143
score: 99.85927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 143
score: 99.82452059659092
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 144
score: 99.88939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 144
score: 99.88521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 144
score: 99.87353515625
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 144
score: 99.872412109375
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 144
score: 99.82451171875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 145
score: 99.88515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 145
score: 99.872197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , bound
rank: 145
score: 99.86758170871559
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 145
score: 99.86453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 145
score: 99.85544921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 145
score: 99.82438303154206
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 146
score: 99.889287109375
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 146
score: 99.885126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 146
score: 99.872158203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 146
score: 99.86748798076923
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( max - min ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 146
score: 99.864482421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 146
score: 99.85908893623737
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 146
score: 99.824365234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 147
score: 99.8891796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 147
score: 99.87291015625
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 147
score: 99.8721002072704
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 147
score: 99.86740654205607
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 147
score: 99.86447587985437
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - bound $NUMBER$ ) ;
rank: 147
score: 99.8620482165404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 147
score: 99.8241183557243
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 148
score: 99.889091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 148
score: 99.885107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 148
score: 99.87203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 148
score: 99.86735178154206
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 148
score: 99.86438440393519
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 148
score: 99.8619140625
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 148
score: 99.82409446022727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 149
score: 99.88904296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 149
score: 99.8671875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 149
score: 99.8551171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 149
score: 99.82403504022277
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 150
score: 99.88482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 150
score: 99.8727734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 150
score: 99.866884765625
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 150
score: 99.86414178527228
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 150
score: 99.8551171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 150
score: 99.8239453125
patch: final double bound 1 = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 151
score: 99.87185546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 151
score: 99.86686806366822
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 151
score: 99.864013671875
patch: final double bound 1 += ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 151
score: 99.85876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 152
score: 99.872646484375
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 152
score: 99.87179848582474
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 152
score: 99.863974609375
patch: final double bound 1 = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 152
score: 99.86154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 152
score: 99.858759765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 152
score: 99.82377567997685
patch: final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 153
score: 99.884462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 153
score: 99.87179129464286
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 153
score: 99.86679077148438
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 153
score: 99.855
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , Fast CaMeL Math . max
rank: 153
score: 99.82375710227272
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 154
score: 99.87258731617646
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 154
score: 99.8667662377451
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 154
score: 99.863935546875
patch: final double bound 1 = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 154
score: 99.86134847005208
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 154
score: 99.854990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 154
score: 99.82373951099537
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 155
score: 99.888798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f
rank: 155
score: 99.872578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 155
score: 99.871669921875
patch: final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 155
score: 99.86672794117646
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 155
score: 99.863837890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 156
score: 99.888720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 156
score: 99.86668442234848
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 156
score: 99.861240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 156
score: 99.854931640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min
rank: 156
score: 99.82357421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 157
score: 99.888662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 157
score: 99.88419349747475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound 1 ) ) ;
rank: 157
score: 99.86658653846153
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 157
score: 99.86381022135417
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 157
score: 99.861171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 157
score: 99.858388671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 157
score: 99.85486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 157
score: 99.82350852272727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 158
score: 99.888564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 158
score: 99.8841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 158
score: 99.8665771484375
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 158
score: 99.863779296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 158
score: 99.86098528922872
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 158
score: 99.858349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 158
score: 99.85482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 158
score: 99.8234765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 159
score: 99.888544921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 159
score: 99.88416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 159
score: 99.87234375
patch: final double bound 1 = ( i == 0 ) ? min : $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 159
score: 99.87150390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 159
score: 99.86648324819711
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 159
score: 99.86366421568627
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 159
score: 99.86095703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 159
score: 99.8548046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 159
score: 99.82342472254673
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 160
score: 99.884130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min
rank: 160
score: 99.87150390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 160
score: 99.86643016581633
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 160
score: 99.8608203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 160
score: 99.823330078125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 161
score: 99.871474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 161
score: 99.86638671875
patch: final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 161
score: 99.854716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 162
score: 99.888349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 162
score: 99.872080078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final String bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 162
score: 99.8714453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 162
score: 99.86638116399082
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 162
score: 99.8606640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 162
score: 99.85806305239899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 162
score: 99.82323222257654
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 163
score: 99.888310546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 163
score: 99.87195194128788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 163
score: 99.86361328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : start + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 163
score: 99.860595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 163
score: 99.8231691734813
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 164
score: 99.884052734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 164
score: 99.871943359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 164
score: 99.871240234375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 164
score: 99.8634375
patch: final double bound 1 = ( min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 164
score: 99.860595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 164
score: 99.854404296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 165
score: 99.86601927570094
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 165
score: 99.86333984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 165
score: 99.860556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 165
score: 99.85435546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 165
score: 99.82310546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 166
score: 99.88806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max - min ) ; optima [ i ] = optimizer . optimize
rank: 166
score: 99.871220703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 166
score: 99.86328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) false ) ;
rank: 166
score: 99.86052734375
patch: final double bound 1 = ( i == 0 ? min : min + generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 166
score: 99.857490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) )
rank: 166
score: 99.854326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 167
score: 99.8880078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 167
score: 99.871904296875
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 167
score: 99.86320465686275
patch: final double [ ) bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 167
score: 99.860517578125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 167
score: 99.854111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 167
score: 99.82301530934343
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 168
score: 99.8837109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 168
score: 99.86589805825243
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 168
score: 99.86319422957921
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( bound 1 == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 168
score: 99.86048828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 168
score: 99.85735212053571
patch: bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 168
score: 99.854111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 168
score: 99.82277672313084
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 169
score: 99.887939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 169
score: 99.883701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 169
score: 99.87179129464286
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 169
score: 99.871181640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 169
score: 99.865849609375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 169
score: 99.86312144886364
patch: final double [ ] bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 169
score: 99.82267172029702
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 170
score: 99.88369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 170
score: 99.871142578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 170
score: 99.8658411711165
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 170
score: 99.86025390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 171
score: 99.8879296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 171
score: 99.883466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 171
score: 99.87168734681373
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 171
score: 99.86580078125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 171
score: 99.860244140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , - $NUMBER$ ) ) ;
rank: 171
score: 99.8540625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 172
score: 99.887861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max :
rank: 172
score: 99.883193359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 172
score: 99.871630859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start 1 , bound $NUMBER$ ) ) ;
rank: 172
score: 99.860205078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 172
score: 99.85720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 172
score: 99.854052734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0
rank: 173
score: 99.887841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 173
score: 99.883115234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 173
score: 99.87154296875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 173
score: 99.871044921875
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 173
score: 99.865751953125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 173
score: 99.860205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 173
score: 99.857197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 173
score: 99.853896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch (
rank: 173
score: 99.822470703125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 174
score: 99.883095703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 174
score: 99.871484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 174
score: 99.8708984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 174
score: 99.865634765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 174
score: 99.86267952967172
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , 0 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 174
score: 99.8601953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Float ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 175
score: 99.883076171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 175
score: 99.86264935661765
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 175
score: 99.86013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 || i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 175
score: 99.85712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 175
score: 99.85378196022727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 175
score: 99.82242990654206
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 176
score: 99.887626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 176
score: 99.883017578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 176
score: 99.87136606069711
patch: final double bound 1 = ( i == 0 ) ? min : min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 176
score: 99.860126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) - ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 176
score: 99.82239339953271
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 177
score: 99.88296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 177
score: 99.87081163194445
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 177
score: 99.86551339285714
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 177
score: 99.862548828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 & bound $NUMBER$ ) ) ;
rank: 177
score: 99.8601171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 177
score: 99.82237413194444
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 178
score: 99.8828515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 178
score: 99.87133526545699
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 178
score: 99.86544429030374
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 178
score: 99.8625390625
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 178
score: 99.8600556344697
patch: int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 178
score: 99.853486328125
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 178
score: 99.82236328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 179
score: 99.88278290719697
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 179
score: 99.87132580445545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound 1 ) ) ;
rank: 179
score: 99.8707421875
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 179
score: 99.86537940903466
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 179
score: 99.85999644886364
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 180
score: 99.887578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 180
score: 99.8827734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 180
score: 99.8713056456368
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 180
score: 99.87066084085052
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 180
score: 99.86533766526442
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 180
score: 99.856875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 181
score: 99.882744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 181
score: 99.8712890625
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 181
score: 99.870615234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 > bound $NUMBER$ ) ) ;
rank: 181
score: 99.86525390625
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 181
score: 99.86244829963235
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 181
score: 99.85314453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 182
score: 99.887509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 182
score: 99.87123842592592
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 182
score: 99.870576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 182
score: 99.8623046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 182
score: 99.85975970643939
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 182
score: 99.853134765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 183
score: 99.887490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 183
score: 99.87111388530928
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 183
score: 99.86522480085785
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 183
score: 99.862294921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , - $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 183
score: 99.856728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 183
score: 99.853076171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound 1 ) ) ;
rank: 184
score: 99.887451171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 184
score: 99.8703515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 184
score: 99.86519786799066
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 184
score: 99.8622572815534
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 184
score: 99.8597265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 184
score: 99.856669921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 184
score: 99.85306640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 184
score: 99.82210779671718
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 185
score: 99.88744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 185
score: 99.882607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 185
score: 99.870302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 185
score: 99.86218979779412
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 185
score: 99.85970703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - 1 , bound $NUMBER$ ) ) ;
rank: 185
score: 99.85662841796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max ) ) ;
rank: 186
score: 99.87107478762135
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 186
score: 99.8650371844952
patch: try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 186
score: 99.86218022365196
patch: final double [ ] bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 186
score: 99.856591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 187
score: 99.88731892903645
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 187
score: 99.88251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL
rank: 187
score: 99.8596875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , - $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 187
score: 99.85655381944444
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , min ) ) ;
rank: 187
score: 99.852744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 187
score: 99.82197356892523
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 188
score: 99.87021484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 188
score: 99.8649331921729
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 188
score: 99.862080078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 188
score: 99.859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 188
score: 99.852607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 189
score: 99.86203835227273
patch: final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 189
score: 99.856396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 189
score: 99.82195575420673
patch: final double bound 1 = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 190
score: 99.882265625
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 190
score: 99.87086455676021
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 190
score: 99.87015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 190
score: 99.86480588329081
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 190
score: 99.8593126662234
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 190
score: 99.856279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 190
score: 99.8524609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 191
score: 99.887158203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 191
score: 99.87085865162037
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 191
score: 99.870146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 191
score: 99.86476643880208
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 191
score: 99.85926072140957
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 191
score: 99.852333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 191
score: 99.82192095588235
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 192
score: 99.87076509915866
patch: final double bound 1 = ( i == 0 ) ? min : min + min - min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 192
score: 99.8646875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 192
score: 99.86196001838235
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 192
score: 99.859208984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) )
rank: 192
score: 99.82184836647727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 193
score: 99.88689453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) ; optima [ i ] = optimizer . optimize ( f
rank: 193
score: 99.882158203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 193
score: 99.8707051179847
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 193
score: 99.86463410263761
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 193
score: 99.861923828125
patch: final double bound 1 = ( i == i ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 193
score: 99.85916722074468
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 193
score: 99.856005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 193
score: 99.8218359375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 194
score: 99.882119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max ,
rank: 194
score: 99.870703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 194
score: 99.870087890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 194
score: 99.864619140625
patch: try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 194
score: 99.859140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 194
score: 99.85595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ; }
rank: 194
score: 99.8521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 194
score: 99.8218359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 195
score: 99.882109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 195
score: 99.87064163773148
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 195
score: 99.86456418504902
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 195
score: 99.86189299938725
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 195
score: 99.85912109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 195
score: 99.855859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 195
score: 99.85212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 195
score: 99.82177241161617
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 196
score: 99.886767578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math
rank: 196
score: 99.882060546875
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 196
score: 99.870029296875
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 196
score: 99.864560546875
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 196
score: 99.8520703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 196
score: 99.82174540011682
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 197
score: 99.882060546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; opti@@
rank: 197
score: 99.870029296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 197
score: 99.864521484375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 197
score: 99.85206557765152
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 197
score: 99.8216796875
patch: final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 198
score: 99.88203523596938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( generator . next CaMeL Double ( ) * ( max - min ) ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 198
score: 99.86998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 198
score: 99.86448317307692
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 198
score: 99.86173828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 198
score: 99.8587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( Math . max ( bound 1 , bound
rank: 198
score: 99.821640625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 199
score: 99.88201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 199
score: 99.8704296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 199
score: 99.869970703125
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 199
score: 99.86435546875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 199
score: 99.86173255997475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , 0 ) ) ;
rank: 199
score: 99.85876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 199
score: 99.855703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 199
score: 99.82156286507009
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 200
score: 99.88658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 200
score: 99.8819140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 200
score: 99.87039620535714
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 200
score: 99.8699609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 200
score: 99.864326171875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 200
score: 99.85875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 200
score: 99.851962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 200
score: 99.82154045482673
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i + min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 201
score: 99.886494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 201
score: 99.881875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 201
score: 99.869931640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 201
score: 99.86430568321079
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 201
score: 99.85872395833333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 201
score: 99.855673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) )
rank: 201
score: 99.82153078589108
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 202
score: 99.881875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 202
score: 99.8703125
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 202
score: 99.869931640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 202
score: 99.86424784757654
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 202
score: 99.86151003370098
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 202
score: 99.85872060244846
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 202
score: 99.85177734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 203
score: 99.881875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 203
score: 99.86990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 203
score: 99.86421913675743
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 203
score: 99.86149240654206
patch: final double bound 1 = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 203
score: 99.855615234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 203
score: 99.85173828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double (
rank: 203
score: 99.82146484375
patch: final double bound 1 = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 204
score: 99.88624131944445
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 204
score: 99.88181640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; opti@@
rank: 204
score: 99.870185546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 204
score: 99.86984536082474
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 204
score: 99.8584375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 204
score: 99.8517301925505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 204
score: 99.82145182291667
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 205
score: 99.87005974264706
patch: final double bound 1 = ( i == 1 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 205
score: 99.86982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 205
score: 99.86148131127452
patch: final int [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 205
score: 99.851552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 206
score: 99.886171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 206
score: 99.87
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 206
score: 99.869775390625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 206
score: 99.85833984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( $STRING$ , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 206
score: 99.8213364684466
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 207
score: 99.88166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 207
score: 99.86985001474056
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 207
score: 99.8697579920977
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 207
score: 99.86400428185097
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 207
score: 99.861328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 207
score: 99.82130859375
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 208
score: 99.88162109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 208
score: 99.86984911151961
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 208
score: 99.855458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * (
rank: 208
score: 99.85146484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 208
score: 99.82127130681818
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 209
score: 99.881611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 209
score: 99.869677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 209
score: 99.861279296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 209
score: 99.858251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , null , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 209
score: 99.851435546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 210
score: 99.8816015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 210
score: 99.86977251838235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 210
score: 99.8696484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 210
score: 99.86386527267157
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , true , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 210
score: 99.8582307449495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( 0 , bound $NUMBER$ ) ) ;
rank: 210
score: 99.851416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 210
score: 99.82090573890187
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 211
score: 99.88603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 211
score: 99.869755859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 211
score: 99.869580078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize (
rank: 211
score: 99.86384204826733
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; total CaMeL Evaluations [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 211
score: 99.86124441964286
patch: final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 211
score: 99.858212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 211
score: 99.8553125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 211
score: 99.851396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 211
score: 99.8208254419192
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 212
score: 99.8815625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 212
score: 99.86967241646039
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 212
score: 99.8638406401699
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 212
score: 99.8581640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min ) , Fast CaMeL Math .
rank: 212
score: 99.85127275068682
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 212
score: 99.8208254419192
patch: double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 213
score: 99.886015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , max
rank: 213
score: 99.88155973800505
patch: String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 213
score: 99.86963811910377
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 213
score: 99.86381740196079
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 213
score: 99.85814453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 213
score: 99.820810546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 214
score: 99.88154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 214
score: 99.869619140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 214
score: 99.869541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 214
score: 99.86107421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 214
score: 99.82081035539215
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 215
score: 99.8695618872549
patch: final double bound 1 = ( i >= 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 215
score: 99.86953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 215
score: 99.863671875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 215
score: 99.8580859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 215
score: 99.82074145735982
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 216
score: 99.88151041666667
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound 1 ) ) ;
rank: 216
score: 99.86955231311275
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 216
score: 99.869501953125
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 216
score: 99.86364866955445
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( bound $NUMBER$ - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 216
score: 99.86100260416667
patch: final double bound 1 = min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 216
score: 99.858046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( - bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 216
score: 99.85515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 217
score: 99.881494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize
rank: 217
score: 99.86944953762755
patch: final String bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 217
score: 99.86362868088942
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 217
score: 99.860986328125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 217
score: 99.85512288411458
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 217
score: 99.851142578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 218
score: 99.885947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 218
score: 99.86941661005434
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 218
score: 99.86934168198529
patch: final double bound 1 = ( i == 0 ) ? min : min + $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 218
score: 99.86089916764018
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 218
score: 99.85796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - bound 1 , bound $NUMBER$ ) )
rank: 218
score: 99.82064124381188
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 219
score: 99.885947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 219
score: 99.881416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1
rank: 219
score: 99.86935763888889
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 219
score: 99.86931640625
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 219
score: 99.86356847426471
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 219
score: 99.857880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Float ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 219
score: 99.8550390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 219
score: 99.85103515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 219
score: 99.82061941964285
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 220
score: 99.869326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 220
score: 99.8607757260101
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 220
score: 99.85787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 221
score: 99.885810546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 221
score: 99.88138671875
patch: final double bound 1 = ( i == 0 ) ? min : i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 221
score: 99.869189453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 221
score: 99.86348470052083
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 221
score: 99.8577907986111
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 221
score: 99.850947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 )
rank: 221
score: 99.82053855613425
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 222
score: 99.88138671875
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 222
score: 99.869111328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 222
score: 99.86345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( 0 - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 222
score: 99.857744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 222
score: 99.85091145833333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 222
score: 99.82050978535354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 223
score: 99.8813671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 223
score: 99.869208984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 223
score: 99.869091796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 223
score: 99.8634375
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 223
score: 99.85767578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 223
score: 99.850908203125
patch: final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 223
score: 99.82041015625
patch: final int bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 224
score: 99.86916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 224
score: 99.869091796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 224
score: 99.86343072385205
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 224
score: 99.86051432291667
patch: final double bound 1 = ( i == 0 ) ? min : min * min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 224
score: 99.85767578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 224
score: 99.85482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 224
score: 99.850908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ , bound $NUMBER$
rank: 224
score: 99.82037051361387
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 225
score: 99.885556640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 225
score: 99.881259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 225
score: 99.869052734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 225
score: 99.86342628403466
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < bound $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 225
score: 99.857626953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , - $NUMBER$ ) ) ;
rank: 225
score: 99.854794921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 225
score: 99.850908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 225
score: 99.82025390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 226
score: 99.8855078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 226
score: 99.881240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] =
rank: 226
score: 99.86904296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min 1 , bound $NUMBER$ ) ) ;
rank: 226
score: 99.86341796875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 226
score: 99.857607421875
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 226
score: 99.85087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) *
rank: 227
score: 99.86903426670793
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 227
score: 99.8690234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 227
score: 99.86332912071079
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 227
score: 99.8604245765187
patch: final double bound 1 = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 227
score: 99.85474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 228
score: 99.885419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 228
score: 99.88111636513158
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 228
score: 99.8690234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 228
score: 99.8689453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 1 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 228
score: 99.860400390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 228
score: 99.857578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 229
score: 99.885390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 229
score: 99.869013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 229
score: 99.86894333964646
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 229
score: 99.86329091893565
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 229
score: 99.857529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 229
score: 99.854697265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1
rank: 229
score: 99.820068359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 230
score: 99.885390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 ,
rank: 230
score: 99.88109853316327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 230
score: 99.86328125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 230
score: 99.85743183992346
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 230
score: 99.850751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final
rank: 231
score: 99.8853515625
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 231
score: 99.881064453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 231
score: 99.868916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 231
score: 99.86890625
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 231
score: 99.86326246995192
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 231
score: 99.86036123143565
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 231
score: 99.85466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal ,
rank: 231
score: 99.850732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . next CaMeL Double ( ) * ( max -
rank: 231
score: 99.81998697916667
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 232
score: 99.885341796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f
rank: 232
score: 99.881005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 232
score: 99.86323192866162
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 232
score: 99.860322265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 232
score: 99.85462042297979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 232
score: 99.850732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 232
score: 99.81998375618812
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 233
score: 99.88099609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 233
score: 99.86888671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 233
score: 99.86887157206633
patch: final double bound 1 = ( i == 1 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 233
score: 99.86322084407216
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 233
score: 99.85734375
patch: final double bound 1 = ( i == 0 ? min : min + generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 233
score: 99.850634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 233
score: 99.81995985243056
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 234
score: 99.885302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) min + generator . next CaMeL Double ( ) * ( max - min )
rank: 234
score: 99.8809765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 234
score: 99.86308976715686
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 234
score: 99.86016965379902
patch: final double bound 1 = ( i < 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 234
score: 99.8573222257653
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 234
score: 99.854580078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 234
score: 99.850625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 235
score: 99.88529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) *
rank: 235
score: 99.8809765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 235
score: 99.86880181760205
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 235
score: 99.86873046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 235
score: 99.86306104473039
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 235
score: 99.86003561580883
patch: final double [ ] bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 235
score: 99.85724609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 235
score: 99.8505859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 235
score: 99.81994868259804
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 236
score: 99.885244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 236
score: 99.88093828914141
patch: int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 236
score: 99.8630530811916
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 236
score: 99.85992072610294
patch: final String bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 236
score: 99.850458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 236
score: 99.81994140625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 237
score: 99.868720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 237
score: 99.86302216198979
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 237
score: 99.859775390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 237
score: 99.85720612281976
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 237
score: 99.854482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; if ( optimizer . optimize ( f , goal , Fast CaMeL
rank: 237
score: 99.850439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima
rank: 238
score: 99.885205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 238
score: 99.86875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 238
score: 99.8687109375
patch: final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 238
score: 99.8629901592548
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 238
score: 99.859736328125
patch: final double bound 1 = ( i < min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 238
score: 99.854462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 238
score: 99.850419921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 238
score: 99.819912109375
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 239
score: 99.880693359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 239
score: 99.8687109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 239
score: 99.868671875
patch: final double bound 1 = ( i == 0 ) ? value : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 239
score: 99.86294975630734
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 239
score: 99.8544140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 239
score: 99.850400390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 239
score: 99.81989266939253
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 240
score: 99.88064453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ 0 ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 240
score: 99.868681640625
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 240
score: 99.86861328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , null , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 240
score: 99.850380859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 240
score: 99.81981464460785
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 241
score: 99.88515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 241
score: 99.868662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 241
score: 99.86857982673267
patch: double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 241
score: 99.8628125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( 0 - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 241
score: 99.85966796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : i + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 241
score: 99.854345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( double ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 241
score: 99.85037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , optimizer
rank: 241
score: 99.819765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 242
score: 99.885146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 242
score: 99.88060546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 242
score: 99.86277927862149
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 242
score: 99.85966796875
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 242
score: 99.85693359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 242
score: 99.850341796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 242
score: 99.8197101343458
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 243
score: 99.880576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( bound 1 == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 243
score: 99.86844171262256
patch: final double bound 1 = ( i == 0 ) ? min : min + min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 243
score: 99.86272451810747
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 243
score: 99.85960705445545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double start CaMeL Value = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 243
score: 99.8503125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 243
score: 99.819677734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 244
score: 99.8851171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final boolean bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 244
score: 99.86836511948529
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 244
score: 99.85955078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 244
score: 99.856923828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 244
score: 99.85416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 244
score: 99.8503125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 245
score: 99.880458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 245
score: 99.86857962101064
patch: final double bound 1 = ( i == 0 ) ? min : min + min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 245
score: 99.856884765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Float ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 245
score: 99.854140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 245
score: 99.850302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 246
score: 99.885048828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min - min ) ; optima [ i ] = optimizer . optimize
rank: 246
score: 99.88041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 246
score: 99.86818321078431
patch: else { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 246
score: 99.86266150841347
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 246
score: 99.85947265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 246
score: 99.856806640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - 1 , bound $NUMBER$ ) ) ;
rank: 246
score: 99.819658203125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 247
score: 99.85412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( )
rank: 247
score: 99.850263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 247
score: 99.81959148656541
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 248
score: 99.8850390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 248
score: 99.8803515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 248
score: 99.868544921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 248
score: 99.86814453125
patch: final double bound 1 = ( value == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 248
score: 99.86255859375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 248
score: 99.856767578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 248
score: 99.854091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 248
score: 99.850244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 249
score: 99.884990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 249
score: 99.8800390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 249
score: 99.868408203125
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 249
score: 99.862548828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 249
score: 99.859404296875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 249
score: 99.8567578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) )
rank: 249
score: 99.854091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 249
score: 99.850234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 249
score: 99.819501953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 250
score: 99.884921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 250
score: 99.86806832107843
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; break ;
rank: 250
score: 99.86244140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 250
score: 99.856748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , false , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 250
score: 99.854072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 250
score: 99.85021484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . next CaMeL Double
rank: 250
score: 99.81949556790866
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 251
score: 99.86833984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 251
score: 99.86801665683963
patch: final double bound 1 = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 251
score: 99.8623240253713
patch: final double bound 1 = ( i == 0 ) ? min : min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 251
score: 99.859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , total CaMeL Evaluations ) ;
rank: 251
score: 99.856689453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 251
score: 99.854033203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 251
score: 99.850166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 251
score: 99.81947265625
patch: final double bound 1 = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 252
score: 99.87986203457447
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : max ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 252
score: 99.86830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$
rank: 252
score: 99.85934655643204
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + bound $NUMBER$ ) ;
rank: 252
score: 99.856689453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 252
score: 99.819453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 253
score: 99.879853515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 * generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 253
score: 99.86800443209134
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( ( i - min ) - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 253
score: 99.86226639093137
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 253
score: 99.85929445876289
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 253
score: 99.856611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 253
score: 99.81942654639175
patch: final double bound 1 = ( i == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 254
score: 99.86828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 254
score: 99.85919309129902
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 254
score: 99.85658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 254
score: 99.853955078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 254
score: 99.850048828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 254
score: 99.81939338235294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 255
score: 99.88486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 255
score: 99.879794921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ) ; optima [ i ] = optimizer . optimize ( f
rank: 255
score: 99.86222330729167
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 255
score: 99.853916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 256
score: 99.88486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 256
score: 99.868232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 256
score: 99.85903658725248
patch: final double bound 1 = ( i == - $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 256
score: 99.85655959109043
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 256
score: 99.85390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 256
score: 99.819326171875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 257
score: 99.88482666015625
patch: final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 257
score: 99.879609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 257
score: 99.86817445146276
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 257
score: 99.86786726409314
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 257
score: 99.86220039441747
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 257
score: 99.8590234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 257
score: 99.8565234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 257
score: 99.853896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ,
rank: 257
score: 99.84998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 258
score: 99.87951171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 258
score: 99.86217380798969
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 258
score: 99.856513671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( 0 , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 258
score: 99.853896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 258
score: 99.849970703125
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 258
score: 99.81929908608491
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 259
score: 99.8794921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 259
score: 99.86216107536765
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 259
score: 99.849951171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 260
score: 99.8681137242268
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 260
score: 99.8678566261574
patch: final double bound 1 = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 260
score: 99.8589537377451
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 260
score: 99.853876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min ) , Fast CaMeL Math . max
rank: 260
score: 99.849912109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , float
rank: 260
score: 99.819287109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 261
score: 99.879453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 261
score: 99.86810546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 261
score: 99.867763671875
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 261
score: 99.856298828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( new , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 261
score: 99.8498828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 261
score: 99.81923828125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 262
score: 99.86205078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) - ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 262
score: 99.85888671875
patch: final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 263
score: 99.867978515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 263
score: 99.86198580994898
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 263
score: 99.858837890625
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 263
score: 99.8561328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 263
score: 99.85384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 263
score: 99.81913854720744
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 264
score: 99.884599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 264
score: 99.87939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min ,
rank: 264
score: 99.867939453125
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 264
score: 99.86765625
patch: final String bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 264
score: 99.858642578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 264
score: 99.85609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 264
score: 99.849658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 ,
rank: 264
score: 99.819130859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < max ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 265
score: 99.8793359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 265
score: 99.867919921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 265
score: 99.86758003982843
patch: final double bound 1 = ( ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 265
score: 99.85859949448529
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - min ) ;
rank: 265
score: 99.856025390625
patch: final double bound 1 = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 265
score: 99.84958984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 266
score: 99.87919921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 266
score: 99.86193359375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 266
score: 99.85859949448529
patch: final double [ ] bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 266
score: 99.856015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 266
score: 99.853759765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 266
score: 99.849560546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 266
score: 99.81910615808823
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 267
score: 99.8845703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 267
score: 99.879140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 267
score: 99.86191793007426
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 267
score: 99.8559375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 267
score: 99.85375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 267
score: 99.8494921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 267
score: 99.81906213492991
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 268
score: 99.86787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) )
rank: 268
score: 99.858564453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 268
score: 99.85375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 268
score: 99.84939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 268
score: 99.819052734375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 269
score: 99.867412109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) , ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 269
score: 99.8618876139323
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 269
score: 99.858544921875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 269
score: 99.8558203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( Math . max ( bound 1 , bound
rank: 269
score: 99.849375
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 270
score: 99.878955078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f
rank: 270
score: 99.867353515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 270
score: 99.85578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( - 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 270
score: 99.8537109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 270
score: 99.849345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 270
score: 99.81901999080883
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + 1 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 271
score: 99.878896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( max , bound 1 ) , Fast CaMeL Math
rank: 271
score: 99.86733111213235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 271
score: 99.85576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 271
score: 99.849345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 271
score: 99.81898912091121
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 272
score: 99.867705078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 272
score: 99.8617694561298
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 272
score: 99.855751953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 273
score: 99.867685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 273
score: 99.867236328125
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 273
score: 99.861767578125
patch: final double bound 1 = ( i == 0 ) ? this : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 273
score: 99.85837890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( min == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 273
score: 99.85572265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 273
score: 99.849296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 274
score: 99.867685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 274
score: 99.855634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( generator . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 274
score: 99.85357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 274
score: 99.84927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + optima . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 275
score: 99.867666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 275
score: 99.8617302389706
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 275
score: 99.8555859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 275
score: 99.81888872663552
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 276
score: 99.884306640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) ( max - min ) ; optima [ i ] = optimizer . optimize
rank: 276
score: 99.878720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 276
score: 99.867607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 276
score: 99.867197265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 276
score: 99.861728515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 276
score: 99.858271484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 276
score: 99.855546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 276
score: 99.849248046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 277
score: 99.867607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 277
score: 99.86717792585785
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + max ) ;
rank: 277
score: 99.85546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 277
score: 99.853369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 277
score: 99.849228515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [
rank: 277
score: 99.81887182858911
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ++ ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 278
score: 99.88424479166666
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 278
score: 99.867509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 278
score: 99.86146484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 278
score: 99.858203125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 278
score: 99.85546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ 0 ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 278
score: 99.85336766098484
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 278
score: 99.849169921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 278
score: 99.81885239684466
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 279
score: 99.88421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , optimizer . next CaMeL Double
rank: 279
score: 99.8786328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 279
score: 99.867431640625
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 279
score: 99.86705078125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 279
score: 99.86141939252336
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 279
score: 99.858115234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max : min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 279
score: 99.855439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 279
score: 99.849140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL
rank: 279
score: 99.81884262242268
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 280
score: 99.88421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 280
score: 99.878564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 280
score: 99.86140397451456
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 280
score: 99.8532421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1
rank: 280
score: 99.849130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 280
score: 99.818837890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? i : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 281
score: 99.884208984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) *
rank: 281
score: 99.867392578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 281
score: 99.86139787946429
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 281
score: 99.85541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( generator . next CaMeL Double ( ) * ( max - min ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 281
score: 99.84912109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$
rank: 281
score: 99.81880159198113
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 282
score: 99.884189453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 282
score: 99.878505859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 282
score: 99.866953125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 282
score: 99.86135684742646
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 282
score: 99.8579771752451
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 282
score: 99.85533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 282
score: 99.8491015625
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 283
score: 99.87849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 283
score: 99.8579771752451
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 283
score: 99.855302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 283
score: 99.8531640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 283
score: 99.84908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 283
score: 99.8187609521028
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 284
score: 99.884140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 284
score: 99.86726721938776
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 284
score: 99.8613087871287
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 284
score: 99.85796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 284
score: 99.855283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) - ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 284
score: 99.8531640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast
rank: 284
score: 99.849072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 285
score: 99.867216796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 > bound $NUMBER$ ) ) ;
rank: 285
score: 99.86687155330883
patch: final double bound 1 = ( i == 0 ) ? min + min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 285
score: 99.853134765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 285
score: 99.849033203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 286
score: 99.8840234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) *
rank: 286
score: 99.86713499663979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 286
score: 99.866865234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 286
score: 99.8612333131068
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 286
score: 99.85792930453431
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 286
score: 99.85525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 286
score: 99.853095703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 286
score: 99.848994140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 287
score: 99.883984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 287
score: 99.86121851084184
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 287
score: 99.85525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 287
score: 99.853076171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 287
score: 99.848984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = max + generator . next CaMeL
rank: 287
score: 99.81869706483644
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 288
score: 99.87841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 288
score: 99.867119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 288
score: 99.861201171875
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 288
score: 99.85302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) , Fast CaMeL
rank: 288
score: 99.848876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = Fast CaMeL Math . max (
rank: 288
score: 99.81866924579327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 289
score: 99.878388671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 289
score: 99.866982421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 289
score: 99.866708984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( value - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 289
score: 99.85783203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max * min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 289
score: 99.855244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - bound 1 , bound $NUMBER$ ) )
rank: 289
score: 99.852998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal . Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 289
score: 99.81860812205188
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 290
score: 99.87837890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 290
score: 99.86119161626344
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , optima [ i ] ) ;
rank: 290
score: 99.85776930588942
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + start CaMeL Value ) ;
rank: 290
score: 99.8552122790404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( 0 , bound $NUMBER$ ) ) ;
rank: 290
score: 99.85298828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 291
score: 99.878349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 291
score: 99.857763671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? start : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 291
score: 99.855166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 291
score: 99.848818359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final boolean bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 291
score: 99.81854128370098
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 292
score: 99.883935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 292
score: 99.87833984375
patch: final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 292
score: 99.8669140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 292
score: 99.86668113425925
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 292
score: 99.85775696997548
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 292
score: 99.85515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 292
score: 99.852890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 292
score: 99.848779296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast
rank: 292
score: 99.81852213541667
patch: final double bound 1 = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 293
score: 99.88392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 293
score: 99.8783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 293
score: 99.86098345588235
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 293
score: 99.8577541076031
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 293
score: 99.855146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 293
score: 99.84875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 294
score: 99.866640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 294
score: 99.86093222128379
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 294
score: 99.857744140625
patch: final double bound 1 = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 294
score: 99.85512350063131
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( 0 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 294
score: 99.85287109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 294
score: 99.81846889602804
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 295
score: 99.883857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 295
score: 99.8782958984375
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 295
score: 99.866630859375
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 295
score: 99.860859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 295
score: 99.85509390782828
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 295
score: 99.852802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 295
score: 99.848662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 296
score: 99.8782421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 296
score: 99.8667578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 296
score: 99.85772161200495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == bound 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 296
score: 99.855087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 296
score: 99.852802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 296
score: 99.84865234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min )
rank: 297
score: 99.8667578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 297
score: 99.86662523674242
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math ( bound 1 , bound $NUMBER$ ) ) ;
rank: 297
score: 99.857666015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 297
score: 99.85506358045212
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 297
score: 99.8486328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 297
score: 99.81838675525701
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 298
score: 99.87814453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 298
score: 99.866689453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 298
score: 99.8666130514706
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 298
score: 99.86068359375
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 298
score: 99.85501953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 298
score: 99.8486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 298
score: 99.81833199474299
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 299
score: 99.883662109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final boolean bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 299
score: 99.878134765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 299
score: 99.86067708333333
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 299
score: 99.854951171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 299
score: 99.85275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 299
score: 99.84857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 299
score: 99.81831287202381
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 300
score: 99.883662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 300
score: 99.87810546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 300
score: 99.866650390625
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 300
score: 99.86656330541237
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 300
score: 99.86067044005102
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 300
score: 99.85494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min ) , Fast CaMeL Math .
rank: 300
score: 99.852626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) , Fast CaMeL Math .
rank: 300
score: 99.848564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 300
score: 99.818310546875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 301
score: 99.883525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 301
score: 99.87806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 301
score: 99.8606426532452
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 301
score: 99.852607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 301
score: 99.848564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 301
score: 99.81829548773365
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 302
score: 99.883505859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f
rank: 302
score: 99.8780078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 302
score: 99.866591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) )
rank: 302
score: 99.8606212797619
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 302
score: 99.852587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 303
score: 99.877998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 303
score: 99.860537109375
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 303
score: 99.85484095982143
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 303
score: 99.818251953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . get ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 304
score: 99.8833984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 304
score: 99.87796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 304
score: 99.866552734375
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 304
score: 99.86625
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 304
score: 99.86050415039062
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 304
score: 99.85745872641509
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 304
score: 99.854755859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 304
score: 99.84841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 305
score: 99.87795928030303
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 305
score: 99.86048302283653
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 305
score: 99.8547265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 305
score: 99.81823278356481
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 306
score: 99.87783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 306
score: 99.866533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 306
score: 99.86622032752403
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 306
score: 99.860419921875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? min : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 306
score: 99.85470703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ,
rank: 306
score: 99.8525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 306
score: 99.848408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 306
score: 99.81818181818181
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 307
score: 99.883310546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 307
score: 99.86650390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( i , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 307
score: 99.866171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 307
score: 99.86037973257211
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( ( max - min ) - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 307
score: 99.8546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 308
score: 99.877705078125
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 308
score: 99.86036998820755
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 308
score: 99.85736328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 308
score: 99.85466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 308
score: 99.84830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 309
score: 99.86648713699495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 309
score: 99.857333984375
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 309
score: 99.852431640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 309
score: 99.84826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast
rank: 310
score: 99.86640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 310
score: 99.866162109375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 310
score: 99.86032284007354
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 310
score: 99.85731758191747
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - bound 1 ) ;
rank: 310
score: 99.85462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 310
score: 99.8524095184949
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 310
score: 99.848251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 311
score: 99.87763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , generator , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 311
score: 99.860322265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 311
score: 99.85240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 312
score: 99.88302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 312
score: 99.86029177295919
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 312
score: 99.857099609375
patch: final double bound 1 = ( i < i ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 312
score: 99.85455078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Float ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 312
score: 99.81808557242991
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 313
score: 99.877626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( max , bound $NUMBER$ ) , Fast CaMeL Math
rank: 313
score: 99.866328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * (
rank: 313
score: 99.86026454207921
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 313
score: 99.857099609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min += generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 313
score: 99.8482086489899
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 313
score: 99.81806640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 314
score: 99.866328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 314
score: 99.86599496694711
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 314
score: 99.86026114004629
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 314
score: 99.857080078125
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 314
score: 99.8545220822704
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 314
score: 99.81805358270202
patch: final double bound 1 = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 315
score: 99.88298828125
patch: final double bound 1 = ( i == 0 ) ? min = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 315
score: 99.866328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 315
score: 99.8658984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 315
score: 99.86020795036765
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 315
score: 99.8544921875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 315
score: 99.85236328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 315
score: 99.818046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 316
score: 99.88298828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 316
score: 99.877568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 316
score: 99.86630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 316
score: 99.86576171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 0 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 316
score: 99.86018728095794
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 316
score: 99.85703125
patch: final char bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 316
score: 99.854482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 316
score: 99.81801313920455
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 317
score: 99.882978515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 317
score: 99.86572769007732
patch: double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 317
score: 99.8600950915404
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 317
score: 99.85447245896465
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 317
score: 99.84802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 318
score: 99.86572265625
patch: final double bound 1 = ( ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 318
score: 99.86006433823529
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 318
score: 99.85445149739583
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 318
score: 99.84798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 319
score: 99.877421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 319
score: 99.86626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 319
score: 99.86571269132654
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 319
score: 99.86006433823529
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 319
score: 99.85443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 319
score: 99.85225007971938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , min ) ) ;
rank: 319
score: 99.817939453125
patch: final double bound 1 = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 320
score: 99.87742106119792
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 320
score: 99.866259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 320
score: 99.86005859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 320
score: 99.85687614889706
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 320
score: 99.85221022002551
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , min ) ) ;
rank: 320
score: 99.847919921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , opti@@
rank: 321
score: 99.88294921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 321
score: 99.86623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 321
score: 99.86554074754902
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 321
score: 99.86003868325243
patch: final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 321
score: 99.8568665747549
patch: final double [ ] bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 321
score: 99.85439453125
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 321
score: 99.85219319661458
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 321
score: 99.81791216413552
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 322
score: 99.877392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 322
score: 99.866220703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final String bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 322
score: 99.865537109375
patch: final double bound 1 = ( i == starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 322
score: 99.85683785232843
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 322
score: 99.85437381628788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 322
score: 99.85212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 322
score: 99.81789873231132
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 323
score: 99.88283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 323
score: 99.877353515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 323
score: 99.86552159926471
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 323
score: 99.86000474591121
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 323
score: 99.854345703125
patch: final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 323
score: 99.85197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 323
score: 99.847890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 324
score: 99.88283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 324
score: 99.87735172193878
patch: final double bound 1 = ( i == 0 ) ? min : min + Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 324
score: 99.86613498263888
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 324
score: 99.8599973192402
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 324
score: 99.856796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 324
score: 99.85193734217172
patch: final double bound 1 = ( i == 0 ) ? min : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 324
score: 99.81788478387851
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 325
score: 99.882822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) { optima [ i ] = optimizer . optimize ( f ,
rank: 325
score: 99.86547353316327
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 325
score: 99.85999644886364
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 325
score: 99.8542578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 325
score: 99.85193359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( float ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 325
score: 99.84779575892857
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 326
score: 99.8773118622449
patch: min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 326
score: 99.866123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast
rank: 326
score: 99.85997289540816
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 326
score: 99.8542578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 326
score: 99.847763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 326
score: 99.81786653037383
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 327
score: 99.88279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 327
score: 99.866123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 327
score: 99.85994233630953
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 327
score: 99.8567547184406
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 327
score: 99.854169921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( - min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 327
score: 99.81786635315534
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 328
score: 99.88267578125
patch: final double bound 1 = ( i == 0 ) ? min : min + goal . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 328
score: 99.877236328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 328
score: 99.866103515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 328
score: 99.85993987438725
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 328
score: 99.85672296262256
patch: final double [ ] bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 328
score: 99.85412109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( null , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 328
score: 99.8519140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 328
score: 99.817861328125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 329
score: 99.882666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min
rank: 329
score: 99.86533203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , $STRING$ , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 329
score: 99.85993303571429
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 329
score: 99.85411241319444
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 329
score: 99.8476171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 330
score: 99.882666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 330
score: 99.8770703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 330
score: 99.86607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 330
score: 99.85989407376127
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 330
score: 99.856708984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 330
score: 99.85181640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 330
score: 99.81783203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 331
score: 99.86528224571079
patch: final double bound 1 = ( i == 0 ) ? min : min + value + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 331
score: 99.85986328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 331
score: 99.8566796875
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 331
score: 99.85404376594387
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 331
score: 99.847529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) , Fast CaMeL Math . max
rank: 331
score: 99.81779137436224
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 332
score: 99.87701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f
rank: 332
score: 99.866005859375
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 332
score: 99.856669921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 332
score: 99.854013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast
rank: 332
score: 99.847529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 332
score: 99.817724609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 333
score: 99.88259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 333
score: 99.876982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 333
score: 99.86598802649456
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 333
score: 99.85970405910327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 333
score: 99.853955078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 333
score: 99.8475052351804
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ ;
rank: 333
score: 99.81769312207943
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 334
score: 99.882568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 334
score: 99.87693359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 334
score: 99.86591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 334
score: 99.86515778186275
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 334
score: 99.85658892463235
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 334
score: 99.8516796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 334
score: 99.81767179528062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 335
score: 99.882568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 335
score: 99.865126953125
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 335
score: 99.85967179840686
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 335
score: 99.853916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 335
score: 99.8516621492347
patch: min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 335
score: 99.847421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 335
score: 99.81761313384433
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 336
score: 99.88251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min
rank: 336
score: 99.876826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 336
score: 99.8658984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 336
score: 99.86509076286765
patch: final double bound 1 = ( i == 0 ) ? min : min + min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 336
score: 99.85965265012256
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , null , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 336
score: 99.853916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 336
score: 99.85166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( )
rank: 336
score: 99.81761259191177
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 337
score: 99.882412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 337
score: 99.87681361607143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 337
score: 99.86587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 337
score: 99.86501953125
patch: final int bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 337
score: 99.856513671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 337
score: 99.851650390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 337
score: 99.847392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 338
score: 99.876767578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) - ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 338
score: 99.865859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 338
score: 99.85961415816327
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 338
score: 99.85647269275701
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . abs ( bound 1 ) , Fast CaMeL Math . max ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 338
score: 99.85390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 338
score: 99.851640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 339
score: 99.87671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 339
score: 99.865830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 339
score: 99.859599609375
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 339
score: 99.84736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 339
score: 99.81753796728972
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 340
score: 99.882265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ ) , Fast
rank: 340
score: 99.87671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 340
score: 99.864921875
patch: final double bound 1 = ( i == 0 ) ? min + min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 340
score: 99.853837890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 340
score: 99.8516015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 341
score: 99.87671160954301
patch: final double bound 1 = ( i == 0 ) ? min : min + max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 341
score: 99.8594970703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 341
score: 99.85639055198598
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 341
score: 99.847333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 341
score: 99.81749233352804
patch: final double bound 1 = min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 342
score: 99.8822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 342
score: 99.87669921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 342
score: 99.86582438151042
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) , bound $NUMBER$ ) ;
rank: 342
score: 99.853759765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . get CaMeL Value ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 342
score: 99.85154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 342
score: 99.847314453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 343
score: 99.882197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 343
score: 99.85948988970588
patch: final double bound 1 = ( i == 0 ) ? 0 : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 343
score: 99.856298828125
patch: final double [ ] bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 343
score: 99.85152264030613
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 343
score: 99.8473046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 343
score: 99.817412109375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 344
score: 99.8821875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; if ( Fast CaMeL Math . max ( bound 1 , bound
rank: 344
score: 99.86576171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 <= bound $NUMBER$ ) ) ;
rank: 344
score: 99.85947929308253
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 344
score: 99.8562890625
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 344
score: 99.85370304608585
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 344
score: 99.847255859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 345
score: 99.876650390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 345
score: 99.865751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 345
score: 99.86484183517157
patch: final double bound 1 = ( ( i == 0 ) ? min : min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 345
score: 99.853681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 345
score: 99.851484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 345
score: 99.81735491071429
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 346
score: 99.876611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min
rank: 346
score: 99.86572265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast
rank: 346
score: 99.86481861076733
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 346
score: 99.859443359375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 346
score: 99.8560755461165
patch: final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 346
score: 99.8536328125
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 346
score: 99.847236328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 346
score: 99.81734630549066
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 347
score: 99.88212492028062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 347
score: 99.865703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 347
score: 99.86479927289604
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 347
score: 99.85939414828431
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 347
score: 99.85607421875
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 347
score: 99.85361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , start CaMeL Value ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 347
score: 99.847177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * (
rank: 347
score: 99.81734596108491
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 348
score: 99.882109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min
rank: 348
score: 99.86476602359694
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 348
score: 99.85361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 348
score: 99.847158203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 348
score: 99.81734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = goal . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 349
score: 99.882109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 349
score: 99.87642578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 349
score: 99.865654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 349
score: 99.864765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 349
score: 99.859375
patch: final double bound 1 = ( i == 0 - min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 349
score: 99.856044921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 349
score: 99.85141453598484
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 349
score: 99.847138671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 349
score: 99.81734375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 350
score: 99.87640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 350
score: 99.86564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 350
score: 99.8593451052296
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 350
score: 99.8560431985294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 350
score: 99.85353515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 350
score: 99.847138671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) , Fast CaMeL
rank: 351
score: 99.86473159034654
patch: final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 351
score: 99.85934448242188
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 351
score: 99.85600490196079
patch: final double [ ] bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 351
score: 99.853525390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( $STRING$ , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 351
score: 99.851396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 351
score: 99.847099609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 352
score: 99.8763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 352
score: 99.865625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 352
score: 99.85932712928921
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 352
score: 99.855966796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( null , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 352
score: 99.85134765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 352
score: 99.847099609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 353
score: 99.88205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 353
score: 99.876357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 )
rank: 353
score: 99.865595703125
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 353
score: 99.8534375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 353
score: 99.85126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 353
score: 99.84708984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 )
rank: 353
score: 99.817275390625
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 354
score: 99.882041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 354
score: 99.86556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 354
score: 99.85342881944445
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 354
score: 99.84703125
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 355
score: 99.876318359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double (
rank: 355
score: 99.85925053615196
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 355
score: 99.85594223484848
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 355
score: 99.8533984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 355
score: 99.84703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 355
score: 99.81726416471963
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 356
score: 99.882001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 356
score: 99.8655078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 356
score: 99.851171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 356
score: 99.847001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 356
score: 99.81726416471963
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 357
score: 99.865498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) , Fast CaMeL Math . max ( bound 1
rank: 357
score: 99.864677734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 357
score: 99.85592508761682
patch: final double [ ] bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 357
score: 99.85332433956185
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 357
score: 99.81721047794117
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 358
score: 99.859208984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 358
score: 99.855849609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max $NUMBER$ ) ) ;
rank: 358
score: 99.85330078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final boolean bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.876201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 359
score: 99.86548132183908
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.8646484375
patch: final double bound 1 = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.85920758928572
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.8558203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.853173828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? start : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.85103515625
patch: final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 359
score: 99.81720027745327
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 360
score: 99.876171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer
rank: 360
score: 99.86546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 != bound $NUMBER$ ) ) ;
rank: 360
score: 99.864638671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( $NUMBER$ - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 360
score: 99.85920516304348
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 360
score: 99.855791015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 360
score: 99.8531640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 360
score: 99.846904296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 )
rank: 361
score: 99.876162109375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 361
score: 99.865439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 361
score: 99.85920266544117
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 361
score: 99.85310546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 361
score: 99.8468359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 361
score: 99.81717289719626
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 362
score: 99.881845703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 362
score: 99.876083984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 362
score: 99.8645703125
patch: final String bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 362
score: 99.85575534986413
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 362
score: 99.846826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 362
score: 99.81716086647727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 363
score: 99.881796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 363
score: 99.876083984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 363
score: 99.855751953125
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 363
score: 99.85095703125
patch: final double bound 1 = ( i == 0 ) ? min : start + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 363
score: 99.846826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 363
score: 99.81715249115567
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 364
score: 99.87607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 364
score: 99.865390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 364
score: 99.86454341096699
patch: final double bound 1 = ( i == 0 ) ? min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 364
score: 99.859111328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( $NUMBER$ - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 364
score: 99.850947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 364
score: 99.846806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) * (
rank: 365
score: 99.87607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 365
score: 99.865380859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 365
score: 99.86448700573979
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 365
score: 99.85298828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 365
score: 99.850947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; if ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) { optima [
rank: 365
score: 99.846806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double (
rank: 365
score: 99.81710759943182
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 366
score: 99.8817578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 366
score: 99.86537109375
patch: final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 366
score: 99.864453125
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 366
score: 99.85560546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 366
score: 99.852978515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 366
score: 99.8509375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 366
score: 99.817099609375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 367
score: 99.87605794270833
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 367
score: 99.865361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 367
score: 99.85903695913461
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 367
score: 99.8529296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 367
score: 99.846748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 367
score: 99.81707643995098
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 368
score: 99.88167317708333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 368
score: 99.8589863679847
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 368
score: 99.85552734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 368
score: 99.817041015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 369
score: 99.881669921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * (
rank: 369
score: 99.87603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 369
score: 99.8652734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ , bound $NUMBER$
rank: 369
score: 99.855478515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 369
score: 99.84671995811856
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 ;
rank: 370
score: 99.88166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 370
score: 99.876005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math . max ( bound
rank: 370
score: 99.86525390625
patch: final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 370
score: 99.86434823495371
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 370
score: 99.85541015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 370
score: 99.84662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0
rank: 370
score: 99.817021484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 371
score: 99.865224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 371
score: 99.8643359375
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 371
score: 99.85894416360294
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 371
score: 99.85540238167475
patch: final double bound 1 = ( ( double ) i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 371
score: 99.852880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 371
score: 99.846552734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 372
score: 99.88162109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min (
rank: 372
score: 99.86516462053571
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 372
score: 99.85894097222223
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 372
score: 99.8554017310049
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 372
score: 99.852763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 373
score: 99.881552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 373
score: 99.87595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 373
score: 99.85887276785714
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 373
score: 99.85088488520408
patch: bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 373
score: 99.81693070023148
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 374
score: 99.881513671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 374
score: 99.86513671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 374
score: 99.85537300857843
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 374
score: 99.85266397165698
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 374
score: 99.84649226641415
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 375
score: 99.87591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 375
score: 99.86429610906863
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 375
score: 99.85881952408256
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 375
score: 99.846484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 376
score: 99.88142578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 376
score: 99.8758984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 376
score: 99.86512936827957
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 376
score: 99.86427734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( 1 - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 376
score: 99.8588005514706
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 376
score: 99.85537109375
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 376
score: 99.85263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) ,
rank: 376
score: 99.8168810923165
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 377
score: 99.865126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 377
score: 99.86427589699075
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 377
score: 99.852607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 377
score: 99.850810546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 377
score: 99.846455078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 378
score: 99.881396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 378
score: 99.8651171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 378
score: 99.85874924150485
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 378
score: 99.8553466796875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 378
score: 99.852568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 378
score: 99.850810546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . i = optimizer . optimize ( f , goal
rank: 378
score: 99.84638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max -
rank: 378
score: 99.816796875
patch: final double bound 1 = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 379
score: 99.87580078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 379
score: 99.86501953125
patch: final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 379
score: 99.86423808396465
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 379
score: 99.85873325892857
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 379
score: 99.8553125
patch: final double char 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 379
score: 99.85254902742346
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 379
score: 99.8463671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 380
score: 99.881376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min )
rank: 380
score: 99.864990234375
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 380
score: 99.858720703125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 380
score: 99.85529470915841
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) ) ;
rank: 380
score: 99.850791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 381
score: 99.881376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( ( i == 0 ) ? max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 381
score: 99.875771484375
patch: final double bound 1 = ( i == 0 ) ? min : min + f . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 381
score: 99.864990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) )
rank: 381
score: 99.864208984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 381
score: 99.85869738520408
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 381
score: 99.850732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( double ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize
rank: 381
score: 99.84634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( double ) min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 381
score: 99.816787109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = this . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 382
score: 99.88135850694445
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 382
score: 99.87572265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 382
score: 99.864990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 382
score: 99.864208984375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 382
score: 99.852392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 382
score: 99.850712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 382
score: 99.84634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 382
score: 99.81676219334112
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 383
score: 99.875712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 383
score: 99.86419979888613
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 383
score: 99.85867617545871
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 383
score: 99.8167563384434
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 384
score: 99.88130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 384
score: 99.86416112314356
patch: final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 384
score: 99.852353515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 384
score: 99.8167136863426
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 385
score: 99.8812890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 385
score: 99.87568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 385
score: 99.86414178527228
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 385
score: 99.85861650485437
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 385
score: 99.855205078125
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 385
score: 99.846318359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 385
score: 99.81669921875
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 386
score: 99.88124593098958
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 386
score: 99.86498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 386
score: 99.864130859375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 386
score: 99.85858992034314
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 386
score: 99.852255859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 386
score: 99.850615234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 386
score: 99.84626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 387
score: 99.88124150815217
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 387
score: 99.87565768494898
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 387
score: 99.8648828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 387
score: 99.858583984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 387
score: 99.855185546875
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 387
score: 99.852255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 387
score: 99.816669921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 388
score: 99.881220703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 388
score: 99.875595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 388
score: 99.8648828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 388
score: 99.85224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 388
score: 99.850595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max ) , Fast CaMeL Math . max
rank: 388
score: 99.846220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 388
score: 99.81664806547619
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 389
score: 99.881201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 389
score: 99.87556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 389
score: 99.864111328125
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 389
score: 99.8584696451823
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 389
score: 99.8551776592548
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , start CaMeL Value ) ;
rank: 389
score: 99.8166344188084
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 390
score: 99.875537109375
patch: final double bound 1 = ( i == 0 ) ? i : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 390
score: 99.864091796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , false , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 390
score: 99.85846891108247
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 390
score: 99.85517578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 390
score: 99.852177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 390
score: 99.850576171875
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 391
score: 99.881201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 391
score: 99.87552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 391
score: 99.864853515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 391
score: 99.86408600983796
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 391
score: 99.85846819196429
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 391
score: 99.8521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 391
score: 99.850546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 392
score: 99.875517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i
rank: 392
score: 99.86482421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 392
score: 99.86404296875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 392
score: 99.855087890625
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 392
score: 99.81655365566037
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 393
score: 99.864814453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = generator . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 ,
rank: 393
score: 99.86400462962963
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 393
score: 99.85842895507812
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 393
score: 99.8504296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 394
score: 99.8811328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max 1 , bound $NUMBER$ ) , Fast
rank: 394
score: 99.858408203125
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 394
score: 99.855068359375
patch: final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 394
score: 99.8460546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 395
score: 99.875390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 395
score: 99.86478595344387
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 395
score: 99.85504495872641
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 395
score: 99.81650390625
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 396
score: 99.87537109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ) ; optima [
rank: 396
score: 99.8582987882653
patch: try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 396
score: 99.85503791360294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - max ) ;
rank: 396
score: 99.8519866635101
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 396
score: 99.8164536559466
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 397
score: 99.8582643995098
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 397
score: 99.850361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 397
score: 99.84595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 397
score: 99.81644241898148
patch: final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 398
score: 99.864736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 398
score: 99.85193359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 398
score: 99.85034677933673
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 398
score: 99.84593955592105
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 398
score: 99.81642450350468
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 399
score: 99.875361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 399
score: 99.8639453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 399
score: 99.85818780637256
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 399
score: 99.85489662247475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , $NUMBER$ ) ) ;
rank: 399
score: 99.8459375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 400
score: 99.880927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 400
score: 99.875302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 400
score: 99.86393893494898
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 400
score: 99.85489327566964
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 400
score: 99.8459375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 401
score: 99.875263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 401
score: 99.86466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 401
score: 99.86391900510205
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 401
score: 99.85818452380953
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 401
score: 99.85489039745146
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 401
score: 99.851787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch
rank: 401
score: 99.8459375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 402
score: 99.880869140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 402
score: 99.87525169136597
patch: final double bound 1 = ( i == 0 ) ? min : min + Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 402
score: 99.864658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 402
score: 99.86391314338235
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 402
score: 99.85816924426021
patch: final double bound 1 = ( i == 0 ? min : generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 402
score: 99.85487717848558
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 402
score: 99.8503125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 402
score: 99.84591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 403
score: 99.880849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 403
score: 99.864658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 403
score: 99.854873046875
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 403
score: 99.85177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( max - min ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 403
score: 99.85030973800505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 403
score: 99.84591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 404
score: 99.880791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 404
score: 99.875185546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize (
rank: 404
score: 99.85804501488096
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 404
score: 99.85483685661765
patch: final double bound 1 = min : ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 404
score: 99.85172358247422
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 404
score: 99.850263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 405
score: 99.88078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 405
score: 99.85481770833333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 405
score: 99.85171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) - ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 405
score: 99.85025390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ,
rank: 405
score: 99.84587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 406
score: 99.88076685855263
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 406
score: 99.87515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 406
score: 99.864599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 406
score: 99.85801511390187
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 406
score: 99.85169921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 406
score: 99.81627847546729
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 407
score: 99.87515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound
rank: 407
score: 99.8645703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? min : min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 407
score: 99.8638556985294
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 407
score: 99.8580078125
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 407
score: 99.85474609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 407
score: 99.85169073547979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( 0 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 407
score: 99.845849609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 < bound $NUMBER$ ) ) ;
rank: 408
score: 99.87513671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 408
score: 99.86451171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 408
score: 99.85795998086735
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 408
score: 99.85474537037037
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 408
score: 99.8516796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 408
score: 99.85020123106061
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . i = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 408
score: 99.845849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 408
score: 99.81620896464646
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 409
score: 99.880673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 409
score: 99.8751171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize
rank: 409
score: 99.86379825367646
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 409
score: 99.857880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 409
score: 99.8547265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $STRING$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 409
score: 99.85017578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 409
score: 99.81619561887256
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 410
score: 99.8750636888587
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 410
score: 99.86378946109694
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 410
score: 99.85787631497524
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 410
score: 99.851591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 410
score: 99.84583984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 410
score: 99.81615485767327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 411
score: 99.87504932133838
patch: double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 411
score: 99.85784040178571
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 411
score: 99.851591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 411
score: 99.850126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 411
score: 99.84583984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , next
rank: 411
score: 99.81615234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 412
score: 99.85783400229357
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 412
score: 99.851572265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 412
score: 99.850126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + start + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 412
score: 99.845830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 413
score: 99.880576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * (
rank: 413
score: 99.86443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 413
score: 99.863681640625
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 413
score: 99.854638671875
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 413
score: 99.851484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 413
score: 99.850126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 413
score: 99.8458203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 414
score: 99.8805078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize
rank: 414
score: 99.875029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 414
score: 99.864384765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 414
score: 99.85774094987623
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 414
score: 99.85461996203271
patch: final double [ ] bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 414
score: 99.8501223169192
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 414
score: 99.845791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 414
score: 99.81591796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 415
score: 99.880498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 415
score: 99.87501953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 415
score: 99.8576953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 415
score: 99.854580078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 415
score: 99.851455078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 415
score: 99.81589515186916
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 416
score: 99.880498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 416
score: 99.875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 416
score: 99.864384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 )
rank: 416
score: 99.86364506740196
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 416
score: 99.85767742406541
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 416
score: 99.85144168814433
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 416
score: 99.850078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 416
score: 99.845771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = min + generator . next CaMeL
rank: 416
score: 99.81585751488095
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 417
score: 99.880458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 417
score: 99.86437739158163
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 417
score: 99.85767578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 417
score: 99.8545592064951
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 417
score: 99.850068359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 417
score: 99.84576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 417
score: 99.81584951810747
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 418
score: 99.857666015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 418
score: 99.851416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 418
score: 99.8500335385101
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 418
score: 99.81578480113636
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 419
score: 99.8749609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 419
score: 99.857646484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( 1 - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 419
score: 99.85138671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( double ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 419
score: 99.84563407512626
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ;
rank: 419
score: 99.81578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 420
score: 99.87494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( min , bound $NUMBER$ ) , Fast CaMeL Math
rank: 420
score: 99.86358642578125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 420
score: 99.851376953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 420
score: 99.84560546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 420
score: 99.81575520833333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 421
score: 99.864306640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 421
score: 99.86358098700495
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 421
score: 99.85759127869898
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 421
score: 99.85439453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 421
score: 99.8455859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 421
score: 99.81575213738208
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 422
score: 99.88025390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 422
score: 99.8748828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 422
score: 99.86357421875
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 422
score: 99.851279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 422
score: 99.845576171875
patch: final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 423
score: 99.880234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 423
score: 99.86427734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 423
score: 99.86353515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 423
score: 99.857548828125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 423
score: 99.849970703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 423
score: 99.84556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 423
score: 99.81572265625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 424
score: 99.874853515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 424
score: 99.864248046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 424
score: 99.86352297339108
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 424
score: 99.85435133713942
patch: final double [ ] [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 424
score: 99.84994140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 424
score: 99.845546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 424
score: 99.81571377840909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 425
score: 99.880146484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 425
score: 99.87484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 425
score: 99.864169921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 425
score: 99.85754513046116
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 425
score: 99.849931640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 425
score: 99.81570870535714
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 426
score: 99.880146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , ( max - min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 426
score: 99.864169921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 426
score: 99.851201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 426
score: 99.84990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 426
score: 99.845478515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 426
score: 99.815693359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 427
score: 99.86416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) )
rank: 427
score: 99.85743194265464
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 427
score: 99.85119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new Univariate CaMeL Real CaMeL Point
rank: 427
score: 99.849873046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 427
score: 99.84546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 428
score: 99.880078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 428
score: 99.87482421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 428
score: 99.86416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 428
score: 99.86346061862245
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 428
score: 99.85741248497597
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( ( max - min ) - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 428
score: 99.85119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 428
score: 99.84986328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 428
score: 99.84545651830808
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min ) , bound $NUMBER$ ) ;
rank: 428
score: 99.81564453125
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 429
score: 99.880068359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 429
score: 99.86416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( i ,
rank: 429
score: 99.86345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 429
score: 99.85429880878714
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ 1 ) ) ;
rank: 429
score: 99.851171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . get CaMeL Value ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 429
score: 99.845439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound
rank: 429
score: 99.81564360119047
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 430
score: 99.880029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 430
score: 99.86412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 430
score: 99.85429113051471
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 430
score: 99.849833984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal . Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 431
score: 99.88001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 431
score: 99.87479440789474
patch: final double bound 1 = ( i == 0 ) ? min : Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 431
score: 99.86409859035327
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 431
score: 99.85737205038265
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 431
score: 99.854287109375
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 432
score: 99.874736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 432
score: 99.86408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , null
rank: 432
score: 99.86332152061856
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 432
score: 99.85736498786407
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 432
score: 99.851162109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ,
rank: 433
score: 99.8640234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 433
score: 99.85426240808823
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 433
score: 99.85114694148936
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 433
score: 99.849775390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 433
score: 99.84541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * (
rank: 434
score: 99.874716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 434
score: 99.864013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 434
score: 99.86329111426768
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 434
score: 99.85732797475961
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( max - min ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 434
score: 99.85426013304455
patch: final double bound 1 = ( i < bound 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 434
score: 99.815556640625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 435
score: 99.879970703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min
rank: 435
score: 99.874638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 435
score: 99.8632342998798
patch: final double bound 1 = ( i == 0 ) ? min : min - min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 435
score: 99.8573222257653
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 435
score: 99.854248046875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 435
score: 99.85107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 435
score: 99.849736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 435
score: 99.81553920852804
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 436
score: 99.8799609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + optima . next CaMeL Double ( ) * ( max -
rank: 436
score: 99.863984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 436
score: 99.86323142538265
patch: final double bound 1 = ( i >= 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 436
score: 99.85724846670561
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 436
score: 99.849736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 436
score: 99.845390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , min ) , Fast CaMeL
rank: 437
score: 99.86392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 437
score: 99.85418639520202
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 != 0 ) ) ;
rank: 437
score: 99.85103515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 437
score: 99.84537109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 438
score: 99.87990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 438
score: 99.874619140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 438
score: 99.86391813858695
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 438
score: 99.86314588490099
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 438
score: 99.857158203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 438
score: 99.854140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 438
score: 99.8509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + generator . next CaMeL Double ( ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 438
score: 99.84537109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 439
score: 99.874609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 439
score: 99.86314588490099
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ! optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 439
score: 99.854140625
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 439
score: 99.849677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 439
score: 99.81544794100468
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 440
score: 99.8798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + goal . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 440
score: 99.874599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound 1 ) , Fast CaMeL Math . max ( bound 1 ,
rank: 440
score: 99.86314315025253
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 440
score: 99.85708678002452
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 440
score: 99.854130859375
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 440
score: 99.85095703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . get CaMeL Value ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 440
score: 99.81537224264706
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 441
score: 99.87455078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 441
score: 99.8570676317402
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 441
score: 99.85091796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 441
score: 99.849619140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 441
score: 99.81535993303571
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 442
score: 99.87984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 442
score: 99.874541015625
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 442
score: 99.86388671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 442
score: 99.85701331313776
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 442
score: 99.845234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 442
score: 99.81533104482324
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 443
score: 99.879833984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 443
score: 99.874462890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 443
score: 99.8570006127451
patch: final double bound 1 = ( i == 0 ) ? min : min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 443
score: 99.85406553398059
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 443
score: 99.84958964646465
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , max ) ) ;
rank: 443
score: 99.845224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 443
score: 99.815322265625
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 444
score: 99.87982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 444
score: 99.87443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] =
rank: 444
score: 99.86384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 444
score: 99.85691444546569
patch: final double bound 1 = ( i == 0 ) ? min : max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 444
score: 99.850791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch ( Function CaMeL Evaluation
rank: 444
score: 99.8495703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 444
score: 99.84517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 445
score: 99.879814453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 445
score: 99.87443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 445
score: 99.863837890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min
rank: 445
score: 99.8540508563702
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max == 0 ? max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 445
score: 99.84953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . set ( f , goal , Fast CaMeL Math
rank: 445
score: 99.845166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 446
score: 99.874423828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 446
score: 99.86380859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , generator . next CaMeL Double ( ) ) * ( max - min )
rank: 446
score: 99.85681640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 446
score: 99.85404911747685
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + generator . next CaMeL Double ( ) ) ;
rank: 446
score: 99.850771484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 446
score: 99.84953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ ,
rank: 446
score: 99.815244140625
patch: final double bound 1 = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 447
score: 99.879814453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 447
score: 99.874423828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 447
score: 99.86380476804123
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 447
score: 99.86280719053399
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 447
score: 99.85677680619266
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 447
score: 99.85403584988318
patch: final double bound 1 = min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 447
score: 99.85074376578282
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 447
score: 99.845126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 447
score: 99.815224609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 448
score: 99.879794921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 448
score: 99.874384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) / ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 448
score: 99.8637890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 448
score: 99.85677415497449
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 448
score: 99.8539453125
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 448
score: 99.85072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 448
score: 99.845107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 448
score: 99.81521484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 449
score: 99.879775390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 449
score: 99.874296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 449
score: 99.863740234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = generator . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 ,
rank: 449
score: 99.85674504950495
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 449
score: 99.850712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , - $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 449
score: 99.84509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = Fast CaMeL Math . min (
rank: 449
score: 99.815166015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 450
score: 99.87421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ 0 ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 450
score: 99.85668466605392
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 450
score: 99.853876953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 450
score: 99.850712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 450
score: 99.845078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 451
score: 99.879755859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 451
score: 99.87419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 451
score: 99.86369140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 451
score: 99.86275912747524
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 451
score: 99.85666454081633
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 451
score: 99.85386029411765
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 451
score: 99.849404296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 451
score: 99.81511374080883
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 452
score: 99.879736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final boolean bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 452
score: 99.874189453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 452
score: 99.86369077620968
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 452
score: 99.86274857954545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 452
score: 99.8506747159091
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 452
score: 99.84940222537878
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 453
score: 99.87416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] =
rank: 453
score: 99.863623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 453
score: 99.85657804915049
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 453
score: 99.844990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 454
score: 99.874150390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 454
score: 99.86356175199468
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 454
score: 99.86270254629629
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 454
score: 99.85653573495371
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 454
score: 99.853681640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 454
score: 99.849384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 454
score: 99.8449609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 455
score: 99.8741015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 455
score: 99.8635546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 455
score: 99.862685546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( value == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 455
score: 99.85651506696429
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 455
score: 99.8536496629902
patch: final double [ ] bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 455
score: 99.850634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 455
score: 99.84935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 456
score: 99.879677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 456
score: 99.874052734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) + generator . next CaMeL Double (
rank: 456
score: 99.8635546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 456
score: 99.850615234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Boolean ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 456
score: 99.849345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 456
score: 99.84490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 456
score: 99.81504711662372
patch: final double bound 1 = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 457
score: 99.879677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound
rank: 457
score: 99.8635546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 457
score: 99.862646484375
patch: final double bound 1 = ( i == 0 ) ? min : 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 457
score: 99.85647647938829
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 457
score: 99.85363888046116
patch: final double bound 1 = ( double ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 457
score: 99.850615234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) - ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 457
score: 99.849326171875
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 457
score: 99.84490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 457
score: 99.815029296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 458
score: 99.8796484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 458
score: 99.87396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 458
score: 99.85646565755208
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 458
score: 99.853623046875
patch: final Integer bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 458
score: 99.850595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 458
score: 99.844892578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = next CaMeL Double ( ) *
rank: 458
score: 99.815
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 459
score: 99.87962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 459
score: 99.873935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 459
score: 99.86353515625
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 459
score: 99.86262335526315
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 459
score: 99.85642578125
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 459
score: 99.85360095570388
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 , bound $NUMBER$ ) ) ;
rank: 459
score: 99.8505859375
patch: final boolean bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 459
score: 99.849248046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , min , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 460
score: 99.87962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 460
score: 99.87392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final long bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 460
score: 99.86351799242425
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 460
score: 99.8626171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 460
score: 99.85642496744792
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 460
score: 99.850576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( generator . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 460
score: 99.849169921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double
rank: 460
score: 99.844755859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 461
score: 99.879599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) )
rank: 461
score: 99.856396484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 461
score: 99.85357142857143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations ++ ;
rank: 461
score: 99.84916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . set ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 461
score: 99.81495098039215
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 462
score: 99.873896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 462
score: 99.863515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? min :
rank: 462
score: 99.86259191176471
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 462
score: 99.8447265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 462
score: 99.81494140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 463
score: 99.879580078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 463
score: 99.87388671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 463
score: 99.863466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 463
score: 99.86258499710648
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 463
score: 99.85353477328431
patch: final double [ ] bound 1 = ( double [ ] ) optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 463
score: 99.850517578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 463
score: 99.844716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 463
score: 99.81491858936916
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 464
score: 99.879580078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 464
score: 99.87387084960938
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 464
score: 99.849091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 464
score: 99.81490688131314
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 465
score: 99.873828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 465
score: 99.86252065805289
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 465
score: 99.84904296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 465
score: 99.84470703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 465
score: 99.81489534198113
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 466
score: 99.879501953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound
rank: 466
score: 99.873818359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 466
score: 99.86251953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double start $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 466
score: 99.85628568209134
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 466
score: 99.85046756628788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 466
score: 99.849033203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( int ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 466
score: 99.8446875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 467
score: 99.879443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 467
score: 99.86249617034314
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 467
score: 99.85619889018692
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 467
score: 99.8504296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Boolean ( ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 467
score: 99.84466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 468
score: 99.879404296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min
rank: 468
score: 99.86248046875
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 468
score: 99.856162109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 468
score: 99.8504296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 468
score: 99.8490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 468
score: 99.84466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 468
score: 99.8148046875
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 469
score: 99.86341796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 469
score: 99.86246905940594
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 469
score: 99.85329541973039
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + min ) ;
rank: 469
score: 99.84899779040404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 469
score: 99.84466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 469
score: 99.81476343457943
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 470
score: 99.879375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 470
score: 99.8624609375
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 470
score: 99.8560865752551
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 470
score: 99.85041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 470
score: 99.848994140625
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 470
score: 99.8446484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 470
score: 99.81475074404761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 471
score: 99.879375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 471
score: 99.87375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max ,
rank: 471
score: 99.863408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 471
score: 99.86231465242346
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 471
score: 99.85606971153847
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 471
score: 99.85040932513297
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 471
score: 99.84896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - generator . next CaMeL Double ( ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - generator . next CaMeL Double ( ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 471
score: 99.844638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 472
score: 99.87375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 472
score: 99.8633984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final String bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 472
score: 99.862265625
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 472
score: 99.85606971153847
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 472
score: 99.81474247685185
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 473
score: 99.87933677755376
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max - min ) ;
rank: 473
score: 99.87375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 473
score: 99.863369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 473
score: 99.85604858398438
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 473
score: 99.853154296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == i ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 473
score: 99.85037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 473
score: 99.848935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 473
score: 99.84458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 474
score: 99.879287109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 474
score: 99.87373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) *
rank: 474
score: 99.863369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 474
score: 99.850322265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( max - min ) : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 475
score: 99.8737109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 475
score: 99.862197265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 475
score: 99.85592830882354
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 475
score: 99.85310546875
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 475
score: 99.8502734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( true , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 475
score: 99.84890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 476
score: 99.879169921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - max
rank: 476
score: 99.87370778093434
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 476
score: 99.86334635416667
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 476
score: 99.85307085396039
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 476
score: 99.850244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 476
score: 99.848896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 476
score: 99.844541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ )
rank: 476
score: 99.8146502293578
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 477
score: 99.87916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 477
score: 99.87369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 477
score: 99.850205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 477
score: 99.848896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 477
score: 99.84447995580808
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 478
score: 99.8791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 478
score: 99.87369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 478
score: 99.86333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 478
score: 99.8621369949495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( i , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 478
score: 99.855712890625
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 478
score: 99.85305151608911
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 478
score: 99.85017578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( 0 , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 478
score: 99.848896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 478
score: 99.81462427512886
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 479
score: 99.8791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 479
score: 99.873671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 479
score: 99.86333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 479
score: 99.852998046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 479
score: 99.84447265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 479
score: 99.81454439252336
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 480
score: 99.8736647002551
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 480
score: 99.86333057133838
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 480
score: 99.85567294034091
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 480
score: 99.852998046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 480
score: 99.8488671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 480
score: 99.844462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 481
score: 99.87908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 481
score: 99.863330078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 481
score: 99.85563815369898
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 481
score: 99.85298467839806
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 481
score: 99.848798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 481
score: 99.81449104975728
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 482
score: 99.873623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 482
score: 99.85562345297029
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 482
score: 99.85295118979357
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 482
score: 99.85005779655613
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 482
score: 99.81444399824767
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 483
score: 99.879072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 483
score: 99.87361391129032
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 483
score: 99.8620135967548
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 483
score: 99.85560825892857
patch: final double bound 1 = ( i < 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 483
score: 99.85003786670919
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 483
score: 99.84876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 483
score: 99.844384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 483
score: 99.81443397671569
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , 0 , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 484
score: 99.85559444616337
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 484
score: 99.85294515779702
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 484
score: 99.850009765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 484
score: 99.848759765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( double ) ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 484
score: 99.844345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 484
score: 99.81442411819307
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 485
score: 99.87357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max
rank: 485
score: 99.863271484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 485
score: 99.86200788909314
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 485
score: 99.8555196126302
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 485
score: 99.848720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 486
score: 99.879013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( bound 1
rank: 486
score: 99.8734765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , new
rank: 486
score: 99.86198561262377
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 486
score: 99.85546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 486
score: 99.849990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 486
score: 99.8487109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 486
score: 99.844306640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 486
score: 99.814404296875
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 487
score: 99.87343158143939
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 487
score: 99.863271484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 487
score: 99.8619504442402
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 487
score: 99.85546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 487
score: 99.8529296875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 487
score: 99.849990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? - max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 487
score: 99.844296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 488
score: 99.878916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 488
score: 99.8733984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 488
score: 99.86327138573232
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 488
score: 99.861943359375
patch: final int bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 488
score: 99.85545917585785
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 488
score: 99.84998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 488
score: 99.84869140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double goal $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 488
score: 99.81439511138613
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 489
score: 99.873359375
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 489
score: 99.86326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ; optima [ i ] = optimizer . optimize (
rank: 489
score: 99.86193359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 489
score: 99.85540771484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = null ;
rank: 489
score: 99.8528977997449
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 489
score: 99.84998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 489
score: 99.84869140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 489
score: 99.844287109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Double
rank: 489
score: 99.81439453125
patch: final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 490
score: 99.873349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( generator . next CaMeL Double ( ) , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 490
score: 99.863251953125
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 490
score: 99.86193359375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 490
score: 99.85539215686275
patch: final double bound 1 = ( i == 0 ) ? min : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 490
score: 99.848681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 490
score: 99.84427734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double (
rank: 491
score: 99.8733203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 491
score: 99.863251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * (
rank: 491
score: 99.86191030649039
patch: final int bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 491
score: 99.84993489583333
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 491
score: 99.848662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 491
score: 99.844267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 491
score: 99.8143527307243
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 492
score: 99.873310546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 492
score: 99.8632421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 492
score: 99.8618834252451
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 492
score: 99.85534917091837
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 492
score: 99.8528515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 492
score: 99.849931640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 492
score: 99.8442578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = Fast CaMeL Math . min (
rank: 493
score: 99.87876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 493
score: 99.873291015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 493
score: 99.85532924107143
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 493
score: 99.85284485479798
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , i ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 493
score: 99.849931640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 493
score: 99.844248046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 493
score: 99.81425965507076
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 494
score: 99.87326171875
patch: final int bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 494
score: 99.85532633463542
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 494
score: 99.85283203125
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 494
score: 99.84861328125
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 494
score: 99.81423828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 495
score: 99.87873046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 495
score: 99.87326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 495
score: 99.86322265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 495
score: 99.86180683210785
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 495
score: 99.84423828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 496
score: 99.873251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 496
score: 99.863212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 496
score: 99.861806640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , true , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 496
score: 99.85529852350918
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 496
score: 99.84986328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 496
score: 99.84861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) - min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 496
score: 99.84419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 496
score: 99.81414794921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 497
score: 99.8787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 497
score: 99.873193359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound
rank: 497
score: 99.863125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f
rank: 497
score: 99.85526268635321
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 497
score: 99.852802734375
patch: final String bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 497
score: 99.84984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( generator . next CaMeL Double ( ) * ( max - min ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 497
score: 99.84859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 497
score: 99.814130859375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound 1 ) ) ;
rank: 498
score: 99.87869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 498
score: 99.85524854473039
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 498
score: 99.85279224537037
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 498
score: 99.84412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 498
score: 99.81411180218447
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 499
score: 99.861787109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 499
score: 99.849833984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( new , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 499
score: 99.844111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final
rank: 500
score: 99.878671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ? max
rank: 500
score: 99.87314138104838
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 500
score: 99.86177734375
patch: final double bound 1 = ( i == 0 ) ? min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 500
score: 99.855224609375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 500
score: 99.85276594065657
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 500
score: 99.849833984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 500
score: 99.8485546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 501
score: 99.878623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 501
score: 99.85520582932692
patch: try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 501
score: 99.8527614480198
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 501
score: 99.8498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 501
score: 99.848515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 501
score: 99.8440625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) , Fast CaMeL Math . max
rank: 501
score: 99.814072265625
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 502
score: 99.87861328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 502
score: 99.873115234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 502
score: 99.862998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * (
rank: 502
score: 99.855205078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 502
score: 99.85275390625
patch: final double bound 1 = ( i == 0 ) ? i : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 503
score: 99.878603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , min
rank: 503
score: 99.86298828125
patch: final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 503
score: 99.85520327669903
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 503
score: 99.849765625
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 503
score: 99.84404296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + optima . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 504
score: 99.878603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Integer
rank: 504
score: 99.86296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( i , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 504
score: 99.861748046875
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 504
score: 99.85274969362744
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 504
score: 99.84974609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 504
score: 99.84849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 504
score: 99.844033203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 504
score: 99.81401599702382
patch: final double bound 1 = max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 505
score: 99.87859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + optimizer . next CaMeL Double ( ) * ( max - min
rank: 505
score: 99.87301570811171
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 505
score: 99.86296559343434
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) ) ;
rank: 505
score: 99.861748046875
patch: final double bound 1 = ( i >= 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 505
score: 99.84847498421718
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 505
score: 99.84396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 506
score: 99.87859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 506
score: 99.87297415226064
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 506
score: 99.862958984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 506
score: 99.849736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 506
score: 99.848466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 506
score: 99.843955078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 506
score: 99.81399356617646
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 507
score: 99.87296549479167
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 507
score: 99.862958984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 507
score: 99.861708984375
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 507
score: 99.8497265625
patch: final double bound 1 = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 507
score: 99.813974609375
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 508
score: 99.8785546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 508
score: 99.872919921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 508
score: 99.85502115885417
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 508
score: 99.849716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 508
score: 99.84392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , optimizer . next CaMeL Double ( ) )
rank: 509
score: 99.872900390625
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 509
score: 99.85502032844387
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 509
score: 99.852685546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 509
score: 99.849697265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 509
score: 99.848369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 509
score: 99.84390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 509
score: 99.81394675925925
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 510
score: 99.878544921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch
rank: 510
score: 99.872880859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 510
score: 99.86294921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 510
score: 99.85497029622395
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 510
score: 99.85266475866337
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( bound 1 - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 510
score: 99.848271484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 510
score: 99.843896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 511
score: 99.8728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 511
score: 99.862939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 511
score: 99.86168587561882
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 511
score: 99.85494911123853
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 511
score: 99.852529296875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 511
score: 99.849638671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 511
score: 99.84826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . i = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 511
score: 99.84389264396067
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 512
score: 99.878505859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 512
score: 99.872841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 512
score: 99.86293841422872
patch: final double bound 1 = ( i == 0 ) ? min : min + min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 512
score: 99.86167279411765
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 512
score: 99.85491327408256
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 512
score: 99.8525
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 512
score: 99.849619140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 512
score: 99.843876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 512
score: 99.81390438988095
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 513
score: 99.87849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 513
score: 99.872841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 513
score: 99.8548663843458
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 513
score: 99.85242417279412
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 513
score: 99.84822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 514
score: 99.8784765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 514
score: 99.86166321997548
patch: final String bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 514
score: 99.8548046875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 514
score: 99.849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 514
score: 99.848203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 514
score: 99.84385850694444
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 515
score: 99.8728125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { i ++ ; final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 515
score: 99.862890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 515
score: 99.86163703762755
patch: final double bound 1 = ( i == 0 ) ? min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 515
score: 99.85479736328125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 515
score: 99.852412109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 515
score: 99.84958984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 515
score: 99.848173828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 515
score: 99.843857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 516
score: 99.878466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 516
score: 99.872802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 516
score: 99.862841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 516
score: 99.85479266826923
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 516
score: 99.852412109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 516
score: 99.84958984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 516
score: 99.84814453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 516
score: 99.81369140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 517
score: 99.87279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 517
score: 99.86283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 517
score: 99.85479192450495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 517
score: 99.849580078125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 517
score: 99.84810014204545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) ) ;
rank: 518
score: 99.8783984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 518
score: 99.872783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 518
score: 99.86283203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 518
score: 99.86162707270408
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 518
score: 99.85479113520408
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 518
score: 99.852373046875
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 518
score: 99.84955078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 >= bound $NUMBER$ ) ) ;
rank: 518
score: 99.8480804135101
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , max ) ) ;
rank: 518
score: 99.843828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( )
rank: 518
score: 99.81359614158163
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 519
score: 99.87837890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min (
rank: 519
score: 99.8628125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 519
score: 99.849541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) ,
rank: 519
score: 99.8134765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 520
score: 99.878369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 520
score: 99.862783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 520
score: 99.85478307845744
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 520
score: 99.84953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 520
score: 99.848056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 . 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 520
score: 99.843828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min )
rank: 520
score: 99.81335698341837
patch: final double bound 1 = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 521
score: 99.878330078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 521
score: 99.872734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 521
score: 99.8627734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 521
score: 99.861572265625
patch: final double bound 1 = ( i == 1 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 521
score: 99.8523046875
patch: final int bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 521
score: 99.84943359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 521
score: 99.848056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ) , Fast CaMeL Math .
rank: 521
score: 99.843828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 521
score: 99.81331994398585
patch: final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 522
score: 99.862763671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 522
score: 99.86155790441177
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 523
score: 99.87830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 523
score: 99.86154084158416
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ;
rank: 523
score: 99.85470145089286
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 523
score: 99.85228056066177
patch: final double [ ] bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 523
score: 99.84923828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 523
score: 99.847998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 523
score: 99.84380859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + f . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 524
score: 99.87271484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 524
score: 99.84917534722223
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 524
score: 99.847998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 524
score: 99.84376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 525
score: 99.878251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max :
rank: 525
score: 99.85468556621286
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 525
score: 99.852255859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max * min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 525
score: 99.84796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 525
score: 99.81325752044393
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 526
score: 99.87822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 526
score: 99.86148071289062
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 526
score: 99.85464537377452
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 527
score: 99.878212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] =
rank: 527
score: 99.86267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 527
score: 99.8546262254902
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 527
score: 99.843642578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 527
score: 99.813154296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 528
score: 99.87267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] =
rank: 528
score: 99.8479296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; } finally { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 528
score: 99.843623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 529
score: 99.86144770408163
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 529
score: 99.85460180165816
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 529
score: 99.84900390625
patch: final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 529
score: 99.843603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 529
score: 99.81314453125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 530
score: 99.878173828125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 530
score: 99.872666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - bound 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 530
score: 99.86265497622283
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 530
score: 99.85458984375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 530
score: 99.84897564827128
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 530
score: 99.847861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 530
score: 99.84359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , optima [ i
rank: 530
score: 99.81312575849515
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 531
score: 99.878173828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 531
score: 99.87265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima
rank: 531
score: 99.862646484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 531
score: 99.85456266108247
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 531
score: 99.85210503472223
patch: final double bound 1 = ( i == 0 ) ? min : - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 531
score: 99.848935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 531
score: 99.8478515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 531
score: 99.84349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 532
score: 99.878095703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) *
rank: 532
score: 99.8626171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 532
score: 99.85454201211735
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 532
score: 99.85210097838785
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 532
score: 99.848935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , optimizer
rank: 532
score: 99.847841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( double ) min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 532
score: 99.843466796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 532
score: 99.8130859375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . get ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 533
score: 99.86256917317708
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) , bound $NUMBER$ ) ;
rank: 533
score: 99.861435546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 0 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 533
score: 99.852041015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 533
score: 99.84892578125
patch: final double bound 1 += ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 533
score: 99.847841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 533
score: 99.813076171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 534
score: 99.87263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 534
score: 99.85451171875
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 534
score: 99.84892578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( 0 , bound $NUMBER$ ) , Fast CaMeL
rank: 534
score: 99.847841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 534
score: 99.8434375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 534
score: 99.81302734375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 535
score: 99.878076171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 535
score: 99.872568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 535
score: 99.862548828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 >= bound $NUMBER$ ) ) ;
rank: 535
score: 99.86142386642157
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 535
score: 99.854501953125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 535
score: 99.85201625631314
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 535
score: 99.84783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - start CaMeL Value ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 535
score: 99.843427734375
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 535
score: 99.81302379261363
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 536
score: 99.878056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 536
score: 99.872529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 536
score: 99.862548828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 536
score: 99.85438257334184
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 536
score: 99.85201248468137
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max : min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 536
score: 99.848876953125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 536
score: 99.847802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i
rank: 536
score: 99.843408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 536
score: 99.813017578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 537
score: 99.878046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 537
score: 99.85438028971355
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 537
score: 99.85201171875
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 537
score: 99.84886136968085
patch: final double bound 1 = ( i == 0 ) ? min : min + i * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 537
score: 99.84337890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 537
score: 99.81299284462617
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 538
score: 99.862529296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 538
score: 99.86136680074257
patch: final double bound 1 = ( i == - 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 538
score: 99.85435133713942
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 538
score: 99.85201171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 538
score: 99.848857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 538
score: 99.84779296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 538
score: 99.84337890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 539
score: 99.87802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 539
score: 99.872509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , generator . next CaMeL Double ( ) ) , Fast CaMeL Math . max ( bound 1 ,
rank: 539
score: 99.854345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 539
score: 99.85196358816964
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 539
score: 99.84882409793815
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 539
score: 99.8477734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) , Fast CaMeL
rank: 540
score: 99.878017578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( $STRING$ ,
rank: 540
score: 99.8724609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 540
score: 99.86131845606435
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 540
score: 99.85432596409575
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 540
score: 99.85194749098558
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 540
score: 99.848798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 540
score: 99.8477734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 540
score: 99.84333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 540
score: 99.81292782738095
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 541
score: 99.87236328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound
rank: 541
score: 99.862412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 541
score: 99.85425743689903
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 541
score: 99.851943359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 541
score: 99.848759765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + double + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 541
score: 99.847763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 541
score: 99.8433203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 541
score: 99.81292665351941
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 542
score: 99.862392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) )
rank: 542
score: 99.85425028669725
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 542
score: 99.85193359375
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 542
score: 99.8128770884901
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 543
score: 99.87797900883838
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 543
score: 99.87234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 543
score: 99.848720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 543
score: 99.81287109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 544
score: 99.872333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1
rank: 544
score: 99.862373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) , Fast CaMeL Math . max ( bound 1
rank: 544
score: 99.86121961805556
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 544
score: 99.85413536658653
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 544
score: 99.84773516414141
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) ) ;
rank: 545
score: 99.877861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 545
score: 99.872333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 545
score: 99.8611771101804
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 545
score: 99.8540926846591
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 545
score: 99.848701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 545
score: 99.843193359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 545
score: 99.81282874381188
patch: for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 546
score: 99.872314453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 546
score: 99.862353515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 <= bound $NUMBER$ ) ) ;
rank: 546
score: 99.85408203125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 546
score: 99.84869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 547
score: 99.854033203125
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 547
score: 99.84865234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , - $NUMBER$ ) , Fast
rank: 548
score: 99.877802734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 548
score: 99.872294921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 548
score: 99.8540285669192
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 548
score: 99.85181603064903
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 548
score: 99.84862196180555
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 548
score: 99.847685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 548
score: 99.8431640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 548
score: 99.8127749544903
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 549
score: 99.87228954081633
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 549
score: 99.8623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 549
score: 99.85402383609694
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 549
score: 99.84861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 549
score: 99.847685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 549
score: 99.843154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 549
score: 99.81276633522727
patch: for ( int i = 0 ; i < starts ; ++ i ) { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 550
score: 99.877783203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 550
score: 99.862294921875
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 550
score: 99.86108877144608
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 550
score: 99.85394227851941
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 550
score: 99.85179455445545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max 1 - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 550
score: 99.84861158288044
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 550
score: 99.843134765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 551
score: 99.8777734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 551
score: 99.87225773358585
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 551
score: 99.862294921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 551
score: 99.84765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 551
score: 99.843115234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 552
score: 99.872255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 552
score: 99.86105739480197
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 552
score: 99.85379336295871
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 552
score: 99.8517578125
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 552
score: 99.848603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) || ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 552
score: 99.843115234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 552
score: 99.81267115012886
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 553
score: 99.862294921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 553
score: 99.86105047487744
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 553
score: 99.85375478316327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 553
score: 99.848583984375
patch: final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 553
score: 99.843095703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 554
score: 99.877705078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double
rank: 554
score: 99.85374418218085
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 554
score: 99.848583984375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 554
score: 99.847626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 555
score: 99.877705078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 555
score: 99.87221575797872
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( max - min ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 555
score: 99.862275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 555
score: 99.86101217830883
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 555
score: 99.85162290592784
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 555
score: 99.84759584407216
patch: min = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 555
score: 99.81262569616337
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 556
score: 99.877685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 556
score: 99.87220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 556
score: 99.8622747927296
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 556
score: 99.853623046875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 557
score: 99.877685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 557
score: 99.872197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 557
score: 99.86227284307066
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 557
score: 99.8535826439951
patch: final int bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 557
score: 99.8485321359536
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 558
score: 99.87765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 558
score: 99.862255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ , bound $NUMBER$
rank: 558
score: 99.860986328125
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 558
score: 99.8515625
patch: final double bound 1 = ( i == 0 ) ? starts : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 558
score: 99.84850933908046
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 559
score: 99.872197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch
rank: 559
score: 99.853466796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 559
score: 99.8484765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( true , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 559
score: 99.847568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 559
score: 99.8429296875
patch: final float bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 559
score: 99.81249078714623
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 560
score: 99.872177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 560
score: 99.862197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 560
score: 99.8609619140625
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 560
score: 99.85154296875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 560
score: 99.84845703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 560
score: 99.84292602539062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min ) ) ;
rank: 560
score: 99.81248982747395
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 561
score: 99.872119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 561
score: 99.86216796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 561
score: 99.848447265625
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 561
score: 99.84755859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 562
score: 99.877587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 562
score: 99.862119140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 != bound $NUMBER$ ) ) ;
rank: 562
score: 99.86092122395833
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 562
score: 99.851474609375
patch: final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 562
score: 99.84838368941327
patch: bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 562
score: 99.847548828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 563
score: 99.877578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally { optima [ i ] = optimizer . optimize ( f , goal
rank: 563
score: 99.87208984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator
rank: 563
score: 99.862119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 563
score: 99.85335599459134
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 563
score: 99.848359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 563
score: 99.84291015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 563
score: 99.81244255514706
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 564
score: 99.87208017676768
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 564
score: 99.86210333440722
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 564
score: 99.860849609375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 564
score: 99.85333308995327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 564
score: 99.85146581064356
patch: final double double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 564
score: 99.848349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 564
score: 99.847529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$
rank: 565
score: 99.87751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + max + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 565
score: 99.872041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 565
score: 99.86208984375
patch: final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 565
score: 99.8532932394802
patch: final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 565
score: 99.85146484375
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 565
score: 99.848349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( double ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 565
score: 99.842890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 566
score: 99.877412109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 566
score: 99.862080078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 566
score: 99.85326131184895
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 566
score: 99.85144647277228
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 566
score: 99.84752801452021
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) ) ;
rank: 566
score: 99.8428515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 567
score: 99.8620703125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 567
score: 99.86083984375
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 567
score: 99.853203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 567
score: 99.851435546875
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 567
score: 99.8483203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ? min : min + generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 567
score: 99.842841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 , bound $NUMBER$ ) , Fast
rank: 568
score: 99.86083500928218
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 568
score: 99.85316051136364
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 568
score: 99.85137879022277
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 568
score: 99.848310546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 568
score: 99.847451171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound
rank: 568
score: 99.8121677673969
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 569
score: 99.86205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 569
score: 99.86079998405613
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 569
score: 99.85311245699542
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 569
score: 99.84830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 569
score: 99.84745065789474
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 569
score: 99.84279296875
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 569
score: 99.81216231016356
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 570
score: 99.871982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 570
score: 99.862041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 570
score: 99.86079633353961
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 570
score: 99.853076171875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 570
score: 99.851337890625
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 570
score: 99.84829742739899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 570
score: 99.84744140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 570
score: 99.8427734375
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 571
score: 99.871962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 571
score: 99.86079633353961
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 571
score: 99.85304103387851
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 571
score: 99.85132068452381
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 571
score: 99.842763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min )
rank: 572
score: 99.871962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1
rank: 572
score: 99.86201171875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 572
score: 99.86079545454545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 572
score: 99.85302241161617
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 572
score: 99.84820556640625
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 572
score: 99.84275390625
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 572
score: 99.81212361653645
patch: final double bound 1 = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 573
score: 99.871953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 573
score: 99.85297751913265
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 573
score: 99.84818359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 573
score: 99.81212022569444
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 574
score: 99.871953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 574
score: 99.85295336174242
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 574
score: 99.848173828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Float ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 574
score: 99.847373046875
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 574
score: 99.842734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 575
score: 99.861982421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min
rank: 575
score: 99.85291535263761
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 575
score: 99.84737141927083
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 575
score: 99.81211703431373
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 576
score: 99.86197265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 576
score: 99.86075765779702
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 576
score: 99.85120221480582
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 576
score: 99.8426953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 577
score: 99.861923828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 577
score: 99.86074771521227
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 577
score: 99.852783203125
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 577
score: 99.85119508044555
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( bound $NUMBER$ == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 577
score: 99.848134765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 577
score: 99.84267578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ?
rank: 577
score: 99.812080078125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 578
score: 99.871904296875
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 578
score: 99.861904296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 578
score: 99.8607401945153
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 578
score: 99.85118910845588
patch: final double [ ] bound 1 = ( double [ ] ) optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 578
score: 99.842666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 578
score: 99.812060546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 579
score: 99.871904296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , min , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 579
score: 99.86185546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 579
score: 99.860712890625
patch: final double bound 1 = ( i == starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 579
score: 99.85268766983695
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 579
score: 99.85116607363861
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 579
score: 99.848095703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 579
score: 99.847333984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 579
score: 99.842607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 579
score: 99.81204556002476
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 580
score: 99.877138671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 580
score: 99.871904296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 580
score: 99.86185546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max :
rank: 580
score: 99.860693359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 580
score: 99.852626953125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 580
score: 99.851123046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 580
score: 99.81202540887851
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 581
score: 99.877119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min
rank: 581
score: 99.8618410669192
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 581
score: 99.8510495580808
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 581
score: 99.84728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 581
score: 99.84255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 581
score: 99.81201171875
patch: final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 582
score: 99.87189453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 582
score: 99.86180623372395
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 582
score: 99.8480859375
patch: final double bound 1 = ( i == 0 ) ? i : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 582
score: 99.84728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 582
score: 99.81193359375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 583
score: 99.87185329861111
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 583
score: 99.86063196163366
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 583
score: 99.85239955357143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 583
score: 99.85099664135514
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 583
score: 99.848056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 583
score: 99.84727154356061
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 584
score: 99.86177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 584
score: 99.86061604817708
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 584
score: 99.85236245013297
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 584
score: 99.848056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value ) , Fast CaMeL Math
rank: 584
score: 99.847265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) / ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 584
score: 99.84245127255154
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 585
score: 99.87705078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( )
rank: 585
score: 99.87183929771506
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 585
score: 99.8617578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 585
score: 99.86060049019608
patch: final double bound 1 = ( i == 0 ) ? min : min + 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 585
score: 99.85094368811882
patch: final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 585
score: 99.848046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 585
score: 99.84244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 586
score: 99.877041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 586
score: 99.8718359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 586
score: 99.861748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 586
score: 99.86058361695545
patch: final double bound 1 = ( i == 0 ) ? min : min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 586
score: 99.8523419581422
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 586
score: 99.850888671875
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 586
score: 99.848046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 586
score: 99.8472265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 586
score: 99.842412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min
rank: 587
score: 99.871787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 587
score: 99.86173828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 587
score: 99.86056857638889
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 587
score: 99.848017578125
patch: final double bound 1 = ( i == $STRING$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 587
score: 99.84240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator
rank: 588
score: 99.87701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) || Fast
rank: 588
score: 99.8717743844697
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 588
score: 99.86054089604592
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 588
score: 99.852294921875
patch: final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 588
score: 99.847998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 588
score: 99.84720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 588
score: 99.842392578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 588
score: 99.8118359375
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 589
score: 99.877001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 589
score: 99.8605205829327
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 589
score: 99.85224011479592
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 589
score: 99.850859375
patch: final double i 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 589
score: 99.84796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 589
score: 99.842373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 589
score: 99.811826171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 590
score: 99.871640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 590
score: 99.861630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 590
score: 99.86046006944444
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 590
score: 99.85220336914062
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 590
score: 99.85083732982673
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == bound 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 590
score: 99.8479296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 590
score: 99.842373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 591
score: 99.871630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 591
score: 99.861611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 591
score: 99.85199333639706
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 591
score: 99.847177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , Math . max ( bound
rank: 591
score: 99.81178252551021
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 592
score: 99.871572265625
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 592
score: 99.8604377297794
patch: final double bound 1 = ( i == 0 ) ? min : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 592
score: 99.85187815656566
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 592
score: 99.8508203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 592
score: 99.847900390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 592
score: 99.84232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1
rank: 592
score: 99.81173270089286
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 593
score: 99.87157164228724
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? min : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 593
score: 99.86156455592105
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) * ( max - min ) ;
rank: 593
score: 99.85183630257009
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 593
score: 99.847158203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , max ) )
rank: 593
score: 99.84232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 594
score: 99.8715625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 594
score: 99.8615625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 594
score: 99.86037109375
patch: final String bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 594
score: 99.85179501488095
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 594
score: 99.842314453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 594
score: 99.81169409890776
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 595
score: 99.871552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 595
score: 99.86037109375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 595
score: 99.85176518278301
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 595
score: 99.84787109375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 595
score: 99.847119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 596
score: 99.87154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( min , bound 1 ) , Fast CaMeL Math
rank: 596
score: 99.85172991071428
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 596
score: 99.8506807493932
patch: final try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 596
score: 99.8478515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . get CaMeL Value ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 596
score: 99.847119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 596
score: 99.8423046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 597
score: 99.87681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( double ) min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min )
rank: 597
score: 99.861533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 597
score: 99.86031288675743
patch: final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 597
score: 99.850673828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 597
score: 99.847841796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch ( Function CaMeL Evaluation
rank: 597
score: 99.847119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 598
score: 99.8767801920573
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 598
score: 99.85153562213303
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 598
score: 99.85066328898515
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 1 . 0 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 598
score: 99.84783380681819
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( $STRING$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 598
score: 99.847080078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 598
score: 99.8115427753713
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 599
score: 99.85142440025253
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 599
score: 99.85065498737374
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , null ) ) ;
rank: 599
score: 99.8470703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 599
score: 99.81151431074767
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 600
score: 99.86149613575269
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 600
score: 99.86030173788265
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 600
score: 99.85125732421875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 600
score: 99.811494140625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 601
score: 99.87673828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min
rank: 601
score: 99.8714453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) *
rank: 601
score: 99.861474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 601
score: 99.86024983723958
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 601
score: 99.8511772505734
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 601
score: 99.847783203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 601
score: 99.847060546875
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 601
score: 99.84224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == max ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 601
score: 99.8114453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 602
score: 99.87671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 602
score: 99.87142578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 602
score: 99.86146611752717
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 602
score: 99.85105971534654
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 602
score: 99.8477734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - 1 , bound $NUMBER$ ) , Fast
rank: 602
score: 99.8422265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = goal . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 602
score: 99.81143641707921
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 603
score: 99.86146484375
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 603
score: 99.860205078125
patch: final int bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 603
score: 99.85069229579207
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , { bound $NUMBER$ ) ) ;
rank: 603
score: 99.847763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 603
score: 99.842197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 603
score: 99.81140018203884
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 604
score: 99.876640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 604
score: 99.87134806315105
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 604
score: 99.86146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( i ,
rank: 604
score: 99.86019685952971
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 604
score: 99.850537109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 604
score: 99.84771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 604
score: 99.84701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 604
score: 99.811376953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == max ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 605
score: 99.876611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double
rank: 605
score: 99.87134765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 605
score: 99.86145550271739
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 605
score: 99.85064634342784
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 605
score: 99.847705078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( System , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 605
score: 99.846962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min ,
rank: 605
score: 99.811376953125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 606
score: 99.8614453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 606
score: 99.86018415178572
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 606
score: 99.85056470788044
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 606
score: 99.85040752704327
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 606
score: 99.846953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 606
score: 99.84216796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math .
rank: 606
score: 99.8113724226804
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 607
score: 99.871337890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 607
score: 99.85046756628788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) .
rank: 607
score: 99.85040222772277
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 607
score: 99.84769570707071
patch: Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 607
score: 99.84213610197368
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 607
score: 99.81134588068181
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 608
score: 99.871328125
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 608
score: 99.86015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 608
score: 99.85035299598624
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 608
score: 99.85034658394608
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 608
score: 99.8476953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( max - min ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 608
score: 99.846923828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 608
score: 99.84208984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; ;
rank: 609
score: 99.8766015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == $STRING$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 609
score: 99.86134826030928
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 609
score: 99.85014785338785
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 609
score: 99.847685546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( System , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 609
score: 99.8469140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 609
score: 99.81119487441589
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 610
score: 99.876591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 610
score: 99.87130376344086
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 610
score: 99.850283203125
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 610
score: 99.85013084041262
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 610
score: 99.847685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 610
score: 99.8420703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 611
score: 99.87658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) )
rank: 611
score: 99.871298828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 611
score: 99.86130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 611
score: 99.86013671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 611
score: 99.85000358371559
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 611
score: 99.847685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , true , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 611
score: 99.84205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 611
score: 99.81115270543981
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 612
score: 99.86128656914893
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 612
score: 99.8501953125
patch: final double value 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 612
score: 99.84994086869266
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 612
score: 99.84685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; opti@@
rank: 612
score: 99.81114086662372
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 613
score: 99.8765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 613
score: 99.87125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 613
score: 99.84984290081522
patch: final double bound 1 = ( i == 0 ) ? min : next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 613
score: 99.847626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 613
score: 99.84685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) )
rank: 613
score: 99.8111213235294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max > min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 614
score: 99.871201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 614
score: 99.861259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 614
score: 99.860087890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 614
score: 99.8498064793578
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 614
score: 99.847587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 614
score: 99.846826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 614
score: 99.84197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 614
score: 99.81107421875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 615
score: 99.876552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min 1 , bound $NUMBER$ ) , Fast
rank: 615
score: 99.86008522727273
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 615
score: 99.850107421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double abs $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 615
score: 99.841943359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 616
score: 99.87654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double
rank: 616
score: 99.8600766080097
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 616
score: 99.847548828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 616
score: 99.841865234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , goal ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 616
score: 99.811064453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 617
score: 99.871171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; opti@@
rank: 617
score: 99.861240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 617
score: 99.86005859375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 617
score: 99.84961833428899
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 617
score: 99.846787109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 617
score: 99.8418359375
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 617
score: 99.8110588592233
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 618
score: 99.876533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 618
score: 99.871162109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 618
score: 99.8612109375
patch: final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 618
score: 99.86005476409314
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 618
score: 99.85006948617789
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ? max : min ) ;
rank: 618
score: 99.84950186353211
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 618
score: 99.81104965965346
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 619
score: 99.876533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 619
score: 99.86115697487114
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 619
score: 99.86003248762377
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 619
score: 99.84948620495496
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 619
score: 99.8475
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 619
score: 99.846767578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 619
score: 99.841806640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max -
rank: 619
score: 99.81104937803399
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 620
score: 99.876494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 620
score: 99.85001380997475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 620
score: 99.84945706708716
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 620
score: 99.847490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 620
score: 99.811015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 621
score: 99.87646484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 621
score: 99.871044921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 )
rank: 621
score: 99.849921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) - Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 621
score: 99.84921516628441
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 621
score: 99.846728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 621
score: 99.841748046875
patch: final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 622
score: 99.876435546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 622
score: 99.87103515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 622
score: 99.861083984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) * ( max - min ) ; optima [ i
rank: 622
score: 99.859970703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 622
score: 99.8491166141055
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 622
score: 99.847431640625
patch: final boolean bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 622
score: 99.84671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 622
score: 99.841748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 622
score: 99.81095130997475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( 1 , bound $NUMBER$ ) ) ;
rank: 623
score: 99.876435546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 623
score: 99.871015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer .
rank: 623
score: 99.8473828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) << ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 623
score: 99.841708984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 624
score: 99.87640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 624
score: 99.87099821671195
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 624
score: 99.85991310586735
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 624
score: 99.84984142945545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , start CaMeL Value ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 624
score: 99.84903598050458
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 624
score: 99.847373046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 624
score: 99.846669921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 624
score: 99.841689453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 625
score: 99.87099609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima
rank: 625
score: 99.861015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 )
rank: 625
score: 99.847353515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final String bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 625
score: 99.8416796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 626
score: 99.87638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 626
score: 99.870986328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 626
score: 99.861005859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 626
score: 99.85984519675925
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 626
score: 99.84970092773438
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 626
score: 99.8489228805693
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 626
score: 99.84732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 626
score: 99.846640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 626
score: 99.81086631133178
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 627
score: 99.87638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 627
score: 99.8709765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final long bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 627
score: 99.85984375
patch: final double bound 1 = ( i == 0 ) ? min : min + this . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 627
score: 99.84962890625
patch: final double chars 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 627
score: 99.84162109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 627
score: 99.81084079186893
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 628
score: 99.87638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 628
score: 99.86099273989899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 628
score: 99.8598046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max > min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 628
score: 99.84961894914215
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 628
score: 99.84887471330275
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 628
score: 99.8465625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 628
score: 99.841611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 629
score: 99.870908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 629
score: 99.860986328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 629
score: 99.859794921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( Long - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 629
score: 99.84959951073232
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 629
score: 99.84878237612612
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 629
score: 99.847265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 629
score: 99.8465625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 629
score: 99.8416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 629
score: 99.81077442354369
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 630
score: 99.870908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 630
score: 99.84957917203609
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 630
score: 99.84868767556179
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final
rank: 630
score: 99.846552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 630
score: 99.841572265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * (
rank: 630
score: 99.81076610331633
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 631
score: 99.876357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 631
score: 99.8708984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast
rank: 631
score: 99.860966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 631
score: 99.859755859375
patch: final String bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 631
score: 99.84843934257076
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , optima [ i ] ) ;
rank: 631
score: 99.84157151442308
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 631
score: 99.81076171875
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 632
score: 99.87087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 632
score: 99.85974609375
patch: final double bound 1 = ( i != 0 ) ? i : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 632
score: 99.8495423560049
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min + bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 632
score: 99.8482586156542
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 632
score: 99.84654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 632
score: 99.8107421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == max ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 633
score: 99.870849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 633
score: 99.8609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast
rank: 633
score: 99.85971038510101
patch: double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 633
score: 99.8482086489899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 633
score: 99.847177734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 634
score: 99.876318359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 634
score: 99.870849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = new optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 634
score: 99.86089409722223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 634
score: 99.847177734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 634
score: 99.84650390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 634
score: 99.84154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 634
score: 99.81069048713235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 635
score: 99.876318359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 635
score: 99.870791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 635
score: 99.860869140625
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 635
score: 99.8495145631068
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 - bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 635
score: 99.84813959911617
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 635
score: 99.84716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 635
score: 99.8415234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , goal ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 635
score: 99.81068359375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 636
score: 99.859677734375
patch: final double bound 1 = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 636
score: 99.84791917067308
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 636
score: 99.84712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 636
score: 99.841513671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 636
score: 99.81062578914141
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ,
rank: 637
score: 99.87072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 637
score: 99.86083984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 637
score: 99.859658203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( min 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 637
score: 99.84741671580188
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 637
score: 99.847099609375
patch: final double bound 1 = ( i == 0 ) ? this : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 637
score: 99.84642578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , max ) ) ; }
rank: 637
score: 99.81060431985294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , null ) ;
rank: 638
score: 99.87630550986842
patch: final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 638
score: 99.84730683772936
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 638
score: 99.847099609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 638
score: 99.84642537434895
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 638
score: 99.81058633207071
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 639
score: 99.87068359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 639
score: 99.860771484375
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 639
score: 99.84722324587264
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 639
score: 99.846416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 640
score: 99.87068359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 640
score: 99.8607421875
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 640
score: 99.859560546875
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 640
score: 99.84926470588235
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 640
score: 99.8471447172619
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 640
score: 99.84640348800505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 640
score: 99.810546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 641
score: 99.859541015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 641
score: 99.849208984375
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 641
score: 99.84709563078704
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 641
score: 99.84706407912235
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 641
score: 99.81053720606435
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 642
score: 99.870654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 642
score: 99.86073022959184
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 642
score: 99.84705078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 642
score: 99.84671487894144
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 642
score: 99.846396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 642
score: 99.841376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 642
score: 99.81050618489583
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 643
score: 99.87064453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f
rank: 643
score: 99.847001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 643
score: 99.84660734953704
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 643
score: 99.84639362373737
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 643
score: 99.84134845344387
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 644
score: 99.87625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) && Fast
rank: 644
score: 99.86068040497449
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 644
score: 99.84905824566832
patch: final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 644
score: 99.841337890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) , Fast CaMeL
rank: 644
score: 99.810400390625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 645
score: 99.87623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min ) ; optima [ i ] = optimizer . optimize ( f
rank: 645
score: 99.870625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 645
score: 99.86066365979381
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ) ) ;
rank: 645
score: 99.84651850728156
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 645
score: 99.846357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : start + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 645
score: 99.84133429276316
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 646
score: 99.87623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima
rank: 646
score: 99.85943771502293
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 647
score: 99.8705859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 647
score: 99.860634765625
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 647
score: 99.85943244485294
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 647
score: 99.84887010806075
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 647
score: 99.846953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 647
score: 99.8412890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; }
rank: 647
score: 99.81035754145408
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 648
score: 99.870537109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) )
rank: 648
score: 99.846943359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 648
score: 99.84611525229357
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 648
score: 99.8103515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 649
score: 99.87619140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 649
score: 99.8594224059466
patch: final double bound 1 = ( i == 0 ) ? min : min + min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 649
score: 99.846943359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 649
score: 99.846279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 649
score: 99.845923071509
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 649
score: 99.81033828883496
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 650
score: 99.870517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 650
score: 99.86058011968085
patch: final double bound 1 = ( i == 0 ) ? min : min + min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 650
score: 99.85941569010417
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 650
score: 99.84693359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 650
score: 99.846279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 650
score: 99.84569227430555
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 650
score: 99.841240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 650
score: 99.810322265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound 1 ) ) ;
rank: 651
score: 99.876162109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , generator . next CaMeL Double ( ) * ( max - min ) )
rank: 651
score: 99.870498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final long bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 651
score: 99.86052734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ > bound $NUMBER$ ) ) ;
rank: 651
score: 99.846904296875
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 651
score: 99.84626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 651
score: 99.84564040997707
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 651
score: 99.84123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 652
score: 99.876142578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 652
score: 99.86049107142857
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 652
score: 99.84689670138889
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 652
score: 99.846259765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 652
score: 99.84562653186275
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , true ) ;
rank: 652
score: 99.810205078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 653
score: 99.870439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 653
score: 99.860439453125
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 653
score: 99.846875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 653
score: 99.846259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 653
score: 99.84557038834951
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 653
score: 99.81020375844595
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 654
score: 99.870390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound 1 ) , Fast CaMeL Math . max ( bound 1 ,
rank: 654
score: 99.85936595775463
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 654
score: 99.846865234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Boolean ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 654
score: 99.84537760416667
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 654
score: 99.841220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * (
rank: 655
score: 99.87611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double
rank: 655
score: 99.85936542585785
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 655
score: 99.84850457702021
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 655
score: 99.84685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , - $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 655
score: 99.84624123086735
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 655
score: 99.84526271446079
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , false ) ;
rank: 655
score: 99.841220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max -
rank: 655
score: 99.81014827806122
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; total CaMeL Evaluations = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 656
score: 99.8703736584596
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 656
score: 99.860341796875
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 656
score: 99.85931755514706
patch: final double bound 1 = ( i == 0 ) ? min : min + 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 656
score: 99.84681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == - 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 656
score: 99.846201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 656
score: 99.84517799233491
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 656
score: 99.841171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 656
score: 99.8101452978972
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 657
score: 99.87609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( min ,
rank: 657
score: 99.8703515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 657
score: 99.86033033288044
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max , bound $NUMBER$ ) ;
rank: 657
score: 99.85929840686275
patch: final double bound 1 = ( i >= 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 657
score: 99.846787109375
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 657
score: 99.84619140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 657
score: 99.84512298886139
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 658
score: 99.86025390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 658
score: 99.859296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( start - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 658
score: 99.84834382971938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 658
score: 99.84619140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 658
score: 99.8447942450495
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 658
score: 99.841123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1
rank: 658
score: 99.81012144183168
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 659
score: 99.85927635732324
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 659
score: 99.84832643995098
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ;
rank: 659
score: 99.846181640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 659
score: 99.84111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 660
score: 99.876044921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 660
score: 99.87029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 660
score: 99.8602508859536
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 660
score: 99.84671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 660
score: 99.84465060763888
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 660
score: 99.841083984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + f . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 660
score: 99.8099915747549
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 661
score: 99.87603515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . max ( bound 1 ,
rank: 661
score: 99.87029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 661
score: 99.86023605510752
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 661
score: 99.85923828125
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 661
score: 99.84826030927834
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . abs ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 661
score: 99.8461328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double goal $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 661
score: 99.84452194940476
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 661
score: 99.84103515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 )
rank: 662
score: 99.87029296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 662
score: 99.85921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ length ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 662
score: 99.84824810606061
patch: final double [ ] ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 662
score: 99.8466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 662
score: 99.846123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 662
score: 99.84448902027027
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 662
score: 99.8099718896028
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 663
score: 99.876025390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) { optima [ i ] = optimizer . next CaMeL Double (
rank: 663
score: 99.87025082236842
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 663
score: 99.8601953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 663
score: 99.85920266544117
patch: final double bound 1 = ( i == 1 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 664
score: 99.875986328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 664
score: 99.8702467315051
patch: final double bound 1 = ( i == 0 ) ? min : min + Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 664
score: 99.85919129022277
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 664
score: 99.84812942976804
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 664
score: 99.84665995896465
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( $STRING$ , bound $NUMBER$ ) ) ;
rank: 664
score: 99.84380580357143
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 664
score: 99.80994515467172
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 665
score: 99.85917195235149
patch: final double bound 1 = ( i == 0 ) ? min : - min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 665
score: 99.84808474170919
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 665
score: 99.846611328125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 665
score: 99.84380425347223
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 665
score: 99.840927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 666
score: 99.87022680165816
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 666
score: 99.84799466274752
patch: final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 666
score: 99.84607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 666
score: 99.84359975961539
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - min ) ;
rank: 666
score: 99.840927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 667
score: 99.875927734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 667
score: 99.859150390625
patch: final double bound 1 = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 667
score: 99.84796912924757
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + bound 1 ) ;
rank: 667
score: 99.846591796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 667
score: 99.843505859375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 668
score: 99.875927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 668
score: 99.870224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 668
score: 99.86002250339673
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 668
score: 99.859140625
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 668
score: 99.84794347426471
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 668
score: 99.84656894329896
patch: final double bound 1 = ( i == 0 ) ? min : min + ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 668
score: 99.8098828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 669
score: 99.870224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 669
score: 99.86
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final String bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 669
score: 99.84793244949495
patch: final double [ ] ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 669
score: 99.8460546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 669
score: 99.8434860641892
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 669
score: 99.84087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 669
score: 99.80987610479798
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 670
score: 99.870166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 670
score: 99.84604837436869
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 670
score: 99.84347226204129
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 670
score: 99.84087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double i 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 670
score: 99.8098714953271
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 671
score: 99.870166015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min
rank: 671
score: 99.85993726325758
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 671
score: 99.84297950114679
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 671
score: 99.840859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 671
score: 99.80984497070312
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 672
score: 99.87587890625
patch: final double bound 1 = ( i == 0 ) - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 672
score: 99.87015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 672
score: 99.85986328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 672
score: 99.84776054308253
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ;
rank: 672
score: 99.846533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 672
score: 99.8428614161036
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 672
score: 99.84085051546391
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 672
score: 99.809833984375
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 673
score: 99.87015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 673
score: 99.84761795343137
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 673
score: 99.84650390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( 0 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 673
score: 99.84599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 673
score: 99.84285794771634
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + min ) ;
rank: 673
score: 99.80978515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 674
score: 99.87013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 674
score: 99.84759646045919
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 674
score: 99.846484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 675
score: 99.8701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 675
score: 99.85974609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? goal : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 675
score: 99.84757965686275
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , null , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 675
score: 99.8459765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 675
score: 99.84188465589888
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 675
score: 99.8096875
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 676
score: 99.870107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 676
score: 99.85904296875
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 676
score: 99.845966796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 676
score: 99.8414894386574
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) .
rank: 676
score: 99.8406640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 676
score: 99.809658203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . get ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 677
score: 99.875859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 677
score: 99.870087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 677
score: 99.859658203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 677
score: 99.84754022277228
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; ;
rank: 677
score: 99.84147434059633
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 677
score: 99.8406640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 < bound $NUMBER$ ) , Fast CaMeL Math .
rank: 678
score: 99.87004446476064
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 678
score: 99.859638671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 678
score: 99.84640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( - bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 678
score: 99.84116753472222
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 679
score: 99.870009765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 679
score: 99.859599609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 679
score: 99.8590234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 679
score: 99.8473997790404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 679
score: 99.84640066964286
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 679
score: 99.84593986742425
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 679
score: 99.84097403067129
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 679
score: 99.8406640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 680
score: 99.875751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 680
score: 99.870009765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima
rank: 680
score: 99.84737859987744
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i + bound 1 ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 680
score: 99.84640066964286
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 680
score: 99.84076752533784
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 680
score: 99.84064453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 680
score: 99.80956073835785
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 681
score: 99.84638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , start
rank: 681
score: 99.845908203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 681
score: 99.84067339601769
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 681
score: 99.840634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , false
rank: 682
score: 99.875703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , int
rank: 682
score: 99.8699609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 682
score: 99.85948350694444
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 682
score: 99.84727700242719
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 682
score: 99.846357421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 682
score: 99.840634765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 682
score: 99.84058077830188
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 682
score: 99.80953125
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 683
score: 99.875703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 683
score: 99.859482421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 683
score: 99.846337890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , null , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 683
score: 99.845869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) ) ; }
rank: 684
score: 99.869912109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 684
score: 99.85948114809783
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 684
score: 99.846298828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 684
score: 99.84583984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 684
score: 99.84061686197917
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = max ;
rank: 684
score: 99.83977926002359
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 685
score: 99.875673828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( min , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 685
score: 99.8462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 685
score: 99.84583984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 685
score: 99.840595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = f . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 685
score: 99.83972057995496
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 685
score: 99.80947265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 686
score: 99.869853515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 686
score: 99.8469890934406
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 686
score: 99.845830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 686
score: 99.8405859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 686
score: 99.83967659065316
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 687
score: 99.86984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 687
score: 99.84056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double (
rank: 687
score: 99.83917180332568
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 688
score: 99.8756640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 688
score: 99.86984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 688
score: 99.84626953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( max - min ) : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 688
score: 99.845810546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 688
score: 99.8388197815534
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 689
score: 99.85890122215346
patch: final double bound 1 = ( i == - ] ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 689
score: 99.84685034890776
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 689
score: 99.84625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 689
score: 99.84578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 689
score: 99.840517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , boolean
rank: 689
score: 99.8388038917824
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 690
score: 99.85933344414893
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 690
score: 99.845771484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 690
score: 99.840498046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 690
score: 99.83867756371359
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 690
score: 99.80932138480392
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 691
score: 99.86978834502551
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 691
score: 99.859296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 691
score: 99.84623046875
patch: final double bound 1 : ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 691
score: 99.84048828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( )
rank: 691
score: 99.83858309659091
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 691
score: 99.80931640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 692
score: 99.87560546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 692
score: 99.8697849548969
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 692
score: 99.85914812184343
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) ) ;
rank: 692
score: 99.85887714460785
patch: final double bound 1 = ( i <= 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 692
score: 99.8462422688802
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 692
score: 99.8462109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final Object bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 692
score: 99.845751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 692
score: 99.840458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 692
score: 99.8381862815367
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 692
score: 99.809306640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 693
score: 99.86973461662372
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 693
score: 99.85912109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 > bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 693
score: 99.858876953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 693
score: 99.8462109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 693
score: 99.83806085149082
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 693
score: 99.80921875
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 694
score: 99.875556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 694
score: 99.8697265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 )
rank: 694
score: 99.8591015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 >= bound $NUMBER$ ) ) ;
rank: 694
score: 99.858857421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 694
score: 99.8379636390187
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 694
score: 99.80920524240655
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 695
score: 99.858828125
patch: final byte bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 695
score: 99.84617690284654
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 695
score: 99.84615234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 695
score: 99.845712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 695
score: 99.83793542144495
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 696
score: 99.869677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min
rank: 696
score: 99.85880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 696
score: 99.84616477272728
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 696
score: 99.83743313626127
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 696
score: 99.809140625
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 697
score: 99.87552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , min , min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1
rank: 697
score: 99.869638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; opti@@
rank: 697
score: 99.85906920770202
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; long bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 697
score: 99.84614158163265
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 697
score: 99.846015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( * 1 , bound $NUMBER$ ) ) ;
rank: 697
score: 99.83721867832568
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 698
score: 99.869638671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( max , min ) , Fast CaMeL Math .
rank: 698
score: 99.8590625
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 698
score: 99.8588005514706
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 698
score: 99.84603821997548
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 698
score: 99.84600207270408
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 698
score: 99.83716040259009
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 698
score: 99.809130859375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 699
score: 99.85902913411458
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 699
score: 99.84601522229381
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . abs ( bound 1 ) ) ;
rank: 699
score: 99.845927734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 699
score: 99.840244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer
rank: 699
score: 99.83708122184684
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 700
score: 99.869619140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double (
rank: 700
score: 99.84587890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= starts ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 700
score: 99.840205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 700
score: 99.83697677752293
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 700
score: 99.80901918316832
patch: final double bound 1 = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 701
score: 99.85890246975806
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 701
score: 99.84583984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 701
score: 99.840185546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 701
score: 99.83689614392202
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 701
score: 99.8089708384901
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 702
score: 99.875458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 702
score: 99.86955078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 702
score: 99.858779296875
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 702
score: 99.84583136047979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 702
score: 99.845615234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 702
score: 99.84546609526699
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 702
score: 99.840146484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 702
score: 99.83656214808559
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 702
score: 99.808955078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 703
score: 99.86953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 703
score: 99.858837890625
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 703
score: 99.85877182904412
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 703
score: 99.84560448232324
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 703
score: 99.83590230855856
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 703
score: 99.80895150061882
patch: final double bound 1 = ( i == 0 ) ? min : min + 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 704
score: 99.869521484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 704
score: 99.85880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( i , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 704
score: 99.8457330197704
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 704
score: 99.84544959435097
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 704
score: 99.84004103535354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max ) , bound $NUMBER$ ) ;
rank: 704
score: 99.83583984375
patch: double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 705
score: 99.875439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 705
score: 99.85873046875
patch: final double min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 705
score: 99.85872395833333
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 705
score: 99.8400390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , generator , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 705
score: 99.83582998853211
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 706
score: 99.875439453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 706
score: 99.8694921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 706
score: 99.84556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 706
score: 99.840009765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 706
score: 99.83514519457547
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 706
score: 99.80890405957943
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 707
score: 99.845556640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 707
score: 99.84512271521227
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - start CaMeL Value ) ;
rank: 707
score: 99.84
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 707
score: 99.83507740825688
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 707
score: 99.80888671875
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 708
score: 99.85867309570312
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 708
score: 99.85856827445652
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 708
score: 99.84566285438144
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 708
score: 99.845546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 708
score: 99.84506939827128
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , start CaMeL Value , bound $NUMBER$ ) ;
rank: 708
score: 99.83481758887615
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 709
score: 99.875390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double
rank: 709
score: 99.869462890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 709
score: 99.85853653724747
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 709
score: 99.845654296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 709
score: 99.83433378727064
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 710
score: 99.869443359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 710
score: 99.8586328125
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 710
score: 99.85849609375
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 710
score: 99.845625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] += optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 710
score: 99.83998046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) * (
rank: 710
score: 99.83345650337837
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 711
score: 99.869423828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 711
score: 99.858623046875
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 711
score: 99.85843789457071
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 711
score: 99.84490507392474
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 711
score: 99.8399609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 711
score: 99.83344681766054
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 711
score: 99.80880301339286
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 712
score: 99.875341796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ ,
rank: 712
score: 99.85862223307292
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 712
score: 99.845576171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 712
score: 99.84490327380952
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 712
score: 99.83995336415816
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 712
score: 99.833227759009
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 712
score: 99.80878503543815
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 713
score: 99.875341796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 713
score: 99.85829454787235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 713
score: 99.84556640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 713
score: 99.84490131578947
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 713
score: 99.83307052752293
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 713
score: 99.80873046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . get ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 714
score: 99.869365234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast
rank: 714
score: 99.85860770089286
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 714
score: 99.858232421875
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 714
score: 99.84556361607143
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - 0 ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 714
score: 99.845478515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 714
score: 99.83302540822072
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 715
score: 99.87533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 715
score: 99.869365234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 715
score: 99.84546915690105
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 715
score: 99.839833984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 715
score: 99.83293613818807
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 716
score: 99.875302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + optima [ i ] ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 716
score: 99.85858034620098
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 716
score: 99.85822860054348
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 716
score: 99.845439453125
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 716
score: 99.84432565789474
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 716
score: 99.83276591169725
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 716
score: 99.80844772196262
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 717
score: 99.8693359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 717
score: 99.8585661300505
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 717
score: 99.858212890625
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 717
score: 99.845439453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 717
score: 99.8327438766892
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 718
score: 99.8752734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , this , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 718
score: 99.8693359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 718
score: 99.8453515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 1 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 718
score: 99.83269423738533
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 719
score: 99.869296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 719
score: 99.85816446940105
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 719
score: 99.845419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i
rank: 719
score: 99.84529869002525
patch: final double bound 1 = ( i == 0 ) ? min : - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 719
score: 99.83976320876289
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 719
score: 99.83247921444953
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 719
score: 99.80843098958333
patch: final double bound 1 = ( i == 0 ) ? min : min + 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 720
score: 99.87527301747312
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min - min ) ;
rank: 720
score: 99.869287109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 720
score: 99.85813934948979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 720
score: 99.845419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 720
score: 99.84529296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . get CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 720
score: 99.83974510732324
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 720
score: 99.83233037725225
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 721
score: 99.83215668004587
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 722
score: 99.875263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + max
rank: 722
score: 99.869169921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$
rank: 722
score: 99.85841758578431
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 722
score: 99.858056640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 722
score: 99.8452789614899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 722
score: 99.84408431869369
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 722
score: 99.8396875
patch: final float bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 722
score: 99.83196853497707
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 722
score: 99.80840412621359
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 723
score: 99.87525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 723
score: 99.869111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 723
score: 99.85802734375
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 723
score: 99.845390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 723
score: 99.83966796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = f . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 723
score: 99.83193447353604
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 723
score: 99.80840246456185
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 724
score: 99.85837890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 724
score: 99.85801630434783
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 724
score: 99.84533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 724
score: 99.845078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 724
score: 99.84390318627452
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 724
score: 99.83169079701835
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 724
score: 99.80840208820094
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 725
score: 99.85801373106061
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 725
score: 99.84533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i
rank: 725
score: 99.84501745345744
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 725
score: 99.839580078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer
rank: 725
score: 99.83158255912163
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 726
score: 99.869091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 726
score: 99.845322265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 726
score: 99.845009765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 726
score: 99.8395703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 ,
rank: 726
score: 99.83147194602273
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 726
score: 99.808369140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 727
score: 99.85795355902778
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 727
score: 99.845322265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 727
score: 99.84374112215909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 727
score: 99.83141765763274
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 728
score: 99.869072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 728
score: 99.85794921875
patch: final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 728
score: 99.831274634009
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 728
score: 99.80834714330808
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 729
score: 99.87517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 729
score: 99.869072265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 729
score: 99.85828882334184
patch: final double bound 1 = ( i == 0 ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 729
score: 99.844970703125
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ?
rank: 729
score: 99.84355851715686
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + $NUMBER$ ) ;
rank: 729
score: 99.83949788411458
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 729
score: 99.831274634009
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 730
score: 99.875107421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 730
score: 99.85791529605264
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 730
score: 99.845302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ,
rank: 730
score: 99.844951171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = this . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 730
score: 99.84348209347345
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 730
score: 99.83947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound
rank: 730
score: 99.83055320945945
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 730
score: 99.80833984375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 731
score: 99.87509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - min
rank: 731
score: 99.8690625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 731
score: 99.85828293010752
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 731
score: 99.84529296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 731
score: 99.84493371212122
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 731
score: 99.84330958946079
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 731
score: 99.83044763513513
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 731
score: 99.80833268873762
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 732
score: 99.87509765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 732
score: 99.858271484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 732
score: 99.85791015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 732
score: 99.84492384785354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 732
score: 99.84307105654761
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 732
score: 99.839443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 732
score: 99.83019353693182
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 733
score: 99.869013671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ 0 ] = optimizer . optimize ( f ,
rank: 733
score: 99.85783305921052
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 733
score: 99.845263671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 733
score: 99.84488439078282
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( $STRING$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 733
score: 99.84295014880952
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 733
score: 99.839423828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 733
score: 99.83019249718468
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 733
score: 99.80832657724056
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 734
score: 99.87509060889175
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , generator . next CaMeL Double ( ) ) ;
rank: 734
score: 99.868994140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 734
score: 99.857802734375
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 734
score: 99.84525553385417
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 734
score: 99.83939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$
rank: 734
score: 99.82962943412163
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 735
score: 99.87505859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 735
score: 99.86896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer .
rank: 735
score: 99.85779296875
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 735
score: 99.84525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) ) ; }
rank: 735
score: 99.84483506944444
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 735
score: 99.84275501179245
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - start CaMeL Value ) ;
rank: 735
score: 99.82957664695945
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 735
score: 99.80827467512377
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i . next CaMeL Double ( ) * ( max - min ) ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 736
score: 99.85777064732143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 736
score: 99.84525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound
rank: 736
score: 99.844814453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 736
score: 99.8427264873798
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , start CaMeL Value , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 736
score: 99.83935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ,
rank: 736
score: 99.82945589048673
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 736
score: 99.808271484375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 737
score: 99.875009765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 737
score: 99.868916015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 737
score: 99.858193359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max 1 , bound $NUMBER$ ) ) ;
rank: 737
score: 99.845234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . set ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ;
rank: 737
score: 99.84236653645833
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) false ) ;
rank: 737
score: 99.829321509009
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 737
score: 99.80826822916667
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 738
score: 99.868916015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , ( max - min ) ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 738
score: 99.85818359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 738
score: 99.85763888888889
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) * ( max - min ) ;
rank: 738
score: 99.84229937803399
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 == 0 ) ? max : min ) ;
rank: 738
score: 99.83927734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final
rank: 738
score: 99.82857369087837
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 739
score: 99.874990234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 739
score: 99.868876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 )
rank: 739
score: 99.858173828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max > min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 739
score: 99.85763113839286
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 739
score: 99.845234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , max ) )
rank: 739
score: 99.84473652742346
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 739
score: 99.84228515625
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 739
score: 99.83923828125
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 739
score: 99.82829215934684
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 739
score: 99.80825639204545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 740
score: 99.8581640625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 740
score: 99.85757048233695
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 740
score: 99.845224609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 740
score: 99.84473642676768
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , false ) ) ;
rank: 740
score: 99.84218924386161
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 740
score: 99.83921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 740
score: 99.82737718186937
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 740
score: 99.808251953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 741
score: 99.8575514190051
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 741
score: 99.845205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 741
score: 99.84177911931818
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 741
score: 99.83921243686869
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 741
score: 99.82725214325221
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 742
score: 99.85813737623762
patch: final double bound 1 = ( i == 0 ) ? min : min + - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 742
score: 99.85752467105263
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) * ( max - min ) ;
rank: 742
score: 99.845205078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 742
score: 99.84471669823232
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 742
score: 99.8417335792824
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) true ) ;
rank: 742
score: 99.82689329954955
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 742
score: 99.8082166615099
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 743
score: 99.868798828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = generator . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max
rank: 743
score: 99.8575
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 743
score: 99.84470683396465
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 743
score: 99.82666455518019
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 744
score: 99.84517578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) , Fast
rank: 744
score: 99.84155525128865
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Math ( bound 1 , bound $NUMBER$ ) ) ;
rank: 744
score: 99.82603110923424
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 744
score: 99.80816761363636
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 745
score: 99.86876953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 745
score: 99.85747119633838
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 745
score: 99.84462890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 745
score: 99.84151204427083
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i + bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 745
score: 99.82596952421171
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 745
score: 99.80815333946079
patch: final double bound 1 = ( i == 0 ) ? min : min + 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 746
score: 99.87478515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 746
score: 99.858115234375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 746
score: 99.857470703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 746
score: 99.84515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 746
score: 99.84462483723958
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 746
score: 99.84144607099515
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) true ) ;
rank: 746
score: 99.82571438626127
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 747
score: 99.868740234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima
rank: 747
score: 99.857421875
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 747
score: 99.84515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 747
score: 99.84143305759804
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; * /
rank: 747
score: 99.839111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound 1 ) , Fast
rank: 747
score: 99.82552963119369
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 747
score: 99.80807023195877
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 748
score: 99.87474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 748
score: 99.857421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 748
score: 99.845126953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 748
score: 99.84458111702128
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 748
score: 99.8413722826087
patch: final double bound 1 = ( i == 0 ) ? min : min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 748
score: 99.8391015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 748
score: 99.82530968468468
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 749
score: 99.868642578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 749
score: 99.85806969368812
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 749
score: 99.857392578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 749
score: 99.8451171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . max ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 749
score: 99.8445536295573
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 749
score: 99.84120686848958
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 749
score: 99.82492257882883
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 749
score: 99.80805121527777
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 750
score: 99.85797300433168
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 750
score: 99.85736328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 750
score: 99.82479061092343
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 751
score: 99.8747265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , (
rank: 751
score: 99.86861328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 751
score: 99.857919921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 751
score: 99.85735282512626
patch: final double bound 1 = min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 751
score: 99.84447722739361
patch: final double bound 1 = ( i == 0 ) ? min : min + i * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 751
score: 99.8411525451031
patch: final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 751
score: 99.82472902590091
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 752
score: 99.86860509072581
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 752
score: 99.84445036300505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 752
score: 99.84113319174757
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) false ) ;
rank: 752
score: 99.82459900442478
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 753
score: 99.857880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 753
score: 99.85734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 753
score: 99.845087890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 753
score: 99.84087456597223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 753
score: 99.82428977272727
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 754
score: 99.874677734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 754
score: 99.85787185968137
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 754
score: 99.85732421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 754
score: 99.845048828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 754
score: 99.844345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min , bound $NUMBER$ ) ) ;
rank: 754
score: 99.84080205899532
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 754
score: 99.82408047566372
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 754
score: 99.80779474431819
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 755
score: 99.868564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max
rank: 755
score: 99.844345703125
patch: final double bound 1 = ( i == 0 ) ? this : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 755
score: 99.84039776141827
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + min - min ) ;
rank: 755
score: 99.83892578125
patch: final double bound 1 = ( i - 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 755
score: 99.82398492517606
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 756
score: 99.874658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 756
score: 99.8685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 756
score: 99.857841796875
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 756
score: 99.8450390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 756
score: 99.84039747100516
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 756
score: 99.838857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 756
score: 99.82360289977477
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 757
score: 99.874658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 757
score: 99.868486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 757
score: 99.85782797029702
patch: double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 757
score: 99.857255859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final Object bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 757
score: 99.844296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( false , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 757
score: 99.82356770833333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 757
score: 99.80768623737374
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 758
score: 99.87464297715054
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 758
score: 99.85781830136139
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 758
score: 99.84429253472223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( false , bound $NUMBER$ ) ) ;
rank: 758
score: 99.838779296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 758
score: 99.82348852759009
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 759
score: 99.85780658143939
patch: double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 759
score: 99.84424824617346
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 759
score: 99.8400127704327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 759
score: 99.82345333614865
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 760
score: 99.868408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast
rank: 760
score: 99.85720486111111
patch: final double bound 1 = ( i == 0 ) ? min : min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 760
score: 99.84499561543367
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 760
score: 99.83967507102273
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 760
score: 99.83873630798969
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 760
score: 99.82343574042793
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 760
score: 99.80759910300925
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 761
score: 99.86839507728494
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 761
score: 99.85778569240196
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 761
score: 99.85715004832474
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ) ) ;
rank: 761
score: 99.83951518691589
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 761
score: 99.8386859697165
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 761
score: 99.82332136824324
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 762
score: 99.868369140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 762
score: 99.85712890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ > bound $NUMBER$ ) ) ;
rank: 762
score: 99.8449609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min ) )
rank: 762
score: 99.8441796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 762
score: 99.8389880952381
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 762
score: 99.838681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 762
score: 99.82318060247748
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 762
score: 99.80757732780613
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 763
score: 99.84495344065657
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) ) ;
rank: 763
score: 99.844140625
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 763
score: 99.82317180461712
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 763
score: 99.8075534986413
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 764
score: 99.874501953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch
rank: 764
score: 99.86831202651516
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 764
score: 99.85775390625
patch: final double bound 1 = ( i == 0 ) ? min : 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 764
score: 99.838642578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 764
score: 99.8231542088964
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 765
score: 99.874443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min
rank: 765
score: 99.85707158627717
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 765
score: 99.84494140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 765
score: 99.84412484217172
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( 1 , bound $NUMBER$ ) ) ;
rank: 765
score: 99.83881242698598
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 765
score: 99.82269672015765
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 766
score: 99.874443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double
rank: 766
score: 99.868251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 766
score: 99.844111328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 766
score: 99.83866808252426
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) true ) ;
rank: 766
score: 99.83864030934343
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 766
score: 99.82256475225225
patch: final double bound 1 = ( i == 0 ? min : generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 767
score: 99.87443359375
patch: final double bound 1 = ( i == 0 ) ? this : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 767
score: 99.85771867340686
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 767
score: 99.857041015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 767
score: 99.84404296875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 767
score: 99.83833624089806
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) false ) ;
rank: 767
score: 99.8223536036036
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 768
score: 99.87443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 768
score: 99.868232421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math .
rank: 768
score: 99.8569972826087
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max , bound $NUMBER$ ) ;
rank: 768
score: 99.84400169136597
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 768
score: 99.82228322072072
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 768
score: 99.80736163843459
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 769
score: 99.86820392219387
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 769
score: 99.8569844563802
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 769
score: 99.844912109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 769
score: 99.843994140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 769
score: 99.83857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 769
score: 99.83793625876169
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 & bound $NUMBER$ ) ) ;
rank: 769
score: 99.8221776463964
patch: try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 769
score: 99.80733678836634
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 770
score: 99.874384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 770
score: 99.85693852588383
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 770
score: 99.84489596619898
patch: min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 770
score: 99.82210142422566
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal . Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 771
score: 99.8681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , new Fast
rank: 771
score: 99.85767786711165
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 771
score: 99.8569140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 771
score: 99.844853515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 771
score: 99.84396484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 771
score: 99.838525390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 771
score: 99.8378432190534
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch (
rank: 771
score: 99.82187851914415
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 771
score: 99.80731081495098
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 772
score: 99.874208984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 772
score: 99.856904296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ ) ) ;
rank: 772
score: 99.843955078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( * 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 772
score: 99.83849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [
rank: 772
score: 99.83777901785714
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 772
score: 99.82154192243304
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; break ;
rank: 773
score: 99.868154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , Math . min ( bound 1 , bound $NUMBER$ ) ) , Fast CaMeL Math . max (
rank: 773
score: 99.844833984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 773
score: 99.843896484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 773
score: 99.83849609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , true
rank: 773
score: 99.83762810819893
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 773
score: 99.82152660472973
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 774
score: 99.87419921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 774
score: 99.86815419823232
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 774
score: 99.856875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 774
score: 99.838486328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 774
score: 99.82142982826576
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 775
score: 99.874189453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Float
rank: 775
score: 99.8448046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 775
score: 99.84384765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 775
score: 99.83754701967592
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 775
score: 99.82138583896396
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 776
score: 99.8741796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ;
rank: 776
score: 99.857626953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max >= min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 776
score: 99.85683806046195
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 776
score: 99.83745465959821
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 776
score: 99.8212890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 776
score: 99.8072150735294
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , 0 ) ;
rank: 777
score: 99.87416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 777
score: 99.85762532552083
patch: final double bound 1 = ( i >= 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 777
score: 99.85678814827128
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 777
score: 99.844775390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 777
score: 99.84375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 777
score: 99.82113813920455
patch: double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 777
score: 99.8072150735294
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 778
score: 99.87416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 )
rank: 778
score: 99.844765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 ,
rank: 778
score: 99.84372040719697
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( $STRING$ , bound $NUMBER$ ) ) ;
rank: 778
score: 99.83735627948113
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations += 1 ;
rank: 778
score: 99.82098113738739
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 778
score: 99.80720124421296
patch: final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 779
score: 99.85760558477723
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 779
score: 99.8567393313172
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 779
score: 99.8383984375
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 779
score: 99.83719758064517
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 , bound $NUMBER$ ) ;
rank: 779
score: 99.82097233952703
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 779
score: 99.80712397411617
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 780
score: 99.874130859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 780
score: 99.868056640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1
rank: 780
score: 99.857587890625
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 780
score: 99.82085796734235
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 781
score: 99.85663396661931
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 781
score: 99.84354285037878
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 781
score: 99.83839400773196
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 781
score: 99.83694223257211
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ? max : min ;
rank: 781
score: 99.82083157376127
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 781
score: 99.80703705136139
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 782
score: 99.87412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) *
rank: 782
score: 99.86798650568181
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 782
score: 99.85754730504587
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 782
score: 99.84353183178192
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 782
score: 99.838349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i
rank: 782
score: 99.83638057002315
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations += start CaMeL Value ;
rank: 782
score: 99.82077878659909
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 782
score: 99.80695628156566
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 783
score: 99.87412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 783
score: 99.8566130050505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 783
score: 99.84466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$
rank: 783
score: 99.84335521941489
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 783
score: 99.83834438131314
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 783
score: 99.83624441964285
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 783
score: 99.82071720157657
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 784
score: 99.874091796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 784
score: 99.85658203125
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 784
score: 99.844658203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f )
rank: 784
score: 99.84333984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ,
rank: 784
score: 99.83831065188173
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 784
score: 99.83607954545455
patch: final double bound 1 = i + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 784
score: 99.82064954369469
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 784
score: 99.80690696022727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 785
score: 99.8678125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 785
score: 99.84318462171052
patch: final double bound 1 = ( i == 0 ) ? min : min + ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 785
score: 99.838232421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 785
score: 99.82062042511261
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 785
score: 99.80683210784314
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 786
score: 99.867802734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 786
score: 99.857490234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) & ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 786
score: 99.8565625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 786
score: 99.84311285251525
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ;
rank: 786
score: 99.820532446509
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 786
score: 99.80682253370098
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 787
score: 99.85748046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : value + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 787
score: 99.83527483258929
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 787
score: 99.82050605292793
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 787
score: 99.80673926767676
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 788
score: 99.873994140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this ,
rank: 788
score: 99.856533203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 788
score: 99.844619140625
patch: final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 788
score: 99.838193359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 788
score: 99.83515625
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 788
score: 99.82042687218468
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 788
score: 99.80673189252336
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 789
score: 99.87396484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize
rank: 789
score: 99.857421875
patch: final String bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 789
score: 99.844599609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) )
rank: 789
score: 99.84290431701031
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 789
score: 99.83487723214286
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 789
score: 99.82040927646396
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 789
score: 99.8067136390187
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 790
score: 99.857412109375
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 790
score: 99.838154296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 790
score: 99.83466796875
patch: final double [ ] bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 790
score: 99.82037408502252
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 790
score: 99.80658686926606
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 791
score: 99.8739453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) * (
rank: 791
score: 99.8574025371287
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 791
score: 99.856396484375
patch: final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 791
score: 99.842880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 791
score: 99.83410113790761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max , bound 1 ) ;
rank: 791
score: 99.8202245213964
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 792
score: 99.8739237882653
patch: final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 792
score: 99.85740234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 792
score: 99.85636559311224
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 792
score: 99.84446207682292
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 792
score: 99.84287208017676
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 792
score: 99.83404886497641
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations += 0 ;
rank: 792
score: 99.8201805320946
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 792
score: 99.80652307581019
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 793
score: 99.87390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) {
rank: 793
score: 99.867607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , System
rank: 793
score: 99.85736443014706
patch: final int bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 793
score: 99.856337890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 793
score: 99.844443359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) ) ; }
rank: 793
score: 99.842861328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ ) ) ;
rank: 793
score: 99.8380859375
patch: final double bound 1 = ( i == max ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 793
score: 99.83402876420455
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 793
score: 99.81959107545045
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 793
score: 99.80652225378788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 794
score: 99.85736268939394
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 794
score: 99.842783203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal . Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 794
score: 99.83807804608585
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 794
score: 99.83391007133152
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 794
score: 99.81949573863636
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 794
score: 99.80651238952021
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 795
score: 99.85735887096774
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 795
score: 99.85623753324468
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 795
score: 99.842783203125
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 795
score: 99.83805170747422
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 795
score: 99.83365005630631
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value ) ) ;
rank: 795
score: 99.8191599802928
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 795
score: 99.80650111607143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 796
score: 99.873896484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 796
score: 99.867568359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 796
score: 99.857333984375
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 796
score: 99.85621744791666
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 796
score: 99.8427734375
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 796
score: 99.838037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 796
score: 99.83268536261792
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations += $NUMBER$ ;
rank: 796
score: 99.81883469303098
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 796
score: 99.80649115114795
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 797
score: 99.87388671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 797
score: 99.856142578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 797
score: 99.8427734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 797
score: 99.81881686373873
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 797
score: 99.80648279671718
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 798
score: 99.867548828125
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 798
score: 99.844375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 798
score: 99.84272361288265
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - 0 ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 798
score: 99.83087043042453
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 798
score: 99.81877790178571
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 799
score: 99.873857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max
rank: 799
score: 99.8573046875
patch: final double bound 1 = ( ( i == 0 ) ? min : generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 799
score: 99.85605074179293
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 799
score: 99.844365234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , float $NUMBER$ ) ) ;
rank: 799
score: 99.84268282860825
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 799
score: 99.83084727599558
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 799
score: 99.81858132102273
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 800
score: 99.87384765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + goal . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 800
score: 99.86751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 800
score: 99.85724609375
patch: final double bound 1 = ( i < starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 800
score: 99.856044921875
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 800
score: 99.84267479482324
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 800
score: 99.83075987617924
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 800
score: 99.81813063063063
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 800
score: 99.80642560206422
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 801
score: 99.87380859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min + generator . next CaMeL Double ( ) : ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 801
score: 99.85603515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 801
score: 99.837939453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 801
score: 99.83074145047169
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 801
score: 99.81781491980088
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 801
score: 99.80640552662037
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 802
score: 99.8737890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , long
rank: 802
score: 99.85721124387256
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 802
score: 99.8559765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 802
score: 99.84265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min 1 , bound $NUMBER$ ) ) ;
rank: 802
score: 99.8379296875
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 802
score: 99.83053385416666
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 802
score: 99.81755565542035
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 802
score: 99.80637254901961
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 803
score: 99.873779296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ;
rank: 803
score: 99.8675
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 803
score: 99.85720703125
patch: final double bound 1 = ( i == 0 ) ? min : $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 803
score: 99.8559765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final boolean bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 803
score: 99.84263533775253
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min ) ) ;
rank: 803
score: 99.83791015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double
rank: 803
score: 99.83052034198113
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 803
score: 99.81725964245496
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 803
score: 99.80634670813107
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 804
score: 99.873779296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 804
score: 99.857158203125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 804
score: 99.844296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 804
score: 99.84255642361111
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 804
score: 99.83036221590909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 804
score: 99.81683734515765
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 804
score: 99.80630293516356
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 805
score: 99.87376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 805
score: 99.867490234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize
rank: 805
score: 99.85574473505434
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 805
score: 99.84427280618686
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 805
score: 99.84251953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( * 1 , bound $NUMBER$ ) ) ;
rank: 805
score: 99.83021763392857
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , start CaMeL Value ) ;
rank: 805
score: 99.81672297297297
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 805
score: 99.80628468165888
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 806
score: 99.867470703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : max ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 806
score: 99.85570549242425
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 806
score: 99.84248683763587
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 806
score: 99.83001598011364
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 806
score: 99.81637105855856
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 806
score: 99.80628458658855
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 807
score: 99.87373046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( double ) min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 807
score: 99.86744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max
rank: 807
score: 99.844228515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 807
score: 99.83778101084184
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 807
score: 99.82808948863637
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 807
score: 99.81601914414415
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 808
score: 99.86744140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 808
score: 99.8570703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal + Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 808
score: 99.85558425739248
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 808
score: 99.8423492739899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 808
score: 99.83777257898352
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 808
score: 99.82762025983146
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 808
score: 99.81589597409909
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 808
score: 99.80624798646907
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 809
score: 99.867421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound 1 ) )
rank: 809
score: 99.85704320790816
patch: final double bound 1 = ( i == 0 ) ? min + min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 809
score: 99.85557154605263
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 809
score: 99.8423492739899
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 809
score: 99.83775390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast
rank: 809
score: 99.8268845016892
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 809
score: 99.81580799549549
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 809
score: 99.80616122159091
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 810
score: 99.873701171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 810
score: 99.867412109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 810
score: 99.85698784722223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 810
score: 99.855546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 810
score: 99.844150390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 810
score: 99.8423125877809
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 810
score: 99.837724609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima
rank: 810
score: 99.8150634765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 811
score: 99.873701171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max 1 , bound $NUMBER$ )
rank: 811
score: 99.86740234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 811
score: 99.8569634885204
patch: final double bound 1 = ( i <= 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 811
score: 99.844111328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 811
score: 99.84218126662235
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 811
score: 99.837724609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 811
score: 99.82587002840908
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 811
score: 99.81475560011062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 811
score: 99.80601087908879
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 812
score: 99.85695776608911
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 812
score: 99.855439453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ <= bound $NUMBER$ ) ) ;
rank: 812
score: 99.84215198863636
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , false ) ) ;
rank: 812
score: 99.837705078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 812
score: 99.81451362002213
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 813
score: 99.86734501008064
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 813
score: 99.855419921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 == bound $NUMBER$ ) ) ;
rank: 813
score: 99.84408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 813
score: 99.84203361742425
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 813
score: 99.837685546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 813
score: 99.81416279560811
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 813
score: 99.80599280631188
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 814
score: 99.873671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double
rank: 814
score: 99.8673046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound
rank: 814
score: 99.85685140779702
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 814
score: 99.8553865131579
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 814
score: 99.84199416035354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( - min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 814
score: 99.837666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL
rank: 814
score: 99.82527594610092
patch: final double [ ] bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 814
score: 99.81401323198199
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 814
score: 99.80592873831776
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 815
score: 99.85684173886139
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 815
score: 99.84408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 815
score: 99.841943359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 <= bound $NUMBER$ ) ) ;
rank: 815
score: 99.837607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 815
score: 99.82395717075893
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 815
score: 99.81386366835585
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 815
score: 99.80579183703271
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound 1 ) ) ;
rank: 816
score: 99.87365234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 816
score: 99.86724609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1
rank: 816
score: 99.85536595394737
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 816
score: 99.84193497474747
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , 0 ) ) ;
rank: 816
score: 99.83759765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 816
score: 99.82385665379213
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 816
score: 99.81380208333333
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 816
score: 99.80576578776042
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 817
score: 99.85529296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( i , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 817
score: 99.84405891262755
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 817
score: 99.84187741623711
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 817
score: 99.8136753318584
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 817
score: 99.8057370765187
patch: final double bound 1 = min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 818
score: 99.87361328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) +
rank: 818
score: 99.8671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 818
score: 99.85680042613636
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 818
score: 99.85529119318181
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 818
score: 99.844052734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 818
score: 99.84182646780303
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 818
score: 99.81366131756756
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 818
score: 99.80571240717822
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 819
score: 99.86716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) *
rank: 819
score: 99.8552754720052
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 819
score: 99.8440234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 819
score: 99.84180694265464
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 819
score: 99.8375390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . next CaMeL Double ( ) * ( max -
rank: 819
score: 99.82258823939732
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 819
score: 99.81355574324324
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 820
score: 99.84400390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 820
score: 99.82225698285399
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 , bound $NUMBER$ ) ) ;
rank: 820
score: 99.81308945664415
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 820
score: 99.80567327535377
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 821
score: 99.873564453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound
rank: 821
score: 99.8671484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 821
score: 99.8551728219697
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 821
score: 99.843974609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 821
score: 99.84168836805556
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( false , bound $NUMBER$ ) ) ;
rank: 821
score: 99.83749787703805
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 821
score: 99.82225690569196
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) ) ;
rank: 821
score: 99.81295340401786
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 821
score: 99.80564630681818
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 822
score: 99.867119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 822
score: 99.85515665270619
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 822
score: 99.83748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 822
score: 99.8221435546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 822
score: 99.81281975940266
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 822
score: 99.80557364004629
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 823
score: 99.87353515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max
rank: 823
score: 99.8670703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 823
score: 99.85665802908416
patch: final double bound 1 = ( i == - 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 823
score: 99.85505859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 823
score: 99.84161836357526
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 823
score: 99.82175958806818
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 823
score: 99.81253519144144
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 823
score: 99.80549065420561
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 824
score: 99.873515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 824
score: 99.856630859375
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 824
score: 99.85495969082447
patch: final double bound 1 = ( i == 0 ) ? min : min + min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 824
score: 99.843935546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 824
score: 99.84153053977273
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 824
score: 99.82139463682432
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 824
score: 99.81243950497787
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 824
score: 99.80542676693925
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 825
score: 99.87349609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 825
score: 99.85660001547029
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 825
score: 99.85493064413265
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 825
score: 99.84388671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) )
rank: 825
score: 99.84150390625
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 825
score: 99.83744220344387
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 825
score: 99.82131498893806
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 825
score: 99.81243841497748
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 826
score: 99.867021484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 826
score: 99.85659327651516
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 826
score: 99.854892578125
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 826
score: 99.8438671875
patch: final double goal 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 826
score: 99.841494140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min , bound $NUMBER$ ) ) ;
rank: 826
score: 99.82115078816372
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 826
score: 99.8124049363938
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 826
score: 99.80533256880734
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 827
score: 99.8734765625
patch: final double bound 1 = ( i == 0 ) - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 827
score: 99.85485309103261
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 827
score: 99.843857421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 827
score: 99.841455078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 827
score: 99.82100387168141
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 827
score: 99.81235043637388
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 827
score: 99.80530811915888
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 828
score: 99.8669921875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , System . Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 828
score: 99.85655167079207
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 828
score: 99.85482421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ != bound $NUMBER$ ) ) ;
rank: 828
score: 99.8413727114899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ,
rank: 828
score: 99.82066761363636
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 828
score: 99.81224486204955
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 828
score: 99.80517121787383
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 829
score: 99.85654296875
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 829
score: 99.85482102997449
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , min ) ) ;
rank: 829
score: 99.843828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 829
score: 99.84122474747475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 829
score: 99.83736328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0
rank: 829
score: 99.81208147321429
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 830
score: 99.866962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 830
score: 99.85654200185644
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 830
score: 99.85476124043367
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 830
score: 99.81193693693693
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 830
score: 99.80506379013761
patch: final double bound 1 = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 831
score: 99.873408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min (
rank: 831
score: 99.866962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 ,
rank: 831
score: 99.85652422664141
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 831
score: 99.85473889802631
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 831
score: 99.8411277488426
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 )
rank: 831
score: 99.8200186670354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 831
score: 99.81175218186937
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 831
score: 99.80503431658879
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 832
score: 99.866953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * max + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 832
score: 99.85647583007812
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 832
score: 99.85467960858585
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 832
score: 99.843759765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 832
score: 99.81157529037611
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 832
score: 99.80500693633178
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 833
score: 99.843720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 833
score: 99.83728515625
patch: final double bound 1 = ( min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 833
score: 99.81889125279018
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 833
score: 99.81151479535399
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 833
score: 99.80489741530374
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 834
score: 99.87328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ )
rank: 834
score: 99.8669140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 834
score: 99.84102746212122
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , false ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 834
score: 99.83728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math
rank: 834
score: 99.81886541193182
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 834
score: 99.81127709740991
patch: try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 835
score: 99.87326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this ,
rank: 835
score: 99.85639696782178
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 835
score: 99.85453464673913
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 835
score: 99.843642578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 835
score: 99.84097814078282
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 835
score: 99.837275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 835
score: 99.81879047015765
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 835
score: 99.81102195945945
patch: final double bound 1 = ( i == 0 ? min : generator . next CaMeL Double ( ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 836
score: 99.866875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 836
score: 99.85638612689394
patch: final double bound 1 = ( i == ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 836
score: 99.85451191603535
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 836
score: 99.84095052083333
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( ( i == 0 ) ? max : min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 836
score: 99.837275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math
rank: 836
score: 99.81871448863636
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 836
score: 99.81088999155405
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 836
score: 99.80482954545455
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 837
score: 99.866875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) / generator . next CaMeL
rank: 837
score: 99.85634666982324
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 837
score: 99.85444286616162
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , bound $NUMBER$ ) * ( max - min ) ;
rank: 837
score: 99.84087281586021
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 837
score: 99.81867049225664
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 837
score: 99.81074042792793
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 837
score: 99.80482440128505
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 838
score: 99.866826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 838
score: 99.85430772569444
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 838
score: 99.843505859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$
rank: 838
score: 99.84081044823232
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( i , bound $NUMBER$ ) ) ;
rank: 838
score: 99.8372265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 838
score: 99.81838530143806
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 838
score: 99.81067650719027
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal . Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 838
score: 99.80476964077103
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 839
score: 99.86681640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , min ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 839
score: 99.85430476641415
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 839
score: 99.843466796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize (
rank: 839
score: 99.84066447805851
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 839
score: 99.8372265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 839
score: 99.81810191761363
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 839
score: 99.81061601216814
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 839
score: 99.80471462673611
patch: final double bound 1 = generator . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 840
score: 99.85628094059406
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 840
score: 99.854287109375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 840
score: 99.84345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 840
score: 99.84064094387755
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 840
score: 99.81780894886364
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 840
score: 99.81036211993244
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 841
score: 99.856259765625
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 841
score: 99.84345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 841
score: 99.84058678668478
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 841
score: 99.81775232263513
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 841
score: 99.81035332207207
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 842
score: 99.873095703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 842
score: 99.84345703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 842
score: 99.84049825465425
patch: final double bound 1 = ( i == 0 ) ? min : min + min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 842
score: 99.81763139204546
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ) ) ;
rank: 842
score: 99.809790259009
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 842
score: 99.80469756765464
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 843
score: 99.8667578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound 1 ) , Fast CaMeL Math . max ( bound 1 ,
rank: 843
score: 99.8561552444307
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 843
score: 99.85422585227273
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 843
score: 99.843447265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 843
score: 99.84047747672872
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 843
score: 99.837197265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 843
score: 99.81728603603604
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 843
score: 99.80971107826576
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 843
score: 99.80450496495327
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 844
score: 99.8667578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 844
score: 99.8542102931701
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 844
score: 99.84047309027778
patch: final double bound 1 = ( i == 0 ) ? min : min + ( min - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 844
score: 99.80969348254504
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 844
score: 99.80450496495327
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 845
score: 99.866728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max (
rank: 845
score: 99.8560078938802
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 845
score: 99.85420558763587
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 845
score: 99.843427734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( double ) generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1
rank: 845
score: 99.84044547032828
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 845
score: 99.83716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; if
rank: 845
score: 99.81685014204545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . abs ( bound 1 ) ) ;
rank: 845
score: 99.80967588682432
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 845
score: 99.80447358630953
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 846
score: 99.85416334502551
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 846
score: 99.843408203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 846
score: 99.840439453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 846
score: 99.81674056869369
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 846
score: 99.8094752488938
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 846
score: 99.80443195093459
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 847
score: 99.86671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 847
score: 99.85415338010205
patch: final double bound 1 = min == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 847
score: 99.8404296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 847
score: 99.83716066919192
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 847
score: 99.81638032356194
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 847
score: 99.80919870022124
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 848
score: 99.85591717155613
patch: final int bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 848
score: 99.85410563151042
patch: final double bound 1 = i == 0 ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 848
score: 99.84033696338383
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 848
score: 99.8371484375
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 848
score: 99.81637168141593
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 848
score: 99.80884660993304
patch: int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 849
score: 99.872958984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , min , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 849
score: 99.85591172680412
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 849
score: 99.84026521381578
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 849
score: 99.8371484375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 849
score: 99.81607784845133
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 849
score: 99.80797151548673
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 849
score: 99.80439544392523
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 850
score: 99.8666796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally
rank: 850
score: 99.8558458384901
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound 1 ) ) ;
rank: 850
score: 99.85407788825758
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) * ( max - min ) ;
rank: 850
score: 99.843359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 - bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 850
score: 99.84024234693878
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 850
score: 99.81593957411505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 850
score: 99.8078159568584
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 850
score: 99.80429504964954
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 851
score: 99.85580444335938
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 851
score: 99.85404296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 851
score: 99.84023649796195
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 851
score: 99.83712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 851
score: 99.81589597409909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 851
score: 99.80764311393806
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 851
score: 99.8041947391055
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 852
score: 99.8729296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$
rank: 852
score: 99.866630859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 852
score: 99.843330078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ,
rank: 852
score: 99.837119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Math
rank: 852
score: 99.81546487894144
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 852
score: 99.80726285951327
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 852
score: 99.80412946428571
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 853
score: 99.86662109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math . max ( bound
rank: 853
score: 99.85401452105978
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 853
score: 99.843330078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 853
score: 99.84018658577128
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 853
score: 99.8370703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 853
score: 99.81521853885135
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ;
rank: 853
score: 99.80406330541237
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 854
score: 99.84017578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) * Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 854
score: 99.837041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final
rank: 854
score: 99.81508963448661
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations += optimizer . get CaMeL Evaluations ( ) ;
rank: 854
score: 99.80664926714601
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 854
score: 99.80399143949468
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 855
score: 99.872880859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 855
score: 99.866611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min )
rank: 855
score: 99.8539397885101
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 855
score: 99.84328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) )
rank: 855
score: 99.84013671875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( min - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 855
score: 99.80591468473452
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 855
score: 99.80393949468085
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 856
score: 99.8728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 856
score: 99.866611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 856
score: 99.85567876344086
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) / ( max - min ) ) ;
rank: 856
score: 99.853935546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max 1 , bound $NUMBER$ ) ) ;
rank: 856
score: 99.84326171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound
rank: 856
score: 99.840087890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 856
score: 99.80588011615045
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 857
score: 99.8728515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max , min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1
rank: 857
score: 99.8666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 857
score: 99.85565808354592
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 857
score: 99.8400370279948
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 857
score: 99.836953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 857
score: 99.80582101004464
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 857
score: 99.80370054853724
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 858
score: 99.872822265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max
rank: 858
score: 99.85561822385205
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 858
score: 99.853798828125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 858
score: 99.84003308354592
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 858
score: 99.81346792035399
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 858
score: 99.80562046595982
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 859
score: 99.86649876644736
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 859
score: 99.85554610148515
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 859
score: 99.85375434027777
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 859
score: 99.843212890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) )
rank: 859
score: 99.8400114425505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 859
score: 99.836923828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; final double bound
rank: 859
score: 99.80541344026548
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 860
score: 99.8728125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = new optimizer . optimize ( f
rank: 860
score: 99.85549926757812
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 860
score: 99.85375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 860
score: 99.839814453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ,
rank: 860
score: 99.836904296875
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 860
score: 99.80536158738938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 861
score: 99.866474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound
rank: 861
score: 99.85370495854592
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 861
score: 99.836865234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . next CaMeL Double
rank: 861
score: 99.8049813329646
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) .
rank: 861
score: 99.80346007740826
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 862
score: 99.87279296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + min
rank: 862
score: 99.866474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math
rank: 862
score: 99.85535037878788
patch: double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 862
score: 99.85370262632979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? min : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 862
score: 99.843173828125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 862
score: 99.83973986037235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + ( max - min ) ;
rank: 862
score: 99.80494035993304
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 862
score: 99.80326224662163
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 863
score: 99.86646484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 863
score: 99.85533311631944
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 863
score: 99.839638671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( i 1 , bound $NUMBER$ ) ) ;
rank: 863
score: 99.81180862831859
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 863
score: 99.80467021570796
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 863
score: 99.80323775773196
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 864
score: 99.86645754419192
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 864
score: 99.85532371596534
patch: final double bound 1 = ( i == 0 ) ? min : min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 864
score: 99.853564453125
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 864
score: 99.83956909179688
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 864
score: 99.81167035398231
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 864
score: 99.80454058351769
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 864
score: 99.80316728414948
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 865
score: 99.86640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 865
score: 99.85532078598484
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 865
score: 99.85343251329788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 865
score: 99.84306640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 865
score: 99.83953857421875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 865
score: 99.836826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 )
rank: 865
score: 99.80436774059734
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 866
score: 99.866376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 866
score: 99.85529934630102
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 866
score: 99.8533984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 + bound $NUMBER$ ) ) ;
rank: 866
score: 99.843037109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ ,
rank: 866
score: 99.83948863636364
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 866
score: 99.81141108960178
patch: final double bound 1 = ( i == $NUMBER$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 866
score: 99.80401611328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 867
score: 99.872666015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , $STRING$
rank: 867
score: 99.866376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound
rank: 867
score: 99.85338056848404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , min ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 867
score: 99.84301017992425
patch: final double bound 1 = ( i == 0 ) ? min : min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 867
score: 99.83947265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , start CaMeL Value ) ,
rank: 867
score: 99.81139380530973
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ;
rank: 867
score: 99.80366734095982
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 868
score: 99.8552754720052
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 868
score: 99.85337890625
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 868
score: 99.83947265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 868
score: 99.8367578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 868
score: 99.81070523648648
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 868
score: 99.80357266316372
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 868
score: 99.8025028189433
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 869
score: 99.85523669554455
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 869
score: 99.853349609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 > bound $NUMBER$ ) ) ;
rank: 869
score: 99.83940077319588
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; if ( optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) {
rank: 869
score: 99.836748046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound 1 - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound
rank: 869
score: 99.81052094856194
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 869
score: 99.80352783203125
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 869
score: 99.80212024806701
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 870
score: 99.85512350063131
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 870
score: 99.81009748340708
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 870
score: 99.80342574668141
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 870
score: 99.80202328580097
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 871
score: 99.866328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 871
score: 99.85326891447369
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 871
score: 99.842978515625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 871
score: 99.83928148674242
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 871
score: 99.81005859375
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 871
score: 99.8033220409292
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 871
score: 99.80178571428571
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 872
score: 99.85499526515152
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 872
score: 99.85318359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 872
score: 99.84296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . set ( goal , goal , Fast CaMeL Math
rank: 872
score: 99.836689453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 872
score: 99.80960518973214
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations = optimizer . get CaMeL Evaluations ( ) ;
rank: 872
score: 99.80298723493304
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 872
score: 99.80162244740099
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 873
score: 99.85497553661617
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 873
score: 99.8429296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 873
score: 99.83925993546195
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 873
score: 99.8366796875
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 873
score: 99.80959647042411
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , 0 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 873
score: 99.80291586006638
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 874
score: 99.866259765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 874
score: 99.853125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final String bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 874
score: 99.84289180871212
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 874
score: 99.80284672289822
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 875
score: 99.86625249335107
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i - min ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 875
score: 99.8548583984375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 875
score: 99.853115234375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 875
score: 99.83916529605263
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 875
score: 99.80884437223452
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 875
score: 99.80243189988938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 875
score: 99.80130088876147
patch: final double bound 1 = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 876
score: 99.87251953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , double
rank: 876
score: 99.86625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 876
score: 99.85480866608796
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 876
score: 99.83913901417526
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 876
score: 99.80776410398231
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 876
score: 99.80218991980088
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 876
score: 99.8012164572011
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 877
score: 99.866240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 877
score: 99.853095703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 877
score: 99.84288305165816
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , max ) ) ;
rank: 877
score: 99.839091796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 877
score: 99.83654296875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 877
score: 99.80762582964601
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 878
score: 99.872451171875
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 878
score: 99.866240234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 878
score: 99.842880859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 878
score: 99.839072265625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 878
score: 99.836533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 878
score: 99.80744280133929
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 878
score: 99.80193929756638
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 878
score: 99.80082325268818
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 879
score: 99.86623046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , new Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 879
score: 99.842880859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 879
score: 99.83901263297872
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + 1 * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 879
score: 99.836533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 < bound $NUMBER$ ) , Fast
rank: 879
score: 99.807373046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , 0 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 879
score: 99.80184423396018
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 880
score: 99.8662109375
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 880
score: 99.8546651204427
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 880
score: 99.85302734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 880
score: 99.8389559659091
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 880
score: 99.83650390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) . next CaMeL Double (
rank: 880
score: 99.80715915376106
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 880
score: 99.80162818030973
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 880
score: 99.80047922036083
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 881
score: 99.866201171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ) ; optima [ i ] = optimizer . optimize ( f
rank: 881
score: 99.85465841090425
patch: final double bound 1 = ( ( i == 0 ) ? min : min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 881
score: 99.842861328125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 881
score: 99.8389559659091
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 881
score: 99.836494140625
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 881
score: 99.80708137444691
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 882
score: 99.86620054853724
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 882
score: 99.8530119243421
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 882
score: 99.836474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound
rank: 882
score: 99.80702087942478
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 882
score: 99.80137755807522
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 883
score: 99.866181640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max )
rank: 883
score: 99.85454053217822
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ;
rank: 883
score: 99.8529632260101
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; int bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 883
score: 99.8427734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) )
rank: 883
score: 99.83883759469697
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 883
score: 99.836474609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 883
score: 99.80122199944691
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 883
score: 99.79995699541284
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 884
score: 99.866171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 884
score: 99.85451253255208
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 884
score: 99.842763671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 884
score: 99.8387784090909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( i , bound $NUMBER$ ) ) ;
rank: 884
score: 99.80653691924779
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 884
score: 99.80099730365045
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 885
score: 99.85414632161458
patch: final double bound 1 = ( i < 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 885
score: 99.85287109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 885
score: 99.84275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) )
rank: 885
score: 99.83867976641415
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 885
score: 99.80643321349558
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 885
score: 99.80093680862832
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 885
score: 99.79918587561882
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 886
score: 99.866123046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 886
score: 99.85411580403645
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 886
score: 99.85280443274456
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 886
score: 99.84275350765306
patch: optima = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 886
score: 99.83864569909794
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 886
score: 99.83642578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast
rank: 886
score: 99.80082446073008
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 886
score: 99.79902167792793
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 887
score: 99.866083984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally { optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 887
score: 99.85277580492425
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 887
score: 99.842744140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double value $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 887
score: 99.836416015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 887
score: 99.80520193917411
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 != 0 ) ) ;
rank: 887
score: 99.80078989214601
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 887
score: 99.79891514542079
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 888
score: 99.87234375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = this . optimize ( f ,
rank: 888
score: 99.85277303059895
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 888
score: 99.842734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 888
score: 99.838583984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 888
score: 99.836376953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 888
score: 99.80486898506638
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 888
score: 99.80044991629464
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 888
score: 99.7988811990489
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 889
score: 99.86606297348484
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 889
score: 99.85277210582386
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 889
score: 99.838466796875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 889
score: 99.836357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + generator
rank: 889
score: 99.80033185840708
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 889
score: 99.79857298704955
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 890
score: 99.87231702302631
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 890
score: 99.85362636920104
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 890
score: 99.852763671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 890
score: 99.83846275252525
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 890
score: 99.80011580475664
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 891
score: 99.866025390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 ,
rank: 891
score: 99.85275390625
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 891
score: 99.83837397411617
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 891
score: 99.836328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , optimizer
rank: 891
score: 99.80439976283482
patch: final double bound 1 = min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 891
score: 99.79981332964601
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 891
score: 99.79836062167553
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 892
score: 99.8527119954427
patch: final double bound 1 = i == 0 ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 892
score: 99.83832465277777
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 892
score: 99.836318359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast
rank: 892
score: 99.80434181415929
patch: final double bound 1 = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 892
score: 99.79971749441964
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 892
score: 99.79830799932066
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 893
score: 99.866015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch
rank: 893
score: 99.85269657258064
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 893
score: 99.84265385841837
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , max ) ) ;
rank: 893
score: 99.80415562220982
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 != 0 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 893
score: 99.79747817095588
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 894
score: 99.866005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 894
score: 99.85336861559139
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 894
score: 99.852685546875
patch: final double bound 1 = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 894
score: 99.83830618351064
patch: final double bound 1 = ( i == 0 ) ? min : min + ( generator . next CaMeL Double ( ) * ( max - min ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 894
score: 99.80358130530973
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 894
score: 99.79961456028761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 894
score: 99.79619140625
patch: final double bound 1 = i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 895
score: 99.8532002766927
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 895
score: 99.85267411901596
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 895
score: 99.84255420918367
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 895
score: 99.83830492424242
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , - $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 895
score: 99.8362109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , -
rank: 895
score: 99.80337389380531
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) false ) ;
rank: 895
score: 99.7995108545354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 896
score: 99.865947265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 896
score: 99.85292202818627
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + max ) ;
rank: 896
score: 99.85265334109043
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 896
score: 99.83828519570707
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min ) ) ;
rank: 896
score: 99.836181640625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast
rank: 896
score: 99.80334796736726
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) true ) ;
rank: 896
score: 99.79571368243244
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 897
score: 99.87220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final String bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 897
score: 99.86594188456633
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 897
score: 99.85263459578805
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 897
score: 99.83826546717172
patch: final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 897
score: 99.83609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 897
score: 99.80300467354911
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 898
score: 99.8658984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math .
rank: 898
score: 99.85280713848039
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; break ;
rank: 898
score: 99.85259765625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min 1 , bound $NUMBER$ ) ) ;
rank: 898
score: 99.83607421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 != bound $NUMBER$ ) , Fast
rank: 898
score: 99.80300467354911
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , 0 ) ) ;
rank: 898
score: 99.79520340653153
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 899
score: 99.865888671875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal
rank: 899
score: 99.85280623525944
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 899
score: 99.852568359375
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 899
score: 99.84246452487245
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 899
score: 99.83823939732143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 899
score: 99.802978515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 899
score: 99.79915073939732
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 899
score: 99.79502938646789
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 900
score: 99.85254967730978
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 900
score: 99.8424609375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 900
score: 99.83820628156566
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 900
score: 99.836064453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 900
score: 99.80296107700893
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; * /
rank: 900
score: 99.79900961006638
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == null ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 900
score: 99.79443799268019
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ;
rank: 901
score: 99.86587890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math
rank: 901
score: 99.83820529513889
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 901
score: 99.79888862002213
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 902
score: 99.8720703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 + bound $NUMBER$ , bound $NUMBER$
rank: 902
score: 99.85218641493056
patch: final double bound 1 = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 902
score: 99.838125
patch: final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 902
score: 99.80262974330357
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 902
score: 99.79854293418141
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 902
score: 99.79384853603604
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 903
score: 99.865615234375
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; ;
rank: 903
score: 99.85247738486842
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 903
score: 99.83810292119566
patch: final double bound 1 = ( i == 0 || i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 903
score: 99.8360546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL
rank: 903
score: 99.8025356056416
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 903
score: 99.79850836559734
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 903
score: 99.79370561079546
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 904
score: 99.87203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , 0 , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 904
score: 99.8520662006579
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 904
score: 99.83809840425532
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 904
score: 99.836044921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double
rank: 904
score: 99.79849679129464
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) .
rank: 905
score: 99.872001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 905
score: 99.85224011479592
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 905
score: 99.85196035879629
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 905
score: 99.8423492739899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 905
score: 99.83795041454081
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 905
score: 99.8360262784091
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 905
score: 99.80249239491151
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ += ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 905
score: 99.79845319475446
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 905
score: 99.79336295871559
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max ) ) ;
rank: 906
score: 99.86492270611703
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 906
score: 99.85209147135417
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) * ( max - min ) ;
rank: 906
score: 99.85191952284946
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + min + min + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 906
score: 99.842314453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 1 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 906
score: 99.83793994633838
patch: final Object bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 906
score: 99.836025390625
patch: final double i 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 906
score: 99.802241772677
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 906
score: 99.79827880859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 906
score: 99.7933504971591
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 907
score: 99.85199302755376
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 907
score: 99.836025390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) . next
rank: 907
score: 99.79820033482143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 907
score: 99.79327667511261
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 908
score: 99.86484998337765
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) / ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 908
score: 99.85197805851064
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 908
score: 99.8423046875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) - ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 908
score: 99.837890625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 908
score: 99.836015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 * ( max -
rank: 908
score: 99.80161830357143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 908
score: 99.79811082688053
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 908
score: 99.79324648795871
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 909
score: 99.85182883522727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 909
score: 99.8513419858871
patch: final double bound 1 = ( i == 0 ) ? min : min + min - min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 909
score: 99.83764910954301
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 909
score: 99.836005859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; ;
rank: 909
score: 99.80141775948661
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } ;
rank: 909
score: 99.79793798396018
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 910
score: 99.871884765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL
rank: 910
score: 99.85175978535354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 910
score: 99.85110134548611
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 910
score: 99.842275390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL
rank: 910
score: 99.83755523989899
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 910
score: 99.836005859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , float
rank: 910
score: 99.80122593470982
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations ++ ;
rank: 910
score: 99.79783427820796
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 910
score: 99.79319069602273
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 911
score: 99.871884765625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math
rank: 911
score: 99.864755859375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 * bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 911
score: 99.85174186862245
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , min ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 911
score: 99.842255859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 911
score: 99.83597861842105
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 911
score: 99.80120471515487
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 911
score: 99.79781699391593
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 911
score: 99.79278399493244
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 912
score: 99.85171110733695
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 912
score: 99.837421875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 912
score: 99.83595703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL
rank: 912
score: 99.80104915652655
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 912
score: 99.79774693080357
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 913
score: 99.87185546875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 913
score: 99.86465238320707
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 913
score: 99.85163522273936
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 913
score: 99.85076444892474
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 913
score: 99.8422265625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( Na CaMeL N , bound $NUMBER$ ) )
rank: 913
score: 99.83739720394736
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 913
score: 99.835869140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = generator . optimize ( f ,
rank: 913
score: 99.80098866150442
patch: final double bound 1 = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 913
score: 99.79772193030973
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 913
score: 99.79261683558559
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 914
score: 99.85150390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ != bound $NUMBER$ ) ) ;
rank: 914
score: 99.85062210648148
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 914
score: 99.84220703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 914
score: 99.83731849747475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( - 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 914
score: 99.80097137721239
patch: final double bound 1 = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 914
score: 99.79771328816372
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 914
score: 99.79235951834862
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 915
score: 99.87184111926021
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 915
score: 99.86440172697368
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 915
score: 99.8514912923177
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 915
score: 99.8505182549505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) * ( max - min ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 915
score: 99.83728656572166
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min ) ) ;
rank: 915
score: 99.8358487215909
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , true ) ) ;
rank: 915
score: 99.8008763136062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; else optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) ) ;
rank: 915
score: 99.79762686670354
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 915
score: 99.79227627840909
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 916
score: 99.8718359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 916
score: 99.85027754934211
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 916
score: 99.83726917613636
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 916
score: 99.835830078125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 . next CaMeL Double ( )
rank: 916
score: 99.8006861863938
patch: final double [ ] bound 1 = ( double [ ] ) optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 916
score: 99.79758365597345
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 917
score: 99.871826171875
patch: final double bound 1 = ( i == 0 ) ? min : ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 917
score: 99.85137316645408
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 917
score: 99.8421484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 917
score: 99.83726917613636
patch: final double bound 1 = ( i >= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 917
score: 99.8358203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 917
score: 99.80036642699115
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) || Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 917
score: 99.79730710730088
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 917
score: 99.79167861238533
patch: final double bound 1 = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 918
score: 99.86422664561171
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( min - min ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 918
score: 99.85130074097938
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 918
score: 99.79976147676992
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) && Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 918
score: 99.79728118086283
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? generator . next CaMeL Double ( ) : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 918
score: 99.79166666666667
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 919
score: 99.86408203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 919
score: 99.85121221127717
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 919
score: 99.842119140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) )
rank: 919
score: 99.8369140625
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 919
score: 99.83576171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = Fast CaMeL Math . max (
rank: 919
score: 99.79945035951327
patch: final double bound 1 = ( i < starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 919
score: 99.79718017578125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 919
score: 99.79156214162845
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 920
score: 99.871767578125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound
rank: 920
score: 99.8640234375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 920
score: 99.85120442708333
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 920
score: 99.84211575255102
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 920
score: 99.83685487689394
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 920
score: 99.79884540929204
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 920
score: 99.79683178926992
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 920
score: 99.79139927455357
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 921
score: 99.8639802631579
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 921
score: 99.84961904393565
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 921
score: 99.842109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 ,
rank: 921
score: 99.83653767903645
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 921
score: 99.835751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ,
rank: 921
score: 99.79881084070796
patch: final long bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 921
score: 99.79682314712389
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 921
score: 99.79136186079545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ) ;
rank: 922
score: 99.863876953125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 922
score: 99.85118383290816
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min - min ) ) ;
rank: 922
score: 99.84927335349462
patch: final double bound 1 = ( i == 0 ) ? min : min + min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 922
score: 99.842109375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 922
score: 99.83648231907895
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 922
score: 99.835751953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 922
score: 99.79877627212389
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 922
score: 99.79130595439189
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 923
score: 99.85111407844387
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max - min ) ) ;
rank: 923
score: 99.84920247395833
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 923
score: 99.83579205452128
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 923
score: 99.8357421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , min ) )
rank: 923
score: 99.79640832411505
patch: final double bound 1 = ( i == null ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 924
score: 99.8716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? 0 : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 924
score: 99.86375473484848
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 924
score: 99.85110047043011
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 924
score: 99.8420703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 924
score: 99.835732421875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( optimizer . next CaMeL Double
rank: 924
score: 99.79872441924779
patch: final double [ ] bound 1 = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch (
rank: 924
score: 99.79630461836283
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 924
score: 99.79109700520833
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 925
score: 99.8716796875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( max == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 925
score: 99.85100740131578
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 925
score: 99.84911205150463
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 925
score: 99.8420703125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound $NUMBER$ ) )
rank: 925
score: 99.835712890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 925
score: 99.83555094401042
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 925
score: 99.79870713495575
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 925
score: 99.7962873340708
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 926
score: 99.871669921875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) - max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 926
score: 99.8635377209596
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 926
score: 99.84891312210648
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 926
score: 99.84204856636597
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , max ) ) ;
rank: 926
score: 99.8355204264323
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 926
score: 99.79854293418141
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 926
score: 99.7958984375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 926
score: 99.79033818975225
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 927
score: 99.87166015625
patch: final double bound 1 = ( min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 927
score: 99.86351044323979
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 927
score: 99.85095635775862
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 927
score: 99.83568359375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 927
score: 99.79849972345133
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 927
score: 99.7958984375
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 928
score: 99.848388671875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 928
score: 99.842041015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$
rank: 928
score: 99.83482730263158
patch: final double bound 1 = ( i == 0 ) ? min : min + ( generator . next CaMeL Double ( ) * ( max - min ) ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 928
score: 99.798335522677
patch: final double bound 1 = ( i == starts ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 928
score: 99.79582065818585
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 928
score: 99.79025213068182
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 929
score: 99.85083264802631
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 929
score: 99.84833307549505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ) ;
rank: 929
score: 99.83451796069588
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 929
score: 99.7982404590708
patch: final double bound 1 = ( i <= 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 929
score: 99.79575152101769
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 930
score: 99.871611328125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 930
score: 99.863291015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 930
score: 99.85079956054688
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 930
score: 99.842021484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast
rank: 930
score: 99.8355859375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 930
score: 99.83432667525773
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( - min ) ) ;
rank: 930
score: 99.79822317477876
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 930
score: 99.79552682522124
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 931
score: 99.85078332779256
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 931
score: 99.84819240196079
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; break ;
rank: 931
score: 99.8342619243421
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 931
score: 99.7953107715708
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 931
score: 99.78960796734235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 932
score: 99.86319813829788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 932
score: 99.8506990131579
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( max - min ) ) ;
rank: 932
score: 99.84805410879629
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 932
score: 99.842021484375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 932
score: 99.835546875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 932
score: 99.83413138440861
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 933
score: 99.84800889756944
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 933
score: 99.842001953125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 ,
rank: 933
score: 99.83552734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 933
score: 99.83389087433511
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 933
score: 99.79767007743362
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch (
rank: 933
score: 99.79509471792035
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 933
score: 99.78924725506756
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 934
score: 99.87150390625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == - $NUMBER$ ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) )
rank: 934
score: 99.86305269281915
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) / ( max - min ) ;
rank: 934
score: 99.85033118206522
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 934
score: 99.84799985532408
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max - min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 934
score: 99.8419901529948
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 934
score: 99.835458984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 934
score: 99.83386101973684
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; return optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 934
score: 99.79766143528761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - max ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 934
score: 99.79493051714601
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 934
score: 99.78878096846847
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; total CaMeL Evaluations = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 935
score: 99.85030543550532
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 935
score: 99.84799134497548
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) + max ) ;
rank: 935
score: 99.841962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 1 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast
rank: 935
score: 99.83369654605264
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 935
score: 99.79763550884955
patch: final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 935
score: 99.79485273783186
patch: try { final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 935
score: 99.78847304335585
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 936
score: 99.871474609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 936
score: 99.86296280570652
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 936
score: 99.85027426861703
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 936
score: 99.841962890625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 936
score: 99.83541015625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast
rank: 936
score: 99.83365061313292
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( ) ;
rank: 936
score: 99.7975577295354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 936
score: 99.79484409568585
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 937
score: 99.8714453125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ )
rank: 937
score: 99.86267869015957
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 937
score: 99.85021587171053
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) ;
rank: 937
score: 99.83533203125
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == min ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f ,
rank: 937
score: 99.83358959441489
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 937
score: 99.79742809734513
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 937
score: 99.79480088495575
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 937
score: 99.78824429898648
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 938
score: 99.86266966540404
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( max , bound 1 ) ) ;
rank: 938
score: 99.85008726728724
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 938
score: 99.835302734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f
rank: 938
score: 99.83354903990964
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ;
rank: 938
score: 99.79721204369469
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 938
score: 99.79473174778761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 938
score: 99.78805954391892
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 939
score: 99.87124736657303
patch: final final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 939
score: 99.84999593098958
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 939
score: 99.83342179008152
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 939
score: 99.7946280420354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 940
score: 99.8712109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max = min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 940
score: 99.86252759850544
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 940
score: 99.84988239247312
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 , bound $NUMBER$ ) ;
rank: 940
score: 99.84750600961539
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 940
score: 99.8352734375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; opti@@
rank: 940
score: 99.83341471354167
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 940
score: 99.79703055862832
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 940
score: 99.7946280420354
patch: final double bound 1 = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 940
score: 99.7875744047619
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 941
score: 99.8623046875
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 941
score: 99.84985871010639
patch: final double bound 1 = ( i == 0 ) ? min : min + min * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 941
score: 99.84748444733796
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 941
score: 99.835244140625
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? max : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$
rank: 941
score: 99.8333050271739
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 941
score: 99.79700463219027
patch: final double bound 1 = ( i == 0 ) ? min : 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 941
score: 99.79452433628319
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 942
score: 99.86229395604396
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 942
score: 99.84970287566489
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , min ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 942
score: 99.83318442486703
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 942
score: 99.7969700636062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 942
score: 99.79446384126106
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 943
score: 99.87112426757812
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 943
score: 99.84968133223684
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min ) * ( max - min ) ;
rank: 943
score: 99.84187578914141
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 943
score: 99.83522727272727
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 943
score: 99.83316040039062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 943
score: 99.79690092643806
patch: final Double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 943
score: 99.79445519911505
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double max $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 943
score: 99.78669587556307
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 944
score: 99.86220703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final float bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 944
score: 99.84964192708334
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 944
score: 99.84732759915866
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) + max - min ) ;
rank: 944
score: 99.83310546875
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 944
score: 99.79672808351769
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 944
score: 99.78662109375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 945
score: 99.8621875
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 945
score: 99.84963037634408
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) * ( max - min ) ) ;
rank: 945
score: 99.835166015625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , generator , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 945
score: 99.8328348795573
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = true ;
rank: 945
score: 99.79607128042035
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 945
score: 99.79422186117256
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) .
rank: 945
score: 99.78587535511363
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 946
score: 99.86211535395408
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Double . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 946
score: 99.84943953804348
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 946
score: 99.84668872974537
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 946
score: 99.8418359375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max (
rank: 946
score: 99.835107421875
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 946
score: 99.8326386242378
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ?
rank: 946
score: 99.79601078539822
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 946
score: 99.79400580752213
patch: try { final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 946
score: 99.78583096590908
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 947
score: 99.86174815188173
patch: final double bound 1 = ( i == 0 ) ? min : min + max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 947
score: 99.84628714767157
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; continue ;
rank: 947
score: 99.841826171875
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( float ) ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$
rank: 947
score: 99.835107421875
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 947
score: 99.83252970377605
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 948
score: 99.86168514784946
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 948
score: 99.84929070723685
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ;
rank: 948
score: 99.835087890625
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 948
score: 99.79588979535399
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 949
score: 99.86167464717742
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 949
score: 99.84922724184783
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min , bound $NUMBER$ ) ;
rank: 949
score: 99.835029296875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 949
score: 99.8320821126302
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 949
score: 99.79584658462389
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 949
score: 99.78513849431818
patch: final double bound 1 = i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 950
score: 99.84916449652778
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 950
score: 99.83188883463542
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) + generator . next CaMeL Double ( ) ;
rank: 950
score: 99.7937465431416
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 950
score: 99.78492373511905
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 951
score: 99.87056016430412
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ;
rank: 951
score: 99.84915226063829
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , min ) , bound $NUMBER$ ) * ( max - min ) ;
rank: 951
score: 99.84539910082547
patch: final double bound 1 = ( i == 0 ) ? ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 951
score: 99.83478515625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 951
score: 99.83164491758242
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 951
score: 99.79583794247787
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 951
score: 99.79361691095133
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 951
score: 99.78472515484235
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 952
score: 99.861591796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( max - min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 952
score: 99.84914734543011
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 952
score: 99.841708984375
patch: public Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair optimize ( final FUNC f , final Goal CaMeL Type goal , final double min , final double max , final double start CaMeL Value ) throws Function CaMeL Evaluation CaMeL Exception { optima = new Univariate CaMeL Real CaMeL Point CaMeL Value CaMeL Pair [ starts ] ; total CaMeL Evaluations = 0 ; / / Multi - start loop . for ( int i = 0 ; i < starts ; ++ i ) { try { final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound
rank: 952
score: 99.83466796875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 952
score: 99.83160807291667
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 952
score: 99.79581201603982
patch: final double bound 1 = ( i == $STRING$ ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 952
score: 99.79360826880531
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( 0 - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 953
score: 99.86138916015625
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 953
score: 99.84905133928571
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 953
score: 99.84507921006944
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 953
score: 99.841689453125
patch: final double bound 1 = ( i == 0 ) ? min : start + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 953
score: 99.834345703125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 953
score: 99.83091362847222
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 953
score: 99.79553546736726
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 953
score: 99.79341814159292
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 953
score: 99.78421487894144
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 954
score: 99.84903798204788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 954
score: 99.84499887319711
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 954
score: 99.8306259527439
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ;
rank: 954
score: 99.79548361449115
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i != 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 954
score: 99.79320208794248
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ )
rank: 954
score: 99.78399325284092
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ) ;
rank: 955
score: 99.870361328125
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 955
score: 99.84898983534946
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( double ) bound $NUMBER$ ) ;
rank: 955
score: 99.84481358292079
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; }
rank: 955
score: 99.8342038272472
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 955
score: 99.83053234011628
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 955
score: 99.79547497234513
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , - $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 955
score: 99.79315023506638
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) .
rank: 955
score: 99.78358143299549
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 956
score: 99.84891493055555
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 956
score: 99.8416015625
patch: final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 956
score: 99.83417566043815
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ ;
rank: 956
score: 99.83043323863636
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 956
score: 99.79544904590708
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 956
score: 99.79309838219027
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 957
score: 99.84890582997312
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( min - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 957
score: 99.84436487268519
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 957
score: 99.83382654671718
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 957
score: 99.83008922230114
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 957
score: 99.79537126659292
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 957
score: 99.79308109789822
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 957
score: 99.78316793355856
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 958
score: 99.87016701211735
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 958
score: 99.84867527173913
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 958
score: 99.84159757653062
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 958
score: 99.82992621527778
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 958
score: 99.79507743362832
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i > 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 958
score: 99.79305517146018
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 959
score: 99.84814453125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 959
score: 99.8440574363426
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 959
score: 99.82988911290323
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 959
score: 99.79488730641593
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double min $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 959
score: 99.79304652931415
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 959
score: 99.78238492398648
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 960
score: 99.8699951171875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 960
score: 99.841455078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 960
score: 99.833603515625
patch: final double bound 1 = min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 960
score: 99.82968960013442
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 960
score: 99.79487866426992
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) - Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 960
score: 99.79294282356194
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 960
score: 99.78224415822072
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 961
score: 99.8480914572011
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 961
score: 99.84375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 961
score: 99.83351089015152
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 961
score: 99.82947463132022
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 961
score: 99.79486137997787
patch: final double bound 1 = ( 0 == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 961
score: 99.78164590371621
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 962
score: 99.86055086096938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 962
score: 99.84807942708333
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 962
score: 99.84319722877359
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 962
score: 99.83350112757732
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound $NUMBER$ ;
rank: 962
score: 99.82883029513889
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 962
score: 99.79288232853982
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( 0 - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 962
score: 99.78137317004504
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 963
score: 99.84786241319445
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 963
score: 99.84134457236843
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . max ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 963
score: 99.82841435185185
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 )
rank: 963
score: 99.79480952710178
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 963
score: 99.79283047566372
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 963
score: 99.78114442567568
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) ,
rank: 964
score: 99.841318359375
patch: final double start 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 964
score: 99.83343707074175
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; ;
rank: 964
score: 99.82835751488095
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 964
score: 99.79274405420354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 964
score: 99.78095967060811
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 965
score: 99.869033203125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , min $NUMBER$ ) ) ;
rank: 965
score: 99.86045656922043
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 965
score: 99.84753948709239
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 965
score: 99.8426872702206
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; break ;
rank: 965
score: 99.8412109375
patch: final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 965
score: 99.83338031572166
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 ;
rank: 965
score: 99.79461939988938
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 965
score: 99.79261442201327
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 965
score: 99.78094207488739
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 966
score: 99.8690185546875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , max , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 966
score: 99.8602780577957
patch: final double bound 1 = ( i == 0 ) ? min : min + max + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 966
score: 99.84731987847222
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 966
score: 99.82684461805556
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 966
score: 99.79455890486726
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 966
score: 99.7925798534292
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 967
score: 99.8602627840909
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 967
score: 99.84725722446237
patch: final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 967
score: 99.84119140625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 967
score: 99.83294862689394
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 967
score: 99.79448976769912
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 967
score: 99.79254528484513
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 968
score: 99.8602220184949
patch: double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( min , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 968
score: 99.84177809495192
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; break ;
rank: 968
score: 99.82606456043956
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 968
score: 99.79243293694691
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( min - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 968
score: 99.77977195945945
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 969
score: 99.85998046875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; ;
rank: 969
score: 99.84709028764205
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 969
score: 99.84169553360849
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 969
score: 99.84108664772727
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , max ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 969
score: 99.82604528356481
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( ++ i ) ;
rank: 969
score: 99.79441198838495
patch: final double bound 1 = ( i * 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 969
score: 99.79242429480088
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 970
score: 99.86875805412372
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , ( i == 0 ) ? max : min ) ;
rank: 970
score: 99.85996685606061
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound 1 ) ) ;
rank: 970
score: 99.84695270497312
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 970
score: 99.84168310072816
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } finally {
rank: 970
score: 99.84105705492425
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 970
score: 99.82581380208333
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 970
score: 99.79435149336283
patch: final double bound 1 = ( i == 0 ) ? 1 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 970
score: 99.77944643862612
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 971
score: 99.859951171875
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 971
score: 99.84694505774456
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 971
score: 99.84167710790095
patch: final double bound 1 = ( i == 0 ) ? generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 971
score: 99.84096827651516
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , min ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 971
score: 99.8326755798969
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = bound 1 ;
rank: 971
score: 99.82580850290698
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 971
score: 99.79421321902655
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 & bound $NUMBER$ ) ) ;
rank: 971
score: 99.79240701050885
patch: final double bound 1 = ( i == 0 ) ? min : min - generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 971
score: 99.7793408643018
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ,
rank: 972
score: 99.8598386205808
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( max , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 972
score: 99.84694220430107
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 972
score: 99.8411900788835
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) ) ; break ;
rank: 972
score: 99.83259548611112
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; ;
rank: 972
score: 99.82577481112638
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 972
score: 99.79419593473452
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 972
score: 99.79237244192478
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 973
score: 99.85976957070707
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( min , bound $NUMBER$ ) ) ;
rank: 973
score: 99.84669091235632
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 973
score: 99.840927734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 973
score: 99.82550048828125
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min ( i ) ;
rank: 973
score: 99.79417000829646
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 973
score: 99.79236379977876
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 973
score: 99.77915610923424
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 974
score: 99.85972377232143
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 974
score: 99.84654169497283
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 974
score: 99.82546784156976
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 974
score: 99.79387617533186
patch: final double bound 1 = ( i == 0 ) ? $STRING$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 974
score: 99.79232058904867
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) - ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 975
score: 99.86806017287235
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 975
score: 99.85963472406915
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 975
score: 99.84653108016305
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 975
score: 99.84072989004629
patch: final double bound 1 = ( i == 0 ) ? min + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 975
score: 99.83165874677834
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 975
score: 99.82525414156626
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ?
rank: 975
score: 99.79368604811947
patch: final double bound 1 = ( i == 0 ) ? $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 975
score: 99.79216503042035
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 975
score: 99.77908572635135
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 976
score: 99.86796238111413
patch: final double bound 1 = ( i == 0 ) ? min : min + min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 976
score: 99.85933299731182
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 976
score: 99.84652777777778
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 976
score: 99.84047288161058
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; return optima ;
rank: 976
score: 99.83162681502525
patch: final double bound 1 = ( i == 0 ) ? min : 0 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 976
score: 99.8251884352993
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 976
score: 99.79359962665929
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 976
score: 99.79206996681415
patch: final double bound 1 = ( i == 0 ) ? this : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 976
score: 99.77897135416667
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 977
score: 99.86779296875
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , bound $NUMBER$ ) ;
rank: 977
score: 99.85913348454301
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + max + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 977
score: 99.8463718580163
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 977
score: 99.84021448206019
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 977
score: 99.83161695075758
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ;
rank: 977
score: 99.8249843267747
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i ) ;
rank: 977
score: 99.79353913163717
patch: final double bound 1 += ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 977
score: 99.79204404037611
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 977
score: 99.778540259009
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 978
score: 99.8590974506579
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + bound $NUMBER$ ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 978
score: 99.84628693953805
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + $NUMBER$ + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 978
score: 99.83961769386575
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 978
score: 99.82466362847222
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 978
score: 99.79352184734513
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - max ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 978
score: 99.79194033462389
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 978
score: 99.77839949324324
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 979
score: 99.86697748655914
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 979
score: 99.85893654336735
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , System . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 979
score: 99.8458941915761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 979
score: 99.84031723484848
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima . i = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 979
score: 99.83943838443396
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; total CaMeL Evaluations = 0 ;
rank: 979
score: 99.83065967345506
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 979
score: 99.824609375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 979
score: 99.7783203125
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 980
score: 99.86695894281915
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 980
score: 99.85833925189394
patch: final String bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 980
score: 99.84586234714673
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , min , bound $NUMBER$ ) ;
rank: 980
score: 99.84024818497475
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 980
score: 99.83931929976852
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( start CaMeL Value , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 980
score: 99.82444069602273
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 980
score: 99.79346999446902
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 980
score: 99.79174156526548
patch: final double bound 1 = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 980
score: 99.77828512105856
patch: final double bound 1 = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 981
score: 99.86674167798913
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 981
score: 99.85833675986842
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( ( i == 0 ) ? max : min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; ;
rank: 981
score: 99.845703125
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , bound $NUMBER$ ) ;
rank: 981
score: 99.84016262755102
patch: min 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 981
score: 99.83922648879717
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 981
score: 99.79344406803098
patch: final double bound 1 = ( min == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 981
score: 99.79171563882744
patch: final double bound 1 = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 981
score: 99.7781883445946
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == min ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 982
score: 99.84543775475544
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound $NUMBER$ , max ) ;
rank: 982
score: 99.84006754557292
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 982
score: 99.82417332848837
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Int ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 982
score: 99.79343542588495
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i >= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 982
score: 99.7916983545354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 982
score: 99.7781443552928
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 983
score: 99.86634744623656
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , ( max - min ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 983
score: 99.8581025094697
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 983
score: 99.84531037703805
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( bound $NUMBER$ ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 983
score: 99.83882112323113
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 983
score: 99.8239413174716
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 983
score: 99.79337493086283
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : start + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 983
score: 99.79164650165929
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 983
score: 99.77811796171171
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 984
score: 99.86622155230978
patch: final double bound 1 = ( i == 0 ) ? min : min + min + max + min ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 984
score: 99.85806241599462
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 984
score: 99.84497612847223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 984
score: 99.83994989809783
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , max ) ) ;
rank: 984
score: 99.82900390625
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; ;
rank: 984
score: 99.82360555959302
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 984
score: 99.79328850940266
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 984
score: 99.79162057522124
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 984
score: 99.77807397240991
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i <= 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 985
score: 99.8580309139785
patch: final double bound 1 = ( i == 0 ) ? min : min + max + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound $NUMBER$ ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 985
score: 99.84432508680555
patch: final double bound 1 = ( i == 0 ) ? min : min + min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 985
score: 99.83860001474056
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 985
score: 99.82360229492187
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( ) ;
rank: 985
score: 99.79327986725664
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] += optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 985
score: 99.791499585177
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 985
score: 99.77795960022523
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 986
score: 99.86607442876344
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 986
score: 99.85762965425532
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : max + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 986
score: 99.84419487847222
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , bound 1 ) ;
rank: 986
score: 99.83822831483644
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 986
score: 99.82868923611112
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 986
score: 99.82282203851744
patch: final double bound 1 = ( i == 0 ) ? min : min + min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 986
score: 99.79322801438053
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound 1 ) ) ;
rank: 986
score: 99.79136131084071
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 987
score: 99.85759743679775
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 987
score: 99.82754550137362
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; ;
rank: 987
score: 99.79135266869469
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 987
score: 99.77762528153153
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ,
rank: 988
score: 99.85744160353535
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 988
score: 99.84337022569444
patch: final double bound 1 = ( i == 0 ) ? min : min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 988
score: 99.82235340589888
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 988
score: 99.79298603429204
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 988
score: 99.7775197072072
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 989
score: 99.86551966292134
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max ) ;
rank: 989
score: 99.84331597222223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; try { final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 989
score: 99.839677734375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal . Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 989
score: 99.82515190972222
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 989
score: 99.822021484375
patch: final int bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 989
score: 99.79288232853982
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 989
score: 99.79127488938053
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 989
score: 99.77744052646396
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 990
score: 99.86510416666667
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 990
score: 99.85664506392045
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , max ) ;
rank: 990
score: 99.84314650632022
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 990
score: 99.83949788411458
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 990
score: 99.83730651285046
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 990
score: 99.82505904796511
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 990
score: 99.79245022123894
patch: final double bound 1 = ( i < 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 990
score: 99.7912143943584
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - 1 ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 991
score: 99.86458333333333
patch: final double bound 1 = ( i == 0 ) ? min : min + max + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 991
score: 99.83944284539474
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : Math . min ( bound 1 , bound $NUMBER$ ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 991
score: 99.82502693965517
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 991
score: 99.82124467329545
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Long ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 991
score: 99.79225145188053
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 991
score: 99.77700943130631
patch: final double bound 1 = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ,
rank: 992
score: 99.8422028616573
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 992
score: 99.83639814268868
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 992
score: 99.82476128472223
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( bound $NUMBER$ , bound $NUMBER$ ) ;
rank: 992
score: 99.82097111191861
patch: final double bound 1 = ( i == 0 ) ? min : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 992
score: 99.79222552544248
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max + min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 992
score: 99.79091191924779
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final int bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 992
score: 99.77638478322072
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ; }
rank: 993
score: 99.8642578125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( double ) ( max - min ) ;
rank: 993
score: 99.85371952266483
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 993
score: 99.83604805424528
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 993
score: 99.8209597565407
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( this , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 993
score: 99.79087735066372
patch: final double bound 1 = ( i == 0 ) ? min : min * generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 994
score: 99.8420642671131
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 994
score: 99.83777225378788
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 994
score: 99.83535709021227
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( ( i == 0 ) ? max : min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 994
score: 99.82091433502907
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ,
rank: 994
score: 99.79203539823008
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i - 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 994
score: 99.79086870851769
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min - generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 994
score: 99.77635838963964
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 995
score: 99.86255705758427
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? bound $NUMBER$ : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 995
score: 99.85221711881869
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , min , bound $NUMBER$ ) ;
rank: 995
score: 99.83516362028301
patch: final double bound 1 = ( i == 0 ) ? min : min + min - min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 995
score: 99.8206531613372
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ,
rank: 995
score: 99.79200947179204
patch: final double bound 1 = ( i == i ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 995
score: 99.79082549778761
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 995
score: 99.77626161317568
patch: final double bound 1 = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 996
score: 99.86243346497253
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , max - min ) ;
rank: 996
score: 99.83484117040095
patch: final double bound 1 = ( i == 0 ) ? min : min + min + min + min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 996
score: 99.82036812697785
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . next CaMeL Double ( ) * ( max - min ) ;
rank: 996
score: 99.81859348244863
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal ,
rank: 996
score: 99.79067858130531
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 996
score: 99.7762352195946
patch: final double bound 1 = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = i == 0 ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 997
score: 99.84714918870192
patch: final double bound 1 = ( i == 0 ) ? min : min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 997
score: 99.83992513020833
patch: final double bound 1 = ( i == 0 ) ? min : min + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 997
score: 99.83705078125
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , ;
rank: 997
score: 99.83459242334905
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max + generator . next CaMeL Double ( ) : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ )
rank: 997
score: 99.81649728548729
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 997
score: 99.79191440818585
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i < 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 997
score: 99.79047116980088
patch: final double bound 1 = ( i == 0 ) ? 0 : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 997
score: 99.77617363457207
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 998
score: 99.86087824789325
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - bound $NUMBER$ ) ;
rank: 998
score: 99.84698407061688
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 998
score: 99.83828262544014
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 998
score: 99.81803385416667
patch: final double bound 1 = ( max == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 998
score: 99.79188848174779
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound 1 ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound 1 ) ) ;
rank: 998
score: 99.79040203263274
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 998
score: 99.77609445382883
patch: final String bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 998
score: 99.68636881510416
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ;
rank: 999
score: 99.8333984375
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; } catch ( Runtime CaMeL
rank: 999
score: 99.82349664392606
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 999
score: 99.79176749170354
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 & bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 999
score: 99.79032425331859
patch: final double bound 1 = ( i == 0 ) ? min : min + min + generator . next CaMeL Double ( ) + ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 999
score: 99.77607685810811
patch: final double bound 1 = ( i == 0 ) ? min : generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min : generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 999
score: 99.0126953125
patch: final double bound 1 = ( i == 0 )
rank: 1000
score: 99.84147338867187
patch: final double bound 1 = ( i == 0 ) ? min : min + min + bound 1 ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + bound 1 ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 1000
score: 99.81703404017857
patch: final float bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 1000
score: 99.80812230603448
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) ) ;
rank: 1000
score: 99.79175020741151
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Double ( ) * ( max + min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) ) ;
rank: 1000
score: 99.79022918971239
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; final double bound $NUMBER$ = ( i == 0 ) ? max : min + generator . next CaMeL Long ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ;
rank: 1000
score: 99.77595368806307
patch: final double bound 1 = ( i == 0 ) ? min : min + generator . next CaMeL Double ( ) * ( max - min ) ; optima [ i ] = optimizer . optimize ( f , goal , Fast CaMeL Math . min ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound $NUMBER$ , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) , Fast CaMeL Math . max ( bound 1 , bound $NUMBER$ ) ) ; }
rank: 1000
score: 94.05728149414062
patch: final
