rank: 1
score: 99.77132415771484
patch: ++ iter ;
rank: 1
score: 99.52080426897321
patch: ++ iter ; ++ iter ;
rank: 1
score: 99.40776624177632
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 1
score: 99.38524373372395
patch: ++ max CaMeL Eval ;
rank: 1
score: 99.3415771484375
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ;
rank: 1
score: 99.3012924194336
patch: double search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 1
score: 99.2344462076823
patch: result = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 1
score: 99.13280232747395
patch: if ( ! iter . is CaMeL Empty ( ) ;
rank: 2
score: 99.38153948102679
patch: ++ max CaMeL Eval ++ ;
rank: 2
score: 99.36498006184895
patch: current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 2
score: 99.33673773871527
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( ) ;
rank: 2
score: 99.27054595947266
patch: ++ iter ; ++ - iter ;
rank: 2
score: 99.26575724283855
patch: current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 2
score: 99.16886393229167
patch: list = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 2
score: 99.12961251395089
patch: else { ++ iter ; }
rank: 3
score: 99.33203125
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition (
rank: 3
score: 99.30009629991319
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 3
score: 99.27397228422619
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ;
rank: 3
score: 99.25473022460938
patch: ++ iter ; ++ iter ; ++ iter ;
rank: 3
score: 99.25370788574219
patch: ++ iter ; ++ iter ; ;
rank: 3
score: 99.16660563151042
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 3
score: 99.1212158203125
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ;
rank: 4
score: 99.29002796519886
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ;
rank: 4
score: 99.2622802734375
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 4
score: 99.24661254882812
patch: ++ iter ; ; ++ iter ;
rank: 4
score: 99.21070207868304
patch: ++ iter ; ++ 1 ;
rank: 4
score: 99.13771275111607
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 4
score: 99.09966169084821
patch: ++ iter ; ++ n ;
rank: 4
score: 99.06529235839844
patch: ++ iter ; if ++ iter ;
rank: 5
score: 99.31892700195313
patch: Point CaMeL Value CaMeL Pair current = current ;
rank: 5
score: 99.25310668945312
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ;
rank: 5
score: 99.23749856387867
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 5
score: 99.23565673828125
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval ;
rank: 5
score: 99.15974426269531
patch: ++ iter ; while ++ iter ;
rank: 5
score: 99.100830078125
patch: iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 5
score: 99.01036725725446
patch: else { ++ 0 ; }
rank: 6
score: 99.30263264973958
patch: delta = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 6
score: 99.24857788085937
patch: final double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 6
score: 99.1882553100586
patch: ++ max CaMeL Eval = iter ;
rank: 6
score: 99.15003967285156
patch: ++ iter ; ++ iter ; else
rank: 6
score: 99.07865397135417
patch: y = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 6
score: 99.0477294921875
patch: if ( ! iter . is CaMeL Empty ( ) ) {
rank: 6
score: 99.00769805908203
patch: else { if ++ iter ; }
rank: 7
score: 99.30263061523438
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 7
score: 99.27586364746094
patch: ++ max CaMeL Eval = steepest CaMeL Descent . clone ( ) ;
rank: 7
score: 99.2189712524414
patch: int max CaMeL Eval = steepest CaMeL Descent . clone ( ) ;
rank: 7
score: 99.1832275390625
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ;
rank: 7
score: 99.14836120605469
patch: ++ iter ; ++ iter ; }
rank: 7
score: 99.14628092447917
patch: ++ iter ; ++ iter ; iter ;
rank: 7
score: 99.06590169270834
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 7
score: 99.03702799479167
patch: if ( ! iter . is CaMeL Empty ( ) )
rank: 7
score: 98.97675323486328
patch: ++ iter ; } ++ iter ;
rank: 8
score: 99.29167036576705
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 8
score: 99.23174085115132
patch: int [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 8
score: 99.21728515625
patch: final double search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 8
score: 99.17344447544643
patch: ++ max CaMeL Eval -- ;
rank: 8
score: 99.13776397705078
patch: ++ iter ; ++ - 1 ;
rank: 8
score: 99.01176452636719
patch: ++ iter ; current = iter ;
rank: 9
score: 99.21680450439453
patch: if ( update CaMeL Formula ) {
rank: 9
score: 99.14898071289062
patch: ++ max CaMeL Eval = iter + iter ;
rank: 9
score: 99.1231689453125
patch: i * ++ ; ++ iter ;
rank: 9
score: 99.09799194335938
patch: ++ iter ; ++ ++ iter ;
rank: 9
score: 99.06162516276042
patch: other = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 9
score: 99.00595092773438
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( ) ;
rank: 9
score: 98.9461669921875
patch: if ( iter == 0 ;
rank: 10
score: 99.28622616038604
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 10
score: 99.25510079520089
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 10
score: 99.21389770507812
patch: while ( true ) {
rank: 10
score: 99.21356491815476
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 10
score: 99.12641252790179
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval ;
rank: 10
score: 99.09201485770089
patch: ++ iter ; ++ start ;
rank: 10
score: 99.08534240722656
patch: ++ ++ iter ; ++ iter ;
rank: 10
score: 99.05345517113095
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 10
score: 98.97777448381696
patch: ++ n ; ++ n ;
rank: 10
score: 98.93640747070313
patch: ++ [ ] iter = iter . length ;
rank: 11
score: 99.2465884560033
patch: return ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) ;
rank: 11
score: 99.20241185238487
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 11
score: 99.11709255642361
patch: r [ max CaMeL Eval ] = ;
rank: 11
score: 99.05344645182292
patch: p = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 11
score: 98.97281494140626
patch: Iterator iter = iter . iterator ( ) ;
rank: 11
score: 98.92979213169643
patch: else { ++ 1 ; }
rank: 12
score: 99.27047729492188
patch: delta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 12
score: 99.24502563476562
patch: ++ max CaMeL Eval -= steepest CaMeL Descent . clone ( ) ;
rank: 12
score: 99.20149953741776
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 12
score: 99.17903900146484
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 12
score: 99.10549926757812
patch: ++ max CaMeL Eval >= 0 ;
rank: 12
score: 99.07390679253473
patch: ++ iter ; ++ iter ; / /
rank: 12
score: 99.05169122869319
patch: return compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 12
score: 98.96063639322917
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) ;
rank: 12
score: 98.92200578962054
patch: if ( iter > 0 ;
rank: 13
score: 99.27003696986607
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 13
score: 99.24476841517857
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 13
score: 99.17742919921875
patch: if ( steepest CaMeL Descent . clone ( ) ) {
rank: 13
score: 99.10533650716145
patch: ++ max CaMeL Eval -- ; ++ max CaMeL Eval ;
rank: 13
score: 99.04698689778645
patch: found = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 13
score: 98.95682525634766
patch: if ( current != null ) {
rank: 13
score: 98.9137295809659
patch: if ( ! iter . is CaMeL Empty ++ )
rank: 14
score: 99.26290893554688
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 14
score: 99.23293138586956
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ;
rank: 14
score: 99.10501098632812
patch: r [ max CaMeL Eval ++ ] = ;
rank: 14
score: 99.06710476345486
patch: ++ iter ; ++ * ++ iter ;
rank: 14
score: 99.04532877604167
patch: ret = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 14
score: 99.02505493164062
patch: iter ; ++ iter ;
rank: 14
score: 98.94963836669922
patch: while ( iter != null ) {
rank: 15
score: 99.253515625
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 15
score: 99.180029296875
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 15
score: 99.09895324707031
patch: ++ max CaMeL Eval * iter ;
rank: 15
score: 99.04889678955078
patch: ++ iter ; else ++ iter ;
rank: 15
score: 99.03736368815105
patch: table = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 15
score: 99.01951381138393
patch: iter ++ ; ++ iter ;
rank: 15
score: 98.93375338040866
patch: while ( ! current . is CaMeL Empty ( ) ) {
rank: 15
score: 98.908447265625
patch: / * * / ++ iter ;
rank: 16
score: 99.22797309027777
patch: int [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 16
score: 99.16129557291667
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 16
score: 99.0869384765625
patch: ++ max CaMeL Eval = iter + 1 ;
rank: 16
score: 99.0377197265625
patch: ++ 1 ; ++ iter ;
rank: 16
score: 99.03626427283653
patch: state = steepest CaMeL Descent . clone ( ) ;
rank: 16
score: 98.91429901123047
patch: ++ iter ; Thread . current CaMeL Thread ( ) . interrupt ( ) ;
rank: 16
score: 98.90011596679688
patch: while ( ! iter . is CaMeL Empty ( ) ;
rank: 17
score: 99.2392578125
patch: current = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 17
score: 99.17482591711956
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 17
score: 99.08660016741071
patch: ++ max CaMeL Eval = ;
rank: 17
score: 99.0360616048177
patch: ++ * ++ iter ;
rank: 17
score: 99.03474934895833
patch: res = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 17
score: 99.00666639539931
patch: iter ; ++ iter ; ++ iter ;
rank: 17
score: 98.89661254882813
patch: ++ iter ; }
rank: 18
score: 99.2141446200284
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 18
score: 99.16855256453805
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = steepest CaMeL Descent . clone ( ) ;
rank: 18
score: 99.08377075195312
patch: ++ max CaMeL Eval ++ ; ;
rank: 18
score: 99.0350341796875
patch: ++ * ++ iter ; ++ iter ;
rank: 18
score: 99.028564453125
patch: n = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 18
score: 99.00326102120536
patch: ++ 0 ; ++ iter ;
rank: 18
score: 98.88556463068181
patch: if ( ! iter . is CaMeL Empty ++ ;
rank: 19
score: 99.16781277126736
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition (
rank: 19
score: 99.08247680664063
patch: ++ max CaMeL Eval - max CaMeL Eval ;
rank: 19
score: 99.03259955512152
patch: ++ iter ; ++ * * iter ;
rank: 19
score: 99.02694702148438
patch: temp = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 19
score: 98.98642578125
patch: ++ iter ; ++ iter ; -- iter ;
rank: 19
score: 98.89325823102679
patch: ++ iter ; ++ current ;
rank: 19
score: 98.88414001464844
patch: else { ++ * iter ; }
rank: 20
score: 99.23464133522727
patch: current = find CaMeL Upper CaMeL Bound ( ) ;
rank: 20
score: 99.07837524414063
patch: ++ max CaMeL Eval = iter * iter ;
rank: 20
score: 99.02494812011719
patch: ++ iter ; ++ * iter ;
rank: 20
score: 99.02431233723958
patch: rs = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 20
score: 98.98123168945312
patch: ++ new ++ ; ++ iter ;
rank: 20
score: 98.88313802083333
patch: while ( ! current . is CaMeL Empty ( ) )
rank: 20
score: 98.87451934814453
patch: / * * ; ++ iter ;
rank: 21
score: 99.23336029052734
patch: current = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 21
score: 99.18244934082031
patch: ++ max CaMeL Eval * steepest CaMeL Descent . clone ( ) ;
rank: 21
score: 99.1628173828125
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 21
score: 99.07811482747395
patch: ++ max CaMeL Eval = iter - max CaMeL Eval ;
rank: 21
score: 99.02346801757812
patch: else ++ iter ; ++ iter ;
rank: 21
score: 99.0220235188802
patch: return new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 21
score: 98.87943522135417
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ) ;
rank: 21
score: 98.87078857421875
patch: else { ++ [ 1 ] ; }
rank: 22
score: 99.17775315504808
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current ;
rank: 22
score: 99.16100396050348
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 22
score: 99.13583984375
patch: double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 22
score: 99.07615152994792
patch: ++ max CaMeL Eval = ; ++ max CaMeL Eval ;
rank: 22
score: 99.01589731069711
patch: result = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 22
score: 99.01497977120536
patch: / * ] ++ iter ;
rank: 22
score: 98.95820617675781
patch: ++ iter ; iter / / /
rank: 22
score: 98.87732747395833
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( ;
rank: 23
score: 99.2233378092448
patch: delta += find CaMeL Upper CaMeL Bound ( point ) ;
rank: 23
score: 99.17515869140625
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 23
score: 99.16012137276786
patch: double [ ] steepest CaMeL Descent . clone ( ) ;
rank: 23
score: 99.07409057617187
patch: r [ max CaMeL Eval ] = iter ;
rank: 23
score: 99.01183363970588
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 23
score: 99.00834655761719
patch: ++ iter ; ++ * * /
rank: 23
score: 98.95522238991477
patch: ++ iter ; ++ iter ; } ++ iter ;
rank: 23
score: 98.86515808105469
patch: / * * * ++ iter ;
rank: 23
score: 98.86076136997768
patch: if ( ! iter . is CaMeL Empty ( ) ) break ;
rank: 24
score: 99.2212626139323
patch: delta += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 24
score: 99.16005859375
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . iterator ( ) ;
rank: 24
score: 99.12699672154018
patch: if ( steepest CaMeL Descent . length < n ) {
rank: 24
score: 99.0635009765625
patch: ++ max CaMeL Eval ++ ; ++ iter ;
rank: 24
score: 99.00795200892857
patch: ++ iter ; ++ value ;
rank: 24
score: 99.00369262695312
patch: cur = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 24
score: 98.95486886160714
patch: ++ iter ; ++ 0 ;
rank: 24
score: 98.86492047991071
patch: else { return iter ; }
rank: 24
score: 98.85879720052084
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ) )
rank: 25
score: 99.12117513020833
patch: double search CaMeL Direction [ ] = steepest CaMeL Descent . clone ( ) ;
rank: 25
score: 99.0629150390625
patch: r [ max CaMeL Eval ++ ] = Double . Na CaMeL N ;
rank: 25
score: 99.00668674045139
patch: ++ iter ; ++ iter ; break ;
rank: 25
score: 99.00365193684895
patch: v = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 25
score: 98.86087472098214
patch: if ( ! iter . is CaMeL Empty ++ this . iter ;
rank: 25
score: 98.85314223345588
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) iter ;
rank: 26
score: 99.16518040707237
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 26
score: 99.06156158447266
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( ;
rank: 26
score: 99.0030517578125
patch: w = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 26
score: 98.99938286675348
patch: ++ iter ; ++ - - iter ;
rank: 26
score: 98.9415616122159
patch: ++ iter ; ; ++ iter ; ++ iter ;
rank: 26
score: 98.845458984375
patch: Math . max ( iter , current ) ;
rank: 27
score: 99.16224670410156
patch: Point CaMeL Value CaMeL Pair current = current . get CaMeL Point ( ) ;
rank: 27
score: 99.14660063244048
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ;
rank: 27
score: 99.11525268554688
patch: double steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 27
score: 99.06029256184895
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ++ ;
rank: 27
score: 99.00054931640625
patch: c = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 27
score: 98.93814086914062
patch: } ++ iter ; ++ iter ;
rank: 27
score: 98.8504867553711
patch: else { iter += iter ; }
rank: 27
score: 98.84525553385417
patch: return new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 28
score: 99.20899047851563
patch: Point CaMeL Value CaMeL Pair current = null ;
rank: 28
score: 99.11479949951172
patch: if ( steepest CaMeL Descent . length < point . length ) {
rank: 28
score: 99.05558013916016
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( ;
rank: 28
score: 98.9951680501302
patch: left = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 28
score: 98.98765733506944
patch: ++ iter ; ++ * - iter ;
rank: 28
score: 98.93784005301339
patch: ++ iter ; ++ max ;
rank: 28
score: 98.84361572265625
patch: else { iter += 0 . 0 ; }
rank: 28
score: 98.84193929036458
patch: if ( ! current . is CaMeL Empty ( ) ;
rank: 29
score: 99.20692443847656
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( ) ;
rank: 29
score: 99.16056605747768
patch: ++ [ ] steepest CaMeL Descent . clone ( ) ;
rank: 29
score: 99.11198156020221
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) current ;
rank: 29
score: 99.05447152944711
patch: ++ max CaMeL Eval = iter ; ++ max CaMeL Eval ;
rank: 29
score: 98.9946797688802
patch: item = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 29
score: 98.92699584960937
patch: ++ iter ; ++ iter ; return iter ;
rank: 29
score: 98.84096272786458
patch: try { ++ iter ;
rank: 29
score: 98.84009467230902
patch: / * * * / ++ iter ;
rank: 30
score: 99.15390159970238
patch: final Univariate CaMeL Function [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 30
score: 99.14511253720238
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ;
rank: 30
score: 99.11105346679688
patch: if ( checker != null ) {
rank: 30
score: 99.05288696289062
patch: ++ max CaMeL Eval = iter + max CaMeL Eval ;
rank: 30
score: 98.98506673177083
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 30
score: 98.92425537109375
patch: ++ n ; ++ iter ;
rank: 30
score: 98.84009552001953
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ) ) {
rank: 30
score: 98.83309500558036
patch: else { ++ n ; }
rank: 31
score: 99.20444742838542
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . clone ( ) ;
rank: 31
score: 99.15352085658482
patch: Point CaMeL Value CaMeL Pair current = current . current ( ) ;
rank: 31
score: 99.14251154119319
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 31
score: 99.05200805664063
patch: ++ max CaMeL Eval ++ ; if ( ;
rank: 31
score: 98.98311070033482
patch: result = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 31
score: 98.8390362079327
patch: if ( ! current . is CaMeL Empty ( ) ) {
rank: 31
score: 98.81486002604167
patch: if ( ! iter . is CaMeL Empty ++ iter ;
rank: 32
score: 99.20309682992789
patch: delta += steepest CaMeL Descent . clone ( ) ;
rank: 32
score: 99.15245056152344
patch: ++ max CaMeL Eval -= steepest CaMeL Descent . precondition ( ) ;
rank: 32
score: 99.10898061899039
patch: iter = steepest CaMeL Descent . clone ( ) ;
rank: 32
score: 99.05064900716145
patch: ++ max CaMeL Eval ; ; ++ max CaMeL Eval ;
rank: 32
score: 98.9759750366211
patch: ++ iter ; iter ; * /
rank: 32
score: 98.97402954101562
patch: self = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 32
score: 98.92067464192708
patch: ++ iter ; ++ iter ; else ;
rank: 32
score: 98.8369140625
patch: if ( ! iter . is CaMeL Empty ( ) ) continue ;
rank: 32
score: 98.81312561035156
patch: / * * * ++ * /
rank: 33
score: 99.13803582442434
patch: double [ ] steepest CaMeL Descent = preconditioner . iterator ( ) ;
rank: 33
score: 99.10629272460938
patch: return new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 33
score: 99.04315185546875
patch: ++ iter ; if ( iter ;
rank: 33
score: 98.9736328125
patch: ++ iter ; try ; ++ iter ;
rank: 33
score: 98.9701436360677
patch: block = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 33
score: 98.92005504261364
patch: ++ iter ; ++ iter ; ; ++ iter ;
rank: 33
score: 98.83308410644531
patch: try { current = ++ iter ;
rank: 33
score: 98.81279907226562
patch: if ( ! iter . is CaMeL Empty ;
rank: 34
score: 99.20074821920956
patch: List steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 34
score: 99.13198673023896
patch: double [ ] steepest CaMeL Descent = preconditioner . length ;
rank: 34
score: 99.10500759548611
patch: if ( ! update CaMeL Formula ) {
rank: 34
score: 99.04142930772569
patch: ++ iter ; ++ max CaMeL Eval ;
rank: 34
score: 98.96942138671875
patch: ++ iter ; while ++ 1 ;
rank: 34
score: 98.96788533528645
patch: old = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 34
score: 98.89827728271484
patch: ++ iter ; ++ iter ; try
rank: 34
score: 98.81035614013672
patch: * * * * ++ iter ;
rank: 35
score: 99.19753793569711
patch: delta = steepest CaMeL Descent . clone ( ) ;
rank: 35
score: 99.1421760110294
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 35
score: 99.1039680032169
patch: double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 35
score: 99.03904030539773
patch: ++ max CaMeL Eval * max CaMeL Eval ++ ;
rank: 35
score: 98.96495819091797
patch: result = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 35
score: 98.95074462890625
patch: ++ iter ; ++ - $NUMBER$ ;
rank: 35
score: 98.89561244419643
patch: ++ $NUMBER$ ; ++ iter ;
rank: 35
score: 98.82866668701172
patch: while ( iter < n ) {
rank: 35
score: 98.81021881103516
patch: ++ 0 ; if ++ iter ;
rank: 36
score: 99.14065115792411
patch: ++ max CaMeL Eval -= search CaMeL Direction [ point . length ;
rank: 36
score: 99.12417805989584
patch: double [ ] steepest CaMeL Descent = preconditioner ;
rank: 36
score: 98.95960489908855
patch: data = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 36
score: 98.94896104600694
patch: ++ iter ; iter ; int iter ;
rank: 36
score: 98.8933349609375
patch: ++ iter ; ++ iter ; ++ start ;
rank: 36
score: 98.8271484375
patch: while ( ! iter . is CaMeL Empty ( ) ) {
rank: 36
score: 98.80780029296875
patch: else { ++ iter ; * /
rank: 37
score: 99.1951545266544
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 37
score: 99.13914137620192
patch: ++ max CaMeL Eval -= search CaMeL Direction [ 0 ] ;
rank: 37
score: 99.11733176491477
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL String ( ) ;
rank: 37
score: 99.099609375
patch: if ( steepest CaMeL Descent . length < r . length ) {
rank: 37
score: 99.03147194602273
patch: result = new Point CaMeL Value CaMeL Pair ( ;
rank: 37
score: 98.9575703938802
patch: r = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 37
score: 98.94586859809027
patch: ++ iter ; ++ * int iter ;
rank: 37
score: 98.89230346679688
patch: ++ iter ; ++ iter ; ++ n ;
rank: 37
score: 98.80604553222656
patch: else { ++ iter ; } }
rank: 38
score: 99.191650390625
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( this ) ;
rank: 38
score: 99.13662109375
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 38
score: 99.11685341282895
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 38
score: 99.03043212890626
patch: ++ iter ; ; ++ max CaMeL Eval ;
rank: 38
score: 98.9550069173177
patch: this = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 38
score: 98.94206019810268
patch: ++ iter ; while iter ;
rank: 38
score: 98.88959295099431
patch: ++ iter ; ++ ++ iter ; ++ iter ;
rank: 38
score: 98.8260498046875
patch: ++ iter ; if ( ! iter . is CaMeL Empty ;
rank: 38
score: 98.80408732096355
patch: if ( ! iter . is CaMeL Empty ++ 1 ;
rank: 39
score: 99.1903076171875
patch: delta = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 39
score: 99.13648745888158
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( ) ;
rank: 39
score: 99.11227416992188
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point ) ;
rank: 39
score: 99.09178402549342
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 39
score: 99.029931640625
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) iter ;
rank: 39
score: 98.95226033528645
patch: node = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 39
score: 98.94134521484375
patch: ++ * iter ; ++ iter ;
rank: 39
score: 98.88730294363839
patch: ++ iter ; iter / /
rank: 39
score: 98.82061004638672
patch: if ( iter != null ) {
rank: 39
score: 98.80365862165179
patch: else { iter ++ ; }
rank: 40
score: 99.18857828776042
patch: r = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 40
score: 99.13577974759616
patch: current = steepest CaMeL Descent . clone ( ) ;
rank: 40
score: 99.11083984375
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 40
score: 99.02496337890625
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r ) ;
rank: 40
score: 98.95139567057292
patch: a = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 40
score: 98.93895128038194
patch: ++ iter ; iter ; ++ iter ;
rank: 40
score: 98.8850341796875
patch: ++ iter ; ++ start ; ++ iter ;
rank: 40
score: 98.82054554332386
patch: ++ iter ; System . exit ( 0 ) ;
rank: 40
score: 98.80335998535156
patch: ++ iter ; if ++ n ;
rank: 41
score: 99.18836059570313
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 41
score: 99.1344502766927
patch: Point CaMeL Value CaMeL Pair current = current . current ;
rank: 41
score: 99.1103748139881
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . iterator ( ) ;
rank: 41
score: 99.02231732536765
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( ;
rank: 41
score: 98.95114135742188
patch: j = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 41
score: 98.9376953125
patch: ++ iter ; ++ iter ; while iter ;
rank: 41
score: 98.8186747233073
patch: if ( ! current . is CaMeL Empty ( ) )
rank: 41
score: 98.80307006835938
patch: i ++ ; } ++ iter ;
rank: 42
score: 99.1068115234375
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . clone ( ) ;
rank: 42
score: 99.0156478881836
patch: ++ max CaMeL Eval += iter ;
rank: 42
score: 98.94679019325658
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 42
score: 98.93759591238839
patch: ++ value ; ++ iter ;
rank: 42
score: 98.87715454101563
patch: ++ iter ; ++ n ; ++ iter ;
rank: 42
score: 98.81713256835937
patch: ++ iter ; ;
rank: 42
score: 98.80239868164062
patch: else { ++ [ 1 ] ;
rank: 43
score: 99.1837158203125
patch: delta = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 43
score: 99.013134765625
patch: ++ max CaMeL Eval = iter / iter ;
rank: 43
score: 98.94677734375
patch: o = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 43
score: 98.93356323242188
patch: ++ iter ; ++ iter ; ++
rank: 43
score: 98.87242126464844
patch: ++ iter ; iter if ++ ;
rank: 43
score: 98.8162841796875
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ;
rank: 43
score: 98.80193413628473
patch: ++ iter ; } if ++ iter ;
rank: 44
score: 99.1306384858631
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( ) ;
rank: 44
score: 99.10498046875
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point ) ;
rank: 44
score: 99.07789963942308
patch: current = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 44
score: 99.00602722167969
patch: ++ iter - max CaMeL Eval ;
rank: 44
score: 98.94657389322917
patch: f = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 44
score: 98.93115234375
patch: ++ iter ; try { ++ iter ;
rank: 44
score: 98.86953396267361
patch: ++ iter ; ++ iter ; / ;
rank: 44
score: 98.81605747767857
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ;
rank: 44
score: 98.79659423828124
patch: else ++ iter ;
rank: 45
score: 99.12996128627232
patch: ++ max CaMeL Eval -= search CaMeL Direction . clone ( ) ;
rank: 45
score: 99.1034423828125
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 45
score: 99.07290649414062
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 45
score: 99.00550255408653
patch: ++ max CaMeL Eval ++ ; } ++ max CaMeL Eval ;
rank: 45
score: 98.94095187717014
patch: [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 45
score: 98.92979431152344
patch: ++ iter ; ++ - 0 ;
rank: 45
score: 98.86862521701389
patch: / ; ++ iter ; ++ iter ;
rank: 45
score: 98.81357421875
patch: if ( ! iter . is CaMeL Empty ( ) ) ++ iter ;
rank: 45
score: 98.78934151785714
patch: else { if ++ iter ;
rank: 46
score: 99.1287841796875
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 46
score: 99.10334329044117
patch: double [ ] steepest CaMeL Descent = preconditioner . 0 ;
rank: 46
score: 99.00203763521634
patch: ++ max CaMeL Eval ++ ; ; ++ max CaMeL Eval ;
rank: 46
score: 98.94009399414062
patch: t = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 46
score: 98.92887369791667
patch: ++ iter ; ++ iter ; * /
rank: 46
score: 98.86703491210938
patch: ++ iter ; ++ iter ; ++ 1 ;
rank: 46
score: 98.8111343383789
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ iter ;
rank: 47
score: 99.102490234375
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . iterator ( ) ;
rank: 47
score: 99.06658063616071
patch: current = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 47
score: 99.00171616498162
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( ;
rank: 47
score: 98.93454996744792
patch: prev = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 47
score: 98.92665100097656
patch: ++ iter ; for ++ iter ;
rank: 47
score: 98.86373901367188
patch: ++ iter ; ++ iter ; if iter ;
rank: 47
score: 98.809326171875
patch: ++ iter ; if ( current != null ) {
rank: 47
score: 98.7880126953125
patch: else { iter = iter . length ; }
rank: 48
score: 99.17885454963235
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition (
rank: 48
score: 99.12419577205883
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 48
score: 99.1004638671875
patch: final int [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 48
score: 99.06594613882211
patch: if ( compute CaMeL Objective CaMeL Gradient ( point ) ) {
rank: 48
score: 98.999267578125
patch: ++ max CaMeL Eval % max CaMeL Eval ++ ;
rank: 48
score: 98.93311564127605
patch: curr = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 48
score: 98.92533874511719
patch: ++ iter ; ++ * * ;
rank: 48
score: 98.78411254882812
patch: if ( iter == 0 ; return iter ;
rank: 49
score: 99.17872032752403
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 49
score: 99.11564497514205
patch: final Point CaMeL Value CaMeL Pair current = current ;
rank: 49
score: 99.06562042236328
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 49
score: 98.99824523925781
patch: ++ max CaMeL Eval > 0 ;
rank: 49
score: 98.93218994140625
patch: items = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 49
score: 98.92399379185268
patch: ++ start ; ++ iter ;
rank: 49
score: 98.85594940185547
patch: ++ iter ; ++ iter ; iter
rank: 49
score: 98.78201293945312
patch: while ( ! iter . is CaMeL Empty ( ) )
rank: 50
score: 99.17500813802083
patch: double [ ] steepest CaMeL Descent = true ;
rank: 50
score: 99.09806315104167
patch: double [ ] steepest CaMeL Descent = null ;
rank: 50
score: 98.99708387586806
patch: ++ max CaMeL Eval ; iter ++ ;
rank: 50
score: 98.93197631835938
patch: end = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 50
score: 98.92350938585069
patch: / * ++ iter ; ++ iter ;
rank: 50
score: 98.84900665283203
patch: ++ ++ 1 ; ++ iter ;
rank: 50
score: 98.80546875
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 50
score: 98.77927943638393
patch: else { iter -- ; }
rank: 51
score: 99.1723273782169
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 51
score: 99.10757266773896
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 51
score: 99.09647369384766
patch: final int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 51
score: 99.06271798270089
patch: if ( max CaMeL Eval < search CaMeL Direction . length ) {
rank: 51
score: 98.99550374348958
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; ;
rank: 51
score: 98.93168131510417
patch: obj = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 51
score: 98.918017578125
patch: ++ iter ; ++ 1 ; ++ iter ;
rank: 51
score: 98.84681532118056
patch: ++ iter ; ++ ; ++ iter ;
rank: 51
score: 98.80473327636719
patch: ++ n ;
rank: 51
score: 98.77789306640625
patch: else { / * * / /
rank: 52
score: 99.10547688802083
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current . current ;
rank: 52
score: 99.09447370256696
patch: Iterator iter = steepest CaMeL Descent . iterator ( ) ;
rank: 52
score: 99.05901740579044
patch: if ( compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ) {
rank: 52
score: 98.9941739169034
patch: r [ iter ] = ++ max CaMeL Eval ;
rank: 52
score: 98.9295145670573
patch: state = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 52
score: 98.91561126708984
patch: ++ - iter ; ++ iter ;
rank: 52
score: 98.84487575954861
patch: ++ iter ; ; ++ iter ; ;
rank: 52
score: 98.77592329545455
patch: if ( ! iter . is CaMeL Empty ( ;
rank: 53
score: 99.09215087890625
patch: final double [ ] steepest CaMeL Descent = preconditioner . iterator ( ) ;
rank: 53
score: 99.05815686677632
patch: Point CaMeL Value CaMeL Pair current = current . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 53
score: 98.9927978515625
patch: ++ iter ; r [ max CaMeL Eval ] = ;
rank: 53
score: 98.92948404947917
patch: tree = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 53
score: 98.84361775716145
patch: ++ iter ; iter ;
rank: 53
score: 98.79717548076923
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ;
rank: 53
score: 98.77327728271484
patch: / * * * ++ * ;
rank: 54
score: 99.17044067382812
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point ) ;
rank: 54
score: 99.09122721354167
patch: final double [ ] steepest CaMeL Descent = preconditioner
rank: 54
score: 99.05376838235294
patch: double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 54
score: 98.9922607421875
patch: ++ max CaMeL Eval * iter * iter ;
rank: 54
score: 98.92725219726563
patch: if ( iter < point . length ) {
rank: 54
score: 98.90252685546875
patch: ++ * * ++ iter ;
rank: 54
score: 98.84276733398437
patch: iter ++ ; ++ iter ; ++ iter ;
rank: 54
score: 98.79712677001953
patch: ++ iter ; Thread . current CaMeL Thread ( ) . stop ( ) ;
rank: 54
score: 98.77226257324219
patch: else { / * * * /
rank: 55
score: 99.1697489420573
patch: point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 55
score: 99.09970703125
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( ) ;
rank: 55
score: 98.9916015625
patch: ++ max CaMeL Eval >= max CaMeL Eval ;
rank: 55
score: 98.92698451450893
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 55
score: 98.79642740885417
patch: ++ iter ; System . out . ; ++ iter ;
rank: 55
score: 98.77210235595703
patch: else { / * ++ * /
rank: 56
score: 99.16886393229167
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 56
score: 99.08969948508523
patch: final double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ;
rank: 56
score: 99.05326573988971
patch: int max CaMeL Eval = this . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 56
score: 98.98790147569444
patch: ++ max CaMeL Eval ; ++ iter ;
rank: 56
score: 98.92577107747395
patch: children = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 56
score: 98.89879760742187
patch: ++ iter ; ++ * * ++ iter ;
rank: 56
score: 98.842529296875
patch: ++ iter ; iter = iter ;
rank: 56
score: 98.79502240349265
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; ++ iter ;
rank: 56
score: 98.77039591471355
patch: if ( ! iter . is CaMeL Empty ++ 0 ;
rank: 57
score: 99.09780738467262
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( ) ;
rank: 57
score: 99.08891465928819
patch: final double [ ] steepest CaMeL Descent = preconditioner . length ;
rank: 57
score: 99.04984537760417
patch: final double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 57
score: 98.98577880859375
patch: ++ max CaMeL Eval - iter ;
rank: 57
score: 98.92549351283482
patch: list = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 57
score: 98.84159088134766
patch: ++ iter ; ++ ++ 1 ;
rank: 57
score: 98.79388982599431
patch: ++ iter ; while ( iter != null ) {
rank: 57
score: 98.76891326904297
patch: if ( iter == 0 ; }
rank: 58
score: 99.163818359375
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 58
score: 99.04767922794117
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 58
score: 98.97946166992188
patch: ++ max CaMeL Eval = iter - iter ;
rank: 58
score: 98.92527262369792
patch: s = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 58
score: 98.8940673828125
patch: ++ iter ; ++ iter ; for iter ;
rank: 58
score: 98.84041922433036
patch: ++ iter ; ++ r ;
rank: 58
score: 98.7932637532552
patch: Math . max ( max CaMeL Eval , iter ) ;
rank: 58
score: 98.76863403320313
patch: if ( iter == 0 ; return null ;
rank: 59
score: 99.16328430175781
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 59
score: 99.0949198404948
patch: ++ steepest CaMeL Descent . clone ( ) ;
rank: 59
score: 99.08486793154762
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 59
score: 99.0464099702381
patch: final double steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 59
score: 98.97855417351974
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r ) ;
rank: 59
score: 98.89093780517578
patch: if ++ iter ; ++ iter ;
rank: 59
score: 98.792724609375
patch: while ( ! current . is CaMeL Empty ; ) {
rank: 59
score: 98.76837158203125
patch: else { / * * / }
rank: 60
score: 99.09225899832589
patch: double CaMeL Value = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 60
score: 99.08358909970238
patch: int [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ;
rank: 60
score: 99.04598999023438
patch: final double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 60
score: 98.97587076822917
patch: ++ max CaMeL Eval = iter + current . iter ;
rank: 60
score: 98.924072265625
patch: int iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 60
score: 98.88838195800781
patch: ++ iter ; ++ 1 ; ;
rank: 60
score: 98.83760209517045
patch: ++ iter ; ++ iter ; ++ iter ; }
rank: 60
score: 98.78905232747395
patch: while ( ! current . is CaMeL Empty ( ) ;
rank: 60
score: 98.76829310825893
patch: ++ [ ] iter ; }
rank: 61
score: 99.0446044921875
patch: if ( iter < r . length ) {
rank: 61
score: 98.97518581814236
patch: ++ iter - max CaMeL Eval ++ ;
rank: 61
score: 98.9231669108073
patch: sm= compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 61
score: 98.88516574435764
patch: ++ iter ; else * ++ iter ;
rank: 61
score: 98.78774588448661
patch: if ( ! iter . is CaMeL Empty ( ; ) ) {
rank: 61
score: 98.76608276367188
patch: ++ [ ] iter = iter ;
rank: 62
score: 99.16151123046875
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( false ) ;
rank: 62
score: 99.08876546223958
patch: return steepest CaMeL Descent . clone ( ) ;
rank: 62
score: 99.08254107306985
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 62
score: 99.04422433035714
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 62
score: 98.9730712890625
patch: ++ iter - max CaMeL Eval = iter ;
rank: 62
score: 98.92191569010417
patch: previous = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 62
score: 98.8265047940341
patch: ++ iter ; ++ iter ; else ++ iter ;
rank: 62
score: 98.76551164899554
patch: else { ++ $NUMBER$ ; }
rank: 63
score: 99.08732524671052
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( steepest CaMeL Descent ) ;
rank: 63
score: 98.971435546875
patch: ++ max CaMeL Eval -= iter ;
rank: 63
score: 98.87668282645089
patch: ++ * / ++ iter ;
rank: 63
score: 98.82603236607143
patch: ++ iter ; iter ++ ;
rank: 63
score: 98.78509521484375
patch: while ( current != null ) {
rank: 63
score: 98.76473236083984
patch: / * * * ++ ; /
rank: 64
score: 99.15553566261575
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ;
rank: 64
score: 99.08729954769737
patch: Point CaMeL Value CaMeL Pair current = current ; Point CaMeL Value CaMeL Pair current = current ;
rank: 64
score: 99.04196166992188
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 64
score: 98.97054850260416
patch: ++ max CaMeL Eval - max CaMeL Eval ; ++ max CaMeL Eval ;
rank: 64
score: 98.91982014973958
patch: entry = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 64
score: 98.87490505642361
patch: ++ iter ; ++ iter + iter ;
rank: 64
score: 98.78475341796874
patch: ++ iter ; if ( ! current . ;
rank: 64
score: 98.76129828559027
patch: if ( iter == 0 ; * /
rank: 65
score: 99.15507427014802
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 65
score: 99.04092567845395
patch: final double search CaMeL Direction [ ] = steepest CaMeL Descent . clone ( ) ;
rank: 65
score: 98.96903852982955
patch: r [ max CaMeL Eval ++ ] = iter ;
rank: 65
score: 98.91586303710938
patch: true = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 65
score: 98.82062322443181
patch: ++ iter ; ++ iter ; if ++ iter ;
rank: 65
score: 98.78458077566964
patch: ++ iter ; Thread . current CaMeL Thread ( ) . ++ ;
rank: 65
score: 98.75697326660156
patch: / * * * / * /
rank: 66
score: 99.08555536684783
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( ) ;
rank: 66
score: 99.07936197916666
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 66
score: 99.04034423828125
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 66
score: 98.96806335449219
patch: r [ max CaMeL Eval ] = new Point CaMeL Value CaMeL Pair ( ;
rank: 66
score: 98.9156494140625
patch: z = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 66
score: 98.82007446289063
patch: ++ 0 ; ++ iter ; ++ iter ;
rank: 66
score: 98.783203125
patch: ++ iter - iter ;
rank: 66
score: 98.75506591796875
patch: / * * * / / /
rank: 67
score: 99.1539306640625
patch: current = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 67
score: 99.03973858173077
patch: double delta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 67
score: 98.968017578125
patch: ++ max CaMeL Eval ++ ; System . out . ;
rank: 67
score: 98.91534423828125
patch: i = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 67
score: 98.8681640625
patch: ++ iter ; if ++ 1 ;
rank: 67
score: 98.77678973858173
patch: if ( ! iter . compare CaMeL To ( current ) ;
rank: 67
score: 98.75482940673828
patch: } else { if ++ iter ;
rank: 68
score: 99.15281372070312
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( true ) ;
rank: 68
score: 99.07710193452381
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 68
score: 98.96554744944854
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , iter ) ;
rank: 68
score: 98.91273498535156
patch: list = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 68
score: 98.86793736049107
patch: / * ; ++ iter ;
rank: 68
score: 98.75337219238281
patch: } else { ++ iter ; }
rank: 69
score: 99.14683837890625
patch: List steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 69
score: 99.07541822350544
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL String ( ) ;
rank: 69
score: 99.03737386067708
patch: iter = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 69
score: 98.9648681640625
patch: ++ max CaMeL Eval + max CaMeL Eval ;
rank: 69
score: 98.91189575195312
patch: b = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 69
score: 98.81653703962054
patch: ++ iter ; ++ this ;
rank: 69
score: 98.76895577566964
patch: if ( ! iter . compare CaMeL To ( current ) ) {
rank: 69
score: 98.7516098022461
patch: if ( ! iter . is CaMeL Empty ++ this . iter . length ;
rank: 70
score: 99.14620361328124
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 70
score: 99.0834601907169
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 70
score: 99.07245279947917
patch: final int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 70
score: 99.03609212239583
patch: if ( checker instanceof Line CaMeL Search CaMeL Function ) {
rank: 70
score: 98.96377328725961
patch: r [ max CaMeL Eval ] = ++ max CaMeL Eval ;
rank: 70
score: 98.91110229492188
patch: value = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 70
score: 98.86680094401042
patch: else * ++ iter ; ++ iter ;
rank: 70
score: 98.81448364257812
patch: ++ iter ; ++ iter ; /
rank: 70
score: 98.75087483723958
patch: if ( ! iter . is CaMeL Empty ++ && iter . is CaMeL Empty ( ;
rank: 71
score: 99.14298741957721
patch: Point CaMeL Value CaMeL Pair point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 71
score: 99.03547498914931
patch: final Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 71
score: 98.96294611150569
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . get CaMeL Point ( ;
rank: 71
score: 98.91054861886161
patch: [ ] iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 71
score: 98.81349012586806
patch: ++ iter ; ; if ++ iter ;
rank: 71
score: 98.76808471679688
patch: Iterator iter = list . iterator ( ) ;
rank: 71
score: 98.75041368272569
patch: if ( ! iter . is CaMeL Empty ++ || iter . is CaMeL Empty ( ;
rank: 72
score: 99.08139519942434
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( steepest CaMeL Descent ) ;
rank: 72
score: 99.07140395220588
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( ) ;
rank: 72
score: 98.96039895450367
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( ) ;
rank: 72
score: 98.90933227539062
patch: context = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 72
score: 98.8641845703125
patch: ++ iter ; ++ * / ++ iter ;
rank: 72
score: 98.8126220703125
patch: ++ iter ; ++ iter ; ++ iter ; ;
rank: 72
score: 98.76664428710937
patch: ++ iter ; hash CaMeL Code = iter ;
rank: 72
score: 98.7496846516927
patch: if ( ! iter . is CaMeL Empty ++ ) ;
rank: 73
score: 99.14277954101563
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( null ) ;
rank: 73
score: 99.07129584418402
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . length ;
rank: 73
score: 98.96018473307292
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval -- ;
rank: 73
score: 98.90800476074219
patch: [ ] max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 73
score: 98.86394500732422
patch: j * ++ ; ++ iter ;
rank: 73
score: 98.81188201904297
patch: ++ iter ; ++ -- iter ;
rank: 73
score: 98.76381613991477
patch: ++ iter ; System . exit ( 1 ) ;
rank: 73
score: 98.74940321180556
patch: else ++ iter ; if ++ iter ;
rank: 74
score: 99.06988525390625
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent ;
rank: 74
score: 99.03346470424107
patch: if ( checker . converged . converged . iter ( ) ) {
rank: 74
score: 98.95887451171875
patch: ++ max CaMeL Eval = iter / $NUMBER$ ;
rank: 74
score: 98.9071044921875
patch: stmt = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 74
score: 98.8110580444336
patch: ++ iter ; iter / * /
rank: 74
score: 98.76259478400735
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) . length ;
rank: 74
score: 98.74713134765625
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . length )
rank: 75
score: 99.1405362215909
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 0 ) ;
rank: 75
score: 99.06972434303977
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 75
score: 98.95845301011029
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , iter ) ;
rank: 75
score: 98.90704345703125
patch: retval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 75
score: 98.80939398871527
patch: ++ iter ; ++ iter ; } iter
rank: 75
score: 98.76214130108173
patch: int iter = current . index CaMeL Of ( $STRING$ ) ;
rank: 75
score: 98.7470703125
patch: ++ [ ] iter ;
rank: 76
score: 99.14017159598214
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 76
score: 99.07863159179688
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . point ) ;
rank: 76
score: 99.06883239746094
patch: final double [ ] steepest CaMeL Descent = preconditioner ;
rank: 76
score: 99.02987670898438
patch: if ( checker . converged . converged . converged . iter ( ) ) {
rank: 76
score: 98.95705003004808
patch: r [ max CaMeL Eval ] = Math . max ( ;
rank: 76
score: 98.86187065972223
patch: ++ iter ; ++ * * ; /
rank: 76
score: 98.80896868024554
patch: ++ iter ; ++ Math ;
rank: 76
score: 98.75792236328125
patch: Math . max ( iter , iter ) ;
rank: 76
score: 98.7469991048177
patch: else ++ iter ; }
rank: 77
score: 99.1400390625
patch: ++ max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point ) ;
rank: 77
score: 99.07793511284723
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . precondition ( ) ;
rank: 77
score: 99.06691607306985
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent ;
rank: 77
score: 99.02860514322917
patch: if ( ! steepest CaMeL Descent . clone ( ) ) {
rank: 77
score: 98.95686340332031
patch: ++ max CaMeL Eval ++ ; }
rank: 77
score: 98.90333048502605
patch: start = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 77
score: 98.8612060546875
patch: ++ iter ; int iter ++ ;
rank: 77
score: 98.8082275390625
patch: ++ iter ; ++ false ;
rank: 77
score: 98.7560526529948
patch: current = Math . max ( iter , current ) ;
rank: 77
score: 98.7469482421875
patch: } if ++ iter ;
rank: 78
score: 99.07504111842105
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . ) ;
rank: 78
score: 99.06661551339286
patch: int [ ] steepest CaMeL Descent . clone ( ) ;
rank: 78
score: 99.02745056152344
patch: if ( steepest CaMeL Descent . length < max CaMeL Eval ) {
rank: 78
score: 98.95531209309895
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ; ;
rank: 78
score: 98.9030253092448
patch: right = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 78
score: 98.86065673828125
patch: ++ ++ iter ; ++ 1 ;
rank: 78
score: 98.807177734375
patch: ++ iter ; ++ iter ; = iter ;
rank: 78
score: 98.75552804129464
patch: ++ iter ; current = current . get CaMeL Parent ( ) ;
rank: 78
score: 98.74467468261719
patch: ++ n ; if ++ iter ;
rank: 79
score: 99.07502092633929
patch: ++ max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( ) ;
rank: 79
score: 99.06614774816177
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ;
rank: 79
score: 99.02690972222223
patch: if ( Point CaMeL Value CaMeL Pair . converged . converged . iter ( ) ) {
rank: 79
score: 98.95419311523438
patch: ++ max CaMeL Eval * iter ; * /
rank: 79
score: 98.9009780883789
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 79
score: 98.86042616102431
patch: this . ++ iter ; ++ iter ;
rank: 79
score: 98.8038662997159
patch: ++ iter ; ++ iter ; ++ ++ iter ;
rank: 79
score: 98.74420844184027
patch: Iterator iter = iter . iterator ++ ;
rank: 80
score: 99.13363882211539
patch: int max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 80
score: 99.06581333705357
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point ) ;
rank: 80
score: 99.02683715820312
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction ) ;
rank: 80
score: 98.95399475097656
patch: ++ max CaMeL Eval = iter + current . hash CaMeL Code ( ) ;
rank: 80
score: 98.89923095703125
patch: clone = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 80
score: 98.85665130615234
patch: ++ iter ; ++ 1 iter ;
rank: 80
score: 98.80300903320312
patch: ++ iter ; ++ iter ; / / /
rank: 80
score: 98.74995422363281
patch: current = Math . max ( max CaMeL Eval , current . ++ ) ;
rank: 80
score: 98.7440673828125
patch: else { iter * 0 . 0 ; }
rank: 81
score: 99.13324846540179
patch: current = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 81
score: 99.0657958984375
patch: int [ ] steepest CaMeL Descent = preconditioner . iterator ( ) ;
rank: 81
score: 98.95305926983173
patch: ++ max CaMeL Eval >= 0 ; ++ max CaMeL Eval ;
rank: 81
score: 98.89680989583333
patch: [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 81
score: 98.85641043526786
patch: / * ++ ++ iter ;
rank: 81
score: 98.8009521484375
patch: ++ 1 ; ++ iter ; ++ iter ;
rank: 81
score: 98.74807559742646
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( ) ; }
rank: 81
score: 98.74160330636161
patch: else { ++ start ; }
rank: 82
score: 98.95132010323661
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) ;
rank: 82
score: 98.89671834309895
patch: x = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 82
score: 98.80025634765624
patch: ++ iter ; ++ max ; ++ iter ;
rank: 82
score: 98.74788120814732
patch: current = Math . max ( iter , current . ++ ) ;
rank: 83
score: 99.133173828125
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent . clone ( ) ;
rank: 83
score: 99.07254161005434
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 83
score: 99.0653076171875
patch: int [ ] steepest CaMeL Descent = preconditioner . 0 ;
rank: 83
score: 99.02494303385417
patch: double search CaMeL Direction = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 83
score: 98.95110529119319
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Point CaMeL Value CaMeL Pair . ;
rank: 83
score: 98.8957050030048
patch: [ ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 83
score: 98.85302734375
patch: ++ iter ; int iter = iter ;
rank: 83
score: 98.74723815917969
patch: while ( ! current . is CaMeL Empty ( ) ) { ++ iter ;
rank: 84
score: 99.13037981305804
patch: max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point ) ;
rank: 84
score: 99.07026110197368
patch: List [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 84
score: 99.02493990384616
patch: if ( find CaMeL Upper CaMeL Bound ( point ) ) {
rank: 84
score: 98.95075017755681
patch: ++ iter ; current = ++ max CaMeL Eval ;
rank: 84
score: 98.89474487304688
patch: ref = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 84
score: 98.85212537977431
patch: ++ iter ; try ; int iter ;
rank: 84
score: 98.79750366210938
patch: ++ iter ; ++ 0 ; ++ iter ;
rank: 84
score: 98.7471923828125
patch: ++ iter + 1 ;
rank: 84
score: 98.73987494574652
patch: i ++ ; } if ++ iter ;
rank: 85
score: 99.12942325367646
patch: double [ ] search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 85
score: 99.07017008463542
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( )
rank: 85
score: 99.06342230902777
patch: final double [ ] steepest CaMeL Descent = preconditioner . 0 ;
rank: 85
score: 99.02455139160156
patch: ++ max CaMeL Eval ; steepest CaMeL Descent . clone ( ) ;
rank: 85
score: 98.9495340983073
patch: r [ max CaMeL Eval ] = max CaMeL Eval ;
rank: 85
score: 98.85150146484375
patch: ++ * ++ iter ; while iter ;
rank: 85
score: 98.7882080078125
patch: ++ iter ; ; ++ iter ; else
rank: 85
score: 98.74681803385417
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; }
rank: 85
score: 98.73907470703125
patch: * * * / ++ iter ;
rank: 86
score: 99.12890625
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , r ) ;
rank: 86
score: 99.06966400146484
patch: Point CaMeL Value CaMeL Pair current = current . do CaMeL Optimize ( ) ;
rank: 86
score: 99.06322524126838
patch: double [ ] steepest CaMeL Descent = preconditioner . $STRING$ ;
rank: 86
score: 99.0228740985577
patch: double checker = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 86
score: 98.94930419921874
patch: ++ iter ] = ++ max CaMeL Eval ;
rank: 86
score: 98.85025460379464
patch: i ++ ; ++ iter ;
rank: 86
score: 98.78800825639205
patch: ++ iter ; ++ iter ; while ++ iter ;
rank: 86
score: 98.74601236979167
patch: ++ iter ; Thread . current CaMeL Thread ( ) . interrupt ( ;
rank: 86
score: 98.73508707682292
patch: if ( ! iter . is CaMeL Empty ++ $NUMBER$ ;
rank: 87
score: 99.12828480113636
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point , r ) ;
rank: 87
score: 99.06949869791667
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; ;
rank: 87
score: 99.06308381453805
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = steepest CaMeL Descent . iterator ( ) ;
rank: 87
score: 99.02281087239584
patch: return compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 87
score: 98.9492919921875
patch: ++ iter ; if ( max CaMeL Eval ;
rank: 87
score: 98.8905029296875
patch: container = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 87
score: 98.84990098741319
patch: ++ iter ; ++ - * iter ;
rank: 87
score: 98.78685651506696
patch: ++ iter ; ++ $STRING$ ;
rank: 87
score: 98.74595947265625
patch: ++ iter ; if ( current != null )
rank: 87
score: 98.73400115966797
patch: / * * * ++ / /
rank: 88
score: 99.12789756373355
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 88
score: 99.06888620476974
patch: long [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 88
score: 98.94831848144531
patch: ++ max CaMeL Eval % iter ;
rank: 88
score: 98.88868059430804
patch: if ( iter < steepest CaMeL Descent . length ) {
rank: 88
score: 98.84962681361607
patch: ++ * ++ ++ iter ;
rank: 88
score: 98.779345703125
patch: ++ iter ; ++ iter ; else / /
rank: 88
score: 98.74531106387867
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ;
rank: 88
score: 98.73221164279514
patch: else { if ++ 0 . ; }
rank: 89
score: 99.12725275213069
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 89
score: 99.06198601973684
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL
rank: 89
score: 99.02057495117188
patch: while ( iter < r . length ) {
rank: 89
score: 98.94595772879464
patch: ++ iter ; if ( ;
rank: 89
score: 98.88862440321181
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 89
score: 98.84945339626736
patch: ++ * ++ iter ; if iter ;
rank: 89
score: 98.77398681640625
patch: iter ; ++ ; ++ iter ;
rank: 89
score: 98.74356079101562
patch: ++ iter ; ++ n ; ++ n ;
rank: 89
score: 98.73184204101562
patch: ++ [ ] iter ; if ++ iter ;
rank: 90
score: 99.1271484375
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 ) ;
rank: 90
score: 99.02005004882812
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 90
score: 98.94294738769531
patch: ++ max CaMeL Eval *= iter ;
rank: 90
score: 98.8883768717448
patch: mod = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 90
score: 98.84918212890625
patch: ++ iter ; ++ - * /
rank: 90
score: 98.7735595703125
patch: ++ -- iter ; ++ iter ;
rank: 90
score: 98.74325561523438
patch: Math . min ( iter , current ) ;
rank: 90
score: 98.73180042613636
patch: if ( ! iter . contains ( iter ) ;
rank: 91
score: 99.12438201904297
patch: delta += find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 91
score: 99.0189208984375
patch: double [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 91
score: 98.94268798828125
patch: ++ max CaMeL Eval ; ;
rank: 91
score: 98.8870516690341
patch: result = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 91
score: 98.84825981987848
patch: ++ iter ; / * * / /
rank: 91
score: 98.77297973632812
patch: / ; ++ iter ;
rank: 91
score: 98.74261881510417
patch: ++ iter ; if ( ! current . is CaMeL Empty ( ) ;
rank: 91
score: 98.72904205322266
patch: ++ iter ; if ++ 0 ;
rank: 92
score: 99.12348090277777
patch: List steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 92
score: 99.0667724609375
patch: ++ max CaMeL Eval = steepest CaMeL Descent . precondition ( ) ;
rank: 92
score: 99.0607666015625
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 92
score: 99.01865931919643
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) Point CaMeL Value CaMeL Pair ;
rank: 92
score: 98.94164428710937
patch: ++ max CaMeL Eval ; ; iter ++ ;
rank: 92
score: 98.88565767728366
patch: list = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 92
score: 98.84611511230469
patch: ++ iter ; synchronized ++ iter ;
rank: 92
score: 98.77283393012152
patch: ++ ; ++ iter ; ++ iter ;
rank: 92
score: 98.73992919921875
patch: if ( max CaMeL Eval > 0 ) {
rank: 92
score: 98.72815704345703
patch: ++ 1 ; if ++ iter ;
rank: 93
score: 98.94145063920455
patch: ++ iter ; if ( max CaMeL Eval > ;
rank: 93
score: 98.84349907769098
patch: ++ iter ; ++ * / iter ;
rank: 93
score: 98.76918334960938
patch: ++ iter ; iter / / = iter ;
rank: 93
score: 98.73975719105114
patch: ++ iter ; System . exit ( $NUMBER$ ) ;
rank: 93
score: 98.7275619506836
patch: ++ r [ 0 ] ; }
rank: 94
score: 99.12105305989583
patch: double [ ] steepest CaMeL Descent = false ;
rank: 94
score: 99.01698996803977
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 94
score: 98.94049072265625
patch: ++ max CaMeL Eval + iter + 1 ;
rank: 94
score: 98.88120930989584
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent .
rank: 94
score: 98.76667924360795
patch: ++ ++ iter ; ++ iter ; ++ iter ;
rank: 94
score: 98.73958129882813
patch: ++ iter ; if ( iter == null )
rank: 95
score: 99.11991743607955
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , n ) ;
rank: 95
score: 99.06495425575658
patch: final int [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 95
score: 99.01625061035156
patch: return new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 95
score: 98.939501953125
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 95
score: 98.88076782226562
patch: query = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 95
score: 98.84013366699219
patch: ++ iter ; ++ - value ;
rank: 95
score: 98.73909505208333
patch: int iter = current . last CaMeL Index CaMeL Of ( this ) ;
rank: 95
score: 98.72396850585938
patch: / * * ++ * * /
rank: 96
score: 99.11918501420455
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , iter ) ;
rank: 96
score: 99.06471604567308
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = null ;
rank: 96
score: 99.05707550048828
patch: final double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 96
score: 99.01531982421875
patch: if ( Point CaMeL Value CaMeL Pair . converged . converged . converged . iter ( ) ) {
rank: 96
score: 98.93820425180289
patch: ++ max CaMeL Eval - iter ; ++ max CaMeL Eval ;
rank: 96
score: 98.87881469726562
patch: root = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 96
score: 98.8384780883789
patch: ++ iter ; else * * /
rank: 96
score: 98.7646484375
patch: ++ ++ iter ;
rank: 96
score: 98.73651482077206
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ iter ; }
rank: 96
score: 98.72147369384766
patch: / * * * * ++ ;
rank: 97
score: 99.11891276041666
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = null ;
rank: 97
score: 99.06320057744566
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( ) ;
rank: 97
score: 99.0570401278409
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point ) ;
rank: 97
score: 99.01383150540866
patch: int iter = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 97
score: 98.93699815538194
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( ) ;
rank: 97
score: 98.8773193359375
patch: loop = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 97
score: 98.83701869419643
patch: ++ iter ; ++ $NUMBER$ ;
rank: 97
score: 98.76454162597656
patch: ++ iter ; iter / ; /
rank: 97
score: 98.7340087890625
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ )
rank: 97
score: 98.72145080566406
patch: ++ iter ; } return iter ;
rank: 98
score: 99.11856842041016
patch: steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 98
score: 99.05563354492188
patch: double [ ] steepest CaMeL Descent = 0 ;
rank: 98
score: 99.01185099283855
patch: if ( iter < search CaMeL Direction . length ) {
rank: 98
score: 98.93636067708333
patch: ++ max CaMeL Eval = ++ iter ;
rank: 98
score: 98.87562052408855
patch: first = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 98
score: 98.76401095920139
patch: ++ iter ; ++ Math + iter ;
rank: 98
score: 98.72051130022321
patch: if ( ! iter . is CaMeL Empty ; ++ 0 . ;
rank: 99
score: 99.11848667689732
patch: delta = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 99
score: 99.06058995863971
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point ,
rank: 99
score: 99.0112813313802
patch: if ( true ) {
rank: 99
score: 98.93628692626953
patch: ++ max CaMeL Eval + iter ;
rank: 99
score: 98.87556966145833
patch: max = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 99
score: 98.83318413628473
patch: ++ iter ; ++ 1 + iter ;
rank: 99
score: 98.76140802556819
patch: ++ iter ; ++ iter ; if iter ++ ;
rank: 99
score: 98.7327547940341
patch: ++ Math . max ( iter , current ) ;
rank: 99
score: 98.71880340576172
patch: else ++ [ 0 ] ; }
rank: 100
score: 98.93600463867188
patch: ++ max CaMeL Eval ++ ; System . arraycopy ( ;
rank: 100
score: 98.87438025841347
patch: item = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 100
score: 98.830810546875
patch: finally { ++ iter ; }
rank: 100
score: 98.75985378689236
patch: ++ iter ; ++ ++ iter ; ;
rank: 100
score: 98.73251342773438
patch: while ( iter >= n ) {
rank: 100
score: 98.71865844726562
patch: else { / * / * /
rank: 101
score: 99.059130859375
patch: ++ max CaMeL Eval = preconditioner . clone ( ) ;
rank: 101
score: 98.93591986762152
patch: r [ max CaMeL Eval ++ ] ;
rank: 101
score: 98.87330118815105
patch: that = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 101
score: 98.828857421875
patch: / * ] * / ++ iter ;
rank: 101
score: 98.75759887695312
patch: ++ iter ; ++ iter ; throw iter ;
rank: 101
score: 98.73189290364583
patch: ++ iter ; ++ iter ; System . out . ;
rank: 101
score: 98.71826171875
patch: if ++ [ 0 ] ;
rank: 102
score: 99.11705671037946
patch: delta += find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 102
score: 99.05895385742187
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( ) ;
rank: 102
score: 99.0537109375
patch: double [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound ( ) ;
rank: 102
score: 99.01033238002232
patch: if ( steepest CaMeL Descent . length < 0 ) {
rank: 102
score: 98.93434495192308
patch: r [ max CaMeL Eval ] = Math . min ( ;
rank: 102
score: 98.87224872295673
patch: if ( iter < steepest CaMeL Descent . length )
rank: 102
score: 98.82475280761719
patch: ++ iter ; for iter ++ ;
rank: 102
score: 98.75679931640624
patch: ++ $NUMBER$ ; ++ iter ; ++ iter ;
rank: 102
score: 98.7302017211914
patch: ++ iter ; if ( ! current . is CaMeL Na CaMeL N ( ;
rank: 102
score: 98.717529296875
patch: else { * * * / }
rank: 103
score: 99.057763671875
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( ) ;
rank: 103
score: 99.05323204627403
patch: final double [ ] steepest CaMeL Descent = null ;
rank: 103
score: 99.01019287109375
patch: if ( max CaMeL Eval == 0 ) {
rank: 103
score: 98.9323962983631
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . get CaMeL Point ;
rank: 103
score: 98.87180582682292
patch: pref = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 103
score: 98.8228426846591
patch: ++ iter ; ++ iter ; ++ - iter ;
rank: 103
score: 98.7565585049716
patch: ++ iter ; } ++ iter ; ++ iter ;
rank: 103
score: 98.72939453125
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; ;
rank: 103
score: 98.71664428710938
patch: else ++ [ 1 ] ; }
rank: 104
score: 99.11543543198529
patch: List steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 104
score: 99.05606079101562
patch: final double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( ) ;
rank: 104
score: 99.05286225818452
patch: final double [ ] steepest CaMeL Descent = preconditioner . clone ( point ) ;
rank: 104
score: 99.00956895616319
patch: int max CaMeL Eval = preconditioner . precondition ( point , r ) ;
rank: 104
score: 98.93086242675781
patch: r [ iter ] = iter ;
rank: 104
score: 98.8710467998798
patch: [ ] steepest CaMeL Descent . clone ( ) ;
rank: 104
score: 98.82220458984375
patch: ++ iter ; ++ ++ - iter ;
rank: 104
score: 98.72897774832589
patch: ++ iter ; Thread . current CaMeL Thread ( ) . interrupt ;
rank: 104
score: 98.71637641059027
patch: / * * * ; ++ iter ;
rank: 105
score: 99.11541015625
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point ) ;
rank: 105
score: 99.05560623972039
patch: return ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . precondition ( ) ;
rank: 105
score: 99.05232747395833
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 ) ;
rank: 105
score: 99.00923978365384
patch: double iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 105
score: 98.930419921875
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval ++ ;
rank: 105
score: 98.8699442545573
patch: comp = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 105
score: 98.82112630208333
patch: ++ iter ; int iter + iter ;
rank: 105
score: 98.75638253348214
patch: ++ true ; ++ iter ;
rank: 105
score: 98.72889927455357
patch: current = Math . max ( max CaMeL Eval , iter ) ;
rank: 105
score: 98.71530587332589
patch: if ( ! iter . is CaMeL Empty ++ ) return null ;
rank: 106
score: 99.0543701171875
patch: ++ max CaMeL Eval ; Point CaMeL Value CaMeL Pair current = current ;
rank: 106
score: 98.92867431640624
patch: ++ max CaMeL Eval += iter + 1 ;
rank: 106
score: 98.8684441061581
patch: result = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 106
score: 98.81908416748047
patch: ++ iter ; iter ; * ;
rank: 106
score: 98.72872721354166
patch: if ( ! iter . is CaMeL Empty ( ) ) ++ n ;
rank: 106
score: 98.71440124511719
patch: if ++ [ 0 ] ; }
rank: 107
score: 99.11219371448864
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , point ) ;
rank: 107
score: 99.05337344898896
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point .
rank: 107
score: 99.05227793817934
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 107
score: 98.92824978298611
patch: ++ max ; ++ max CaMeL Eval ;
rank: 107
score: 98.8677645596591
patch: ! compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 107
score: 98.81727430555556
patch: ++ iter ; ++ * * / /
rank: 107
score: 98.75257568359375
patch: ++ n ; ++ iter ; ++ iter ;
rank: 107
score: 98.72803606305804
patch: while ( ! current . is CaMeL Empty ( ; ) ) {
rank: 107
score: 98.7138671875
patch: if ( ! iter . is CaMeL Empty ( ; }
rank: 108
score: 99.11219278971355
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition (
rank: 108
score: 99.05332728794643
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ,
rank: 108
score: 99.05143229166667
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( 0 ) ;
rank: 108
score: 99.00791237571023
patch: if ( Point CaMeL Value CaMeL Pair . converged . converged . converged . converged . iter ( ) ) {
rank: 108
score: 98.92792154947917
patch: iter = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 108
score: 98.86722819010417
patch: ch = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 108
score: 98.7518081665039
patch: ++ < iter ; ++ iter ;
rank: 108
score: 98.72675432477679
patch: ++ iter ; ++ iterator ;
rank: 108
score: 98.71307373046875
patch: if ( ! iter . is CaMeL Empty ++ ( ;
rank: 109
score: 99.05236098345588
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 109
score: 99.05114164806548
patch: double [ ] steepest CaMeL Descent = preconditioner . to CaMeL String ( ) ;
rank: 109
score: 98.9271484375
patch: ++ max CaMeL Eval >= max CaMeL Eval ; ++ max CaMeL Eval ;
rank: 109
score: 98.86659458705357
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 109
score: 98.75124289772727
patch: ++ iter ; ++ iter ; / ++ iter ;
rank: 109
score: 98.72670611213235
patch: ++ iter ; if ( ! current . is CaMeL Na CaMeL N ( ) ;
rank: 109
score: 98.71263122558594
patch: else { * * * * /
rank: 110
score: 99.10995919363839
patch: double [ ] steepest CaMeL Descent = point . length ;
rank: 110
score: 99.0522228422619
patch: for ( Point CaMeL Value CaMeL Pair current : steepest CaMeL Descent . clone ( ) ) {
rank: 110
score: 99.00686209542411
patch: final double checker = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 110
score: 98.92625517003677
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( ;
rank: 110
score: 98.81610107421875
patch: ++ iter ; * / ++ iter ;
rank: 110
score: 98.72325846354167
patch: ++ iter ; if ( ! current . is CaMeL Empty ( ) )
rank: 110
score: 98.71246337890625
patch: else { ++ [ 0 ] ; }
rank: 111
score: 99.10927220394737
patch: Evaluations [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 111
score: 99.0500129250919
patch: int [ ] steepest CaMeL Descent = preconditioner . length ;
rank: 111
score: 99.00515407986111
patch: double steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 111
score: 98.92560221354167
patch: ++ max CaMeL Eval + max CaMeL Eval ; ++ max CaMeL Eval ;
rank: 111
score: 98.86635178786058
patch: previous = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 111
score: 98.81609429253473
patch: ++ iter ; ++ iter ; try ;
rank: 111
score: 98.74735260009766
patch: ++ iter ; ; ++ 1 ;
rank: 111
score: 98.721923828125
patch: ++ iter ; while ( iter != null )
rank: 111
score: 98.71053641183036
patch: ++ iter ; break ; }
rank: 112
score: 99.04946067116477
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL String ( ) ;
rank: 112
score: 99.00503540039062
patch: if ( max CaMeL Eval < r . length ) {
rank: 112
score: 98.92559814453125
patch: ++ max CaMeL Eval ++ ; return new Point CaMeL Value CaMeL Pair ( ;
rank: 112
score: 98.8660888671875
patch: cmp = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 112
score: 98.74718475341797
patch: iter if ++ ; ++ iter ;
rank: 112
score: 98.72074381510417
patch: int iter = current . last CaMeL Index CaMeL Of ( ++ ) ;
rank: 113
score: 99.10760498046875
patch: delta = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 113
score: 99.051025390625
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . point ) ;
rank: 113
score: 99.00433028371711
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 113
score: 98.92510375976562
patch: ++ max CaMeL Eval ++ ; break ; }
rank: 113
score: 98.86455620659723
patch: if ( iter < point . length )
rank: 113
score: 98.80878448486328
patch: ++ * ++ iter ; iter ;
rank: 113
score: 98.74623413085938
patch: ++ iter ; ++ iter ; / / ;
rank: 113
score: 98.71968900240384
patch: ++ iter ; if ( ! current . is CaMeL Empty ;
rank: 113
score: 98.7090835571289
patch: else { ++ 0 ; } }
rank: 114
score: 99.05037649054276
patch: ++ max CaMeL Eval = ( double ) steepest CaMeL Descent . clone ( ) ;
rank: 114
score: 99.04816545758929
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point ) ;
rank: 114
score: 98.92466227213542
patch: ++ max CaMeL Eval - max CaMeL Eval - iter ;
rank: 114
score: 98.86421342329545
patch: throw new Math CaMeL Internal CaMeL Error ( ) ;
rank: 114
score: 98.80818314985795
patch: ++ iter ; ++ iter ; for ++ iter ;
rank: 114
score: 98.71788678850446
patch: return new Point CaMeL Value CaMeL Pair ( iter , current ) ;
rank: 114
score: 98.708740234375
patch: else { if ( iter > 0 ;
rank: 115
score: 99.10727719907408
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point , r ) ;
rank: 115
score: 99.04999334161931
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . search CaMeL Direction ) ;
rank: 115
score: 99.00301920572916
patch: double search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 115
score: 98.92359619140625
patch: ++ max CaMeL Eval ++ ; iter ++ ;
rank: 115
score: 98.8632100423177
patch: meta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 115
score: 98.80748155381944
patch: ++ iter ; iter ; if iter ;
rank: 115
score: 98.74415588378906
patch: ++ iter ; ; ++ start ;
rank: 115
score: 98.7168327780331
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ) ) break ;
rank: 115
score: 98.70853678385417
patch: if ( iter < 0 ; * /
rank: 116
score: 99.10608588324652
patch: current = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction . length ) ;
rank: 116
score: 99.04692150297619
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( true ) ;
rank: 116
score: 99.00165153952206
patch: double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 116
score: 98.92208523220486
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) get CaMeL Context ( ;
rank: 116
score: 98.86308288574219
patch: int iter = max CaMeL Eval ;
rank: 116
score: 98.80714925130208
patch: ++ iter ; else if ++ iter ;
rank: 116
score: 98.71639310396634
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ( ;
rank: 116
score: 98.707763671875
patch: ++ 0 ;
rank: 117
score: 99.10562936883224
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 117
score: 99.04791259765625
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( ) ;
rank: 117
score: 99.04677862870066
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 117
score: 99.00003051757812
patch: delta += search CaMeL Direction [ max CaMeL Eval ] ;
rank: 117
score: 98.92174682617187
patch: ++ max CaMeL Eval -= max CaMeL Eval ;
rank: 117
score: 98.86271158854167
patch: pending = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 117
score: 98.80335998535156
patch: ++ 1 ; ++ - iter ;
rank: 117
score: 98.74366760253906
patch: ++ iter ; ; if iter ;
rank: 117
score: 98.71589660644531
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) ;
rank: 117
score: 98.70754172585227
patch: while ( ! iter . is CaMeL Empty ++ )
rank: 118
score: 99.04681037454044
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , iter ) ;
rank: 118
score: 98.99878692626953
patch: iter = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 118
score: 98.92041829427083
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , ;
rank: 118
score: 98.862060546875
patch: history = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 118
score: 98.80286322699652
patch: ++ iter ; ++ - - 1 ;
rank: 118
score: 98.74332682291667
patch: ++ iter ; ++ start ; iter ;
rank: 118
score: 98.71520278033088
patch: ++ iter ; if ( ! current . is CaMeL Na CaMeL N ( ) )
rank: 118
score: 98.70554024832589
patch: if ( iter > $NUMBER$ ;
rank: 119
score: 99.10398582175925
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 119
score: 99.04641884251645
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( )
rank: 119
score: 98.919580078125
patch: ++ max CaMeL Eval = Math . min ( iter , iter ) ;
rank: 119
score: 98.85988362630208
patch: results = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 119
score: 98.80216674804687
patch: ++ iter ; ++ iter ; ++ value ;
rank: 119
score: 98.74251556396484
patch: ++ iter ; ++ / / /
rank: 119
score: 98.714599609375
patch: ++ iter ; if ( iter != null ) {
rank: 119
score: 98.70549180772569
patch: else { iter = iter . length ;
rank: 120
score: 99.10396575927734
patch: Point CaMeL Value CaMeL Pair = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 120
score: 99.04608832465277
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ;
rank: 120
score: 99.04571242559524
patch: Point CaMeL Value CaMeL Pair current = current . current ; Point CaMeL Value CaMeL Pair current = current ;
rank: 120
score: 98.99709185431985
patch: if ( find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ) {
rank: 120
score: 98.91787380642361
patch: ++ max CaMeL Eval = iter ; ;
rank: 120
score: 98.85980694110577
patch: tmp = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 120
score: 98.80065307617187
patch: i * ++ ;
rank: 120
score: 98.74220784505208
patch: ++ iter ; ; ++ iter ; }
rank: 120
score: 98.71452780330883
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; ++ n ;
rank: 120
score: 98.70497759650735
patch: if ( ! iter . is CaMeL Empty ++ && iter . is CaMeL Empty ;
rank: 121
score: 99.10238308376736
patch: final Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 121
score: 99.04457397460938
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . read ( ) ;
rank: 121
score: 98.99645385742187
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 121
score: 98.91743299696181
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . ;
rank: 121
score: 98.85906575520833
patch: result = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 121
score: 98.79580349392361
patch: ++ iter ; ++ iter ; out ;
rank: 121
score: 98.74148123604911
patch: ++ iter ; ++ * /
rank: 121
score: 98.71337890625
patch: ++ iter ; Thread . current CaMeL Thread ( ) . ;
rank: 121
score: 98.70461600167411
patch: if ( ! iter . is CaMeL Empty ++ this . iter )
rank: 122
score: 99.04519813939145
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . get ( point ) ;
rank: 122
score: 99.04446847098214
patch: double [ ] steepest CaMeL Descent = preconditioner
rank: 122
score: 98.91610952524039
patch: result = new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 122
score: 98.85866292317708
patch: working = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 122
score: 98.79496765136719
patch: ++ iter ; for ++ 1 ;
rank: 122
score: 98.74129231770833
patch: ++ iter ; ++ iter ; ; iter
rank: 122
score: 98.71336454503677
patch: if ( current != null && current . is CaMeL Na CaMeL N ( ) ;
rank: 122
score: 98.7034912109375
patch: if ( ! iter . is CaMeL Empty ++ ) break ; }
rank: 123
score: 99.1002197265625
patch: int max = find CaMeL Upper CaMeL Bound ( ) ;
rank: 123
score: 99.04407319568452
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( ) ;
rank: 123
score: 99.04397715692934
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 0 ) ;
rank: 123
score: 98.99554764597039
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) max CaMeL Eval ;
rank: 123
score: 98.91603393554688
patch: ++ max CaMeL Eval = max CaMeL Eval ;
rank: 123
score: 98.85757446289062
patch: height = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 123
score: 98.79385375976562
patch: ++ iter ; while iter ; ;
rank: 123
score: 98.74057006835938
patch: ++ iter ; ; iter / /
rank: 123
score: 98.7119369506836
patch: ++ iter ; Thread . current CaMeL Thread ( ) . close ( ) ;
rank: 123
score: 98.70340304904514
patch: else { ++ iter ; break ; }
rank: 124
score: 99.09822845458984
patch: r = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 124
score: 99.04257041529605
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point ,
rank: 124
score: 98.99401137408088
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) true ;
rank: 124
score: 98.91583251953125
patch: ++ max CaMeL Eval ++ ; if ( Double . is CaMeL Na CaMeL N ( ;
rank: 124
score: 98.85600142045455
patch: return ( Point CaMeL Value CaMeL Pair ) current ;
rank: 124
score: 98.79349975585937
patch: ++ * * ++ iter ; ++ iter ;
rank: 124
score: 98.74022327769886
patch: ++ new ++ ; ++ iter ; ++ iter ;
rank: 124
score: 98.7117919921875
patch: ++ iter ; if ( iter != null )
rank: 124
score: 98.7032470703125
patch: if ( ! iter . is CaMeL Empty ++ this . iter . length )
rank: 125
score: 99.0964688387784
patch: delta = find CaMeL Upper CaMeL Bound ( ) ;
rank: 125
score: 99.04250266335227
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 125
score: 98.99394145764802
patch: ++ iter ; double search CaMeL Direction = steepest CaMeL Descent . clone ( ) ;
rank: 125
score: 98.91580200195312
patch: ++ max CaMeL Eval * max CaMeL Eval = iter ;
rank: 125
score: 98.85432942708333
patch: h = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 125
score: 98.79306030273438
patch: ++ iter ; ++ * / ;
rank: 125
score: 98.73824462890624
patch: ++ iter ; ++ iter ; ++ max ;
rank: 125
score: 98.7117919921875
patch: ++ iter ; System . exit ( iter ) ;
rank: 125
score: 98.70114135742188
patch: else { ++ 0 ;
rank: 126
score: 99.09608968098958
patch: Point CaMeL Value CaMeL Pair point = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 126
score: 99.04366629464286
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( point ) ;
rank: 126
score: 99.04182942708333
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . ) ;
rank: 126
score: 98.91571044921875
patch: ++ max CaMeL Eval + max CaMeL Eval + 1 ;
rank: 126
score: 98.85397338867188
patch: m = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 126
score: 98.79278564453125
patch: else * ++ iter ;
rank: 126
score: 98.73621961805556
patch: ++ ( ++ iter ; ++ iter ;
rank: 126
score: 98.71009018841912
patch: if ( current == null || current . is CaMeL Na CaMeL N ( ) ;
rank: 126
score: 98.70072174072266
patch: else { iter += $NUMBER$ ; }
rank: 127
score: 99.09580078125
patch: ++ max CaMeL Eval += find CaMeL Upper CaMeL Bound ( point ) ;
rank: 127
score: 99.0432765794837
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition ( point ) ;
rank: 127
score: 98.99223109654018
patch: current = current . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 127
score: 98.9156494140625
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 127
score: 98.85316975911458
patch: all = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 127
score: 98.79163208007813
patch: ++ iter ; ++ iter ; int iter ;
rank: 127
score: 98.73611450195312
patch: ++ iter ; iter / ++ ;
rank: 127
score: 98.70986938476562
patch: if ( ! iter . is CaMeL Empty ( ) ) { break ; }
rank: 127
score: 98.70053439670139
patch: else { iter += 0 . ; }
rank: 128
score: 99.0397884971217
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( )
rank: 128
score: 98.99178916529605
patch: double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 128
score: 98.91533660888672
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , iter ;
rank: 128
score: 98.85279337565105
patch: group = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 128
score: 98.79109700520833
patch: ++ iter ; break ;
rank: 128
score: 98.73417358398437
patch: ++ iter ; ++ Math ; ++ iter ;
rank: 128
score: 98.70970662434895
patch: if ( max CaMeL Eval > max CaMeL Eval ) {
rank: 128
score: 98.7000961303711
patch: / * * * / } /
rank: 129
score: 99.09541829427083
patch: double [ ] steepest CaMeL Descent = delta ;
rank: 129
score: 99.03989955357143
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( this ) ;
rank: 129
score: 98.9908088235294
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ,
rank: 129
score: 98.9150390625
patch: ++ max CaMeL Eval <= max CaMeL Eval ;
rank: 129
score: 98.8527099609375
patch: synchronized ( steepest CaMeL Descent ) {
rank: 129
score: 98.790966796875
patch: ++ iter ; iter ; if ++ iter ;
rank: 129
score: 98.73412407769098
patch: ++ iter ; ; if iter ++ ;
rank: 129
score: 98.7073974609375
patch: current = Math . max ( max CaMeL Eval , current . ;
rank: 129
score: 98.70005580357143
patch: if ( iter == 0 )
rank: 130
score: 99.0947265625
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner . clone ( ) ;
rank: 130
score: 99.03877527573529
patch: for ( Point CaMeL Value CaMeL Pair current : steepest CaMeL Descent ) {
rank: 130
score: 98.98893737792969
patch: final double search CaMeL Direction = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 130
score: 98.91499408922698
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 130
score: 98.85203721788194
patch: public Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 130
score: 98.7908935546875
patch: ++ iter ; ++ - ++ iter ;
rank: 130
score: 98.73223114013672
patch: iter else ++ ; ++ iter ;
rank: 130
score: 98.70711517333984
patch: while ( iter == n ) {
rank: 130
score: 98.69983927408855
patch: else { ++ iter ;
rank: 131
score: 99.09466552734375
patch: ++ max CaMeL Eval -= search CaMeL Direction . length ;
rank: 131
score: 99.03858857996323
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . point ) ;
rank: 131
score: 98.98844909667969
patch: delta += compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 131
score: 98.91392933238636
patch: ++ max CaMeL Eval = iter + current . ;
rank: 131
score: 98.78748321533203
patch: ++ 0 ; ++ - iter ;
rank: 131
score: 98.73037109375
patch: ++ iter ; ; if iter = iter ;
rank: 131
score: 98.70515441894531
patch: ++ iter ; if ( ! current . is CaMeL Empty ( ) ) {
rank: 131
score: 98.69970703125
patch: if ( iter > 0 ; * /
rank: 132
score: 99.09430401141827
patch: double max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 132
score: 99.03768920898438
patch: if ( point . length < point . length ) {
rank: 132
score: 98.91373019748264
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r ) ;
rank: 132
score: 98.84939340444711
patch: int point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 132
score: 98.78657531738281
patch: ++ iter ; ++ iter ; *
rank: 132
score: 98.72992815290179
patch: ++ iter ; ++ / /
rank: 132
score: 98.70291900634766
patch: while ( iter >= 0 ) {
rank: 132
score: 98.699462890625
patch: if ( ! iter . is CaMeL Empty ( ) ; ++ iter ;
rank: 133
score: 99.09382459852431
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 133
score: 99.03701171875
patch: final double [ ] steepest CaMeL Descent . clone ( ) ;
rank: 133
score: 99.0363833778783
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( ) ; ;
rank: 133
score: 98.98792375837054
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 133
score: 98.91300825639205
patch: iter = new Point CaMeL Value CaMeL Pair ( ;
rank: 133
score: 98.78558904474431
patch: ++ iter ; ++ iter ; ++ * iter ;
rank: 133
score: 98.70108032226562
patch: ++ iter + iter + 1 ;
rank: 133
score: 98.69894845145089
patch: if ( iter > 0 )
rank: 134
score: 99.09325110394022
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( ) ;
rank: 134
score: 99.03692626953125
patch: int [ ] steepest CaMeL Descent = preconditioner . clone ( point ) ;
rank: 134
score: 98.98627178485577
patch: int max = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 134
score: 98.91300455729167
patch: result = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 134
score: 98.72792561848958
patch: ++ iter ; ++ iter ; ++ ;
rank: 134
score: 98.70038713727679
patch: ++ iter ; Thread . current CaMeL Thread ( ) . stop ;
rank: 134
score: 98.69853071732955
patch: if ( ! iter . equals ( $NUMBER$ ) ;
rank: 135
score: 99.09255859375
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner . clone ( ) ;
rank: 135
score: 98.98488071986607
patch: ++ iter ; steepest CaMeL Descent . clone ( ) ;
rank: 135
score: 98.91259765625
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval = ;
rank: 135
score: 98.84859793526786
patch: return new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 135
score: 98.78450230189732
patch: ++ iter ; ++ break ;
rank: 135
score: 98.72567138671874
patch: ++ iter ; ; ++ iter ; iter ;
rank: 135
score: 98.69921061197917
patch: ++ iter ; Thread . current CaMeL Thread ( ) . stop ( ;
rank: 135
score: 98.69847869873047
patch: ++ iter ; / * * /
rank: 136
score: 98.9829345703125
patch: if ( max CaMeL Eval == null ) {
rank: 136
score: 98.91151123046875
patch: ++ max CaMeL Eval += iter * iter ;
rank: 136
score: 98.84818950452302
patch: return new Point CaMeL Value CaMeL Pair ( compute CaMeL Objective CaMeL Gradient ( point ) ) ;
rank: 136
score: 98.78139241536458
patch: ++ iter ; iter ; * * /
rank: 136
score: 98.72532958984375
patch: ++ iter ; ++ iter ; iter ; iter
rank: 136
score: 98.69737659801136
patch: else throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 136
score: 98.69695685891544
patch: if ( current == null || current . is CaMeL Na CaMeL N ( ) )
rank: 137
score: 99.0921142578125
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 137
score: 99.03324558423913
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( point ) ;
rank: 137
score: 99.02911376953125
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 137
score: 98.98271484375
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction . length ) ;
rank: 137
score: 98.91051432291667
patch: ++ max CaMeL Eval = iter + current . hash CaMeL Code ( ;
rank: 137
score: 98.84801228841145
patch: collection = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 137
score: 98.78133138020833
patch: ++ iter ; try ; if iter ;
rank: 137
score: 98.7253085049716
patch: ++ iter ; ++ ++ 1 ; ++ iter ;
rank: 137
score: 98.697265625
patch: else { iter = iter . iter ; }
rank: 137
score: 98.6968524639423
patch: if ( ! iter . is CaMeL Empty ( ; ) )
rank: 138
score: 99.09206671463816
patch: double [ ] steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 138
score: 99.0330226732337
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 138
score: 99.0287373860677
patch: while ( iter < search CaMeL Direction . length ) {
rank: 138
score: 98.98204281455592
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( search CaMeL Direction ) ;
rank: 138
score: 98.9101921530331
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( ) ;
rank: 138
score: 98.84800211588542
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 138
score: 98.77991485595703
patch: ++ iter ; ++ ] iter ;
rank: 138
score: 98.72488403320312
patch: ++ iter ; ++ iter ; else iter ;
rank: 138
score: 98.69666290283203
patch: if ( ! ++ iter ) {
rank: 138
score: 98.69592963324652
patch: if ( ! iter . is CaMeL Empty ( ) || . is CaMeL Empty ( ;
rank: 139
score: 99.09151517427884
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 139
score: 99.03261204769737
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . length ;
rank: 139
score: 99.02786075367646
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( max CaMeL Eval ) ;
rank: 139
score: 98.98160129123264
patch: current = current . compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 139
score: 98.90997924804688
patch: ++ max CaMeL Eval -- ; if ( ;
rank: 139
score: 98.84575861150569
patch: list = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 139
score: 98.7791259765625
patch: ++ iter ; ++ * ; ++ iter ;
rank: 139
score: 98.72465684678819
patch: ++ iter ; ++ iter ; / *
rank: 139
score: 98.69589669363839
patch: while ( ! iter . is CaMeL Empty ( ) ; break ;
rank: 139
score: 98.69486999511719
patch: while ( ! iter . is CaMeL Empty ( ) ) { ++ iter ;
rank: 140
score: 99.09099469866071
patch: max CaMeL Eval -= compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 140
score: 99.02699497767857
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; {
rank: 140
score: 98.909912109375
patch: ++ max CaMeL Eval = iter + $NUMBER$ ;
rank: 140
score: 98.84530639648438
patch: g = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 140
score: 98.77845982142857
patch: ++ iter ; if iter ;
rank: 140
score: 98.72384207589286
patch: ++ iter ; ++ null ;
rank: 140
score: 98.69583468967014
patch: * * * * / ++ iter ;
rank: 140
score: 98.69452981387867
patch: ++ iter ; Thread . current CaMeL Thread ( ) . notify CaMeL All ( ;
rank: 141
score: 99.09087371826172
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 141
score: 99.03148057725694
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL
rank: 141
score: 99.02671185661765
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 141
score: 98.98070571001838
patch: int steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 141
score: 98.90975748697916
patch: result = new Point CaMeL Value CaMeL Pair ( ++ max CaMeL Eval ;
rank: 141
score: 98.84474012586806
patch: return ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 141
score: 98.77839491102431
patch: ++ iter ; ++ ++ * iter ;
rank: 141
score: 98.72352600097656
patch: ++ iter ; iter ; / /
rank: 141
score: 98.69565255301339
patch: else { ++ value ; }
rank: 141
score: 98.69425695082721
patch: if ( current != null && current . is CaMeL Na CaMeL N ( ) )
rank: 142
score: 99.03129308363971
patch: double [ ] steepest CaMeL Descent = preconditioner . max ;
rank: 142
score: 99.02667236328125
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition (
rank: 142
score: 98.9090909090909
patch: ++ max CaMeL Eval ++ ; System . out . ; System . out . ; System . out . ;
rank: 142
score: 98.84395345052083
patch: outer = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 142
score: 98.77700805664062
patch: ++ iter ; ++ * / /
rank: 142
score: 98.72290717230902
patch: ++ iter ; iter / / / /
rank: 142
score: 98.69544219970703
patch: / * * * ++ iter /
rank: 142
score: 98.6938247680664
patch: while ( ! current . ; current . is CaMeL Empty ( ) ) {
rank: 143
score: 99.09037642045455
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition (
rank: 143
score: 98.9088643391927
patch: ++ max CaMeL Eval = iter / max CaMeL Eval ;
rank: 143
score: 98.84342447916667
patch: area = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 143
score: 98.77657470703124
patch: ++ iter ; ++ value ; ++ iter ;
rank: 143
score: 98.72120884486607
patch: ++ null ; ++ iter ;
rank: 143
score: 98.69393581814236
patch: else { if ; ++ iter ; }
rank: 144
score: 99.090087890625
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , search CaMeL Direction ) ;
rank: 144
score: 99.03110573508523
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point ) ;
rank: 144
score: 98.97775607638889
patch: final double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 144
score: 98.9078369140625
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , iter ;
rank: 144
score: 98.843017578125
patch: found = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 144
score: 98.77594757080078
patch: ++ iter ; * ++ iter ;
rank: 144
score: 98.69348754882813
patch: if ( iter == 0 ; break ; }
rank: 144
score: 98.69336954752605
patch: current = Math . max ( iter , current . ;
rank: 145
score: 99.03073120117188
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ;
rank: 145
score: 99.02566528320312
patch: int iter = find CaMeL Upper CaMeL Bound ( ) ;
rank: 145
score: 98.97726440429688
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 145
score: 98.90724875710227
patch: ++ iter ; if ( max CaMeL Eval < ;
rank: 145
score: 98.84109262319711
patch: Object current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 145
score: 98.77557373046875
patch: / * ] ++ iter ; ++ iter ;
rank: 145
score: 98.72079467773438
patch: ++ iter ; iter / ; ++ iter ;
rank: 145
score: 98.69194030761719
patch: Set iter = iter . length ;
rank: 145
score: 98.68980823863636
patch: ++ iter ; hash CaMeL Code = ++ iter ;
rank: 146
score: 99.08953125
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( iter ) ;
rank: 146
score: 98.97593287417763
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 146
score: 98.90630548650569
patch: ++ max CaMeL Eval ++ ; if ( iter ;
rank: 146
score: 98.8409932454427
patch: saved = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 146
score: 98.77435302734375
patch: ++ iter ; ++ case iter ;
rank: 146
score: 98.72061593191964
patch: ++ this ; ++ iter ;
rank: 146
score: 98.69161987304688
patch: if ( ! iter . is CaMeL Empty ++ true ;
rank: 146
score: 98.68927873883929
patch: current = Math . max ( max CaMeL Eval , current ) ;
rank: 147
score: 99.08847481863839
patch: r = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 147
score: 99.0245361328125
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; ;
rank: 147
score: 98.90502115885417
patch: result = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 147
score: 98.84047444661458
patch: grid = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 147
score: 98.77432861328126
patch: ++ value ; ++ iter ; ++ iter ;
rank: 147
score: 98.71905517578125
patch: ++ iter ; ; ++ n ;
rank: 147
score: 98.69124603271484
patch: } else { / * * /
rank: 147
score: 98.688916015625
patch: ++ iter ; while ( iter < n )
rank: 148
score: 99.02453002929687
patch: double [ ] steepest CaMeL Descent = preconditioner . . clone ( ) ;
rank: 148
score: 98.97506510416666
patch: if ( update CaMeL Formula ( steepest CaMeL Descent ) ) {
rank: 148
score: 98.9032958984375
patch: ++ max CaMeL Eval -- ; ++ iter ;
rank: 148
score: 98.84046282087054
patch: result = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 148
score: 98.71846226283482
patch: ++ iter ; ; / /
rank: 148
score: 98.6885986328125
patch: if ( iter > 0 ; }
rank: 148
score: 98.68751831054688
patch: ++ iter ; max CaMeL Eval = iter ;
rank: 149
score: 99.02926296657986
patch: final double [ ] steepest CaMeL Descent = preconditioner . $STRING$ ;
rank: 149
score: 99.02444223257211
patch: Point CaMeL Value CaMeL Pair current = current . ( ) ;
rank: 149
score: 98.97504021139706
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) null ;
rank: 149
score: 98.90263148716518
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval ;
rank: 149
score: 98.8394063313802
patch: size = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 149
score: 98.77269151475694
patch: ++ 1 ++ iter ; ++ iter ;
rank: 149
score: 98.71843126085069
patch: iter ; ++ 0 ; ++ iter ;
rank: 149
score: 98.6878433227539
patch: ++ iter ; if ++ $NUMBER$ ;
rank: 149
score: 98.6866814108456
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ) ) continue ;
rank: 150
score: 99.08728841145833
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = current ;
rank: 150
score: 99.02814275568181
patch: final double [ ] steepest CaMeL Descent ;
rank: 150
score: 99.02382114955357
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 150
score: 98.9749247233073
patch: if ( max CaMeL Eval < point . length ) {
rank: 150
score: 98.90252130681819
patch: ++ max CaMeL Eval = this . ++ iter ;
rank: 150
score: 98.83856670673077
patch: other = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 150
score: 98.77235412597656
patch: ++ iter ; iter * * /
rank: 150
score: 98.71794297960069
patch: ++ iter ; ++ iter ; iterator ;
rank: 150
score: 98.68678501674107
patch: if ( iter != 0 ;
rank: 150
score: 98.6865234375
patch: if ( ! iter . contains ( current ) ) {
rank: 151
score: 99.0871941061581
patch: double [ ] search CaMeL Direction = preconditioner . clone ( ) ;
rank: 151
score: 99.02786458333334
patch: int [ ] steepest CaMeL Descent = preconditioner ;
rank: 151
score: 99.02365291819854
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . 0 ) ;
rank: 151
score: 98.90229348575367
patch: ++ max CaMeL Eval >= Math . max ( max CaMeL Eval , iter ) ;
rank: 151
score: 98.83798217773438
patch: [ ] steepest CaMeL Descent = preconditioner . precondition . clone ( ) ;
rank: 151
score: 98.77189805772569
patch: ++ * * iter ; ++ iter ;
rank: 151
score: 98.686279296875
patch: if ( ! iter . is CaMeL Empty ++ ) }
rank: 151
score: 98.68626403808594
patch: ++ iter ; Thread . current CaMeL Thread ( ) . destroy ( ) ;
rank: 152
score: 99.08649444580078
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point ,
rank: 152
score: 99.02724609375
patch: double [ ] steepest CaMeL Descent = preconditioner . get ( point ) ;
rank: 152
score: 98.9737548828125
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . to CaMeL
rank: 152
score: 98.90225219726562
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 152
score: 98.83795166015625
patch: row = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 152
score: 98.77170817057292
patch: ++ iter ; ++ iter ; ; *
rank: 152
score: 98.71683349609376
patch: ++ iter ; ++ iter ; ++ 0 ;
rank: 152
score: 98.68620954241071
patch: if ( iter == $NUMBER$ ;
rank: 153
score: 99.08625139508929
patch: delta = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 153
score: 99.02561732700893
patch: if ( point . length < search CaMeL Direction . length ) {
rank: 153
score: 99.02303274054276
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( ) ; {
rank: 153
score: 98.97291870117188
patch: double steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 153
score: 98.90193006727431
patch: while ( iter < r . length )
rank: 153
score: 98.83763631184895
patch: q = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 153
score: 98.77098083496094
patch: ++ iter ; ++ - * ;
rank: 153
score: 98.71563042534723
patch: ++ iter ; iter / ; / /
rank: 153
score: 98.68604871961806
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . contains )
rank: 153
score: 98.68546549479167
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ;
rank: 154
score: 99.08611505681819
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , current ) ;
rank: 154
score: 99.02290852864583
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 154
score: 98.90172467912946
patch: result [ iter ] = new Point CaMeL Value CaMeL Pair ( ;
rank: 154
score: 98.83689880371094
patch: [ ] steepest CaMeL Descent = preconditioner . precondition (
rank: 154
score: 98.77069091796875
patch: catch ++ iter ; ++ iter ;
rank: 154
score: 98.68495871803977
patch: ++ iter ; while ( iter != 0 ) {
rank: 154
score: 98.68472290039062
patch: if ( ! iter . is CaMeL Empty ++ false ;
rank: 155
score: 99.02478558084239
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . get ( point ) ;
rank: 155
score: 98.97284256784539
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . length ;
rank: 155
score: 98.901220703125
patch: ++ max CaMeL Eval = Math . max ( iter , iter ) ;
rank: 155
score: 98.83568657769098
patch: protected Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 155
score: 98.77034214564732
patch: ++ 1 * ++ iter ;
rank: 155
score: 98.71451822916667
patch: ++ iter ; ++ max = iter ;
rank: 155
score: 98.68492780412946
patch: if ( ++ iter ) {
rank: 156
score: 99.08533296130952
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point ;
rank: 156
score: 99.02198621961806
patch: Point CaMeL Value CaMeL Pair current = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 156
score: 98.9719482421875
patch: double [ ] search CaMeL Direction = preconditioner . precondition ( point , r ) ;
rank: 156
score: 98.90091145833334
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , ;
rank: 156
score: 98.83474731445312
patch: proxy = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 156
score: 98.76987033420139
patch: ++ * ++ iter ; int iter ;
rank: 156
score: 98.71197509765625
patch: iter ++ ; ; ++ iter ;
rank: 156
score: 98.6847900390625
patch: ++ iter ; if ( ! iter . ;
rank: 156
score: 98.68419300426136
patch: if ( ! iter . equals ( iter ) ;
rank: 157
score: 99.08460828993056
patch: List steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 157
score: 99.0236583891369
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( ) ;
rank: 157
score: 99.02141974954044
patch: final double [ ] steepest CaMeL Descent = preconditioner . {
rank: 157
score: 98.97166224888393
patch: current = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 157
score: 98.89976501464844
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ;
rank: 157
score: 98.83363850911458
patch: l = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 157
score: 98.76829698350694
patch: ++ iter ; while iter + iter ;
rank: 157
score: 98.71177368164062
patch: ++ iter ; ++ r ; ++ iter ;
rank: 157
score: 98.683837890625
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ n ;
rank: 158
score: 99.08430989583333
patch: max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 158
score: 98.97112678079044
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 158
score: 98.89950125558036
patch: result = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 158
score: 98.83319091796875
patch: compare = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 158
score: 98.76717122395833
patch: ++ iter ; ++ value ; iter ;
rank: 158
score: 98.71063787286931
patch: ++ iter ; ++ iter ; ++ iter ; else
rank: 158
score: 98.68308803013393
patch: Iterator iter = ++ iter ;
rank: 158
score: 98.68293313419117
patch: if ( ! iter . is CaMeL Empty ++ || iter . is CaMeL Empty ;
rank: 159
score: 99.08423790564903
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker ;
rank: 159
score: 99.02055528428819
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( )
rank: 159
score: 98.97084263392857
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ,
rank: 159
score: 98.89856719970703
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ;
rank: 159
score: 98.83228556315105
patch: lock = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 159
score: 98.76707240513393
patch: ++ ++ * ++ iter ;
rank: 159
score: 98.71034749348958
patch: ++ iter ; ++ iter ; else }
rank: 159
score: 98.68292236328125
patch: else iter = iter . length ;
rank: 159
score: 98.68267822265625
patch: ++ iter ; if ( iter == 0 )
rank: 160
score: 99.0204345703125
patch: ++ max CaMeL Eval -= compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 160
score: 98.89783653846153
patch: ++ max CaMeL Eval = get CaMeL Context ( ) . ;
rank: 160
score: 98.83228410993304
patch: result = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 160
score: 98.76698608398438
patch: ++ iter ; ++ iter ; ++ break ;
rank: 160
score: 98.70879364013672
patch: iter ; ++ iter ; / /
rank: 160
score: 98.68260779747597
patch: if ( ! iter . compare CaMeL To ( current ) )
rank: 160
score: 98.68234592013889
patch: / * * * ++ * * /
rank: 161
score: 99.08411583533653
patch: double delta = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 161
score: 99.0203857421875
patch: ++ max CaMeL Eval -= search CaMeL Direction . precondition ( ) ;
rank: 161
score: 98.97040349786931
patch: ++ max CaMeL Eval ; Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 161
score: 98.89731852213542
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ; }
rank: 161
score: 98.76649305555556
patch: ++ 1 ; ++ iter ; iter ;
rank: 161
score: 98.70855712890625
patch: ++ iter ; ++ iter ; ++ r ;
rank: 161
score: 98.682568359375
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 161
score: 98.68157196044922
patch: * * * ; ++ iter ;
rank: 162
score: 99.08375308388158
patch: byte [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 162
score: 99.02096557617188
patch: double [ ] steepest CaMeL Descent = preconditioner $NUMBER$ . clone ( ) ;
rank: 162
score: 98.97013346354167
patch: if ( Point CaMeL Value CaMeL Pair current = current ;
rank: 162
score: 98.89711350661058
patch: return new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 162
score: 98.82969156901042
patch: top = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 162
score: 98.76618194580078
patch: else ++ iter ; ++ 1 ;
rank: 162
score: 98.70741577148438
patch: ++ start ; ++ iter ; ++ iter ;
rank: 162
score: 98.68142520680146
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ , n ) ;
rank: 162
score: 98.6811752319336
patch: else { ++ ++ iter ; }
rank: 163
score: 99.02086724175348
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . iterator ( ) ;
rank: 163
score: 98.89623084435097
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ;
rank: 163
score: 98.76539195667614
patch: ++ iter ; ++ iter ; ++ - 1 ;
rank: 163
score: 98.7060546875
patch: ++ iter ; ++ iter ; else -- iter ;
rank: 163
score: 98.68075997488839
patch: if ( ! iter . is CaMeL Empty ++ ) return iter ;
rank: 163
score: 98.68069118923611
patch: state = get CaMeL State ( ) ;
rank: 164
score: 99.08316802978516
patch: double [ ] steepest CaMeL Descent = precondition . clone ( ) ;
rank: 164
score: 99.01966271033653
patch: final Point CaMeL Value CaMeL Pair current = current . current ;
rank: 164
score: 98.9689697265625
patch: if ( max CaMeL Eval < 0 ) {
rank: 164
score: 98.89571533203124
patch: ++ max CaMeL Eval + iter + iter ;
rank: 164
score: 98.76521301269531
patch: / * ] iter = iter ;
rank: 164
score: 98.70480007595486
patch: ++ iter ; else ; ++ iter ;
rank: 164
score: 98.68020395132211
patch: ++ iter ; if ( current . compare CaMeL To ( ;
rank: 164
score: 98.68004261363636
patch: throw new Runtime CaMeL Exception ( $STRING$ + iter ;
rank: 165
score: 99.08104705810547
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( point ) ;
rank: 165
score: 99.01949637276786
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point ) ;
rank: 165
score: 98.9686638327206
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point ;
rank: 165
score: 98.8955078125
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval ; ;
rank: 165
score: 98.82870483398438
patch: other = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 165
score: 98.76509602864583
patch: ++ * ++ 1 ; ++ iter ;
rank: 165
score: 98.68011474609375
patch: while ( iter <= n ) {
rank: 165
score: 98.67907036675348
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . length ;
rank: 166
score: 99.08079246238425
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 166
score: 99.0193507982337
patch: int [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( ) ;
rank: 166
score: 98.96859886532738
patch: Point CaMeL Value CaMeL Pair current = current . compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 166
score: 98.89516977163461
patch: ++ iter ; r [ max CaMeL Eval ++ ] = ;
rank: 166
score: 98.8286844889323
patch: global = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 166
score: 98.76416015625
patch: ++ 1 ++ iter ;
rank: 166
score: 98.70406341552734
patch: ++ iter ; ; / / /
rank: 166
score: 98.67885131835938
patch: / * * * * / ++ iter ;
rank: 167
score: 99.07954676011029
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = current ;
rank: 167
score: 99.01922607421875
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( point ) ;
rank: 167
score: 99.0181884765625
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner
rank: 167
score: 98.96833801269531
patch: if ( iter < n ) {
rank: 167
score: 98.89498901367188
patch: iter = ++ max CaMeL Eval ;
rank: 167
score: 98.82867431640625
patch: queue = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 167
score: 98.70381673177083
patch: ++ iter ; ++ iter ; } else
rank: 167
score: 98.6787841796875
patch: ++ iter ; current = ( Point CaMeL Value CaMeL Pair ) iter ;
rank: 167
score: 98.67876790364583
patch: if ( ! iter . is CaMeL Empty ( ) ) return null ;
rank: 168
score: 99.0168212890625
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . trim ( ) ;
rank: 168
score: 98.89464460100446
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval > ;
rank: 168
score: 98.82835896809895
patch: cs = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 168
score: 98.70340304904514
patch: ++ iter ; ; if iter / /
rank: 168
score: 98.67800668569711
patch: tmp = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 168
score: 98.67769368489583
patch: else { if ++ iter ; * /
rank: 169
score: 99.01558254076087
patch: final double [ ] steepest CaMeL Descent = preconditioner . clone ( point , r ) ;
rank: 169
score: 98.9677375344669
patch: ++ max CaMeL Eval ; current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 169
score: 98.89399937220982
patch: r [ iter ] = ;
rank: 169
score: 98.8278096516927
patch: layout = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 169
score: 98.76279703776042
patch: ++ iter ; iter ; int 1 ;
rank: 169
score: 98.70316314697266
patch: iter ++ ; ++ iter ; ;
rank: 169
score: 98.67758178710938
patch: else { if ; ++ iter ;
rank: 169
score: 98.67690207741477
patch: ++ iter ; while ( iter < n ) {
rank: 170
score: 99.0780537923177
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , 0 ) ;
rank: 170
score: 99.0169613486842
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point .
rank: 170
score: 99.01505180027173
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . preconditioner ;
rank: 170
score: 98.96743629092262
patch: double [ ] steepest CaMeL Descent = this . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 170
score: 98.89368438720703
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) current . ;
rank: 170
score: 98.82766723632812
patch: body = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 170
score: 98.7021240234375
patch: ++ iter ; ++ iter ; iter ++ ;
rank: 170
score: 98.67625732421875
patch: if ( iter == 0 ) return null ;
rank: 170
score: 98.67589653862848
patch: ++ iter ; if ( current == ;
rank: 171
score: 99.07757209329044
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > current = current ;
rank: 171
score: 98.96689860026042
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction . length ) ;
rank: 171
score: 98.89305204503677
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r ;
rank: 171
score: 98.82741001674107
patch: result = compute CaMeL Objective CaMeL Gradient ( search CaMeL Direction ) ;
rank: 171
score: 98.76220703125
patch: ++ iter ; ++ * 1 ;
rank: 171
score: 98.67605929904514
patch: else { * * ++ iter ; }
rank: 171
score: 98.67510516826923
patch: int iter = current . last CaMeL Index CaMeL Of ( ;
rank: 172
score: 99.07718331473214
patch: current = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 172
score: 98.96658761160714
patch: if ( Point CaMeL Value CaMeL Pair . update CaMeL Formula ( point , search CaMeL Direction ) ) {
rank: 172
score: 98.89250837053571
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 172
score: 98.82719203404018
patch: other = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 172
score: 98.70161437988281
patch: ++ iter ; ++ max ; else
rank: 172
score: 98.67566789899554
patch: if ( ! iter . is CaMeL Empty ( ) ; * /
rank: 172
score: 98.6747713955966
patch: if ( ! iter . contains ( current ) ;
rank: 173
score: 99.01150173611111
patch: final double [ ] steepest CaMeL Descent = preconditioner . to CaMeL
rank: 173
score: 98.89244495738636
patch: ++ max CaMeL Eval / max CaMeL Eval ++ ;
rank: 173
score: 98.82670084635417
patch: member = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 173
score: 98.7602783203125
patch: ++ iter ; ++ iter ; int * /
rank: 173
score: 98.69998168945312
patch: ++ iter ; ++ ++ iter ; iter ;
rank: 173
score: 98.67559051513672
patch: / * * * / * ;
rank: 173
score: 98.67430768694196
patch: current = Math . min ( iter , current . ++ ) ;
rank: 174
score: 99.07537286931819
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , 0 ) ;
rank: 174
score: 99.01419503348214
patch: final Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 174
score: 99.01127485795455
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 174
score: 98.96637517755681
patch: double [ ] steepest CaMeL Descent += preconditioner . precondition ( point , r ) ;
rank: 174
score: 98.89200846354167
patch: ++ iter ; r [ max CaMeL Eval ++ ] ;
rank: 174
score: 98.82582092285156
patch: y = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 174
score: 98.76025390625
patch: ++ 1 ; ++ iter ; ;
rank: 174
score: 98.6994961825284
patch: ++ iter ; iter if ++ ; ++ iter ;
rank: 174
score: 98.6749267578125
patch: if ( iter > 1 ;
rank: 174
score: 98.67283935546875
patch: if ( iter >= max CaMeL Eval ) {
rank: 175
score: 99.07491455078124
patch: List steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 175
score: 99.0112537202381
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . read ( ) ;
rank: 175
score: 98.96636603860294
patch: double steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 175
score: 98.89188639322917
patch: ++ max CaMeL Eval = iter + current . ++ ;
rank: 175
score: 98.82561700994319
patch: public Point CaMeL Value CaMeL Pair current = current ;
rank: 175
score: 98.75869411892361
patch: ++ * ] iter ; ++ iter ;
rank: 175
score: 98.69915771484375
patch: ++ ( iter ; ++ iter ;
rank: 175
score: 98.67449951171875
patch: / * * ++ iter * /
rank: 175
score: 98.67134602864583
patch: ++ iter - 1 ;
rank: 176
score: 99.01309640066964
patch: final double CaMeL Value = find CaMeL Upper CaMeL Bound ( ) ;
rank: 176
score: 99.01115112304687
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 176
score: 98.96587727864583
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ,
rank: 176
score: 98.89119680304276
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r ) ;
rank: 176
score: 98.82490757533482
patch: y = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 176
score: 98.75865342881944
patch: / * ] iter ; ++ iter ;
rank: 176
score: 98.69905308314732
patch: ++ iter ; ++ true ;
rank: 176
score: 98.67433166503906
patch: else { iter += 0 ; }
rank: 176
score: 98.67132568359375
patch: current = Math . min ( iter , current ) ;
rank: 177
score: 99.01303932883523
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 177
score: 99.01083034939236
patch: final double [ ] search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 177
score: 98.96518426192434
patch: final double steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 177
score: 98.89061737060547
patch: ++ max CaMeL Eval -- ; ;
rank: 177
score: 98.82487487792969
patch: found = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 177
score: 98.75822448730469
patch: ++ iter ; else iter ++ ;
rank: 177
score: 98.69785378196023
patch: ++ iter ; iter / * / ++ iter ;
rank: 177
score: 98.67373657226562
patch: / * * * * ; /
rank: 177
score: 98.6700668334961
patch: current = Math . min ( max CaMeL Eval , current . ++ ) ;
rank: 178
score: 99.01205679086539
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( ) ;
rank: 178
score: 98.9651123046875
patch: int max CaMeL Eval = search CaMeL Direction [ max CaMeL Eval ] ;
rank: 178
score: 98.8903339092548
patch: ++ max CaMeL Eval ++ ; System . out . ; ;
rank: 178
score: 98.75617218017578
patch: ++ iter ; else return iter ;
rank: 178
score: 98.69719587053571
patch: ++ iter ; iter / ;
rank: 178
score: 98.67367553710938
patch: / * * * ; * /
rank: 179
score: 99.07259114583333
patch: current = find CaMeL Upper CaMeL Bound ( point , steepest CaMeL Descent ) ;
rank: 179
score: 99.01205444335938
patch: return new Line CaMeL Search CaMeL Function ( point ) ;
rank: 179
score: 99.01078869047619
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner ;
rank: 179
score: 98.96499633789062
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 179
score: 98.89012654622395
patch: ++ max CaMeL Eval * max CaMeL Eval ++ ; ;
rank: 179
score: 98.82461313100961
patch: data = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 179
score: 98.75539143880208
patch: ++ iter ; * / int iter ;
rank: 179
score: 98.69700113932292
patch: ++ iter ; ++ ++ iter ; else
rank: 179
score: 98.67332458496094
patch: else { if ; * * /
rank: 179
score: 98.6667839499081
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( n ;
rank: 180
score: 99.01066080729167
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( false ) ;
rank: 180
score: 98.96387657752403
patch: double max = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 180
score: 98.88973999023438
patch: ++ max CaMeL Eval = iter + start ;
rank: 180
score: 98.8245137532552
patch: selection = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 180
score: 98.75460815429688
patch: ++ value ; ++ - iter ;
rank: 180
score: 98.69677734375
patch: / ++ iter ; ++ iter ;
rank: 180
score: 98.6732406616211
patch: / * * ++ * * ;
rank: 180
score: 98.66613091362848
patch: if ( iter == 0 ) break ;
rank: 181
score: 99.0716219815341
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , $NUMBER$ ) ;
rank: 181
score: 99.01157052176339
patch: final double delta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 181
score: 98.88948974609374
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter ) ;
rank: 181
score: 98.82420857747395
patch: ps = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 181
score: 98.75422498914931
patch: ++ 0 ; ++ iter ; iter ;
rank: 181
score: 98.69636535644531
patch: ++ iter ; ++ n ; ;
rank: 181
score: 98.67304992675781
patch: ++ $NUMBER$ ; if ++ iter ;
rank: 181
score: 98.66597254136029
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 182
score: 99.07132161458334
patch: final double CaMeL Value = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 182
score: 99.01002903988487
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . iterator ( ) ;
rank: 182
score: 98.88939819335937
patch: ++ max CaMeL Eval = iter + current ;
rank: 182
score: 98.75413682725694
patch: ++ iter ; ++ iter ; ++ *
rank: 182
score: 98.69599745008681
patch: ++ iter ; ++ iter ; ; ;
rank: 182
score: 98.67163848876953
patch: i ++ ; if ++ iter ;
rank: 182
score: 98.66432542067308
patch: if ( ! iter . is CaMeL Empty ( ; ) ;
rank: 183
score: 99.0712531594669
patch: ++ max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 183
score: 99.01079711914062
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( ) ;
rank: 183
score: 99.0093005952381
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( null ) ;
rank: 183
score: 98.88682204026442
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval * iter ;
rank: 183
score: 98.82325236002605
patch: dialog = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 183
score: 98.75321197509766
patch: / * ] ++ ++ iter ;
rank: 183
score: 98.69415838068181
patch: ++ iter ; ++ iter ; / -- iter ;
rank: 183
score: 98.6714375813802
patch: if ( ! iter . is CaMeL Empty ++ ) {
rank: 183
score: 98.66426908052884
patch: ++ iter ; if ( max CaMeL Eval > 0 ) {
rank: 184
score: 99.07025146484375
patch: current = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 184
score: 99.00888959099265
patch: double [ ] steepest CaMeL Descent = preconditioner . null ;
rank: 184
score: 98.82180786132812
patch: sender = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 184
score: 98.7529296875
patch: ++ iter ; if iter ++ ;
rank: 184
score: 98.69405517578124
patch: ++ iter ; ++ this ; ++ iter ;
rank: 184
score: 98.67118072509766
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ;
rank: 184
score: 98.66356658935547
patch: ++ iter ; Thread . current CaMeL Thread ( ) . exit ( ) ;
rank: 185
score: 99.07012648809524
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound (
rank: 185
score: 99.0104736328125
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 185
score: 99.00874159071181
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . length ;
rank: 185
score: 98.88669002757354
patch: ++ max CaMeL Eval ++ ; System . out . ; System . out . ;
rank: 185
score: 98.82137044270833
patch: re = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 185
score: 98.75251007080078
patch: ++ iter ; iter + iter ;
rank: 185
score: 98.69167073567708
patch: ++ iter ; ++ iter ; start ;
rank: 185
score: 98.67112513950893
patch: if ( ! iter . is CaMeL Empty ( ) ; break ;
rank: 185
score: 98.66345825195313
patch: while ( iter >= max CaMeL Eval ) {
rank: 186
score: 99.0697530110677
patch: Point CaMeL Value CaMeL Pair point = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point ) ;
rank: 186
score: 99.00923879523026
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( ) ;
rank: 186
score: 99.00868918678977
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , true ) ;
rank: 186
score: 98.96112932477679
patch: final double iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 186
score: 98.88660430908203
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) this . ;
rank: 186
score: 98.8213123139881
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , n ) ;
rank: 186
score: 98.75052897135417
patch: ++ * ++ iter ; ++ 1 ;
rank: 186
score: 98.6708755493164
patch: ++ length ; if ++ iter ;
rank: 186
score: 98.663232421875
patch: while ( max CaMeL Eval > 0 ) {
rank: 187
score: 99.06946672712054
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ,
rank: 187
score: 99.00806725543478
patch: int [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound ( ) ;
rank: 187
score: 98.88629150390625
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; }
rank: 187
score: 98.7503662109375
patch: ++ * ] ++ iter ;
rank: 187
score: 98.69064331054688
patch: ++ iter ; ++ n ; else
rank: 187
score: 98.6707763671875
patch: else { iter += 0 . 0 ;
rank: 187
score: 98.6630859375
patch: current = Math . max ( max CaMeL Eval , current . ++ ;
rank: 188
score: 99.06874084472656
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 188
score: 99.0078986672794
patch: double [ ] steepest CaMeL Descent = preconditioner . true ;
rank: 188
score: 98.88582356770833
patch: ++ max CaMeL Eval ; if ( ;
rank: 188
score: 98.818359375
patch: ret = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 188
score: 98.6903076171875
patch: ++ iter ; ++ name ;
rank: 188
score: 98.670166015625
patch: ++ iter ; * * * /
rank: 188
score: 98.66279296875
patch: ++ iter ; Thread . current CaMeL Thread ( ) . wait ( ;
rank: 189
score: 99.00912814670139
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( )
rank: 189
score: 99.00643257472827
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , n ) ;
rank: 189
score: 98.95864386307566
patch: double steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ,
rank: 189
score: 98.88540810032895
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 189
score: 98.817626953125
patch: found = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 189
score: 98.75019836425781
patch: * ++ iter ; ++ iter ;
rank: 189
score: 98.68975151909723
patch: ++ iter ; ; ; ++ iter ;
rank: 189
score: 98.66984558105469
patch: } if ++ 0 * iter ;
rank: 190
score: 99.06844932154605
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 190
score: 99.00909830729167
patch: final double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 190
score: 99.005859375
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 0 ) ;
rank: 190
score: 98.95830939797794
patch: current = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 190
score: 98.884814453125
patch: r [ max CaMeL Eval ] += iter ;
rank: 190
score: 98.81745910644531
patch: table = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 190
score: 98.74992540147569
patch: ++ iter ; ++ 1 ; iter ;
rank: 190
score: 98.68960135323661
patch: ++ iter ; ++ * ;
rank: 190
score: 98.66940307617188
patch: else { / * * ++ /
rank: 190
score: 98.66232096354166
patch: ++ n ; if ( ! iter . is CaMeL Empty ( ) ;
rank: 191
score: 99.06635076349431
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , false ) ;
rank: 191
score: 99.00894019717262
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point . search CaMeL Direction ) ;
rank: 191
score: 98.95790501644737
patch: double search CaMeL Direction = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 191
score: 98.88478597005208
patch: ++ max CaMeL Eval + max CaMeL Eval + iter ;
rank: 191
score: 98.81687927246094
patch: ret = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 191
score: 98.68837193080357
patch: if iter ; ++ iter ;
rank: 191
score: 98.66884940011161
patch: if ( ! iter . is CaMeL Empty ( ) ) . ;
rank: 191
score: 98.6618293313419
patch: ++ iter ; Thread . current CaMeL Thread ( ) . wait ( $NUMBER$ ) ;
rank: 192
score: 99.06531700721153
patch: r = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 192
score: 99.00424194335938
patch: final double [ ] steepest CaMeL Descent = preconditioner .
rank: 192
score: 98.95721842447917
patch: max CaMeL Eval = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 192
score: 98.88411218979779
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , 0 ) ;
rank: 192
score: 98.81651814778645
patch: read = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 192
score: 98.74915907118056
patch: ++ iter ; ++ iter ; * *
rank: 192
score: 98.68829345703125
patch: ++ iter ; ; ++ 0 ;
rank: 192
score: 98.66133939302884
patch: ++ Math . max ( iter , current . ++ ) ;
rank: 193
score: 99.06525985054348
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( iter ) ;
rank: 193
score: 99.00853814019098
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . ;
rank: 193
score: 99.00309484145221
patch: double [ ] steepest CaMeL Descent = preconditioner . point ;
rank: 193
score: 98.95714314778645
patch: if ( Point CaMeL Value CaMeL Pair != null ) {
rank: 193
score: 98.81624603271484
patch: p = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 193
score: 98.74855041503906
patch: ++ iter ; else iter * /
rank: 193
score: 98.68784005301339
patch: ++ iter ; ++ min ;
rank: 193
score: 98.66650390625
patch: Iterator iter = iter . iterator ++ ; while ;
rank: 193
score: 98.66095525568181
patch: ++ iter ; Thread . current CaMeL Thread ( ;
rank: 194
score: 99.06501908735795
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ , r ) ;
rank: 194
score: 99.00795200892857
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; ;
rank: 194
score: 99.00293646918402
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition (
rank: 194
score: 98.95676967075893
patch: if ( steepest CaMeL Descent . length > 0 ) {
rank: 194
score: 98.88389282226562
patch: ++ max CaMeL Eval = ++ iter ; ;
rank: 194
score: 98.8159688313802
patch: target = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 194
score: 98.74545724051339
patch: / * ] iter ++ ;
rank: 194
score: 98.68753051757812
patch: ++ iter ; ; return iter ;
rank: 194
score: 98.6652323404948
patch: while ( ! iter . is CaMeL Empty ( ; )
rank: 194
score: 98.66012573242188
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; break ;
rank: 195
score: 99.00780639648437
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . 0 ) ;
rank: 195
score: 98.88384399414062
patch: r [ max CaMeL Eval ++ ] ++ ;
rank: 195
score: 98.81438337053571
patch: result = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 195
score: 98.74498401988636
patch: ++ iter ; ++ * * / ++ iter ;
rank: 195
score: 98.686083984375
patch: ++ iter ; ++ false ; ++ iter ;
rank: 195
score: 98.66465250651042
patch: else { * * * * / }
rank: 196
score: 99.06419788707386
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( point ) ;
rank: 196
score: 99.00764973958333
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ;
rank: 196
score: 98.88350219726563
patch: ++ max CaMeL Eval += iter + iter ;
rank: 196
score: 98.81393432617188
patch: cached = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 196
score: 98.74394226074219
patch: ++ 1 iter ; ++ iter ;
rank: 196
score: 98.68594970703126
patch: ++ iter ; ++ iter ; ++ / /
rank: 196
score: 98.66419067382813
patch: else { ++ iter ; } ++ iter ;
rank: 196
score: 98.65980881911058
patch: result = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 197
score: 99.06400756835937
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( this ) ;
rank: 197
score: 99.00753348214286
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; }
rank: 197
score: 99.00212266710069
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL
rank: 197
score: 98.88343302408855
patch: ++ iter ; final Point CaMeL Value CaMeL Pair ++ ;
rank: 197
score: 98.81331380208333
patch: call = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 197
score: 98.74363878038194
patch: ++ iter ; int * ++ iter ;
rank: 197
score: 98.68535822088069
patch: ++ iter ; ++ - iter ; ++ iter ;
rank: 197
score: 98.6637939453125
patch: if ( ! iter . is CaMeL Empty ( ) ; return iter ;
rank: 197
score: 98.65972900390625
patch: ++ iter ; if ( current . ;
rank: 198
score: 99.0638760653409
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 1 ) ;
rank: 198
score: 99.00749206542969
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . ) ;
rank: 198
score: 98.88337707519531
patch: r [ max CaMeL Eval ++ ] = Double . Na CaMeL N ; ;
rank: 198
score: 98.81288364955357
patch: p = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 198
score: 98.74356418185764
patch: ++ iter ; iter ; int * /
rank: 198
score: 98.68480224609375
patch: ++ iter ; ++ iter ; else / ;
rank: 198
score: 98.66349962022569
patch: ++ iter ; if ++ iter ; }
rank: 198
score: 98.65873718261719
patch: if ( ! ++ n ) {
rank: 199
score: 99.06346028645834
patch: current = new Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 199
score: 99.00677849264706
patch: ++ max CaMeL Eval ; Point CaMeL Value CaMeL Pair current = current . current ;
rank: 199
score: 99.00190873579545
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . iterator ( ) ;
rank: 199
score: 98.95522173713235
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) n ;
rank: 199
score: 98.882861328125
patch: ++ max CaMeL Eval += max CaMeL Eval ;
rank: 199
score: 98.81237182617187
patch: result = new Point CaMeL Value CaMeL Pair (
rank: 199
score: 98.74308776855469
patch: ++ * * ++ iter ; /
rank: 199
score: 98.68373801491477
patch: ++ iter ; if ++ iter ; ++ iter ;
rank: 199
score: 98.66329956054688
patch: else { for ; * * /
rank: 199
score: 98.65811360677084
patch: while ( ! current . is CaMeL Empty ( ) ) ++ iter ;
rank: 200
score: 99.06339304070724
patch: double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 200
score: 99.00188131893383
patch: double [ ] search CaMeL Direction = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 200
score: 98.95519438244048
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 200
score: 98.88261108398437
patch: ++ max CaMeL Eval + iter * iter ;
rank: 200
score: 98.8122089092548
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 200
score: 98.74260711669922
patch: ++ - 1 ; ++ iter ;
rank: 200
score: 98.66293334960938
patch: else { / * ; * /
rank: 200
score: 98.65796915690105
patch: current = Math . max ( iter , iter ) ;
rank: 201
score: 99.06316061580883
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 201
score: 99.00177323190789
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition $NUMBER$ ;
rank: 201
score: 98.95503504136029
patch: ++ iter ; max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 201
score: 98.8822021484375
patch: result [ iter ] = ++ max CaMeL Eval ;
rank: 201
score: 98.81206720525569
patch: iter = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 201
score: 98.74241807725694
patch: ++ iter + iter ; ++ iter ;
rank: 201
score: 98.68279474431819
patch: ++ iter ; ++ -- iter ; ++ iter ;
rank: 201
score: 98.66254340277777
patch: / * * * ++ iter * /
rank: 201
score: 98.65763716264205
patch: ++ iter ; if ( iter != 0 ) {
rank: 202
score: 99.06283804086539
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 202
score: 99.00140991210938
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 ) ;
rank: 202
score: 98.95443725585938
patch: current = Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 202
score: 98.8815030184659
patch: r [ max CaMeL Eval ] = Math . ;
rank: 202
score: 98.81094360351562
patch: expr = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 202
score: 98.74015808105469
patch: ++ 0 ; ++ iter ; ;
rank: 202
score: 98.68271891276042
patch: ++ iter ; ++ iter ; else /
rank: 202
score: 98.66230604383681
patch: else { ++ * ++ iter ; }
rank: 202
score: 98.6575927734375
patch: ++ iter ; max CaMeL Eval -- ;
rank: 203
score: 99.06089716372283
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = current ;
rank: 203
score: 99.00139617919922
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent ;
rank: 203
score: 98.95309930098684
patch: int max CaMeL Eval = this . compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 203
score: 98.88066948784723
patch: ++ max CaMeL Eval = iter * ;
rank: 203
score: 98.810791015625
patch: get = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 203
score: 98.73980712890625
patch: ++ iter ; int iter * ;
rank: 203
score: 98.68079291449652
patch: ++ iter ; ++ iter ; ; else
rank: 203
score: 98.662109375
patch: if ( ! iter . is CaMeL Empty ++ ) ++ iter ;
rank: 203
score: 98.6568270596591
patch: ++ iter ; while ( iter == n ) {
rank: 204
score: 99.06046549479167
patch: delta = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction . length ) ;
rank: 204
score: 98.95262799944196
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent ;
rank: 204
score: 98.88019353693181
patch: ++ max CaMeL Eval = Math . min ( ;
rank: 204
score: 98.81072998046875
patch: result += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 204
score: 98.68046739366319
patch: ++ iter ; iter / / / ;
rank: 204
score: 98.66151258680556
patch: else { if ++ iter ; } }
rank: 204
score: 98.65673828125
patch: if ( current == null || current . is CaMeL Empty ( ) ;
rank: 205
score: 99.05975341796875
patch: max CaMeL Eval += find CaMeL Upper CaMeL Bound ( point ) ;
rank: 205
score: 99.00118582589286
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . to CaMeL String ( ) ;
rank: 205
score: 98.87930908203126
patch: ++ max CaMeL Eval ; ; ++ iter ;
rank: 205
score: 98.81063138521634
patch: entry = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 205
score: 98.73929172092014
patch: ++ ++ * iter ; ++ iter ;
rank: 205
score: 98.68018188476563
patch: ++ iter ; ++ $STRING$ ; ++ iter ;
rank: 205
score: 98.6614990234375
patch: int iter = 0 ; while ;
rank: 205
score: 98.65603637695312
patch: ++ iter ; if ;
rank: 206
score: 99.05931396484375
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 206
score: 99.00523792613636
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . 0 ) ;
rank: 206
score: 98.87911376953124
patch: ++ max CaMeL Eval ++ ; ++ n ;
rank: 206
score: 98.81032017299107
patch: result = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 206
score: 98.73863983154297
patch: ++ value ; ++ iter ; ;
rank: 206
score: 98.67926025390625
patch: ++ ++ iter ; ++ start ;
rank: 206
score: 98.66121419270833
patch: else { / * * * / }
rank: 206
score: 98.65513305664062
patch: ++ n ; ++ n ; ++ n ;
rank: 207
score: 99.00493421052632
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point .
rank: 207
score: 99.00037977430556
patch: final double [ ] search CaMeL Direction = preconditioner . clone ( ) ;
rank: 207
score: 98.95188598632812
patch: if ( update CaMeL Formula != null ) {
rank: 207
score: 98.87896173650569
patch: ++ iter ; r [ max CaMeL Eval ] ;
rank: 207
score: 98.80973307291667
patch: Iterator max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 207
score: 98.73800998263889
patch: ++ iter ; * * ++ iter ;
rank: 207
score: 98.66119854266827
patch: if ( ! iter . is CaMeL Empty ( ) ; }
rank: 207
score: 98.65449793198529
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ , iter ) ;
rank: 208
score: 99.05813937717014
patch: max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 208
score: 98.999755859375
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . to CaMeL String ( ) ;
rank: 208
score: 98.95178833007813
patch: double steepest CaMeL Descent = preconditioner . get ( max CaMeL Eval ) ;
rank: 208
score: 98.87888590494792
patch: r [ max CaMeL Eval ++ ] = current . ;
rank: 208
score: 98.80886008522727
patch: tmp = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 208
score: 98.73795166015626
patch: ++ * ++ iter ; while ++ iter ;
rank: 208
score: 98.67838745117187
patch: ++ iter ; ++ iter ; iter -- ;
rank: 208
score: 98.66105651855469
patch: ++ iter ; } / * /
rank: 208
score: 98.65416370738636
patch: if ( current != null ) { ++ iter ;
rank: 209
score: 98.9996696920956
patch: Point CaMeL Value CaMeL Pair point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 209
score: 98.95155334472656
patch: final int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 209
score: 98.87751207853618
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter ;
rank: 209
score: 98.80758666992188
patch: folder = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 209
score: 98.67626953125
patch: ++ max ; ++ iter ;
rank: 209
score: 98.66075788225446
patch: if ( ! iter . is CaMeL Empty ( ) ) return ;
rank: 209
score: 98.65370008680556
patch: if ( iter == null ) continue ;
rank: 210
score: 99.05597601996527
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . ) ;
rank: 210
score: 98.99965533088235
patch: Point CaMeL Value CaMeL Pair current = current . get CaMeL Point ( 0 ) ;
rank: 210
score: 98.9509048461914
patch: max = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 210
score: 98.8773193359375
patch: ++ max CaMeL Eval = Math . max ( ;
rank: 210
score: 98.80730646306819
patch: public Point CaMeL Value CaMeL Pair current = null ;
rank: 210
score: 98.67550659179688
patch: ++ iter ; ++ start ; ;
rank: 210
score: 98.6605453491211
patch: else { / * * ; /
rank: 210
score: 98.65264214409723
patch: if ( iter == null ) break ;
rank: 211
score: 99.00298713235294
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 211
score: 98.95057169596355
patch: i = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 211
score: 98.87727864583333
patch: result = new Point CaMeL Value CaMeL Pair ( r ;
rank: 211
score: 98.80728149414062
patch: control = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 211
score: 98.73622436523438
patch: ++ iter ; ++ iter ; ++ * /
rank: 211
score: 98.65940856933594
patch: if ( ! iter . is CaMeL Empty ( ) ) . ++ iter ;
rank: 211
score: 98.65218353271484
patch: current = Math . max ( max CaMeL Eval , 0 . 0 ) ;
rank: 212
score: 99.05469811480978
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point ,
rank: 212
score: 99.00261124320652
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 212
score: 98.94970703125
patch: if ( update CaMeL Formula ( point , search CaMeL Direction ) ) {
rank: 212
score: 98.87701822916667
patch: ++ max CaMeL Eval ++ ; System . out . ; iter ++ ;
rank: 212
score: 98.67432512555804
patch: ++ Math ; ++ iter ;
rank: 212
score: 98.65920584542411
patch: if ( ! iter . is CaMeL Empty ++ this . ++ ;
rank: 212
score: 98.65214029947917
patch: if ( current == null ) continue ;
rank: 213
score: 99.05415562220982
patch: delta += compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 213
score: 99.00240384615384
patch: ++ max CaMeL Eval -= search CaMeL Direction [ iter ] ;
rank: 213
score: 98.94920043945312
patch: delta += r [ max CaMeL Eval ] ;
rank: 213
score: 98.87669154575893
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval ;
rank: 213
score: 98.80674743652344
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 213
score: 98.73531494140624
patch: ++ * ++ iter ; if ++ iter ;
rank: 213
score: 98.67347301136364
patch: ++ iter ; ++ iter ; ++ -- iter ;
rank: 213
score: 98.6590576171875
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . equals )
rank: 213
score: 98.65205601283482
patch: if ( ! current . is CaMeL Empty ( ) ) break ;
rank: 214
score: 99.00235788445724
patch: double [ ] steepest CaMeL Descent = preconditioner . get ( ) ;
rank: 214
score: 98.94892578125
patch: if ( update CaMeL Formula ( ) ) {
rank: 214
score: 98.87628173828125
patch: ++ max CaMeL Eval [ iter ] = ;
rank: 214
score: 98.80667550223214
patch: n = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 214
score: 98.734619140625
patch: i ++ ; ++ - iter ;
rank: 214
score: 98.67328559027777
patch: ++ iter ; ++ n ; iter ;
rank: 214
score: 98.65805053710938
patch: else { ++ * ++ iter ;
rank: 214
score: 98.65166766826923
patch: while ( ! current . is CaMeL Empty ( ; ) )
rank: 215
score: 99.05374145507812
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( ) ;
rank: 215
score: 99.00224609375
patch: return ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) ; }
rank: 215
score: 98.87593587239583
patch: ++ max CaMeL Eval = Math . min ( iter ;
rank: 215
score: 98.80653889973958
patch: ws = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 215
score: 98.73452758789062
patch: ++ iter ; ++ value ; ;
rank: 215
score: 98.67266167534723
patch: iter iter if ++ ; ++ iter ;
rank: 215
score: 98.65706380208333
patch: if ( iter == 0 ; / ;
rank: 215
score: 98.65129852294922
patch: if ( iter != 0 ) {
rank: 216
score: 98.94886690027573
patch: return new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ; }
rank: 216
score: 98.87535858154297
patch: ++ iter ; * / * /
rank: 216
score: 98.8061767578125
patch: result = new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 216
score: 98.73421902126736
patch: ++ iter ; * ; ++ iter ;
rank: 216
score: 98.67085484095982
patch: ++ iter ; iter -- ;
rank: 216
score: 98.65611049107143
patch: if ( ! iter . is CaMeL Empty ( ; - 1 ;
rank: 216
score: 98.65087890625
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) . ++ ;
rank: 217
score: 99.05313110351562
patch: Point CaMeL Value CaMeL Pair = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 217
score: 98.99740600585938
patch: long [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 217
score: 98.94860229492187
patch: double steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 217
score: 98.87300832648026
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 217
score: 98.80580491286058
patch: result = new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 217
score: 98.73394775390625
patch: ++ iter ; while ++ - iter ;
rank: 217
score: 98.66992950439453
patch: ++ 0 ; ; ++ iter ;
rank: 217
score: 98.65584019252232
patch: if ( [ 0 ] ;
rank: 217
score: 98.65062604631696
patch: return new Point CaMeL Value CaMeL Pair ( current , iter ) ;
rank: 218
score: 99.05207824707031
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 218
score: 98.99732555042614
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( 0 ) ;
rank: 218
score: 98.94860026041667
patch: ++ max CaMeL Eval ; compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 218
score: 98.87180582682292
patch: ++ max CaMeL Eval = Math . max ( iter ;
rank: 218
score: 98.80576869419643
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 0 ) ;
rank: 218
score: 98.73382568359375
patch: ++ iter ; return iter ;
rank: 218
score: 98.66899108886719
patch: ++ < iter ; / / /
rank: 218
score: 98.6556396484375
patch: else { throw new Runtime CaMeL Exception ( $STRING$ ; }
rank: 218
score: 98.64970397949219
patch: ++ iter ; while ( ! current . is CaMeL Empty ( ) ) {
rank: 219
score: 99.05202907986111
patch: current = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction , r ) ;
rank: 219
score: 98.99712775735294
patch: double [ ] steepest CaMeL Descent = preconditioner . start ;
rank: 219
score: 98.948583984375
patch: iter = preconditioner . precondition ( point , r ) ;
rank: 219
score: 98.87171088324652
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 219
score: 98.8051513671875
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair >
rank: 219
score: 98.73366292317708
patch: ++ iter ; ++ - iter ; ;
rank: 219
score: 98.66693878173828
patch: ++ max ++ ; ++ iter ;
rank: 219
score: 98.6554463704427
patch: else { iter += 0 . 0 ; break ; }
rank: 219
score: 98.64910016741071
patch: if ( ! current . is CaMeL Empty ( ; ) ) {
rank: 220
score: 99.05192057291667
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 220
score: 99.00099534254808
patch: ++ max CaMeL Eval -= search CaMeL Direction [ 1 ] ;
rank: 220
score: 98.87059529622395
patch: ++ max CaMeL Eval / max CaMeL Eval = iter ;
rank: 220
score: 98.80491333007812
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) ) {
rank: 220
score: 98.73354085286458
patch: ++ iter ; iter ; * / /
rank: 220
score: 98.66640799386161
patch: ++ $STRING$ ; ++ iter ;
rank: 220
score: 98.65507289341518
patch: else { ++ length ; }
rank: 220
score: 98.6485107421875
patch: while ( max CaMeL Eval < iter ) {
rank: 221
score: 99.05064697265625
patch: steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 221
score: 99.00089263916016
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 221
score: 98.99663985402961
patch: double [ ] steepest CaMeL Descent = preconditioner . length ( ) ;
rank: 221
score: 98.94724684495192
patch: current = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 221
score: 98.87020874023438
patch: ++ iter ; if ( max CaMeL Eval > 0 )
rank: 221
score: 98.80469689002403
patch: Iterator < Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair >
rank: 221
score: 98.73340606689453
patch: ++ * ++ iter ; break ;
rank: 221
score: 98.66605631510417
patch: ++ iter ; iter if iter ++ ;
rank: 221
score: 98.65273030598958
patch: Set iter = iter . iterator ++ ;
rank: 221
score: 98.64830186631944
patch: ++ iter ; System . out . ;
rank: 222
score: 99.05027262369792
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( {
rank: 222
score: 99.0007657137784
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 222
score: 98.99652099609375
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . read ( ) ;
rank: 222
score: 98.94723074776786
patch: double [ ] steepest CaMeL Descent = max CaMeL Eval ;
rank: 222
score: 98.86988830566406
patch: ++ max CaMeL Eval = get ;
rank: 222
score: 98.80467987060547
patch: res = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 222
score: 98.73339165581598
patch: ++ value ; ++ iter ; iter ;
rank: 222
score: 98.665771484375
patch: ++ ++ n ; ++ iter ;
rank: 222
score: 98.64810943603516
patch: ++ iter ; if ( ! iter . is CaMeL Na CaMeL N ( ;
rank: 223
score: 99.049072265625
patch: point = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 223
score: 98.99636661305146
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ;
rank: 223
score: 98.94659102590461
patch: ++ max CaMeL Eval ; max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 223
score: 98.86922200520833
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 223
score: 98.80453927176339
patch: int ++ iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 223
score: 98.73260498046875
patch: ++ iter ; try + iter ;
rank: 223
score: 98.66475423177083
patch: ++ iter ; ++ max ; iter ;
rank: 223
score: 98.65157063802083
patch: if ( ! iter . is CaMeL Empty ++ this ;
rank: 223
score: 98.64789177389706
patch: Iterator < Point CaMeL Value CaMeL Pair > iter = iter . iterator ( ) ;
rank: 224
score: 99.0003153483073
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; ;
rank: 224
score: 98.99610484730114
patch: int [ ] steepest CaMeL Descent = preconditioner . clone ( point , r ) ;
rank: 224
score: 98.94607107979911
patch: if ( steepest CaMeL Descent . length ( ) ) {
rank: 224
score: 98.86912184495192
patch: ++ max CaMeL Eval * iter ; ++ max CaMeL Eval ;
rank: 224
score: 98.80426025390625
patch: points = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 224
score: 98.66314697265625
patch: ++ iter ; ++ iter ; ++ false ;
rank: 224
score: 98.65084075927734
patch: / * * / ++ * /
rank: 224
score: 98.64755249023438
patch: if ( iter >= n ) {
rank: 225
score: 99.04896455652573
patch: Point CaMeL Value CaMeL Pair max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 225
score: 98.99961635044643
patch: final double [ ] steepest CaMeL Descent = preconditioner . . clone ( ) ;
rank: 225
score: 98.99541625976562
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition ;
rank: 225
score: 98.94565054086539
patch: double iter = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 225
score: 98.8690185546875
patch: ++ iter ; r [ max CaMeL Eval ] = iter ;
rank: 225
score: 98.80399867466518
patch: rs = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 225
score: 98.73219807942708
patch: ++ iter ; ++ iter ; ++ * ++ iter ;
rank: 225
score: 98.66304016113281
patch: ++ iter ; ++ max ++ ;
rank: 225
score: 98.65047454833984
patch: else { if ++ 0 ; }
rank: 225
score: 98.64742279052734
patch: if ( current != null && current . is CaMeL Empty ( ) ) {
rank: 226
score: 99.04893909801136
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( this , r ) ;
rank: 226
score: 98.99933825041118
patch: Point CaMeL Value CaMeL Pair current = current ; Point CaMeL Value CaMeL Pair current = null ;
rank: 226
score: 98.99536810980902
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner ;
rank: 226
score: 98.94554307725694
patch: while ( ! update CaMeL Formula ) {
rank: 226
score: 98.86859130859375
patch: ++ iter ; * /
rank: 226
score: 98.80392252604166
patch: result = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 226
score: 98.73194715711806
patch: ++ iter ; ++ / * / /
rank: 226
score: 98.66106414794922
patch: ++ iter ; ++ n ; }
rank: 226
score: 98.64965057373047
patch: / * * ++ * / /
rank: 226
score: 98.64735107421875
patch: ++ iter ; while ( iter == n )
rank: 227
score: 98.99883742559524
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 227
score: 98.86802673339844
patch: ++ max CaMeL Eval = 0 ;
rank: 227
score: 98.80377197265625
patch: return new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 227
score: 98.7313720703125
patch: ++ * ++ iter ; ++ - iter ;
rank: 227
score: 98.66073608398438
patch: ++ iter ; iter if iter = iter ;
rank: 227
score: 98.64901733398438
patch: / * * * ; / /
rank: 227
score: 98.64707946777344
patch: ++ iter ; if ( ! ;
rank: 228
score: 98.94525615985577
patch: double current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 228
score: 98.86796061197917
patch: ++ iter ; if ( max CaMeL Eval > 0 ;
rank: 228
score: 98.8032735188802
patch: col = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 228
score: 98.73104858398438
patch: this . ++ iter ; ++ iter ; ++ iter ;
rank: 228
score: 98.660400390625
patch: ++ iter ; ++ iter ; iter / /
rank: 228
score: 98.64858774038461
patch: if ( ! iter . is CaMeL Empty ++ ( ) ;
rank: 229
score: 98.99862331814236
patch: Line CaMeL Search CaMeL Function current = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 229
score: 98.99397786458333
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( 0 ) ;
rank: 229
score: 98.86691623263889
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 229
score: 98.80231584821429
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , r ) ;
rank: 229
score: 98.73078155517578
patch: iter { ++ ; ++ iter ;
rank: 229
score: 98.65989685058594
patch: ++ iter ; ++ start ; }
rank: 229
score: 98.64847412109376
patch: if ( iter == 0 ; return false ;
rank: 229
score: 98.64593098958333
patch: ++ n ; if ( ! iter . is CaMeL Empty ( ) )
rank: 230
score: 98.9982666015625
patch: ++ max CaMeL Eval = preconditioner . precondition ( ) ;
rank: 230
score: 98.94459635416666
patch: ++ max CaMeL Eval ; Point CaMeL Value CaMeL Pair current = null ;
rank: 230
score: 98.80228097098214
patch: res = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 230
score: 98.73008219401042
patch: ++ * - iter ; ++ iter ;
rank: 230
score: 98.659375
patch: ++ iter ; ++ iter ; ; / /
rank: 230
score: 98.64833286830357
patch: if ( iter == null ;
rank: 230
score: 98.64537556966145
patch: ++ iter ; Thread . current CaMeL Thread ( ) ;
rank: 231
score: 98.99335327148438
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) preconditioner ;
rank: 231
score: 98.94446910511364
patch: double steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval , r ) ;
rank: 231
score: 98.8661376953125
patch: ++ max CaMeL Eval ; * / * /
rank: 231
score: 98.80170147235577
patch: cur = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 231
score: 98.73006184895833
patch: ++ ++ iter ; ++ - iter ;
rank: 231
score: 98.65862482244319
patch: } ++ iter ; ++ iter ; ++ iter ;
rank: 231
score: 98.64830017089844
patch: / * ; if ++ iter ;
rank: 231
score: 98.64515991210938
patch: if ( max CaMeL Eval != 0 ) {
rank: 232
score: 99.04541015625
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . preconditioner . precondition (
rank: 232
score: 98.99791044347427
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 232
score: 98.94354802911931
patch: double [ ] steepest CaMeL Descent = preconditioner . get ( point , r ) ;
rank: 232
score: 98.8661358173077
patch: result = new Point CaMeL Value CaMeL Pair ( r ) ;
rank: 232
score: 98.80106898716518
patch: table = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 232
score: 98.72966172960069
patch: ++ iter ; ++ * + iter ;
rank: 232
score: 98.65711558948864
patch: ++ iter ; ++ iter ; else return iter ;
rank: 232
score: 98.64499337332589
patch: if ( ! current . is CaMeL Empty ( ) ) continue ;
rank: 233
score: 99.04531028053977
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 233
score: 98.94353376116071
patch: if ( steepest CaMeL Descent . length == 0 ) {
rank: 233
score: 98.866064453125
patch: ++ max CaMeL Eval = iter - max ;
rank: 233
score: 98.80084228515625
patch: bounds = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 233
score: 98.72944946289063
patch: ++ * / ++ iter ; ++ iter ;
rank: 233
score: 98.65711059570313
patch: ++ this ; ++ iter ; ++ iter ;
rank: 233
score: 98.64801025390625
patch: if ( ! iter . is CaMeL Empty ++ 0 )
rank: 233
score: 98.64484719669117
patch: ++ iter ; Thread . current CaMeL Thread ( ) . current CaMeL Thread ( ;
rank: 234
score: 98.99296300551471
patch: double [ ] steepest CaMeL Descent = preconditioner . false ;
rank: 234
score: 98.94325015419408
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 234
score: 98.80052693684895
patch: stack = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 234
score: 98.728515625
patch: ++ iter ; int iter ;
rank: 234
score: 98.65672471788194
patch: ++ iter ; ++ iter ; * ;
rank: 234
score: 98.64716339111328
patch: / * * / * / /
rank: 234
score: 98.64463806152344
patch: ++ iter ; Thread . current CaMeL Thread ( ) . current CaMeL Thread ;
rank: 235
score: 99.04475402832031
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . ) ;
rank: 235
score: 98.9925537109375
patch: final double [ ] steepest CaMeL Descent = preconditioner . length ( ) ;
rank: 235
score: 98.94308035714286
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 235
score: 98.86563270970395
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) current . clone ( ) ;
rank: 235
score: 98.80032113882211
patch: int delta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 235
score: 98.64635009765625
patch: if ( iter > 0 ; return null ;
rank: 235
score: 98.64446466619319
patch: if ( ! iter . contains ( current ) )
rank: 236
score: 98.99722290039062
patch: delta += r [ 0 ] ;
rank: 236
score: 98.94265407986111
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 236
score: 98.86550467354911
patch: r [ iter ] = new Point CaMeL Value CaMeL Pair ( ;
rank: 236
score: 98.72643280029297
patch: ++ iter ; iter + 0 ;
rank: 236
score: 98.65587768554687
patch: ++ iter ; iter / * ++ iter ;
rank: 236
score: 98.64630596454327
patch: if ( ! iter . equals ( iter . length ) ;
rank: 236
score: 98.64381408691406
patch: if ( ! iter . is CaMeL Empty ( ) ) { continue ; }
rank: 237
score: 98.99717407226562
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( )
rank: 237
score: 98.99193274456522
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , true ) ;
rank: 237
score: 98.86490885416667
patch: r [ max CaMeL Eval ] = Math . max ;
rank: 237
score: 98.7998798076923
patch: ret = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 237
score: 98.72634887695312
patch: ++ iter ; ++ iter ; ++ * * iter ;
rank: 237
score: 98.65454779730902
patch: ++ iter ; ++ ++ ++ iter ;
rank: 237
score: 98.64627075195312
patch: } if ( iter == 0 ;
rank: 237
score: 98.643310546875
patch: if ( current == null || current . is CaMeL Empty ( ) )
rank: 238
score: 99.04393005371094
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . ) ;
rank: 238
score: 98.99696416440217
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( steepest CaMeL Descent . clone ( ) ) ;
rank: 238
score: 98.9421875
patch: if ( ( update CaMeL Formula ) ) {
rank: 238
score: 98.86465018136161
patch: iter = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 238
score: 98.79890950520833
patch: iterator = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 238
score: 98.65431213378906
patch: / iter ++ ; ++ iter ;
rank: 238
score: 98.64613172743056
patch: else { if ( iter == 0 ;
rank: 238
score: 98.64320475260416
patch: ++ iter ; if ( current . is CaMeL Empty ( ) ) {
rank: 239
score: 99.04383609169408
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 239
score: 98.99693231997283
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner . clone ( ) ;
rank: 239
score: 98.99133911132813
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( true ) ;
rank: 239
score: 98.94183819110577
patch: Iterator iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 239
score: 98.86448160807292
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( ) ;
rank: 239
score: 98.79884033203125
patch: int max CaMeL Eval = point . length ;
rank: 239
score: 98.72615814208984
patch: else * ++ iter ; break ;
rank: 239
score: 98.65379333496094
patch: ++ iter ; ++ iter ; start
rank: 239
score: 98.64596557617188
patch: if ( ! iter . is CaMeL Empty ++ ++ ;
rank: 239
score: 98.64316969651442
patch: temp = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 240
score: 99.0436767578125
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( $NUMBER$ ) ;
rank: 240
score: 98.99630301339286
patch: final double [ ] steepest CaMeL Descent = preconditioner . get ( point ) ;
rank: 240
score: 98.99126519097223
patch: final double steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 240
score: 98.86376014122597
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval ;
rank: 240
score: 98.79839797247024
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 240
score: 98.6537353515625
patch: ++ iter ; ++ iter ; iter ; }
rank: 240
score: 98.64583587646484
patch: else { / * * * ;
rank: 241
score: 99.043212890625
patch: int max = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 241
score: 98.99554443359375
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 241
score: 98.9912109375
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . length ;
rank: 241
score: 98.94112396240234
patch: final double search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 241
score: 98.86333673650569
patch: r [ max CaMeL Eval ] = ++ iter ;
rank: 241
score: 98.79838053385417
patch: change = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 241
score: 98.65337371826172
patch: ++ iter ; iter ; ++ ;
rank: 241
score: 98.64507184709821
patch: else { return null ; }
rank: 242
score: 99.04317220052083
patch: current = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 242
score: 98.990625
patch: double [ ] steepest CaMeL Descent = preconditioner .
rank: 242
score: 98.94099934895833
patch: final double steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 242
score: 98.86317795973558
patch: iter = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 242
score: 98.79832967122395
patch: path = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 242
score: 98.653369140625
patch: ++ iter ; ++ iter ; ++ $NUMBER$ ;
rank: 242
score: 98.64476776123047
patch: if ( ! iter . is CaMeL Empty ++ this . iter . contains ;
rank: 242
score: 98.64208984375
patch: Iterator iter = ++ iter . iterator ( ) ;
rank: 243
score: 99.04252624511719
patch: double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( ) ;
rank: 243
score: 98.93869253305289
patch: return steepest CaMeL Descent . clone ( ) ; }
rank: 243
score: 98.79814910888672
patch: int iter = point . length ;
rank: 243
score: 98.72405327690973
patch: ++ iter ; ++ 1 * iter ;
rank: 243
score: 98.64342498779297
patch: } if ++ [ 1 ] ;
rank: 243
score: 98.64169650607639
patch: if ( iter == 0 ) continue ;
rank: 244
score: 98.99517822265625
patch: int [ ] steepest CaMeL Descent = null ;
rank: 244
score: 98.99005126953125
patch: delta += checker . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 244
score: 98.93764361213235
patch: if ( Point CaMeL Value CaMeL Pair . update CaMeL Formula ( point ) ) {
rank: 244
score: 98.86066228693181
patch: r [ max CaMeL Eval ++ ] = ; }
rank: 244
score: 98.79808553059895
patch: rv = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 244
score: 98.72331237792969
patch: ++ * * ++ ++ iter ;
rank: 244
score: 98.65147705078125
patch: ++ iter ; ++ iter ; break ; ;
rank: 244
score: 98.64290364583333
patch: else { if ( iter > 0 )
rank: 244
score: 98.64168003627232
patch: ++ iter ; if ( current . is CaMeL Empty ( ) )
rank: 245
score: 99.04166957310268
patch: delta += find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 245
score: 98.9949367357337
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( this ) ;
rank: 245
score: 98.98992365056819
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition ( ) ;
rank: 245
score: 98.93644714355469
patch: i = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 245
score: 98.85909423828124
patch: ++ max CaMeL Eval ; if ( iter ;
rank: 245
score: 98.79807535807292
patch: dirty = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 245
score: 98.72222222222223
patch: ++ ++ iter ; if ++ iter ;
rank: 245
score: 98.65068223741319
patch: iter ; ++ iter ; -- iter ;
rank: 245
score: 98.64271545410156
patch: / * * ++ iter ; /
rank: 245
score: 98.64143880208333
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ;
rank: 246
score: 99.04156024639423
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 246
score: 98.99479594983552
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . precondition ( point ) ;
rank: 246
score: 98.98903294613487
patch: double [ ] steepest CaMeL Descent = preconditioner . ( point ) ;
rank: 246
score: 98.85884602864583
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) ++ max CaMeL Eval ;
rank: 246
score: 98.79751352163461
patch: table = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 246
score: 98.7221908569336
patch: ++ iter ; ++ case 1 ;
rank: 246
score: 98.64187622070312
patch: else { ++ 1 ; } }
rank: 247
score: 99.04143415178571
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ,
rank: 247
score: 98.9888427734375
patch: final double [ ] steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 247
score: 98.93614196777344
patch: if ( iter == null ) {
rank: 247
score: 98.85872192382813
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter ) ;
rank: 247
score: 98.79680524553571
patch: temp = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 247
score: 98.72216796875
patch: ++ iter ; else * * ;
rank: 247
score: 98.64185333251953
patch: / * * / ++ iter /
rank: 247
score: 98.6403076171875
patch: ++ iter ; while ( ! current . is CaMeL Empty ( ) ;
rank: 248
score: 99.04125037560097
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 248
score: 98.98882501775569
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( ) ;
rank: 248
score: 98.93581255744485
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) checker ;
rank: 248
score: 98.85868566176471
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , 0 ) ;
rank: 248
score: 98.721435546875
patch: ++ iter ; try ; if ++ iter ;
rank: 248
score: 98.64859444754464
patch: ++ iter ; ++ list ;
rank: 248
score: 98.64173235212054
patch: if ( ! iter . is CaMeL Empty ( ) ; / ;
rank: 248
score: 98.64029693603516
patch: ++ iter ; Thread . current CaMeL Thread ( ) . notify CaMeL All ;
rank: 249
score: 99.04095458984375
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , current ) ;
rank: 249
score: 98.98881979549633
patch: int [ ] steepest CaMeL Descent = preconditioner . $STRING$ ;
rank: 249
score: 98.85835096571181
patch: r [ iter ] = ++ iter ;
rank: 249
score: 98.79652913411458
patch: li = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 249
score: 98.72109646267361
patch: ++ 1 + iter ; ++ iter ;
rank: 249
score: 98.64856635199652
patch: ++ iter ; ; iter if ++ ;
rank: 249
score: 98.64169311523438
patch: ++ * * * ++ iter ;
rank: 249
score: 98.64025115966797
patch: ++ n ; if ( ! iter . is CaMeL Empty ( ) ) {
rank: 250
score: 98.98881199048913
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( ) ;
rank: 250
score: 98.9354607077206
patch: double steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 250
score: 98.8581771850586
patch: ++ max CaMeL Eval >= iter ;
rank: 250
score: 98.79590782752403
patch: old = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 250
score: 98.72108043323864
patch: ++ iter ; ++ iter ; int iter ++ ;
rank: 250
score: 98.64745221819196
patch: ++ list ; ++ iter ;
rank: 250
score: 98.6405498798077
patch: if ( ! iter . is CaMeL Empty ( ; break ;
rank: 250
score: 98.64008037860577
patch: current = Math . max ( iter , current . ++ ;
rank: 251
score: 98.99404471261161
patch: if ( steepest CaMeL Descent . precondition ( ) ) {
rank: 251
score: 98.98828125
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , false ) ;
rank: 251
score: 98.85814412434895
patch: ++ max CaMeL Eval * max CaMeL Eval ++ ; }
rank: 251
score: 98.72098541259766
patch: ++ iter ; ++ - $STRING$ ;
rank: 251
score: 98.6470947265625
patch: ++ iter ; ; ++ ++ iter ;
rank: 251
score: 98.63999430338542
patch: if ( ! iter . is CaMeL Empty ++ ; }
rank: 251
score: 98.63960484095982
patch: if ( ! iter . compare CaMeL To ( iter ) ) {
rank: 252
score: 99.03932883522727
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner ;
rank: 252
score: 98.9880901834239
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , current ) ;
rank: 252
score: 98.85805053710938
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter , ;
rank: 252
score: 98.7952651977539
patch: temp = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 252
score: 98.71973334418402
patch: ++ iter ; ++ 1 ++ iter ;
rank: 252
score: 98.64640808105469
patch: ++ iter ; ++ start ; else
rank: 252
score: 98.63954162597656
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ; ++ iter )
rank: 252
score: 98.63901589133523
patch: Set < ? > iter = iter . length ;
rank: 253
score: 99.03916529605263
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 253
score: 98.98806527944711
patch: final double [ ] steepest CaMeL Descent = true ;
rank: 253
score: 98.93484700520834
patch: current = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 253
score: 98.85799153645833
patch: ++ max CaMeL Eval ++ ; System . out . ; ++ max CaMeL Eval ++ ;
rank: 253
score: 98.79522705078125
patch: return new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 253
score: 98.638916015625
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . start )
rank: 253
score: 98.638818359375
patch: if ( current != null && current . ;
rank: 254
score: 99.0387951078869
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition . clone ( ) ;
rank: 254
score: 98.99369731702302
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ; ;
rank: 254
score: 98.93467203776042
patch: if ( checker . converged ( iter ,
rank: 254
score: 98.85723876953125
patch: ++ max CaMeL Eval ++ ; if ;
rank: 254
score: 98.795166015625
patch: n = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 254
score: 98.71919759114583
patch: ++ iter ; ++ * ; iter ;
rank: 254
score: 98.64502716064453
patch: iter ++ ; ++ iter ; }
rank: 254
score: 98.63877650669643
patch: else { / * * /
rank: 254
score: 98.63801125919117
patch: ++ iter ; Thread . current CaMeL Thread ( ) . interrupt ( ) ; }
rank: 255
score: 98.98765345982143
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . iterator ( ) ;
rank: 255
score: 98.9343197471217
patch: delta += steepest CaMeL Descent . clone ( ) ; steepest CaMeL Descent .
rank: 255
score: 98.8569107055664
patch: ++ max CaMeL Eval / $NUMBER$ ;
rank: 255
score: 98.7948467548077
patch: y = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 255
score: 98.71875
patch: / * ++ iter ; * /
rank: 255
score: 98.64464111328125
patch: ++ iter ; ++ $NUMBER$ ; ++ iter ;
rank: 255
score: 98.63864135742188
patch: ++ [ ] iter ; if ;
rank: 255
score: 98.63793227251838
patch: ++ iter ; if ( ! iter . is CaMeL Na CaMeL N ( ) ;
rank: 256
score: 99.03853567023026
patch: boolean [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 256
score: 98.99279106987848
patch: int [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( ) ;
rank: 256
score: 98.93355712890624
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 256
score: 98.85575939360119
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 256
score: 98.79460005326705
patch: [ ] steepest CaMeL Descent = 0 ;
rank: 256
score: 98.643017578125
patch: ++ true ; ++ iter ; ++ iter ;
rank: 256
score: 98.63822174072266
patch: if ( ! iter . is CaMeL Empty ( ) ; return iter ; }
rank: 256
score: 98.63765869140624
patch: ++ iter ; if ( current == null )
rank: 257
score: 98.98713953354779
patch: double [ ] steepest CaMeL Descent = preconditioner . ) ;
rank: 257
score: 98.85541449652777
patch: ++ max CaMeL Eval ++ ; * /
rank: 257
score: 98.79419962565105
patch: e = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 257
score: 98.71818542480469
patch: ++ iter ; ++ 0 ; ;
rank: 257
score: 98.63993530273437
patch: ++ iter ; ++ min ; ++ iter ;
rank: 257
score: 98.63820578835227
patch: throw new Runtime CaMeL Exception ( $STRING$ + 1 ;
rank: 258
score: 99.03828510485198
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ,
rank: 258
score: 98.9917325106534
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; {
rank: 258
score: 98.987109375
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . close ( ) ;
rank: 258
score: 98.93305121527777
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , max CaMeL Eval ) ;
rank: 258
score: 98.85509314903847
patch: ++ max CaMeL Eval = iter * ++ max CaMeL Eval ;
rank: 258
score: 98.79400275735294
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 258
score: 98.71809217664931
patch: ++ ++ - iter ; ++ iter ;
rank: 258
score: 98.63958740234375
patch: ++ ; ++ iter ;
rank: 258
score: 98.63786485460069
patch: else { ++ 0 ; break ; }
rank: 258
score: 98.63694254557292
patch: iter = iter . iterator ( ) ;
rank: 259
score: 99.03821411132813
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ) ;
rank: 259
score: 98.93253950639205
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , null ) ;
rank: 259
score: 98.8540771484375
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 259
score: 98.79374186197917
patch: num = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 259
score: 98.7171859741211
patch: ++ iter ; ++ < iter ;
rank: 259
score: 98.6392489346591
patch: ++ iter ; ++ iter ; else if iter ;
rank: 259
score: 98.63774108886719
patch: else { * * * / /
rank: 260
score: 99.03789924172794
patch: ++ max CaMeL Eval ; current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 260
score: 98.9915283203125
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ; ;
rank: 260
score: 98.98622759650735
patch: double [ ] steepest CaMeL Descent = preconditioner . class ;
rank: 260
score: 98.85336538461539
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval = iter ;
rank: 260
score: 98.7935321514423
patch: Object point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 260
score: 98.71578640407986
patch: ++ ++ ++ iter ; ++ iter ;
rank: 260
score: 98.63771057128906
patch: if ( ! iter . is CaMeL Empty ( ) ) return null ; }
rank: 260
score: 98.63585553850446
patch: int iter = current . last CaMeL Index CaMeL Of ( ) ;
rank: 261
score: 98.99144490559895
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . search CaMeL Direction ) ;
rank: 261
score: 98.9855724516369
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( point ) ;
rank: 261
score: 98.85330200195312
patch: ++ max CaMeL Eval [ iter ] = current . ;
rank: 261
score: 98.79313151041667
patch: false = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 261
score: 98.71470642089844
patch: ++ iter ; iter ; / ;
rank: 261
score: 98.63854302300348
patch: ++ iter ; ++ iter ; else else
rank: 261
score: 98.63552856445312
patch: if ( ! iter . is CaMeL Empty ; ) {
rank: 262
score: 98.99061075846355
patch: final double [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound ( ) ;
rank: 262
score: 98.98521021792763
patch: double [ ] steepest CaMeL Descent = preconditioner . random ( ) ;
rank: 262
score: 98.93183450137867
patch: double search CaMeL Direction = steepest CaMeL Descent . clone ( iter ) ;
rank: 262
score: 98.85251193576389
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( ) ;
rank: 262
score: 98.79287484975961
patch: return compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 262
score: 98.7141342163086
patch: i * ++ ; ++ 1 ;
rank: 262
score: 98.63843883167614
patch: ++ iter ; ++ iter ; if iter -- ;
rank: 262
score: 98.63699679904514
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . ++ )
rank: 262
score: 98.6347427368164
patch: if ( iter != null && iter . is CaMeL Empty ( ) ) {
rank: 263
score: 99.0372673483456
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 263
score: 98.9900390625
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 263
score: 98.98515239514802
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = steepest CaMeL Descent ;
rank: 263
score: 98.85244140625
patch: ++ max CaMeL Eval >= Math . max ( max CaMeL Eval , ;
rank: 263
score: 98.7921612079327
patch: temp = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 263
score: 98.71391296386719
patch: ++ iter ; ++ - out ;
rank: 263
score: 98.63692801339286
patch: if ( ! iter . is CaMeL Empty ( ) ; continue ;
rank: 263
score: 98.63461642795139
patch: ++ iter ; current = ++ iter ;
rank: 264
score: 98.98995168585526
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( point ) ;
rank: 264
score: 98.98499820106908
patch: double [ ] steepest CaMeL Descent = preconditioner . current ( ) ;
rank: 264
score: 98.85232979910714
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval < ;
rank: 264
score: 98.79184977213542
patch: int iter = 0 ;
rank: 264
score: 98.71372680664062
patch: ++ iter ; ++ - * ++ iter ;
rank: 264
score: 98.63811700994319
patch: ++ iter ; else ++ iter ; ++ iter ;
rank: 264
score: 98.63691711425781
patch: / * * * * * ;
rank: 264
score: 98.6345723470052
patch: while ( ! current . equals ( current ) ) {
rank: 265
score: 98.9312808388158
patch: double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 265
score: 98.85227457682292
patch: ++ max CaMeL Eval -- ; System . out . ;
rank: 265
score: 98.7915751139323
patch: dest = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 265
score: 98.71307373046875
patch: j ; ++ ; ++ iter ;
rank: 265
score: 98.63788396661931
patch: ++ iter ; ++ iter ; else / / /
rank: 265
score: 98.63609095982143
patch: if ( ! iter . is CaMeL Empty ++ this . ++ )
rank: 265
score: 98.63456217447917
patch: if ( current == null ) break ;
rank: 266
score: 99.03508966619319
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( search CaMeL Direction ) ;
rank: 266
score: 98.93107604980469
patch: i = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 266
score: 98.85163116455078
patch: ++ max CaMeL Eval >= Math . max ( max CaMeL Eval , iter ;
rank: 266
score: 98.79146902901786
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( search CaMeL Direction ) ;
rank: 266
score: 98.71255154079861
patch: ++ ++ iter ; ++ iter ; ;
rank: 266
score: 98.63723415798611
patch: else ; ++ iter ; ++ iter ;
rank: 266
score: 98.63604736328125
patch: / * * /
rank: 266
score: 98.63287353515625
patch: return new Point CaMeL Value CaMeL Pair ( ;
rank: 267
score: 98.98958547491776
patch: long [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 267
score: 98.93091430664063
patch: double search CaMeL Direction = steepest CaMeL Descent . clone ( ) . clone ( ) ;
rank: 267
score: 98.85133272058823
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r ;
rank: 267
score: 98.63602447509766
patch: else { / * ++ iter ;
rank: 267
score: 98.63157653808594
patch: if ( iter != current ) {
rank: 268
score: 98.98935953776042
patch: double [ ] steepest CaMeL Descent = preconditioner . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 268
score: 98.9833984375
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . read ( point ) ;
rank: 268
score: 98.9300028483073
patch: if ( search CaMeL Direction . length < n ) {
rank: 268
score: 98.851318359375
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) ++ iter ;
rank: 268
score: 98.79024251302083
patch: ts = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 268
score: 98.71048990885417
patch: ++ iter ; ++ / * iter ;
rank: 268
score: 98.63665216619319
patch: ++ iter ; ++ iter ; else = iter ;
rank: 268
score: 98.634912109375
patch: if ( ! iter . is CaMeL Empty ( ) ) break ; }
rank: 268
score: 98.63137381417411
patch: if ( ! iter . is CaMeL Empty ; ++ iter ) {
rank: 269
score: 99.034765625
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( false ) ;
rank: 269
score: 98.98921712239583
patch: double [ ] steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( ) ;
rank: 269
score: 98.92964680989583
patch: current = ( Point CaMeL Value CaMeL Pair ) current ;
rank: 269
score: 98.85118611653645
patch: ++ max CaMeL Eval % max CaMeL Eval ++ ; ;
rank: 269
score: 98.78983931107955
patch: = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 269
score: 98.70970153808594
patch: ++ * * / ++ iter ;
rank: 269
score: 98.63655853271484
patch: ++ < 1 ; ++ iter ;
rank: 269
score: 98.63443697415866
patch: if ( ! iter . is CaMeL Empty ++ ) break ;
rank: 269
score: 98.63118743896484
patch: ++ iter ; if ( ! iter . compare CaMeL To ( current ) ;
rank: 270
score: 98.98895554315476
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 , initial CaMeL Step ) ;
rank: 270
score: 98.92839050292969
patch: if ( point . length ( ) < search CaMeL Direction . length ) {
rank: 270
score: 98.85106404622395
patch: r [ max CaMeL Eval ] = Math . min ;
rank: 270
score: 98.789306640625
patch: d = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 270
score: 98.70907931857639
patch: else * ++ iter ; while iter ;
rank: 270
score: 98.63493208451705
patch: ++ iter ; ++ iter ; if iter / /
rank: 270
score: 98.63422393798828
patch: / * ++ * * / /
rank: 270
score: 98.63088809742646
patch: ++ iter ; if ( ! iter . is CaMeL Na CaMeL N ( ) )
rank: 271
score: 99.03328763521634
patch: point = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 271
score: 98.98856201171876
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 271
score: 98.98216488486842
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . get ( point ) ;
rank: 271
score: 98.85106065538194
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) this . iter . ;
rank: 271
score: 98.78902493990384
patch: result = compute CaMeL Objective CaMeL Gradient ( point ) ; }
rank: 271
score: 98.70841471354167
patch: ++ iter ; else iter * ++ ;
rank: 271
score: 98.63422309027777
patch: / * * * * ++ * /
rank: 272
score: 98.92695168887867
patch: double search CaMeL Direction = steepest CaMeL Descent . clone ( point ) ;
rank: 272
score: 98.85065307617188
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . iter , ;
rank: 272
score: 98.70821126302083
patch: ++ iter ; ++ iter ; 0 ;
rank: 272
score: 98.63414001464844
patch: * * * ++ iter ; }
rank: 272
score: 98.63392639160156
patch: ++ iter ; ; -- iter ;
rank: 272
score: 98.63060584435097
patch: temp = new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 273
score: 98.98798828125
patch: for ( Point CaMeL Value CaMeL Pair current : steepest CaMeL Descent . clone ( ) )
rank: 273
score: 98.98155628551136
patch: final double [ ] steepest CaMeL Descent = preconditioner . to CaMeL String ( ) ;
rank: 273
score: 98.92610677083333
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . max CaMeL Eval ;
rank: 273
score: 98.85047064887152
patch: if ( iter >= max CaMeL Eval )
rank: 273
score: 98.78810628255208
patch: thread = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 273
score: 98.70792643229167
patch: i * ++ ; ++ - iter ;
rank: 273
score: 98.63406982421876
patch: int iter = 0 ; while ++ iter ;
rank: 273
score: 98.6333251953125
patch: ++ iter ; ++ iter ; iter ; ;
rank: 273
score: 98.62995147705078
patch: if ( ! iter . is CaMeL Empty ( ) ; ++ iter ) {
rank: 274
score: 99.03207576976104
patch: Point CaMeL Value CaMeL Pair n = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 274
score: 98.98789876302084
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( current ) ;
rank: 274
score: 98.9812075966283
patch: Point CaMeL Value CaMeL Pair search CaMeL Direction = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 274
score: 98.9257342998798
patch: double r = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 274
score: 98.85003192608173
patch: iter = new Point CaMeL Value CaMeL Pair ( r ) ;
rank: 274
score: 98.7878646850586
patch: rs = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 274
score: 98.70782470703125
patch: ++ iter ; ++ * value ;
rank: 274
score: 98.633837890625
patch: else { if ++ [ 0 ] ; }
rank: 274
score: 98.632958984375
patch: ++ iter ; ++ iter ; -- start ;
rank: 274
score: 98.62935093470982
patch: ++ iter ; Thread . current CaMeL Thread ( ) . set ;
rank: 275
score: 99.032001953125
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( this ) ;
rank: 275
score: 98.98763602120536
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 275
score: 98.98112349076705
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , n ) ;
rank: 275
score: 98.92556527944711
patch: if ( point . length ( ) < point . length ;
rank: 275
score: 98.8496563251202
patch: ++ max CaMeL Eval = ++ max CaMeL Eval * iter ;
rank: 275
score: 98.78769938151042
patch: cursor = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 275
score: 98.7075424194336
patch: ++ iter ; else iter * ;
rank: 275
score: 98.63355255126953
patch: ++ [ ] [ ] iter ;
rank: 275
score: 98.63245985243056
patch: ++ iter ; ++ n ; / /
rank: 275
score: 98.62935014204545
patch: ++ iter ; try { current = ++ iter ;
rank: 276
score: 99.031943359375
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( $STRING$ ) ;
rank: 276
score: 98.98728637695312
patch: Point CaMeL Value CaMeL Pair current = current . new Line CaMeL Search CaMeL Function ( point ) ;
rank: 276
score: 98.98105197482639
patch: final double [ ] steepest CaMeL Descent = preconditioner . class ;
rank: 276
score: 98.925048828125
patch: int max CaMeL Eval = point . length ( ) ;
rank: 276
score: 98.84964599609376
patch: ++ iter - max CaMeL Eval * iter ;
rank: 276
score: 98.78715006510417
patch: frame = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 276
score: 98.63301086425781
patch: ++ * * iter ; } /
rank: 276
score: 98.63221740722656
patch: ++ iter ; iter return iter ;
rank: 276
score: 98.629150390625
patch: current = Math . min ( max CaMeL Eval , iter ) ;
rank: 277
score: 99.03161168981481
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 277
score: 98.98699079241071
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 , initial CaMeL Step ) ;
rank: 277
score: 98.84937686011905
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . to CaMeL String ;
rank: 277
score: 98.7870205965909
patch: protected Point CaMeL Value CaMeL Pair current = current ;
rank: 277
score: 98.70699310302734
patch: ++ iter ; ++ for iter ;
rank: 277
score: 98.63279215494792
patch: if ( ! iter . is CaMeL Empty ++ 1 )
rank: 277
score: 98.63220893012152
patch: iter ; ++ iter ; ++ 1 ;
rank: 277
score: 98.6289924172794
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) + iter ;
rank: 278
score: 98.84932668585526
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter ;
rank: 278
score: 98.7869873046875
patch: result = new Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 278
score: 98.70662434895833
patch: ++ iter ; int iter + 0 ;
rank: 278
score: 98.632568359375
patch: if ( ! iter . is CaMeL Empty ( ) ) return iter ; }
rank: 278
score: 98.63198852539062
patch: ++ iter ; ++ max ; ;
rank: 278
score: 98.62869083180146
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ n ; }
rank: 279
score: 99.03139361213235
patch: ++ max CaMeL Eval += find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 279
score: 98.98667279411765
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( max CaMeL Eval ) ;
rank: 279
score: 98.84918823242188
patch: ++ max CaMeL Eval * iter + iter ;
rank: 279
score: 98.78697713216145
patch: the = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 279
score: 98.63154296875
patch: else { if ++ [ 1 ] ; }
rank: 279
score: 98.6314364346591
patch: ++ iter ; ++ iter ; ; -- iter ;
rank: 279
score: 98.6286392211914
patch: while ( iter != 0 ) {
rank: 280
score: 98.98661295572917
patch: double [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound ( point ) ;
rank: 280
score: 98.92350463867187
patch: final double [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 280
score: 98.84904341264205
patch: ++ iter ; if ( max CaMeL Eval <= ;
rank: 280
score: 98.78687286376953
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 280
score: 98.70654296875
patch: } ++ iter ; ++ 1 ;
rank: 280
score: 98.6313705444336
patch: ++ iter ; ++ new ++ ;
rank: 280
score: 98.63109479631696
patch: / * * ++ iter ;
rank: 280
score: 98.62779651988636
patch: ++ iter ; while ( iter == 0 ) {
rank: 281
score: 98.98655007102273
patch: Point CaMeL Value CaMeL Pair current = new Line CaMeL Search CaMeL Function ( point . search CaMeL Direction ) ;
rank: 281
score: 98.98005477241848
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent . length ;
rank: 281
score: 98.92348345588235
patch: double search CaMeL Direction = steepest CaMeL Descent . get ( point ) ;
rank: 281
score: 98.84854125976562
patch: return new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 281
score: 98.63076782226562
patch: ++ iter ; ++ null ; ++ iter ;
rank: 281
score: 98.62776184082031
patch: int iter = current . last CaMeL Index CaMeL Of ( ++ n ) ;
rank: 282
score: 99.03056255139802
patch: current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point ) ;
rank: 282
score: 98.98610432942708
patch: Line CaMeL Search CaMeL Function current = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 282
score: 98.97962239583333
patch: final double [ ] steepest CaMeL Descent = point . length ;
rank: 282
score: 98.8482666015625
patch: ++ max CaMeL Eval ++ ; * / * /
rank: 282
score: 98.78574625651042
patch: id = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 282
score: 98.70572238498264
patch: ++ iter ; * / if iter ;
rank: 282
score: 98.63008626302083
patch: else ++ iter ; } ++ iter ;
rank: 282
score: 98.63004927201705
patch: ++ iter ; ++ - 1 ; ++ iter ;
rank: 282
score: 98.62708282470703
patch: if ( iter == - 1 )
rank: 283
score: 99.02957718460648
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition ( this ) ;
rank: 283
score: 98.98588634672619
patch: double [ ] steepest CaMeL Descent = preconditioner . get CaMeL Point ( ) ;
rank: 283
score: 98.97913469587054
patch: int [ ] steepest CaMeL Descent = point . length ;
rank: 283
score: 98.92294921875
patch: final double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 283
score: 98.8480583639706
patch: ++ max CaMeL Eval ++ ; return new Point CaMeL Value CaMeL Pair ( ; }
rank: 283
score: 98.7847900390625
patch: sel = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 283
score: 98.62987518310547
patch: / * ++ iter * / /
rank: 283
score: 98.62840270996094
patch: if iter ++ ; ++ iter ;
rank: 283
score: 98.62672334558823
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( this ) ;
rank: 284
score: 98.985302734375
patch: return ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . get ( point ) ;
rank: 284
score: 98.97866641773896
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( search CaMeL Direction ) ;
rank: 284
score: 98.92275766225961
patch: double n = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 284
score: 98.84762807992789
patch: ++ max CaMeL Eval - max CaMeL Eval ; iter ++ ;
rank: 284
score: 98.7843017578125
patch: column = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 284
score: 98.70522054036458
patch: ++ iter ; ++ * ++ 1 ;
rank: 284
score: 98.62924533420139
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . max )
rank: 284
score: 98.6281405362216
patch: ++ iter ; ++ iter ; while iter ++ ;
rank: 284
score: 98.62664794921875
patch: ++ iter ; if ( current ;
rank: 285
score: 99.02941216362848
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point
rank: 285
score: 98.98521021792763
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 285
score: 98.92249253216912
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) 0 ;
rank: 285
score: 98.84713745117188
patch: ++ max CaMeL Eval / iter ;
rank: 285
score: 98.70500352647569
patch: i * ++ ; if ++ iter ;
rank: 285
score: 98.62845552884616
patch: if ( ! iter . is CaMeL Empty ++ ) continue ;
rank: 285
score: 98.62757568359375
patch: ++ null ; ++ iter ; ++ iter ;
rank: 285
score: 98.62663717830883
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) get ;
rank: 286
score: 99.02901458740234
patch: current = find CaMeL Upper CaMeL Bound ( point , point . length ) ;
rank: 286
score: 98.97848690257354
patch: int [ ] steepest CaMeL Descent = preconditioner . max ;
rank: 286
score: 98.92190987723214
patch: delta += steepest CaMeL Descent . clone ( ) ; }
rank: 286
score: 98.8462890625
patch: result [ max CaMeL Eval ++ ] = ;
rank: 286
score: 98.7832539876302
patch: it = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 286
score: 98.70441351996527
patch: ++ start ; ++ iter ; iter ;
rank: 286
score: 98.62744140625
patch: ++ iter ; ++ iter ; n ;
rank: 286
score: 98.62621256510417
patch: ++ iter ; Thread . current CaMeL Thread ( ) . join ( ;
rank: 287
score: 98.84613506610577
patch: ++ max CaMeL Eval ; ; ++ max CaMeL Eval ++ ;
rank: 287
score: 98.78289794921875
patch: result = ( Point CaMeL Value CaMeL Pair ) current ;
rank: 287
score: 98.70379638671875
patch: ++ iter ; ++ * out ;
rank: 287
score: 98.62776184082031
patch: else { ++ 0 ; * /
rank: 287
score: 98.6270419034091
patch: ++ iter ; ++ iter ; return iter ; }
rank: 287
score: 98.62580023871527
patch: if ( ++ n > 0 ) {
rank: 288
score: 99.02828275240384
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( Point CaMeL Value CaMeL Pair ) ;
rank: 288
score: 98.98420061383929
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; else
rank: 288
score: 98.921484375
patch: if ( max CaMeL Eval != null ) {
rank: 288
score: 98.8459701538086
patch: ++ iter + max CaMeL Eval ;
rank: 288
score: 98.78244018554688
patch: arg = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 288
score: 98.70372772216797
patch: else * ++ iter ; * /
rank: 288
score: 98.6277099609375
patch: else { ++ iter ; } / * /
rank: 288
score: 98.62664794921875
patch: ++ iter ; ++ current ; ++ iter ;
rank: 288
score: 98.62559291294643
patch: current = Math . min ( max CaMeL Eval , current . ;
rank: 289
score: 99.02804432744566
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( ) . clone ( ) ;
rank: 289
score: 98.97828258167614
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( point ) ;
rank: 289
score: 98.9214599609375
patch: ++ iter ; iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 289
score: 98.84574381510417
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r ;
rank: 289
score: 98.78241838727679
patch: return new Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 289
score: 98.70359802246094
patch: ++ iter ; final ++ iter ;
rank: 289
score: 98.62761094835069
patch: if ( ! iter . is CaMeL Empty ++ && iter . is CaMeL Empty ++ )
rank: 289
score: 98.62648010253906
patch: ++ iter ; ++ ++ n ;
rank: 289
score: 98.62548828125
patch: ++ iter ; while ( ! current . is CaMeL Empty ( ) )
rank: 290
score: 99.02754350142045
patch: current = find CaMeL Upper CaMeL Bound ( point , steepest CaMeL Descent . clone ( ) ) ;
rank: 290
score: 98.9776252297794
patch: int steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 290
score: 98.92117513020834
patch: int search CaMeL Direction = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 290
score: 98.84520545372597
patch: r [ max CaMeL Eval ] = Math . round ( ;
rank: 290
score: 98.78232985276442
patch: long iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 290
score: 98.70357840401786
patch: value ++ ; ++ iter ;
rank: 290
score: 98.62704467773438
patch: else * * * ++ iter ;
rank: 290
score: 98.62628173828125
patch: ++ iter ; ++ iter ; -- n ;
rank: 290
score: 98.625
patch: return new Point CaMeL Value CaMeL Pair ( current , ;
rank: 291
score: 99.02754138764881
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . search CaMeL Direction ) ;
rank: 291
score: 98.84429253472223
patch: ++ max CaMeL Eval ++ ; System . out . ; System . out . ; ;
rank: 291
score: 98.78228759765625
patch: c = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 291
score: 98.7030029296875
patch: ++ iter ; ++ 1 ; }
rank: 291
score: 98.62664031982422
patch: / * * * += iter ;
rank: 291
score: 98.6253329190341
patch: ++ iter ; ++ iter ; / = iter ;
rank: 291
score: 98.62488403320313
patch: ++ iter ; while ( iter == 0 )
rank: 292
score: 98.98277216372283
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 292
score: 98.92020089285714
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 292
score: 98.8440185546875
patch: iter = new Point CaMeL Value CaMeL Pair ( ++ max CaMeL Eval ;
rank: 292
score: 98.7820536295573
patch: return compute CaMeL Objective CaMeL Gradient ( point ) ; }
rank: 292
score: 98.70299183238636
patch: i * ++ ; ++ iter ; ++ iter ;
rank: 292
score: 98.62646484375
patch: if ( ! iter . is CaMeL Empty iter )
rank: 292
score: 98.62507629394531
patch: ++ 1 ; ; ++ iter ;
rank: 292
score: 98.62412806919643
patch: ++ iter ; if ( current . is CaMeL Empty ( ) ;
rank: 293
score: 98.97675916883681
patch: double [ ] search CaMeL Direction = preconditioner . precondition ( point ) ;
rank: 293
score: 98.8435770670573
patch: r [ max CaMeL Eval ++ ] = iter . ;
rank: 293
score: 98.78199259440105
patch: values = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 293
score: 98.70280626085069
patch: ++ iter ; if iter ; iter ;
rank: 293
score: 98.62613932291667
patch: if ( ! iter . is CaMeL Empty ++ iter )
rank: 293
score: 98.62505425347223
patch: ++ iter ; ++ this + iter ;
rank: 293
score: 98.62409210205078
patch: if ( ! iter . is CaMeL Empty ( ) . is CaMeL Empty ;
rank: 294
score: 98.98218383789063
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . true ) ;
rank: 294
score: 98.97675115411931
patch: long [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 294
score: 98.9196841591283
patch: if ( Point CaMeL Value CaMeL Pair . converged ( point , search CaMeL Direction ) ) {
rank: 294
score: 98.8430508700284
patch: r [ n ] = ++ max CaMeL Eval ;
rank: 294
score: 98.78182983398438
patch: found += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 294
score: 98.7020263671875
patch: ++ iter ; ++ else * iter ;
rank: 294
score: 98.62569173177083
patch: else { throw new Runtime CaMeL Exception ++ iter ; }
rank: 294
score: 98.62428977272727
patch: ++ iter ; ++ iter ; iter ; / /
rank: 294
score: 98.62393391927084
patch: if ( ! current . is CaMeL Empty ( ) ) ++ iter ;
rank: 295
score: 98.91963276110198
patch: double search CaMeL Direction = steepest CaMeL Descent . clone ( point , r ) ;
rank: 295
score: 98.84295043945312
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , r ) ;
rank: 295
score: 98.78169250488281
patch: v = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 295
score: 98.70192173549107
patch: ++ iter ; ++ out ;
rank: 295
score: 98.62529296875
patch: else { if ++ iter ; break ; }
rank: 295
score: 98.62385559082031
patch: iter ++ ; ++ iter ; else
rank: 295
score: 98.62368774414062
patch: ++ iter - n ;
rank: 296
score: 99.02632649739583
patch: point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 296
score: 98.84284057617188
patch: ++ max CaMeL Eval * iter + 1 ;
rank: 296
score: 98.70183563232422
patch: ++ iter ; ++ * $NUMBER$ ;
rank: 296
score: 98.62525177001953
patch: ++ [ ] iter ++ ; }
rank: 296
score: 98.62320556640626
patch: Iterator iter = iter . iter ( ) ;
rank: 296
score: 98.6230224609375
patch: ++ iter ; ++ name ; ++ iter ;
rank: 297
score: 98.98178498641305
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . preconditioner ( ) ;
rank: 297
score: 98.97626410590277
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition $NUMBER$ ;
rank: 297
score: 98.91873168945312
patch: if ( iter < 0 ) {
rank: 297
score: 98.8424560546875
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval > 0 ;
rank: 297
score: 98.78155110677083
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ; }
rank: 297
score: 98.70166778564453
patch: ++ ] iter ; ++ iter ;
rank: 297
score: 98.6252212524414
patch: if ( ++ iter > 0 ;
rank: 297
score: 98.62305501302083
patch: ++ iter ; if ( ! current . is CaMeL Na CaMeL N ;
rank: 297
score: 98.62274169921875
patch: ++ iter ; ++ iter ; / * /
rank: 298
score: 98.98115871263587
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( steepest CaMeL Descent . clone ( ) ) ;
rank: 298
score: 98.84226989746094
patch: Iterator < Point CaMeL Value CaMeL Pair > iter = iter . iterator ( ;
rank: 298
score: 98.77936553955078
patch: left = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 298
score: 98.70144653320312
patch: ++ iter ; ++ - start ;
rank: 298
score: 98.6251220703125
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals )
rank: 298
score: 98.62269176136364
patch: ++ iter ; iter = iter ; ++ iter ;
rank: 298
score: 98.62246524586396
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) . int ;
rank: 299
score: 98.98108440896739
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 ) ;
rank: 299
score: 98.91850011488971
patch: double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 299
score: 98.8422607421875
patch: ++ max CaMeL Eval = iter % iter ;
rank: 299
score: 98.77920096261161
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 299
score: 98.70084054129464
patch: ++ $NUMBER$ * ++ iter ;
rank: 299
score: 98.62511335100446
patch: else ; if ++ iter ;
rank: 299
score: 98.62242216222427
patch: current = Math . max ( iter , current . double CaMeL Value ( ) ;
rank: 299
score: 98.62230767144098
patch: ++ iter ; ++ iter ; ++ iter
rank: 300
score: 98.91792566636029
patch: if ( steepest CaMeL Descent . do CaMeL Optimize ( iter ) ) {
rank: 300
score: 98.84214274088542
patch: iter = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 300
score: 98.7789077758789
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 300
score: 98.70061492919922
patch: ++ iter ; iter * ++ ;
rank: 300
score: 98.62461751302084
patch: if ( ! iter . is CaMeL Empty ++ ) return iter ; }
rank: 300
score: 98.62227376302083
patch: ++ iter ; ++ ( ++ iter ;
rank: 300
score: 98.62134602864583
patch: result = new Point CaMeL Value CaMeL Pair ( iter , current ) ;
rank: 301
score: 98.97415597098214
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . trim ( ) ;
rank: 301
score: 98.91722276475694
patch: if ( steepest CaMeL Descent . length ( ) < point . length ) {
rank: 301
score: 98.84195285373264
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 301
score: 98.77882603236607
patch: left = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 301
score: 98.62455240885417
patch: Iterator < Integer > iter = iter . iterator ++ ;
rank: 301
score: 98.62130972055289
patch: int iter = current . index CaMeL Of ( this ) ;
rank: 301
score: 98.62047230113636
patch: ++ iter ; ; ++ 1 ; ++ iter ;
rank: 302
score: 99.0246814546131
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , ) ;
rank: 302
score: 98.98031277126736
patch: double CaMeL Value = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 302
score: 98.91666259765626
patch: final double steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ,
rank: 302
score: 98.8414306640625
patch: r [ max CaMeL Eval ++ ] = Double . value CaMeL Of ( ;
rank: 302
score: 98.77879503038194
patch: ( iter < point . length ) {
rank: 302
score: 98.70024871826172
patch: ++ iter ; ++ iter ; int
rank: 302
score: 98.6245346069336
patch: else { * * ++ iter ;
rank: 302
score: 98.62110811121323
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ , 0 ) ;
rank: 302
score: 98.62042914496527
patch: ++ iter ; ++ start ; / /
rank: 303
score: 99.02462332589286
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > ) {
rank: 303
score: 98.9802776834239
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 303
score: 98.9740054481908
patch: int [ ] steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 303
score: 98.91658238002232
patch: if ( steepest CaMeL Descent . get ( ) ) {
rank: 303
score: 98.84141188401442
patch: ++ max CaMeL Eval = ++ max CaMeL Eval + iter ;
rank: 303
score: 98.69988458806819
patch: ++ iter ; ++ iter ; int - iter ;
rank: 303
score: 98.62452799479166
patch: if ( ! iter . is CaMeL Empty ( ) ) return iter ;
rank: 303
score: 98.62109375
patch: while ( iter != null ) { ++ iter ;
rank: 303
score: 98.61980523003473
patch: iter ; ++ iter ; ++ n ;
rank: 304
score: 99.02443150111607
patch: delta = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 304
score: 98.91654750279018
patch: if ( point . length ( ) < point . length ) {
rank: 304
score: 98.8413021689967
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 304
score: 98.77838604266827
patch: return new Point CaMeL Value CaMeL Pair ( point ) ; }
rank: 304
score: 98.69949679904514
patch: ++ iter ; / * ++ iter ;
rank: 304
score: 98.62374538845486
patch: ++ [ ] iter ; if ; }
rank: 304
score: 98.62105305989583
patch: ++ iter ; if ( iter == null ) break ;
rank: 304
score: 98.6195068359375
patch: ++ iter ; ++ iter ; sub
rank: 305
score: 98.97935084292763
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( ) ; }
rank: 305
score: 98.97331891741071
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = steepest CaMeL Descent . to CaMeL
rank: 305
score: 98.91639055524554
patch: if ( steepest CaMeL Descent . length < iter ) {
rank: 305
score: 98.84102376302083
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , ;
rank: 305
score: 98.77830287388393
patch: v = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 305
score: 98.69935607910156
patch: ++ iter ; int iter * /
rank: 305
score: 98.62373352050781
patch: / * * ++ ++ * /
rank: 305
score: 98.62098185221355
patch: current = Math . min ( iter , current . ;
rank: 305
score: 98.61933898925781
patch: ++ iter ; ++ ++ start ;
rank: 306
score: 99.02430308948864
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , delta ) ;
rank: 306
score: 98.91630626860119
patch: final double [ ] search CaMeL Direction = preconditioner . precondition ( point , r ) ;
rank: 306
score: 98.84040069580078
patch: ++ max CaMeL Eval <= 0 ;
rank: 306
score: 98.77830153245192
patch: c = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 306
score: 98.69923400878906
patch: ++ start ; ++ iter ; ;
rank: 306
score: 98.62370300292969
patch: / * * * ++ / }
rank: 306
score: 98.62016465928819
patch: ++ iter ; max CaMeL Eval ++ ;
rank: 306
score: 98.61901177300348
patch: ++ iter ; iter ++ ; ++ ;
rank: 307
score: 98.97913178943452
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( )
rank: 307
score: 98.97260131835938
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( name ) ;
rank: 307
score: 98.83999488467262
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter ) ;
rank: 307
score: 98.77696228027344
patch: w = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 307
score: 98.6984634399414
patch: ++ iter ; else if iter ;
rank: 307
score: 98.62350463867188
patch: else { if ; ++ 0 ;
rank: 307
score: 98.61943817138672
patch: current = Math . max ( max CaMeL Eval , max CaMeL Eval ) ;
rank: 307
score: 98.61898040771484
patch: ++ iter ; iter if iter ;
rank: 308
score: 98.97911241319444
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . get ( ) ;
rank: 308
score: 98.97239176432292
patch: final double [ ] steepest CaMeL Descent = preconditioner . null ;
rank: 308
score: 98.91572498139881
patch: final double steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 308
score: 98.83933803013393
patch: ++ max CaMeL Eval * ;
rank: 308
score: 98.77694266183036
patch: w = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 308
score: 98.62294224330357
patch: if ( iter < 0 )
rank: 308
score: 98.6193359375
patch: int iter = current . index CaMeL Of ( $STRING$ ) . length ;
rank: 308
score: 98.61823272705078
patch: ++ 0 ; ++ iter ; else
rank: 309
score: 98.83931274414063
patch: ++ max CaMeL Eval = iter ; * /
rank: 309
score: 98.7764892578125
patch: out = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 309
score: 98.69805353338069
patch: ++ iter ; ++ iter ; for iter ++ ;
rank: 309
score: 98.6227798461914
patch: else { return iter ; } }
rank: 309
score: 98.6192138671875
patch: if ( current != null && current . is CaMeL Empty ( ) ;
rank: 309
score: 98.61817515980114
patch: ++ iter ; iter / ++ ; ++ iter ;
rank: 310
score: 99.02408599853516
patch: double [ ] search CaMeL Direction = find CaMeL Upper CaMeL Bound ( ) ;
rank: 310
score: 98.97193321814903
patch: final double [ ] steepest CaMeL Descent = 0 ;
rank: 310
score: 98.91427176339286
patch: final double steepest CaMeL Descent = preconditioner . get ( max CaMeL Eval ) ;
rank: 310
score: 98.83863525390625
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 310
score: 98.77613830566406
patch: cur = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 310
score: 98.62266956676136
patch: else throw new Runtime CaMeL Exception ( $STRING$ ; }
rank: 310
score: 98.61882188585069
patch: ++ iter ; try { current = ;
rank: 311
score: 99.02379014756944
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point ;
rank: 311
score: 98.97159423828126
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( delta ) ;
rank: 311
score: 98.91392115542763
patch: final double Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 311
score: 98.83778733473558
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval ; }
rank: 311
score: 98.77562366832386
patch: protected Point CaMeL Value CaMeL Pair current = null ;
rank: 311
score: 98.62244415283203
patch: / * ++ * * * /
rank: 311
score: 98.61878159466912
patch: ++ iter ; while ( ! current . is CaMeL Na CaMeL N ( ) ;
rank: 311
score: 98.6172607421875
patch: ++ iter ; ++ iter ; iter ; else
rank: 312
score: 98.97830636160714
patch: final double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ; ;
rank: 312
score: 98.775390625
patch: cur = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 312
score: 98.69568634033203
patch: / * ] iter ; * /
rank: 312
score: 98.62234262319711
patch: throw new Runtime CaMeL Exception ( $STRING$ + iter + $STRING$ ;
rank: 312
score: 98.61800384521484
patch: if ( ! current . is CaMeL Empty ( ) ) { ++ iter ;
rank: 312
score: 98.61668090820312
patch: ++ $STRING$ ; ++ iter ; ++ iter ;
rank: 313
score: 99.02354939778645
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 313
score: 98.97105497472427
patch: final double [ ] steepest CaMeL Descent = preconditioner . ;
rank: 313
score: 98.91383579799107
patch: final double max = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 313
score: 98.837158203125
patch: iter = new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 313
score: 98.77494673295455
patch: result = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 313
score: 98.69553833007812
patch: ++ iter ; / * / ++ iter ;
rank: 313
score: 98.62140655517578
patch: / * ++ iter * * /
rank: 313
score: 98.61771065848214
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ; ;
rank: 313
score: 98.615966796875
patch: ++ iter ; ; = iter ;
rank: 314
score: 99.02339680989583
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( (
rank: 314
score: 98.9781135110294
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , iter ) ;
rank: 314
score: 98.97099752987133
patch: double [ ] steepest CaMeL Descent = preconditioner . delta ;
rank: 314
score: 98.83713107638889
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 314
score: 98.6205825805664
patch: else { / * ++ iter /
rank: 314
score: 98.61720784505208
patch: iter = iter . iter ( ) ;
rank: 314
score: 98.61518859863281
patch: ++ n ; ; ++ iter ;
rank: 315
score: 98.97087016858552
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . 0 ;
rank: 315
score: 98.91352771577381
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent ;
rank: 315
score: 98.83658640008224
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter ) ;
rank: 315
score: 98.7740478515625
patch: long point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 315
score: 98.69529893663194
patch: ++ iter ; try { int iter ;
rank: 315
score: 98.62039947509766
patch: / * * * * / /
rank: 315
score: 98.6170654296875
patch: while ( ! current . is CaMeL Empty ( ) ; break ;
rank: 315
score: 98.61510552300348
patch: ++ iter ; ; iter / / /
rank: 316
score: 98.977685546875
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 316
score: 98.91333725873162
patch: r [ max CaMeL Eval ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 316
score: 98.83590698242188
patch: ++ max CaMeL Eval -= iter + 1 ;
rank: 316
score: 98.77384440104167
patch: caller = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 316
score: 98.69443359375
patch: ++ iter ; else * / ++ iter ;
rank: 316
score: 98.61992536272321
patch: if ( ! iter . is CaMeL Empty ( ) ) { }
rank: 316
score: 98.61704508463542
patch: ++ iter ; if ( iter == 0 ) break ;
rank: 317
score: 98.97000254755434
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , point ) ;
rank: 317
score: 98.912353515625
patch: if ( steepest CaMeL Descent . length ( ) < r . length ) {
rank: 317
score: 98.83571166992188
patch: ++ max CaMeL Eval ++ ; ++ max ;
rank: 317
score: 98.69384087456598
patch: ++ iter ; ++ 0 ; iter ;
rank: 317
score: 98.61884223090277
patch: if ( ! iter . is CaMeL Empty ( ) && . is CaMeL Empty ( ;
rank: 317
score: 98.61661783854167
patch: while ( ! current . ; current . is CaMeL Empty ( ) )
rank: 317
score: 98.61428493923611
patch: ++ iter ; ++ iter ; for iter
rank: 318
score: 98.96991577148438
patch: final double [ ] steepest CaMeL Descent = preconditioner . max CaMeL Eval ;
rank: 318
score: 98.83552689985795
patch: ++ iter ; if ( max CaMeL Eval >= ;
rank: 318
score: 98.77359008789062
patch: item = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 318
score: 98.69375
patch: / * ++ ++ iter ; ++ iter ;
rank: 318
score: 98.61780657087054
patch: ++ length ; ++ iter ;
rank: 318
score: 98.61427001953125
patch: ++ iter ; ++ iter ; ++ this ;
rank: 319
score: 99.02138449928977
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , checker ) ;
rank: 319
score: 98.97682591488487
patch: List [ ] steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 319
score: 98.91190338134766
patch: if ( current == null ) {
rank: 319
score: 98.835498046875
patch: ++ max CaMeL Eval * max CaMeL Eval * max CaMeL Eval ++ ;
rank: 319
score: 98.77318464006696
patch: list = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 319
score: 98.61771647135417
patch: else { if ++ iter 1 ; }
rank: 319
score: 98.61556396484374
patch: ++ iter ; if ( current != null ;
rank: 319
score: 98.61406707763672
patch: ++ ++ iter ; ++ n ;
rank: 320
score: 99.02135778356481
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > . Point CaMeL Value CaMeL Pair * ;
rank: 320
score: 98.97602924547698
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( )
rank: 320
score: 98.91136977251838
patch: iter = preconditioner . precondition ( point , search CaMeL Direction ) ;
rank: 320
score: 98.83526611328125
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r
rank: 320
score: 98.7725830078125
patch: this = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 320
score: 98.61747233072917
patch: * * * * * ++ iter ;
rank: 320
score: 98.61543579101563
patch: ++ iter ; if ( iter != 0 )
rank: 320
score: 98.61405639648437
patch: ++ Math ; ++ iter ; ++ iter ;
rank: 321
score: 99.02072265625
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair >
rank: 321
score: 98.97523193359375
patch: final double [ ] steepest CaMeL Descent = preconditioner . get ( ) ;
rank: 321
score: 98.9111328125
patch: if ( compute CaMeL Objective CaMeL Gradient ( point , r ) ) {
rank: 321
score: 98.77251838235294
patch: list = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 321
score: 98.69267272949219
patch: ++ iter ; ++ break ; ;
rank: 321
score: 98.61746215820312
patch: / * * * * ++ /
rank: 321
score: 98.61451631433823
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ; ) ) {
rank: 321
score: 98.61371527777777
patch: ++ iter ; ++ iter ; try /
rank: 322
score: 99.02021928267045
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 , r ) ;
rank: 322
score: 98.97511596679688
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . false ) ;
rank: 322
score: 98.9689453125
patch: final long [ ] steepest CaMeL Descent = preconditioner . clone ( ) ;
rank: 322
score: 98.9098788174716
patch: if ( update CaMeL Formula ( point ) ) {
rank: 322
score: 98.83442905970982
patch: ++ max CaMeL Eval >= Math . max ( max CaMeL Eval ;
rank: 322
score: 98.77249581473214
patch: tmp = compute CaMeL Objective CaMeL Gradient ( search CaMeL Direction ) ;
rank: 322
score: 98.69261585582386
patch: ++ iter ; ++ iter ; while ++ 1 ;
rank: 322
score: 98.61696370442708
patch: else throw new Runtime CaMeL Exception ( $STRING$ + iter ;
rank: 322
score: 98.61444091796875
patch: ++ iter ; Thread . current CaMeL Thread ( ) . ; ++ iter ;
rank: 322
score: 98.61358642578125
patch: ++ iter ; iter * /
rank: 323
score: 98.9749755859375
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 323
score: 98.96891276041667
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( name ) ;
rank: 323
score: 98.90983072916667
patch: ++ iter ; current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 323
score: 98.83354749177632
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 323
score: 98.7722880045573
patch: result = compute CaMeL Objective CaMeL Gradient ( iter ) ;
rank: 323
score: 98.69261169433594
patch: ++ iter ; try ; break ;
rank: 323
score: 98.61655970982143
patch: if ( ! iter . is CaMeL Empty ( ) ; return ;
rank: 323
score: 98.6140869140625
patch: ++ iter ; if ( super . is CaMeL Empty ( ) ) {
rank: 323
score: 98.6135025024414
patch: ++ iter ; iter * ; /
rank: 324
score: 99.01998291015624
patch: delta += search CaMeL Direction [ 0 ] ;
rank: 324
score: 98.96866861979167
patch: int [ ] steepest CaMeL Descent = preconditioner . to CaMeL String ( ) ;
rank: 324
score: 98.9093081825658
patch: double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 324
score: 98.8332160500919
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , 1 ) ;
rank: 324
score: 98.7719014485677
patch: element = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 324
score: 98.69221714564732
patch: else * ++ ++ iter ;
rank: 324
score: 98.61654663085938
patch: if ( ! iter . is CaMeL Empty ++ this . iter . contains )
rank: 324
score: 98.61381700303819
patch: ++ iter ; current = iter . ;
rank: 324
score: 98.61349148220486
patch: iter ; ++ n ; ++ iter ;
rank: 325
score: 98.97430013020833
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current . null ;
rank: 325
score: 98.96865012428977
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 325
score: 98.83319963727679
patch: ++ max CaMeL Eval = Math . min ( iter , iter ;
rank: 325
score: 98.7714092548077
patch: a = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 325
score: 98.61650848388672
patch: else { if ++ 1 ; }
rank: 325
score: 98.61329345703125
patch: ++ iter ; ++ iter ; -= iter ;
rank: 325
score: 98.6131950827206
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( true ) ;
rank: 326
score: 99.01976928710937
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , (
rank: 326
score: 98.968505859375
patch: double [ ] steepest CaMeL Descent = preconditioner . point ( point ) ;
rank: 326
score: 98.90920584542411
patch: if ( point . length ( ) < r . length ) {
rank: 326
score: 98.83310768821023
patch: ++ max CaMeL Eval = iter ; ++ iter ;
rank: 326
score: 98.77112397693452
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , point ) ;
rank: 326
score: 98.69058663504464
patch: ++ * ++ - iter ;
rank: 326
score: 98.61643676757812
patch: else { ++ iter ; ++ iter ; }
rank: 326
score: 98.61279296875
patch: tmp = new Point CaMeL Value CaMeL Pair ( iter , current ) ;
rank: 326
score: 98.6124600497159
patch: ++ ++ 1 ; ++ iter ; ++ iter ;
rank: 327
score: 98.96827607996323
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent .
rank: 327
score: 98.90917250689338
patch: point [ max CaMeL Eval ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 327
score: 98.8327167217548
patch: ++ max CaMeL Eval = ++ max CaMeL Eval / iter ;
rank: 327
score: 98.76942795973558
patch: first = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 327
score: 98.69051688058036
patch: / * / ++ iter ;
rank: 327
score: 98.6153793334961
patch: / * * * ++ ; }
rank: 327
score: 98.61272638494319
patch: ++ iter ; hash CaMeL Code = iter . ;
rank: 328
score: 98.96815708705357
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( 0 ) ;
rank: 328
score: 98.90904235839844
patch: optimum = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 328
score: 98.83263481987848
patch: ++ max CaMeL Eval >= 0 ; ;
rank: 328
score: 98.76922607421875
patch: len = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 328
score: 98.69048394097223
patch: ++ iter ; ++ * String iter ;
rank: 328
score: 98.61513671875
patch: } ++ iter ;
rank: 328
score: 98.61235046386719
patch: if ( iter >= iter ) {
rank: 328
score: 98.61143663194444
patch: iter ++ ; ++ ; ++ iter ;
rank: 329
score: 99.01868438720703
patch: max = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 329
score: 98.9735466452206
patch: ++ max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 329
score: 98.96813434103261
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point , r ) ;
rank: 329
score: 98.90846761067708
patch: while ( true ) { steepest CaMeL Descent .
rank: 329
score: 98.83256022135417
patch: ++ max CaMeL Eval = iter + ;
rank: 329
score: 98.76918538411458
patch: result = compute CaMeL Objective CaMeL Gradient ( delta ) ;
rank: 329
score: 98.69019911024306
patch: ++ iter ; ++ ; int iter ;
rank: 329
score: 98.61464146205357
patch: while ( ! iter . is CaMeL Empty ( ) ; * /
rank: 329
score: 98.61172824435764
patch: ++ iter ; while ( iter ) {
rank: 329
score: 98.61090642755681
patch: ++ iter ; ++ max ++ ; ++ iter ;
rank: 330
score: 99.01863919771634
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 330
score: 98.9678955078125
patch: iter = steepest CaMeL Descent . get ( point ) ;
rank: 330
score: 98.90812852647569
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . max CaMeL Eval ;
rank: 330
score: 98.8325439453125
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . iter ) ;
rank: 330
score: 98.76897723858173
patch: [ ] steepest CaMeL Descent = point . length ;
rank: 330
score: 98.68976508246527
patch: ++ iter ; if ++ - iter ;
rank: 330
score: 98.61443413628473
patch: if ( ! iter . is CaMeL Empty ++ && iter . is CaMeL Empty ++ ;
rank: 330
score: 98.61162458147321
patch: while ( ! current . is CaMeL Empty ( ) ) break ;
rank: 330
score: 98.61075168185764
patch: ++ iter ; ++ if ++ iter ;
rank: 331
score: 99.01837158203125
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction , r ) ;
rank: 331
score: 98.96782370174633
patch: double [ ] steepest CaMeL Descent = preconditioner . min ;
rank: 331
score: 98.90780639648438
patch: ++ iter ; final double steepest CaMeL Descent . clone ( ) ;
rank: 331
score: 98.83247302827381
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r ) ; ++ iter ;
rank: 331
score: 98.68973388671876
patch: ++ * ++ iter ; ++ iter ; ;
rank: 331
score: 98.6139892578125
patch: if ( ! iter . is CaMeL Empty ( ) ; return null ;
rank: 331
score: 98.61021118164062
patch: ++ iter ; ; if iter / / /
rank: 332
score: 99.01803588867188
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , r ) ;
rank: 332
score: 98.97274959788604
patch: final Point CaMeL Value CaMeL Pair current = current . get CaMeL Point ( ) ;
rank: 332
score: 98.9671630859375
patch: double [ ] steepest CaMeL Descent . iterator ( ) .
rank: 332
score: 98.83219909667969
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) list . ;
rank: 332
score: 98.76749674479167
patch: bottom = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 332
score: 98.68968370225694
patch: i * ++ ; ++ iter ; ;
rank: 332
score: 98.61374337332589
patch: while ( ! iter . is CaMeL Empty ( ) ) break ;
rank: 332
score: 98.61135864257812
patch: ++ iter ; if ( current . is CaMeL Empty ;
rank: 332
score: 98.61019287109374
patch: iter ; ++ iter ; while ++ iter ;
rank: 333
score: 98.96709914434524
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . remove ( point ) ;
rank: 333
score: 98.907080078125
patch: delta += steepest CaMeL Descent . clone ( ) ; steepest CaMeL Descent . {
rank: 333
score: 98.8309814453125
patch: ++ max CaMeL Eval ++ ; * / ;
rank: 333
score: 98.76742553710938
patch: state = steepest CaMeL Descent . clone ( ) ; ++ iter ;
rank: 333
score: 98.68949381510417
patch: ++ iter ; ++ $NUMBER$ * iter ;
rank: 333
score: 98.61367458767361
patch: if ( ! iter . is CaMeL Empty ++ this . iter . is CaMeL Empty ;
rank: 333
score: 98.61124674479167
patch: if ( current != null && current . is CaMeL Empty ( ) )
rank: 333
score: 98.61004638671875
patch: ++ iter ; ++ true ; ++ iter ;
rank: 334
score: 99.01720610119048
patch: List steepest CaMeL Descent = preconditioner . precondition ( ) . clone ( ) ;
rank: 334
score: 98.9726626747533
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current . get CaMeL Point ( ) ;
rank: 334
score: 98.906494140625
patch: Point CaMeL Value CaMeL Pair current = current ; current = current ;
rank: 334
score: 98.82963053385417
patch: ++ max CaMeL Eval = this . ++ iter ; ;
rank: 334
score: 98.68871459960937
patch: ++ iter ; else
rank: 334
score: 98.6136703491211
patch: / * * * * iter ;
rank: 334
score: 98.61119733537946
patch: current = iter - 1 ;
rank: 334
score: 98.60951538085938
patch: iter ; ++ iter ; ; ++ iter ;
rank: 335
score: 98.96629797894022
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . length ) ;
rank: 335
score: 98.82933756510417
patch: ++ iter ; Math . max ( max CaMeL Eval , iter ) ;
rank: 335
score: 98.76682535807292
patch: end += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 335
score: 98.68771701388889
patch: ++ iter ; ++ iter ; else *
rank: 335
score: 98.61336517333984
patch: if ( ! iter . is CaMeL Empty ++ this . iter . max ;
rank: 335
score: 98.61111886160714
patch: while ( iter != null )
rank: 335
score: 98.60882568359375
patch: ++ ++ 0 ; ++ iter ;
rank: 336
score: 99.01699431046195
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( . search CaMeL Direction ) ;
rank: 336
score: 98.9722567471591
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) search CaMeL Direction [ 0 ] ;
rank: 336
score: 98.96621268136161
patch: final double point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 336
score: 98.82849884033203
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter
rank: 336
score: 98.7666485126202
patch: long delta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 336
score: 98.6877108487216
patch: ++ iter ; ++ iter ; this . iter ;
rank: 336
score: 98.61313698508523
patch: if ( iter == 0 ; return iter ; }
rank: 336
score: 98.60872802734374
patch: ++ iter ; ++ / ; ++ iter ;
rank: 337
score: 99.01698133680556
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( ) ;
rank: 337
score: 98.96618041992187
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 337
score: 98.90594889322917
patch: if ( steepest CaMeL Descent . length < point . length ;
rank: 337
score: 98.82844682173295
patch: r [ max CaMeL Eval ] = iter ; ;
rank: 337
score: 98.76620718149039
patch: int n = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 337
score: 98.6865946451823
patch: ++ iter ; ++ iter ; ++ iter ; iter ;
rank: 337
score: 98.6131122295673
patch: else { throw new Runtime CaMeL Exception ( $STRING$ ) ; }
rank: 337
score: 98.61096954345703
patch: current = Math . max ( max CaMeL Eval , current . iter ) ;
rank: 337
score: 98.60802612304687
patch: ++ iter ; ++ iter ; } iter ;
rank: 338
score: 99.0168228149414
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 338
score: 98.96588134765625
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 ,
rank: 338
score: 98.90581984747024
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . clone ( ) ;
rank: 338
score: 98.76615767045455
patch: current = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 338
score: 98.68621271306819
patch: ++ iter ; ++ * * ; ++ iter ;
rank: 338
score: 98.61293029785156
patch: / * * * / iter ;
rank: 338
score: 98.61041729266827
patch: ++ iter ; if ( super . is CaMeL Empty ( ;
rank: 339
score: 99.01663028492646
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > current = null ;
rank: 339
score: 98.9655517578125
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( current ) ;
rank: 339
score: 98.90570068359375
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . 0 ;
rank: 339
score: 98.82799614800348
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . ;
rank: 339
score: 98.76614815848214
patch: return new Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 339
score: 98.61282348632812
patch: Object iter = iter . length ;
rank: 339
score: 98.6103271484375
patch: if ( iter != null && iter . is CaMeL Empty ( ) )
rank: 339
score: 98.60625665838069
patch: ++ iter ; while ++ iter ; ++ iter ;
rank: 340
score: 98.9711181640625
patch: final double CaMeL Value = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 340
score: 98.9052978515625
patch: double steepest CaMeL Descent = preconditioner . get ( point , r ) ;
rank: 340
score: 98.82798936631944
patch: ++ max CaMeL Eval ++ ; System . out . ; System . out . ; }
rank: 340
score: 98.76607572115384
patch: result = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 340
score: 98.61270141601562
patch: if ( iter != 0 ; return iter ;
rank: 340
score: 98.61022186279297
patch: if ( iter > 0 ) {
rank: 340
score: 98.60586547851562
patch: ++ iter ; ++ 1 ; else
rank: 341
score: 98.97106402853261
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( ) ;
rank: 341
score: 98.96525065104167
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( precondition ) ;
rank: 341
score: 98.82765299479166
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval > 0 )
rank: 341
score: 98.76518031529018
patch: item = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 341
score: 98.68592664930556
patch: ++ iter ; ++ * - 1 ;
rank: 341
score: 98.61219133649554
patch: if ( ! iter . is CaMeL Empty ++ ; ++ iter ;
rank: 341
score: 98.60924353966347
patch: return new Point CaMeL Value CaMeL Pair ( current ) ; }
rank: 341
score: 98.60533558238636
patch: ++ iter ; ++ iter ; / * iter ;
rank: 342
score: 99.01608276367188
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( null ) ;
rank: 342
score: 98.90485491071429
patch: double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 342
score: 98.82627360026042
patch: ++ iter ; this . ++ iter ;
rank: 342
score: 98.76513671875
patch: k = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 342
score: 98.68457709418402
patch: / * ] * ; ++ iter ;
rank: 342
score: 98.61215645926339
patch: ++ * * iter ; }
rank: 342
score: 98.60838904747597
patch: while ( ! current . is CaMeL Empty ( ; ) ;
rank: 342
score: 98.60518391927083
patch: ++ iter ; ++ iter ; / }
rank: 343
score: 98.97030819163604
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . point ) ;
rank: 343
score: 98.90469360351562
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , point ) ;
rank: 343
score: 98.82590157645089
patch: r [ max CaMeL Eval ++ ] = Math . max ( ;
rank: 343
score: 98.76491001674107
patch: c = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 343
score: 98.68398030598958
patch: ++ iter ; / ; ++ iter ;
rank: 343
score: 98.61099679129464
patch: / * * ++ * /
rank: 343
score: 98.60773174579327
patch: current = new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 344
score: 99.01529091282895
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair >
rank: 344
score: 98.9650519875919
patch: int [ ] search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 344
score: 98.82586200420673
patch: ++ max CaMeL Eval ++ ; System . out . ; }
rank: 344
score: 98.76462026742789
patch: node = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 344
score: 98.68387276785714
patch: ++ * ++ iter ; ;
rank: 344
score: 98.60946994357639
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . equals ;
rank: 344
score: 98.60773111979167
patch: ++ iter ; current = Math . max ( iter , current ) ;
rank: 344
score: 98.60506863064236
patch: iter ; ++ iter ; if iter ;
rank: 345
score: 99.0151034268466
patch: Evaluations [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 345
score: 98.90421335320724
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( point ) ;
rank: 345
score: 98.82577078683036
patch: Iterator < Point CaMeL Value CaMeL Pair > iter = iter . ;
rank: 345
score: 98.76388113839286
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , iter ) ;
rank: 345
score: 98.6837666829427
patch: ++ iter ; ++ iter ; int * ++ iter ;
rank: 345
score: 98.60936279296875
patch: if ( iter == 0 ; ++ iter ;
rank: 345
score: 98.60758702895221
patch: if ( ! iter . is CaMeL Empty ( ) ) { return null ; }
rank: 345
score: 98.60492706298828
patch: ++ iter ; iter / / ;
rank: 346
score: 99.0150375366211
patch: r = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 346
score: 98.96982828776042
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 346
score: 98.9644775390625
patch: final double [ ] [ ] steepest CaMeL Descent . clone ( ) ;
rank: 346
score: 98.82560221354167
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ;
rank: 346
score: 98.76382446289062
patch: y += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 346
score: 98.68364122178819
patch: ++ iter ; int iter = 0 ;
rank: 346
score: 98.60872192382813
patch: if ( iter > 0 ; break ; }
rank: 346
score: 98.60719992897727
patch: ++ iter ; if ( n > 0 ) {
rank: 346
score: 98.60453033447266
patch: iter ; if iter = iter ;
rank: 347
score: 98.96971220128677
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . 0 ) ;
rank: 347
score: 98.90338134765625
patch: if ( update CaMeL Formula == null ) {
rank: 347
score: 98.82391357421875
patch: ++ max CaMeL Eval <= iter ;
rank: 347
score: 98.76310511997768
patch: [ ] point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 347
score: 98.683349609375
patch: try { ++ iter ; ++ iter ;
rank: 347
score: 98.60824924045139
patch: / * * * ++ / * /
rank: 347
score: 98.60711310891544
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; return current ;
rank: 347
score: 98.60441450639205
patch: ++ iter ; ++ iter ; ; return iter ;
rank: 348
score: 99.0147196451823
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval , r ) ;
rank: 348
score: 98.96969604492188
patch: final Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( ) ;
rank: 348
score: 98.9032958984375
patch: double [ ] max CaMeL Eval = preconditioner . precondition ( point , r ) ;
rank: 348
score: 98.82369656032986
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) this . list . ;
rank: 348
score: 98.68145751953125
patch: ++ iter ; ++ - iter ; iter ;
rank: 348
score: 98.60814208984375
patch: else throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 348
score: 98.60700334821429
patch: return new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 348
score: 98.60396321614583
patch: ++ iter ; ++ iter = iter ;
rank: 349
score: 98.9695332845052
patch: Point CaMeL Value CaMeL Pair current = current . point ;
rank: 349
score: 98.90282185872395
patch: optimum = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 349
score: 98.82364595853366
patch: return new Point CaMeL Value CaMeL Pair ( current , iter ;
rank: 349
score: 98.76211886935764
patch: result = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 349
score: 98.60773468017578
patch: ++ * * * iter ; /
rank: 349
score: 98.60645249310662
patch: if ( ! iter . is CaMeL Empty ( ) ) continue ; ++ iter ;
rank: 349
score: 98.60323079427083
patch: iter ; ++ iter ; ++ start ;
rank: 350
score: 99.01453508649554
patch: delta += find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 350
score: 98.96324398643092
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition 1 ;
rank: 350
score: 98.90211838942308
patch: double n = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 350
score: 98.82309977213542
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r ;
rank: 350
score: 98.76142963610198
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 350
score: 98.68117850167411
patch: ++ name ; ++ iter ;
rank: 350
score: 98.60762293198529
patch: if ( ! iter . is CaMeL Empty ( ) || . is CaMeL Empty ;
rank: 350
score: 98.60601251775569
patch: if ( max CaMeL Eval != - 1 ) {
rank: 350
score: 98.60304953835227
patch: ++ iter ; iter ; ++ ; ++ iter ;
rank: 351
score: 98.96926540798611
patch: int [ ] steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( ) ;
rank: 351
score: 98.96312537560097
patch: if ( checker . converged ( max CaMeL Eval ) ) {
rank: 351
score: 98.90196533203125
patch: while ( iter < max CaMeL Eval ) {
rank: 351
score: 98.82298177083334
patch: result = new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 351
score: 98.76069859095982
patch: [ ] current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 351
score: 98.68105740017361
patch: ++ iter ; ++ for ++ iter ;
rank: 351
score: 98.60713465073529
patch: if ( ! iter . is CaMeL Empty ++ this . iter . length ( ;
rank: 351
score: 98.60556209788604
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ; ++ iter ) {
rank: 351
score: 98.60283813476562
patch: ++ iter ; ++ iter ; ++ min ;
rank: 352
score: 99.01450602213542
patch: double max = find CaMeL Upper CaMeL Bound ( ) ;
rank: 352
score: 98.90156824448529
patch: if ( steepest CaMeL Descent . length < point . length ) { {
rank: 352
score: 98.82265403053977
patch: ++ max CaMeL Eval - max CaMeL Eval ; ;
rank: 352
score: 98.76065826416016
patch: old = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 352
score: 98.68098754882813
patch: ++ iter ; else * * ++ iter ;
rank: 352
score: 98.60704694475446
patch: if ( ! iter . is CaMeL Empty ++ this . max ;
rank: 352
score: 98.60535430908203
patch: ++ iter ) { ++ iter ;
rank: 352
score: 98.60246930803571
patch: ++ false ; ++ iter ;
rank: 353
score: 98.9689229329427
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . do CaMeL Optimize ( ) ) ;
rank: 353
score: 98.90064832899306
patch: ++ iter ; while ( true ) {
rank: 353
score: 98.82264293323864
patch: if ( iter >= max CaMeL Eval ) break ;
rank: 353
score: 98.76042938232422
patch: int max CaMeL Eval = 0 ;
rank: 353
score: 98.68095092773437
patch: ++ * ++ ++ iter ; ++ iter ;
rank: 353
score: 98.60658569335938
patch: if ( iter == null ; return iter ;
rank: 353
score: 98.6046142578125
patch: if ( ! iter . equals ( current ) ) {
rank: 353
score: 98.60203247070312
patch: ++ max ; ++ iter ; ++ iter ;
rank: 354
score: 99.01417451746323
patch: final Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( ) ;
rank: 354
score: 98.96888799252717
patch: if ( checker . converged ( max CaMeL Eval , steepest CaMeL Descent . clone ( ) ) ) {
rank: 354
score: 98.96274201766305
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL String ( point ) ;
rank: 354
score: 98.90046129728618
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . point ;
rank: 354
score: 98.82249755859375
patch: ++ max CaMeL Eval = this . iter ;
rank: 354
score: 98.76001848493304
patch: [ ] r = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 354
score: 98.68075900607639
patch: ++ iter ; iter ; for ++ ;
rank: 354
score: 98.60631561279297
patch: else { iter += 1 ; }
rank: 354
score: 98.60427676930146
patch: ++ iter ; while ( ! current . is CaMeL Na CaMeL N ( ) )
rank: 354
score: 98.60158962673611
patch: ++ iter ; ++ max ; / /
rank: 355
score: 99.01410466974431
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , r ) ;
rank: 355
score: 98.96266682942708
patch: double [ ] steepest CaMeL Descent = current ;
rank: 355
score: 98.82218627929687
patch: r [ max CaMeL Eval ] = ; }
rank: 355
score: 98.6806307705966
patch: if ++ iter ; ++ iter ; ++ iter ;
rank: 355
score: 98.60626220703125
patch: else { ++ * * iter ; }
rank: 355
score: 98.60362333409927
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; ++ current ;
rank: 355
score: 98.6009521484375
patch: ++ iter ; ++ / ;
rank: 356
score: 99.01406521267361
patch: delta = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction , r ) ;
rank: 356
score: 98.96266479492188
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( r ) ;
rank: 356
score: 98.89971160888672
patch: lsf = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 356
score: 98.82201334635417
patch: ++ max CaMeL Eval ++ ; return new Point CaMeL Value CaMeL Pair ;
rank: 356
score: 98.75857979910714
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair . Point CaMeL Value CaMeL Pair {
rank: 356
score: 98.680078125
patch: ++ iter ; if iter ; ++ iter ;
rank: 356
score: 98.60598754882812
patch: if ( iter == - 1 ;
rank: 356
score: 98.603515625
patch: while ( iter < iter ) {
rank: 356
score: 98.60023328993056
patch: ++ iter ; ++ ++ iter ; }
rank: 357
score: 99.01397705078125
patch: delta = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 357
score: 98.96820623224431
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 357
score: 98.96210327148438
patch: final double [ ] steepest CaMeL Descent = preconditioner . random ( ) ;
rank: 357
score: 98.899462890625
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ,
rank: 357
score: 98.82196044921875
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r [ 0 ] ;
rank: 357
score: 98.758544921875
patch: list = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 357
score: 98.67987060546875
patch: ++ iter ; else * int iter ;
rank: 357
score: 98.60566711425781
patch: else { / * * ; }
rank: 357
score: 98.60310363769531
patch: int iter = current . last CaMeL Index CaMeL Of ( ++ iter ) ;
rank: 358
score: 98.9679816750919
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 1 ) ;
rank: 358
score: 98.89896886488971
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) this ;
rank: 358
score: 98.82185668945313
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r [ iter ] ;
rank: 358
score: 98.75847516741071
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 358
score: 98.67946079799107
patch: ++ ++ ] ++ iter ;
rank: 358
score: 98.60563659667969
patch: if ( iter ; ++ iter ;
rank: 358
score: 98.60301795372597
patch: tmp = new Point CaMeL Value CaMeL Pair ( n ) ;
rank: 358
score: 98.59984130859375
patch: ++ iter ; ++ iter ; ++ null ;
rank: 359
score: 99.012861328125
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . clone ( point ) ;
rank: 359
score: 98.96171264648437
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( iter ) ;
rank: 359
score: 98.82183368389423
patch: ++ max CaMeL Eval = ++ max CaMeL Eval - iter ;
rank: 359
score: 98.75748697916667
patch: key = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 359
score: 98.67932807074652
patch: else if ++ iter ; ++ iter ;
rank: 359
score: 98.60548909505208
patch: if ( ! iter . is CaMeL Empty ++ $NUMBER$ )
rank: 359
score: 98.60299862132354
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) + n ;
rank: 359
score: 98.59968397352431
patch: ++ iter ; ; ++ iter ; iter
rank: 360
score: 99.01248301630434
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = null ;
rank: 360
score: 98.96705322265625
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point .
rank: 360
score: 98.96161852384868
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point ,
rank: 360
score: 98.89840087890624
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( update CaMeL Formula ) ;
rank: 360
score: 98.82159133184524
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter , iter ;
rank: 360
score: 98.75699869791667
patch: if ( iter < r . length )
rank: 360
score: 98.67824300130208
patch: i ++ ; ++ * ++ iter ;
rank: 360
score: 98.60535430908203
patch: else { ( ++ [ ] ;
rank: 360
score: 98.60282389322917
patch: if ( ! iter . is CaMeL Empty ( ) ; ++ iter )
rank: 360
score: 98.59952545166016
patch: ++ ! iter ; ++ iter ;
rank: 361
score: 98.96690673828125
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 361
score: 98.96160888671875
patch: final double [ ] steepest CaMeL Descent = preconditioner . ) ;
rank: 361
score: 98.82146857766544
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , $NUMBER$ ) ;
rank: 361
score: 98.75672149658203
patch: data = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 361
score: 98.60525851779514
patch: / * * * ++ iter ; }
rank: 361
score: 98.60256125710227
patch: if ( ! iter . equals ( current ) ;
rank: 361
score: 98.599365234375
patch: ++ ( ++ iter ; / /
rank: 362
score: 99.01230875651042
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( point ) ;
rank: 362
score: 98.96155395507813
patch: int [ ] steepest CaMeL Descent = preconditioner . get ( point ) ;
rank: 362
score: 98.89813701923077
patch: int n = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 362
score: 98.82145182291667
patch: r [ max CaMeL Eval ] = new Point CaMeL Value CaMeL Pair ;
rank: 362
score: 98.75643920898438
patch: self = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 362
score: 98.6765625
patch: ++ ++ * ++ iter ; ++ iter ;
rank: 362
score: 98.60503595525569
patch: Set < Object > iter = iter . length ;
rank: 362
score: 98.59912719726563
patch: ++ iter ; ++ iter ; -- 1 ;
rank: 363
score: 99.01208984375
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition ( point , r ) ;
rank: 363
score: 98.96680850074405
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; {
rank: 363
score: 98.96113891601563
patch: double [ ] steepest CaMeL Descent = preconditioner . current ( point ) ;
rank: 363
score: 98.89803372896634
patch: if ( Point CaMeL Value CaMeL Pair current != null ) {
rank: 363
score: 98.82139282226562
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 363
score: 98.75643157958984
patch: node = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 363
score: 98.6047871907552
patch: else if ++ iter ;
rank: 363
score: 98.60238826976104
patch: ++ iter ; if ( ! iter . compare CaMeL To ( current ) ) {
rank: 363
score: 98.59888805042614
patch: ++ iter ; ++ start ; } ++ iter ;
rank: 364
score: 98.9664794921875
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . this ) ;
rank: 364
score: 98.96091037326389
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner .
rank: 364
score: 98.89796956380208
patch: if ( compute CaMeL Objective CaMeL Gradient ( ) ) {
rank: 364
score: 98.821044921875
patch: ++ max CaMeL Eval = Math . min ( current . iter , ;
rank: 364
score: 98.75479561941964
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 364
score: 98.67605929904514
patch: ++ iter ; ++ * * ++ /
rank: 364
score: 98.60478379991319
patch: if ( iter < $NUMBER$ ; * /
rank: 364
score: 98.60191650390625
patch: if ( iter < max CaMeL Eval ) {
rank: 364
score: 98.59888458251953
patch: iter ; if ++ ++ iter ;
rank: 365
score: 99.011962890625
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point , r ) ;
rank: 365
score: 98.9608642578125
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( n ) ;
rank: 365
score: 98.82066243489584
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ;
rank: 365
score: 98.75448608398438
patch: block = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 365
score: 98.67575412326389
patch: ++ iter ; break ; if iter ;
rank: 365
score: 98.60458374023438
patch: else { iter * 0 . 0 / }
rank: 365
score: 98.60162760416667
patch: temp = new Point CaMeL Value CaMeL Pair ( iter , current ) ;
rank: 365
score: 98.59830932617187
patch: iter ; if ++ iter ; ++ iter ;
rank: 366
score: 99.01176183363971
patch: Point CaMeL Value CaMeL Pair start = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 366
score: 98.9662853422619
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( ) ;
rank: 366
score: 98.96070445667614
patch: double [ ] steepest CaMeL Descent = preconditioner . search CaMeL Direction [ 0 ] ;
rank: 366
score: 98.89759063720703
patch: if ( steepest CaMeL Descent . length ( ) > 0 ) {
rank: 366
score: 98.81998697916667
patch: ++ max CaMeL Eval = Math . max ( current . iter , ;
rank: 366
score: 98.75445556640625
patch: this = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 366
score: 98.67523871527777
patch: ++ iter ; if ++ ++ iter ;
rank: 366
score: 98.60453796386719
patch: else ; if ++ iter ; }
rank: 366
score: 98.60149274553571
patch: current = Math . min ( max CaMeL Eval , current ) ;
rank: 366
score: 98.59828694661458
patch: ++ iter ; ++ iter ; ; /
rank: 367
score: 99.01171875
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point ) ;
rank: 367
score: 98.96605335582386
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . true ) ;
rank: 367
score: 98.96065673828124
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( precondition ) ;
rank: 367
score: 98.89747450086806
patch: double steepest CaMeL Descent = preconditioner . get ( point ) ;
rank: 367
score: 98.81992409446023
patch: ++ max CaMeL Eval += r [ iter ] ;
rank: 367
score: 98.75441331129808
patch: result = compute CaMeL Objective CaMeL Gradient ( point . ) ;
rank: 367
score: 98.67482688210227
patch: ++ iter ; ++ * ++ iter ; iter ;
rank: 367
score: 98.60381401909723
patch: if ( ! iter . is CaMeL Empty ++ || iter . is CaMeL Empty ++ ;
rank: 367
score: 98.60146077473958
patch: throw new Runtime CaMeL Exception ( $STRING$ + n ) ;
rank: 367
score: 98.5982666015625
patch: ++ iter ; iter / - / /
rank: 368
score: 98.96569242931548
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . clone ( point , r ) ;
rank: 368
score: 98.960205078125
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner ( point ) ;
rank: 368
score: 98.81984641335227
patch: ++ iter ; if ; ++ max CaMeL Eval ;
rank: 368
score: 98.75417193244485
patch: item = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 368
score: 98.67470703125
patch: ++ ++ iter ; ++ iter ; iter ;
rank: 368
score: 98.60369466145833
patch: if ( ! iter . is CaMeL Empty ( ) ; break ; }
rank: 368
score: 98.601220703125
patch: if ( ! iter . compare CaMeL To ( current ) ) break ;
rank: 368
score: 98.5977783203125
patch: ++ iter ; ++ new ++ ; ++ iter ;
rank: 369
score: 99.01155813116776
patch: delta = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point ) ;
rank: 369
score: 98.96541101792279
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 369
score: 98.89723036024306
patch: current = compute CaMeL Objective CaMeL Gradient ( point . length , search CaMeL Direction ) ;
rank: 369
score: 98.81852583451705
patch: ++ iter ; iter = ++ max CaMeL Eval ;
rank: 369
score: 98.67466042258523
patch: ++ iter ; / * * / ++ iter ;
rank: 369
score: 98.60306803385417
patch: while ( ! iter . is CaMeL Empty ++ ) ;
rank: 369
score: 98.59764515269886
patch: ++ iter ; ++ n ; } ++ iter ;
rank: 370
score: 98.96531275699013
patch: Point CaMeL Value CaMeL Pair current = null ; Point CaMeL Value CaMeL Pair current = current ;
rank: 370
score: 98.9593172940341
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( steepest CaMeL Descent ) ;
rank: 370
score: 98.89713969983552
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 370
score: 98.81817985983456
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , 1 ) ;
rank: 370
score: 98.75299541766827
patch: int current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 370
score: 98.67439778645833
patch: ++ iter ; ; else ++ iter ;
rank: 370
score: 98.60027313232422
patch: if ( iter >= 0 ) {
rank: 370
score: 98.59732055664062
patch: ++ iter ; iter * / ++ iter ;
rank: 371
score: 98.96451822916667
patch: ++ steepest CaMeL Descent . precondition ( ) ;
rank: 371
score: 98.95916278545673
patch: final double [ ] steepest CaMeL Descent = false ;
rank: 371
score: 98.8969959077381
patch: final double steepest CaMeL Descent = preconditioner . precondition ( search CaMeL Direction ) ;
rank: 371
score: 98.81800130208333
patch: ++ iter ; Math . min ( max CaMeL Eval , iter ) ;
rank: 371
score: 98.6741943359375
patch: else * ++ iter ; if ++ iter ;
rank: 371
score: 98.60196261935764
patch: else { ++ iter ; ++ iter ;
rank: 371
score: 98.59952218191964
patch: current = Math . max ( max CaMeL Eval , n ) ;
rank: 371
score: 98.5972900390625
patch: ++ iter ; ++ Math = iter ;
rank: 372
score: 99.01047585227273
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction , point ) ;
rank: 372
score: 98.96446010044643
patch: Point CaMeL Value CaMeL Pair current = steepest CaMeL Descent . get ( point , r ) ;
rank: 372
score: 98.95875854492188
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition (
rank: 372
score: 98.8179702758789
patch: ++ max CaMeL Eval >= $NUMBER$ ;
rank: 372
score: 98.75265502929688
patch: [ ] compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 372
score: 98.67418077256944
patch: ++ iter ; if iter + iter ;
rank: 372
score: 98.60184326171876
patch: if ( iter > 0 ; return iter ;
rank: 372
score: 98.59930778952206
patch: return new Point CaMeL Value CaMeL Pair ( current . get CaMeL Parent ( ) ;
rank: 373
score: 98.95784505208333
patch: int [ ] search CaMeL Direction = steepest CaMeL Descent . iterator ( ) ;
rank: 373
score: 98.8968994140625
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , 0 ) ;
rank: 373
score: 98.81741672092014
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval - max CaMeL Eval ;
rank: 373
score: 98.75249372209821
patch: ( iter = compute CaMeL Objective CaMeL Gradient ( point ) ) ;
rank: 373
score: 98.67381456163194
patch: ++ * ++ iter ; for iter ;
rank: 373
score: 98.60098605685764
patch: / * * * * ++ iter ;
rank: 373
score: 98.59906768798828
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( ; }
rank: 373
score: 98.59564971923828
patch: ++ iter ; iter / -- ;
rank: 374
score: 98.96408913352273
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) search CaMeL Direction [ iter ] ;
rank: 374
score: 98.957763671875
patch: double [ ] search CaMeL Direction = preconditioner . precondition ( ) ;
rank: 374
score: 98.89679424579327
patch: double point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 374
score: 98.81722259521484
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ;
rank: 374
score: 98.75242396763393
patch: result = compute CaMeL Objective CaMeL Gradient ( update CaMeL Formula ) ;
rank: 374
score: 98.67381456163194
patch: ++ ++ ] iter ; ++ iter ;
rank: 374
score: 98.60060424804688
patch: Iterator iter = iter . iterator ++ ; else
rank: 374
score: 98.59825846354167
patch: ++ iter ; Thread . current CaMeL Thread ( ) . log ( ;
rank: 374
score: 98.59564887152777
patch: ++ iter ; ++ max - iter ;
rank: 375
score: 99.00960640285327
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , r ) ;
rank: 375
score: 98.96389903192934
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 375
score: 98.95733283547794
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( update CaMeL Formula ) ;
rank: 375
score: 98.89677734375
patch: if ( steepest CaMeL Descent . clone ( ) ) { {
rank: 375
score: 98.81614176432292
patch: if ( iter >= max CaMeL Eval ;
rank: 375
score: 98.75136021205357
patch: return new Point CaMeL Value CaMeL Pair ( point , solver ) ;
rank: 375
score: 98.67263357979911
patch: ++ * ; ++ iter ;
rank: 375
score: 98.60055541992188
patch: if ( ! iter . is CaMeL Empty ++ this . is CaMeL Empty ;
rank: 375
score: 98.59556995738636
patch: ++ iter ; ; ++ iter ; -- iter ;
rank: 376
score: 99.00937721946023
patch: byte [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 376
score: 98.96376389723558
patch: ++ n ; Point CaMeL Value CaMeL Pair current = current ;
rank: 376
score: 98.95723876953124
patch: double [ ] steepest CaMeL Descent = preconditioner . max ( point ) ;
rank: 376
score: 98.89628295898437
patch: Point CaMeL Value CaMeL Pair current = new Line CaMeL Search CaMeL Function ( search CaMeL Direction ) ;
rank: 376
score: 98.815771484375
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r , iter ) ;
rank: 376
score: 98.67253960503473
patch: else * ++ iter ; ++ 1 ;
rank: 376
score: 98.5994873046875
patch: if ( ! iter . is CaMeL Empty ++ || iter . is CaMeL Empty ++ )
rank: 376
score: 98.59743826729911
patch: ++ iter ; if ( ! current . compare CaMeL To ( ;
rank: 376
score: 98.59454956054688
patch: ++ iter ; iter = iter / iter ;
rank: 377
score: 98.96365517064145
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point . point ) ;
rank: 377
score: 98.89607747395833
patch: double [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 377
score: 98.81529405381944
patch: ++ iter - max CaMeL Eval -- ;
rank: 377
score: 98.75089518229167
patch: height += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 377
score: 98.67218017578125
patch: ++ iter ; iter ; String iter ;
rank: 377
score: 98.5982666015625
patch: else { else { ++ iter ; }
rank: 377
score: 98.59727783203125
patch: if ( max CaMeL Eval > iter ) {
rank: 378
score: 99.00918399586396
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = null ;
rank: 378
score: 98.96347878196023
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction . point ) ;
rank: 378
score: 98.81508091517857
patch: ++ max CaMeL Eval = Math . max ( iter , iter ;
rank: 378
score: 98.75022259880515
patch: previous = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 378
score: 98.598046875
patch: while ( ! iter . is CaMeL Empty ( ; ) . max ;
rank: 378
score: 98.59663391113281
patch: if ( iter == 0 ) {
rank: 378
score: 98.59419389204545
patch: ++ iter ; ++ iter ; -- iter ; }
rank: 379
score: 99.00889756944444
patch: delta += find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction . length ) ;
rank: 379
score: 98.9634650735294
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , true ) ;
rank: 379
score: 98.8150634765625
patch: ++ max CaMeL Eval ] = Math . max ( ;
rank: 379
score: 98.74913678850446
patch: block = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 379
score: 98.67159423828124
patch: ++ iter ; ++ * / int iter ;
rank: 379
score: 98.59742567274306
patch: / * * * ++ ++ * /
rank: 379
score: 98.59550206801471
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ; iter ++ ;
rank: 379
score: 98.59368896484375
patch: } iter ++ ; ++ iter ;
rank: 380
score: 99.00884454900569
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , iter ) ;
rank: 380
score: 98.95569428943452
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( $NUMBER$ ) ;
rank: 380
score: 98.89506979549633
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( 0 ) ;
rank: 380
score: 98.81488037109375
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) current . clone ( ;
rank: 380
score: 98.74853515625
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 380
score: 98.67153930664062
patch: ++ iter ; ++ iter ; int value ;
rank: 380
score: 98.59730113636364
patch: ++ [ ] iter = iter . length ; }
rank: 380
score: 98.59538717830883
patch: if ( ! iter . is CaMeL Empty ( ; ) ) { ++ iter ;
rank: 380
score: 98.59359305245536
patch: iter ; ++ iter ; ;
rank: 381
score: 99.00864955357143
patch: r = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 381
score: 98.95553588867188
patch: final double [ ] steepest CaMeL Descent ++ ;
rank: 381
score: 98.89506022135417
patch: current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction ) ;
rank: 381
score: 98.81486002604167
patch: r [ max CaMeL Eval ++ ] = Math . ;
rank: 381
score: 98.7477794828869
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair . Point CaMeL Value CaMeL Pair >
rank: 381
score: 98.67145385742188
patch: ++ iter ; ++ - ; ++ iter ;
rank: 381
score: 98.59721156529018
patch: if ( ! iter . is CaMeL Empty ( ; ++ iter ;
rank: 381
score: 98.59442545572917
patch: while ( ! current . ; current . is CaMeL Empty ( ) ;
rank: 381
score: 98.5935287475586
patch: iter ++ ; ++ ++ iter ;
rank: 382
score: 99.00861002604167
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > current = current ;
rank: 382
score: 98.9626797762784
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . false ) ;
rank: 382
score: 98.81480648643092
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , r ;
rank: 382
score: 98.74761199951172
patch: a = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 382
score: 98.5970458984375
patch: / * * * ++ ; * /
rank: 382
score: 98.59410400390625
patch: ++ iter ; while ( iter != 0 )
rank: 383
score: 99.0083895596591
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , value ) ;
rank: 383
score: 98.96253551136364
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction . search CaMeL Direction ) ;
rank: 383
score: 98.95529014185855
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL
rank: 383
score: 98.89418131510416
patch: ++ point . length ; Point CaMeL Value CaMeL Pair current = current ;
rank: 383
score: 98.81463913690476
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . get CaMeL Point ;
rank: 383
score: 98.74756577435662
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 383
score: 98.67052001953125
patch: else * ++ iter ; while ++ iter ;
rank: 383
score: 98.59671456473214
patch: if ( ! iter . is CaMeL Empty ( ; - $NUMBER$ ;
rank: 383
score: 98.59400092230902
patch: ++ iter ; if ( iter == ;
rank: 383
score: 98.59334309895833
patch: iter ; ++ iter ; / / /
rank: 384
score: 99.00821940104167
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair [ ] ;
rank: 384
score: 98.9552471454327
patch: int point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 384
score: 98.89406331380208
patch: final double steepest CaMeL Descent = preconditioner . precondition ( ) ;
rank: 384
score: 98.8143310546875
patch: ++ max CaMeL Eval % max CaMeL Eval ++ ; }
rank: 384
score: 98.74754987444196
patch: old = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 384
score: 98.67023383246527
patch: / * ] iter = ++ iter ;
rank: 384
score: 98.59656372070313
patch: ++ iter ; if ++ [ 0 ] ;
rank: 384
score: 98.59371337890624
patch: if ( current == null || current . ;
rank: 384
score: 98.59295099431819
patch: ++ iter ; ; ++ iter ; ++ 1 ;
rank: 385
score: 99.00760452835648
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( ) ;
rank: 385
score: 98.9622090657552
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 385
score: 98.95521240234375
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . length ( ) ;
rank: 385
score: 98.89401726973684
patch: steepest CaMeL Descent [ iter ] = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 385
score: 98.81413130326705
patch: ++ max CaMeL Eval = iter + iter ; ;
rank: 385
score: 98.74629211425781
patch: f = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 385
score: 98.67017957899306
patch: ++ iter ; ++ - int iter ;
rank: 385
score: 98.59642944335937
patch: / * * * ++ / ++ iter ;
rank: 385
score: 98.59368896484375
patch: ++ iter + iter ;
rank: 385
score: 98.59217071533203
patch: ++ ( iter ; / / /
rank: 386
score: 99.00752563476563
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction . length ) ;
rank: 386
score: 98.95513556985294
patch: double [ ] steepest CaMeL Descent = preconditioner . to CaMeL
rank: 386
score: 98.81412353515626
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter ; ;
rank: 386
score: 98.74628155048077
patch: ! current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 386
score: 98.67007107204861
patch: else * ++ iter ; if iter ;
rank: 386
score: 98.5963134765625
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter ;
rank: 386
score: 98.59346008300781
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ( ; ;
rank: 386
score: 98.59206321022727
patch: ++ iter ; ; ++ start ; ++ iter ;
rank: 387
score: 99.00752397017045
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ , 0 ) ;
rank: 387
score: 98.9618278952206
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point . point ) ;
rank: 387
score: 98.95491108141448
patch: double [ ] steepest CaMeL Descent = preconditioner . close ( ) ;
rank: 387
score: 98.89230581430289
patch: double current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 387
score: 98.81411946614584
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval ; ;
rank: 387
score: 98.74616350446429
patch: self = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 387
score: 98.67000122070313
patch: ++ iter ; * * / ++ iter ;
rank: 387
score: 98.59624565972223
patch: / * * ; if ++ iter ;
rank: 387
score: 98.5926513671875
patch: if ( current != null )
rank: 387
score: 98.59111022949219
patch: ++ 1 ; ++ iter ; else
rank: 388
score: 99.00716552734374
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( . ) ;
rank: 388
score: 98.96163807744566
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . get ( point ) ;
rank: 388
score: 98.89218284970238
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . length ( ) ;
rank: 388
score: 98.8140869140625
patch: ++ max CaMeL Eval ++ ; } ++ iter ;
rank: 388
score: 98.74585832868304
patch: list = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 388
score: 98.66989135742188
patch: ++ ++ ++ iter ;
rank: 388
score: 98.59596761067708
patch: / * * * * / * /
rank: 388
score: 98.592626953125
patch: ++ iter ; Thread . current CaMeL Thread ( ) . exit ( ;
rank: 388
score: 98.59055397727273
patch: ++ iter ; ++ * iter ; ++ iter ;
rank: 389
score: 99.0070467862216
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point + r ) ;
rank: 389
score: 98.89170328776042
patch: lsf = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 389
score: 98.81396484375
patch: r [ max CaMeL Eval ] = iter . ;
rank: 389
score: 98.7454833984375
patch: if ( point . length < point . length )
rank: 389
score: 98.66965060763889
patch: ++ iter ; / ; int iter ;
rank: 389
score: 98.59592013888889
patch: / * * * ++ * * ;
rank: 389
score: 98.59238503196023
patch: ++ iter ; if ( ! is CaMeL Empty ;
rank: 389
score: 98.59029541015624
patch: ++ iter ; ++ iter ; else break ;
rank: 390
score: 98.96156819661458
patch: Point CaMeL Value CaMeL Pair current = current . null ;
rank: 390
score: 98.81363677978516
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair (
rank: 390
score: 98.74536946614583
patch: list = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 390
score: 98.66914198133681
patch: ++ iter ; ++ * * * /
rank: 390
score: 98.5921401977539
patch: ++ iter ; while ( iter ;
rank: 391
score: 98.96141142003677
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( )
rank: 391
score: 98.95430501302083
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( current ) ;
rank: 391
score: 98.89153374565973
patch: return new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction . length ) ;
rank: 391
score: 98.8133877840909
patch: r [ max CaMeL Eval ] ; iter ++ ;
rank: 391
score: 98.74514770507812
patch: j = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 391
score: 98.66800537109376
patch: / * ] * * / ++ iter ;
rank: 391
score: 98.59498596191406
patch: if ( ! iter . is CaMeL Empty ++ this . iter . ++ ;
rank: 391
score: 98.59207916259766
patch: current = Math . max ( max CaMeL Eval , 0 . $NUMBER$ ) ;
rank: 391
score: 98.58955078125
patch: ++ iter ; ++ n ; -- iter ;
rank: 392
score: 99.006884765625
patch: double max = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 392
score: 98.96087091619319
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; }
rank: 392
score: 98.9542926290761
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 1 ) ;
rank: 392
score: 98.89118041992188
patch: final Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 392
score: 98.81326293945312
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval * ;
rank: 392
score: 98.66771104600694
patch: ++ 1 * iter ; ++ iter ;
rank: 392
score: 98.5946273803711
patch: if ( ! iter . is CaMeL Empty ++ this . iter . ++ )
rank: 392
score: 98.59188138521634
patch: tmp = new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 392
score: 98.5894775390625
patch: ++ iter ; ++ Math - iter ;
rank: 393
score: 99.00673421223958
patch: max CaMeL Eval += find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 393
score: 98.96066284179688
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 393
score: 98.9539566040039
patch: double [ ] steepest CaMeL Descent = preconditioner ) ;
rank: 393
score: 98.89114200367646
patch: double search CaMeL Direction = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 393
score: 98.81326293945312
patch: ++ max CaMeL Eval -- ; System . arraycopy ( ;
rank: 393
score: 98.74408830915179
patch: data = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 393
score: 98.66771104600694
patch: ++ n ; ++ iter ; iter ;
rank: 393
score: 98.59429931640625
patch: / * * * * ; ++ iter ;
rank: 393
score: 98.59171295166016
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) . ;
rank: 393
score: 98.58939208984376
patch: iter ++ ; ++ iter ; -- iter ;
rank: 394
score: 99.0055160522461
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 394
score: 98.96063523065476
patch: double [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( ) ;
rank: 394
score: 98.95343572443181
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ,
rank: 394
score: 98.81293194110577
patch: return new Point CaMeL Value CaMeL Pair ( iter , ; }
rank: 394
score: 98.74386596679688
patch: tree = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 394
score: 98.66701931423611
patch: ++ iter ; ++ else ++ iter ;
rank: 394
score: 98.59424845377605
patch: if ( ! iter . is CaMeL Empty ++ ++ )
rank: 394
score: 98.58904418945312
patch: ++ iter ; ++ iter ; += iter ;
rank: 395
score: 99.00548828125
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( point , r ) ;
rank: 395
score: 98.96061197916667
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . preconditioner ( point ) ;
rank: 395
score: 98.95306396484375
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . get ( point ) ;
rank: 395
score: 98.890869140625
patch: previous = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 395
score: 98.81255340576172
patch: r [ max CaMeL Eval ++ ] = Double . parse CaMeL Double ( ;
rank: 395
score: 98.74354771205357
patch: r = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 395
score: 98.665771484375
patch: ++ iter ; ++ iter ; for (
rank: 395
score: 98.59403170072116
patch: while ( ! iter . is CaMeL Empty ( ; ) ;
rank: 395
score: 98.59138997395833
patch: int n = Math . max ( max CaMeL Eval , iter ) ;
rank: 395
score: 98.5888338955966
patch: ++ iter ; ; if iter ; ++ iter ;
rank: 396
score: 99.00545247395833
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 396
score: 98.9605204264323
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point ) ;
rank: 396
score: 98.95289248511905
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = Line CaMeL Search CaMeL Function . precondition ;
rank: 396
score: 98.89070892333984
patch: if ( steepest CaMeL Descent . length ( ) < n ) {
rank: 396
score: 98.81220703125
patch: ++ iter ; r [ max CaMeL Eval ;
rank: 396
score: 98.74337005615234
patch: o = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 396
score: 98.66538492838542
patch: ++ iter ; ++ $NUMBER$ + iter ;
rank: 396
score: 98.59365505642361
patch: / * * * ++ * / }
rank: 396
score: 98.59132893880208
patch: ++ iter ; if ( iter == null ) continue ;
rank: 396
score: 98.5886459350586
patch: ++ iter ; iter / - /
rank: 397
score: 99.00541630497685
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > . Point CaMeL Value CaMeL Pair 1 ;
rank: 397
score: 98.95237426757812
patch: final int [ ] steepest CaMeL Descent = preconditioner . iterator ( ) ;
rank: 397
score: 98.890673828125
patch: double steepest CaMeL Descent = preconditioner . precondition ( point , 0 ) ;
rank: 397
score: 98.81115141369048
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Double . MAX _ VALUE ;
rank: 397
score: 98.74301583426339
patch: ( iter = compute CaMeL Objective CaMeL Gradient ( point ) ) {
rank: 397
score: 98.66511366102431
patch: ++ iter ; / * * ; /
rank: 397
score: 98.59364536830357
patch: if ( ! iter . is CaMeL Empty ( ; break ; }
rank: 397
score: 98.58843994140625
patch: ++ iter ; ; iter ++ ;
rank: 398
score: 98.9523395040761
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . to CaMeL String ( ) ;
rank: 398
score: 98.89038848876953
patch: if ( steepest CaMeL Descent . length ( ) == 0 ) {
rank: 398
score: 98.80986870659723
patch: ++ max CaMeL Eval [ iter ] ;
rank: 398
score: 98.74277169363839
patch: ++ iter ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 398
score: 98.66486273871527
patch: j ++ ; ++ ; ++ iter ;
rank: 398
score: 98.59343126085069
patch: if ( ! iter . is CaMeL Empty iter this . is CaMeL Empty ( ) ;
rank: 398
score: 98.58839925130208
patch: ++ iter ; iter ; / / /
rank: 399
score: 99.00513857886905
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . ) ;
rank: 399
score: 98.96027938179348
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . . clone ( ) ;
rank: 399
score: 98.80939592633929
patch: ++ max CaMeL Eval -- ; if ( max CaMeL Eval > ;
rank: 399
score: 98.74241129557292
patch: result = compute CaMeL Objective CaMeL Gradient ( current ) ;
rank: 399
score: 98.66476101345486
patch: ++ iter ; ++ iter ; int *
rank: 399
score: 98.59047444661458
patch: state = ++ iter ;
rank: 399
score: 98.58804660373264
patch: ++ ++ iter ; ++ iter ; else
rank: 400
score: 99.00485568576389
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > ) {
rank: 400
score: 98.96022630774456
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . clone ( ) ; ;
rank: 400
score: 98.89005533854167
patch: while ( true ) { Point CaMeL Value CaMeL Pair current = current ;
rank: 400
score: 98.80936279296876
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 400
score: 98.74195353190105
patch: min = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 400
score: 98.59303501674107
patch: ++ iter ; if ; }
rank: 400
score: 98.59031575520834
patch: int iter = current . index CaMeL Of ( $STRING$ ) + 1 ;
rank: 401
score: 99.00477091471355
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 401
score: 98.95954695991848
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point . search CaMeL Direction , r ) ;
rank: 401
score: 98.95204856178977
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 401
score: 98.88997156479779
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 401
score: 98.80934448242188
patch: ++ max CaMeL Eval % max CaMeL Eval ;
rank: 401
score: 98.74191284179688
patch: result = new Point CaMeL Value CaMeL Pair ( point ,
rank: 401
score: 98.66351996527777
patch: ++ iter ; ++ - * / /
rank: 401
score: 98.59300013950893
patch: while ( ! iter . is CaMeL Empty ( ; ) . ;
rank: 401
score: 98.58950805664062
patch: ++ iter ; if ( iter == current )
rank: 401
score: 98.58700900607639
patch: iter ; ++ iter ; while iter ;
rank: 402
score: 99.00467623197116
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 402
score: 98.95947943793402
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner ;
rank: 402
score: 98.95182495117187
patch: double [ ] steepest CaMeL Descent ;
rank: 402
score: 98.88987821691177
patch: Point CaMeL Value CaMeL Pair current = ( Line CaMeL Search CaMeL Function ) current ;
rank: 402
score: 98.74152080829327
patch: table = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 402
score: 98.66344536675348
patch: / ] ++ iter ; ++ iter ;
rank: 402
score: 98.59263258713942
patch: if ( ! iter . is CaMeL Empty ( ) ) }
rank: 402
score: 98.58950626148896
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) iter )
rank: 402
score: 98.586767578125
patch: ++ iter ; ++ iter ; ++ true ;
rank: 403
score: 99.00454872532895
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ,
rank: 403
score: 98.95177205403645
patch: int [ ] steepest CaMeL Descent = 0 ;
rank: 403
score: 98.88939412434895
patch: throw new Math CaMeL Internal CaMeL Error ( $STRING$ ) ;
rank: 403
score: 98.80877130681819
patch: r [ max CaMeL Eval ] = iter ; }
rank: 403
score: 98.74049595424107
patch: this = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 403
score: 98.6627197265625
patch: ++ iter ; iter * * iter ;
rank: 403
score: 98.59258674172794
patch: if ( ! iter . is CaMeL Empty ( ) ) . ++ iter ; }
rank: 403
score: 98.58887590680804
patch: j = Math . max ( iter , current . ++ ) ;
rank: 403
score: 98.58583577473958
patch: ++ iter ; iter / / ++ ;
rank: 404
score: 99.00431315104167
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > . Point CaMeL Value CaMeL Pair ++ ;
rank: 404
score: 98.95921415441177
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . 0 ) ;
rank: 404
score: 98.9515869140625
patch: final double [ ] steepest CaMeL Descent = preconditioner . current ( ) ;
rank: 404
score: 98.88921712239583
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent ;
rank: 404
score: 98.80845947265625
patch: ++ max CaMeL Eval = iter >> $NUMBER$ ;
rank: 404
score: 98.66264512803819
patch: ++ iter ; for ++ - iter ;
rank: 404
score: 98.59256320529514
patch: else { ++ [ $NUMBER$ ] ; }
rank: 404
score: 98.58855438232422
patch: current = Math . max ( max CaMeL Eval , current . length ) ;
rank: 404
score: 98.58559348366477
patch: ++ iter ; ++ iter ; if ++ 1 ;
rank: 405
score: 99.00417608963816
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . point ) ;
rank: 405
score: 98.95907827524039
patch: ++ max CaMeL Eval -= search CaMeL Direction [ n ] ;
rank: 405
score: 98.95134943181819
patch: final double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent .
rank: 405
score: 98.88883056640626
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , n ) ;
rank: 405
score: 98.80839233398437
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . get ( ;
rank: 405
score: 98.7392219094669
patch: result = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 405
score: 98.59205729166666
patch: if ( ! iter . is CaMeL Empty ++ ) return null ; }
rank: 405
score: 98.58840942382812
patch: ++ iter ; while ( iter == current )
rank: 405
score: 98.58541259765624
patch: ++ iter ; ++ iter ; iter / ;
rank: 406
score: 99.00409405048077
patch: delta = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 406
score: 98.95121837797619
patch: final long [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 406
score: 98.80806187220982
patch: r [ max CaMeL Eval ] = Math . max ( iter ;
rank: 406
score: 98.73920754825367
patch: tmp = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 406
score: 98.66168891059027
patch: ++ iter ; ++ iter + 0 ;
rank: 406
score: 98.59180559430804
patch: if ( ! iter . is CaMeL Empty ( ) ) throw ;
rank: 406
score: 98.58795166015625
patch: if ( ! iter . is CaMeL Empty ( ) ; ++ n ) {
rank: 407
score: 99.00377965856481
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point , 0 ) ;
rank: 407
score: 98.95863743832237
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( )
rank: 407
score: 98.8886654502467
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( point ) ;
rank: 407
score: 98.80803833007812
patch: r [ max CaMeL Eval ++ ] ; }
rank: 407
score: 98.661669921875
patch: / * ] * / / ++ iter ;
rank: 407
score: 98.59117780412946
patch: / * * * / /
rank: 407
score: 98.58682861328126
patch: if ( Math . abs ( iter ) ;
rank: 407
score: 98.584619140625
patch: ++ iter ; ++ iter ; / iter ;
rank: 408
score: 99.00372023809524
patch: double [ ] steepest CaMeL Descent = this . find CaMeL Upper CaMeL Bound ( point ) ;
rank: 408
score: 98.73745727539062
patch: symbol = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 408
score: 98.66156005859375
patch: / * ++ iter ; / / /
rank: 408
score: 98.59114213423295
patch: if ( iter == 0 ) return null ; }
rank: 408
score: 98.58670043945312
patch: if ( ! iter . compare CaMeL To ( current . ++ ) ) {
rank: 408
score: 98.58453369140625
patch: ++ iter ; iter } ++ ;
rank: 409
score: 98.95832170758929
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . length ;
rank: 409
score: 98.8883056640625
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , r ,
rank: 409
score: 98.8076680501302
patch: r [ max CaMeL Eval ++ ] = this . ;
rank: 409
score: 98.73741957720588
patch: found = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 409
score: 98.66146240234374
patch: / * ; ++ iter ; ++ iter ;
rank: 409
score: 98.59105767144098
patch: / * * * / iter ++ ;
rank: 409
score: 98.586669921875
patch: int iter = current . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;
rank: 409
score: 98.58428192138672
patch: ++ 0 ; ++ iter ; }
rank: 410
score: 98.95824133831522
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( null ) ;
rank: 410
score: 98.95031156994048
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( current ) ;
rank: 410
score: 98.88820393880208
patch: final double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 410
score: 98.80747680664062
patch: ++ max CaMeL Eval >= 0 ; * /
rank: 410
score: 98.7373279389881
patch: [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( point ) ;
rank: 410
score: 98.66064453125
patch: ++ iter ; ++ 1 ; ++ value ;
rank: 410
score: 98.59096854073661
patch: if ( ! ++ [ 0 ] . is CaMeL Empty ( ;
rank: 410
score: 98.5863506610577
patch: if ( ! iter . is CaMeL Empty ; ++ iter )
rank: 410
score: 98.58427598741319
patch: iter ++ ; ++ iter ; / /
rank: 411
score: 99.00358312270221
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 411
score: 98.95785522460938
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( 0 ) ;
rank: 411
score: 98.95026245117188
patch: double [ ] steepest CaMeL Descent = preconditioner . start ( point ) ;
rank: 411
score: 98.80738932291666
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) current ;
rank: 411
score: 98.73706732855902
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ; }
rank: 411
score: 98.66029866536458
patch: ++ iter ; while iter + 0 ;
rank: 411
score: 98.59017605251736
patch: if ( [ 0 ] != null ;
rank: 411
score: 98.58622472426471
patch: ++ iter ; Thread . current CaMeL Thread ( ) . wait ( iter ) ;
rank: 412
score: 99.00355288856908
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 412
score: 98.95780944824219
patch: return ( Point CaMeL Value CaMeL Pair ) search CaMeL Direction [ 0 ] ;
rank: 412
score: 98.949267578125
patch: double [ ] steepest CaMeL Descent = preconditioner . read ( point ) ;
rank: 412
score: 98.88788805509868
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ; }
rank: 412
score: 98.80713762555804
patch: r [ max CaMeL Eval ++ ] = this . ++ iter ;
rank: 412
score: 98.65971544053819
patch: ++ iter ; break ; int iter ;
rank: 412
score: 98.59006173270089
patch: if ( iter == 1 ;
rank: 412
score: 98.5858154296875
patch: if ( ! iter . is CaMeL Empty ( ) ) break ; ++ iter ;
rank: 412
score: 98.58396218039773
patch: ++ iter ; ++ iter ; else throw iter ;
rank: 413
score: 99.00355113636364
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , point ) ;
rank: 413
score: 98.95747593470982
patch: while ( iter < steepest CaMeL Descent . length ) {
rank: 413
score: 98.948486328125
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( 0 ) ;
rank: 413
score: 98.80705261230469
patch: ++ max CaMeL Eval * ++ ;
rank: 413
score: 98.7364501953125
patch: items = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 413
score: 98.65888807508681
patch: / * ++ iter ; iter * /
rank: 413
score: 98.59005126953124
patch: * * * * * / ++ iter ;
rank: 413
score: 98.58579388786765
patch: ++ iter ; if ( ! current . is CaMeL Empty ( ) ) break ;
rank: 413
score: 98.58388061523438
patch: ++ iter ; ++ iter ; ; iter ;
rank: 414
score: 98.95734049479167
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current . point ;
rank: 414
score: 98.9484130859375
patch: final double [ ] steepest CaMeL Descent = preconditioner . ( point ) ;
rank: 414
score: 98.88756713867187
patch: while ( iter < point . length ) {
rank: 414
score: 98.80702561598558
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval -- ;
rank: 414
score: 98.7361309344952
patch: tree = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 414
score: 98.65814208984375
patch: ++ * ++ 0 ; ++ iter ;
rank: 414
score: 98.58993966238839
patch: if ( ! iter . is CaMeL Empty ++ ) . max ;
rank: 414
score: 98.58537153764205
patch: temp = new Point CaMeL Value CaMeL Pair ( ;
rank: 414
score: 98.5835693359375
patch: ++ iter ; ++ iter ; ++ current ;
rank: 415
score: 98.94835895040761
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( point , r ) ;
rank: 415
score: 98.88746995192308
patch: if ( update CaMeL Formula ( search CaMeL Direction ) ) {
rank: 415
score: 98.80690104166666
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) get ;
rank: 415
score: 98.73609924316406
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent ) {
rank: 415
score: 98.65789116753473
patch: ++ iter ; ++ iter ; value ;
rank: 415
score: 98.58970540364584
patch: while ( ! iter . is CaMeL Empty ( ) ) return null ;
rank: 415
score: 98.58467923677884
patch: return new Point CaMeL Value CaMeL Pair ( iter , current )
rank: 415
score: 98.58356391059027
patch: ++ new ++ ; ++ iter ; ;
rank: 416
score: 98.95703125
patch: final double [ ] steepest CaMeL Descent = preconditioner . clone ( )
rank: 416
score: 98.94835844494048
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . close ( ) ;
rank: 416
score: 98.80672200520833
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) this . ++ iter ;
rank: 416
score: 98.73578239889706
patch: other = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 416
score: 98.65748814174107
patch: start ++ ; ++ iter ;
rank: 416
score: 98.58949631911058
patch: if ( ! iter . is CaMeL Empty ( 0 ) ;
rank: 416
score: 98.58351828835227
patch: ++ iter ; ++ iter ; return iter ; ;
rank: 417
score: 98.95701246995192
patch: ++ max CaMeL Eval -= search CaMeL Direction [ r ] ;
rank: 417
score: 98.94832710597827
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , null ) ;
rank: 417
score: 98.88673909505208
patch: if ( update CaMeL Formula ) { {
rank: 417
score: 98.80640758167614
patch: ++ max CaMeL Eval = get CaMeL Context ( ;
rank: 417
score: 98.65744454520089
patch: else * / ++ iter ;
rank: 417
score: 98.58944266183036
patch: if ( ! iter . is CaMeL Empty ( ; - 1 )
rank: 417
score: 98.58445387620192
patch: ++ iter ; if ( max CaMeL Eval != 0 ) {
rank: 418
score: 98.95641276041667
patch: Point CaMeL Value CaMeL Pair current = search CaMeL Direction [ 0 ] ;
rank: 418
score: 98.94806780133929
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent 1 . clone ( ) ;
rank: 418
score: 98.8863994891827
patch: double solver = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 418
score: 98.80618896484376
patch: ++ max CaMeL Eval ; ++ iter ; ;
rank: 418
score: 98.73556954520089
patch: a = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 418
score: 98.65719943576389
patch: ++ iter ; try { if iter ;
rank: 418
score: 98.58927612304687
patch: if ( iter == 0 ; return iter )
rank: 418
score: 98.5843505859375
patch: ++ iter ; if ; ++ iter ;
rank: 418
score: 98.58308628627232
patch: ++ r ; ++ iter ;
rank: 419
score: 98.95621490478516
patch: double [ ] steepest CaMeL Descent = preconditioner . {
rank: 419
score: 98.94806463068181
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , true ) ;
rank: 419
score: 98.88626259251645
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . r ;
rank: 419
score: 98.80607386997768
patch: ++ max CaMeL Eval = iter + current . hash CaMeL Code ;
rank: 419
score: 98.73472377232143
patch: list = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 419
score: 98.65668402777777
patch: ++ iter ; * * * / /
rank: 419
score: 98.5886962890625
patch: else { ++ 0 ; ++ iter ; }
rank: 419
score: 98.58414952895221
patch: ++ iter ; Thread . current CaMeL Thread ( ) . sleep ( $NUMBER$ ) ;
rank: 419
score: 98.58286830357143
patch: ++ new ; ++ iter ;
rank: 420
score: 98.9561077615489
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( true ) ;
rank: 420
score: 98.94785378196023
patch: double [ ] steepest CaMeL Descent = preconditioner . to CaMeL String ( point ) ;
rank: 420
score: 98.88590698242187
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , search CaMeL Direction ) ;
rank: 420
score: 98.80604771205357
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter , iter ;
rank: 420
score: 98.73350423177084
patch: result = new Point CaMeL Value CaMeL Pair ( point , 1 ) ;
rank: 420
score: 98.65660264756944
patch: ++ 0 ; ++ * ++ iter ;
rank: 420
score: 98.5884258563702
patch: if ( ! iter . is CaMeL Empty ( iter ) ;
rank: 420
score: 98.58412388392857
patch: start = Math . max ( iter , current . ++ ) ;
rank: 420
score: 98.58216688368056
patch: ++ iter ; ; if iter -- ;
rank: 421
score: 99.002333984375
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( 0 ) ;
rank: 421
score: 98.95588822798295
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . 1 ) ;
rank: 421
score: 98.88581848144531
patch: int max CaMeL Eval = preconditioner . precondition ( point ) ;
rank: 421
score: 98.8060302734375
patch: l [ max CaMeL Eval ++ ] = ;
rank: 421
score: 98.73299407958984
patch: entry = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 421
score: 98.65604654947917
patch: if ++ iter ; ++ - iter ;
rank: 421
score: 98.58821323939732
patch: else { ++ max ; }
rank: 421
score: 98.58367560891544
patch: ++ iter ; Thread . current CaMeL Thread ( ) . wait ( true ) ;
rank: 421
score: 98.58135986328125
patch: ++ iter ; ++ start ; -- iter ;
rank: 422
score: 99.00217603600544
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * double CaMeL Value ;
rank: 422
score: 98.95548872514205
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . point . point ) ;
rank: 422
score: 98.8856689453125
patch: double search CaMeL Direction = steepest CaMeL Descent [ iter ] ;
rank: 422
score: 98.80587768554688
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , 0 ;
rank: 422
score: 98.65553501674107
patch: ++ iter ; for iter ;
rank: 422
score: 98.58818223741319
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . contains ;
rank: 422
score: 98.58246208639706
patch: int iter = current . last CaMeL Index CaMeL Of ( ++ ) + 1 ;
rank: 422
score: 98.5812100497159
patch: ++ iter ; ++ n ; ; ++ iter ;
rank: 423
score: 99.00181070963542
patch: current = find CaMeL Upper CaMeL Bound ( point . length , initial CaMeL Step ) ;
rank: 423
score: 98.95491297104779
patch: ++ max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 423
score: 98.94730050223214
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 423
score: 98.88558349609374
patch: if ( n < r . length ) {
rank: 423
score: 98.80563534007354
patch: ++ max CaMeL Eval ++ ; return new Point CaMeL Value CaMeL Pair ( iter ;
rank: 423
score: 98.73249816894531
patch: t = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 423
score: 98.65538940429687
patch: ++ iter ; ++ * * - iter ;
rank: 423
score: 98.5877685546875
patch: while ( ! iter . is CaMeL Empty ++ ) {
rank: 423
score: 98.58203735351563
patch: ++ iter ; if ( iter < n )
rank: 423
score: 98.58068084716797
patch: ++ iter ; ++ iter ; this
rank: 424
score: 99.00180886008523
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , this ) ;
rank: 424
score: 98.9471102627841
patch: final double [ ] steepest CaMeL Descent = preconditioner . Point CaMeL Value CaMeL Pair ;
rank: 424
score: 98.88552374588816
patch: int [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 424
score: 98.73238699776786
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . do CaMeL Optimize ( ) )
rank: 424
score: 98.65526665581598
patch: * * ++ iter ; ++ iter ;
rank: 424
score: 98.58770751953125
patch: else { / * * / / }
rank: 424
score: 98.58169119698661
patch: while ( ! iter . is CaMeL Empty ( ; ) ) {
rank: 424
score: 98.58037775213069
patch: ++ iter ; ++ iter ; * ++ iter ;
rank: 425
score: 99.00167142427884
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 425
score: 98.95475260416667
patch: Point CaMeL Value CaMeL Pair current = current . current ; Point CaMeL Value CaMeL Pair current = null ;
rank: 425
score: 98.94682173295455
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ,
rank: 425
score: 98.88526068793402
patch: final double search CaMeL Direction = steepest CaMeL Descent [ max CaMeL Eval ] ;
rank: 425
score: 98.80520450367646
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , $NUMBER$ ) ;
rank: 425
score: 98.7319400185033
patch: [ ] steepest CaMeL Descent = preconditioner . clone ( point ) ;
rank: 425
score: 98.65468343098958
patch: ++ iter ; int iter * ++ ;
rank: 425
score: 98.58763709435097
patch: if ( ! iter . is CaMeL Empty ( ; return ;
rank: 425
score: 98.5812237079327
patch: ++ iter ; if ( current . index CaMeL Of ( ;
rank: 425
score: 98.57996961805556
patch: ++ iter ; ; if ++ 1 ;
rank: 426
score: 99.00142822265624
patch: Evaluations [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 426
score: 98.95431954520089
patch: ++ iter ; final Point CaMeL Value CaMeL Pair current = current ;
rank: 426
score: 98.94671223958333
patch: int search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 426
score: 98.88514709472656
patch: current = current . compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 426
score: 98.8049785907452
patch: ++ max CaMeL Eval = iter + current . iter ; ;
rank: 426
score: 98.73128509521484
patch: state = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 426
score: 98.65466986762152
patch: / * ++ iter ; int iter ;
rank: 426
score: 98.58740912543402
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ( iter ;
rank: 426
score: 98.58118489583333
patch: while ( ! iter . is CaMeL Empty ( ) ) ++ iter ;
rank: 426
score: 98.57994495738636
patch: ++ iter ; ++ iter ; -- iter ; ;
rank: 427
score: 99.00112915039062
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point ,
rank: 427
score: 98.94652157738095
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 427
score: 98.88510470920139
patch: final double steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 427
score: 98.8049560546875
patch: return new Point CaMeL Value CaMeL Pair ( iter , max CaMeL Eval ;
rank: 427
score: 98.73126831054688
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) ) ;
rank: 427
score: 98.654345703125
patch: ++ iter ; ++ iter ; int 1 ;
rank: 427
score: 98.58724539620536
patch: if ( ! iter . is CaMeL Empty ( ; ++ 0 ;
rank: 427
score: 98.58106340680804
patch: current = Math . max ( 0 , current . ++ ) ;
rank: 427
score: 98.57978515625
patch: ++ iter ; ; ++ iter ; / /
rank: 428
score: 99.00110802283653
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair 1 ;
rank: 428
score: 98.95405129825367
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 428
score: 98.94649658203124
patch: List [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 428
score: 98.80464002821181
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 428
score: 98.73082624162946
patch: j = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 428
score: 98.58721923828125
patch: if ( ! iter . is CaMeL Empty ( ) ) ; }
rank: 428
score: 98.5807113647461
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) - iter ;
rank: 428
score: 98.57971801757813
patch: iter ; ++ ++ iter ; ++ iter ;
rank: 429
score: 99.00102095170455
patch: r = find CaMeL Upper CaMeL Bound ( ) ;
rank: 429
score: 98.95375754616477
patch: final double [ ] steepest CaMeL Descent = preconditioner . get CaMeL Point ( ) ;
rank: 429
score: 98.80438995361328
patch: ++ max CaMeL Eval - 1 ;
rank: 429
score: 98.72946602957589
patch: f = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 429
score: 98.65421549479167
patch: else ++ iter ; ++ - iter ;
rank: 429
score: 98.58697040264423
patch: if ( ! iter . is CaMeL Empty ( ) ) ;
rank: 429
score: 98.58057657877605
patch: ++ iter ; if ( current . compare CaMeL To ;
rank: 430
score: 99.00088500976562
patch: double delta = find CaMeL Upper CaMeL Bound ( ) ;
rank: 430
score: 98.94513702392578
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent
rank: 430
score: 98.884033203125
patch: double search CaMeL Direction [ ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 430
score: 98.80411376953126
patch: ++ max CaMeL Eval = iter - 1 ;
rank: 430
score: 98.72918701171875
patch: children = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 430
score: 98.65407307942708
patch: ++ iter ; iter ; ++ 1 ;
rank: 430
score: 98.58048502604167
patch: tmp = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 430
score: 98.57957874644886
patch: ++ iter ; ; ++ n ; ++ iter ;
rank: 431
score: 98.94482421875
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , current ) ;
rank: 431
score: 98.8040020282452
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ++ ; }
rank: 431
score: 98.72884114583333
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 , r ) ;
rank: 431
score: 98.65399848090277
patch: / * ++ iter ; ++ * /
rank: 431
score: 98.58047049386161
patch: ++ iter ; if ( super . is CaMeL Empty ( ) )
rank: 432
score: 99.00062866210938
patch: Point CaMeL Value CaMeL Pair point = current ;
rank: 432
score: 98.95285034179688
patch: ++ max CaMeL Eval -= n ;
rank: 432
score: 98.94474283854167
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( 1 ) ;
rank: 432
score: 98.88330796185662
patch: if ( steepest CaMeL Descent . length < r . length ) { {
rank: 432
score: 98.80398898654514
patch: ++ max CaMeL Eval * iter ; ;
rank: 432
score: 98.72871537642045
patch: y = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 432
score: 98.65380859375
patch: try { ++ iter ; while iter ;
rank: 432
score: 98.586474609375
patch: if ++ iter ;
rank: 432
score: 98.58006940569196
patch: current = Math . max ( current , current . ++ ) ;
rank: 432
score: 98.57942962646484
patch: iter ++ ;
rank: 433
score: 98.952685546875
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . $STRING$ ;
rank: 433
score: 98.94451904296875
patch: delta += search CaMeL Direction [ iter ] ;
rank: 433
score: 98.88213752297794
patch: double search CaMeL Direction [ ] = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 433
score: 98.80397338867188
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter ;
rank: 433
score: 98.6537353515625
patch: ++ iter ; ++ * * iter ; /
rank: 433
score: 98.5864727313702
patch: if ( ! iter . is CaMeL Empty ( 1 ) ;
rank: 433
score: 98.57982526506696
patch: ++ iter ; if ( ! iter . is CaMeL Empty ; }
rank: 433
score: 98.57922973632813
patch: iter iter ++ ; ++ ; ++ iter ;
rank: 434
score: 98.99998890269886
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ , point ) ;
rank: 434
score: 98.88186209542411
patch: double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 434
score: 98.80367279052734
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval - iter ;
rank: 434
score: 98.72837919347427
patch: table = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 434
score: 98.65265570746527
patch: else * ++ iter ; ++ * /
rank: 434
score: 98.58567810058594
patch: if ( ! iter . is CaMeL Empty ++ this . iter . 0 ;
rank: 434
score: 98.57963053385417
patch: ++ iter - iter ; ++ iter ;
rank: 434
score: 98.57899305555556
patch: ++ iter ; ++ iter ; while ;
rank: 435
score: 98.99985573508523
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( this , point ) ;
rank: 435
score: 98.9526008157169
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , false ) ;
rank: 435
score: 98.94442928538604
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , false ) ;
rank: 435
score: 98.80352228338069
patch: r [ max CaMeL Eval - 1 ] = ;
rank: 435
score: 98.72832489013672
patch: obj = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 435
score: 98.65265447443181
patch: ++ iter ; ++ * * ++ - iter ;
rank: 435
score: 98.58563232421875
patch: ++ iter ; while ;
rank: 435
score: 98.5788330078125
patch: ++ iter ; ++ iter ; ++ $STRING$ ;
rank: 435
score: 98.57865142822266
patch: if ( ! iter . is CaMeL Empty ( ) ) current = iter ;
rank: 436
score: 98.99968610491071
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = point . length ;
rank: 436
score: 98.88166046142578
patch: if ( compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) )
rank: 436
score: 98.80344645182292
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 436
score: 98.72822122012867
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 436
score: 98.65152994791667
patch: ++ iter ; for iter { ++ ;
rank: 436
score: 98.58554311899039
patch: if ( ! iter . is CaMeL Empty ( ; continue ;
rank: 436
score: 98.57862345377605
patch: ++ iter ; ++ n ; System . out . ;
rank: 436
score: 98.57841661241319
patch: ++ iter ; ++ iter ; ; }
rank: 437
score: 98.99953391335227
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , point ) ;
rank: 437
score: 98.9522196451823
patch: max CaMeL Eval -= search CaMeL Direction [ 0 ] ;
rank: 437
score: 98.94415893554688
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( 1 ) ;
rank: 437
score: 98.80314127604167
patch: r [ max CaMeL Eval ] = iter . iter ;
rank: 437
score: 98.72789588341347
patch: prev = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 437
score: 98.65140991210937
patch: if iter ; ++ iter ; ++ iter ;
rank: 437
score: 98.5848388671875
patch: } else { if ++ iter ; }
rank: 437
score: 98.57837727864583
patch: current = Math . min ( max CaMeL Eval , current . ++ ;
rank: 437
score: 98.57820434570313
patch: ++ iter ; iter / ; -- iter ;
rank: 438
score: 98.99918910435268
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 438
score: 98.95122213924633
patch: ++ iter ; int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ) ;
rank: 438
score: 98.88113742404514
patch: int max CaMeL Eval = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 438
score: 98.80264047475961
patch: r [ max CaMeL Eval ] = Math . abs ( ;
rank: 438
score: 98.72785295758929
patch: sm= compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 438
score: 98.65107865767045
patch: ++ iter ; ++ 1 ; ++ - iter ;
rank: 438
score: 98.58472357855902
patch: / * * ++ * * * /
rank: 438
score: 98.57822487571023
patch: ++ iter ; if ( iter != current ) {
rank: 438
score: 98.57695007324219
patch: ++ iter ; ++ ! iter ;
rank: 439
score: 98.88112095424107
patch: final double n = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 439
score: 98.80247913707386
patch: ++ max CaMeL Eval = ; * / * /
rank: 439
score: 98.72740936279297
patch: curr = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 439
score: 98.65092250279018
patch: ++ iter ; else break ;
rank: 439
score: 98.58470323350694
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ( current ;
rank: 439
score: 98.57760854867789
patch: result = new Point CaMeL Value CaMeL Pair ( n ) ;
rank: 439
score: 98.57663302951389
patch: ++ iter ; ++ / / / /
rank: 440
score: 98.99869791666667
patch: delta = find CaMeL Upper CaMeL Bound ( point . length , initial CaMeL Step ) ;
rank: 440
score: 98.94354802911931
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , false ) ;
rank: 440
score: 98.88090297154018
patch: if ( ! compute CaMeL Objective CaMeL Gradient ( point ) ) {
rank: 440
score: 98.80219116210938
patch: ++ iter ; ++ max CaMeL Eval ; ;
rank: 440
score: 98.7272705078125
patch: int iter = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 440
score: 98.65076293945313
patch: ++ iter ; ++ 1 ; ++ 1 ;
rank: 440
score: 98.58418104383681
patch: if ( ! iter . is CaMeL Empty ( ) ) . iter . close ( ;
rank: 440
score: 98.57760620117188
patch: ++ iter ; if ( iter != current )
rank: 440
score: 98.57646942138672
patch: iter ; ++ iter ; ++ ;
rank: 441
score: 98.9984130859375
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , $STRING$ ) ;
rank: 441
score: 98.95058371803977
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . r ) ;
rank: 441
score: 98.88076300370066
patch: double steepest CaMeL Descent = preconditioner . precondition ( point , r ,
rank: 441
score: 98.72690054086539
patch: p = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 441
score: 98.65070134943181
patch: ++ iter ; ++ 1 ; ++ * iter ;
rank: 441
score: 98.58399047851563
patch: if ( iter == $NUMBER$ ; return iter ;
rank: 441
score: 98.57719421386719
patch: while ( ! current . is CaMeL Empty ( ) ) { ++ n ;
rank: 441
score: 98.57607693142361
patch: ++ 0 ; ++ iter ; / /
rank: 442
score: 98.99804077148437
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( max ) ;
rank: 442
score: 98.95032755533855
patch: if ( update CaMeL Formula . converged ( ) ) {
rank: 442
score: 98.94326171875
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . class ;
rank: 442
score: 98.88006591796875
patch: ++ max CaMeL Eval ; steepest CaMeL Descent .
rank: 442
score: 98.8015887920673
patch: ++ max CaMeL Eval = ++ max CaMeL Eval - 1 ;
rank: 442
score: 98.72614602481617
patch: data = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 442
score: 98.64990234375
patch: else iter * ++ ; ++ iter ;
rank: 442
score: 98.58389986478366
patch: ++ [ ] iter = iter . length ; ++ iter ;
rank: 442
score: 98.57613699776786
patch: ++ iter ; if ( super . is CaMeL Empty ( ) ;
rank: 442
score: 98.5757168856534
patch: ++ iter ; ; ++ 0 ; ++ iter ;
rank: 443
score: 98.94276646205357
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( delta ) ;
rank: 443
score: 98.80156114366319
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r . ;
rank: 443
score: 98.7261075106534
patch: n = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 443
score: 98.64817116477273
patch: ++ * ++ iter ; ++ iter ; iter ;
rank: 443
score: 98.58363037109375
patch: / * * * / * ++ iter ;
rank: 443
score: 98.57562255859375
patch: if ( current != null ) ++ iter ;
rank: 444
score: 98.95013427734375
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . 1 ) ;
rank: 444
score: 98.9418612393466
patch: double [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( point ) ;
rank: 444
score: 98.87965901692708
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , point ) ;
rank: 444
score: 98.80152803308823
patch: ++ max CaMeL Eval >= Math . max ( max CaMeL Eval , 0 ) ;
rank: 444
score: 98.64790482954545
patch: ++ iter ; ++ * * ++ * iter ;
rank: 444
score: 98.58303493923611
patch: else { ++ [ iter ] ; }
rank: 444
score: 98.57553932883523
patch: ++ iter ; ++ start ; ; ++ iter ;
rank: 444
score: 98.575439453125
patch: current = ++ iter ;
rank: 445
score: 98.99774169921875
patch: double steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 445
score: 98.94992897727273
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . . clone ( ) ;
rank: 445
score: 98.94140625
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = steepest CaMeL Descent . length ;
rank: 445
score: 98.87894933363971
patch: ++ iter ; double [ ] steepest CaMeL Descent . clone ( ) ;
rank: 445
score: 98.80138221153847
patch: ++ max CaMeL Eval = ++ max CaMeL Eval + 1 ;
rank: 445
score: 98.72598470052084
patch: tmp = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 445
score: 98.64766845703124
patch: ++ iter ; ++ iter ; for iter {
rank: 445
score: 98.58270818536931
patch: if ( ! iter . contains ( iter ) )
rank: 445
score: 98.57551574707031
patch: iter ; ++ iter ; break ;
rank: 445
score: 98.5754165649414
patch: ++ iter ; start = iter ;
rank: 446
score: 98.997314453125
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > . Point CaMeL Value CaMeL Pair *
rank: 446
score: 98.93976702008929
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( n ) ;
rank: 446
score: 98.8786954012784
patch: ++ iter ; if ( update CaMeL Formula ) {
rank: 446
score: 98.80088704427084
patch: return new Point CaMeL Value CaMeL Pair ( iter , iter , iter ;
rank: 446
score: 98.72576032366071
patch: node = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 446
score: 98.64761962890626
patch: ++ iter ; * / if ++ iter ;
rank: 446
score: 98.58196149553571
patch: if ( ! iter . is CaMeL Empty ( ) ; * ;
rank: 446
score: 98.57526397705078
patch: if ( ! current . is CaMeL Empty ( ) ) { break ; }
rank: 446
score: 98.57523803710937
patch: ++ iter ; ++ iter ; } / /
rank: 447
score: 98.99729410807292
patch: current = find CaMeL Upper CaMeL Bound ( point . length , search CaMeL Direction ) ;
rank: 447
score: 98.94963073730469
patch: while ( iter < steepest CaMeL Descent . clone ( ) ) {
rank: 447
score: 98.9396464029948
patch: int [ ] steepest CaMeL Descent = true ;
rank: 447
score: 98.87854585193452
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( iter ) ;
rank: 447
score: 98.8008041381836
patch: ++ max CaMeL Eval % $NUMBER$ ;
rank: 447
score: 98.72574013157895
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ ) ;
rank: 447
score: 98.64754231770833
patch: ++ iter ; iter ; for iter ;
rank: 447
score: 98.57526312934027
patch: while ( true ) { ++ iter ;
rank: 447
score: 98.57517311789773
patch: ++ iter ; ++ iter ; ; iter -- ;
rank: 448
score: 98.99709065755208
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction . length ) ;
rank: 448
score: 98.94954427083333
patch: Point CaMeL Value CaMeL Pair current = search CaMeL Direction [ iter ] ;
rank: 448
score: 98.93945922851563
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , false ) ;
rank: 448
score: 98.87850149054276
patch: max CaMeL Eval = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 448
score: 98.80072631835938
patch: ++ max CaMeL Eval ; iter += iter ;
rank: 448
score: 98.725341796875
patch: prev = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 448
score: 98.64682006835938
patch: ++ iter ; while iter ; ++ iter ;
rank: 448
score: 98.58157687717014
patch: else { ++ 0 ; ++ iter ;
rank: 448
score: 98.57483849158653
patch: ++ n ; if ( ! iter . is CaMeL Empty ;
rank: 448
score: 98.57361949573864
patch: ++ iter ; ++ iter ; else * iter ;
rank: 449
score: 98.94951629638672
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 ,
rank: 449
score: 98.9394198330966
patch: double [ ] search CaMeL Direction = preconditioner . find CaMeL Upper CaMeL Bound ( point ) ;
rank: 449
score: 98.80056326729911
patch: ++ max CaMeL Eval $NUMBER$ ;
rank: 449
score: 98.725341796875
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ; ++ iter ;
rank: 449
score: 98.64652506510417
patch: ++ iter ; ++ - * ; /
rank: 449
score: 98.58128865559895
patch: if ( ! iter . is CaMeL Empty ++ true )
rank: 449
score: 98.57462935014205
patch: ++ iter ; ++ iter ; current = iter ;
rank: 449
score: 98.57357788085938
patch: ++ iter ; ++ iter ; / break ;
rank: 450
score: 98.99696416440217
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > current = current ;
rank: 450
score: 98.94943104619566
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . clone ( point ) ;
rank: 450
score: 98.93932342529297
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent .
rank: 450
score: 98.80043247767857
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter , r ;
rank: 450
score: 98.72524789663461
patch: Integer iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 450
score: 98.64576551649306
patch: / * ] ++ iter ; * /
rank: 450
score: 98.58059256417411
patch: while ( ! iter . is CaMeL Empty ( ) ) continue ;
rank: 450
score: 98.57447398792614
patch: return new Point CaMeL Value CaMeL Pair ( current )
rank: 451
score: 98.99667358398438
patch: current = find CaMeL Upper CaMeL Bound ( point , max CaMeL Eval ) ;
rank: 451
score: 98.87771767064145
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( iter ) ;
rank: 451
score: 98.80029296875
patch: ++ max CaMeL Eval = get CaMeL Context ( ) . ++ max CaMeL Eval ;
rank: 451
score: 98.72522844587054
patch: o = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 451
score: 98.5804931640625
patch: else { ++ 0 ; } ++ iter ;
rank: 451
score: 98.5743408203125
patch: ++ iter ; if ( iter == 0 ) continue ;
rank: 451
score: 98.57272338867188
patch: ++ iter ; iter * / /
rank: 452
score: 98.99652099609375
patch: byte [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ;
rank: 452
score: 98.94928533380681
patch: double CaMeL Value = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction . search CaMeL Direction ) ;
rank: 452
score: 98.93861389160156
patch: double [ ] steepest CaMeL Descent = preconditioner . ;
rank: 452
score: 98.8776611328125
patch: double delta = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 452
score: 98.8001708984375
patch: result = new Point CaMeL Value CaMeL Pair ( r [ iter ] ;
rank: 452
score: 98.72480701264881
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , true ) ;
rank: 452
score: 98.58004421657986
patch: ++ [ ] iter ; ++ iter ;
rank: 452
score: 98.57408311631944
patch: ++ iter ; if ( current != ;
rank: 452
score: 98.57220458984375
patch: ++ 1 ;
rank: 453
score: 98.94912719726562
patch: Point CaMeL Value CaMeL Pair current = current = current ;
rank: 453
score: 98.87744858685662
patch: double search CaMeL Direction = steepest CaMeL Descent . precondition ( point ) ;
rank: 453
score: 98.7998555501302
patch: if ( iter < iter ) max CaMeL Eval ++ ;
rank: 453
score: 98.72464693509616
patch: int r = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 453
score: 98.64466688368056
patch: i iter ; ++ ; ++ iter ;
rank: 453
score: 98.57984008789063
patch: else { ++ 0 ; } / * /
rank: 453
score: 98.57194213867187
patch: ++ iter ; ++ iter ; ++ / ;
rank: 454
score: 98.9960604580966
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , goal ) ;
rank: 454
score: 98.94912321671195
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( steepest CaMeL Descent . precondition ( ) ) ;
rank: 454
score: 98.93834510216347
patch: final double [ ] steepest CaMeL Descent = delta ;
rank: 454
score: 98.87733968098958
patch: if ( point . length ( ) < n ) {
rank: 454
score: 98.79911499023437
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) list . get ( iter ) ;
rank: 454
score: 98.72444370814732
patch: items = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 454
score: 98.64462619357639
patch: ++ iter ; ++ value + iter ;
rank: 454
score: 98.57944742838542
patch: else { / * * * / /
rank: 454
score: 98.57383626302084
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ++ ;
rank: 454
score: 98.57136366102431
patch: ++ iter ; ++ $STRING$ + iter ;
rank: 455
score: 98.99596058238636
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , iter ) ;
rank: 455
score: 98.94901216947116
patch: final double iter = find CaMeL Upper CaMeL Bound ( ) ;
rank: 455
score: 98.87694594439338
patch: final double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 455
score: 98.79876999627976
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 455
score: 98.7244384765625
patch: current = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 455
score: 98.64418723366477
patch: this . ++ iter ; ++ iter ; iter ;
rank: 455
score: 98.57944064670139
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . read )
rank: 455
score: 98.57343292236328
patch: ++ iter ; while ( ! iter . is CaMeL Empty ( ) ) {
rank: 455
score: 98.57135009765625
patch: ++ ( ++ iter ; / / /
rank: 456
score: 98.9484375
patch: final Point CaMeL Value CaMeL Pair current = current . current ( ) ;
rank: 456
score: 98.93788840553977
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point ) ;
rank: 456
score: 98.79845377604167
patch: ++ max CaMeL Eval += Math . min ( iter , iter ) ;
rank: 456
score: 98.7234637920673
patch: res = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 456
score: 98.64385986328125
patch: ++ 1 ; ++ * ++ iter ;
rank: 456
score: 98.57925851004464
patch: while ( ! iter . is CaMeL Empty ++ ) return null ;
rank: 456
score: 98.57279750279018
patch: ++ iter ; if ( ! current . is CaMeL Empty ( ;
rank: 456
score: 98.57130737304688
patch: ++ iter ; ++ iter ; for ++ ;
rank: 457
score: 98.937744140625
patch: double [ ] steepest CaMeL Descent = current . precondition ( ) ;
rank: 457
score: 98.87677873883929
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point . length , r ) ;
rank: 457
score: 98.79831112132354
patch: ++ max CaMeL Eval = Math . min ( current . iter , iter ) ;
rank: 457
score: 98.72320556640625
patch: s = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 457
score: 98.64346652560764
patch: / * ++ iter ; if iter ;
rank: 457
score: 98.57868787977431
patch: if ( iter == null ; * /
rank: 457
score: 98.57264811197916
patch: if ( iter != null && iter . is CaMeL Empty ( ) ;
rank: 457
score: 98.57125854492188
patch: ++ iter ; ++ ++ 0 ;
rank: 458
score: 98.9958984375
patch: double [ ] steepest CaMeL Descent = preconditioner . new Line CaMeL Search CaMeL Function ( point ) ;
rank: 458
score: 98.94810267857143
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . get CaMeL
rank: 458
score: 98.9368896484375
patch: int [ ] steepest CaMeL Descent = preconditioner
rank: 458
score: 98.87656537224265
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( this ) ;
rank: 458
score: 98.79816351996527
patch: ++ max CaMeL Eval ++ ; return new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 458
score: 98.72298177083333
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( r , r ) ;
rank: 458
score: 98.64275444878473
patch: ++ iter ; else / * / /
rank: 458
score: 98.57849799262152
patch: if ( ! iter . is CaMeL Empty ++ && iter . equals ( $NUMBER$ ) ;
rank: 458
score: 98.57213677300348
patch: ++ iter ; ++ iter ; if ;
rank: 458
score: 98.57076009114583
patch: ++ iter = iter ; ++ iter ;
rank: 459
score: 98.995361328125
patch: boolean [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 459
score: 98.93644205729167
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( iter ) ;
rank: 459
score: 98.79759632457386
patch: ++ max CaMeL Eval [ iter ] = current ;
rank: 459
score: 98.72177734375
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair (
rank: 459
score: 98.5784024325284
patch: while ( ! iter . is CaMeL Empty ++ ;
rank: 459
score: 98.5718242938702
patch: ++ iter ; if ( Math . abs ( iter ) ;
rank: 459
score: 98.57073419744319
patch: ++ iter ; ++ iter ; -- ++ iter ;
rank: 460
score: 98.876220703125
patch: if ( Point CaMeL Value CaMeL Pair . update CaMeL Formula ( iter , search CaMeL Direction ) ) {
rank: 460
score: 98.79695434570313
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) get CaMeL Context ( ) . ;
rank: 460
score: 98.72164154052734
patch: true = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 460
score: 98.64209662543402
patch: ++ iter ; iter = ++ iter ;
rank: 460
score: 98.57830810546875
patch: else { ++ 1 ;
rank: 460
score: 98.57181803385417
patch: if ( ! iter . compare CaMeL To ( current . ++ ) ;
rank: 460
score: 98.57017933238636
patch: ++ - iter ; ++ iter ; ++ iter ;
rank: 461
score: 98.99521706321023
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 , 0 ) ;
rank: 461
score: 98.79668634588069
patch: r [ max CaMeL Eval ++ ] = current ;
rank: 461
score: 98.721435546875
patch: [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 461
score: 98.6414794921875
patch: i * ++ ; / * / /
rank: 461
score: 98.57744004991319
patch: else { if ++ iter - $NUMBER$ ;
rank: 461
score: 98.57177734375
patch: int iter = 0 ; while ( iter < n )
rank: 461
score: 98.56969105113636
patch: ++ iter ; ++ iter ; } -- iter ;
rank: 462
score: 98.99510904947917
patch: double delta = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 462
score: 98.94744873046875
patch: int [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( point ) ;
rank: 462
score: 98.8760986328125
patch: if ( Point CaMeL Value CaMeL Pair current = null ;
rank: 462
score: 98.7963623046875
patch: r [ max CaMeL Eval ++ ] ; ;
rank: 462
score: 98.64145236545139
patch: ++ iter ; else * * / /
rank: 462
score: 98.57738037109375
patch: / * * * ++ ; ++ iter ;
rank: 462
score: 98.57176795372597
patch: int n = Math . max ( iter , n ) ;
rank: 462
score: 98.56900787353516
patch: ++ iter ; ++ iter ; max
rank: 463
score: 98.99447866586539
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( point ) ;
rank: 463
score: 98.94734700520833
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . search CaMeL Direction , point ) ;
rank: 463
score: 98.93486095610119
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . remove ( 0 ) ;
rank: 463
score: 98.87583521792763
patch: int steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 463
score: 98.79622156479779
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 463
score: 98.72081756591797
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ;
rank: 463
score: 98.57716878255208
patch: else { / * * ++ * /
rank: 463
score: 98.57172100360577
patch: if ( ! iter . compare CaMeL To ( iter ) ;
rank: 463
score: 98.56832885742188
patch: ++ $NUMBER$ ; ; ++ iter ;
rank: 464
score: 98.9939453125
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > current = null ;
rank: 464
score: 98.93361594460227
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , length ) ;
rank: 464
score: 98.87576293945312
patch: if ( true ) { steepest CaMeL Descent .
rank: 464
score: 98.79585193452381
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , r ) ;
rank: 464
score: 98.7207782451923
patch: Iterator n = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 464
score: 98.64072265625
patch: this . ++ iter ; ++ iter ; }
rank: 464
score: 98.57708333333333
patch: if ( ! iter . is CaMeL Empty ++ && iter . max ;
rank: 464
score: 98.57162272135416
patch: if ( current == null || current . is CaMeL Na CaMeL N ;
rank: 465
score: 98.99375
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > point = current ;
rank: 465
score: 98.94724408318015
patch: ++ max CaMeL Eval = steepest CaMeL Descent . clone ( ) ; ;
rank: 465
score: 98.93282645089286
patch: double [ ] steepest CaMeL Descent = preconditioner . double CaMeL Value ( ) ;
rank: 465
score: 98.79578857421875
patch: ++ max CaMeL Eval - iter ; * /
rank: 465
score: 98.72075805664062
patch: [ ] steepest CaMeL Descent = preconditioner . double CaMeL Value ( ) ;
rank: 465
score: 98.64067925347223
patch: / * ++ iter ; / * /
rank: 465
score: 98.57651192801339
patch: / * * * ++ ;
rank: 465
score: 98.57135009765625
patch: l [ iter ] = iter ;
rank: 465
score: 98.5682373046875
patch: ++ iter ; ++ iter ; } return iter ;
rank: 466
score: 98.99351149338942
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair $NUMBER$ ;
rank: 466
score: 98.9472323330966
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition . clone ( ) ;
rank: 466
score: 98.87566266741071
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner . precondition (
rank: 466
score: 98.7957763671875
patch: r [ max CaMeL Eval ++ ] = ++ iter ;
rank: 466
score: 98.640625
patch: ++ iter ; else * if iter ;
rank: 466
score: 98.57618931361607
patch: * * * ++ iter ;
rank: 466
score: 98.56793767755681
patch: ++ ( iter ; ++ iter ; ++ iter ;
rank: 467
score: 98.99305138221153
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > )
rank: 467
score: 98.94698660714286
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( $STRING$ ) ;
rank: 467
score: 98.87556966145833
patch: int max CaMeL Eval = this . compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 467
score: 98.79561157226563
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . iter . ;
rank: 467
score: 98.72041590073529
patch: entry = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 467
score: 98.64008924696181
patch: i ++ ; ++ * int iter ;
rank: 467
score: 98.57599431818181
patch: if ( iter == 0 ) return iter ; }
rank: 467
score: 98.571044921875
patch: ++ iter ; ++ iter ; System . ;
rank: 467
score: 98.56792340959821
patch: ++ current ; ++ iter ;
rank: 468
score: 98.99261005108173
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair current ;
rank: 468
score: 98.9469706217448
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; }
rank: 468
score: 98.87544759114583
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction . length ) ;
rank: 468
score: 98.7955078125
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter . ;
rank: 468
score: 98.72001429966518
patch: tree = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 468
score: 98.63999430338542
patch: ++ iter ; ++ * * 1 ;
rank: 468
score: 98.575927734375
patch: * * * * ++ iter ; }
rank: 468
score: 98.57068980823864
patch: while ( ! current . equals ( current ) )
rank: 468
score: 98.5669174194336
patch: iter } ++ ; ++ iter ;
rank: 469
score: 98.99239979619566
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition ( iter ) ;
rank: 469
score: 98.92954323508523
patch: double [ ] steepest CaMeL Descent = preconditioner . read ( point , r ) ;
rank: 469
score: 98.8754374186198
patch: throw new Math CaMeL Internal CaMeL Error ( ) ; }
rank: 469
score: 98.7954610188802
patch: ++ max CaMeL Eval = Math . abs ( iter ;
rank: 469
score: 98.63998752170139
patch: ++ * ++ iter ; ++ * /
rank: 469
score: 98.57557508680556
patch: else { if ( iter > $NUMBER$ ;
rank: 469
score: 98.57059733072917
patch: ++ iter ; if ( current == null ) break ;
rank: 469
score: 98.566748046875
patch: iter ; ++ iter ; if ++ iter ;
rank: 470
score: 98.87543688322368
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . current ;
rank: 470
score: 98.71940104166667
patch: item = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 470
score: 98.6396993001302
patch: ++ iter ; ++ iter ; ++ * - iter ;
rank: 470
score: 98.57511393229167
patch: ++ * iter ; }
rank: 470
score: 98.57034737723214
patch: ++ iter ; if ( ! is CaMeL Na CaMeL N ( ;
rank: 470
score: 98.5666836825284
patch: ++ iter ; ++ ++ iter ; ++ 1 ;
rank: 471
score: 98.94640096028645
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . search CaMeL Direction , r ) ;
rank: 471
score: 98.92936197916667
patch: double [ ] steepest CaMeL Descent = preconditioner . ( point , r ) ;
rank: 471
score: 98.87520054408482
patch: current = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 471
score: 98.79537963867188
patch: ++ max CaMeL Eval >= max CaMeL Eval ; ++ max CaMeL Eval ++ ;
rank: 471
score: 98.71890462239584
patch: Iterator < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair >
rank: 471
score: 98.63937717013889
patch: / * ++ 1 ; ++ iter ;
rank: 471
score: 98.57494506835937
patch: if ( iter == 0 ) return iter ;
rank: 471
score: 98.56648763020833
patch: ++ iter ; ++ iter ; null ;
rank: 472
score: 98.991298828125
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( false ) ;
rank: 472
score: 98.94619605654762
patch: final Univariate CaMeL Function [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( ) ;
rank: 472
score: 98.92908296130952
patch: final double [ ] steepest CaMeL Descent = preconditioner . point ( point ) ;
rank: 472
score: 98.79445975167411
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval <= ;
rank: 472
score: 98.7186279296875
patch: end = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 472
score: 98.63905164930556
patch: ++ 1 ++ iter ; if iter ;
rank: 472
score: 98.5736083984375
patch: else throw new Runtime CaMeL Exception ( $STRING$ ) ; }
rank: 472
score: 98.56980202414773
patch: tmp = new Point CaMeL Value CaMeL Pair ( ;
rank: 472
score: 98.56611463758681
patch: ++ iter ; ++ iter ; else iter
rank: 473
score: 98.991044921875
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , search CaMeL Direction ) ;
rank: 473
score: 98.946044921875
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; }
rank: 473
score: 98.7938461303711
patch: ++ max CaMeL Eval = ; ;
rank: 473
score: 98.71857561383929
patch: t = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 473
score: 98.57359619140625
patch: ++ [ ] [ ] iter = iter ;
rank: 473
score: 98.569482421875
patch: if ( max CaMeL Eval == - 1 )
rank: 473
score: 98.56597900390625
patch: ++ iter ; ++ 0 ; else
rank: 474
score: 98.99046223958334
patch: double [ ] steepest CaMeL Descent = preconditioner )
rank: 474
score: 98.87503212376645
patch: if ( checker . converged . converged . converged . precondition ( point , r ) ) {
rank: 474
score: 98.79383544921875
patch: ++ iter ; r [ iter ] = ;
rank: 474
score: 98.71772984095982
patch: children = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 474
score: 98.63899739583333
patch: else ++ ++ iter ; ++ iter ;
rank: 474
score: 98.57337364783653
patch: while ( ! iter . is CaMeL Empty ( ) ; }
rank: 474
score: 98.56899192116477
patch: ++ iter ; if ( iter > 0 ) {
rank: 474
score: 98.56577555338542
patch: ++ iter ; } ++ iter ; else
rank: 475
score: 98.989833984375
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( null ) ;
rank: 475
score: 98.79331276633523
patch: ++ iter ; final Point CaMeL Value CaMeL Pair ;
rank: 475
score: 98.71753801618304
patch: Iterator < Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair >
rank: 475
score: 98.63820578835227
patch: ++ iter ; ++ * - iter ; iter ;
rank: 475
score: 98.57303873697917
patch: if ( ! iter . is CaMeL Empty ( ) ) . iter . start ( ;
rank: 475
score: 98.56887381417411
patch: temp = Math . max ( iter , current . ++ ) ;
rank: 475
score: 98.56521267361111
patch: ++ iter ; ++ iter ; this ;
rank: 476
score: 98.989296875
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( iter ) ;
rank: 476
score: 98.92860107421875
patch: if ( point . length < n ) {
rank: 476
score: 98.87454223632812
patch: double [ ] search CaMeL Direction = point . length ;
rank: 476
score: 98.79303942228618
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . get ;
rank: 476
score: 98.71712000229779
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . get (
rank: 476
score: 98.57275390625
patch: / * * ++ iter * * /
rank: 476
score: 98.56861290564903
patch: if ( ! iter . is CaMeL Empty ; n ) {
rank: 476
score: 98.56495361328125
patch: ++ list ; ++ iter ; ++ iter ;
rank: 477
score: 98.98922293526786
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 477
score: 98.94437839673913
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( false ) ;
rank: 477
score: 98.87451171875
patch: final double r = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 477
score: 98.79264009915866
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; * /
rank: 477
score: 98.71705845424107
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 477
score: 98.5727294921875
patch: else { / * * / ++ iter ;
rank: 477
score: 98.568603515625
patch: ++ iter ; while ( iter <= n ) {
rank: 477
score: 98.5644775390625
patch: ++ iter ; ++ iter ; / / }
rank: 478
score: 98.92719959077381
patch: double [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound (
rank: 478
score: 98.87449017693015
patch: current = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 478
score: 98.7169921875
patch: previous = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 478
score: 98.63746134440105
patch: ++ iter ; ++ iter ; iter ; ++ iter ;
rank: 478
score: 98.5680401141827
patch: current = Math . max ( max CaMeL Eval , current ;
rank: 478
score: 98.56440873579545
patch: iter ; ++ ; ++ iter ; ++ iter ;
rank: 479
score: 98.94368119673295
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . get ( ) ;
rank: 479
score: 98.92713512073864
patch: final double [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( ) ;
rank: 479
score: 98.87440249794408
patch: if ( Point CaMeL Value CaMeL Pair . converged ( iter , search CaMeL Direction ) ) {
rank: 479
score: 98.79240337171052
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 479
score: 98.71610260009766
patch: result = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval , r ) ;
rank: 479
score: 98.637451171875
patch: ++ iter ; * ; int iter ;
rank: 479
score: 98.5679598721591
patch: ++ iter ; while ( iter >= 0 ) {
rank: 479
score: 98.56424713134766
patch: ++ iter ; ++ ++ $NUMBER$ ;
rank: 480
score: 98.98814325747283
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > [ ] steepest CaMeL Descent . clone ( ) ;
rank: 480
score: 98.94330596923828
patch: return ( Point CaMeL Value CaMeL Pair ) search CaMeL Direction [ iter ] ;
rank: 480
score: 98.92709147135416
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( true ) ;
rank: 480
score: 98.87415364583333
patch: if ( steepest CaMeL Descent . length < point . length )
rank: 480
score: 98.79225260416666
patch: ++ max CaMeL Eval * iter ; ++ max CaMeL Eval * iter ;
rank: 480
score: 98.71565464564732
patch: end = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 480
score: 98.6372403231534
patch: ++ iter ; ++ 1 ; if ++ iter ;
rank: 480
score: 98.57240295410156
patch: if ( ! iter . is CaMeL Empty iter this . is CaMeL Empty ;
rank: 480
score: 98.56765950520834
patch: ++ iter ; while ( ! iter . is CaMeL Empty ( ) ;
rank: 480
score: 98.56390935724431
patch: ++ iter ; ++ iter ; iter = iter ;
rank: 481
score: 98.98795259915866
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair $NUMBER$ ;
rank: 481
score: 98.92665793678977
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner ( ) ;
rank: 481
score: 98.87384033203125
patch: current = compute CaMeL Objective CaMeL Gradient ( point , max CaMeL Eval ) ;
rank: 481
score: 98.79200962611607
patch: r [ max CaMeL Eval ] = Math . min ( iter ;
rank: 481
score: 98.71554565429688
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( ) ; ++ iter ;
rank: 481
score: 98.63701714409723
patch: ++ iter ; iter ; / * /
rank: 481
score: 98.57203087439903
patch: if ( ! iter . is CaMeL Empty ++ ) / ;
rank: 481
score: 98.56736924913194
patch: ++ iter 1 ; ++ iter 1 ;
rank: 481
score: 98.56208631727431
patch: ++ iter ; iter / - * /
rank: 482
score: 98.94321076766305
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner . precondition ( ) ;
rank: 482
score: 98.92635091145833
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . set ( point ) ;
rank: 482
score: 98.87334883840461
patch: ++ max CaMeL Eval ; max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 482
score: 98.79194078947368
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r , iter ;
rank: 482
score: 98.71554129464286
patch: prev = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 482
score: 98.63620334201389
patch: / * ] iter = - iter ;
rank: 482
score: 98.56722005208333
patch: current = Math . min ( iter , iter ) ;
rank: 482
score: 98.561279296875
patch: ++ iter ; ++ 1 ; / /
rank: 483
score: 98.94312286376953
patch: ++ max CaMeL Eval = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 483
score: 98.92631392045455
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . precondition ( point ,
rank: 483
score: 98.8731918334961
patch: if ( iter % search CaMeL Direction . length < point . length ) {
rank: 483
score: 98.79191080729167
patch: ++ max CaMeL Eval = ; System . arraycopy ( ;
rank: 483
score: 98.63612874348958
patch: ++ iter ; ++ * iter ; /
rank: 483
score: 98.5710957845052
patch: if ( ! iter . is CaMeL Empty ++ false )
rank: 483
score: 98.56666870117188
patch: Iterator n = iter . iterator ( ) ;
rank: 483
score: 98.561083984375
patch: ++ iter ; ++ iter ; / / else
rank: 484
score: 98.98753356933594
patch: current = find CaMeL Upper CaMeL Bound ( point . length ( ) ) ;
rank: 484
score: 98.92620380108173
patch: final double [ ] steepest CaMeL Descent = current ;
rank: 484
score: 98.79150390625
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r
rank: 484
score: 98.71522739955357
patch: state = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 484
score: 98.63589138454861
patch: ++ iter ; / / * / /
rank: 484
score: 98.5706298828125
patch: if ( ! iter . is CaMeL Empty ++ && iter . equals ++
rank: 484
score: 98.5665771484375
patch: ++ iter ; if ( current == null ;
rank: 484
score: 98.56058959960937
patch: ++ iter ; iter ++ ; ++ iter ;
rank: 485
score: 98.94298299153645
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( iter ) ;
rank: 485
score: 98.87317657470703
patch: if ( ( steepest CaMeL Descent . clone ( ) ) ) {
rank: 485
score: 98.7914794921875
patch: ++ max CaMeL Eval ++ ; if ( Double . is CaMeL Na CaMeL N ( current ) )
rank: 485
score: 98.71516418457031
patch: b = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 485
score: 98.63461642795139
patch: ++ iter ; while ++ iter ; ;
rank: 485
score: 98.5701904296875
patch: if ( ! iter . is CaMeL Empty ++ this . iter . length ( ) ;
rank: 485
score: 98.56632995605469
patch: ++ iter ; if ( ! iter . compare CaMeL To ( current ) )
rank: 485
score: 98.560546875
patch: ++ iter ; ++ iter ; ; iter ++ ;
rank: 486
score: 98.9258145419034
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point , 0 ) ;
rank: 486
score: 98.87302117598684
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , this ) ;
rank: 486
score: 98.79094102647569
patch: r [ max CaMeL Eval ++ ] = Double . value CaMeL Of ( iter ) ;
rank: 486
score: 98.71505533854166
patch: result = new Point CaMeL Value CaMeL Pair ( point , solver ) ;
rank: 486
score: 98.63413307883523
patch: ++ * iter ; ++ iter ; ++ iter ;
rank: 486
score: 98.565185546875
patch: ++ iter ; while ( current != null ) {
rank: 486
score: 98.56049262152777
patch: ++ iter ; iter / ; / ;
rank: 487
score: 98.92567027698864
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . read ( point ) ;
rank: 487
score: 98.79073660714286
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Point CaMeL Value CaMeL Pair ;
rank: 487
score: 98.714599609375
patch: return new Point CaMeL Value CaMeL Pair ( search CaMeL Direction ) ;
rank: 487
score: 98.63377685546875
patch: if 0 ; ++ iter ; ++ iter ;
rank: 487
score: 98.56998116629464
patch: if ( ! ++ [ 1 ] . is CaMeL Empty ( ;
rank: 487
score: 98.5651104266827
patch: ++ n ; return new Point CaMeL Value CaMeL Pair ( ;
rank: 487
score: 98.55982666015625
patch: ++ iter ; iter = iter = iter ;
rank: 488
score: 98.94216086647727
patch: final Point CaMeL Value CaMeL Pair current = null ;
rank: 488
score: 98.87293294270833
patch: if ( steepest CaMeL Descent . get ( iter ) ) {
rank: 488
score: 98.79060872395833
patch: ++ max CaMeL Eval = get CaMeL Context ( ) . ++ iter ;
rank: 488
score: 98.71445184004934
patch: ( ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) ) {
rank: 488
score: 98.63359723772321
patch: ++ iter ; start ++ ;
rank: 488
score: 98.56965467664931
patch: / * * * * ++ * ;
rank: 488
score: 98.56508091517857
patch: while ( ! current . is CaMeL Empty ( ) ; ) {
rank: 488
score: 98.55980224609375
patch: ++ iter ; ++ iter ; ++ Math ;
rank: 489
score: 98.98622759650735
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 489
score: 98.87230428059895
patch: final double Point CaMeL Value CaMeL Pair current = current ;
rank: 489
score: 98.79046309621711
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , ;
rank: 489
score: 98.71385192871094
patch: sm= compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 489
score: 98.63350830078124
patch: ++ iter ; ++ iter ; int * ;
rank: 489
score: 98.56928362165179
patch: while ( ! iter . is CaMeL Empty ( ) ; continue ;
rank: 489
score: 98.56424713134766
patch: ++ iter ; Thread . current CaMeL Thread ( ) . wait ( ) ;
rank: 490
score: 98.98619588216145
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , search CaMeL Direction ) ;
rank: 490
score: 98.9249776204427
patch: if ( point . length < r . length ) {
rank: 490
score: 98.79042746803977
patch: ++ iter ; while ( iter < iter ) {
rank: 490
score: 98.71371694711539
patch: n = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 490
score: 98.63311089409723
patch: ++ * ++ iter ; synchronized iter ;
rank: 490
score: 98.56901041666667
patch: if ( ! iter . is CaMeL Empty ++ && iter . equals ;
rank: 490
score: 98.56416538783482
patch: ++ iter ; } return new Point CaMeL Value CaMeL Pair ( ;
rank: 490
score: 98.559130859375
patch: ++ iter ; ++ iter ; ++ * ;
rank: 491
score: 98.98581830193015
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = max CaMeL Eval ;
rank: 491
score: 98.94138590494792
patch: ++ max CaMeL Eval -= steepest CaMeL Descent ;
rank: 491
score: 98.87160130550987
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent [ iter ] ;
rank: 491
score: 98.790283203125
patch: ++ max CaMeL Eval [ iter ] = iter ;
rank: 491
score: 98.71307373046875
patch: return compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 491
score: 98.6328125
patch: ++ iter ; ++ * if iter ;
rank: 491
score: 98.568115234375
patch: / * * * ; /
rank: 491
score: 98.5640869140625
patch: ++ iter ; current = new Point CaMeL Value CaMeL Pair ( ;
rank: 492
score: 98.98577473958333
patch: ++ max CaMeL Eval += compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 492
score: 98.8714535361842
patch: double search CaMeL Direction = steepest CaMeL Descent . get ( point , r ) ;
rank: 492
score: 98.79014282226562
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter , ;
rank: 492
score: 98.71271221454327
patch: block = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 492
score: 98.63250054253473
patch: ++ iter ; for ++ ++ iter ;
rank: 492
score: 98.56733921595982
patch: / * * * ++ /
rank: 492
score: 98.56358235677084
patch: ++ iter ; while ( ! iter . is CaMeL Empty ( ) )
rank: 492
score: 98.5584228515625
patch: ++ iter ; ++ iter ; / ; /
rank: 493
score: 98.985595703125
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * ;
rank: 493
score: 98.941162109375
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . this ) ;
rank: 493
score: 98.92461286272321
patch: final double start = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 493
score: 98.8713443153783
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 493
score: 98.79012625558036
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; if ( ;
rank: 493
score: 98.71268404447116
patch: f = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 493
score: 98.63229031032986
patch: ++ iter ; start ; int iter ;
rank: 493
score: 98.56719970703125
patch: if ( iter == null ; return null ;
rank: 493
score: 98.56333821614584
patch: if ( current != null && current . is CaMeL Na CaMeL N ;
rank: 493
score: 98.55812766335227
patch: iter ++ ; ++ iter ; } ++ iter ;
rank: 494
score: 98.985546875
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( true ) ;
rank: 494
score: 98.94115193684895
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction . search CaMeL Direction ) ;
rank: 494
score: 98.79010881696429
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 494
score: 98.56709798177083
patch: else { * * * * ; }
rank: 494
score: 98.56328473772321
patch: if ( ! iter . is CaMeL Empty ; n ++ ) {
rank: 494
score: 98.55791681463069
patch: ++ -- iter ; ++ iter ; ++ iter ;
rank: 495
score: 98.92417907714844
patch: double [ ] [ ] steepest CaMeL Descent . clone ( ) ;
rank: 495
score: 98.78993443080357
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Integer . MAX _ VALUE ;
rank: 495
score: 98.71249825613839
patch: [ ] n = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 495
score: 98.63197021484375
patch: ++ 1 * ++ iter ; ++ iter ;
rank: 495
score: 98.56600516183036
patch: if ( ! iter . is CaMeL Empty ( ; ++ 1 ;
rank: 495
score: 98.56313254616477
patch: ++ n ; if ( current != null ) {
rank: 496
score: 98.98454938616071
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( ) ( ) ;
rank: 496
score: 98.94016520182292
patch: int iter = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 496
score: 98.92368386008523
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 496
score: 98.8711296530331
patch: if ( steepest CaMeL Descent . length ( ) < point . length ;
rank: 496
score: 98.71228899274554
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 496
score: 98.63190252130681
patch: ++ iter ; ++ * * ++ ++ iter ;
rank: 496
score: 98.56591796875
patch: else { iter += iter ; } }
rank: 496
score: 98.56298828125
patch: return new Point CaMeL Value CaMeL Pair ( current . get CaMeL Parent ( ;
rank: 496
score: 98.55779474431819
patch: ++ iter ; ++ iter ; } ++ 1 ;
rank: 497
score: 98.98447963169643
patch: delta += compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 497
score: 98.871044921875
patch: if ( compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ,
rank: 497
score: 98.78967963324652
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) get CaMeL Context ( )
rank: 497
score: 98.63116455078125
patch: ++ iter ; ++ * ++ iter ; ++ iter ;
rank: 497
score: 98.56569126674107
patch: / * * * / }
rank: 497
score: 98.5625332919034
patch: if ( ! iter . equals ( current ) )
rank: 497
score: 98.55753580729167
patch: ++ iter ; iter ; return iter ;
rank: 498
score: 98.9398905436198
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point ) ;
rank: 498
score: 98.92301432291667
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . read ( point ) ;
rank: 498
score: 98.870849609375
patch: if ( Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 498
score: 98.78963012695313
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter ; ;
rank: 498
score: 98.71211242675781
patch: retval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 498
score: 98.63111707899306
patch: ++ iter ; else * * ; /
rank: 498
score: 98.56567993164063
patch: / * * ++ * / ++ iter ;
rank: 498
score: 98.56200358072917
patch: if ( iter == null || iter . is CaMeL Empty ( ) )
rank: 498
score: 98.55629475911458
patch: iter ; ++ iter ; return iter ;
rank: 499
score: 98.9842862215909
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , n ) ;
rank: 499
score: 98.93981402853261
patch: double [ ] steepest CaMeL Descent = preconditioner . compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 499
score: 98.9229965209961
patch: final int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 499
score: 98.8704474954044
patch: ++ max CaMeL Eval ; delta = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 499
score: 98.78944905598958
patch: ++ iter ; if ( max CaMeL Eval < 0 )
rank: 499
score: 98.71189575195312
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair . Point CaMeL Value CaMeL Pair
rank: 499
score: 98.63082275390624
patch: ++ iter ; ++ iter ; ++ out ;
rank: 499
score: 98.56552734375
patch: while ( ! iter . is CaMeL Empty ( ) ; break ; }
rank: 499
score: 98.56187220982143
patch: temp = new Point CaMeL Value CaMeL Pair ( ; current . ;
rank: 499
score: 98.55542602539063
patch: ++ iter ; ++ max ; -- iter ;
rank: 500
score: 98.93923950195312
patch: int [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound ( point ) ;
rank: 500
score: 98.92250279017857
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( r ) ;
rank: 500
score: 98.87033081054688
patch: double [ ] steepest CaMeL Descent += preconditioner . precondition ( point ) ;
rank: 500
score: 98.78912353515625
patch: ++ max CaMeL Eval ; ; iter = iter . ;
rank: 500
score: 98.71186065673828
patch: context = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 500
score: 98.63066270616319
patch: ++ iter ; else * * iter ;
rank: 500
score: 98.5651611328125
patch: ++ iter ; if ++ [ 1 ] ;
rank: 500
score: 98.5618184407552
patch: ++ iter ; while ( iter != - 1 ) {
rank: 500
score: 98.55480346679687
patch: ++ iter ; ++ iterator ; ++ iter ;
rank: 501
score: 98.98358561197917
patch: r = new Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 501
score: 98.93890380859375
patch: final double [ ] steepest CaMeL Descent = preconditioner . compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 501
score: 98.87025756835938
patch: if ( Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 501
score: 98.78910522460937
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , r ) ;
rank: 501
score: 98.71133858816964
patch: curr = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 501
score: 98.63054809570312
patch: ++ iter ; int * / ++ iter ;
rank: 501
score: 98.56486002604167
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ( $NUMBER$ ;
rank: 501
score: 98.56128868689903
patch: ++ iter ; current = list . get ( current ) ;
rank: 501
score: 98.55469360351563
patch: iter ; ++ iter ; } ++ iter ;
rank: 502
score: 98.98345703125
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( Point CaMeL Value CaMeL Pair [
rank: 502
score: 98.92140891335227
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . preconditioner ;
rank: 502
score: 98.86993877704327
patch: if ( steepest CaMeL Descent . clone ( ) )
rank: 502
score: 98.78891888786765
patch: ++ max CaMeL Eval = Math . max ( current . iter , iter ) ;
rank: 502
score: 98.71064685639881
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , current ) ;
rank: 502
score: 98.63045925564236
patch: ++ iter ; else iter * iter ;
rank: 502
score: 98.5648193359375
patch: if ( ! iter . is CaMeL Empty ( ; ;
rank: 502
score: 98.56075345552884
patch: ++ iter ; if ( current . length > 0 ) {
rank: 502
score: 98.55446555397727
patch: ++ iter ; ++ iter ; } ++ start ;
rank: 503
score: 98.93784877232143
patch: for ( Point CaMeL Value CaMeL Pair current : steepest CaMeL Descent . precondition ( ) ) {
rank: 503
score: 98.92134232954545
patch: double [ ] steepest CaMeL Descent = preconditioner . get CaMeL Point ( point ) ;
rank: 503
score: 98.78866141183036
patch: r [ max CaMeL Eval ++ ] = Math . min ( ;
rank: 503
score: 98.71036783854167
patch: return new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , r ) ;
rank: 503
score: 98.6304423014323
patch: ++ * ++ iter ; ++ iter ; ++ iter ;
rank: 503
score: 98.5647705078125
patch: else { * * * ++ iter ; }
rank: 503
score: 98.5607421875
patch: if ( iter == null || iter . is CaMeL Empty ( ) ;
rank: 504
score: 98.93777669270834
patch: int iter = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 504
score: 98.92063210227273
patch: List [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 504
score: 98.86929086538461
patch: if ( steepest CaMeL Descent . length < n )
rank: 504
score: 98.78857421875
patch: ++ max CaMeL Eval = ++ max ;
rank: 504
score: 98.71011788504464
patch: return new Point CaMeL Value CaMeL Pair ( point , 1 ) ;
rank: 504
score: 98.63010475852273
patch: ++ iter ; ++ iter ; for ++ 1 ;
rank: 504
score: 98.56464979383681
patch: if ( iter >= 0 ; * /
rank: 504
score: 98.56005859375
patch: current = Math . max ( max CaMeL Eval , 1 ) ;
rank: 504
score: 98.55402967664931
patch: ++ iter ; ++ iter ; } ;
rank: 505
score: 98.98307531020221
patch: final double CaMeL Value = find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 505
score: 98.9376932779948
patch: int [ ] steepest CaMeL Descent = preconditioner . compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 505
score: 98.9203869047619
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( 0 ) ;
rank: 505
score: 98.86899142795139
patch: current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , 0 ) ;
rank: 505
score: 98.78819986979167
patch: ++ max CaMeL Eval ++ ; r [ max CaMeL Eval ] = ;
rank: 505
score: 98.7095196063702
patch: t = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 505
score: 98.62995741102431
patch: ++ * / iter ; ++ iter ;
rank: 505
score: 98.56448800223214
patch: if ( iter < iter )
rank: 505
score: 98.55398220486111
patch: ++ iter ; iter / * / /
rank: 506
score: 98.93759987571023
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . n ) ;
rank: 506
score: 98.92012241908482
patch: int [ ] steepest CaMeL Descent = max CaMeL Eval ;
rank: 506
score: 98.7874422940341
patch: ++ max CaMeL Eval ++ ; ; ++ iter ;
rank: 506
score: 98.70927290482955
patch: list = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 506
score: 98.62946428571429
patch: ++ ++ iter ; iter ;
rank: 506
score: 98.56446668836806
patch: if ( ! iter . is CaMeL Empty ++ this . iter . length ) break ;
rank: 506
score: 98.55984933035714
patch: tmp = new Point CaMeL Value CaMeL Pair ( ; current . ;
rank: 506
score: 98.55367702907986
patch: ++ iter ; ++ iter ; try }
rank: 507
score: 98.98252802309783
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . to CaMeL String ( ) ) ;
rank: 507
score: 98.93749237060547
patch: double CaMeL Value = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 507
score: 98.91991170247395
patch: double [ ] steepest CaMeL Descent = $NUMBER$ ;
rank: 507
score: 98.86803588867187
patch: if ( n < point . length ) {
rank: 507
score: 98.78732735770089
patch: ++ max CaMeL Eval * max CaMeL Eval * max CaMeL Eval ;
rank: 507
score: 98.70921415441177
patch: table = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 507
score: 98.62822265625
patch: ++ iter ; ++ iter ; synchronized iter ;
rank: 507
score: 98.56442260742188
patch: if ( ! iter . is CaMeL Empty ++ this . iter . 0 )
rank: 507
score: 98.5592510516827
patch: current = Math . min ( iter , current . ++ ;
rank: 507
score: 98.5536221590909
patch: ++ iter ; ; ++ iter ; ++ start ;
rank: 508
score: 98.98227364676339
patch: r = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 508
score: 98.9370754076087
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point [ 0 ] ) ;
rank: 508
score: 98.86751883370536
patch: final double iter = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 508
score: 98.78700764973958
patch: Iterator < Point CaMeL Value CaMeL Pair > iter = ;
rank: 508
score: 98.70895620492789
patch: resource = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 508
score: 98.62821451822917
patch: / ; ++ iter ; while iter ;
rank: 508
score: 98.56394449869792
patch: else { throw new Runtime CaMeL Exception ++ 1 ; }
rank: 508
score: 98.55917794363839
patch: while ( ! iter . is CaMeL Empty ( ) ; ) {
rank: 508
score: 98.55333794487848
patch: ++ iter ; iter if ++ ; ;
rank: 509
score: 98.98223876953125
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( iter ) ;
rank: 509
score: 98.9366455078125
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition . clone ( ) ;
rank: 509
score: 98.91853841145833
patch: final double [ ] steepest CaMeL Descent = preconditioner . max ( point ) ;
rank: 509
score: 98.8671642485119
patch: final double search CaMeL Direction = steepest CaMeL Descent . clone ( ) . clone ( ) ;
rank: 509
score: 98.78697445518092
patch: ++ max CaMeL Eval ++ ; return new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 509
score: 98.70892333984375
patch: entry = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 509
score: 98.62782505580357
patch: int iter ; ++ iter ;
rank: 509
score: 98.56385633680556
patch: / * * / if ++ iter ;
rank: 509
score: 98.55917794363839
patch: while ( ! current . is CaMeL Empty ( ) ) continue ;
rank: 510
score: 98.98219992897727
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 , point ) ;
rank: 510
score: 98.93661897078805
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . r ) ;
rank: 510
score: 98.86627197265625
patch: n = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 510
score: 98.786962890625
patch: r [ max CaMeL Eval ] = ; ;
rank: 510
score: 98.70859938401442
patch: rs = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 510
score: 98.62748209635417
patch: ++ iter ; ++ / * ; /
rank: 510
score: 98.56378173828125
patch: else { / * * / * /
rank: 510
score: 98.55900573730469
patch: int iter = current . last CaMeL Index CaMeL Of ( ++ current ) ;
rank: 510
score: 98.55284288194444
patch: ++ iter ; iter ; -- iter ;
rank: 511
score: 98.98180389404297
patch: delta = find CaMeL Upper CaMeL Bound ( point , point . length ) ;
rank: 511
score: 98.91783558238636
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . remove ( point ) ;
rank: 511
score: 98.86610514322916
patch: double r [ ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 511
score: 98.78685651506696
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval >= ;
rank: 511
score: 98.7084716796875
patch: super . do CaMeL Optimize ( point ) ;
rank: 511
score: 98.62736002604167
patch: ++ * ++ iter ; int 1 ;
rank: 511
score: 98.5635986328125
patch: if ( ! ++ [ 0 ] ;
rank: 511
score: 98.55872344970703
patch: ++ iter ; Thread . current CaMeL Thread ( ) . wait ( $NUMBER$ ;
rank: 511
score: 98.55247667100694
patch: ++ 1 ; ++ iter ; / /
rank: 512
score: 98.93656412760417
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; {
rank: 512
score: 98.91738746279762
patch: final int [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 ) ;
rank: 512
score: 98.86578047902961
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) point . start ;
rank: 512
score: 98.78639729817708
patch: ++ max CaMeL Eval ++ ; iter = iter . ;
rank: 512
score: 98.70840219350961
patch: iter = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 512
score: 98.626708984375
patch: ++ iter ; ++ * * iter ; iter ;
rank: 512
score: 98.56357421875
patch: else { ++ iter ; } return iter ;
rank: 512
score: 98.5585693359375
patch: input = new Point CaMeL Value CaMeL Pair ( iter , current ) ;
rank: 512
score: 98.55232747395833
patch: iter ; ++ start ; ++ iter ;
rank: 513
score: 98.9816535500919
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 513
score: 98.93651234019886
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . point , r ) ;
rank: 513
score: 98.91733620383523
patch: final int [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( point ) ;
rank: 513
score: 98.86568603515624
patch: final double search CaMeL Direction = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 513
score: 98.78626302083333
patch: result = new Point CaMeL Value CaMeL Pair ( r [ 0 ] ;
rank: 513
score: 98.70820617675781
patch: ( iter < point . length )
rank: 513
score: 98.62603081597223
patch: ++ iter ; while iter ; iter ;
rank: 513
score: 98.5634765625
patch: else { if ++ iter - 1 ;
rank: 513
score: 98.55836838942308
patch: if ( current == null || current . is CaMeL Empty ;
rank: 513
score: 98.55208129882813
patch: ++ iter ; ++ iter ; try / /
rank: 514
score: 98.93580211292614
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( point .
rank: 514
score: 98.78617095947266
patch: ++ max CaMeL Eval + 1 ;
rank: 514
score: 98.70815805288461
patch: tree = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 514
score: 98.62522583007812
patch: ++ iter ; ++ * ++ - iter ;
rank: 514
score: 98.56337890625
patch: if ( ! iter . is CaMeL Empty ( ) ; return $NUMBER$ ;
rank: 514
score: 98.55752563476562
patch: int iter = current . index CaMeL Of ( $STRING$ )
rank: 514
score: 98.55199584960937
patch: ++ iter ; ++ max ; return iter ;
rank: 515
score: 98.93562825520833
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( this ) ;
rank: 515
score: 98.91608220880681
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( 0 ) ;
rank: 515
score: 98.86507161458333
patch: Point CaMeL Value CaMeL Pair [ ] current = current ;
rank: 515
score: 98.78589630126953
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter
rank: 515
score: 98.707763671875
patch: list = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 515
score: 98.62502712673611
patch: ++ iter ; iter ; while iter ;
rank: 515
score: 98.56295340401786
patch: if ( ! iter . is CaMeL Empty ( ; - 0 )
rank: 515
score: 98.5573397549716
patch: ++ iter ; if ( iter == - 1 )
rank: 515
score: 98.55186878551136
patch: ++ iter ; ++ ++ n ; ++ iter ;
rank: 516
score: 98.93562455610795
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( point ,
rank: 516
score: 98.91431773792614
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , start ) ;
rank: 516
score: 98.86475626627605
patch: if ( point . length ( ) == 0 ) {
rank: 516
score: 98.78568892045455
patch: if ( iter >= max CaMeL Eval ) continue ;
rank: 516
score: 98.70768519810268
patch: obj = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 516
score: 98.6248779296875
patch: iter * ++ iter ; ++ iter ;
rank: 516
score: 98.56264919704861
patch: / * * * * * ++ ;
rank: 516
score: 98.55718122209821
patch: tmp = new Point CaMeL Value CaMeL Pair ( ++ iter ) ;
rank: 516
score: 98.55178493923611
patch: ++ iter ; iter / = iter ;
rank: 517
score: 98.9808933423913
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , iter ) ;
rank: 517
score: 98.9355701264881
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; else
rank: 517
score: 98.9135030110677
patch: if ( n < search CaMeL Direction . length ) {
rank: 517
score: 98.86475219726563
patch: double steepest CaMeL Descent = preconditioner . precondition ( point , null ) ;
rank: 517
score: 98.7856778231534
patch: ++ max CaMeL Eval = iter ; iter ++ ;
rank: 517
score: 98.70764973958333
patch: current = new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 517
score: 98.62421332465277
patch: ++ iter ; iter ; * ; /
rank: 517
score: 98.5625
patch: else { if ++ 0 . 1 ; }
rank: 517
score: 98.55144708806819
patch: ++ iter ; ++ iter ; iter ; ++ ;
rank: 518
score: 98.98057047526042
patch: delta = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 518
score: 98.93553577769886
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , false ) ;
rank: 518
score: 98.9131192294034
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( iter ) ;
rank: 518
score: 98.86466979980469
patch: final double search CaMeL Direction = search CaMeL Direction [ max CaMeL Eval ] ;
rank: 518
score: 98.78556743421052
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) this . list . get ;
rank: 518
score: 98.70745849609375
patch: s = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 518
score: 98.623291015625
patch: ++ iter ; ++ - * - iter ;
rank: 518
score: 98.5623046875
patch: / * * * / / ++ iter ;
rank: 518
score: 98.55706787109375
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ( current )
rank: 518
score: 98.55082872178819
patch: ++ iter ; ++ max * iter ;
rank: 519
score: 98.98050059442934
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = point ;
rank: 519
score: 98.9353739420573
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . preconditioner ( ) ;
rank: 519
score: 98.91263834635417
patch: Point CaMeL Value CaMeL Pair current = current . get ( 0 ) ;
rank: 519
score: 98.86448669433594
patch: n = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 519
score: 98.78452962239584
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair (
rank: 519
score: 98.70729064941406
patch: clone = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 519
score: 98.62314181857639
patch: ++ iter ; out ; ++ iter ;
rank: 519
score: 98.56220838758681
patch: / * * * / ++ * /
rank: 519
score: 98.55704171316964
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ( current ;
rank: 519
score: 98.55075412326389
patch: ++ iter ; ++ / / / ;
rank: 520
score: 98.980302734375
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , 0 ) ;
rank: 520
score: 98.9124755859375
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 1 ) ;
rank: 520
score: 98.86438569568452
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ,
rank: 520
score: 98.78392615685097
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ++ ; ;
rank: 520
score: 98.70713588169643
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ) ;
rank: 520
score: 98.62256537543402
patch: ++ iter ; ++ 1 ; * /
rank: 520
score: 98.56159125434027
patch: else { / * * * ; }
rank: 520
score: 98.55698805588942
patch: ++ iter ; current = Math . max ( iter ) ;
rank: 520
score: 98.55019802517361
patch: ++ iter ; ++ max + iter ;
rank: 521
score: 98.98024583899456
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . do CaMeL Optimize ( ) ) ;
rank: 521
score: 98.93486095610119
patch: final double [ ] steepest CaMeL Descent = preconditioner . . precondition ( ) ;
rank: 521
score: 98.9123868075284
patch: double [ ] steepest CaMeL Descent = preconditioner . search CaMeL Direction [ iter ] ;
rank: 521
score: 98.86438569568452
patch: double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ) ;
rank: 521
score: 98.78381928943452
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r [ iter ] ) ;
rank: 521
score: 98.70685369318181
patch: private Point CaMeL Value CaMeL Pair current = current ;
rank: 521
score: 98.6221923828125
patch: ++ iter ; if ++ * iter ;
rank: 521
score: 98.56149631076389
patch: if ( iter == 0 ; break ;
rank: 521
score: 98.5567626953125
patch: if ( current == null || current . is CaMeL Empty ( ) ) {
rank: 521
score: 98.54952392578124
patch: ++ iter ; ++ iter ; / * ;
rank: 522
score: 98.93426106770833
patch: for ( Point CaMeL Value CaMeL Pair current : search CaMeL Direction ) {
rank: 522
score: 98.91225179036458
patch: int [ ] steepest CaMeL Descent = false ;
rank: 522
score: 98.86381022135417
patch: double checker = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 522
score: 98.78338623046875
patch: ++ max CaMeL Eval >= 0 && max CaMeL Eval > 0 ;
rank: 522
score: 98.7066180889423
patch: element = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 522
score: 98.62197875976562
patch: ++ iter ; ++ * * iter ; ++ iter ;
rank: 522
score: 98.56119791666667
patch: if ( ! iter . is CaMeL Empty ( ) ) throw null ;
rank: 522
score: 98.55673556857639
patch: if ( iter != - 1 ) {
rank: 522
score: 98.54893909801136
patch: ++ iter ; ++ iter ; / return iter ;
rank: 523
score: 98.86367361886161
patch: final double current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 523
score: 98.78333197699652
patch: ++ max CaMeL Eval ++ ; ; ;
rank: 523
score: 98.70635986328125
patch: z = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 523
score: 98.62109375
patch: ++ name ; ++ iter ; ++ iter ;
rank: 523
score: 98.56092247596153
patch: if ( ! ++ [ 0 ] . is CaMeL Empty ;
rank: 523
score: 98.55665079752605
patch: current = Math . max ( iter , n ) ;
rank: 523
score: 98.54883922230114
patch: iter ++ ; ++ iter ; ; ++ iter ;
rank: 524
score: 98.97759137834821
patch: current = find CaMeL Upper CaMeL Bound ( point , false ) ;
rank: 524
score: 98.93329148065476
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point [ 0 ] ) ;
rank: 524
score: 98.78327287946429
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . r . r ;
rank: 524
score: 98.7062629250919
patch: tree = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 524
score: 98.62080213758681
patch: ++ iter ; else iter * * /
rank: 524
score: 98.56074523925781
patch: if ( ! iter . is CaMeL Empty ++ this . iter . ; }
rank: 524
score: 98.54881702769886
patch: ++ iter ; iter } ++ ; ++ iter ;
rank: 525
score: 98.97743443080357
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r )
rank: 525
score: 98.91094970703125
patch: double [ ] steepest CaMeL Descent . iterator ( ) ;
rank: 525
score: 98.78301711309524
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter , iter ;
rank: 525
score: 98.70623224431819
patch: rs = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 525
score: 98.61974487304687
patch: ++ iter ; ++ * * ++ 1 ;
rank: 525
score: 98.56050618489583
patch: if ( iter > iter ; * /
rank: 525
score: 98.55650745738636
patch: if ( iter != null ) { ++ iter ;
rank: 525
score: 98.54852849786931
patch: ++ iter ; ++ iter ; ; ++ 1 ;
rank: 526
score: 98.97741117931548
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( ) {
rank: 526
score: 98.91083170572917
patch: int max CaMeL Eval = preconditioner . precondition ( ) ;
rank: 526
score: 98.78296661376953
patch: ++ max CaMeL Eval ; * /
rank: 526
score: 98.70621163504464
patch: previous = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 526
score: 98.56009114583334
patch: while ( ! iter . is CaMeL Empty ( ) ) return iter ;
rank: 526
score: 98.55626569475446
patch: tmp = new Point CaMeL Value CaMeL Pair ( ++ n ) ;
rank: 526
score: 98.54850630326705
patch: ++ iter ; iter ; if iter = iter ;
rank: 527
score: 98.97700639204545
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( null , r ) ;
rank: 527
score: 98.9104336825284
patch: if ( checker . converged ( iter ) ) {
rank: 527
score: 98.8620837983631
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( point , r ) ;
rank: 527
score: 98.78266059027777
patch: ++ max CaMeL Eval ; break ; }
rank: 527
score: 98.7061538696289
patch: stmt = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 527
score: 98.55921630859375
patch: / * * ;
rank: 527
score: 98.55599975585938
patch: int iter = current . index CaMeL Of ( $STRING$ ;
rank: 528
score: 98.97668987771739
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( . max CaMeL Eval ) ;
rank: 528
score: 98.7825927734375
patch: ++ max CaMeL Eval > 0 ; * /
rank: 528
score: 98.7060879794034
patch: ret = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 528
score: 98.61793009440105
patch: ++ 1 + iter ;
rank: 528
score: 98.55915383731617
patch: if ( ! iter . is CaMeL Empty ++ this . is CaMeL Empty ( ;
rank: 528
score: 98.55577674278847
patch: current = Math . max ( max CaMeL Eval , iter ;
rank: 528
score: 98.5483154296875
patch: ++ iter ; ++ iter ; ++ name ;
rank: 529
score: 98.97667585100446
patch: current = find CaMeL Upper CaMeL Bound ( point , 1 ) ;
rank: 529
score: 98.93177861752717
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . get CaMeL Point CaMeL
rank: 529
score: 98.90955607096355
patch: int [ ] steepest CaMeL Descent = delta ;
rank: 529
score: 98.78221493675595
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r , iter ) ;
rank: 529
score: 98.70589192708333
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair . Point CaMeL Value CaMeL Pair )
rank: 529
score: 98.6170145670573
patch: ++ iter ; ++ iter ; ++ * / iter ;
rank: 529
score: 98.55911593967014
patch: ++ * iter ; if ++ iter ;
rank: 529
score: 98.55565643310547
patch: ++ iter ; if ( ! iter . starts CaMeL With ( current ) ;
rank: 530
score: 98.97665405273438
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 530
score: 98.9315936748798
patch: int CaMeL Value = find CaMeL Upper CaMeL Bound ( ) ;
rank: 530
score: 98.908984375
patch: final double [ ] steepest CaMeL Descent = max CaMeL Eval ;
rank: 530
score: 98.86062825520834
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ,
rank: 530
score: 98.78166852678571
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter . iter , iter ;
rank: 530
score: 98.70584267064145
patch: result = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , r ) ;
rank: 530
score: 98.55909559461806
patch: / * * * * ; * /
rank: 530
score: 98.55552321213942
patch: ++ iter ; if ( max CaMeL Eval > iter ) {
rank: 530
score: 98.54776611328126
patch: ++ iter ; iter * ; ++ iter ;
rank: 531
score: 98.93155570652173
patch: Point CaMeL Value CaMeL Pair < double , Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > ) {
rank: 531
score: 98.90897993607955
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = preconditioner . length ( ) ;
rank: 531
score: 98.86024693080357
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ,
rank: 531
score: 98.78163452148438
patch: ++ max CaMeL Eval = iter . iter ;
rank: 531
score: 98.7057354266827
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 531
score: 98.61515669389205
patch: ++ iter ; ++ 1 ; ++ iter ; ;
rank: 531
score: 98.55908881293402
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . equals (
rank: 531
score: 98.55528846153847
patch: return new Point CaMeL Value CaMeL Pair ( iter , current ;
rank: 531
score: 98.54775168678977
patch: iter else ++ ; ++ iter ; ++ iter ;
rank: 532
score: 98.93124534970238
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner ( ) ;
rank: 532
score: 98.9089022549716
patch: int [ ] steepest CaMeL Descent = preconditioner . search CaMeL Direction [ 0 ] ;
rank: 532
score: 98.85987548828125
patch: if ( max CaMeL Eval < n ) {
rank: 532
score: 98.78143780048077
patch: ++ max CaMeL Eval = ; ++ max CaMeL Eval ; }
rank: 532
score: 98.70547340029762
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , null ) ;
rank: 532
score: 98.6150410970052
patch: ++ iter ; ++ * * / / ++ iter ;
rank: 532
score: 98.55876329210069
patch: / * * * / / * /
rank: 532
score: 98.555078125
patch: temp = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 532
score: 98.54774305555556
patch: ++ iter ; iter / - 1 ;
rank: 533
score: 98.9759854403409
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair ( point ) ;
rank: 533
score: 98.90888671875
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = true ;
rank: 533
score: 98.85950927734375
patch: final double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 533
score: 98.78129650297619
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 533
score: 98.70452473958333
patch: found = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 533
score: 98.61494954427083
patch: ++ iter ; / * * / / ++ iter ;
rank: 533
score: 98.55767822265625
patch: if ( iter == $NUMBER$ ; return null ;
rank: 533
score: 98.55481719970703
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ; ) )
rank: 533
score: 98.54698597301136
patch: ++ iter ; ++ iter ; while iter / /
rank: 534
score: 98.97589983258929
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 534
score: 98.93062337239583
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current . this ;
rank: 534
score: 98.8591552734375
patch: if ( steepest CaMeL Descent . length < n ) { {
rank: 534
score: 98.78126109730114
patch: ++ max CaMeL Eval -- ; if ( iter ;
rank: 534
score: 98.70452411358173
patch: Integer point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 534
score: 98.61474609375
patch: ++ ++ - iter ;
rank: 534
score: 98.55728585379464
patch: else ; ++ iter ; }
rank: 534
score: 98.55472819010417
patch: ++ iter ; current = ( Point CaMeL Value CaMeL Pair ) current ;
rank: 534
score: 98.54660034179688
patch: ++ iter ; ++ break ; ++ iter ;
rank: 535
score: 98.97555776742789
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , search CaMeL Direction , r ) ;
rank: 535
score: 98.85864868164063
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , 1 ) ;
rank: 535
score: 98.78125
patch: ++ max CaMeL Eval ++ ; ; ++ max CaMeL Eval ++ ;
rank: 535
score: 98.61468505859375
patch: ++ iter ; ++ iter ; ++ * int iter ;
rank: 535
score: 98.55718524639423
patch: if ( ! iter . is CaMeL Empty ( $NUMBER$ ) ;
rank: 535
score: 98.55445556640625
patch: if ( iter != null ) ++ iter ;
rank: 536
score: 98.92996419270834
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = null ;
rank: 536
score: 98.8584716796875
patch: point [ iter ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 536
score: 98.78113902698864
patch: r [ max CaMeL Eval + 1 ] = ;
rank: 536
score: 98.70409478081598
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 536
score: 98.61460182883523
patch: ++ 1 ; ++ iter ; if ++ iter ;
rank: 536
score: 98.55712890625
patch: ++ * * iter ;
rank: 536
score: 98.55440673828124
patch: ++ iter ; while ( ! current . ;
rank: 536
score: 98.54622192382813
patch: ++ iter ; ++ iter ; ++ list ;
rank: 537
score: 98.9073819247159
patch: final double [ ] steepest CaMeL Descent = preconditioner . double CaMeL Value ( ) ;
rank: 537
score: 98.78102111816406
patch: ++ max CaMeL Eval = Math . min ( current . iter , iter ;
rank: 537
score: 98.70404052734375
patch: retval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 537
score: 98.61455426897321
patch: else * ; ++ iter ;
rank: 537
score: 98.55711534288194
patch: if ( iter == iter ; * /
rank: 537
score: 98.55437469482422
patch: while ( iter == 0 ) {
rank: 537
score: 98.546142578125
patch: ++ iter ; ++ iter ; iter / ++ ;
rank: 538
score: 98.92945556640625
patch: ++ max CaMeL Eval -= r . length ;
rank: 538
score: 98.90723765980114
patch: final double [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound (
rank: 538
score: 98.85690307617188
patch: return ( Point CaMeL Value CaMeL Pair ) current ; }
rank: 538
score: 98.78090122767857
patch: ++ iter ; Math . max ( max CaMeL Eval , iter ;
rank: 538
score: 98.70365084134616
patch: - iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 538
score: 98.61405029296876
patch: ++ iter ; ++ - - - iter ;
rank: 538
score: 98.55699965533088
patch: if ( ! iter . is CaMeL Empty ++ && iter . length > 0 ;
rank: 538
score: 98.55376325334821
patch: ++ iter ; current = ;
rank: 538
score: 98.54571533203125
patch: ++ iter ; ; / ; ++ iter ;
rank: 539
score: 98.78084106445313
patch: ++ max CaMeL Eval = ; if ( ;
rank: 539
score: 98.70363547585227
patch: private Point CaMeL Value CaMeL Pair current = null ;
rank: 539
score: 98.61367797851562
patch: ++ iter ; ++ * ++ iter ; ;
rank: 539
score: 98.55357360839844
patch: try { current = ++ n ;
rank: 539
score: 98.54567260742188
patch: ++ iter ; ++ ++ iter ; / /
rank: 540
score: 98.97396647135416
patch: Iterator max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 540
score: 98.92873128255208
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( 0 ) ;
rank: 540
score: 98.78080240885417
patch: ++ max CaMeL Eval ] = iter ;
rank: 540
score: 98.70315987723214
patch: return new Point CaMeL Value CaMeL Pair ( current , point ) ;
rank: 540
score: 98.61338500976562
patch: ++ iter ; ++ 1 ; int iter ;
rank: 540
score: 98.55677897135416
patch: if ( ! iter . is CaMeL Empty ; ++ 0 . 0 ;
rank: 540
score: 98.5533676147461
patch: ++ iter ; if ( ! iter . is CaMeL Empty ( ; ) ;
rank: 541
score: 98.9060946377841
patch: double [ ] steepest CaMeL Descent = preconditioner . start ( point , r ) ;
rank: 541
score: 98.78061147836539
patch: ++ max CaMeL Eval -- ; ++ max CaMeL Eval ++ ;
rank: 541
score: 98.70269012451172
patch: x = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 541
score: 98.61336263020833
patch: ++ iter ; ++ 1 ; ++ * ++ iter ;
rank: 541
score: 98.55667818509616
patch: if ( ! iter . is CaMeL Empty iter ( ) ;
rank: 541
score: 98.5533447265625
patch: ++ iter ; if ( ! is CaMeL Empty ) {
rank: 541
score: 98.54533081054687
patch: ++ iter ; ++ iter ; ; / ;
rank: 542
score: 98.90535111860795
patch: final double [ ] steepest CaMeL Descent =
rank: 542
score: 98.85533040364584
patch: if ( steepest CaMeL Descent . length < r . length )
rank: 542
score: 98.78028506324405
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Double . MAX _ VALUE )
rank: 542
score: 98.70258440290179
patch: b = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 542
score: 98.55654471261161
patch: * * ++ iter ; }
rank: 542
score: 98.55303955078125
patch: ++ iter ; ++ iter 1 ;
rank: 542
score: 98.5451993075284
patch: ++ iter ; ++ ++ start ; ++ iter ;
rank: 543
score: 98.97330078125
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner . preconditioner ;
rank: 543
score: 98.92777683423913
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 543
score: 98.90492600661058
patch: Object point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 543
score: 98.78018188476562
patch: ++ iter ; this . iter = iter ;
rank: 543
score: 98.70244598388672
patch: value = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 543
score: 98.61269124348958
patch: ++ iter ; ++ iter ; try ; ++ iter ;
rank: 543
score: 98.55624050564236
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . max ;
rank: 543
score: 98.55269775390624
patch: ++ iter ; if ( iter == null ;
rank: 543
score: 98.54503284801136
patch: ++ iter ; ++ iter ; iter / / /
rank: 544
score: 98.972900390625
patch: ++ max CaMeL Eval ; current = find CaMeL Upper CaMeL Bound ( ) ;
rank: 544
score: 98.904296875
patch: new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 544
score: 98.78015899658203
patch: result = new Point CaMeL Value CaMeL Pair ( iter , iter , iter ;
rank: 544
score: 98.70240129743304
patch: result = compute CaMeL Objective CaMeL Gradient ( point , 1 ) ;
rank: 544
score: 98.6126376065341
patch: ++ iter ; try ; ++ iter ; iter ;
rank: 544
score: 98.55620659722223
patch: / * * ++ * / * /
rank: 544
score: 98.5526351928711
patch: current = Math . max ( iter , current . double CaMeL Value ) ;
rank: 544
score: 98.54483032226562
patch: ++ iter ; iter = iter + iter ;
rank: 545
score: 98.97261810302734
patch: double [ ] steepest CaMeL Descent = find CaMeL Upper CaMeL Bound (
rank: 545
score: 98.85442708333333
patch: double iter = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 545
score: 98.78012520926339
patch: r [ max CaMeL Eval ++ ] = iter . iter . ;
rank: 545
score: 98.6118896484375
patch: ++ iter ; iter ; ++ - 1 ;
rank: 545
score: 98.55609809027777
patch: if ( ! iter . is CaMeL Empty ( ) iter . equals ( $NUMBER$ ) ;
rank: 545
score: 98.5523681640625
patch: ++ iter ; if ( ! current . equals ;
rank: 545
score: 98.54447021484376
patch: iter else ; ++ iter ; ++ iter ;
rank: 546
score: 98.9725674715909
patch: delta += find CaMeL Upper CaMeL Bound ( ) ;
rank: 546
score: 98.7801154641544
patch: ++ max CaMeL Eval = iter + current . hash CaMeL Code ( ) ; ;
rank: 546
score: 98.70175652754934
patch: Iterator < Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair >
rank: 546
score: 98.61149458451705
patch: ++ iter ; ++ iter ; ++ ( iter ;
rank: 546
score: 98.55592854817708
patch: if ( ! iter . is CaMeL Empty ++ null ;
rank: 546
score: 98.5519027709961
patch: ++ iter ; current = ( Point CaMeL Value CaMeL Pair ) ++ iter ;
rank: 546
score: 98.54442003038194
patch: ++ iter ; ++ * = iter ;
rank: 547
score: 98.97220865885417
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval , 0 ) ;
rank: 547
score: 98.92576090494792
patch: double [ ] steepest CaMeL Descent = preconditioner . Line CaMeL Search CaMeL Function ( point ) ;
rank: 547
score: 98.77976771763393
patch: ++ max CaMeL Eval ; r [ max CaMeL Eval ] = ;
rank: 547
score: 98.7016268643466
patch: if ( iter < search CaMeL Direction . length )
rank: 547
score: 98.60968572443181
patch: ++ iter ; ++ iter ; int * iter ;
rank: 547
score: 98.55585271661931
patch: ++ [ ] iter ; if ++ iter ; }
rank: 547
score: 98.5516357421875
patch: current = new Point CaMeL Value CaMeL Pair ( iter , current ) ;
rank: 547
score: 98.54435591264205
patch: ++ iter ; ; ++ iter ; while iter ;
rank: 548
score: 98.90404163707386
patch: double [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( iter ) ;
rank: 548
score: 98.77948608398438
patch: ++ max CaMeL Eval ++ ; if ( Double . is CaMeL Na CaMeL N ( iter ) )
rank: 548
score: 98.70154571533203
patch: start = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 548
score: 98.60892333984376
patch: ++ iter ; ++ * int ++ iter ;
rank: 548
score: 98.55542864118304
patch: ++ iter ; * * /
rank: 548
score: 98.55121256510417
patch: while ( ! current . is CaMeL Empty ; ) { ++ iter ;
rank: 548
score: 98.54405517578125
patch: ++ iter ; iter ; if iter ++ ;
rank: 549
score: 98.97185809795673
patch: current = find CaMeL Upper CaMeL Bound ( point . ) ;
rank: 549
score: 98.9033536044034
patch: double [ ] steepest CaMeL Descent = preconditioner . max ( point , r ) ;
rank: 549
score: 98.85298461914063
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , $NUMBER$ ) ;
rank: 549
score: 98.77937586167279
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) current . value ;
rank: 549
score: 98.70130333533653
patch: j = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 549
score: 98.60852661132813
patch: finally { ++ iter ; } ++ iter ;
rank: 549
score: 98.55501883370536
patch: if ( ! iter . is CaMeL Empty ( ; - 0 ;
rank: 549
score: 98.55071614583333
patch: if ( max CaMeL Eval < 0 ) max CaMeL Eval = 0 ;
rank: 549
score: 98.54331276633523
patch: ++ iter ; ++ iter ; ++ ++ 1 ;
rank: 550
score: 98.97137451171875
patch: double [ ] steepest CaMeL Descent = delta . clone ( ) ;
rank: 550
score: 98.92539284446023
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . ) ;
rank: 550
score: 98.7789794921875
patch: iter = new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 550
score: 98.70129975818452
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , false ) ;
rank: 550
score: 98.60791015625
patch: else ++ iter ; break ;
rank: 550
score: 98.55068359375
patch: ++ iter ; Thread . current CaMeL Thread ( ) . destroy ( ;
rank: 550
score: 98.54298909505208
patch: ++ iter ; ++ iter ; } /
rank: 551
score: 98.97123500279018
patch: current = find CaMeL Upper CaMeL Bound ( point , $NUMBER$ ) ;
rank: 551
score: 98.92518199573864
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) search CaMeL Direction [ r ] ;
rank: 551
score: 98.85259602864583
patch: current = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction ,
rank: 551
score: 98.77866036551339
patch: ++ max CaMeL Eval = iter + current . clone ( ) ;
rank: 551
score: 98.70102761008523
patch: found = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 551
score: 98.60740966796875
patch: / * ] ++ iter ; int iter ;
rank: 551
score: 98.5548095703125
patch: if ( ! iter . is CaMeL Empty ( ) ; ++ start ;
rank: 551
score: 98.55057525634766
patch: if ( ! iter . is CaMeL Empty ( ) ) { -- iter ;
rank: 551
score: 98.54265679253473
patch: iter ; ++ 1 ; ++ iter ;
rank: 552
score: 98.90227716619319
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point , n ) ;
rank: 552
score: 98.85248209635417
patch: double [ ] r = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 552
score: 98.77857384314903
patch: ++ max CaMeL Eval = ++ max CaMeL Eval / $NUMBER$ ;
rank: 552
score: 98.700927734375
patch: stmt = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 552
score: 98.60719517299107
patch: / * ++ iter ; /
rank: 552
score: 98.55048828125
patch: current = Math . max ( max CaMeL Eval , max CaMeL Eval ;
rank: 552
score: 98.54216974431819
patch: ++ iter ; ++ iter ; / / / /
rank: 553
score: 98.97105341372283
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( 0 ) ;
rank: 553
score: 98.92478249289773
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( compute CaMeL Objective CaMeL Gradient ( point ) ) ;
rank: 553
score: 98.90179443359375
patch: final double length = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 553
score: 98.85234723772321
patch: int max CaMeL Eval = new double [ max CaMeL Eval ] ;
rank: 553
score: 98.77848677201705
patch: ++ iter ; if ( max CaMeL Eval == ;
rank: 553
score: 98.70082092285156
patch: mod = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 553
score: 98.60555419921874
patch: / * / ++ iter ; ++ iter ;
rank: 553
score: 98.55414496527777
patch: else { iter * 0 . 0 ;
rank: 553
score: 98.5503662109375
patch: current = Math . max ( max CaMeL Eval , current . iter ;
rank: 553
score: 98.54193670099431
patch: ++ iter ; ++ iter ; ; iter / /
rank: 554
score: 98.97091674804688
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , search CaMeL Direction ) ;
rank: 554
score: 98.9242919921875
patch: ++ n ; Point CaMeL Value CaMeL Pair current = current . current ;
rank: 554
score: 98.90177408854167
patch: int [ ] steepest CaMeL Descent = preconditioner .
rank: 554
score: 98.85205078125
patch: if ( Point CaMeL Value CaMeL Pair . converged . converged . converged . iter ( ) ) { {
rank: 554
score: 98.77835787259616
patch: ++ max CaMeL Eval -- ; if ( max CaMeL Eval ;
rank: 554
score: 98.70011683872768
patch: i = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 554
score: 98.60551313920455
patch: ++ iter ; ++ - - iter ; iter ;
rank: 554
score: 98.55344063895089
patch: / * ++ iter * /
rank: 554
score: 98.54989188058036
patch: current = Math . max ( iter , current . iter ) ;
rank: 554
score: 98.54154663085937
patch: ++ iter ; iter / * = iter ;
rank: 555
score: 98.92413330078125
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent . clone ( )
rank: 555
score: 98.77805582682292
patch: iter = new Point CaMeL Value CaMeL Pair ( r ;
rank: 555
score: 98.70008263221153
patch: o = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 555
score: 98.6054354580966
patch: ++ iter ; ++ 1 ; ; ++ iter ;
rank: 555
score: 98.5528564453125
patch: else { iter * 0 . 0 /
rank: 555
score: 98.54959542410714
patch: ++ iter ; if ( ! iter . contains ( current ) ;
rank: 555
score: 98.54152610085227
patch: ++ 0 ; ++ iter ; } ++ iter ;
rank: 556
score: 98.97061157226562
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , 0 ) ;
rank: 556
score: 98.9237393465909
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , true ) ;
rank: 556
score: 98.90125621448864
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( ( Point CaMeL Value CaMeL Pair ) point ) ;
rank: 556
score: 98.8518954190341
patch: while ( iter . < r . length ) {
rank: 556
score: 98.77756911057692
patch: r [ max CaMeL Eval ] = Math . iter ( ;
rank: 556
score: 98.70004272460938
patch: query = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 556
score: 98.60541643415179
patch: i * ++ + iter ;
rank: 556
score: 98.55189732142857
patch: else if ++ iter ; }
rank: 556
score: 98.54940032958984
patch: int n = iter - 1 ;
rank: 557
score: 98.92330799932066
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; ++ iter ;
rank: 557
score: 98.9012118252841
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , null ) ;
rank: 557
score: 98.85093688964844
patch: double steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 557
score: 98.77735137939453
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , 0 ;
rank: 557
score: 98.69990757533482
patch: true = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 557
score: 98.60537109375
patch: ++ iter ; iter ; if ++ 1 ;
rank: 557
score: 98.55162702287946
patch: if ( ! iter . is CaMeL Empty ( ) ++ iter ;
rank: 557
score: 98.5490253155048
patch: int iter = Math . max ( iter , iter ) ;
rank: 557
score: 98.5395174893466
patch: ++ iter ; ++ 1 ; } ++ iter ;
rank: 558
score: 98.97019264914773
patch: List steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval , r ) ;
rank: 558
score: 98.85057830810547
patch: return compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ; }
rank: 558
score: 98.7772216796875
patch: r [ max CaMeL Eval ] ;
rank: 558
score: 98.60530598958333
patch: ++ iter ; ++ iter ; this . ++ iter ;
rank: 558
score: 98.55105794270834
patch: if ( ! iter . is CaMeL Empty ; this . ++ iter ;
rank: 558
score: 98.54892202524039
patch: ++ iter ; if ( ! iter . compare CaMeL To ;
rank: 558
score: 98.53926595052083
patch: ++ iter ; ++ $STRING$ ; / /
rank: 559
score: 98.90022416548295
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction , r ) ;
rank: 559
score: 98.84993198939732
patch: ++ iter ; throw new Math CaMeL Internal CaMeL Error ( ) ;
rank: 559
score: 98.7770931846217
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , r ;
rank: 559
score: 98.69968087332589
patch: result = compute CaMeL Objective CaMeL Gradient ( point , current ) ;
rank: 559
score: 98.60529119318181
patch: ++ iter ; ++ iter ; ++ case iter ;
rank: 559
score: 98.55103759765625
patch: else { if ++ [ iter ] ; }
rank: 559
score: 98.54866536458333
patch: while ( ! current . is CaMeL Empty ( ) ) ++ n ;
rank: 559
score: 98.53907470703125
patch: ++ iter ; ++ n ; return iter ;
rank: 560
score: 98.96954900568181
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point + 0 ) ;
rank: 560
score: 98.92273966471355
patch: ++ max CaMeL Eval * steepest CaMeL Descent ;
rank: 560
score: 98.77698471966912
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , current ) ;
rank: 560
score: 98.69932047526042
patch: [ ] max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 560
score: 98.60528564453125
patch: / * ++ ++ * / ++ iter ;
rank: 560
score: 98.55063045726104
patch: if ( ! iter . is CaMeL Empty ( ) && . is CaMeL Empty ;
rank: 560
score: 98.54856363932292
patch: if ( iter == - 1 ) {
rank: 560
score: 98.53830392020089
patch: ++ super ; ++ iter ;
rank: 561
score: 98.96922718394886
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > = current ;
rank: 561
score: 98.89976399739584
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent
rank: 561
score: 98.84919956752232
patch: if ( ! steepest CaMeL Descent . clone ( ) )
rank: 561
score: 98.77689302884616
patch: r [ max CaMeL Eval ] = iter ; break ; }
rank: 561
score: 98.69923231336806
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair current = null ;
rank: 561
score: 98.60504705255681
patch: ++ iter ; ++ - iter ; while iter ;
rank: 561
score: 98.55059455422794
patch: if ( ! iter . is CaMeL Empty ( ) ) . iter . ++ ;
rank: 561
score: 98.54819064670139
patch: ++ iter ; ++ n ; break ;
rank: 562
score: 98.9688136888587
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition (
rank: 562
score: 98.92204483695652
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point . search CaMeL Direction , point ) ;
rank: 562
score: 98.89972393329327
patch: double point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 562
score: 98.77677612304687
patch: r [ max CaMeL Eval -- ] = ;
rank: 562
score: 98.69878278459821
patch: value = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 562
score: 98.6048251065341
patch: else ++ iter ; ++ iter ; ++ iter ;
rank: 562
score: 98.550439453125
patch: / * ++ * * / ++ iter ;
rank: 562
score: 98.5481465657552
patch: temp = ++ iter ;
rank: 562
score: 98.53828648158482
patch: ++ iter ; ++ length ;
rank: 563
score: 98.96839488636364
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition (
rank: 563
score: 98.89954723011364
patch: double [ ] steepest CaMeL Descent = preconditioner . current ( point , r ) ;
rank: 563
score: 98.77668592664931
patch: ++ iter ; iter = iter . ;
rank: 563
score: 98.69876098632812
patch: right = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 563
score: 98.6043701171875
patch: ++ iter ; ++ iter ; ++ for iter ;
rank: 563
score: 98.55043538411458
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter . start ;
rank: 563
score: 98.54789225260417
patch: ++ iter ; ++ max CaMeL Eval ; ++ iter ;
rank: 563
score: 98.53815307617188
patch: ++ current ; ++ iter ; ++ iter ;
rank: 564
score: 98.96832275390625
patch: double [ ] steepest CaMeL Descent = this . clone ( ) ;
rank: 564
score: 98.92190755208334
patch: Point CaMeL Value CaMeL Pair current = Point CaMeL Value CaMeL Pair current ;
rank: 564
score: 98.89949544270833
patch: final double [ ] search CaMeL Direction ;
rank: 564
score: 98.84744698660714
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval , point ) ;
rank: 564
score: 98.77654670266544
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter
rank: 564
score: 98.6986083984375
patch: return new Point CaMeL Value CaMeL Pair ( point , current ) ;
rank: 564
score: 98.60420445033482
patch: ++ 1 + ++ iter ;
rank: 564
score: 98.55030653211806
patch: if ( ! iter . is CaMeL Empty ++ this . is CaMeL Empty ( ) ;
rank: 564
score: 98.54782104492188
patch: ++ iter ; Thread . current CaMeL Thread ( ) . join ( ) ;
rank: 564
score: 98.53733317057292
patch: ++ iter ; if iter / / /
rank: 565
score: 98.89940296519886
patch: double [ ] steepest CaMeL Descent = preconditioner . point ( point , r ) ;
rank: 565
score: 98.84707845052084
patch: if ( checker . converged ( point , search CaMeL Direction ) ) {
rank: 565
score: 98.69857584635416
patch: other = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 565
score: 98.60414428710938
patch: ++ 1 ; ++ iter ; ++ 1 ;
rank: 565
score: 98.55015980113636
patch: if ( iter == 0 ; return null ; }
rank: 565
score: 98.5477294921875
patch: current = new Point CaMeL Value CaMeL Pair ( ;
rank: 565
score: 98.53634304470486
patch: ++ iter ; ++ iter ; ++ max
rank: 566
score: 98.96729387555804
patch: final double max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 566
score: 98.92142917798913
patch: Point CaMeL Value CaMeL Pair current = current ; Point CaMeL Value CaMeL Pair steepest CaMeL Descent = current ;
rank: 566
score: 98.89927978515625
patch: if ( checker . converged ( ) ) {
rank: 566
score: 98.84707406850961
patch: int checker = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 566
score: 98.77608816964286
patch: result = new Point CaMeL Value CaMeL Pair ( r , iter ;
rank: 566
score: 98.69843401227679
patch: start = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 566
score: 98.60394897460938
patch: ++ iter ; try ; ++ iter ; ;
rank: 566
score: 98.55007595486111
patch: if ( ! ++ [ 1 ] ;
rank: 566
score: 98.5474853515625
patch: ++ iter ; if ( ! current . is CaMeL Defined ( ;
rank: 566
score: 98.53613959418402
patch: ++ iter ; ++ iter ; iter }
rank: 567
score: 98.9672100360577
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair current ;
rank: 567
score: 98.8987548828125
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 567
score: 98.84672328404018
patch: if ( point . length ( ) > r . length ) {
rank: 567
score: 98.77594957853618
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( ; r ;
rank: 567
score: 98.69832356770833
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , 1 ) ;
rank: 567
score: 98.60385964133523
patch: ++ iter ; ++ iter ; if iter iter ;
rank: 567
score: 98.54990931919643
patch: if ( ! iter . is CaMeL Empty ( ) ) / ;
rank: 567
score: 98.54722493489584
patch: current = Math . max ( iter , current . double CaMeL Value ;
rank: 567
score: 98.53595525568181
patch: iter ++ ; ; ++ iter ; ++ iter ;
rank: 568
score: 98.96715198863636
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( this , 0 ) ;
rank: 568
score: 98.92097981770833
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . length ( ) ) ;
rank: 568
score: 98.8982266512784
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( search CaMeL Direction ) ;
rank: 568
score: 98.84635416666667
patch: if ( compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 568
score: 98.77572866586539
patch: ++ max CaMeL Eval -- ; ++ max CaMeL Eval ; ;
rank: 568
score: 98.60372924804688
patch: ++ ++ * iter ;
rank: 568
score: 98.54904610770089
patch: ++ * ++ iter ; }
rank: 568
score: 98.54659016927083
patch: ++ iter ; if ( true ) {
rank: 568
score: 98.53569946289062
patch: ++ 0 ; ++ iter ; -- iter ;
rank: 569
score: 98.96711869673295
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( name , r ) ;
rank: 569
score: 98.91996626420455
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( )
rank: 569
score: 98.8970059481534
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , $NUMBER$ ) ;
rank: 569
score: 98.84581938244048
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval , r ) ;
rank: 569
score: 98.77501220703125
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( iter . iter , ;
rank: 569
score: 98.6975567157452
patch: curr = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 569
score: 98.60372924804688
patch: ++ iter ; else * ; ++ iter ;
rank: 569
score: 98.54876302083333
patch: if ( ! iter . is CaMeL Empty ( ) ) . max ;
rank: 569
score: 98.5465087890625
patch: if ( ! current . is CaMeL Empty ( ) ) ++ n ;
rank: 570
score: 98.96705163043478
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , $NUMBER$ ) ;
rank: 570
score: 98.84550337357955
patch: final double Point CaMeL Value CaMeL Pair = current ;
rank: 570
score: 98.774658203125
patch: ++ max CaMeL Eval = ; ++ max CaMeL Eval ; ;
rank: 570
score: 98.69739708533653
patch: c = new Line CaMeL Search CaMeL Function ( point ) ;
rank: 570
score: 98.6031494140625
patch: i ++ ; ++ iter ; ++ iter ;
rank: 570
score: 98.5485331217448
patch: if ( ! iter . is CaMeL Empty ; * /
rank: 570
score: 98.54635184151786
patch: if ( iter != null )
rank: 570
score: 98.53524169921874
patch: ++ iter ; ; ++ max = iter ;
rank: 571
score: 98.91947798295455
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition . precondition ( ) ;
rank: 571
score: 98.89606182391827
patch: double start = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 571
score: 98.77435980902777
patch: ++ max CaMeL Eval += iter ; ;
rank: 571
score: 98.60299072265624
patch: ++ iter ; ++ iter ; * * /
rank: 571
score: 98.5484130859375
patch: ++ * iter ;
rank: 571
score: 98.54634399414063
patch: ++ iter ; if ( n > 0 )
rank: 571
score: 98.53450520833333
patch: ++ iter ; ++ 0 ; / /
rank: 572
score: 98.96685791015625
patch: current = find CaMeL Upper CaMeL Bound ( point , iter ) ;
rank: 572
score: 98.91935221354167
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 572
score: 98.89547119140624
patch: int iter = point . length ( ) ;
rank: 572
score: 98.84357561383929
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , r , r ) ;
rank: 572
score: 98.77393296185662
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( ; ;
rank: 572
score: 98.69706508091518
patch: context = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 572
score: 98.60244750976562
patch: ++ iter ; ++ * * ; / ++ iter ;
rank: 572
score: 98.54820033482143
patch: else * ++ iter ; }
rank: 572
score: 98.54629281850961
patch: ++ iter ; current = ( Point CaMeL Value CaMeL Pair ;
rank: 572
score: 98.53402709960938
patch: ++ false ; ++ iter ; ++ iter ;
rank: 573
score: 98.96665852864584
patch: ++ max CaMeL Eval * compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 573
score: 98.84334106445313
patch: int max CaMeL Eval = max CaMeL Eval ;
rank: 573
score: 98.773681640625
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter ; ;
rank: 573
score: 98.69660034179688
patch: public Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 573
score: 98.60237630208333
patch: ++ iter ; ++ iter ; int * * iter ;
rank: 573
score: 98.54790790264423
patch: if ( ! ++ [ 1 ] . is CaMeL Empty ;
rank: 573
score: 98.54628208705357
patch: while ( iter < n )
rank: 573
score: 98.533935546875
patch: ++ iter ; ++ iter ; ; if iter ;
rank: 574
score: 98.96654334435097
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 574
score: 98.91881214488636
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , 1 ) ;
rank: 574
score: 98.89422200520833
patch: final double [ ] steepest CaMeL Descent = current . point ;
rank: 574
score: 98.84324544270834
patch: return new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ,
rank: 574
score: 98.7735595703125
patch: ++ iter ; r [ max CaMeL Eval ] ++ ;
rank: 574
score: 98.69650268554688
patch: ref = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 574
score: 98.60234375
patch: ++ iter ; ++ * * / iter ;
rank: 574
score: 98.54786682128906
patch: if ( ! iter . is CaMeL Empty ( ) ) . ++ $NUMBER$ ;
rank: 574
score: 98.5462158203125
patch: if ( ! iter . is CaMeL Empty ( ) ) { break ;
rank: 574
score: 98.53389485677083
patch: ++ iter ; ++ min = iter ;
rank: 575
score: 98.9665298461914
patch: max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 575
score: 98.89301006610577
patch: final double [ ] search CaMeL Direction = point . length ;
rank: 575
score: 98.84315842848558
patch: if ( Point CaMeL Value CaMeL Pair current == null ) {
rank: 575
score: 98.77355194091797
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r
rank: 575
score: 98.69640531994048
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , solver ) ;
rank: 575
score: 98.60212846235795
patch: i * ++ ; / * / ++ iter ;
rank: 575
score: 98.5477294921875
patch: else ++ [ 1 ] ;
rank: 575
score: 98.54606119791667
patch: current = Math . max ( current , iter ) ;
rank: 575
score: 98.53389115767045
patch: ++ 0 ; ; ++ iter ; ++ iter ;
rank: 576
score: 98.96592203776042
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , 1 ) ;
rank: 576
score: 98.7734015969669
patch: r [ max CaMeL Eval ] = Math . min ( iter , iter ) ;
rank: 576
score: 98.6961669921875
patch: long ++ iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 576
score: 98.60198102678571
patch: * * ++ iter ; /
rank: 576
score: 98.54756673177083
patch: if ( ! iter . is CaMeL Empty iter ++ ;
rank: 576
score: 98.54605538504464
patch: current = Math . max ( max CaMeL Eval , 0 ) ;
rank: 576
score: 98.53345404730902
patch: int iter = iter ; ++ iter ;
rank: 577
score: 98.91763969089673
patch: final double [ ] steepest CaMeL Descent = preconditioner . get ( point , r ) ;
rank: 577
score: 98.89198404947916
patch: final int [ ] steepest CaMeL Descent = preconditioner
rank: 577
score: 98.8424072265625
patch: int r = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 577
score: 98.77329508463542
patch: ++ iter ; * / * * /
rank: 577
score: 98.69613792782738
patch: [ ] steepest CaMeL Descent = preconditioner . double CaMeL Value ( point ) ;
rank: 577
score: 98.60186767578125
patch: ++ 1 ; ++ 1 ;
rank: 577
score: 98.5474853515625
patch: if ( iter > 0 ; / ;
rank: 577
score: 98.5460205078125
patch: tmp = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 577
score: 98.533349609375
patch: ++ new ; ++ iter ; ++ iter ;
rank: 578
score: 98.9652099609375
patch: List steepest CaMeL Descent = preconditioner . precondition ( point . length ( ) ) ;
rank: 578
score: 98.91736857096355
patch: Point CaMeL Value CaMeL Pair current = current . this ;
rank: 578
score: 98.7732684795673
patch: ++ max CaMeL Eval * max CaMeL Eval ++ ; * /
rank: 578
score: 98.6959716796875
patch: result = new Point CaMeL Value CaMeL Pair ( point , $NUMBER$ ) ;
rank: 578
score: 98.60178444602273
patch: ++ * * ++ iter ; / ++ iter ;
rank: 578
score: 98.54694475446429
patch: if ( ! iter . is CaMeL Empty ( ; > 0 )
rank: 578
score: 98.54561614990234
patch: while ( ! current . ; current . is CaMeL Empty ( ; ) {
rank: 578
score: 98.53328247070313
patch: ++ iter ; ++ / * ++ iter ;
rank: 579
score: 98.91659545898438
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . point , r ) ;
rank: 579
score: 98.77305385044643
patch: ++ iter ; r [ max CaMeL Eval ++ ] = iter ;
rank: 579
score: 98.69579360064338
patch: ret = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 579
score: 98.60174560546875
patch: ++ iter ; ++ * ++ ++ iter ;
rank: 579
score: 98.54622105189732
patch: if ++ [ 1 ] ;
rank: 579
score: 98.54520089285714
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ( ; }
rank: 579
score: 98.53313598632812
patch: ++ iter ; iter / / ++ iter ;
rank: 580
score: 98.96392822265625
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 580
score: 98.916015625
patch: if ( checker . converged ( max CaMeL Eval ,
rank: 580
score: 98.88858235677084
patch: double [ ] steepest CaMeL Descent . get ( point ) ;
rank: 580
score: 98.84208540482955
patch: if ( ( ! update CaMeL Formula ) ) {
rank: 580
score: 98.77243381076389
patch: ++ iter - max CaMeL Eval = ;
rank: 580
score: 98.69576687282986
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair current = current ;
rank: 580
score: 98.60146262428977
patch: ++ iter ; ++ * * ++ iter ; ;
rank: 580
score: 98.54581124441964
patch: if ( ! iter . is CaMeL Empty ++ ; return iter ;
rank: 580
score: 98.54519314236111
patch: ++ iter + 1 ; ++ iter ;
rank: 580
score: 98.53293678977273
patch: ++ iter ; if ++ 1 ; ++ iter ;
rank: 581
score: 98.9635342684659
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point . length ) ;
rank: 581
score: 98.77224731445312
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . iter ; ;
rank: 581
score: 98.69546072823661
patch: tmp = compute CaMeL Objective CaMeL Gradient ( update CaMeL Formula ) ;
rank: 581
score: 98.54571533203125
patch: / * * * / ++ iter ; }
rank: 581
score: 98.54469604492188
patch: if ( iter == - 1 ) break ;
rank: 581
score: 98.5323819247159
patch: ++ iter ; ++ ++ iter ; if iter ;
rank: 582
score: 98.91581217447917
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner . clone ( ) ;
rank: 582
score: 98.77218424479166
patch: result = new Point CaMeL Value CaMeL Pair ( r , iter ) ;
rank: 582
score: 98.69494047619048
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , delta ) ;
rank: 582
score: 98.6010409268466
patch: ++ iter ; ++ iter ; System . iter ;
rank: 582
score: 98.54484049479167
patch: if ( ! ++ [ $NUMBER$ ] ;
rank: 582
score: 98.54435221354167
patch: j = Math . max ( iter , current ) ;
rank: 582
score: 98.53230794270833
patch: ++ iter ; iter if iter -- ;
rank: 583
score: 98.91578258167614
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; else
rank: 583
score: 98.88784993489584
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 583
score: 98.84068196614584
patch: final double max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 583
score: 98.77195111443015
patch: r [ max CaMeL Eval ] = Math . max ( iter , iter ) ;
rank: 583
score: 98.69470796130952
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , start ) ;
rank: 583
score: 98.59961954752605
patch: ++ iter ; ++ iter ; ++ iter ; break ;
rank: 583
score: 98.54466029575893
patch: if ( ! iter . is CaMeL Empty ( ) ) iter ;
rank: 583
score: 98.54421561104911
patch: ++ iter ; if ( ! iter . compare CaMeL To ( ;
rank: 583
score: 98.53229314630681
patch: ++ iter ; ++ / * / ++ iter ;
rank: 584
score: 98.96205205502717
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( ) . clone ( ) ;
rank: 584
score: 98.91548488451087
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) current . get CaMeL Point ( ) ;
rank: 584
score: 98.84062848772321
patch: iter = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 584
score: 98.77186802455357
patch: ++ max CaMeL Eval >= 0 && max CaMeL Eval > 0 )
rank: 584
score: 98.69442928538604
patch: cur = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 584
score: 98.59943181818181
patch: ++ iter ; ++ - iter ; if iter ;
rank: 584
score: 98.54459926060268
patch: / * ++ * * /
rank: 584
score: 98.54380446213942
patch: int iter = 0 ; while ( iter < n ) {
rank: 584
score: 98.53201904296876
patch: ++ iter ; ++ n ; ++ start ;
rank: 585
score: 98.96185857599431
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point * r ) ;
rank: 585
score: 98.91543579101562
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( ) ;
rank: 585
score: 98.8397216796875
patch: boolean checker = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 585
score: 98.77172133501838
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , current ) ;
rank: 585
score: 98.69415642233456
patch: old = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 585
score: 98.59865500710227
patch: ++ iter ; ++ iter ; int ++ iter ;
rank: 585
score: 98.5439453125
patch: if ( iter != 0 ; * /
rank: 586
score: 98.88557942708333
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = false ;
rank: 586
score: 98.8392822265625
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( 0 ) ;
rank: 586
score: 98.77171834309895
patch: ++ max CaMeL Eval = ++ max CaMeL Eval * ;
rank: 586
score: 98.69412231445312
patch: container = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 586
score: 98.59818115234376
patch: ++ iter ; ++ 1 ; ++ break ;
rank: 586
score: 98.54367501395089
patch: if ( ! iter . is CaMeL Empty ++ ) continue ; }
rank: 586
score: 98.54361300998264
patch: while ( iter != - 1 ) {
rank: 586
score: 98.53152465820312
patch: ++ iter ; ++ start ; return iter ;
rank: 587
score: 98.96158854166667
patch: double delta = compute CaMeL Objective CaMeL Gradient ( point . length ) ;
rank: 587
score: 98.88484409877232
patch: final int iter = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 587
score: 98.83912760416666
patch: while ( iter = compute CaMeL Objective CaMeL Gradient ( point ) ) {
rank: 587
score: 98.77132415771484
patch: r [ max CaMeL Eval ++ ] = Double . Na CaMeL N ; }
rank: 587
score: 98.69337373621323
patch: c = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 587
score: 98.59786376953124
patch: ++ iter ; ; else if ++ iter ;
rank: 587
score: 98.5433349609375
patch: if ( ! iter . is CaMeL Empty ; ++ n ) {
rank: 587
score: 98.54322916666666
patch: if ( ! iter . is CaMeL Empty ( ) ; return this ;
rank: 587
score: 98.53122780539773
patch: ++ iter ; ++ * / / ++ iter ;
rank: 588
score: 98.96157836914062
patch: double iter = find CaMeL Upper CaMeL Bound ( ) ;
rank: 588
score: 98.83863830566406
patch: if ( n == 0 ) {
rank: 588
score: 98.77118474786931
patch: ++ iter ; ; ++ max CaMeL Eval ++ ;
rank: 588
score: 98.6932732077206
patch: int iter = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 588
score: 98.54323167067308
patch: if ( ! iter . compare CaMeL To ( iter ) )
rank: 588
score: 98.53065321180556
patch: if ++ ++ iter ; ++ iter ;
rank: 589
score: 98.96143595377605
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ( point . point ) ;
rank: 589
score: 98.9141512784091
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point , $NUMBER$ ) ;
rank: 589
score: 98.88401100852273
patch: double [ ] steepest CaMeL Descent ++ ;
rank: 589
score: 98.77115572415866
patch: ++ max CaMeL Eval ; if ( max CaMeL Eval > ;
rank: 589
score: 98.69283254523026
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( true ) ;
rank: 589
score: 98.59631958007813
patch: ++ * ++ iter ; ; ++ iter ;
rank: 589
score: 98.54318673270089
patch: if ( ! iter . is CaMeL Empty ( ) ; else {
rank: 589
score: 98.54300944010417
patch: if ( ! iter . is CaMeL Empty iter ) ;
rank: 589
score: 98.53020562065973
patch: ++ ( ++ 1 ; ++ iter ;
rank: 590
score: 98.96127717391305
patch: final boolean [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ;
rank: 590
score: 98.91346842447916
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( true ) ;
rank: 590
score: 98.88328334263393
patch: final String point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 590
score: 98.7711540670956
patch: r [ max CaMeL Eval ] = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 590
score: 98.69258117675781
patch: result = compute CaMeL Objective CaMeL Gradient ( point . length , r ) ;
rank: 590
score: 98.59625244140625
patch: / * ++ iter ;
rank: 590
score: 98.5431620279948
patch: ++ iter ; if ( current == null ) continue ;
rank: 590
score: 98.54290771484375
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ) . ;
rank: 590
score: 98.52998046875
patch: ++ iter ; ; if ++ ++ iter ;
rank: 591
score: 98.91330190805289
patch: ++ max ; Point CaMeL Value CaMeL Pair current = current ;
rank: 591
score: 98.88301595052083
patch: final double [ ] steepest CaMeL Descent = current . 0 ;
rank: 591
score: 98.83498910757211
patch: double r = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 591
score: 98.77053833007812
patch: ++ max CaMeL Eval = Math . max ( current . iter , iter ;
rank: 591
score: 98.69242640904018
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 591
score: 98.59566040039063
patch: ++ iter ; else * if ++ iter ;
rank: 591
score: 98.54300689697266
patch: current = Math . max ( iter , current . double CaMeL Value ( ;
rank: 591
score: 98.54288058810764
patch: if ( ! iter . is CaMeL Empty ( ) || . is CaMeL Empty ++ ;
rank: 592
score: 98.96094767252605
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . length ( ) ) ;
rank: 592
score: 98.9132770040761
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . ( ) ) ;
rank: 592
score: 98.83387044270833
patch: if ( update CaMeL Formula ( iter , search CaMeL Direction ) ) {
rank: 592
score: 98.77032470703125
patch: ++ max CaMeL Eval ++ ; if ( Double . is CaMeL Na CaMeL N ( current . ;
rank: 592
score: 98.69209369860198
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( false ) ;
rank: 592
score: 98.59557088216145
patch: ++ iter ; ++ iter ; int * / iter ;
rank: 592
score: 98.54281616210938
patch: ++ iter ; if ( max CaMeL Eval < iter )
rank: 592
score: 98.54281412760416
patch: if ( ! iter . is CaMeL Empty ( ) ; return false ;
rank: 592
score: 98.5293212890625
patch: ++ iter ; ; ++ iter ; break ;
rank: 593
score: 98.9603271484375
patch: double [ ] search CaMeL Direction = find CaMeL Upper CaMeL Bound (
rank: 593
score: 98.88201497395833
patch: int iter = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 593
score: 98.83359781901042
patch: if ( compute CaMeL Objective CaMeL Gradient ( point ) )
rank: 593
score: 98.76991373697916
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval < 0 ;
rank: 593
score: 98.6917953491211
patch: [ ] iter = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 593
score: 98.59554443359374
patch: ++ * iter ; ++ iter ; iter ;
rank: 593
score: 98.5425555889423
patch: while ( ! iter . is CaMeL Empty ( ; ) {
rank: 593
score: 98.52898615056819
patch: ++ < iter ; ++ iter ; ++ iter ;
rank: 594
score: 98.83358561197916
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ,
rank: 594
score: 98.76984001608456
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) list . get ;
rank: 594
score: 98.6913818359375
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ,
rank: 594
score: 98.59549967447917
patch: ++ iter ; ++ iter ; * / ++ iter ;
rank: 594
score: 98.54265485491071
patch: result = new Point CaMeL Value CaMeL Pair ( ++ iter ) ;
rank: 595
score: 98.96004585597827
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner ( iter ) ;
rank: 595
score: 98.91249150815217
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . clone ( ) ; }
rank: 595
score: 98.8811504657452
patch: if ( checker . converged ( iter , r ) ) {
rank: 595
score: 98.83241577148438
patch: if ( ! ! update CaMeL Formula ) {
rank: 595
score: 98.69112396240234
patch: loop = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 595
score: 98.59465997869319
patch: ++ start ; ++ iter ; if ++ iter ;
rank: 595
score: 98.54252115885417
patch: if ( ! iter . is CaMeL Empty ( ) ) return current ;
rank: 595
score: 98.54231770833333
patch: while ( iter == 0 ; * /
rank: 595
score: 98.528173828125
patch: ++ iter ; ; ++ iter = iter ;
rank: 596
score: 98.95897498497597
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair 1 ;
rank: 596
score: 98.8811504657452
patch: if ( checker . converged ( point , r ) ) {
rank: 596
score: 98.8323262532552
patch: if ( point . length ( ) > 0 ) {
rank: 596
score: 98.7688876065341
patch: ++ max CaMeL Eval = ( double ) iter ;
rank: 596
score: 98.69092668805804
patch: [ ] max = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 596
score: 98.59453125
patch: ++ iter ; ++ * * int iter ;
rank: 596
score: 98.54227023654514
patch: else { / * ++ iter ; }
rank: 596
score: 98.54207611083984
patch: while ( iter >= iter ) {
rank: 596
score: 98.5281649502841
patch: ++ iter ; ++ ++ 0 ; ++ iter ;
rank: 597
score: 98.91136585582386
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner ( point ) ;
rank: 597
score: 98.8787353515625
patch: int max = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 597
score: 98.83181527944711
patch: ++ iter ; compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 597
score: 98.76888275146484
patch: ++ max ;
rank: 597
score: 98.69080403645833
patch: result = compute CaMeL Objective CaMeL Gradient ( point ) ; ++ iter ;
rank: 597
score: 98.5422119140625
patch: if ( ! iter . is CaMeL Empty ++ ) . ++ iter ;
rank: 597
score: 98.54200744628906
patch: ++ iter ; System . current CaMeL Time CaMeL Millis ( ) ++ iter ;
rank: 597
score: 98.52769886363636
patch: ++ iter ; ; ++ iter ; return iter ;
rank: 598
score: 98.95880533854167
patch: List search CaMeL Direction = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 598
score: 98.91114298502605
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point , r ) ;
rank: 598
score: 98.83147723858173
patch: while ( find CaMeL Upper CaMeL Bound ( point ) ) {
rank: 598
score: 98.76875
patch: ++ max CaMeL Eval = ; r [ max CaMeL Eval ] = ;
rank: 598
score: 98.69068100873162
patch: temp = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 598
score: 98.59428267045455
patch: ++ ++ iter ; ++ 1 ; ++ iter ;
rank: 598
score: 98.5419060202206
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ; }
rank: 598
score: 98.52678571428571
patch: ++ iter ; ; / ;
rank: 599
score: 98.76841905381944
patch: r [ max CaMeL Eval ] ++ ;
rank: 599
score: 98.69060407366071
patch: y = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 599
score: 98.59428187779018
patch: ++ iter ; else * /
rank: 599
score: 98.54180908203125
patch: if ( ! iter . is CaMeL Empty ( ) ; } }
rank: 599
score: 98.54135131835938
patch: ++ iter ; while ( iter <= n )
rank: 599
score: 98.52516392299107
patch: ++ iterator ; ++ iter ;
rank: 600
score: 98.91044284986413
patch: Point CaMeL Value CaMeL Pair current = current ; Point CaMeL Value CaMeL Pair steepest CaMeL Descent = null ;
rank: 600
score: 98.87685546875
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( r ) ;
rank: 600
score: 98.83060709635417
patch: if ( steepest CaMeL Descent . length < r . length ;
rank: 600
score: 98.76802978515624
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( hash CaMeL Code ( ;
rank: 600
score: 98.69041224888393
patch: x = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 600
score: 98.59400523792614
patch: ++ iter ; ++ iter ; ++ * 1 ;
rank: 600
score: 98.54138793945313
patch: if ( iter == iter ; break ; }
rank: 600
score: 98.54100690569196
patch: current = Math . max ( iter , current . length ) ;
rank: 600
score: 98.52449253627232
patch: ++ iter ; ++ delta ;
rank: 601
score: 98.95833687160327
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , 0 ) ;
rank: 601
score: 98.87566266741071
patch: final double point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 601
score: 98.76801006610577
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval + iter ;
rank: 601
score: 98.68998448988971
patch: global = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 601
score: 98.59382768110795
patch: ++ * ++ iter ; iter ; ++ iter ;
rank: 601
score: 98.54127807617188
patch: if ( iter == 0 ; / / ;
rank: 601
score: 98.54100623497597
patch: int n = Math . max ( iter , iter ) ;
rank: 601
score: 98.52398071289062
patch: iter ; ++ iter ; ++ iter ; }
rank: 602
score: 98.87495561079545
patch: if ( checker . converged ( point ) ) {
rank: 602
score: 98.83030395507812
patch: if ( max CaMeL Eval > 1 ) {
rank: 602
score: 98.76799982244319
patch: r [ r . length - 1 ] = ;
rank: 602
score: 98.68909563337054
patch: result = compute CaMeL Objective CaMeL Gradient ( point , true ) ;
rank: 602
score: 98.5937832919034
patch: ++ iter ; ++ iter ; ++ * / ;
rank: 602
score: 98.54119873046875
patch: if ( ! iter . is CaMeL Empty ( ) ; return ++ iter ;
rank: 602
score: 98.54080403645834
patch: ++ iter ; if ( ! current . is CaMeL Defined ( ) )
rank: 602
score: 98.52329711914062
patch: ++ iter ; ++ 1 ; -- iter ;
rank: 603
score: 98.957763671875
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( delta , r ) ;
rank: 603
score: 98.87491048177084
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( name ) ;
rank: 603
score: 98.76797688802084
patch: iter = new Point CaMeL Value CaMeL Pair ( r , iter ) ;
rank: 603
score: 98.68904935396634
patch: synchronized ( steepest CaMeL Descent ) { ++ iter ;
rank: 603
score: 98.59354858398437
patch: ++ iter ; ++ * * ; * /
rank: 603
score: 98.540771484375
patch: start = Math . max ( iter , current ) ;
rank: 603
score: 98.54055606617646
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ++ )
rank: 603
score: 98.52301025390625
patch: ++ iter ; iter / ; = iter ;
rank: 604
score: 98.95765177408855
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval , point ) ;
rank: 604
score: 98.90864780970982
patch: ++ max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 604
score: 98.87462565104167
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( $NUMBER$ ) ;
rank: 604
score: 98.82925754123264
patch: final double iter = point . length ;
rank: 604
score: 98.76792399088542
patch: ++ max CaMeL Eval = get CaMeL Context ( ) ;
rank: 604
score: 98.6888427734375
patch: that = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 604
score: 98.59312133789062
patch: / * ] * ; / ++ iter ;
rank: 604
score: 98.53989955357143
patch: if ( ! iter . is CaMeL Empty ( ) ) * ;
rank: 604
score: 98.5224365234375
patch: ++ iter ; ++ / / = iter ;
rank: 605
score: 98.95763142903645
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , max CaMeL Eval ) ;
rank: 605
score: 98.90792643229166
patch: ++ max CaMeL Eval -= search CaMeL Direction [ point . length ] ;
rank: 605
score: 98.8287109375
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ,
rank: 605
score: 98.76780395507812
patch: ++ max CaMeL Eval = iter + max ;
rank: 605
score: 98.68877704326923
patch: s = new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 605
score: 98.59251185825893
patch: / ; ++ ++ iter ;
rank: 605
score: 98.540673828125
patch: ++ iter ; while ( ! current . is CaMeL Empty ; ) {
rank: 605
score: 98.53975830078124
patch: else { ++ 0 ; } return iter ;
rank: 605
score: 98.5219482421875
patch: ++ iter ; ++ max ; = iter ;
rank: 606
score: 98.9575528231534
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( int , r ) ;
rank: 606
score: 98.90737915039062
patch: Point CaMeL Value CaMeL Pair current = current - n ;
rank: 606
score: 98.87330729166666
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( 1 ) ;
rank: 606
score: 98.82867431640625
patch: if ( Point CaMeL Value CaMeL Pair . converged ) {
rank: 606
score: 98.76778738839286
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r . to CaMeL String ;
rank: 606
score: 98.68859145220588
patch: c = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 606
score: 98.5922342936198
patch: ++ ++ ] iter ;
rank: 606
score: 98.54011753627232
patch: ++ iter ; if ( ! current . starts CaMeL With ( ;
rank: 606
score: 98.53971041165866
patch: if ( ! iter . is CaMeL Empty ( this ) ;
rank: 606
score: 98.52001342773437
patch: ++ iter ; ++ start ; ++ start ;
rank: 607
score: 98.95752766927083
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound ( false ) ;
rank: 607
score: 98.87284342447917
patch: double [ ] steepest CaMeL Descent = precondition ;
rank: 607
score: 98.82803344726562
patch: if ( max CaMeL Eval >= 0 ) {
rank: 607
score: 98.76725463867187
patch: l [ max CaMeL Eval ] = iter ;
rank: 607
score: 98.6884536743164
patch: first = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 607
score: 98.59221857244319
patch: ++ iter ; ++ * * * ++ iter ;
rank: 607
score: 98.5400723544034
patch: ++ iter ; if ( iter == 0 ) {
rank: 607
score: 98.53927001953124
patch: if ( iter > 0 ; ++ iter ;
rank: 607
score: 98.51975504557292
patch: iter ; ++ 0 ;
rank: 608
score: 98.95740855823864
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , 0 ) ;
rank: 608
score: 98.87193952287946
patch: final int iter = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 608
score: 98.76715959821429
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; break ; }
rank: 608
score: 98.688232421875
patch: long current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 608
score: 98.59186401367188
patch: else * ++ iter ; ++ - iter ;
rank: 608
score: 98.53980431189903
patch: ++ iter ; System . arraycopy ( iter , current ) ;
rank: 608
score: 98.53925030048077
patch: if ( ! iter . is CaMeL Empty ( && ) ;
rank: 608
score: 98.51876220703124
patch: ++ iter ; ++ iter ; else / }
rank: 609
score: 98.95724051339286
patch: delta += find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 609
score: 98.9065450032552
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( search CaMeL Direction . point ) ;
rank: 609
score: 98.87176044170673
patch: double length = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 609
score: 98.8264404296875
patch: r [ iter ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 609
score: 98.76715959821429
patch: ++ iter ; Math . min ( max CaMeL Eval , iter ;
rank: 609
score: 98.68812052408855
patch: int iter = iter ;
rank: 609
score: 98.59175327845982
patch: / * ] iter * /
rank: 609
score: 98.53953552246094
patch: if ( iter < iter ) {
rank: 609
score: 98.53892686631944
patch: / * * * / * * /
rank: 609
score: 98.51839599609374
patch: ++ iter ; ++ iter ; else ; iter
rank: 610
score: 98.9047342936198
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . to CaMeL String ( ) ) ;
rank: 610
score: 98.8260028545673
patch: int max CaMeL Eval = search CaMeL Direction [ 0 ] ;
rank: 610
score: 98.76697716346153
patch: ++ iter ; Math . max ( max CaMeL Eval , ;
rank: 610
score: 98.68790980747768
patch: clone = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 610
score: 98.53924560546875
patch: ++ iter ; return current ;
rank: 610
score: 98.538818359375
patch: else { * * * / ++ iter ;
rank: 610
score: 98.51766967773438
patch: ++ super ; ++ iter ; ++ iter ;
rank: 611
score: 98.90431213378906
patch: ++ steepest CaMeL Descent ;
rank: 611
score: 98.87099783761161
patch: final Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker ;
rank: 611
score: 98.82594517299107
patch: final double goal = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 611
score: 98.76674194335938
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . value ) ;
rank: 611
score: 98.68742152622768
patch: [ ] 0 = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 611
score: 98.59136408025569
patch: ++ iter ; ++ value ; ++ - iter ;
rank: 611
score: 98.53920084635416
patch: if ( ! iter . is CaMeL Empty ( ) ) { continue ;
rank: 611
score: 98.53773716517857
patch: if ( ! iter . is CaMeL Empty ( ; return iter ;
rank: 611
score: 98.51602608816964
patch: ++ iter ; ++ super ;
rank: 612
score: 98.95655358355978
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( $STRING$ , r ) ;
rank: 612
score: 98.90416949728261
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) checker . do CaMeL Optimize ( ) ;
rank: 612
score: 98.76673380533855
patch: ++ iter ; if ( ++ max CaMeL Eval > ;
rank: 612
score: 98.6872314453125
patch: data = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 612
score: 98.59086303710937
patch: ++ iter ; ++ ++ * ++ iter ;
rank: 612
score: 98.5387850674716
patch: ++ iter ; while ( iter >= n ) {
rank: 612
score: 98.53752585018383
patch: if ( ! iter . is CaMeL Empty ++ this . iter iter . length ;
rank: 612
score: 98.5152099609375
patch: ++ iter ; ++ iter ; if iter ++
rank: 613
score: 98.95650390625
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair (
rank: 613
score: 98.87021309988839
patch: final int max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 613
score: 98.82310133713942
patch: Iterator iter = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 613
score: 98.76666259765625
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( float CaMeL Value ) ;
rank: 613
score: 98.53863525390625
patch: ++ iter ; if ( current instanceof ;
rank: 613
score: 98.53738064236111
patch: if ( iter > $NUMBER$ ; * /
rank: 613
score: 98.51465454101563
patch: ++ 1 ; ++ iter ; -- iter ;
rank: 614
score: 98.903564453125
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( $STRING$ ) ;
rank: 614
score: 98.87021108774039
patch: int max = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 614
score: 98.7666485126202
patch: result [ iter ] = new Point CaMeL Value CaMeL Pair ;
rank: 614
score: 98.68623570033482
patch: current = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 614
score: 98.59023611886161
patch: -- iter ; ++ iter ;
rank: 614
score: 98.53809407552083
patch: ++ iter ; ++ iter ; System . out . ; ++ iter ;
rank: 614
score: 98.53713553292411
patch: if ( ! iter . is CaMeL Empty ( ; * / ;
rank: 614
score: 98.51434326171875
patch: ++ r ; ++ iter ; ++ iter ;
rank: 615
score: 98.9560317993164
patch: delta = find CaMeL Upper CaMeL Bound ( point , max CaMeL Eval ) ;
rank: 615
score: 98.90342646059783
patch: int [ ] steepest CaMeL Descent = steepest CaMeL Descent . get ( point , r ) ;
rank: 615
score: 98.86958821614583
patch: int max = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 615
score: 98.76650565011161
patch: return new Point CaMeL Value CaMeL Pair ( iter , iter , ;
rank: 615
score: 98.68598937988281
patch: root = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 615
score: 98.58921595982143
patch: else ++ * ++ iter ;
rank: 615
score: 98.53797200520833
patch: current = Math . max ( max CaMeL Eval , ++ n ) ;
rank: 615
score: 98.53689395680146
patch: if ( ! iter . is CaMeL Empty ( ) ; return iter . start ;
rank: 616
score: 98.95601222826087
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair > current = current ;
rank: 616
score: 98.90162194293478
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . clone ( ) ; {
rank: 616
score: 98.86942545572917
patch: int n = find CaMeL Upper CaMeL Bound ( ) ;
rank: 616
score: 98.82018025716145
patch: current = new Point CaMeL Value CaMeL Pair ( point ,
rank: 616
score: 98.76617140997024
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r [ 0 ] ;
rank: 616
score: 98.6859619140625
patch: list = new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 616
score: 98.53783240685097
patch: ++ iter ; if ( ! current . compare CaMeL To ;
rank: 616
score: 98.53611127068015
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ++ ;
rank: 616
score: 98.51355852399554
patch: iter ; ++ ++ iter ;
rank: 617
score: 98.95599834735577
patch: final double [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( iter ) ;
rank: 617
score: 98.90074666341145
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . get CaMeL Point ( ) ) ;
rank: 617
score: 98.86888709435097
patch: Point CaMeL Value CaMeL Pair current = point [ iter ] ;
rank: 617
score: 98.81959751674107
patch: max = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 617
score: 98.76607513427734
patch: ++ max CaMeL Eval * $NUMBER$ ;
rank: 617
score: 98.68593236019737
patch: ( ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) ) ;
rank: 617
score: 98.58904418945312
patch: ++ 1 ; ++ iter ; if iter ;
rank: 617
score: 98.53758893694196
patch: if ( iter == null )
rank: 617
score: 98.53581407335069
patch: if ( iter < 0 ) break ;
rank: 618
score: 98.90067545572917
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( ) . precondition ( ) ;
rank: 618
score: 98.86858661358173
patch: final double [ ] steepest CaMeL Descent = $NUMBER$ ;
rank: 618
score: 98.76598539806548
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , iter ; ;
rank: 618
score: 98.68543836805556
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( point ) ;
rank: 618
score: 98.58798828125
patch: ++ * ++ - iter ; ++ iter ;
rank: 618
score: 98.5374755859375
patch: if ( ! iter . is CaMeL Empty ( ) ) continue false ;
rank: 618
score: 98.535791015625
patch: while ( ! iter . is CaMeL Empty ( ; ) return null ;
rank: 618
score: 98.51113455636161
patch: iter ++ ; ++ n ;
rank: 619
score: 98.95592730978261
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > current = null ;
rank: 619
score: 98.900146484375
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( ) . clone ( ) ;
rank: 619
score: 98.81759033203124
patch: if ( iter % n == 0 ) {
rank: 619
score: 98.7659683227539
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , max ;
rank: 619
score: 98.68519810267857
patch: right = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 619
score: 98.5877685546875
patch: ++ iter ; ++ iter ; System . arraycopy iter ;
rank: 619
score: 98.53745930989584
patch: ++ n ; return new Point CaMeL Value CaMeL Pair ( current ) ;
rank: 619
score: 98.5355975811298
patch: if ( ! iter . equals ( iter . 0 ) ;
rank: 619
score: 98.51112670898438
patch: iter ; iter if ++ ; ++ iter ;
rank: 620
score: 98.81723458426339
patch: if ( point . length ( ) == r . length ) {
rank: 620
score: 98.76587785993304
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval * iter ;
rank: 620
score: 98.68508572048611
patch: ( ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) )
rank: 620
score: 98.58729248046875
patch: ++ 1 ; ++ iter ; while iter ;
rank: 620
score: 98.537451171875
patch: ++ iter ; if ( ! current . is CaMeL Assignable CaMeL From ;
rank: 620
score: 98.53541395399306
patch: / * ++ * * / * /
rank: 620
score: 98.51090698242187
patch: ++ iter ; ++ iter ; } / ;
rank: 621
score: 98.89952087402344
patch: ++ max CaMeL Eval -= r ;
rank: 621
score: 98.86700439453125
patch: double [ ] steepest CaMeL Descent = $STRING$ ;
rank: 621
score: 98.81715698242188
patch: if ( iter % update CaMeL Formula ) {
rank: 621
score: 98.76554361979167
patch: ++ max CaMeL Eval * iter * /
rank: 621
score: 98.68486585115132
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( r ) ;
rank: 621
score: 98.53729248046875
patch: start = Math . max ( iter , iter ) ;
rank: 621
score: 98.53533528645833
patch: if ( ! iter . is CaMeL Empty ( this . iter ) ;
rank: 621
score: 98.51029750279018
patch: ++ iter ; ; iter ;
rank: 622
score: 98.95506184895834
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > point = null ;
rank: 622
score: 98.89817212975544
patch: final double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ; {
rank: 622
score: 98.86448567708334
patch: final double [ ] steepest CaMeL Descent = point . 0 ;
rank: 622
score: 98.8148193359375
patch: ++ iter ; final double steepest CaMeL Descent ;
rank: 622
score: 98.76478576660156
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval + 1 ;
rank: 622
score: 98.68475341796875
patch: z = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 622
score: 98.58705832741477
patch: ++ iter ; ++ iter ; int value ++ ;
rank: 622
score: 98.53704833984375
patch: if ( ! iter . is CaMeL Empty ( ; ; ) {
rank: 622
score: 98.53526088169643
patch: / * * * * ;
rank: 622
score: 98.5101318359375
patch: ++ iter ; ++ iter ; break ; }
rank: 623
score: 98.89762369791667
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition . precondition ( ) ;
rank: 623
score: 98.81471604567308
patch: double search CaMeL Direction = search CaMeL Direction [ 0 ] ;
rank: 623
score: 98.7647705078125
patch: ++ n - max CaMeL Eval ;
rank: 623
score: 98.68445638020833
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair {
rank: 623
score: 98.58668101917614
patch: / * ++ iter ; * / ++ iter ;
rank: 623
score: 98.53681640625
patch: current = Math . max ( max CaMeL Eval , ++ iter ) ;
rank: 623
score: 98.53515625
patch: else { ++ * iter ;
rank: 623
score: 98.51009521484374
patch: ++ iter ; ++ start ; ++ n ;
rank: 624
score: 98.95449431046195
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point . get CaMeL Point ( ) ) ;
rank: 624
score: 98.89756266276042
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( point . ) ;
rank: 624
score: 98.86261455829327
patch: int delta = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 624
score: 98.81455641526442
patch: double checker = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 624
score: 98.76464029947917
patch: ++ max CaMeL Eval += Math . max ( iter , iter ) ;
rank: 624
score: 98.68395233154297
patch: meta = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 624
score: 98.5860107421875
patch: i * ++ ; ++ iter ; iter ;
rank: 624
score: 98.53648274739584
patch: return new Point CaMeL Value CaMeL Pair ( iter , current ) ; }
rank: 624
score: 98.53504096137152
patch: / * * / ++ iter ; }
rank: 624
score: 98.510009765625
patch: ++ iter ; ; ++ iter ; else ;
rank: 625
score: 98.81426391601562
patch: if ( this . update CaMeL Formula ) {
rank: 625
score: 98.76463681175595
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r . get CaMeL Point ;
rank: 625
score: 98.68395124162946
patch: result = compute CaMeL Objective CaMeL Gradient ( point . point ) ;
rank: 625
score: 98.536328125
patch: if ( ! iter . compare CaMeL To ( current ) ) continue ;
rank: 625
score: 98.53487548828124
patch: if ( iter != 0 ; break ; }
rank: 625
score: 98.5098876953125
patch: ++ iter ; ++ length ; ++ iter ;
rank: 626
score: 98.9534912109375
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , current , current ) ;
rank: 626
score: 98.8973388671875
patch: double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner . precondition ( point ) ;
rank: 626
score: 98.81414325420673
patch: if ( point . length ( ) == point . length ;
rank: 626
score: 98.76450892857143
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter , max CaMeL Eval ;
rank: 626
score: 98.68370225694444
patch: return new Point CaMeL Value CaMeL Pair ( compute CaMeL Objective CaMeL Gradient ( ) ) ;
rank: 626
score: 98.58528645833333
patch: else ++ ++ iter ;
rank: 626
score: 98.53480113636364
patch: else { ++ iter ; } if ++ iter ;
rank: 626
score: 98.5076416015625
patch: ++ iter ; ; if iter ; / /
rank: 627
score: 98.95346901633523
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction , 0 ) ;
rank: 627
score: 98.89727783203125
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , r ) ;
rank: 627
score: 98.8612548828125
patch: iter = search CaMeL Direction [ iter ] ;
rank: 627
score: 98.81373009314903
patch: int current = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 627
score: 98.76444498697917
patch: ++ max CaMeL Eval = ( double ) current . ;
rank: 627
score: 98.68365478515625
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ,
rank: 627
score: 98.5848388671875
patch: ++ iter ; ++ iter ; / * * / /
rank: 627
score: 98.53616768973214
patch: return new Point CaMeL Value CaMeL Pair ( current , current ) ;
rank: 627
score: 98.53458345853366
patch: if ( ! iter . is CaMeL Empty ++ ) * /
rank: 627
score: 98.50762939453125
patch: ++ iter ; ++ list ; ++ iter ;
rank: 628
score: 98.953251953125
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair ;
rank: 628
score: 98.8962069424716
patch: ++ max CaMeL Eval -= r [ 0 ] ;
rank: 628
score: 98.859765625
patch: point [ 0 ] = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 628
score: 98.76441243489583
patch: ++ max CaMeL Eval -- ; if ( max CaMeL Eval > 0 ;
rank: 628
score: 98.68280029296875
patch: return new Point CaMeL Value CaMeL Pair ( point , iter ) ;
rank: 628
score: 98.5845703125
patch: ++ iter ; * ; if ++ iter ;
rank: 628
score: 98.5351092998798
patch: if ( ! current . is CaMeL Empty ( ; ) ;
rank: 628
score: 98.53410200639205
patch: else { if ++ iter - 0 . length ;
rank: 628
score: 98.50584716796875
patch: ++ iter ; ++ iter ; notify ++ ;
rank: 629
score: 98.95318603515625
patch: int [ ] steepest CaMeL Descent = preconditioner . preconditioner . precondition ( ) ;
rank: 629
score: 98.85929361979167
patch: int [ ] steepest CaMeL Descent = current ;
rank: 629
score: 98.81238664899554
patch: if ( point . length ( ) < max CaMeL Eval ) {
rank: 629
score: 98.76409040178571
patch: ++ iter * / * /
rank: 629
score: 98.68258846507354
patch: public Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 629
score: 98.58432839133523
patch: ++ iter ; ++ iter ; ++ 1 ; ;
rank: 629
score: 98.53470865885417
patch: ++ iter ; Thread . current CaMeL Thread ( ) . start ; }
rank: 629
score: 98.53404889787946
patch: while ( ! iter . is CaMeL Empty ( ; ) break ;
rank: 630
score: 98.95315115792411
patch: delta += compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 630
score: 98.8953273607337
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . 0 ) ;
rank: 630
score: 98.85860770089286
patch: final double [ ] compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 630
score: 98.8114013671875
patch: double delta = r [ max CaMeL Eval ] ;
rank: 630
score: 98.76385498046875
patch: Iterator < Point CaMeL Value CaMeL Pair > iter = this . ;
rank: 630
score: 98.68244280133929
patch: y = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 630
score: 98.53460693359375
patch: ++ iter ; if ( current != null ) { ++ iter ;
rank: 630
score: 98.53391676682692
patch: else { iter += 0 . 0 ; ++ iter ; }
rank: 630
score: 98.50567626953125
patch: iter ; ++ iter ; ++ ++ iter ;
rank: 631
score: 98.9524395282452
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , false ) ;
rank: 631
score: 98.8952392578125
patch: ++ max CaMeL Eval -= point . length ;
rank: 631
score: 98.8580830891927
patch: delta += checker . converged ( max CaMeL Eval ) ;
rank: 631
score: 98.81055704752605
patch: Point CaMeL Value CaMeL Pair < double , double [ ]
rank: 631
score: 98.76362537202381
patch: final Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r [ iter ] ;
rank: 631
score: 98.68232945033482
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 631
score: 98.58320835658482
patch: else iter ; ++ iter ;
rank: 631
score: 98.53448079427083
patch: if ( ! iter . is CaMeL Empty ( ; ) ) break ;
rank: 631
score: 98.53366524832589
patch: while ( ! iter . is CaMeL Empty ++ ) return iter ;
rank: 631
score: 98.504736328125
patch: / ; ++ ++ iter ; ++ iter ;
rank: 632
score: 98.95230806790866
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 632
score: 98.89506022135417
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) this . search CaMeL Direction [ iter ] ;
rank: 632
score: 98.80964006696429
patch: if ( ! find CaMeL Upper CaMeL Bound ( point ) ) {
rank: 632
score: 98.76327175564236
patch: ++ iter ; for ; ; ) {
rank: 632
score: 98.68227251838235
patch: this = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 632
score: 98.58278586647727
patch: ++ iter ; ++ - * / ++ iter ;
rank: 632
score: 98.53413899739583
patch: while ( iter ++ >= 0 ) {
rank: 632
score: 98.53349958147321
patch: ++ iter ; } else {
rank: 632
score: 98.50453404017857
patch: ++ iter ; iter ; ;
rank: 633
score: 98.95189319957386
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ( ) ;
rank: 633
score: 98.80867004394531
patch: while ( iter < 0 ) {
rank: 633
score: 98.76318359375
patch: r [ max CaMeL Eval ++ ] = ; ;
rank: 633
score: 98.68215506417411
patch: result = compute CaMeL Objective CaMeL Gradient ( point , iter ) ;
rank: 633
score: 98.58205344460227
patch: ++ iter ; ++ iter ; ++ while iter ;
rank: 633
score: 98.53397827148437
patch: ++ iter ; ++ current ; ++ current ;
rank: 633
score: 98.53348795572917
patch: if ( ! iter . is CaMeL Empty ( ; iter . equals ( $NUMBER$ ) ;
rank: 633
score: 98.50386352539063
patch: ++ iter ; ++ iter ; / ; ;
rank: 634
score: 98.95170375279018
patch: delta += find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 634
score: 98.89375636888587
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . new CaMeL
rank: 634
score: 98.80861990792411
patch: current = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 634
score: 98.76288604736328
patch: result = new Point CaMeL Value CaMeL Pair ( ++ max CaMeL Eval , ;
rank: 634
score: 98.68214518229166
patch: item = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 634
score: 98.58182198660714
patch: ++ iter ; synchronized iter ;
rank: 634
score: 98.53383567116477
patch: ++ iter ; if ( iter != - 1 )
rank: 634
score: 98.5328369140625
patch: ++ [ ] ++ iter ;
rank: 634
score: 98.50317993164063
patch: ++ iter ; ++ iter ; ++ iterator ;
rank: 635
score: 98.95168050130208
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , point , current ) ;
rank: 635
score: 98.89332116168478
patch: int [ ] steepest CaMeL Descent = preconditioner . compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 635
score: 98.76250610351562
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( double CaMeL Value ) ;
rank: 635
score: 98.68211454503677
patch: a = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 635
score: 98.58162841796874
patch: ++ iter ; ++ 1 ; for iter ;
rank: 635
score: 98.50310668945312
patch: ++ iter ; ++ n ; ++ 1 ;
rank: 636
score: 98.95153045654297
patch: double steepest CaMeL Descent = find CaMeL Upper CaMeL Bound ( point ,
rank: 636
score: 98.89293416341145
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( point ) ;
rank: 636
score: 98.8520840731534
patch: delta += search CaMeL Direction [ point . length ;
rank: 636
score: 98.76225353422619
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( Double . MAX _ VALUE ;
rank: 636
score: 98.68199247472427
patch: y = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 636
score: 98.58046653053977
patch: ++ iter ; * * * / ++ iter ;
rank: 636
score: 98.53325737847223
patch: ++ iter ; synchronized ( this ) {
rank: 636
score: 98.53258599175348
patch: else { / * * / } }
rank: 636
score: 98.5029541015625
patch: ++ iter ; iter
rank: 637
score: 98.9514797044837
patch: Point CaMeL Value CaMeL Pair point = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( ) ;
rank: 637
score: 98.89292399088542
patch: final double [ ] search CaMeL Direction = steepest CaMeL Descent . preconditioner . precondition ( ) ;
rank: 637
score: 98.8080342610677
patch: if ( point . length ( ) > n ) {
rank: 637
score: 98.76213989257812
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r [ n ] ;
rank: 637
score: 98.68169403076172
patch: pending = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 637
score: 98.5798583984375
patch: ++ * ] ++ iter ; ++ iter ;
rank: 637
score: 98.53273362379808
patch: ++ iter ; current = current . get CaMeL Parent ( ;
rank: 637
score: 98.53256225585938
patch: if ( ! iter . is CaMeL Empty ++ && . $NUMBER$ > 0 ;
rank: 637
score: 98.50099400111607
patch: ++ iter ; ++ stop ;
rank: 638
score: 98.84939340444711
patch: int max = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 638
score: 98.80775146484375
patch: delta = r [ max CaMeL Eval ] ;
rank: 638
score: 98.76171875
patch: ++ max CaMeL Eval < 0 )
rank: 638
score: 98.68120574951172
patch: comp = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 638
score: 98.57978515625
patch: ++ iter ; try { if ++ iter ;
rank: 638
score: 98.53273362379808
patch: current = Math . max ( iter , ++ n ) ;
rank: 638
score: 98.53229522705078
patch: if ( ! iter . is CaMeL Empty ( ) ; return null ; }
rank: 638
score: 98.4989725748698
patch: ++ ( ++ iter ;
rank: 639
score: 98.89200846354167
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . preconditioner ( iter ) ;
rank: 639
score: 98.76171875
patch: ++ max CaMeL Eval ] = Math . min ( ;
rank: 639
score: 98.68119594029018
patch: return new Point CaMeL Value CaMeL Pair ( point , delta ) ;
rank: 639
score: 98.53270545372597
patch: if ( ! iter . contains ( current ) ) break ;
rank: 639
score: 98.53217424665179
patch: if ( ! iter . is CaMeL Empty ( ; ++ 1 )
rank: 640
score: 98.95122736150569
patch: List steepest CaMeL Descent = preconditioner . precondition ( point , search CaMeL Direction ) ;
rank: 640
score: 98.84678431919643
patch: int [ ] search CaMeL Direction = steepest CaMeL Descent ;
rank: 640
score: 98.76165364583333
patch: ++ max CaMeL Eval = Math . min ( current , iter ) ;
rank: 640
score: 98.68114362444196
patch: result = compute CaMeL Objective CaMeL Gradient ( point , solver ) ;
rank: 640
score: 98.53269264914773
patch: ++ iter ; while ( iter != - 1 )
rank: 640
score: 98.53196885850694
patch: / * * * ++ * / /
rank: 641
score: 98.95111638849431
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair current = current ;
rank: 641
score: 98.89148966471355
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( search CaMeL Direction , point ) ;
rank: 641
score: 98.80718524639423
patch: if ( point . length ( ) > point . length ;
rank: 641
score: 98.76124572753906
patch: ++ max CaMeL Eval >= max CaMeL Eval ; ++ max CaMeL Eval -- ;
rank: 641
score: 98.68112182617188
patch: cmp = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 641
score: 98.57952880859375
patch: ++ iter ; * * * ++ iter ;
rank: 641
score: 98.53267415364583
patch: if ( ! iter . is CaMeL Empty ( ) ) break false ;
rank: 641
score: 98.53193010602679
patch: else { ++ out ; }
rank: 641
score: 98.49066162109375
patch: iter iter if ++ ;
rank: 642
score: 98.76105608258929
patch: ++ max CaMeL Eval = iter ; ++ max CaMeL Eval ; }
rank: 642
score: 98.68064778645834
patch: list = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 642
score: 98.57935442243304
patch: ++ iter ; int 1 ;
rank: 642
score: 98.53197303185097
patch: try { current = new Point CaMeL Value CaMeL Pair ( ;
rank: 642
score: 98.5318115234375
patch: / * * * ++ iter * * /
rank: 642
score: 98.49008614676339
patch: ++ iter ; iter * ;
rank: 643
score: 98.89052327473958
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . precondition ( max CaMeL Eval ,
rank: 643
score: 98.80532004616477
patch: if ( update CaMeL Formula ) { ++ iter ;
rank: 643
score: 98.76103973388672
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; ++ max CaMeL Eval ;
rank: 643
score: 98.680419921875
patch: [ ] steepest CaMeL Descent = preconditioner . get CaMeL
rank: 643
score: 98.57932350852273
patch: ++ iter ; ++ * / ++ iter ; ;
rank: 643
score: 98.53175048828125
patch: else { if ++ 0 . 0 ; }
rank: 643
score: 98.53147888183594
patch: ++ iter ; ++ iter ) {
rank: 644
score: 98.89052327473958
patch: double [ ] steepest CaMeL Descent = steepest CaMeL Descent . preconditioner ( 0 ) ;
rank: 644
score: 98.76088256835938
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( iter , iter ;
rank: 644
score: 98.6802749633789
patch: result = compute CaMeL Objective CaMeL Gradient ( point , point , r ) ;
rank: 644
score: 98.57877022879464
patch: ++ iter ; break ; ;
rank: 644
score: 98.53152804904514
patch: / * * * ++ iter ; /
rank: 644
score: 98.53101524939903
patch: if ( ! current . is CaMeL Empty ( ; ) )
rank: 644
score: 98.48344203404018
patch: iter else ; ++ iter ;
rank: 645
score: 98.80451049804688
patch: while ( n < r . length ) {
rank: 645
score: 98.76085553850446
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; iter ++ ;
rank: 645
score: 98.68009440104167
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval , r ) ;
rank: 645
score: 98.53130231584821
patch: ++ r [ 0 ] ;
rank: 645
score: 98.5308125813802
patch: ++ iter ; if ( iter != - 1 ) {
rank: 645
score: 98.48316301618304
patch: ++ iter ; ++ - ;
rank: 646
score: 98.94899338942308
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair 0 ;
rank: 646
score: 98.88963904747597
patch: final int iter = find CaMeL Upper CaMeL Bound ( ) ;
rank: 646
score: 98.76079644097223
patch: if ( iter > max CaMeL Eval ;
rank: 646
score: 98.68006184895833
patch: result = new Line CaMeL Search CaMeL Function ( point , r ) ;
rank: 646
score: 98.57683771306819
patch: ++ 1 ; ++ iter ; ++ - iter ;
rank: 646
score: 98.53122287326389
patch: / * * / * ++ iter ;
rank: 646
score: 98.53073556082589
patch: current = iter - iter ;
rank: 646
score: 98.48072160993304
patch: ++ iter ; -- iter ;
rank: 647
score: 98.94877115885417
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r . length ) ;
rank: 647
score: 98.88877360026042
patch: double CaMeL Value = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction . search CaMeL Direction , r ) ;
rank: 647
score: 98.8041104403409
patch: current = compute CaMeL Objective CaMeL Gradient ( point ,
rank: 647
score: 98.760791015625
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . get ; ;
rank: 647
score: 98.680029296875
patch: ! compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 647
score: 98.53077528211806
patch: ++ [ ] iter = iter ; }
rank: 647
score: 98.53060477120536
patch: while ( ! current . is CaMeL Empty ( ; ; ) {
rank: 647
score: 98.48031180245536
patch: ++ < iter ; / /
rank: 648
score: 98.94857083834134
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , $NUMBER$ ) ;
rank: 648
score: 98.7607189360119
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . clone ( ) ;
rank: 648
score: 98.67999674479167
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ;
rank: 648
score: 98.57637162642045
patch: ++ iter ; ++ iter ; ++ int iter ;
rank: 648
score: 98.53073120117188
patch: if ( ! iter . is CaMeL Empty ( ) ) . ++ 1 ;
rank: 648
score: 98.53006320529514
patch: ++ iter ; ; current = iter ;
rank: 648
score: 98.47981480189732
patch: return iter ; ++ iter ;
rank: 649
score: 98.94849650065105
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 649
score: 98.88734944661458
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . point . point ) ;
rank: 649
score: 98.76063889723558
patch: if ( iter >= max CaMeL Eval ) { ++ iter ;
rank: 649
score: 98.6798095703125
patch: protected Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 649
score: 98.57628284801136
patch: ++ value ; ++ iter ; if ++ iter ;
rank: 649
score: 98.53057183159723
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ; * /
rank: 649
score: 98.5299072265625
patch: result = new Point CaMeL Value CaMeL Pair ( ++ n ) ;
rank: 649
score: 98.47842843191964
patch: iter ++ ; ++ start ;
rank: 650
score: 98.94811480978261
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , - r ) ;
rank: 650
score: 98.83936418805804
patch: final int point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 650
score: 98.80282156808036
patch: if ( iter % search CaMeL Direction . length < n ) {
rank: 650
score: 98.76063755580357
patch: ++ max CaMeL Eval = iter ; ++ max CaMeL Eval ; ;
rank: 650
score: 98.6796646118164
patch: history = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 650
score: 98.57621626420455
patch: ++ iter ; ++ iter ; while iter ; ;
rank: 650
score: 98.52959526909723
patch: else { if ++ 0 . 1 ;
rank: 650
score: 98.52903053977273
patch: ++ iter ; if ( iter < n ) {
rank: 650
score: 98.47777303059895
patch: ++ iter ; ++ ;
rank: 651
score: 98.83737417367789
patch: Point CaMeL Value CaMeL Pair current = point [ 0 ] ;
rank: 651
score: 98.80235072544643
patch: final double n = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 651
score: 98.75983537946429
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Integer . MAX _ VALUE )
rank: 651
score: 98.67962646484375
patch: results = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 651
score: 98.52955118815105
patch: else { if ++ iter - 0 . length ; }
rank: 651
score: 98.5288973721591
patch: int n = Math . max ( iter ) ;
rank: 651
score: 98.47528948102679
patch: ++ iter ; else / /
rank: 652
score: 98.94795558763587
patch: final double [ ] steepest CaMeL Descent = preconditioner . precondition ( this , r ) ;
rank: 652
score: 98.80047607421875
patch: final double solver = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 652
score: 98.75974818638393
patch: r [ max CaMeL Eval ] = Math . max ( ; }
rank: 652
score: 98.6795425415039
patch: group = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 652
score: 98.57497336647727
patch: ++ iter ; iter ; * / ++ iter ;
rank: 652
score: 98.52948676215277
patch: else { if ( iter > 1 ;
rank: 652
score: 98.52762545072116
patch: current = Math . max ( iter , ++ iter ) ;
rank: 652
score: 98.47047642299107
patch: ++ 0 ; ++ start ;
rank: 653
score: 98.9476787860577
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair ++ ;
rank: 653
score: 98.8855692545573
patch: final double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent . 0 ;
rank: 653
score: 98.83550555889423
patch: delta += new Line CaMeL Search CaMeL Function ( point ) ;
rank: 653
score: 98.7955791766827
patch: if ( checker . converged ( iter , $STRING$ ) ) {
rank: 653
score: 98.6794677734375
patch: result = new Point CaMeL Value CaMeL Pair ( point , iter ) ;
rank: 653
score: 98.574267578125
patch: ++ iter ; while iter ; while iter ;
rank: 653
score: 98.52716619318181
patch: if ( current != null && current . ; }
rank: 653
score: 98.46803501674107
patch: ++ iter ; ++ in ;
rank: 654
score: 98.9475567157452
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > . Point CaMeL Value CaMeL Pair [
rank: 654
score: 98.88555908203125
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( ) ; ++ iter ;
rank: 654
score: 98.7596435546875
patch: ++ max CaMeL Eval = r [ iter ] ;
rank: 654
score: 98.6791763305664
patch: all = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 654
score: 98.57384236653645
patch: ++ iter ; ++ iter ; iter ; if iter ;
rank: 654
score: 98.52919699928977
patch: throw new Runtime CaMeL Exception ( $STRING$ + $NUMBER$ ;
rank: 654
score: 98.52710978190105
patch: temp = Math . max ( iter , current ) ;
rank: 655
score: 98.94725690569196
patch: point = find CaMeL Upper CaMeL Bound ( point , r ) ;
rank: 655
score: 98.8844706217448
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , r ) ;
rank: 655
score: 98.83462524414062
patch: int [ ] search CaMeL Direction = point . length ;
rank: 655
score: 98.79450017755681
patch: if ( ! steepest CaMeL Descent ) {
rank: 655
score: 98.75960286458333
patch: iter = new Point CaMeL Value CaMeL Pair ( r [ iter ] ;
rank: 655
score: 98.67906358506944
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , initial CaMeL Step ) ;
rank: 655
score: 98.57381591796874
patch: ++ * ++ iter ; iter ; * /
rank: 655
score: 98.52872721354167
patch: if ( iter <= 0 ; * /
rank: 655
score: 98.46649169921875
patch: iter ; iter if ++ ;
rank: 656
score: 98.88374837239583
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point . search CaMeL Direction , 0 ) ;
rank: 656
score: 98.8343975360577
patch: double [ ] steepest CaMeL Descent = point ) ;
rank: 656
score: 98.75947265625
patch: ++ max CaMeL Eval >= Math . max ( iter , iter ) ;
rank: 656
score: 98.67866785386029
patch: node = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 656
score: 98.57315063476562
patch: ++ iter ; ++ iter ; iter ; int iter ;
rank: 656
score: 98.52866617838542
patch: else { if ++ 0 . 0 ;
rank: 656
score: 98.52581787109375
patch: Iterator iter = iter . iterator ( ) ; while ;
rank: 656
score: 98.46543666294643
patch: ++ 0 ; ++ n ;
rank: 657
score: 98.94710286458333
patch: double [ ] steepest CaMeL Descent = preconditioner . clone ( point , search CaMeL Direction ) ;
rank: 657
score: 98.88332112630208
patch: final double [ ] steepest CaMeL Descent = steepest CaMeL Descent . clone ( point , r ) ;
rank: 657
score: 98.75919596354167
patch: iter iter = new Point CaMeL Value CaMeL Pair ( ;
rank: 657
score: 98.67793354235198
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( n ) ;
rank: 657
score: 98.52837262834821
patch: } else if ++ iter ;
rank: 657
score: 98.52573464133523
patch: while ( ! current . is CaMeL Empty ; )
rank: 657
score: 98.46242268880208
patch: ++ iter ; ; iter
rank: 658
score: 98.94652506510417
patch: int max CaMeL Eval += find CaMeL Upper CaMeL Bound ( point ) ;
rank: 658
score: 98.88304725060097
patch: ++ max CaMeL Eval -= search CaMeL Direction [ ) ] ;
rank: 658
score: 98.8341064453125
patch: delta += new Point CaMeL Value CaMeL Pair ( point ) ;
rank: 658
score: 98.78718872070313
patch: if ( n < max CaMeL Eval ) {
rank: 658
score: 98.75902557373047
patch: ++ max CaMeL Eval ; if ;
rank: 658
score: 98.67754255022321
patch: n = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 658
score: 98.57230224609376
patch: ++ iter ; ++ - 1 ; iter ;
rank: 658
score: 98.52827962239583
patch: if ( ! iter . is CaMeL Empty ++ && iter . equals ( 0 ) ;
rank: 658
score: 98.5255126953125
patch: ++ iter ; if ( iter > 0 )
rank: 659
score: 98.94605553668478
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( this ) ;
rank: 659
score: 98.83408813476562
patch: delta += search CaMeL Direction [ n ] ;
rank: 659
score: 98.7864239032452
patch: if ( point . length ( ) < r . length ;
rank: 659
score: 98.75897686298077
patch: ++ iter ; r [ max CaMeL Eval ++ ] ++ ;
rank: 659
score: 98.67744526110198
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( this ) ;
rank: 659
score: 98.57223510742188
patch: if ++ iter ; ++ iter ; iter ;
rank: 659
score: 98.52792697482639
patch: else { * * * / } }
rank: 659
score: 98.52490844726563
patch: ++ iter ; while ( iter < iter )
rank: 659
score: 98.45465959821429
patch: ++ 1 ; ++ start ;
rank: 660
score: 98.94586651141827
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point . length ) ;
rank: 660
score: 98.8809305826823
patch: if ( steepest CaMeL Descent == 0 ) {
rank: 660
score: 98.83401053292411
patch: final Object point = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 660
score: 98.7852313701923
patch: if ( point . length ( ) != point . length ;
rank: 660
score: 98.75896606445312
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . get ( ;
rank: 660
score: 98.67738444010416
patch: current = new Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 660
score: 98.57221013849431
patch: ++ iter ; ++ iter ; final ++ iter ;
rank: 660
score: 98.52751608455883
patch: if ( ! iter . is CaMeL Empty ++ this . iter . length ; }
rank: 660
score: 98.52447509765625
patch: ++ iter ; try { current = iter ;
rank: 661
score: 98.94512939453125
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( n ) ;
rank: 661
score: 98.87997436523438
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( current ) ;
rank: 661
score: 98.83216271033653
patch: double start = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 661
score: 98.78466186523437
patch: if ( max CaMeL Eval > n ) {
rank: 661
score: 98.7587139423077
patch: ++ max CaMeL Eval + max CaMeL Eval ; ++ iter ;
rank: 661
score: 98.572021484375
patch: ++ iter ; ++ * / ++ - iter ;
rank: 661
score: 98.52735188802083
patch: if ( ! iter . is CaMeL Empty ++ && iter . start ;
rank: 661
score: 98.52431418678977
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ; }
rank: 661
score: 98.44325474330357
patch: ++ 1 ; ++ n ;
rank: 662
score: 98.9449462890625
patch: max CaMeL Eval -= find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 662
score: 98.87992350260417
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( search CaMeL Direction , r ) ;
rank: 662
score: 98.83203803168402
patch: delta += r . length ( ) ;
rank: 662
score: 98.78439331054688
patch: if ( max CaMeL Eval <= 0 ) {
rank: 662
score: 98.75863986545139
patch: ++ iter - max CaMeL Eval ; ;
rank: 662
score: 98.67701822916666
patch: entry = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 662
score: 98.57159423828125
patch: ++ iter ; ++ * * * iter ;
rank: 662
score: 98.52727399553571
patch: else { ++ r ; }
rank: 663
score: 98.94469451904297
patch: delta = find CaMeL Upper CaMeL Bound ( point . length ( ) ) ;
rank: 663
score: 98.78387451171875
patch: double iter = point . length ;
rank: 663
score: 98.7584940592448
patch: ++ iter ; if ( max CaMeL Eval < 0 ;
rank: 663
score: 98.67698567708334
patch: previous = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 663
score: 98.57138061523438
patch: ++ iter ; ++ iter ; ++ - - iter ;
rank: 663
score: 98.5271728515625
patch: if ( iter == 0 ) throw null ;
rank: 663
score: 98.52314453125
patch: ++ iter ; while ( iter != current )
rank: 663
score: 98.44015066964286
patch: iter iter ++ ; ++ ;
rank: 664
score: 98.8785400390625
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( clone ) ;
rank: 664
score: 98.78359750600961
patch: if ( max CaMeL Eval < search CaMeL Direction . length )
rank: 664
score: 98.75834728422619
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) System . current CaMeL Time CaMeL Millis ;
rank: 664
score: 98.67689514160156
patch: pref = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 664
score: 98.57117808948864
patch: ++ iter ; ++ * / ++ ++ iter ;
rank: 664
score: 98.52709350585937
patch: if ( iter == 0 ) break ; }
rank: 664
score: 98.52273898654514
patch: ++ iter ; do { ++ iter ;
rank: 665
score: 98.94431559244792
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > checker = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 665
score: 98.87795003255208
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = steepest CaMeL Descent . precondition ( 0 ) ;
rank: 665
score: 98.82985229492188
patch: double [ ] current = current . length ;
rank: 665
score: 98.78348482572116
patch: current = compute CaMeL Objective CaMeL Gradient ( point , r ,
rank: 665
score: 98.75816040039062
patch: r [ max CaMeL Eval ] = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 665
score: 98.57096557617187
patch: ++ iter ; ++ 1 ; ++ start ;
rank: 665
score: 98.52681107954545
patch: if ( iter > 0 ; return iter ; }
rank: 665
score: 98.52123413085937
patch: current = Math . max ( iter , ;
rank: 665
score: 98.43902587890625
patch: ++ out ; ++ iter ;
rank: 666
score: 98.82972412109375
patch: double [ ] steepest CaMeL Descent =
rank: 666
score: 98.78347778320312
patch: int iter = r . length ;
rank: 666
score: 98.75808919270834
patch: ++ max CaMeL Eval = Math . max ( current , iter ) ;
rank: 666
score: 98.676513671875
patch: Iterator < Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair )
rank: 666
score: 98.52590942382812
patch: if ( ! iter . is CaMeL Empty ; break ;
rank: 666
score: 98.5202303799716
patch: ++ iter ; while ( iter == current ) {
rank: 666
score: 98.43765694754464
patch: iter ; ++ iter ; }
rank: 667
score: 98.9435565655048
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( search CaMeL Direction . get CaMeL Point ( ) ) ;
rank: 667
score: 98.87758382161458
patch: double [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent [ 0 ] ;
rank: 667
score: 98.82956368582589
patch: final int max = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 667
score: 98.7823955829327
patch: if ( checker . converged ( iter , false ) ) {
rank: 667
score: 98.75775824652777
patch: ++ max CaMeL Eval -= iter ; ;
rank: 667
score: 98.67644904641544
patch: list = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 667
score: 98.57057883522727
patch: ++ * ++ iter ; * / ++ iter ;
rank: 667
score: 98.52584228515624
patch: if ( iter == 0 ; / * ;
rank: 667
score: 98.5196200284091
patch: current = Math . max ( iter , current ;
rank: 668
score: 98.943359375
patch: previous = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 668
score: 98.87693277994792
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . [ 0 ] ) ;
rank: 668
score: 98.82943289620536
patch: double max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ,
rank: 668
score: 98.78231048583984
patch: if ( n < n ) {
rank: 668
score: 98.75741811899039
patch: ++ max CaMeL Eval = ; if ( max CaMeL Eval ;
rank: 668
score: 98.67635904947916
patch: [ ] = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 668
score: 98.52569580078125
patch: else { if ; ++ 0 ; }
rank: 668
score: 98.51894309303977
patch: if ( current == null ) { break ; }
rank: 668
score: 98.43061174665179
patch: iter ; if ++ iter ;
rank: 669
score: 98.94334998497597
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > )
rank: 669
score: 98.82900766225961
patch: final double [ ] steepest CaMeL Descent = $STRING$ ;
rank: 669
score: 98.7822998046875
patch: if ( ! update CaMeL Formula ) { {
rank: 669
score: 98.75732421875
patch: r [ max CaMeL Eval ++ ] = iter ; }
rank: 669
score: 98.676123046875
patch: [ ] max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 669
score: 98.52458360460069
patch: / * * * ; * * /
rank: 669
score: 98.51833274147727
patch: ++ iter ; if ( Math . abs ( ;
rank: 669
score: 98.42656707763672
patch: ++ $NUMBER$ ;
rank: 670
score: 98.87637329101562
patch: double CaMeL Value = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction . search CaMeL Direction , r ) ;
rank: 670
score: 98.82881986177884
patch: final int [ ] steepest CaMeL Descent = null ;
rank: 670
score: 98.78217022235577
patch: while ( true ) { Point CaMeL Value CaMeL Pair current ;
rank: 670
score: 98.75726928710938
patch: ++ max CaMeL Eval ++ ; System . out . ; System . out . ; System . ;
rank: 670
score: 98.6749267578125
patch: ch = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 670
score: 98.5697509765625
patch: ++ iter ; try ; ++ iter ; }
rank: 670
score: 98.5244140625
patch: if ( ! iter . is CaMeL Empty ++ ) . ++ iter ; }
rank: 670
score: 98.5177001953125
patch: throw new Runtime CaMeL Exception ( $STRING$ + iter ) ;
rank: 671
score: 98.94266941236413
patch: Point CaMeL Value CaMeL Pair point = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point ,
rank: 671
score: 98.87588500976562
patch: Point CaMeL Value CaMeL Pair current = current . new Point CaMeL Value CaMeL Pair ( point . point , 0 ) ;
rank: 671
score: 98.82805524553571
patch: final double start = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 671
score: 98.78204345703125
patch: double [ ] [ ] steepest CaMeL Descent ;
rank: 671
score: 98.75712446732955
patch: ++ max CaMeL Eval = Math . iter ( ;
rank: 671
score: 98.67479112413194
patch: state = steepest CaMeL Descent . clone ( ) ; while ( true ) {
rank: 671
score: 98.569580078125
patch: ++ iter ; ++ * * * * iter ;
rank: 671
score: 98.52439662388393
patch: else { int 0 ; }
rank: 671
score: 98.42465645926339
patch: ++ iter ; ++ point ;
rank: 672
score: 98.94246419270833
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( ( Point CaMeL Value CaMeL Pair ) point ) ;
rank: 672
score: 98.82773263113839
patch: final double value = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 672
score: 98.78204345703125
patch: if ( find CaMeL Upper CaMeL Bound ( point ) )
rank: 672
score: 98.75698852539062
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) ++ max ;
rank: 672
score: 98.674658203125
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 0 , initial CaMeL Step ) ;
rank: 672
score: 98.5695467862216
patch: ++ iter ; ++ iter ; while iter iter ;
rank: 672
score: 98.52408447265626
patch: if ( iter == 1 ; return iter ;
rank: 672
score: 98.42232840401786
patch: ++ iter ; ++ compare ;
rank: 673
score: 98.94239153180804
patch: delta = steepest CaMeL Descent . clone ( ) ; }
rank: 673
score: 98.87562052408855
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound (
rank: 673
score: 98.8272705078125
patch: int [ ] steepest CaMeL Descent = $NUMBER$ ;
rank: 673
score: 98.78091195913461
patch: if ( point [ max CaMeL Eval ] != null ) {
rank: 673
score: 98.75657145182292
patch: r [ iter ] = ++ max CaMeL Eval ; }
rank: 673
score: 98.67459106445312
patch: m = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 673
score: 98.56940252130681
patch: ++ iter ; ++ iter ; int * 1 ;
rank: 673
score: 98.52308000837054
patch: else ++ [ 0 ] ;
rank: 673
score: 98.5156982421875
patch: ++ iter ; while ( iter == iter )
rank: 673
score: 98.41981811523438
patch: ++ new ++ ;
rank: 674
score: 98.94202599158653
patch: Point CaMeL Value CaMeL Pair current = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , 1 ) ;
rank: 674
score: 98.87464396158855
patch: int [ ] steepest CaMeL Descent = preconditioner . steepest CaMeL Descent ( iter ) ;
rank: 674
score: 98.82681039663461
patch: final int max = find CaMeL Upper CaMeL Bound ( ) ;
rank: 674
score: 98.7803955078125
patch: Point CaMeL Value CaMeL Pair current = current ; current ;
rank: 674
score: 98.75626627604167
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter , iter ;
rank: 674
score: 98.56939142400569
patch: ++ iter ; ++ - $NUMBER$ ; ++ iter ;
rank: 674
score: 98.52308000837054
patch: / * * += iter ;
rank: 674
score: 98.51547241210938
patch: int iter = iter - 1 ;
rank: 675
score: 98.94176307091347
patch: Point CaMeL Value CaMeL Pair point = ( Point CaMeL Value CaMeL Pair ) find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 675
score: 98.82620675223214
patch: final double iterator = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 675
score: 98.7796297940341
patch: while ( iter . < point . length ) {
rank: 675
score: 98.75620814732143
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( iter ) ; ++ iter ;
rank: 675
score: 98.67429486443015
patch: [ ] = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 675
score: 98.569091796875
patch: ++ iter ; ++ iter ; int * - iter ;
rank: 675
score: 98.52259410511364
patch: else { if ++ iter [ 0 ] ; }
rank: 675
score: 98.51455349392361
patch: ++ iter - n ; ++ iter ;
rank: 675
score: 98.415283203125
patch: ++ iter ; ; else ;
rank: 676
score: 98.9415283203125
patch: current = find CaMeL Upper CaMeL Bound ( point ,
rank: 676
score: 98.87427775065105
patch: final int [ ] steepest CaMeL Descent = preconditioner . find CaMeL Upper CaMeL Bound ( ) ;
rank: 676
score: 98.77869262695313
patch: double [ ] search CaMeL Direction = current ;
rank: 676
score: 98.75596266526442
patch: ++ iter ; Math . min ( iter , iter ) ;
rank: 676
score: 98.67424774169922
patch: working = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 676
score: 98.56894753196023
patch: ++ iter ; ++ iter ; int * / /
rank: 676
score: 98.5222676595052
patch: else throw new Runtime CaMeL Exception ( $STRING$ + 1 ;
rank: 676
score: 98.5133944424716
patch: ++ iter ; if ( ! current . contains ;
rank: 676
score: 98.41339983258929
patch: iter ++ ; ++ 0 ;
rank: 677
score: 98.94110107421875
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , point , r ) ;
rank: 677
score: 98.77822875976562
patch: if ( point . length ( ) == n ) {
rank: 677
score: 98.75588553292411
patch: ++ max CaMeL Eval + max CaMeL Eval + iter + 1 ;
rank: 677
score: 98.67343621504934
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( iter ) ;
rank: 677
score: 98.5686922940341
patch: ++ iter ; ++ * / ; ++ iter ;
rank: 677
score: 98.52184295654297
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ++
rank: 677
score: 98.51316528320312
patch: ++ iter ; if ( iter < iter )
rank: 677
score: 98.40852864583333
patch: else ; ++ iter ;
rank: 678
score: 98.94083658854167
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , r , 0 ) ;
rank: 678
score: 98.87099202473958
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent = preconditioner . get CaMeL Point ( ) ;
rank: 678
score: 98.82288469587054
patch: final double min = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 678
score: 98.77813720703125
patch: double [ ] steepest CaMeL Descent = iter ;
rank: 678
score: 98.75541548295455
patch: result [ max CaMeL Eval ++ ] = current ;
rank: 678
score: 98.672509765625
patch: Iterator < Point CaMeL Value CaMeL Pair ) {
rank: 678
score: 98.52166748046875
patch: if ( iter > iter )
rank: 678
score: 98.5121561686198
patch: ++ iter ; if ( ! current . contains ( ;
rank: 678
score: 98.40677315848214
patch: ++ iter ; ++ continue ;
rank: 679
score: 98.94039784307066
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > point = 0 ;
rank: 679
score: 98.82140241350446
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , iter ) ;
rank: 679
score: 98.75540500217014
patch: ++ iter ; while ( ; ) {
rank: 679
score: 98.67218424479167
patch: ret = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 679
score: 98.56793212890625
patch: ++ iter ; try { ++ iter ; ;
rank: 679
score: 98.52153463924633
patch: if ( ! iter . is CaMeL Empty ++ this . iter ; ++ iter ;
rank: 679
score: 98.51150512695312
patch: j = Math . max ( iter , iter ) ;
rank: 679
score: 98.40663364955357
patch: iter ; ++ iter ; else
rank: 680
score: 98.94008382161458
patch: current = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 680
score: 98.7771747295673
patch: int max CaMeL Eval = search CaMeL Direction [ iter ] ;
rank: 680
score: 98.75527954101562
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , max ;
rank: 680
score: 98.67179601332721
patch: first = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 680
score: 98.56736450195312
patch: ++ iter ; try { ++ iter ; }
rank: 680
score: 98.52150656960227
patch: if ( iter > 0 ) return iter ; }
rank: 680
score: 98.5114517211914
patch: if ( n > 0 ) {
rank: 680
score: 98.40350341796875
patch: if ++ iter ; / /
rank: 681
score: 98.93967692057292
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , n ) ;
rank: 681
score: 98.8679950420673
patch: final double current = find CaMeL Upper CaMeL Bound ( ) ;
rank: 681
score: 98.77642267400569
patch: if ( update CaMeL Formula ( current ) ) {
rank: 681
score: 98.67172241210938
patch: compare = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 681
score: 98.56731622869319
patch: ++ iter ; ++ * * / / iter ;
rank: 681
score: 98.52095540364583
patch: else { break ; }
rank: 681
score: 98.51133219401042
patch: temp = Math . max ( iter , iter ) ;
rank: 682
score: 98.93924967447917
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , $NUMBER$ ) ;
rank: 682
score: 98.86613159179687
patch: ++ max CaMeL Eval -= search CaMeL Direction ;
rank: 682
score: 98.77212524414062
patch: while ( max CaMeL Eval < n ) {
rank: 682
score: 98.75485026041666
patch: result = new Point CaMeL Value CaMeL Pair ( current , iter ) ;
rank: 682
score: 98.67169189453125
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , true ) ;
rank: 682
score: 98.566796875
patch: / * ] ++ iter ; if iter ;
rank: 682
score: 98.5209099264706
patch: if ( ! iter . is CaMeL Empty ++ ) break ; ++ iter ; }
rank: 682
score: 98.40150960286458
patch: ++ iter = iter ;
rank: 683
score: 98.93894449869792
patch: Point CaMeL Value CaMeL Pair point = ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 683
score: 98.8204833984375
patch: int [ ] steepest CaMeL Descent ;
rank: 683
score: 98.77021484375
patch: Point CaMeL Value CaMeL Pair r = current ;
rank: 683
score: 98.75472005208333
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( Float . MAX _ VALUE ;
rank: 683
score: 98.6715949563419
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 683
score: 98.56666870117188
patch: ++ iter ; ++ 1 ; ++ * /
rank: 683
score: 98.5206298828125
patch: ++ [ ] iter ++ ;
rank: 683
score: 98.51082763671874
patch: if ( max CaMeL Eval < iter ) {
rank: 683
score: 98.40121023995536
patch: ++ iter ; iter / *
rank: 684
score: 98.9384765625
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r ) ; }
rank: 684
score: 98.86536583533653
patch: ++ delta ; Point CaMeL Value CaMeL Pair current = current ;
rank: 684
score: 98.76971905048077
patch: ++ true ; Point CaMeL Value CaMeL Pair current = current ;
rank: 684
score: 98.7546856219952
patch: if ( iter < iter ) max CaMeL Eval = iter ;
rank: 684
score: 98.67106797960069
patch: result = compute CaMeL Objective CaMeL Gradient ( point , 0 , initial CaMeL Step ) ;
rank: 684
score: 98.5654296875
patch: ++ iter ; ++ * - iter ; ++ iter ;
rank: 684
score: 98.52062174479167
patch: if ( ! iter . is CaMeL Empty ++ this . iter ; }
rank: 684
score: 98.51067352294922
patch: ++ iter ; current = iter )
rank: 684
score: 98.40055629185268
patch: ++ iter ; ++ abs ;
rank: 685
score: 98.93783569335938
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( iter , max CaMeL Eval ) ;
rank: 685
score: 98.86454264322917
patch: double CaMeL Value = search CaMeL Direction [ 0 ] ;
rank: 685
score: 98.7689208984375
patch: if ( update CaMeL Formula ( iter ) ) {
rank: 685
score: 98.7542724609375
patch: ++ max CaMeL Eval - max CaMeL Eval ; ++ iter ;
rank: 685
score: 98.67073974609374
patch: [ ] steepest CaMeL Descent = preconditioner . do CaMeL Optimize ( ) ;
rank: 685
score: 98.52002631293402
patch: / * * / ++ iter * /
rank: 685
score: 98.51029459635417
patch: if ( ! is CaMeL Empty ) {
rank: 685
score: 98.40040806361607
patch: / iter ; ++ iter ;
rank: 686
score: 98.86444561298077
patch: final double delta = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 686
score: 98.76746215820313
patch: point [ max CaMeL Eval ] = current ;
rank: 686
score: 98.754248046875
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval < 0 )
rank: 686
score: 98.56522993607955
patch: ++ iter ; ++ iter ; ++ break ; ;
rank: 686
score: 98.51997205946181
patch: if ( iter < iter ; * /
rank: 686
score: 98.51026611328125
patch: if ( current != null ) ++ n ;
rank: 686
score: 98.3974609375
patch: ++ ++ iter ; / /
rank: 687
score: 98.81853693181819
patch: delta += checker . converged ( max CaMeL Eval ,
rank: 687
score: 98.7673095703125
patch: while ( n < max CaMeL Eval ) {
rank: 687
score: 98.75393337673611
patch: l [ max CaMeL Eval ] = ;
rank: 687
score: 98.66972081801471
patch: if ( iter < steepest CaMeL Descent . length ) { ++ iter ;
rank: 687
score: 98.565185546875
patch: ++ iter ; ++ 1 ; ++ iter iter ;
rank: 687
score: 98.51982964409723
patch: ++ [ ] [ ] = iter ;
rank: 687
score: 98.50970458984375
patch: ++ n ; current = iter ;
rank: 687
score: 98.39378051757812
patch: ++ - iter ;
rank: 688
score: 98.93678792317708
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point . length , r ) ;
rank: 688
score: 98.818359375
patch: final String point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 688
score: 98.7672119140625
patch: double Point CaMeL Value CaMeL Pair current = current ;
rank: 688
score: 98.75379527698864
patch: ++ max CaMeL Eval ; * / * * /
rank: 688
score: 98.66962633634868
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair do CaMeL Optimize ( )
rank: 688
score: 98.56477864583333
patch: ++ 0 ++ iter ;
rank: 688
score: 98.51936609604779
patch: if ( ! iter . is CaMeL Empty ( ; iter . length > 0 )
rank: 688
score: 98.50929565429688
patch: ++ iter 1 ;
rank: 688
score: 98.39280482700893
patch: ++ new ++ ; / /
rank: 689
score: 98.93651326497395
patch: int [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r , current ) ;
rank: 689
score: 98.81707294170673
patch: final double [ ] search CaMeL Direction = max CaMeL Eval ;
rank: 689
score: 98.76708984375
patch: while ( max CaMeL Eval < 0 ) {
rank: 689
score: 98.75361328125
patch: ++ max CaMeL Eval -- ; if ( max CaMeL Eval > 0 )
rank: 689
score: 98.66932678222656
patch: collection = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 689
score: 98.56432233537946
patch: ++ $NUMBER$ ] ++ iter ;
rank: 689
score: 98.5192138671875
patch: if ( ! iter . is CaMeL Empty ( ) ) . ; }
rank: 689
score: 98.39266531808036
patch: ++ iter ; ++ System ;
rank: 690
score: 98.93607875279018
patch: point = find CaMeL Upper CaMeL Bound ( point , 0 ) ;
rank: 690
score: 98.85951585036058
patch: ++ max CaMeL Eval -= search CaMeL Direction [ $NUMBER$ ] ;
rank: 690
score: 98.76521606445313
patch: if ( iter % max CaMeL Eval ) {
rank: 690
score: 98.75354875837054
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval == ;
rank: 690
score: 98.66926843979779
patch: result = new Point CaMeL Value CaMeL Pair ( point , point , r ) ;
rank: 690
score: 98.564208984375
patch: ++ $NUMBER$ * ++ iter ; ++ iter ;
rank: 690
score: 98.51918334960938
patch: else { iter += iter + iter ; }
rank: 690
score: 98.5089444247159
patch: while ( iter < n ) { ++ iter ;
rank: 690
score: 98.39190673828125
patch: ++ iter ; iter break ;
rank: 691
score: 98.93584798177083
patch: delta = new Point CaMeL Value CaMeL Pair ( point . length ) ;
rank: 691
score: 98.85704627403847
patch: Point CaMeL Value CaMeL Pair current = current ; ++ iter ;
rank: 691
score: 98.81598369891827
patch: int iter = find CaMeL Upper CaMeL Bound ( iter ) ;
rank: 691
score: 98.76507568359375
patch: if ( point . length ( ) ) {
rank: 691
score: 98.75280180431548
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r , iter , ;
rank: 691
score: 98.66847330729166
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( delta ) ;
rank: 691
score: 98.56339888139205
patch: i * ++ ; ++ * / ++ iter ;
rank: 691
score: 98.5070068359375
patch: current = iter ;
rank: 692
score: 98.81568321814903
patch: int start = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 692
score: 98.76246643066406
patch: while ( update CaMeL Formula ) {
rank: 692
score: 98.75209263392857
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; ++ iter ;
rank: 692
score: 98.66775512695312
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair > do CaMeL Optimize ( )
rank: 692
score: 98.56336059570313
patch: ++ iter ; iter ; * * * /
rank: 692
score: 98.51874856387867
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ 0 ; }
rank: 692
score: 98.50606536865234
patch: ++ iter ; if ( n ;
rank: 692
score: 98.38597760881696
patch: ++ 0 ; ++ 1 ;
rank: 693
score: 98.85556862571023
patch: Point CaMeL Value CaMeL Pair current = current ; {
rank: 693
score: 98.81111145019531
patch: final double < r [ ] ;
rank: 693
score: 98.75189678485577
patch: ++ max CaMeL Eval ; if ( max CaMeL Eval < ;
rank: 693
score: 98.66746419270834
patch: result = new Point CaMeL Value CaMeL Pair ( point , current ) ;
rank: 693
score: 98.51862928602431
patch: else { / * ++ * * /
rank: 693
score: 98.50590209960937
patch: if ( ++ iter ) { ++ iter ;
rank: 693
score: 98.38497924804688
patch: ++ iter ; ; ;
rank: 694
score: 98.93484933035714
patch: current = find CaMeL Upper CaMeL Bound ( point , true ) ;
rank: 694
score: 98.80970348011364
patch: final double [ ] search CaMeL Direction = null ;
rank: 694
score: 98.76072184244792
patch: while ( false ) {
rank: 694
score: 98.75178666548295
patch: r [ max CaMeL Eval ++ ] ++ ; }
rank: 694
score: 98.66744995117188
patch: h = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 694
score: 98.56275285993304
patch: i * ++ ; break ;
rank: 694
score: 98.51841735839844
patch: if ( ! iter . is CaMeL Empty ( ) ) ++ iter ; }
rank: 694
score: 98.5045654296875
patch: ++ iter ; if ( iter == 0 ;
rank: 694
score: 98.38450404575893
patch: ++ n ; ++ start ;
rank: 695
score: 98.934326171875
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair > current = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 695
score: 98.80936373197116
patch: double goal = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 695
score: 98.76024169921875
patch: if ( Point CaMeL Value CaMeL Pair ) {
rank: 695
score: 98.75160569411058
patch: r [ max CaMeL Eval ++ ] = current . ++ ;
rank: 695
score: 98.66702270507812
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 1 ) ;
rank: 695
score: 98.56240012428977
patch: ++ iter ; ++ iter ; int iter * ;
rank: 695
score: 98.51838989257813
patch: ++ [ ] iter = iter ; while ;
rank: 695
score: 98.50406494140626
patch: if ( current == null ) return null ;
rank: 695
score: 98.38405354817708
patch: iter ; ++ n ;
rank: 696
score: 98.93430582682292
patch: double = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 696
score: 98.80836838942308
patch: Point CaMeL Value CaMeL Pair current = point [ n ] ;
rank: 696
score: 98.7586669921875
patch: while ( true ) { {
rank: 696
score: 98.75139911358173
patch: result = new Point CaMeL Value CaMeL Pair ( ++ iter ;
rank: 696
score: 98.66678873697917
patch: old = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 696
score: 98.56221147017045
patch: / * ] * * * / ++ iter ;
rank: 696
score: 98.51837158203125
patch: / * * / * /
rank: 696
score: 98.50334167480469
patch: while ( iter != current ) {
rank: 696
score: 98.38124302455357
patch: ++ $NUMBER$ ; ++ start ;
rank: 697
score: 98.93321161684783
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > steepest CaMeL Descent = steepest CaMeL Descent ;
rank: 697
score: 98.85455877130681
patch: iter = find CaMeL Upper CaMeL Bound ( ) ;
rank: 697
score: 98.75776672363281
patch: switch ( update CaMeL Formula ) {
rank: 697
score: 98.75139911358173
patch: ++ max CaMeL Eval ; ; ++ max CaMeL Eval ; ;
rank: 697
score: 98.6667251586914
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , iter ) ;
rank: 697
score: 98.56206720525569
patch: ++ 0 ; ++ iter ; if ++ iter ;
rank: 697
score: 98.51823425292969
patch: if ( ! iter . is CaMeL Empty ( ; 1 . $NUMBER$ ) ;
rank: 697
score: 98.5030184659091
patch: ++ iter ; while ( iter != current ) {
rank: 698
score: 98.93312669836956
patch: Point CaMeL Value CaMeL Pair < Point CaMeL Value CaMeL Pair * Point CaMeL Value CaMeL Pair > point = current ;
rank: 698
score: 98.8076171875
patch: final double [ ] steepest CaMeL Descent = new
rank: 698
score: 98.75722927517361
patch: while ( iter . < n ) {
rank: 698
score: 98.75104522705078
patch: ++ max CaMeL Eval = Math . max ( max CaMeL Eval , 1 ;
rank: 698
score: 98.66671752929688
patch: global = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 698
score: 98.56153453480114
patch: ++ iter ; ++ iter ; int * * /
rank: 698
score: 98.51823156020221
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ 1 ; }
rank: 698
score: 98.5024746981534
patch: if ( iter == 0 ) { break ; }
rank: 698
score: 98.37645263671875
patch: ++ ++ 1 ;
rank: 699
score: 98.93272181919643
patch: delta += compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 699
score: 98.85406963641827
patch: final double < Point CaMeL Value CaMeL Pair current = current ;
rank: 699
score: 98.75086030505952
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . sub CaMeL Sequence ;
rank: 699
score: 98.66650390625
patch: return ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point ) ; }
rank: 699
score: 98.56132202148437
patch: ++ 1 ; ++ iter ; for iter ;
rank: 699
score: 98.51803385416666
patch: if ( ! iter . is CaMeL Empty ( ) ; return true ;
rank: 699
score: 98.50157165527344
patch: ++ iter ? iter : iter ;
rank: 699
score: 98.37599400111607
patch: ++ iter ; ++ read ;
rank: 700
score: 98.93206787109375
patch: delta = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 700
score: 98.8535664876302
patch: if ( checker . converged . converged ( ) ) {
rank: 700
score: 98.75336303710938
patch: ++ max CaMeL Eval ; current = current ;
rank: 700
score: 98.75023542131696
patch: ++ max CaMeL Eval = ; if ( max CaMeL Eval > ;
rank: 700
score: 98.66641395970395
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , (
rank: 700
score: 98.56101481119792
patch: ++ iter ; ++ iter ; for ++ - iter ;
rank: 700
score: 98.51786041259766
patch: if ( ! iter . is CaMeL Empty ( ) ; ++ iter ; }
rank: 700
score: 98.50143432617188
patch: int iter = iter - n ;
rank: 700
score: 98.37581961495536
patch: ++ iter ; ; * /
rank: 701
score: 98.85344989483173
patch: if ( update CaMeL Formula . converged ( iter ) ) {
rank: 701
score: 98.80551382211539
patch: int start = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 701
score: 98.752294921875
patch: if ( steepest CaMeL Descent ) {
rank: 701
score: 98.75023251488095
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . trim ( ) ;
rank: 701
score: 98.66565755208333
patch: tmp = new Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 701
score: 98.56072443181819
patch: ++ iter ; ++ iter ; if - iter ;
rank: 701
score: 98.51752387152777
patch: else { if ; * * / }
rank: 701
score: 98.50135633680556
patch: ++ iter ; if ( false ) {
rank: 701
score: 98.37447684151786
patch: } iter ; ++ iter ;
rank: 702
score: 98.8050048828125
patch: double [ ] search CaMeL Direction = 0 ;
rank: 702
score: 98.7501220703125
patch: ++ max CaMeL Eval = Math . min ( iter , current ) ;
rank: 702
score: 98.66551298253677
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 0 ) ;
rank: 702
score: 98.56039864676339
patch: else * * ++ iter ;
rank: 702
score: 98.5174560546875
patch: if ( ! iter . is CaMeL Empty ++ && iter . 0 == 0 ;
rank: 702
score: 98.50127495659723
patch: ++ iter - 1 ; ++ iter ;
rank: 702
score: 98.37370082310268
patch: ++ iter ; iter ; iter
rank: 703
score: 98.93157958984375
patch: final double delta = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 703
score: 98.85225736177884
patch: final double iter = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 703
score: 98.80267944335938
patch: if ( goal . converged ( ) ) {
rank: 703
score: 98.75004069010417
patch: iter = new Point CaMeL Value CaMeL Pair ( iter , iter ; ;
rank: 703
score: 98.74969482421875
patch: if ( n < 0 ) {
rank: 703
score: 98.66545104980469
patch: g = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 703
score: 98.55947043678977
patch: ++ iter ; ++ 1 ; ++ iter ; }
rank: 703
score: 98.5173828125
patch: while ( ! iter . is CaMeL Empty ( ) ; ++ iter ;
rank: 703
score: 98.50126429966518
patch: if ( ! ++ iter )
rank: 703
score: 98.37258475167411
patch: ++ $NUMBER$ ; ++ n ;
rank: 704
score: 98.93118418817934
patch: double [ ] steepest CaMeL Descent = preconditioner . preconditioner ( $STRING$ ) ;
rank: 704
score: 98.85042317708333
patch: ++ iter ; Point CaMeL Value CaMeL Pair current = current
rank: 704
score: 98.74996512276786
patch: Point CaMeL Value CaMeL Pair iter = new Point CaMeL Value CaMeL Pair ( r . trim ( ) ;
rank: 704
score: 98.66533203125
patch: tmp = new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 704
score: 98.55923461914062
patch: ++ iter ; ++ iter ; for iter { ++ ;
rank: 704
score: 98.51689453125
patch: else { ++ 1 ; ++ iter ; }
rank: 704
score: 98.5010986328125
patch: while ( iter == current ) {
rank: 704
score: 98.35767618815105
patch: ++ iter ; else ;
rank: 705
score: 98.9308551290761
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , search CaMeL Direction , r ) ;
rank: 705
score: 98.84940279447116
patch: final Univariate CaMeL Function [ ] steepest CaMeL Descent =
rank: 705
score: 98.80126953125
patch: final double [ ] current = current . length ;
rank: 705
score: 98.7498291015625
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval ; }
rank: 705
score: 98.74649047851562
patch: if ( Point CaMeL Value CaMeL Pair current ;
rank: 705
score: 98.66461181640625
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r )
rank: 705
score: 98.55912642045455
patch: ++ 1 ; ++ iter ; while ++ iter ;
rank: 705
score: 98.51654924665179
patch: / ; if ++ iter ;
rank: 705
score: 98.50033569335938
patch: if ( max CaMeL Eval != - 1 )
rank: 706
score: 98.9304836107337
patch: Point CaMeL Value CaMeL Pair current = find CaMeL Upper CaMeL Bound ( point , 0 , initial CaMeL Step ) ;
rank: 706
score: 98.84918682391827
patch: final double max = find CaMeL Upper CaMeL Bound ( ) ;
rank: 706
score: 98.8004150390625
patch: double [ ] search CaMeL Direction = null ;
rank: 706
score: 98.74945068359375
patch: ++ max CaMeL Eval ; if ( ++ max CaMeL Eval > ;
rank: 706
score: 98.74326171875
patch: if ( max CaMeL Eval < solver ) {
rank: 706
score: 98.66432020399306
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . clone ( point ) ;
rank: 706
score: 98.55897216796875
patch: ++ start ; ++ iter ; if iter ;
rank: 706
score: 98.5161376953125
patch: if ( ! iter . is CaMeL Empty ++ && ) . max ;
rank: 706
score: 98.49852752685547
patch: int iter = iter - iter ;
rank: 706
score: 98.3419698079427
patch: ++ iter ; ; else
rank: 707
score: 98.92945397418478
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , - $NUMBER$ ) ;
rank: 707
score: 98.74940321180556
patch: ++ max CaMeL Eval - iter ; ;
rank: 707
score: 98.74274291992188
patch: r [ max CaMeL Eval ] = current ;
rank: 707
score: 98.663720703125
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent ) . clone ( ) ;
rank: 707
score: 98.55870472301136
patch: ++ * ++ iter ; try { ++ iter ;
rank: 707
score: 98.51606096540179
patch: ++ * * * iter ;
rank: 707
score: 98.4984842936198
patch: result = ++ iter ;
rank: 708
score: 98.84609985351562
patch: ++ max CaMeL Eval -= $NUMBER$ ;
rank: 708
score: 98.66281127929688
patch: grid = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 708
score: 98.55845133463542
patch: ++ iter ; ++ 1 ; ++ iter ; iter ;
rank: 708
score: 98.51589626736111
patch: else { / * / * / }
rank: 708
score: 98.49683726917614
patch: while ( current != null ) { ++ iter ;
rank: 708
score: 98.325927734375
patch: ++ start ;
rank: 709
score: 98.92910970052084
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker = this ;
rank: 709
score: 98.84553527832031
patch: ++ max CaMeL Eval -= 0 ;
rank: 709
score: 98.74910481770833
patch: Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair ( r . intern ( ) ;
rank: 709
score: 98.7365478515625
patch: while ( n < point . length ) {
rank: 709
score: 98.66276041666667
patch: result = new Point CaMeL Value CaMeL Pair ( point , delta ) ;
rank: 709
score: 98.55818314985795
patch: ++ iter ; ++ iter ; int * ++ ;
rank: 709
score: 98.49671088324652
patch: ++ iter ; if ( current ) {
rank: 710
score: 98.92910970052084
patch: ++ max CaMeL Eval = find CaMeL Upper CaMeL Bound ( false ) ;
rank: 710
score: 98.7490985576923
patch: result = new Point CaMeL Value CaMeL Pair ( r , ;
rank: 710
score: 98.7351962002841
patch: double [ ] steepest CaMeL Descent = new
rank: 710
score: 98.66251627604167
patch: result = new Point CaMeL Value CaMeL Pair ( current , point ) ;
rank: 710
score: 98.55813598632812
patch: ++ iter ; try ; ++ iter ; ++ iter ;
rank: 710
score: 98.51539195667614
patch: / * * * ++ * / ++ iter ;
rank: 710
score: 98.28267822265624
patch: ++ -- iter ;
rank: 711
score: 98.9283935546875
patch: current = new Point CaMeL Value CaMeL Pair ( point . point ) ;
rank: 711
score: 98.8439471905048
patch: ++ max CaMeL Eval = search CaMeL Direction [ iter ] ;
rank: 711
score: 98.74878801618304
patch: ++ max CaMeL Eval -- ; if ( max CaMeL Eval < ;
rank: 711
score: 98.73220825195312
patch: ++ max CaMeL Eval ; return current ; }
rank: 711
score: 98.66238403320312
patch: outer = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 711
score: 98.557861328125
patch: ++ iter ; int iter ; ++ iter ;
rank: 711
score: 98.51534016927083
patch: else { * * * / / }
rank: 711
score: 98.49577501085069
patch: ++ iter ; if ( iter != ;
rank: 711
score: 98.2821756998698
patch: ++ iter ; / /
rank: 712
score: 98.92826511548913
patch: double [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r . ) ;
rank: 712
score: 98.84253868689903
patch: ++ n ; Point CaMeL Value CaMeL Pair current = null ;
rank: 712
score: 98.79522235576923
patch: double value = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 712
score: 98.74854387555804
patch: ++ max CaMeL Eval >= ;
rank: 712
score: 98.7317626953125
patch: switch ( update CaMeL Formula ) { * /
rank: 712
score: 98.66215434827302
patch: [ ] steepest CaMeL Descent = preconditioner . clone ( ) ; }
rank: 712
score: 98.55785522460937
patch: ++ iter ; ++ out ; ++ iter ;
rank: 712
score: 98.51504720052084
patch: if ( ! iter . is CaMeL Empty ++ && iter . contains ;
rank: 712
score: 98.4952059659091
patch: ++ iter ; if ( iter >= n ) {
rank: 712
score: 98.27384440104167
patch: iter ; ++ start ;
rank: 713
score: 98.9278076171875
patch: ++ max CaMeL Eval * find CaMeL Upper CaMeL Bound ( point ) ;
rank: 713
score: 98.79445190429688
patch: delta += checker . converged ( iter ) ;
rank: 713
score: 98.74818420410156
patch: Iterator < Point CaMeL Value CaMeL Pair > iterator = iter . iterator ( ;
rank: 713
score: 98.73035278320313
patch: ++ iter ; ++ max CaMeL Eval ; }
rank: 713
score: 98.6620734719669
patch: [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 713
score: 98.55684116908482
patch: i * ; ++ iter ;
rank: 713
score: 98.51438993566177
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals iter ;
rank: 713
score: 98.49464721679688
patch: if ( iter == null ) return null ;
rank: 713
score: 98.27069091796875
patch: iter ; ++ 1 ;
rank: 714
score: 98.7943623860677
patch: delta += checker . converged ( point , r ) ;
rank: 714
score: 98.74790261008523
patch: ++ iter ; if ( ++ max CaMeL Eval ;
rank: 714
score: 98.72911487926136
patch: if ( steepest CaMeL Descent . to CaMeL
rank: 714
score: 98.55678488991477
patch: ++ * ++ iter ; ++ - - iter ;
rank: 714
score: 98.513916015625
patch: while ( ! iter . is CaMeL Empty ( ) ; return null ;
rank: 714
score: 98.49394087357955
patch: ++ iter ; while ( iter > 0 ) {
rank: 714
score: 98.25624593098958
patch: if ++ ++ iter ;
rank: 715
score: 98.9268798828125
patch: r = find CaMeL Upper CaMeL Bound ( point , n ) ;
rank: 715
score: 98.79383341471355
patch: double [ ] search CaMeL Direction = max CaMeL Eval ;
rank: 715
score: 98.74764811197916
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval > iter )
rank: 715
score: 98.72271173650569
patch: if ( compute CaMeL Objective CaMeL Gradient ( point ,
rank: 715
score: 98.66129557291667
patch: table = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 715
score: 98.55637428977273
patch: ++ iter ; iter ; int iter = iter ;
rank: 715
score: 98.51356724330357
patch: else { / * / }
rank: 715
score: 98.49354137073864
patch: if ( max CaMeL Eval == - 1 ) {
rank: 715
score: 98.2406005859375
patch: iter iter ++ ;
rank: 716
score: 98.74745686848958
patch: ++ max CaMeL Eval > 0 ; ;
rank: 716
score: 98.72261555989583
patch: if ( update CaMeL Formula ) { }
rank: 716
score: 98.661279296875
patch: cur = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 716
score: 98.55617268880208
patch: ++ iter ; ++ iter ; ; if ++ iter ;
rank: 716
score: 98.51343645368304
patch: } else { ++ iter ;
rank: 716
score: 98.49317515980114
patch: ++ iter ; while ( iter == iter ) {
rank: 716
score: 98.22855631510417
patch: if iter * 0 ;
rank: 717
score: 98.84107384314903
patch: ++ max CaMeL Eval += search CaMeL Direction [ 0 ] ;
rank: 717
score: 98.7923583984375
patch: Convergence CaMeL Checker < Point CaMeL Value CaMeL Pair > checker =
rank: 717
score: 98.7470932006836
patch: iter = new Point CaMeL Value CaMeL Pair ( iter , iter , iter ;
rank: 717
score: 98.72260076349431
patch: while ( true ) { ++ max CaMeL Eval ;
rank: 717
score: 98.6612548828125
patch: current = new Point CaMeL Value CaMeL Pair (
rank: 717
score: 98.5561190518466
patch: ++ iter ; ++ iter ; ++ * * /
rank: 717
score: 98.51338026258681
patch: if ( iter == $NUMBER$ ; * /
rank: 717
score: 98.49241333007812
patch: if ( iter <= max CaMeL Eval ) {
rank: 717
score: 98.22513834635417
patch: ++ iter ; ; /
rank: 718
score: 98.83017306857639
patch: ++ search CaMeL Direction [ 0 ] ;
rank: 718
score: 98.74705153245192
patch: ++ max CaMeL Eval = iter + max CaMeL Eval ; ;
rank: 718
score: 98.7201156616211
patch: while ( n < n ) {
rank: 718
score: 98.66109212239583
patch: return new Point CaMeL Value CaMeL Pair ( Point CaMeL Value CaMeL Pair . point ) ;
rank: 718
score: 98.55569458007812
patch: ++ ++ iter ; iter ; int iter ;
rank: 718
score: 98.51319885253906
patch: if ( ! iter . is CaMeL Empty ++ ) { ++ iter ; }
rank: 719
score: 98.7888934795673
patch: int length = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 719
score: 98.74700055803571
patch: ++ max CaMeL Eval = ; if ( max CaMeL Eval < ;
rank: 719
score: 98.71799538352273
patch: double delta = search CaMeL Direction [ 0 ] ;
rank: 719
score: 98.66094360351562
patch: return ( Point CaMeL Value CaMeL Pair ) compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 719
score: 98.55558268229167
patch: ++ iter ; if iter + iter ; ++ iter ;
rank: 719
score: 98.51309204101562
patch: if ( ! iter . is CaMeL Empty ( ) ) . ++ 0 ;
rank: 719
score: 98.49229600694444
patch: if ( ++ n >= 0 ) {
rank: 719
score: 98.210693359375
patch: ++ iter ; ++ Math
rank: 720
score: 98.92538888113839
patch: delta = find CaMeL Upper CaMeL Bound ( point , false ) ;
rank: 720
score: 98.81803755326705
patch: Point CaMeL Value CaMeL Pair current = current ) ;
rank: 720
score: 98.7887432391827
patch: int length = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 720
score: 98.74620056152344
patch: r [ max CaMeL Eval ] = Math . max ( iter , iter ;
rank: 720
score: 98.7107821377841
patch: ++ max CaMeL Eval ; if ( true ) {
rank: 720
score: 98.66083441840277
patch: synchronized ( steepest CaMeL Descent )
rank: 720
score: 98.55524236505681
patch: ++ iter ; ++ iter ; / * * /
rank: 720
score: 98.51305280412946
patch: else { for ; * /
rank: 720
score: 98.4922762784091
patch: ++ iter ; current = Math . max ( ;
rank: 720
score: 98.20472208658855
patch: long iter = iter ;
rank: 721
score: 98.92498779296875
patch: delta = find CaMeL Upper CaMeL Bound ( point , 1 ) ;
rank: 721
score: 98.78701782226562
patch: int [ ] steepest CaMeL Descent = precondition ;
rank: 721
score: 98.74619704026442
patch: ++ max CaMeL Eval ; ; ++ max CaMeL Eval = ;
rank: 721
score: 98.71004028320313
patch: while ( ! update CaMeL Formula ) { {
rank: 721
score: 98.66080968520221
patch: this = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 721
score: 98.55496651785714
patch: ++ ++ * - iter ;
rank: 721
score: 98.51300048828125
patch: while ( ! iter . is CaMeL Empty ( ; ) . start ++ ;
rank: 721
score: 98.49202270507813
patch: ++ iter ; if ( iter != null ;
rank: 721
score: 98.19687906901042
patch: if iter = iter ;
rank: 722
score: 98.81626198508523
patch: ++ iter ; Point CaMeL Value CaMeL Pair current ;
rank: 722
score: 98.78660278320312
patch: if ( point . length == 0 ) {
rank: 722
score: 98.74550217848558
patch: r [ max CaMeL Eval ++ ] = current . ; }
rank: 722
score: 98.70968627929688
patch: while ( point . length < n ) {
rank: 722
score: 98.66044616699219
patch: max CaMeL Eval -= solver . precondition ( max CaMeL Eval , r ) ;
rank: 722
score: 98.55458762428977
patch: ++ iter ; ++ iter ; while - iter ;
rank: 722
score: 98.51267377068015
patch: if ( ! iter . is CaMeL Empty ++ this . iter iter . max ;
rank: 722
score: 98.4917724609375
patch: ++ iter ; if ( n == 0 )
rank: 722
score: 98.19225056966145
patch: / ; ++ 0 ;
rank: 723
score: 98.7857196514423
patch: final double [ ] [ ] steepest CaMeL Descent ;
rank: 723
score: 98.74541681463069
patch: if ( iter > max CaMeL Eval ) break ;
rank: 723
score: 98.70529513888889
patch: if ( point . length ( ) ;
rank: 723
score: 98.66033935546875
patch: tmp = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval , r ) ;
rank: 723
score: 98.55457560221355
patch: / * ++ iter ; ++ iter ; ++ iter ;
rank: 723
score: 98.51243760850694
patch: / * * * / * / /
rank: 723
score: 98.48863220214844
patch: ++ n ; ++ n ; ;
rank: 723
score: 98.1913350423177
patch: iter else if ++ ;
rank: 724
score: 98.8110684481534
patch: Point CaMeL Value CaMeL Pair current = current 1 ;
rank: 724
score: 98.7852313701923
patch: if ( goal . converged ( max CaMeL Eval ) ) {
rank: 724
score: 98.7452621459961
patch: ++ iter ; if ( max ;
rank: 724
score: 98.70437282986111
patch: final double iter = r . length ;
rank: 724
score: 98.66024017333984
patch: height = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 724
score: 98.55409934303977
patch: ++ iter ; iter ; / * * / /
rank: 724
score: 98.51236165364584
patch: if ( ! iter . is CaMeL Empty ( ) ) break ; else
rank: 724
score: 98.4879150390625
patch: current = iter - current ;
rank: 724
score: 98.18953450520833
patch: if iter ; / /
rank: 725
score: 98.92220633370536
patch: r = find CaMeL Upper CaMeL Bound ( point , point ) ;
rank: 725
score: 98.78521259014423
patch: double min = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 725
score: 98.74520438058036
patch: ++ max CaMeL Eval - max CaMeL Eval - max CaMeL Eval )
rank: 725
score: 98.70362006293402
patch: ++ max CaMeL Eval ; return current ;
rank: 725
score: 98.66012752757354
patch: tree = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 725
score: 98.553955078125
patch: ++ iter ; ++ * * / int iter ;
rank: 725
score: 98.5120361328125
patch: if ( ! iter . is CaMeL Empty ( ) ) . ; else
rank: 725
score: 98.48788452148438
patch: while ( iter != ; ) {
rank: 725
score: 98.1894022623698
patch: ++ < iter ; ;
rank: 726
score: 98.92181396484375
patch: current = find CaMeL Upper CaMeL Bound ( point , current ) ;
rank: 726
score: 98.78488393930289
patch: int iter = find CaMeL Upper CaMeL Bound ( n ) ;
rank: 726
score: 98.74445343017578
patch: r [ max CaMeL Eval ] = Math . min ( iter , iter ;
rank: 726
score: 98.65951877170139
patch: if ( iter < max CaMeL Eval )
rank: 726
score: 98.55364435369319
patch: / * ] * * / / ++ iter ;
rank: 726
score: 98.51144409179688
patch: if ( ! iter . is CaMeL Empty ++ this . iter ; * /
rank: 726
score: 98.4874267578125
patch: if ( iter != - 1 )
rank: 726
score: 98.18550109863281
patch: ++ true ;
rank: 727
score: 98.74444110576923
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; break ;
rank: 727
score: 98.69951837713069
patch: ++ max CaMeL Eval ; while ( true ) {
rank: 727
score: 98.6593994140625
patch: temp = new Point CaMeL Value CaMeL Pair ( point , r ) ;
rank: 727
score: 98.55356667258523
patch: ++ iter ; else * * / ++ iter ;
rank: 727
score: 98.5111083984375
patch: if ( ! iter . is CaMeL Empty ( ) ; return ; }
rank: 727
score: 98.48707164417614
patch: while ( ! current . equals ( current ) ;
rank: 727
score: 98.1844482421875
patch: break ; ++ iter ;
rank: 728
score: 98.92074148995536
patch: delta = find CaMeL Upper CaMeL Bound ( point , $NUMBER$ ) ;
rank: 728
score: 98.80999145507812
patch: Line CaMeL Search CaMeL Function current = current ;
rank: 728
score: 98.74405343191964
patch: Iterator < Point CaMeL Value CaMeL Pair > iterator = iter . ;
rank: 728
score: 98.69910777698864
patch: int iter = search CaMeL Direction [ 0 ] ;
rank: 728
score: 98.65896426930146
patch: list = compute CaMeL Objective CaMeL Gradient ( point ) ; if ( true ) {
rank: 728
score: 98.55292302911931
patch: ++ iter ; ++ iter ; ++ break ; }
rank: 728
score: 98.51105813419117
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ $NUMBER$ ; }
rank: 728
score: 98.4859619140625
patch: ++ iter ; if ( is CaMeL Empty ) {
rank: 728
score: 98.1800537109375
patch: iter if ++ ;
rank: 729
score: 98.92037963867188
patch: current = find CaMeL Upper CaMeL Bound ( false ) ;
rank: 729
score: 98.8098477450284
patch: ++ max CaMeL Eval -= point [ 0 ] ;
rank: 729
score: 98.7440185546875
patch: ++ iter ; Math . min ( max CaMeL Eval , ;
rank: 729
score: 98.69845581054688
patch: if ( value != null ) {
rank: 729
score: 98.6588134765625
patch: item = new Point CaMeL Value CaMeL Pair ( point , n ) ;
rank: 729
score: 98.55286661783855
patch: ++ iter ; ++ iter ; int iter + iter ;
rank: 729
score: 98.51051240808823
patch: if ( ! iter . is CaMeL Empty ( ) ; return ++ iter ; }
rank: 729
score: 98.48569064670139
patch: ++ iter ; if ( ! iter ;
rank: 729
score: 98.17867024739583
patch: ++ iter ; iter }
rank: 730
score: 98.78126878004808
patch: int goal = compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 730
score: 98.65856170654297
patch: member = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 730
score: 98.55251242897727
patch: ++ iter ; int * * / ++ iter ;
rank: 730
score: 98.51034109933036
patch: if ( iter >= 0 ;
rank: 730
score: 98.48402404785156
patch: current = iter ; ++ current ;
rank: 730
score: 98.1776123046875
patch: if iter / / /
rank: 731
score: 98.809423828125
patch: if ( 0 < point . length ) {
rank: 731
score: 98.78050818810097
patch: double length = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 731
score: 98.74326171875
patch: ++ max CaMeL Eval - iter ; ++ max CaMeL Eval - iter ;
rank: 731
score: 98.6949951171875
patch: ++ iter ; final double iter = 0 ;
rank: 731
score: 98.65854899088542
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point . length , r ) ;
rank: 731
score: 98.5522969563802
patch: ++ * ] iter ;
rank: 731
score: 98.510302734375
patch: if ( iter < 0 ) return null ;
rank: 731
score: 98.4833755493164
patch: ++ iter ; switch ( iter )
rank: 731
score: 98.17652384440105
patch: ++ ++ iter ; ;
rank: 732
score: 98.91928536551339
patch: double [ ] steepest CaMeL Descent = double CaMeL Value ;
rank: 732
score: 98.80930397727273
patch: final Line CaMeL Search CaMeL Function current = current ;
rank: 732
score: 98.74307016225961
patch: ++ max CaMeL Eval = Math . min ( iter , ;
rank: 732
score: 98.69467995383523
patch: if ( iter < r . length ) { {
rank: 732
score: 98.65852864583333
patch: [ ] iter = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 732
score: 98.5521240234375
patch: ++ 1 ; ++ iter ; int iter ;
rank: 732
score: 98.50965073529412
patch: if ( ! iter . is CaMeL Empty ( ) iter . start ( ) ;
rank: 732
score: 98.48284040178571
patch: if ( current == null )
rank: 732
score: 98.17331949869792
patch: ++ ++ ++ 1 ;
rank: 733
score: 98.77378151633523
patch: int [ ] steepest CaMeL Descent ++ ;
rank: 733
score: 98.7426424893466
patch: ++ max CaMeL Eval * iter ; iter ++ ;
rank: 733
score: 98.69163513183594
patch: if ( iter % iter ) {
rank: 733
score: 98.65847938939145
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) )
rank: 733
score: 98.50948486328124
patch: int iter = 0 ; while ; * /
rank: 733
score: 98.48246002197266
patch: ++ iter ++ ; ++ iter ;
rank: 733
score: 98.17254638671875
patch: ++ < ++ iter ;
rank: 734
score: 98.80558638139205
patch: max = find CaMeL Upper CaMeL Bound ( ) ;
rank: 734
score: 98.76879272460937
patch: if ( iter == point . length ) {
rank: 734
score: 98.74244689941406
patch: ++ max CaMeL Eval >= Math . max ( max CaMeL Eval , max ;
rank: 734
score: 98.6907626065341
patch: if ( max CaMeL Eval < r . length )
rank: 734
score: 98.658203125
patch: proxy = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 734
score: 98.55173561789773
patch: ++ iter ; ++ iter ; ; int iter ;
rank: 734
score: 98.5093994140625
patch: else { * * * * / } }
rank: 734
score: 98.48186383928571
patch: ++ iter ; ++ iter )
rank: 734
score: 98.1709493001302
patch: ++ ; ++ 0 ;
rank: 735
score: 98.80059259588069
patch: if ( goal . converged ( iter ) ) {
rank: 735
score: 98.76737837357955
patch: final int [ ] steepest CaMeL Descent ;
rank: 735
score: 98.74242292131696
patch: result = new Point CaMeL Value CaMeL Pair ( iter , max ;
rank: 735
score: 98.69019317626953
patch: while ( iter < true ) {
rank: 735
score: 98.65777587890625
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , current ) ;
rank: 735
score: 98.55115855823864
patch: ++ iter ; ++ value ; ++ * iter ;
rank: 735
score: 98.50924682617188
patch: if ( ! iter . is CaMeL Empty ++ && iter . equals ; }
rank: 735
score: 98.48094177246094
patch: l [ n ] = iter ;
rank: 735
score: 98.1700210571289
patch: iter
rank: 736
score: 98.91786411830357
patch: delta = find CaMeL Upper CaMeL Bound ( point , iter ) ;
rank: 736
score: 98.79849582248264
patch: delta += r [ point . length ;
rank: 736
score: 98.7629727450284
patch: final double < search CaMeL Direction [ 0 ] ;
rank: 736
score: 98.74215494791666
patch: ++ max CaMeL Eval = Math . min ( iter , start ) ;
rank: 736
score: 98.6898526278409
patch: if ( point . length ( ) < n )
rank: 736
score: 98.65777180989583
patch: list = compute CaMeL Objective CaMeL Gradient ( point ) ; ++ iter ;
rank: 736
score: 98.55101318359375
patch: ++ 0 ; ++ iter ; for iter ;
rank: 736
score: 98.50893332741477
patch: if ( iter == 0 ; return ++ iter ;
rank: 736
score: 98.48040771484375
patch: ++ iter - iter + 1 ;
rank: 736
score: 98.169189453125
patch: ++ - ++ iter ;
rank: 737
score: 98.7982177734375
patch: ++ iter ; ++ max CaMeL Eval -= n ;
rank: 737
score: 98.74173990885417
patch: ++ max CaMeL Eval = Math . abs ( current . iter ) ;
rank: 737
score: 98.68972778320312
patch: if ( checker == null ) {
rank: 737
score: 98.65776824951172
patch: saved = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 737
score: 98.55094691685268
patch: / / ] ++ iter ;
rank: 737
score: 98.47880554199219
patch: ++ iter ; while ( iter )
rank: 737
score: 98.16823323567708
patch: ++ ! ++ iter ;
rank: 738
score: 98.7980712890625
patch: if ( point . length > 0 ) {
rank: 738
score: 98.75621948242187
patch: Point CaMeL Value CaMeL Pair current = 0 ;
rank: 738
score: 98.68576388888889
patch: final double search CaMeL Direction = 0 ;
rank: 738
score: 98.65756707442434
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , initial CaMeL Step ) ;
rank: 738
score: 98.5507568359375
patch: ++ iter ; ++ 1 ; int * /
rank: 738
score: 98.50861467633929
patch: else { * * * /
rank: 738
score: 98.47699652777777
patch: ++ iter ; while ( false ) {
rank: 738
score: 98.1648457845052
patch: iter ++ ; ++ ;
rank: 739
score: 98.91665649414062
patch: current = find CaMeL Upper CaMeL Bound ( 0 ) ;
rank: 739
score: 98.75581498579545
patch: int iter = search CaMeL Direction [ iter ] ;
rank: 739
score: 98.74130859375
patch: ++ max CaMeL Eval = get CaMeL Context ( ) . iter . ;
rank: 739
score: 98.65731048583984
patch: result = compute CaMeL Objective CaMeL Gradient ( point , initial CaMeL Step ) ;
rank: 739
score: 98.55073765345982
patch: i ; ++ - iter ;
rank: 739
score: 98.50856646369485
patch: if ( ! iter . is CaMeL Empty ( ) && . $NUMBER$ == 0 ;
rank: 739
score: 98.16365559895833
patch: ++ iter + 0 ;
rank: 740
score: 98.79467163085937
patch: ++ max CaMeL Eval -= ( 0 ) ;
rank: 740
score: 98.74093424479166
patch: result = new Point CaMeL Value CaMeL Pair ( ; current . ++ ;
rank: 740
score: 98.68346405029297
patch: point [ iter ] = current ;
rank: 740
score: 98.65718994140624
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) ) )
rank: 740
score: 98.55055930397727
patch: ++ iter ; ++ iter ; ++ iter ; ++
rank: 740
score: 98.47624376085069
patch: synchronized ( this ) { ++ iter ;
rank: 740
score: 98.16220092773438
patch: ++ iter ; } iter
rank: 741
score: 98.91051228841145
patch: j = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 741
score: 98.7912368774414
patch: ++ max CaMeL Eval -= 1 ;
rank: 741
score: 98.75351784446023
patch: final double [ ] search CaMeL Direction = 0 ;
rank: 741
score: 98.7408935546875
patch: result = new Point CaMeL Value CaMeL Pair ( ++ iter , iter ;
rank: 741
score: 98.6816177368164
patch: if ( delta == 0 ) {
rank: 741
score: 98.65693933823529
patch: long max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , point ) ;
rank: 741
score: 98.55013020833333
patch: ++ iter ; ++ * * ++ iter ; iter ;
rank: 741
score: 98.50816434972427
patch: if ( ! iter . is CaMeL Empty ++ && iter . is CaMeL Empty ++
rank: 741
score: 98.47471110026042
patch: ++ iter ; int current = iter ;
rank: 741
score: 98.15840657552083
patch: ++ * ++ 0 ;
rank: 742
score: 98.74041341145833
patch: ret = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 742
score: 98.68067626953125
patch: if ( checker . converged ( iter , (
rank: 742
score: 98.65670776367188
patch: q = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 742
score: 98.54988236860795
patch: ++ iter ; ++ * ++ iter ; break ;
rank: 742
score: 98.50659897748162
patch: if ( ! iter . is CaMeL Empty iter && iter . is CaMeL Empty ;
rank: 742
score: 98.15638732910156
patch: ++ this ;
rank: 743
score: 98.78472900390625
patch: if ( point . converged ( ) ) {
rank: 743
score: 98.75049438476563
patch: delta += checker . converged ( point ) ;
rank: 743
score: 98.68031005859375
patch: if ( ! checker . converged ( iter ,
rank: 743
score: 98.65617370605469
patch: max CaMeL Eval -= solver . get ( max CaMeL Eval , r ) ;
rank: 743
score: 98.54969371448864
patch: ++ iter ; ++ iter ; ++ / iter ;
rank: 743
score: 98.1499532063802
patch: ++ iter ; ++ *
rank: 744
score: 98.78291625976563
patch: max CaMeL Eval -= r [ 0 ] ;
rank: 744
score: 98.74782104492188
patch: delta = search CaMeL Direction [ iter ] ;
rank: 744
score: 98.73890099158653
patch: ++ max CaMeL Eval = iter + current . clone ( ;
rank: 744
score: 98.65589815027573
patch: state = steepest CaMeL Descent . clone ( ) ; while ( true )
rank: 744
score: 98.54964192708333
patch: ++ iter ; ++ iter ; ++ / * iter ;
rank: 744
score: 98.50513567243304
patch: else { if ++ 0 ;
rank: 744
score: 98.46913146972656
patch: ++ iter ; if ( true )
rank: 745
score: 98.90717107599431
patch: point = find CaMeL Upper CaMeL Bound ( ) ;
rank: 745
score: 98.7380142211914
patch: ++ iter ; for ; ; )
rank: 745
score: 98.65562133789062
patch: return new Point CaMeL Value CaMeL Pair ( compute CaMeL Objective CaMeL Gradient ( point ) ) ; }
rank: 745
score: 98.54942737926136
patch: ++ * * ++ ++ iter ; ++ iter ;
rank: 745
score: 98.5048828125
patch: else { * * * * / } /
rank: 745
score: 98.46872965494792
patch: while ( false ) { ++ iter ;
rank: 745
score: 98.1458740234375
patch: ++ new = iter ;
rank: 746
score: 98.77930908203125
patch: if ( point . length <= n ) {
rank: 746
score: 98.73790564903847
patch: result = new Point CaMeL Value CaMeL Pair ( ++ max ;
rank: 746
score: 98.67258029513889
patch: if ( max CaMeL Eval == 0 )
rank: 746
score: 98.65512084960938
patch: list = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval , r ) ;
rank: 746
score: 98.5494051846591
patch: ++ iter ; if iter ; ++ - iter ;
rank: 746
score: 98.50473022460938
patch: if ( ! iter . is CaMeL Empty ( ) iter . start ( ;
rank: 746
score: 98.46788024902344
patch: ++ iter ; while ( true )
rank: 746
score: 98.14295043945313
patch: ++ - 1 ;
rank: 747
score: 98.90589057074652
patch: if ( true ) { ++ iter ;
rank: 747
score: 98.77907492897727
patch: Point CaMeL Value CaMeL Pair current = current ; ;
rank: 747
score: 98.73748309795673
patch: r [ max CaMeL Eval ] = r [ iter ] ;
rank: 747
score: 98.67097691127232
patch: final double iter = 0 ;
rank: 747
score: 98.65435791015625
patch: [ ] search CaMeL Direction = steepest CaMeL Descent [ 0 ] ;
rank: 747
score: 98.5492831143466
patch: ++ iter ; ++ * / int iter ++ ;
rank: 747
score: 98.50458840762867
patch: if ( ! iter . is CaMeL Empty ++ && iter . starts CaMeL With ;
rank: 747
score: 98.46775599888393
patch: current = iter + 1 ;
rank: 747
score: 98.1375223795573
patch: ++ iter ; / ;
rank: 748
score: 98.90438842773438
patch: Point CaMeL Value CaMeL Pair point = null ;
rank: 748
score: 98.7766446200284
patch: final Univariate CaMeL Function [ ] current = current ;
rank: 748
score: 98.74233176491477
patch: Iterator < Point CaMeL Value CaMeL Pair > ++ ;
rank: 748
score: 98.73728590745192
patch: r [ max CaMeL Eval ] = Math . floor ( ;
rank: 748
score: 98.66948106553819
patch: if ( max CaMeL Eval == null )
rank: 748
score: 98.65318298339844
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( max CaMeL Eval ) ;
rank: 748
score: 98.54909261067708
patch: ++ iter ; ++ iter ; ++ - * iter ;
rank: 748
score: 98.50383911132812
patch: if ( iter == 0 ; * / }
rank: 748
score: 98.46566772460938
patch: if ( iter >= current ) {
rank: 748
score: 98.13575236002605
patch: ++ iter ; iter /
rank: 749
score: 98.77272727272727
patch: delta = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 749
score: 98.7369854266827
patch: ++ iter ; Math . max ( iter , iter ) ;
rank: 749
score: 98.65318298339844
patch: result = compute CaMeL Objective CaMeL Gradient ( search CaMeL Direction , r ) ;
rank: 749
score: 98.54851740056819
patch: ++ iter ; ++ iter ; for iter ; ;
rank: 749
score: 98.50352894176136
patch: Set < ? > iter = iter . start ;
rank: 749
score: 98.46442413330078
patch: while ( ! ++ iter ) {
rank: 749
score: 98.13536580403645
patch: iter iter = iter ;
rank: 750
score: 98.90230618990384
patch: String point = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 750
score: 98.77259410511364
patch: ++ steepest CaMeL Descent [ 0 ] ;
rank: 750
score: 98.73662458147321
patch: ++ iter ; r [ max CaMeL Eval ++ ] = current ;
rank: 750
score: 98.66392517089844
patch: ++ iter ; return current ; }
rank: 750
score: 98.65315246582031
patch: row = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 750
score: 98.5483065518466
patch: ++ iter ; ++ iter ; int * * ;
rank: 750
score: 98.50339181082589
patch: else { break ; } }
rank: 750
score: 98.46182686941964
patch: if ( current == null ;
rank: 750
score: 98.13528442382812
patch: iter ;
rank: 751
score: 98.74015669389205
patch: final double [ ] search CaMeL Direction = current ;
rank: 751
score: 98.73660982572116
patch: ++ max CaMeL Eval ; ; if ( max CaMeL Eval ;
rank: 751
score: 98.66082763671875
patch: if ( checker . converged ) {
rank: 751
score: 98.65302590762867
patch: found = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 751
score: 98.5479736328125
patch: ++ iter ; int * * ++ iter ;
rank: 751
score: 98.50338745117188
patch: if ( ! iter . is CaMeL Empty ++ && ) . ++ iter ;
rank: 751
score: 98.46148681640625
patch: ++ iter ; ++ iter ; current ;
rank: 751
score: 98.13397216796875
patch: ++ null ;
rank: 752
score: 98.73649379185268
patch: r [ max CaMeL Eval ] = Math . abs ( iter ;
rank: 752
score: 98.66023254394531
patch: while ( true ) return current ;
rank: 752
score: 98.6529541015625
patch: lock = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 752
score: 98.54790387834821
patch: ++ delta ; ++ iter ;
rank: 752
score: 98.5033203125
patch: else { / * * * / * /
rank: 752
score: 98.45975748697917
patch: int n = iter ;
rank: 752
score: 98.13327026367188
patch: ++ iter ; iter {
rank: 753
score: 98.90077718098958
patch: delta += find CaMeL Upper CaMeL Bound ( n ) ;
rank: 753
score: 98.73638153076172
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) iter ; ;
rank: 753
score: 98.65956624348958
patch: if ( iter % n == 0 )
rank: 753
score: 98.65283966064453
patch: area = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 753
score: 98.54750754616477
patch: ++ iter ; ++ 1 ; int iter ++ ;
rank: 753
score: 98.50325230189732
patch: / * * ; * /
rank: 753
score: 98.45934186662946
patch: n -- ; ++ iter ;
rank: 753
score: 98.13095092773438
patch: ++ iter ; ; try
rank: 754
score: 98.73634690504808
patch: ++ iter ; r [ max CaMeL Eval ] = ; }
rank: 754
score: 98.65260314941406
patch: l = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 754
score: 98.54750366210938
patch: else ++ iter ; ++ iter ; iter ;
rank: 754
score: 98.45694986979167
patch: ++ iter ; current = iter 1 ;
rank: 754
score: 98.12660725911458
patch: ++ ++ iter ; else
rank: 755
score: 98.89993990384616
patch: max CaMeL Eval = find CaMeL Upper CaMeL Bound ( point ,
rank: 755
score: 98.7649813565341
patch: while ( iter < search CaMeL Direction . length )
rank: 755
score: 98.73623422475961
patch: r [ max CaMeL Eval ++ ] = iter . ; }
rank: 755
score: 98.73405626085069
patch: iter = point . length ( ) ;
rank: 755
score: 98.65233090049342
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( current ) ;
rank: 755
score: 98.54700816761364
patch: ++ iter ; ++ iter ; ++ * / /
rank: 755
score: 98.50318400065105
patch: / * * * /
rank: 755
score: 98.44673665364583
patch: if ( current != null ) break ;
rank: 756
score: 98.89562049278847
patch: final double = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 756
score: 98.73613630022321
patch: r [ max CaMeL Eval ] = ++ max CaMeL Eval ; }
rank: 756
score: 98.73129272460938
patch: int [ ] current = current . length ;
rank: 756
score: 98.65606011284723
patch: if ( goal . converged ( iter ,
rank: 756
score: 98.65130615234375
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , solver ) ;
rank: 756
score: 98.54677512428977
patch: ++ iter ; ++ iter ; / * / ;
rank: 756
score: 98.50311279296875
patch: if ( ! iter . is CaMeL Empty ( ) ; return ++ 1 ;
rank: 756
score: 98.44647894965277
patch: ++ iter ; int n = iter ;
rank: 757
score: 98.89457194010417
patch: int max CaMeL Eval = find CaMeL Upper CaMeL Bound (
rank: 757
score: 98.73606872558594
patch: ++ max CaMeL Eval -- ; }
rank: 757
score: 98.72666015625
patch: Point CaMeL Value CaMeL Pair current = this ;
rank: 757
score: 98.650927734375
patch: Iterator < Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair ) {
rank: 757
score: 98.54653930664062
patch: ++ iter ; ++ iter ; ++ value ; iter ;
rank: 757
score: 98.50306701660156
patch: if ( ! iter . is CaMeL Empty ( ) ) . max ; }
rank: 757
score: 98.43853759765625
patch: n -- ; ++ n ;
rank: 757
score: 98.11023966471355
patch: ++ ; = iter ;
rank: 758
score: 98.8913104717548
patch: ++ max = find CaMeL Upper CaMeL Bound ( point ) ;
rank: 758
score: 98.7552490234375
patch: if ( point . converged ( iter ) ) {
rank: 758
score: 98.73583045372597
patch: ++ max CaMeL Eval = Math . abs ( iter ) ;
rank: 758
score: 98.72584364149306
patch: delta += current . length ( ) ;
rank: 758
score: 98.65087890625
patch: [ ] search CaMeL Direction = steepest CaMeL Descent . precondition ( point , r ) ;
rank: 758
score: 98.50289481026786
patch: ++ iter ; } if ;
rank: 758
score: 98.43810163225446
patch: int iter = ++ iter ;
rank: 758
score: 98.10782470703126
patch: ++ ++ n ;
rank: 759
score: 98.73551722935268
patch: ++ max CaMeL Eval ; ++ max CaMeL Eval ; ++ iter ;
rank: 759
score: 98.72322845458984
patch: double [ ] search CaMeL Direction ;
rank: 759
score: 98.65082864200367
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point
rank: 759
score: 98.64832305908203
patch: double [ ] r = current ;
rank: 759
score: 98.54625447591145
patch: ++ iter ; ++ iter ; System . iter ++ ;
rank: 759
score: 98.50260925292969
patch: if ( ! iter . is CaMeL Empty ( ) ; } ++ iter ;
rank: 759
score: 98.09975179036458
patch: ++ $NUMBER$ + iter ;
rank: 760
score: 98.7532958984375
patch: while ( 0 < point . length ) {
rank: 760
score: 98.73531668526786
patch: result = new Point CaMeL Value CaMeL Pair ( current , iter ;
rank: 760
score: 98.7189453125
patch: current = search CaMeL Direction [ iter ] ;
rank: 760
score: 98.6507339477539
patch: dialog = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 760
score: 98.6462631225586
patch: ++ iter ; { ++ iter ;
rank: 760
score: 98.54598999023438
patch: ++ iter ; ++ - - iter ; ++ iter ;
rank: 760
score: 98.50225275213069
patch: ++ [ ] iter = iter ; ++ iter ;
rank: 760
score: 98.42585972377232
patch: ++ current ; ++ current ;
rank: 760
score: 98.0986328125
patch: ++ iter ; ++ max
rank: 761
score: 98.7352764423077
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; ; ;
rank: 761
score: 98.65023803710938
patch: queue = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 761
score: 98.64473470052083
patch: double iter = 0 ;
rank: 761
score: 98.50109252929687
patch: ++ iter ; if ++ [ iter ] ;
rank: 761
score: 98.42459542410714
patch: int n = - 1 ;
rank: 761
score: 98.096923828125
patch: ++ iter ; ++ iter
rank: 762
score: 98.73519694010416
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval > iter ;
rank: 762
score: 98.65007019042969
patch: selection = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 762
score: 98.64426676432292
patch: ++ iter ; switch ( iter ) {
rank: 762
score: 98.54524369673295
patch: ++ iter ; ++ iter ; System . out ;
rank: 762
score: 98.50062866210938
patch: else { ++ 1 ; } / * /
rank: 762
score: 98.42236328125
patch: assert current != null ;
rank: 762
score: 98.09632364908855
patch: ++ iter ; iter else
rank: 763
score: 98.73519694010416
patch: ++ max CaMeL Eval >= Math . min ( iter , iter ) ;
rank: 763
score: 98.715185546875
patch: if ( checker . precondition ( ) ) {
rank: 763
score: 98.64959716796875
patch: iter = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 763
score: 98.64278411865234
patch: int max = point . length ;
rank: 763
score: 98.50058419363839
patch: / * * ++ iter /
rank: 763
score: 98.42231096540179
patch: current = iter - n ;
rank: 763
score: 98.09561767578126
patch: / ++ iter ;
rank: 764
score: 98.73458862304688
patch: final Point CaMeL Value CaMeL Pair r = new Point CaMeL Value CaMeL Pair (
rank: 764
score: 98.7149658203125
patch: double < search CaMeL Direction [ 0 ] ;
rank: 764
score: 98.64879608154297
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , solver ) ;
rank: 764
score: 98.64234924316406
patch: ++ iter ; final double iter ;
rank: 764
score: 98.0928955078125
patch: iter ; ++ max ;
rank: 765
score: 98.7345458984375
patch: iter = new Point CaMeL Value CaMeL Pair ( r [ 0 ] ;
rank: 765
score: 98.64874267578125
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair ( )
rank: 765
score: 98.64210510253906
patch: while ( true ) { ) {
rank: 765
score: 98.54351806640625
patch: ++ iter ; ++ * * * / ++ iter ;
rank: 765
score: 98.50049591064453
patch: while ( ! iter . is CaMeL Empty ( ; ) . start ( ;
rank: 765
score: 98.09288533528645
patch: ++ ( * iter ;
rank: 766
score: 98.73446655273438
patch: ++ max CaMeL Eval ; ; ;
rank: 766
score: 98.64796447753906
patch: body = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 766
score: 98.64179144965277
patch: final double iter = max CaMeL Eval ;
rank: 766
score: 98.54349975585937
patch: ++ * ++ iter ; while iter ; ;
rank: 766
score: 98.49971277573529
patch: if ( ! iter . is CaMeL Empty ( ) ) { break ; } }
rank: 766
score: 98.41300746372768
patch: current = iter + iter ;
rank: 766
score: 98.09100341796875
patch: ++ new ++ ; ;
rank: 767
score: 98.74842418323864
patch: Point CaMeL Value CaMeL Pair current = current ; else
rank: 767
score: 98.73432922363281
patch: ++ max CaMeL Eval ] = Math . max ( max CaMeL Eval , ;
rank: 767
score: 98.70545196533203
patch: delta += r [ n ] ;
rank: 767
score: 98.64781188964844
patch: layout = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 767
score: 98.64056396484375
patch: switch ( iter ) {
rank: 767
score: 98.54300537109376
patch: ++ iter ; iter ; * ; * /
rank: 767
score: 98.49955480238971
patch: if ( ! iter . is CaMeL Empty ++ && current . is CaMeL Empty ;
rank: 767
score: 98.0895284016927
patch: iter ; if iter ;
rank: 768
score: 98.87345747514205
patch: delta = find CaMeL Upper CaMeL Bound ( point ,
rank: 768
score: 98.73361642020089
patch: ++ max CaMeL Eval += Math . min ( iter , iter ;
rank: 768
score: 98.70461203835227
patch: delta += r [ point . length 1 ] ;
rank: 768
score: 98.6477409811581
patch: f = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 768
score: 98.63832092285156
patch: switch ( point . length ) {
rank: 768
score: 98.54234730113636
patch: ++ ++ iter ; ++ * / ++ iter ;
rank: 768
score: 98.49934692382813
patch: else { if ++ iter - $NUMBER$ ; }
rank: 768
score: 98.40803745814732
patch: if ( iter < n )
rank: 768
score: 98.0892333984375
patch: ++ ++ ++ 0 ;
rank: 769
score: 98.70416259765625
patch: case FLETCHER _ REEVES :
rank: 769
score: 98.6475830078125
patch: iter = compute CaMeL Objective CaMeL Gradient ( point ) ; if ( true ) {
rank: 769
score: 98.54206986860795
patch: ++ iter ; ++ iter ; iter ; break ;
rank: 769
score: 98.49928193933823
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals ( ;
rank: 769
score: 98.40800258091518
patch: Iterator iter = ++ n ;
rank: 769
score: 98.088623046875
patch: if iter * ; /
rank: 770
score: 98.74606323242188
patch: ++ iter ; steepest CaMeL Descent .
rank: 770
score: 98.73341471354166
patch: r [ max CaMeL Eval ++ ] = Double . parse CaMeL Double ;
rank: 770
score: 98.70240478515625
patch: i = search CaMeL Direction [ iter ] ;
rank: 770
score: 98.6470947265625
patch: call = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 770
score: 98.63542344835069
patch: if ( update CaMeL Formula ) { ;
rank: 770
score: 98.5418368252841
patch: ++ iter ; ++ iter ; int - 1 ;
rank: 770
score: 98.4989372702206
patch: if ( ! iter . is CaMeL Empty ++ && iter . equals ++ break ;
rank: 770
score: 98.4056640625
patch: ++ iter ] ;
rank: 770
score: 98.08746337890625
patch: iter ; ++ null ;
rank: 771
score: 98.73338971819196
patch: r [ max CaMeL Eval ] = Math . round ( iter ;
rank: 771
score: 98.64701080322266
patch: cs = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 771
score: 98.63498942057292
patch: if ( max CaMeL Eval < 0 )
rank: 771
score: 98.49802468039773
patch: else { / * * * / ++ iter ;
rank: 771
score: 98.40421549479167
patch: ++ iter ; try {
rank: 771
score: 98.0870869954427
patch: if iter ] / /
rank: 772
score: 98.7458251953125
patch: Point CaMeL Value CaMeL Pair n = current ;
rank: 772
score: 98.73321533203125
patch: final Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair (
rank: 772
score: 98.69750366210937
patch: if ( n == point . length ) {
rank: 772
score: 98.64685776654412
patch: Object current = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 772
score: 98.63360595703125
patch: Point CaMeL Value CaMeL Pair current ;
rank: 772
score: 98.53811645507812
patch: ++ * ++ iter ; if iter ; ++ iter ;
rank: 772
score: 98.49800618489583
patch: / * * * ;
rank: 772
score: 98.40284946986607
patch: ++ iter == - 1 ;
rank: 772
score: 98.08634440104167
patch: ++ ( ++ 0 ;
rank: 773
score: 98.69340376420455
patch: final double [ ] n = current . length ;
rank: 773
score: 98.64554850260417
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair current = 0 ;
rank: 773
score: 98.63056945800781
patch: if ( iter % true ) {
rank: 773
score: 98.53759765625
patch: ++ * ++ 1 ;
rank: 773
score: 98.49793198529412
patch: if ( ! iter . is CaMeL Empty ++ && iter . $NUMBER$ == 0 ;
rank: 773
score: 98.40243094308036
patch: l [ iter ] = ;
rank: 774
score: 98.74361165364583
patch: ++ max CaMeL Eval -= n ; {
rank: 774
score: 98.7325439453125
patch: ++ max CaMeL Eval = ++ max CaMeL Eval ; while ( ;
rank: 774
score: 98.690576171875
patch: if ( point . length < 0 ) {
rank: 774
score: 98.64536539713542
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair current = point ;
rank: 774
score: 98.6305160522461
patch: if ( n != 0 ) {
rank: 774
score: 98.53742009943181
patch: else * ++ iter ; * / ++ iter ;
rank: 774
score: 98.49695587158203
patch: ++ length ;
rank: 774
score: 98.40042114257812
patch: try { current = ;
rank: 774
score: 98.07919311523438
patch: ++ ; ++ start ;
rank: 775
score: 98.73172433035714
patch: ++ iter ; r [ max CaMeL Eval ++ ] = ; }
rank: 775
score: 98.64505004882812
patch: re = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 775
score: 98.63037109375
patch: double max CaMeL Eval = 0 ;
rank: 775
score: 98.53584798177083
patch: ++ iter ; try ;
rank: 775
score: 98.49577331542969
patch: if ( ! iter . is CaMeL Empty ( ) ) { ++ $NUMBER$ ;
rank: 775
score: 98.39438302176339
patch: while ( iter == n )
rank: 775
score: 98.0781758626302
patch: ++ Math = iter ;
rank: 776
score: 98.85839233398437
patch: if ( checker . converged ( iter ) )
rank: 776
score: 98.74022327769886
patch: if ( goal . converged ( max CaMeL Eval ,
rank: 776
score: 98.7317138671875
patch: result = new Point CaMeL Value CaMeL Pair ( r [ n ] ;
rank: 776
score: 98.6882095336914
patch: double [ ] r = null ;
rank: 776
score: 98.64504665798611
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point .
rank: 776
score: 98.62939453125
patch: while ( true ) { else {
rank: 776
score: 98.53501198508523
patch: ++ iter ; ++ iter ; / * / /
rank: 776
score: 98.49517059326172
patch: if ( ! iter . is CaMeL Empty ++ && . 0 > 0 ;
rank: 776
score: 98.39192417689732
patch: ++ iter ; System . ;
rank: 776
score: 98.07789916992188
patch: iter else ++ ;
rank: 777
score: 98.73161315917969
patch: ++ max CaMeL Eval = Math . min ( max CaMeL Eval , 1 ;
rank: 777
score: 98.6842529296875
patch: int [ ] steepest CaMeL Descent =
rank: 777
score: 98.64476821001838
patch: Iterator max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , r ) ;
rank: 777
score: 98.62872314453125
patch: double iter = r . length ;
rank: 777
score: 98.49500274658203
patch: if ( ! iter . is CaMeL Empty ++ this . iter . equals (
rank: 777
score: 98.39133126395089
patch: int n = ++ iter ;
rank: 777
score: 98.07693481445312
patch: ++ Math ;
rank: 778
score: 98.73081752232143
patch: ++ max CaMeL Eval = get CaMeL Context ( ) . ++ ;
rank: 778
score: 98.68092041015625
patch: Point CaMeL Value CaMeL Pair current = true ;
rank: 778
score: 98.64466857910156
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point . length , r ) ;
rank: 778
score: 98.53324751420455
patch: / * ] iter ; * / ++ iter ;
rank: 778
score: 98.49411190257354
patch: if ( ! iter . is CaMeL Empty ( || iter . is CaMeL Empty ;
rank: 778
score: 98.38861955915179
patch: if ( current != null ;
rank: 778
score: 98.07605997721355
patch: ++ ; ++ n ;
rank: 779
score: 98.84583629261364
patch: max CaMeL Eval -= search CaMeL Direction . length ;
rank: 779
score: 98.73076036241319
patch: ++ iter ; / * * * ;
rank: 779
score: 98.680078125
patch: iter = search CaMeL Direction [ 0 ] ;
rank: 779
score: 98.64436609604779
patch: res = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 779
score: 98.62252807617188
patch: ++ iter ; current = current ;
rank: 779
score: 98.53253173828125
patch: ++ * - iter ;
rank: 779
score: 98.38594273158482
patch: ++ n ; ++ current ;
rank: 779
score: 98.07330322265625
patch: ++ list ;
rank: 780
score: 98.83891296386719
patch: delta += r [ iter ] ;
rank: 780
score: 98.73505316840277
patch: ++ max CaMeL Eval [ 0 ] ;
rank: 780
score: 98.73047688802083
patch: ++ max CaMeL Eval = Math . max ( iter , current ) ;
rank: 780
score: 98.64384191176471
patch: resource = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 780
score: 98.53239302201705
patch: ++ iter ; ++ - iter ; int iter ;
rank: 780
score: 98.49281005859375
patch: int iter = 0 ; if ++ iter ;
rank: 780
score: 98.38532366071429
patch: n ++ ; ++ iter ;
rank: 780
score: 98.06642456054688
patch: iter ++ ; ;
rank: 781
score: 98.8361572265625
patch: Point CaMeL Value CaMeL Pair value = current ;
rank: 781
score: 98.73041449652777
patch: ++ iter ; for ( ; ; )
rank: 781
score: 98.64302571614583
patch: result = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , n ) ;
rank: 781
score: 98.62065124511719
patch: while ( true && true ) {
rank: 781
score: 98.531494140625
patch: ++ iter ; ++ * * ++ iter ; /
rank: 781
score: 98.49211774553571
patch: ++ iter ; while ; }
rank: 781
score: 98.3804423014323
patch: tmp = ++ iter ;
rank: 781
score: 98.05890502929688
patch: if iter ++ ;
rank: 782
score: 98.7303466796875
patch: return new Point CaMeL Value CaMeL Pair ( iter , iter ) ; }
rank: 782
score: 98.67122650146484
patch: point [ 0 ] = 0 ;
rank: 782
score: 98.53117231889205
patch: ++ * * ++ iter ; ++ iter ; ;
rank: 782
score: 98.49153275923295
patch: if ( iter < 0 ) return iter ; }
rank: 782
score: 98.38022867838542
patch: iter = ++ iter ;
rank: 782
score: 98.05086517333984
patch: ++ $STRING$ ;
rank: 783
score: 98.73031616210938
patch: ++ max CaMeL Eval >= 1 ;
rank: 783
score: 98.67080688476562
patch: double [ ] search CaMeL Direction = delta ;
rank: 783
score: 98.64273410373264
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , point , r ) ;
rank: 783
score: 98.53105024857955
patch: ++ iter ; ++ * * int ++ iter ;
rank: 783
score: 98.49089499080883
patch: if ( ! iter . is CaMeL Empty ( ) ; return iter . length ;
rank: 783
score: 98.37858072916667
patch: synchronized ( this ) {
rank: 783
score: 98.0500259399414
patch: iter ; iter
rank: 784
score: 98.83162064985795
patch: i = find CaMeL Upper CaMeL Bound ( ) ;
rank: 784
score: 98.730224609375
patch: ++ max CaMeL Eval + $NUMBER$ ;
rank: 784
score: 98.71941460503473
patch: ++ steepest CaMeL Descent ; {
rank: 784
score: 98.66634792751736
patch: final double [ ] r = null ;
rank: 784
score: 98.64221909466912
patch: Iterator < Point CaMeL Value CaMeL Pair protected Point CaMeL Value CaMeL Pair ( ) {
rank: 784
score: 98.53056196732955
patch: ++ iter ; ++ iter ; while ( iter ;
rank: 784
score: 98.49071044921875
patch: / * * * ++ * * / }
rank: 784
score: 98.04981689453125
patch: ++ ! iter ;
rank: 785
score: 98.73014831542969
patch: r [ n ] = iter ;
rank: 785
score: 98.64167336856617
patch: p = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 785
score: 98.61167689732143
patch: while ( iter ; ) {
rank: 785
score: 98.5304667154948
patch: ++ iter ; ++ iter ; int iter = iter ;
rank: 785
score: 98.49065551757812
patch: if ( iter == 0 ; * / ;
rank: 785
score: 98.37310180664062
patch: ++ iter ) {
rank: 786
score: 98.8270751953125
patch: search CaMeL Direction [ iter ] = current ;
rank: 786
score: 98.72978864397321
patch: r [ n ] = ;
rank: 786
score: 98.66561889648438
patch: point [ 0 ] = current ;
rank: 786
score: 98.6404670266544
patch: element = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 786
score: 98.61015489366319
patch: if ( max CaMeL Eval > 0 )
rank: 786
score: 98.5303622159091
patch: ++ iter ; ++ iter ; iter ; * /
rank: 786
score: 98.37266322544643
patch: if ( iter == current )
rank: 786
score: 98.0184814453125
patch: ++ iter ; ++
rank: 787
score: 98.72959681919643
patch: if ( max CaMeL Eval < 0 ) max CaMeL Eval ++ ;
rank: 787
score: 98.66328125
patch: double [ ] [ ] search CaMeL Direction ;
rank: 787
score: 98.63958062065973
patch: Iterator < Point CaMeL Value CaMeL Pair >
rank: 787
score: 98.60941314697266
patch: double iter = max CaMeL Eval ;
rank: 787
score: 98.52986283735795
patch: / * ] ++ iter ; if ++ iter ;
rank: 787
score: 98.48973173253677
patch: if ( ! iter . is CaMeL Empty ++ ) this . ++ iter ; }
rank: 787
score: 98.01516723632812
patch: return iter ;
rank: 788
score: 98.82213134765625
patch: Point CaMeL Value CaMeL Pair list = current ;
rank: 788
score: 98.63860006893383
patch: prev = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 788
score: 98.609375
patch: double search CaMeL Direction = 0 ;
rank: 788
score: 98.52919514973958
patch: ++ iter ; ++ * / ++ iter ; iter ;
rank: 788
score: 98.3695576985677
patch: int current = iter ;
rank: 788
score: 98.00047607421875
patch: ++ ++ 0 ;
rank: 789
score: 98.82152210582386
patch: if ( true ) { ++ max CaMeL Eval ;
rank: 789
score: 98.72928292410714
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval - iter ;
rank: 789
score: 98.63748972039474
patch: max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ; if ( true ) {
rank: 789
score: 98.6073989868164
patch: if ( point != null ) {
rank: 789
score: 98.529052734375
patch: ++ iter ; ++ iter ; * * ++ iter ;
rank: 789
score: 98.48903111049107
patch: ++ * * iter ; /
rank: 789
score: 97.986669921875
patch: ++ max ++ ;
rank: 790
score: 98.72807094029018
patch: ++ max CaMeL Eval ; ; if ( max CaMeL Eval > ;
rank: 790
score: 98.65663146972656
patch: delta += point [ 0 ] ;
rank: 790
score: 98.63737218520221
patch: block = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 790
score: 98.5277432528409
patch: ++ iter ; / * * * * / /
rank: 790
score: 98.48883056640625
patch: if ( iter >= 0 )
rank: 790
score: 98.3685302734375
patch: n ++ ; ++ n ;
rank: 790
score: 97.9661636352539
patch: ++ r ;
rank: 791
score: 98.81828002929687
patch: Point CaMeL Value CaMeL Pair new = null ;
rank: 791
score: 98.72775268554688
patch: ++ max CaMeL Eval <= $NUMBER$ ;
rank: 791
score: 98.69190809461806
patch: ++ max CaMeL Eval -= r ; {
rank: 791
score: 98.65569458007812
patch: Point CaMeL Value CaMeL Pair current = point ;
rank: 791
score: 98.63667805989583
patch: [ ] steepest CaMeL Descent = preconditioner . get CaMeL Line CaMeL
rank: 791
score: 98.6046371459961
patch: if ( max CaMeL Eval ) {
rank: 791
score: 98.48824462890624
patch: else { if ++ iter - 1 ; }
rank: 791
score: 98.36814662388393
patch: synchronized ( ++ iter ) {
rank: 791
score: 97.9618896484375
patch: ++ iter ; try
rank: 792
score: 98.63646782769098
patch: return new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , n ) ;
rank: 792
score: 98.60252380371094
patch: r [ iter ] = current ;
rank: 792
score: 98.52723277698864
patch: if ++ iter ; ++ 1 ; ++ iter ;
rank: 792
score: 98.48813698508523
patch: else { if ++ iter - 0 . ; }
rank: 792
score: 98.365478515625
patch: ++ iter )
rank: 792
score: 97.9544921875
patch: ++ ( iter ;
rank: 793
score: 98.81396484375
patch: delta += compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 793
score: 98.72584533691406
patch: ++ iter ; * iter ++ ;
rank: 793
score: 98.6877197265625
patch: Point CaMeL Value CaMeL Pair current = false ;
rank: 793
score: 98.65204535590277
patch: Convergence CaMeL Checker < double [ ] ;
rank: 793
score: 98.63628540039062
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( point , iter ) ;
rank: 793
score: 98.59922790527344
patch: Iterator iter = point . length ;
rank: 793
score: 98.5270108309659
patch: ++ iter ; ++ iter + iter ; iter ;
rank: 793
score: 98.48775809151786
patch: else { ++ iter ; ;
rank: 793
score: 98.35764857700893
patch: try { ++ iter ; ;
rank: 793
score: 97.9503402709961
patch: int iter ;
rank: 794
score: 98.81317138671875
patch: Point CaMeL Value CaMeL Pair start = current ;
rank: 794
score: 98.725732421875
patch: ++ max CaMeL Eval = Math . min ( iter , max ) ;
rank: 794
score: 98.63623657226563
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point ) ; }
rank: 794
score: 98.59839545355902
patch: ++ iter ; switch ( true ) {
rank: 794
score: 98.52671305338542
patch: / ] ++ iter ;
rank: 794
score: 98.48699592141544
patch: if ( ! iter . is CaMeL Empty ( ; iter . start ( ) ;
rank: 794
score: 98.35635811941964
patch: try { current = iter ;
rank: 794
score: 97.94536590576172
patch: if iter ;
rank: 795
score: 98.72527669270833
patch: int iter = Math . max ( max CaMeL Eval , iter ) ;
rank: 795
score: 98.64839002821181
patch: final double [ ] r = current ;
rank: 795
score: 98.63559857536765
patch: result = compute CaMeL Objective CaMeL Gradient ( point ) ; if ( true ) {
rank: 795
score: 98.59812927246094
patch: if ( n == null ) {
rank: 795
score: 98.5262451171875
patch: ++ 1 ; ++ iter ; ++ iter ; ;
rank: 795
score: 98.486279296875
patch: if ( iter < iter ) break ; }
rank: 795
score: 98.35629708426339
patch: int iter = - 1 ;
rank: 795
score: 97.94332275390624
patch: / iter ++ ;
rank: 796
score: 98.80753950639205
patch: final Point CaMeL Value CaMeL Pair point = current ;
rank: 796
score: 98.72322845458984
patch: ++ iter ; if ( ; ;
rank: 796
score: 98.64515380859375
patch: if ( point . length == n ) {
rank: 796
score: 98.63540167557566
patch: return new Point CaMeL Value CaMeL Pair ( Point CaMeL Value CaMeL Pair ( point ) ) ;
rank: 796
score: 98.59677124023438
patch: double r [ ] = 0 ;
rank: 796
score: 98.5257568359375
patch: ++ * * / ++ iter ; ++ iter ;
rank: 796
score: 98.48528497869319
patch: Set < ? > iter = iter . iter ;
rank: 796
score: 98.35104370117188
patch: if ; ++ iter ;
rank: 796
score: 97.93983154296875
patch: int iter ++ ;
rank: 797
score: 98.72277018229167
patch: result = new Point CaMeL Value CaMeL Pair ( iter , iter ; ;
rank: 797
score: 98.67520141601562
patch: delta [ 0 ] = 0 ;
rank: 797
score: 98.63504464285714
patch: if ( update CaMeL Formula )
rank: 797
score: 98.59606170654297
patch: if ( delta != 0 ) {
rank: 797
score: 98.52439186789773
patch: ++ iter ; iter ; * * * / /
rank: 797
score: 98.48482019761029
patch: if ( ! iter . is CaMeL Empty ++ this . iter . iter ; }
rank: 797
score: 98.3490498860677
patch: ++ iter + n ;
rank: 797
score: 97.93692016601562
patch: return iter ; ;
rank: 798
score: 98.72268676757812
patch: iter += r [ iter ] ;
rank: 798
score: 98.63502412683823
patch: protected Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( ) ;
rank: 798
score: 98.59603118896484
patch: while ( checker != null ) {
rank: 798
score: 98.52293904622395
patch: ++ iter ; while iter + iter ; ++ iter ;
rank: 798
score: 98.48390826056985
patch: if ( ! iter . is CaMeL Empty ( || iter . equals ++ ) ;
rank: 798
score: 98.34903390066964
patch: ++ iter ; ; if ;
rank: 798
score: 97.93535614013672
patch: iter iter ;
rank: 799
score: 98.72242567274306
patch: result [ iter ] = ++ iter ;
rank: 799
score: 98.66928439670139
patch: ++ search CaMeL Direction [ iter ] ;
rank: 799
score: 98.63478393554688
patch: [ ] steepest CaMeL Descent = preconditioner . precondition $NUMBER$ ( point ) ;
rank: 799
score: 98.52252197265625
patch: ++ iter ; ++ iter ; int iter { ++ ;
rank: 799
score: 98.483349609375
patch: else { ++ iter ; } / * ;
rank: 799
score: 98.34806605747768
patch: if ( iter != current )
rank: 799
score: 97.93254852294922
patch: ++ value ;
rank: 800
score: 98.72227260044643
patch: ++ max CaMeL Eval ; if ( max CaMeL Eval > 0 ;
rank: 800
score: 98.63452826605902
patch: max CaMeL Eval -= point . length ;
rank: 800
score: 98.63240356445313
patch: int [ ] search CaMeL Direction = current ;
rank: 800
score: 98.59296417236328
patch: if ( value == null ) {
rank: 800
score: 98.5224942294034
patch: ++ iter ; ++ iter ; ++ case 1 ;
rank: 800
score: 98.48157958984375
patch: else { if iter * 0 . 0 ;
rank: 800
score: 98.34772600446429
patch: if ( iter >= iter )
rank: 800
score: 97.91358947753906
patch: ++ false ;
rank: 801
score: 98.72200520833333
patch: ++ max CaMeL Eval = Math . min ( start , iter ) ;
rank: 801
score: 98.63446366159539
patch: Iterator < Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair {
rank: 801
score: 98.58732604980469
patch: while ( iter ; true ) {
rank: 801
score: 98.52244059244792
patch: ++ ] ++ iter ;
rank: 801
score: 98.48076837713069
patch: else { * * * / ++ iter ; }
rank: 801
score: 98.34696742466518
patch: while ( current != null )
rank: 801
score: 97.91346435546875
patch: { ++ iter ;
rank: 802
score: 98.72117513020834
patch: r [ max CaMeL Eval ] = Math . min ( iter , ;
rank: 802
score: 98.634033203125
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point . ) ;
rank: 802
score: 98.62818739149306
patch: delta += checker . precondition ( ) ;
rank: 802
score: 98.52239435369319
patch: ++ iter ; while ++ 1 ; ++ iter ;
rank: 802
score: 98.47794799804687
patch: / * * * ++ * * * /
rank: 802
score: 98.34111676897321
patch: ++ iter ) ++ iter ;
rank: 802
score: 97.91304779052734
patch: ++ current ;
rank: 803
score: 98.78905639648437
patch: ++ max CaMeL Eval ; current = null ;
rank: 803
score: 98.72074381510417
patch: return new Point CaMeL Value CaMeL Pair ( iter , iter , max ;
rank: 803
score: 98.65540907118056
patch: Point CaMeL Value CaMeL Pair current = current
rank: 803
score: 98.63357204861111
patch: tmp = compute CaMeL Objective CaMeL Gradient ( point , 0 , initial CaMeL Step ) ;
rank: 803
score: 98.58265686035156
patch: current = point [ iter ] ;
rank: 803
score: 98.5220614346591
patch: / * ++ iter ; / / ++ iter ;
rank: 803
score: 98.4775390625
patch: ++ [ ] iter = iter ; if ;
rank: 803
score: 98.34109933035714
patch: if ( ! ++ n )
rank: 803
score: 97.9110595703125
patch: final ++ iter ;
rank: 804
score: 98.65357971191406
patch: delta += r [ 1 ] ;
rank: 804
score: 98.63339072779605
patch: Iterator < Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair Point CaMeL Value CaMeL Pair ;
rank: 804
score: 98.62593078613281
patch: double [ ] current = current ;
rank: 804
score: 98.52098592122395
patch: ++ iter ; ++ * * ++ / ++ iter ;
rank: 804
score: 98.4775390625
patch: * * * * / ++ iter ; }
rank: 804
score: 98.33937581380208
patch: ++ iter ; continue ;
rank: 804
score: 97.90502319335937
patch: } iter ++ ;
rank: 805
score: 98.78140258789062
patch: Point CaMeL Value CaMeL Pair list = null ;
rank: 805
score: 98.719189453125
patch: current = new Point CaMeL Value CaMeL Pair ( iter , iter ) ;
rank: 805
score: 98.63322618272569
patch: synchronized ( preconditioner ) {
rank: 805
score: 98.62205505371094
patch: point [ iter ] = 0 ;
rank: 805
score: 98.57942962646484
patch: if ( delta > 0 ) {
rank: 805
score: 98.52097389914773
patch: i * ++ ; ++ iter ; ++ * /
rank: 805
score: 98.47711791992188
patch: if ( iter != null ; return iter ;
rank: 805
score: 98.33915201822917
patch: ++ iter * iter ;
rank: 805
score: 97.89834594726562
patch: ++ < iter ;
rank: 806
score: 98.65193176269531
patch: ++ max CaMeL Eval * 0 ;
rank: 806
score: 98.62145233154297
patch: double [ ] point = current ;
rank: 806
score: 98.57888793945312
patch: double delta = 0 ;
rank: 806
score: 98.52069646661931
patch: ++ iter ; ++ * * ++ * 1 ;
rank: 806
score: 98.47701416015624
patch: else { if ++ [ $NUMBER$ ] ; }
rank: 806
score: 98.33880615234375
patch: temp = iter - iter ;
rank: 806
score: 97.88605499267578
patch: ++ super ;
rank: 807
score: 98.71839192708333
patch: r [ max CaMeL Eval ] = Math . max ( iter , ;
rank: 807
score: 98.64826049804688
patch: ++ iter ; {
rank: 807
score: 98.63298882378473
patch: Point CaMeL Value CaMeL Pair current = new Point CaMeL Value CaMeL Pair ( $STRING$ ) ;
rank: 807
score: 98.57846069335938
patch: switch ( checker . converged ) {
rank: 807
score: 98.52060768821023
patch: ++ * ++ iter ; iter ; int iter ;
rank: 807
score: 98.47648481889205
patch: else { if iter * 0 . 0 ; }
rank: 807
score: 98.33595784505208
patch: context = ++ iter ;
rank: 807
score: 97.88250122070312
patch: ++ 0 ; ;
rank: 808
score: 98.71832275390625
patch: r [ iter ] = iter ; }
rank: 808
score: 98.6329345703125
patch: n = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 808
score: 98.61655002170139
patch: final double [ ] search CaMeL Direction [
rank: 808
score: 98.51993815104167
patch: ++ 1 * iter ;
rank: 808
score: 98.47551935369319
patch: Set < Object > iter = iter . start ;
rank: 808
score: 98.33472696940105
patch: ++ iter - current ;
rank: 808
score: 97.85679931640625
patch: ++ -- 1 ;
rank: 809
score: 98.76978149414063
patch: r = search CaMeL Direction [ iter ] ;
rank: 809
score: 98.647705078125
patch: ++ point [ 0 ] ;
rank: 809
score: 98.63292778862848
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point ) ; ++ iter ;
rank: 809
score: 98.61569213867188
patch: point [ n ] = current ;
rank: 809
score: 98.57699924045139
patch: ++ iter ; double iter = 0 ;
rank: 809
score: 98.51751154119319
patch: ++ iter ; try ; int iter = iter ;
rank: 809
score: 98.47489013671876
patch: if ( iter < 0 ) return iter ;
rank: 809
score: 98.3342997233073
patch: state = ++ n ;
rank: 809
score: 97.84098052978516
patch: ++ iterator ;
rank: 810
score: 98.76926879882812
patch: Point CaMeL Value CaMeL Pair max = current ;
rank: 810
score: 98.71774727957589
patch: r [ max CaMeL Eval ] = ++ max CaMeL Eval ; ;
rank: 810
score: 98.64337836371527
patch: final Univariate CaMeL Function current = current ;
rank: 810
score: 98.63292020909927
patch: f = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 810
score: 98.61537170410156
patch: int max CaMeL Eval = null ;
rank: 810
score: 98.57692464192708
patch: while ( iter ; {
rank: 810
score: 98.4746426669034
patch: else { * * * * / ++ iter ;
rank: 810
score: 98.33216203962054
patch: ++ iter - iter ; ;
rank: 810
score: 97.83828735351562
patch: ++ n ; ;
rank: 811
score: 98.76796264648438
patch: Point CaMeL Value CaMeL Pair start = null ;
rank: 811
score: 98.71769205729167
patch: ++ max CaMeL Eval ++ ; r [ max CaMeL Eval ++ ] ;
rank: 811
score: 98.63278537326389
patch: return new Point CaMeL Value CaMeL Pair ( compute CaMeL Objective CaMeL Gradient ( point ) ;
rank: 811
score: 98.60569254557292
patch: final double [ ] point = null ;
rank: 811
score: 98.51704915364583
patch: ++ iter ; ++ iter ; for ++ ++ iter ;
rank: 811
score: 98.47303466796875
patch: else ++ iter ; if ++ iter ; }
rank: 811
score: 97.8245849609375
patch: iter } ++ ;
rank: 812
score: 98.71755642361111
patch: if ( iter > max CaMeL Eval )
rank: 812
score: 98.63210042317708
patch: other = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 812
score: 98.57466125488281
patch: ++ iter ; ++ iter ; final
rank: 812
score: 98.51689009232955
patch: ++ iter ; ++ iter ; if ( iter ;
rank: 812
score: 98.47301025390625
patch: if ( iter == 0 ; ++ length ;
rank: 812
score: 98.32805524553571
patch: ++ iter ; return new ;
rank: 812
score: 97.821826171875
patch: ++ ++ $NUMBER$ ;
rank: 813
score: 98.7607666015625
patch: Point CaMeL Value CaMeL Pair new = current ;
rank: 813
score: 98.71723284040179
patch: ++ max CaMeL Eval ; if ( max CaMeL Eval > 0 )
rank: 813
score: 98.63194580078125
patch: ( ( Point CaMeL Value CaMeL Pair ) steepest CaMeL Descent . clone ( ) ) .
rank: 813
score: 98.59931945800781
patch: double [ ] current = null ;
rank: 813
score: 98.5737533569336
patch: if ( iter <= n ) {
rank: 813
score: 98.5168789950284
patch: ++ iter ; ++ iter ; ++ * * ;
rank: 813
score: 98.47255859375
patch: if ( iter == 0 ; return ; }
rank: 813
score: 97.81991577148438
patch: ++ 1 ; ;
rank: 814
score: 98.71708170572917
patch: ++ max CaMeL Eval = ( Point CaMeL Value CaMeL Pair ) r ;
rank: 814
score: 98.63184311810662
patch: previous = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 814
score: 98.59831237792969
patch: double [ ] point = null ;
rank: 814
score: 98.57279968261719
patch: if ( ( true ) ) {
rank: 814
score: 98.51679021661931
patch: ++ iter ; ++ iter ; for iter ; }
rank: 814
score: 98.47218017578125
patch: else { / * * * / } /
rank: 814
score: 98.32789829799107
patch: while ( iter < iter )
rank: 814
score: 97.81474609375
patch: ; ++ iter ;
rank: 815
score: 98.71644810267857
patch: ++ max CaMeL Eval ++ ; ++ max CaMeL Eval ++ ; }
rank: 815
score: 98.63184271918402
patch: list = compute CaMeL Objective CaMeL Gradient ( point , 0 , initial CaMeL Step ) ;
rank: 815
score: 98.63131713867188
patch: delta [ 0 ] = current ;
rank: 815
score: 98.59786987304688
patch: if ( point , n ) {
rank: 815
score: 98.57170274522569
patch: iter = new double [ iter ] ;
rank: 815
score: 98.51624644886364
patch: / * ++ ++ * * / ++ iter ;
rank: 815
score: 98.47181285511364
patch: if ( iter < 0 ) return null ; }
rank: 815
score: 98.32697405133929
patch: j = iter - 1 ;
rank: 815
score: 97.79488525390624
patch: ++ - n ;
rank: 816
score: 98.71641710069444
patch: ++ iter ; System . arraycopy ( ;
rank: 816
score: 98.63156609786184
patch: current = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , r ) ;
rank: 816
score: 98.63054656982422
patch: if ( n <= 0 ) {
rank: 816
score: 98.59622531467014
patch: final double [ ] point = current ;
rank: 816
score: 98.57152557373047
patch: if ( iter > 1 ) {
rank: 816
score: 98.5159912109375
patch: ++ iter ; ++ iter + iter ; ++ iter ;
rank: 816
score: 98.47066650390624
patch: / * * * ++ * * * ;
rank: 816
score: 98.32552664620536
patch: while ( iter <= n )
rank: 817
score: 98.75245971679688
patch: switch ( point . length ( ) ) {
rank: 817
score: 98.71571451822916
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval < iter ;
rank: 817
score: 98.63007269965277
patch: result = compute CaMeL Objective CaMeL Gradient ( point , steepest CaMeL Descent ) ;
rank: 817
score: 98.62925889756944
patch: ++ max CaMeL Eval -= 0 ; {
rank: 817
score: 98.59434678819444
patch: final double [ ] current = current ;
rank: 817
score: 98.57117462158203
patch: synchronized ( update CaMeL Formula ) {
rank: 817
score: 98.47053833007813
patch: else { * * * * / * /
rank: 817
score: 98.32156372070312
patch: try { ++ n ;
rank: 817
score: 97.77938232421874
patch: public ++ iter ;
rank: 818
score: 98.74822998046875
patch: current = checker . converged ( iter ) ;
rank: 818
score: 98.71553039550781
patch: ++ max CaMeL Eval *= $NUMBER$ ;
rank: 818
score: 98.56724330357143
patch: ++ max CaMeL Eval ; }
rank: 818
score: 98.51528098366477
patch: ++ 1 ; ++ iter ; for ++ iter ;
rank: 818
score: 98.46974487304688
patch: else { / * * * / } }
rank: 818
score: 98.31869070870536
patch: if ( ! current . ;
rank: 818
score: 97.76481323242187
patch: ++ iter ++ ;
rank: 819
score: 98.71548897879464
patch: iter = new Point CaMeL Value CaMeL Pair ( r , iter ;
rank: 819
score: 98.62952378216912
patch: o = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 819
score: 98.62277560763889
patch: ++ max CaMeL Eval -= $NUMBER$ ; {
rank: 819
score: 98.56698947482639
patch: double delta = r [ 0 ] ;
rank: 819
score: 98.5150146484375
patch: ++ iter ; ++ * * iter ; break ;
rank: 819
score: 98.46941583806819
patch: / * * ++ * * / ++ iter ;
rank: 819
score: 98.31834920247395
patch: if ( ++ iter )
rank: 819
score: 97.752587890625
patch: ++ max ; else
rank: 820
score: 98.74140014648438
patch: Point CaMeL Value CaMeL Pair r = null ;
rank: 820
score: 98.71538899739583
patch: ++ max CaMeL Eval = Math . max ( iter , start ) ;
rank: 820
score: 98.62918429904514
patch: found = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 820
score: 98.58791097005208
patch: final int [ ] search CaMeL Direction ;
rank: 820
score: 98.565185546875
patch: ++ iter ; ++ iter ; {
rank: 820
score: 98.51429332386364
patch: ++ iter ; ++ iter ; ++ 1 ; }
rank: 820
score: 98.46913840553977
patch: if ( ! iter . equals ( iter ) )
rank: 820
score: 98.31582641601562
patch: ++ n - iter ;
rank: 820
score: 97.7415771484375
patch: iter iter
rank: 821
score: 98.62912166819854
patch: t = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 821
score: 98.58734809027777
patch: final double [ ] current = null ;
rank: 821
score: 98.51310221354167
patch: ++ iter ; ++ iter ; / * ++ iter ;
rank: 821
score: 98.46913840553977
patch: if ( iter == 0 ; while ; * /
rank: 821
score: 98.31202915736607
patch: if ( iter != 0 )
rank: 821
score: 97.734521484375
patch: iter ; ++ ;
rank: 822
score: 98.72764282226562
patch: Point CaMeL Value CaMeL Pair n = null ;
rank: 822
score: 98.62888470818015
patch: cur = new Line CaMeL Search CaMeL Function ( point , search CaMeL Direction ) ;
rank: 822
score: 98.58328247070312
patch: final double < point [ ] ;
rank: 822
score: 98.56275177001953
patch: while ( n < iter ) {
rank: 822
score: 98.51253255208333
patch: ++ iter ; ++ iter ; out ; ++ iter ;
rank: 822
score: 98.46884765625
patch: if ( [ 0 ] == ++ iter ;
rank: 822
score: 97.72847290039063
patch: ++ $NUMBER$ ; ;
rank: 823
score: 98.723193359375
patch: Point CaMeL Value CaMeL Pair value = null ;
rank: 823
score: 98.7125244140625
patch: return new Point CaMeL Value CaMeL Pair ( current , iter , iter ;
rank: 823
score: 98.62883843315973
patch: ret = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 823
score: 98.5118741122159
patch: / * ++ ++ * / / ++ iter ;
rank: 823
score: 98.4668212890625
patch: if ( iter == 0 ; / ; }
rank: 823
score: 98.30808803013393
patch: if ( iter >= n )
rank: 823
score: 97.72813720703125
patch: ++ - 0 ;
rank: 824
score: 98.71522827148438
patch: ++ iter ; final ++ max CaMeL Eval ;
rank: 824
score: 98.712255859375
patch: ++ max CaMeL Eval ++ ; if ( max CaMeL Eval < iter )
rank: 824
score: 98.62823845358456
patch: int point = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 824
score: 98.60672760009766
patch: ++ max CaMeL Eval = current ;
rank: 824
score: 98.57294573102679
patch: double < r [ ] ;
rank: 824
score: 98.55706787109375
patch: if ( delta < 0 ) {
rank: 824
score: 98.51158558238636
patch: ++ iter ; ++ * * * / iter ;
rank: 824
score: 98.46680797230114
patch: else { iter += 0 . 0 ; } }
rank: 824
score: 98.3072509765625
patch: while ( iter == current )
rank: 824
score: 97.71806640625
patch: iter ; iter ;
rank: 825
score: 98.7115966796875
patch: ++ iter ; return new Point CaMeL Value CaMeL Pair ( iter , ;
rank: 825
score: 98.62823127297794
patch: int max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , 1 ) ;
rank: 825
score: 98.6056137084961
patch: ++ max CaMeL Eval -= delta ;
rank: 825
score: 98.55683898925781
patch: int n = point . length ;
rank: 825
score: 98.5111971768466
patch: ++ iter ; ++ iter ; ++ value ; ;
rank: 825
score: 98.46634521484376
patch: if ( iter == 0 ; / * /
rank: 825
score: 98.30652727399554
patch: start = iter - 1 ;
rank: 825
score: 97.66732788085938
patch: iter ; else
rank: 826
score: 98.71009928385416
patch: result [ iter ] = new Point CaMeL Value CaMeL Pair ( iter ;
rank: 826
score: 98.62607709099265
patch: rs = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction ) ;
rank: 826
score: 98.56089782714844
patch: point [ n ] = 0 ;
rank: 826
score: 98.55636596679688
patch: int max CaMeL Eval = true ;
rank: 826
score: 98.5093994140625
patch: ++ iter ; ++ 1 ; ++ * * iter ;
rank: 826
score: 98.46529541015624
patch: if ( iter == 0 ; break ; else
rank: 826
score: 98.30546351841518
patch: ++ iter [ iter ] ;
rank: 826
score: 97.6632080078125
patch: ++ out ;
rank: 827
score: 98.7095947265625
patch: ++ max CaMeL Eval > 0 )
rank: 827
score: 98.70469360351562
patch: delta = search CaMeL Direction [ 0 ] ;
rank: 827
score: 98.62523057725694
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point [
rank: 827
score: 98.56058502197266
patch: int [ ] search CaMeL Direction ;
rank: 827
score: 98.50929768880208
patch: ++ iter ; ++ iter ; while ++ - iter ;
rank: 827
score: 98.2873026529948
patch: i ++ ; ++ ;
rank: 827
score: 97.6448974609375
patch: ++ name ;
rank: 828
score: 98.70956420898438
patch: ++ max CaMeL Eval >= 0 )
rank: 828
score: 98.70439453125
patch: Point CaMeL Value CaMeL Pair set = current ;
rank: 828
score: 98.62510172526042
patch: result = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , point ) ;
rank: 828
score: 98.60280354817708
patch: final double [ ] n = null ;
rank: 828
score: 98.55537414550781
patch: double delta = max CaMeL Eval ;
rank: 828
score: 98.55278778076172
patch: int [ ] r = current ;
rank: 828
score: 98.50795491536458
patch: ++ iter ; if iter + 0 ; ++ iter ;
rank: 828
score: 98.46352317116477
patch: if ( iter == null ; return iter ; }
rank: 828
score: 97.64305877685547
patch: iter else ;
rank: 829
score: 98.70950520833334
patch: ++ max CaMeL Eval = Math . max ( iter , max ) ;
rank: 829
score: 98.62470838758681
patch: y = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 829
score: 98.59688313802083
patch: while ( iter < point . length )
rank: 829
score: 98.55501556396484
patch: if ( checker != 0 ) {
rank: 829
score: 98.54803466796875
patch: if ( 0 < n ) {
rank: 829
score: 98.46166381835937
patch: Set iter = iter . iterator ++ ; else
rank: 829
score: 98.28401402064732
patch: while ( iter >= n )
rank: 829
score: 97.61892700195312
patch: ++ iter .
rank: 830
score: 98.70823567708334
patch: ++ max CaMeL Eval ++ ; System . out . ; iter = ;
rank: 830
score: 98.62448601973684
patch: result = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , n ) ;
rank: 830
score: 98.59629991319444
patch: ++ max CaMeL Eval -= 1 ; {
rank: 830
score: 98.55397542317708
patch: if ( false ) {
rank: 830
score: 98.54143524169922
patch: if ( n == n ) {
rank: 830
score: 98.5071309407552
patch: ++ iter ; ++ iter ; int * int iter ;
rank: 830
score: 98.46140358664773
patch: else { if ++ iter [ 1 ] ; }
rank: 830
score: 98.28154645647321
patch: temp = iter + iter ;
rank: 830
score: 97.5880126953125
patch: iter ; ;
rank: 831
score: 98.70755004882812
patch: ++ iter ; / * * ;
rank: 831
score: 98.6242446899414
patch: synchronized ( max CaMeL Eval ) {
rank: 831
score: 98.5528564453125
patch: while ( iter ; ; ) {
rank: 831
score: 98.50698852539062
patch: / * ] * / ++ iter ; ++ iter ;
rank: 831
score: 98.46134810014205
patch: else { ++ 0 ; } if ++ iter ;
rank: 831
score: 97.58746337890625
patch: ++ new ;
rank: 832
score: 98.70748901367188
patch: ++ iter * / * * /
rank: 832
score: 98.6240298622533
patch: Iterator max CaMeL Eval = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction ) ;
rank: 832
score: 98.59225463867188
patch: ++ max CaMeL Eval = null ;
rank: 832
score: 98.53411102294922
patch: double [ ] n = null ;
rank: 832
score: 98.50680541992188
patch: ++ iter ; ++ * int iter ; ++ iter ;
rank: 832
score: 98.46114095052083
patch: ++ ++ [ ] ;
rank: 832
score: 98.27872140066964
patch: ++ iter [ n ] ;
rank: 832
score: 97.56935119628906
patch: long iter ;
rank: 833
score: 98.70561000279018
patch: result [ iter ] = ;
rank: 833
score: 98.66600884331598
patch: delta += search CaMeL Direction . length ;
rank: 833
score: 98.62380499588816
patch: [ ] steepest CaMeL Descent = preconditioner . get ( point ) ;
rank: 833
score: 98.55248260498047
patch: if ( iter < true ) {
rank: 833
score: 98.53263092041016
patch: delta = r [ 0 ] ;
rank: 833
score: 98.50645862926136
patch: ++ * * ++ - iter ; ++ iter ;
rank: 833
score: 98.4608662923177
patch: / * ++ * /
rank: 833
score: 98.27863420758929
patch: j = iter + 1 ;
rank: 833
score: 97.54689025878906
patch: ++ * ;
rank: 834
score: 98.70399983723958
patch: ++ max CaMeL Eval -- ; * /
rank: 834
score: 98.52761404854911
patch: delta += r . length ;
rank: 834
score: 98.50632731119792
patch: ++ iter ; ++ iter ; else * ++ iter ;
rank: 834
score: 98.4604736328125
patch: if ( iter == 0 ; ++ 1 ;
rank: 834
score: 98.27130126953125
patch: ++ r [ iter ] ;
rank: 834
score: 97.53317260742188
patch: throw iter ;
rank: 835
score: 98.62222629123264
patch: return new Point CaMeL Value CaMeL Pair ( point , steepest CaMeL Descent ) ;
rank: 835
score: 98.54766845703125
patch: if ( ! update CaMeL Formula )
rank: 835
score: 98.50612571022727
patch: else ++ iter ; ++ * / ++ iter ;
rank: 835
score: 98.45933948863636
patch: / * * * * * / ++ iter ;
rank: 835
score: 97.49835205078125
patch: ++ ; iter
rank: 836
score: 98.62205103824013
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( point , r
rank: 836
score: 98.54316711425781
patch: if ( iter < 1 ) {
rank: 836
score: 98.50608132102273
patch: ++ iter ; ++ - 1 ; if iter ;
rank: 836
score: 98.45905151367188
patch: if ( iter > 0 ) break ; }
rank: 836
score: 97.47579956054688
patch: ++ point ;
rank: 837
score: 98.6220458984375
patch: result = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , search CaMeL Direction ) ;
rank: 837
score: 98.58148193359375
patch: if ( n <= n ) {
rank: 837
score: 98.5427017211914
patch: if ( iter % n ) {
rank: 837
score: 98.52112579345703
patch: point [ iter ] = null ;
rank: 837
score: 98.50543212890625
patch: ++ iter ; ++ iter ; break ; ++ iter ;
rank: 837
score: 98.45875854492188
patch: else { if ++ iter ; ++ iter ;
rank: 837
score: 97.46651458740234
patch: ++ break ;
rank: 838
score: 98.70025634765625
patch: ++ max CaMeL Eval >= 0 && ;
rank: 838
score: 98.6220458984375
patch: [ ] steepest CaMeL Descent = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 838
score: 98.54107666015625
patch: ++ max CaMeL Eval ; break ;
rank: 838
score: 98.50449625651042
patch: ++ iter ; ++ 1 ; int * ++ iter ;
rank: 838
score: 98.45757501775569
patch: if ( iter == 0 ) return null ; else
rank: 838
score: 98.26778157552083
patch: int n = 0 ;
rank: 838
score: 97.46444702148438
patch: iter iter else
rank: 839
score: 98.69849310980902
patch: ++ max CaMeL Eval -- ; if ;
rank: 839
score: 98.62192896792763
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( 0 ) ;
rank: 839
score: 98.50405051491477
patch: ++ iter ; ++ * ; ++ iter ; ;
rank: 839
score: 98.45659845525569
patch: else { iter * 0 . 0 ; * /
rank: 839
score: 98.25823974609375
patch: scope = ++ iter ;
rank: 839
score: 97.4500732421875
patch: ++ ; /
rank: 840
score: 98.69759368896484
patch: ++ iter ; if ( delta ;
rank: 840
score: 98.62166555304276
patch: [ ] steepest CaMeL Descent = preconditioner . precondition ( $NUMBER$ ) ;
rank: 840
score: 98.53541782924107
patch: final double delta = 0 ;
rank: 840
score: 98.51242065429688
patch: int [ ] r = null ;
rank: 840
score: 98.50360107421875
patch: ++ iter ; ++ - iter ; if ++ iter ;
rank: 840
score: 98.45652262369792
patch: / * ; * /
rank: 840
score: 98.25602213541667
patch: ++ n ; break ;
rank: 840
score: 97.43450927734375
patch: / iter ;
rank: 841
score: 98.62070826480263
patch: Point CaMeL Value CaMeL Pair current = compute CaMeL Objective CaMeL Gradient ( point , n ) ;
rank: 841
score: 98.51899065290179
patch: if ( checker != null )
rank: 841
score: 98.51185607910156
patch: delta += point [ n ] ;
rank: 841
score: 98.50269664417614
patch: else if ++ iter + iter ; ++ iter ;
rank: 841
score: 98.4552889737216
patch: if ( iter != 0 ) return iter ; }
rank: 841
score: 97.42611694335938
patch: / ; iter
rank: 842
score: 98.69519914899554
patch: ++ iter ; * / ;
rank: 842
score: 98.5621337890625
patch: double [ ] n = current ;
rank: 842
score: 98.5113525390625
patch: if ( iter . < n ) {
rank: 842
score: 98.50225275213069
patch: ++ iter ; ++ iter ; for ++ * /
rank: 842
score: 98.45512251420455
patch: else { if ++ iter [ $NUMBER$ ] ; }
rank: 842
score: 98.23534138997395
patch: ++ iter + delta ;
rank: 842
score: 97.4164810180664
patch: ++ iter /
rank: 843
score: 98.69515555245536
patch: ++ max CaMeL Eval += ;
rank: 843
score: 98.61875406901042
patch: p = compute CaMeL Objective CaMeL Gradient ( point , search CaMeL Direction , r ) ;
rank: 843
score: 98.61268615722656
patch: double [ ] iter = null ;
rank: 843
score: 98.56163787841797
patch: ++ point . length ( ) ;
rank: 843
score: 98.51801409040179
patch: if ( true ) { {
rank: 843
score: 98.5016581217448
patch: ++ iter ; ++ iter ; if ++ - iter ;
rank: 843
score: 98.4549560546875
patch: if ( iter > 0 ; return null ; }
rank: 843
score: 98.23439534505208
patch: ++ iter + $NUMBER$ ;
rank: 843
score: 97.40328216552734
patch: ++ iter *
rank: 844
score: 98.6181576377467
patch: return new Point CaMeL Value CaMeL Pair ( compute CaMeL Objective CaMeL Gradient ( iter ) ) ;
rank: 844
score: 98.61097717285156
patch: r = point [ iter ] ;
rank: 844
score: 98.51763916015625
patch: int iter = n ;
rank: 844
score: 98.50515747070312
patch: if ( iter == n ) {
rank: 844
score: 98.500732421875
patch: ++ * ++ iter ; ++ * / ++ iter ;
rank: 844
score: 98.4527254971591
patch: ++ [ ] iter ; } if ++ iter ;
rank: 844
score: 98.22482299804688
patch: final ; ++ iter ;
rank: 844
score: 97.39559936523438
patch: ++ delta ;
rank: 845
score: 98.60843234592014
patch: Point CaMeL Value CaMeL Pair = current ;
rank: 845
score: 98.55950927734375
patch: ++ iter ; delta += n ;
rank: 845
score: 98.5140380859375
patch: int max = 0 ;
rank: 845
score: 98.5
patch: ++ iter ; ++ * * ++ * ++ iter ;
rank: 845
score: 98.45108032226562
patch: * * ++ iter ;
rank: 845
score: 97.37692260742188
patch: int iter *
rank: 846
score: 98.69319661458333
patch: ++ max CaMeL Eval = iter ] ;
rank: 846
score: 98.61551063939145
patch: list = new Point CaMeL Value CaMeL Pair ( point , search CaMeL Direction , r ) ;
rank: 846
score: 98.60755750868056
patch: current = find CaMeL Upper CaMeL Bound (
rank: 846
score: 98.50880650111607
patch: final int iter = 0 ;
rank: 846
score: 98.4993184407552
patch: ++ iter ; ++ value ; ++ iter ; iter ;
rank: 846
score: 98.45051713423295
patch: / * * * / * / ++ iter ;
rank: 846
score: 98.22279866536458
patch: ++ iter ; do {
rank: 846
score: 97.35374450683594
patch: int 1 ;
rank: 847
score: 98.68935818142361
patch: ++ max CaMeL Eval = ; * /
rank: 847
score: 98.5
patch: while ( ++ iter ) {
rank: 847
score: 98.49843343098958
patch: ++ iter ; ++ iter ; for ++ - 1 ;
rank: 847
score: 98.49571990966797
patch: int max CaMeL Eval = false ;
rank: 847
score: 98.45033957741477
patch: else { iter += 0 . 0 ; break ;
rank: 847
score: 98.22164916992188
patch: temp = iter ;
rank: 847
score: 97.35295867919922
patch: } iter ;
rank: 848
score: 98.68896484375
patch: while ( iter <= r . length )
rank: 848
score: 98.55559539794922
patch: synchronized ( search CaMeL Direction ) {
rank: 848
score: 98.49819946289062
patch: ++ iter ; ++ iter ; ++ * ++ 1 ;
rank: 848
score: 98.49781290690105
patch: ++ point . length ;
rank: 848
score: 98.49455261230469
patch: iter = point [ 0 ] ;
rank: 848
score: 98.44971812855114
patch: else { / * * / ++ iter ; }
rank: 848
score: 98.2205098470052
patch: ++ iter - delta ;
rank: 848
score: 97.34081268310547
patch: int 0 ;
rank: 849
score: 98.68783569335938
patch: ++ iter ; * / * ;
rank: 849
score: 98.61046006944444
patch: ( iter < r . length ) {
rank: 849
score: 98.59831407335069
patch: if ( true ) { ++ n ;
rank: 849
score: 98.49765846946023
patch: ++ iter ; ++ value ; ++ iter ; ;
rank: 849
score: 98.49380929129464
patch: if ( point . length ;
rank: 849
score: 98.44921875
patch: Set < Object > iter = iter . iter ;
rank: 849
score: 98.2204081217448
patch: start = ++ iter ;
rank: 849
score: 97.33992767333984
patch: ++ * /
rank: 850
score: 98.6040267944336
patch: Iterator iter = max CaMeL Eval ;
rank: 850
score: 98.49165649414063
patch: while ( true )
rank: 850
score: 98.490234375
patch: int [ ] current = current ;
rank: 850
score: 98.44889692826705
patch: if ( iter == $NUMBER$ ; return iter ; }
rank: 850
score: 98.2171122233073
patch: ++ iter / n ;
rank: 850
score: 97.3258056640625
patch: ++ get ;
rank: 851
score: 98.68675885881696
patch: ++ iter ; for ; ;
rank: 851
score: 98.49704996744792
patch: ++ iter ; ++ iter ; this . iter ++ ;
rank: 851
score: 98.44844563802083
patch: else { ++ n ;
rank: 851
score: 98.2152608235677
patch: ret = ++ iter ;
rank: 851
score: 97.3184585571289
patch: int iter {
rank: 852
score: 98.68354034423828
patch: ++ max CaMeL Eval > iter ;
rank: 852
score: 98.49613444010417
patch: ++ 1 ; ++ iter ; ++ * ++ iter ;
rank: 852
score: 98.4865951538086
patch: point [ r ] = current ;
rank: 852
score: 98.48046003069196
patch: current = point . length ;
rank: 852
score: 98.4479092684659
patch: ++ [ ] [ ] iter = iter ; }
rank: 852
score: 97.31708526611328
patch: ++ / ;
rank: 853
score: 98.6827163696289
patch: ++ iter ; * iter * /
rank: 853
score: 98.58896891276042
patch: return new Point CaMeL Value CaMeL Pair (
rank: 853
score: 98.5456314086914
patch: if ( n >= 0 ) {
rank: 853
score: 98.49608265269886
patch: ++ iter ; if iter ; ++ - 1 ;
rank: 853
score: 98.48580932617188
patch: r [ iter ] = 0 ;
rank: 853
score: 98.47615269252232
patch: int ++ iter = 0 ;
rank: 853
score: 98.4436922940341
patch: if ( iter == 0 || iter == 0 ;
rank: 853
score: 98.21317545572917
patch: c = ++ iter ;
rank: 853
score: 97.30788167317708
patch: / ;
rank: 854
score: 98.68248833550348
patch: r [ iter ] = ++ max ;
rank: 854
score: 98.57794867621527
patch: if ( false ) { ++ iter ;
rank: 854
score: 98.49600219726562
patch: ++ iter ; ++ * * * * ++ iter ;
rank: 854
score: 98.47614397321429
patch: iter = point . length ;
rank: 854
score: 98.4423495205966
patch: try { ++ iter ; } catch ++ iter ;
rank: 854
score: 98.21168009440105
patch: ++ n + iter ;
rank: 854
score: 97.30601501464844
patch: ++ / /
rank: 855
score: 98.58331976996527
patch: ( iter < max CaMeL Eval ) {
rank: 855
score: 98.57309977213542
patch: delta = find CaMeL Upper CaMeL Bound (
rank: 855
score: 98.4957608309659
patch: ++ ++ iter ; if iter ; ++ iter ;
rank: 855
score: 98.48072052001953
patch: delta = r [ iter ] ;
rank: 855
score: 98.47219412667411
patch: while ( true ) { }
rank: 855
score: 98.44203879616477
patch: if ( iter == 0 ; while ++ iter ;
rank: 855
score: 98.19993082682292
patch: ++ iter / iter ;
rank: 855
score: 97.30525970458984
patch: iter / ;
rank: 856
score: 98.68183898925781
patch: iter = r [ iter ] ;
rank: 856
score: 98.54159109933036
patch: ++ ++ max CaMeL Eval ;
rank: 856
score: 98.49569702148438
patch: ++ $NUMBER$ ++ iter ;
rank: 856
score: 98.4774169921875
patch: final double < point . length ;
rank: 856
score: 98.46617635091145
patch: switch ( n ) {
rank: 856
score: 98.44068492542614
patch: if ( iter < iter ) return null ; }
rank: 856
score: 98.19771321614583
patch: ++ iter ; else {
rank: 856
score: 97.30354309082031
patch: else ; iter
rank: 857
score: 98.68056911892361
patch: ++ max CaMeL Eval = ++ n ;
rank: 857
score: 98.56944444444444
patch: int ++ iter = max CaMeL Eval ;
rank: 857
score: 98.49551391601562
patch: ++ iter ; ++ iter ; for iter ; break ;
rank: 857
score: 98.4403963955966
patch: else { if ++ iter ; ++ iter ; }
rank: 857
score: 98.18540445963542
patch: f = ++ iter ;
rank: 857
score: 97.30131530761719
patch: ++ - ;
rank: 858
score: 98.56544494628906
patch: ( iter < r . length )
rank: 858
score: 98.49468439275569
patch: ++ iter ; iter ; * / if iter ;
rank: 858
score: 98.47254180908203
patch: iter = point [ n ] ;
rank: 858
score: 98.4583251953125
patch: ++ iter ; final
rank: 858
score: 98.43813069661458
patch: else { ++ $NUMBER$ ;
rank: 858
score: 98.18102010091145
patch: state = ++ current ;
rank: 858
score: 97.29357147216797
patch: -- iter ;
rank: 859
score: 98.67893981933594
patch: r [ iter ] = ; }
rank: 859
score: 98.5592041015625
patch: double [ ] iter = current ;
rank: 859
score: 98.49432927911931
patch: ++ iter ; ++ - * / int iter ;
rank: 859
score: 98.47199249267578
patch: int point [ ] = current ;
rank: 859
score: 98.43643798828126
patch: i ++ ; }
rank: 859
score: 98.18062337239583
patch: if ( ++ iter ;
rank: 859
score: 97.28875732421875
patch: iter else
rank: 860
score: 98.4932861328125
patch: ++ iter ; ++ iter ; if iter ; iter ;
rank: 860
score: 98.4356689453125
patch: if ( iter > 0 ; return ++ iter ;
rank: 860
score: 98.16611735026042
patch: current = ++ n ;
rank: 860
score: 97.28440856933594
patch: ++ in ;
rank: 861
score: 98.67821587456598
patch: ++ max CaMeL Eval = get ; ;
rank: 861
score: 98.55320739746094
patch: delta += r [ current ] ;
rank: 861
score: 98.53809356689453
patch: ( iter < max CaMeL Eval )
rank: 861
score: 98.53043365478516
patch: current = point [ 0 ] ;
rank: 861
score: 98.49310302734375
patch: ++ iter ; * * * / / ++ iter ;
rank: 861
score: 98.44031633649554
patch: if ( ! true ) {
rank: 861
score: 98.43512517755681
patch: else { iter += iter [ 0 ] ; }
rank: 861
score: 98.16578165690105
patch: temp = ++ n ;
rank: 861
score: 97.2809066772461
patch: ++ ; *
rank: 862
score: 98.53439331054688
patch: synchronized ( checker . converged ) {
rank: 862
score: 98.5255126953125
patch: current = r [ 0 ] ;
rank: 862
score: 98.49305308948864
patch: ++ iter ; ++ iter ; for ++ * ;
rank: 862
score: 98.4344815340909
patch: ++ iter ; if ++ [ 0 ] ; }
rank: 862
score: 98.43389020647321
patch: while ( true ) break ;
rank: 862
score: 98.15572102864583
patch: ++ n + 1 ;
rank: 862
score: 97.2607421875
patch: iter else iter
rank: 863
score: 98.67711046006944
patch: ++ iter ; while ( iter ; )
rank: 863
score: 98.52714708116319
patch: result = compute CaMeL Objective CaMeL Gradient (
rank: 863
score: 98.5238037109375
patch: while ( 0 < n ) {
rank: 863
score: 98.49245383522727
patch: ++ value ; ++ iter ; ++ iter ; ;
rank: 863
score: 98.45751081194196
patch: final double [ ] point ;
rank: 863
score: 98.43214000355114
patch: if ( iter != 0 ; return iter ; }
rank: 863
score: 98.43194580078125
patch: int iter = 1 ;
rank: 863
score: 98.15191650390625
patch: key = ++ iter ;
rank: 863
score: 97.23342895507812
patch: ++ stop ;
rank: 864
score: 98.67662048339844
patch: ++ max CaMeL Eval <= 0 )
rank: 864
score: 98.52573649088542
patch: super . do CaMeL Optimize ( ) ;
rank: 864
score: 98.51934814453125
patch: double [ ] delta = null ;
rank: 864
score: 98.49210611979167
patch: ++ iter ; ++ * * ++ * - iter ;
rank: 864
score: 98.42983176491477
patch: else { if ++ iter - 0 . 0 ;
rank: 864
score: 98.42825753348214
patch: ++ iter ; final else {
rank: 864
score: 98.15111287434895
patch: ++ iter + current ;
rank: 864
score: 97.21896362304688
patch: iter -- ;
rank: 865
score: 98.67625596788194
patch: Iterator iter = iter . iterator ( ;
rank: 865
score: 98.52019585503473
patch: if ( iter <= point . length )
rank: 865
score: 98.51653289794922
patch: ++ max CaMeL Eval -= true ;
rank: 865
score: 98.49181111653645
patch: ++ iter ; ++ * ++ iter ; if iter ;
rank: 865
score: 98.45313371930804
patch: double < point [ ] ;
rank: 865
score: 98.42945445667614
patch: ++ [ ] iter ++ ; if ++ iter ;
rank: 865
score: 98.42636544363839
patch: int < double [ ] ;
rank: 865
score: 98.14732869466145
patch: current = ++ current ;
rank: 865
score: 97.19773356119792
patch: ++ ;
rank: 866
score: 98.4911397298177
patch: i * ++ ; / * * / ++ iter ;
rank: 866
score: 98.14628092447917
patch: ++ n ; if ;
rank: 866
score: 97.19387817382812
patch: ++ min ;
rank: 867
score: 98.51272583007812
patch: if ( point [ 0 ] ;
rank: 867
score: 98.4908114346591
patch: ++ iter ; while iter ; while ++ iter ;
rank: 867
score: 98.4281893643466
patch: ++ [ ] iter = iter ; while ; }
rank: 867
score: 98.40130615234375
patch: final double iter = n ;
rank: 867
score: 98.1422627766927
patch: t = ++ iter ;
rank: 867
score: 97.18958282470703
patch: for iter {
rank: 868
score: 98.67403411865234
patch: ++ iter ; iter += iter ;
rank: 868
score: 98.51018524169922
patch: if ( iter == 1 ) {
rank: 868
score: 98.50872802734375
patch: long max CaMeL Eval = 0 ;
rank: 868
score: 98.4906338778409
patch: ++ iter ; if ++ iter ; while iter ;
rank: 868
score: 98.44438171386719
patch: i = point [ 0 ] ;
rank: 868
score: 98.42531127929688
patch: if ( iter ;
rank: 868
score: 98.39739118303571
patch: if ( true ) { }
rank: 868
score: 98.14225260416667
patch: ++ iter - $NUMBER$ ;
rank: 868
score: 97.18605041503906
patch: ++ $STRING$ /
rank: 869
score: 98.67303466796875
patch: result [ iter ] = current ;
rank: 869
score: 98.49017333984375
patch: } ++ ++ iter ;
rank: 869
score: 98.44100516183036
patch: delta += current . length ;
rank: 869
score: 98.3956807454427
patch: switch ( true ) {
rank: 869
score: 98.13960774739583
patch: current = iter 1 ;
rank: 869
score: 97.17449951171875
patch: int iter ++
rank: 870
score: 98.50734165736607
patch: ++ max CaMeL Eval ; {
rank: 870
score: 98.50174289279514
patch: int ++ iter = point . length ;
rank: 870
score: 98.489501953125
patch: ++ iter ; / * * / / iter ;
rank: 870
score: 98.43936157226562
patch: int point = point . length ;
rank: 870
score: 98.41073608398438
patch: / * / * /
rank: 870
score: 98.13529968261719
patch: n -- ;
rank: 870
score: 97.1640625
patch: iter ; *
rank: 871
score: 98.66969299316406
patch: ++ max CaMeL Eval += $NUMBER$ ;
rank: 871
score: 98.4891024502841
patch: ++ iter ; ++ value ; ++ iter ; }
rank: 871
score: 98.43641008649554
patch: for ( ++ iter ) {
rank: 871
score: 98.39027622767857
patch: while ( true ) continue ;
rank: 871
score: 98.13433837890625
patch: if ( current == ;
rank: 871
score: 97.16337585449219
patch: ++ compare ;
rank: 872
score: 98.66716003417969
patch: ++ max CaMeL Eval ] = ;
rank: 872
score: 98.48888142903645
patch: ++ iter ; ++ iter ; ++ iter ; ; ;
rank: 872
score: 98.43582916259766
patch: if ( n >= n ) {
rank: 872
score: 98.3839111328125
patch: steepest CaMeL Descent .
rank: 872
score: 97.1615982055664
patch: ++ ; else
rank: 873
score: 98.66348266601562
patch: ++ iter ] = ++ iter ;
rank: 873
score: 98.48988172743056
patch: Iterator < Point CaMeL Value CaMeL Pair )
rank: 873
score: 98.43370056152344
patch: int [ ] point = current ;
rank: 873
score: 98.39480590820312
patch: else { ++ start ;
rank: 873
score: 98.38267299107143
patch: while ( true ) { ;
rank: 873
score: 98.1195068359375
patch: event = ++ iter ;
rank: 873
score: 97.1555404663086
patch: ++ super .
rank: 874
score: 98.66064453125
patch: ++ max CaMeL Eval <= n ;
rank: 874
score: 98.48969268798828
patch: Iterator iter = search CaMeL Direction ;
rank: 874
score: 98.38262939453125
patch: else if ++ 0 ;
rank: 874
score: 98.11842854817708
patch: root = ++ iter ;
rank: 874
score: 97.15381622314453
patch: if iter ]
rank: 875
score: 98.66059875488281
patch: current = ++ max CaMeL Eval ;
rank: 875
score: 98.4964370727539
patch: current = r [ iter ] ;
rank: 875
score: 98.48711603338069
patch: ++ iter ; ++ * * ++ iter ; }
rank: 875
score: 98.38218180338542
patch: / * * / }
rank: 875
score: 98.37608119419643
patch: if ( ! false ) {
rank: 875
score: 98.1140645345052
patch: n = ++ iter ;
rank: 875
score: 97.13607788085938
patch: break ; ;
rank: 876
score: 98.48679421164773
patch: ++ iter ; ++ iter ; int * / ;
rank: 876
score: 98.48460557725694
patch: [ ] search CaMeL Direction = 0 ;
rank: 876
score: 98.40633719308036
patch: int max CaMeL Eval -- ;
rank: 876
score: 98.37908935546875
patch: / * * ; /
rank: 876
score: 98.1136474609375
patch: sp = ++ iter ;
rank: 876
score: 97.13084411621094
patch: ++ $STRING$ *
rank: 877
score: 98.65930938720703
patch: for ( ; ; ; ) {
rank: 877
score: 98.48653157552083
patch: ++ iter ; ++ iter ; ++ for ++ iter ;
rank: 877
score: 98.47982788085938
patch: if ( true )
rank: 877
score: 98.37872314453125
patch: ++ ++ iter ; }
rank: 877
score: 98.37378801618304
patch: if ( < n ) {
rank: 877
score: 98.10921223958333
patch: in = ++ iter ;
rank: 877
score: 97.1170425415039
patch: iter ; /
rank: 878
score: 98.49176897321429
patch: current = current . current ;
rank: 878
score: 98.48586203835227
patch: ++ iter ; ++ iter ; } int iter ;
rank: 878
score: 98.40033830915179
patch: int max CaMeL Eval ++ ;
rank: 878
score: 98.37598673502605
patch: / * * / /
rank: 878
score: 98.37022181919643
patch: iter = r . length ;
rank: 878
score: 98.10678100585938
patch: assert iter >= 0 ;
rank: 878
score: 97.11659240722656
patch: ++ $NUMBER$ /
rank: 879
score: 98.49095153808594
patch: Point CaMeL Value CaMeL Pair -- ;
rank: 879
score: 98.48579915364583
patch: ++ iter ; ++ iter ; ++ start ; iter ;
rank: 879
score: 98.47732107979911
patch: iter = max CaMeL Eval ;
rank: 879
score: 98.39392961774554
patch: final double n = 0 ;
rank: 879
score: 98.37320963541667
patch: } if ++ 0 ;
rank: 879
score: 98.36041259765625
patch: while ( iter ;
rank: 879
score: 97.0914535522461
patch: ++ default ;
rank: 880
score: 98.64451381138393
patch: ++ iter ] = iter ;
rank: 880
score: 98.4852803548177
patch: ++ iter ; ++ iter ; ++ while ++ iter ;
rank: 880
score: 98.47251383463542
patch: ( ++ iter ) {
rank: 880
score: 98.35915120442708
patch: if ( converged ) {
rank: 880
score: 98.10007731119792
patch: cached = ++ iter ;
rank: 880
score: 97.07223510742188
patch: iter iter iter
rank: 881
score: 98.48505193536931
patch: ++ iter ; ++ * / ++ iter ; }
rank: 881
score: 98.4645767211914
patch: int max CaMeL Eval = current ;
rank: 881
score: 98.43260846819196
patch: double CaMeL Value = 0 ;
rank: 881
score: 98.38837541852679
patch: final double [ ] r ;
rank: 881
score: 98.3692626953125
patch: / * += iter ;
rank: 881
score: 98.35869489397321
patch: while ( false ) { {
rank: 881
score: 98.09958902994792
patch: this . ++ iter ;
rank: 881
score: 97.06776428222656
patch: / ; else
rank: 882
score: 98.63071986607143
patch: ++ max CaMeL Eval % ;
rank: 882
score: 98.48475138346355
patch: ++ iter ; ++ iter ; int iter * ++ ;
rank: 882
score: 98.47948455810547
patch: ++ iter ; current = null ;
rank: 882
score: 98.462158203125
patch: Object current = current ;
rank: 882
score: 98.37289864676339
patch: final if ( true ) {
rank: 882
score: 98.3607177734375
patch: / * * ++ /
rank: 882
score: 98.35702950613839
patch: final double max = 0 ;
rank: 882
score: 97.06529744466145
patch: } iter
rank: 883
score: 98.62967354910714
patch: ++ max ; iter ++ ;
rank: 883
score: 98.48417154947917
patch: ++ iter ; ++ * / iter ; ++ iter ;
rank: 883
score: 98.44390869140625
patch: Iterator < Univariate CaMeL Function ) {
rank: 883
score: 98.35833740234375
patch: else return iter ; }
rank: 883
score: 98.09623209635417
patch: ++ iter - start ;
rank: 883
score: 97.06331634521484
patch: int iter iter
rank: 884
score: 98.62427629743304
patch: iter += iter + iter ;
rank: 884
score: 98.48355102539062
patch: ++ iter ; ++ iter ; int iter * iter ;
rank: 884
score: 98.4735107421875
patch: ++ max CaMeL Eval += 0 ;
rank: 884
score: 98.44070434570312
patch: ( true ) { ++ iter ;
rank: 884
score: 98.40408761160714
patch: if ( checker == null )
rank: 884
score: 98.37259347098214
patch: ++ while ( true ) {
rank: 884
score: 98.35552978515625
patch: if ; ++ 0 ;
rank: 884
score: 98.35523478190105
patch: int delta = 0 ;
rank: 884
score: 98.093017578125
patch: input = ++ iter ;
rank: 884
score: 97.0595474243164
patch: boolean iter ;
rank: 885
score: 98.61684744698661
patch: ++ max CaMeL Eval 0 ;
rank: 885
score: 98.48333740234375
patch: ++ iter ; / * * * / ++ iter ;
rank: 885
score: 98.43876139322917
patch: int iter = true ;
rank: 885
score: 98.35316162109375
patch: ++ 0 ; }
rank: 885
score: 98.09109497070312
patch: ++ iter & iter ;
rank: 885
score: 97.05887603759766
patch: ++ insert ;
rank: 886
score: 98.48307661576705
patch: ++ iter ; ++ iter ; ++ start ; ;
rank: 886
score: 98.47285461425781
patch: delta += r [ r ] ;
rank: 886
score: 98.43829345703125
patch: synchronized ( preconditioner )
rank: 886
score: 98.37108503069196
patch: final double point = 0 ;
rank: 886
score: 98.34589233398438
patch: ++ n ; }
rank: 886
score: 98.0889180501302
patch: other = ++ iter ;
rank: 886
score: 97.052734375
patch: int $NUMBER$ ;
rank: 887
score: 98.60677664620536
patch: ++ max CaMeL Eval ] ;
rank: 887
score: 98.482666015625
patch: i * ++ ; ++ iter ; int * /
rank: 887
score: 98.44509887695312
patch: current = current ;
rank: 887
score: 98.43808419363839
patch: int ++ iter = iter ;
rank: 887
score: 98.37038167317708
patch: int point = 0 ;
rank: 887
score: 98.33995564778645
patch: else { ++ length ;
rank: 887
score: 97.04814147949219
patch: ++ clone ;
rank: 888
score: 98.60334123883929
patch: ++ iter ; iter = ;
rank: 888
score: 98.48265491832386
patch: ++ iter ; ++ - 1 ; int iter ;
rank: 888
score: 98.4259033203125
patch: if ( ++ iter < n ;
rank: 888
score: 98.3369649251302
patch: else return null ; }
rank: 888
score: 98.0855204264323
patch: long iter = 0 ;
rank: 888
score: 97.0447006225586
patch: ++ sum ;
rank: 889
score: 98.4822998046875
patch: / * ++ iter ; / * / ++ iter ;
rank: 889
score: 98.42280796595982
patch: iter += point . length ;
rank: 889
score: 98.39236014229911
patch: delta += point . length ;
rank: 889
score: 98.36787632533482
patch: final double start = 0 ;
rank: 889
score: 98.33616129557292
patch: if ++ iter ; }
rank: 889
score: 98.31174723307292
patch: if ( iter ) {
rank: 889
score: 98.08390299479167
patch: result = ++ n ;
rank: 889
score: 97.043701171875
patch: = iter ;
rank: 890
score: 98.4817227450284
patch: ++ iter ; / * * ++ * / /
rank: 890
score: 98.33123779296875
patch: return new ++ iter ;
rank: 890
score: 98.311279296875
patch: int start = 0 ;
rank: 890
score: 98.08292643229167
patch: ++ iter ^ iter ;
rank: 890
score: 97.03296661376953
patch: int n ;
rank: 891
score: 98.48067220052083
patch: ++ iter ; ++ iter ; / * / iter ;
rank: 891
score: 98.41939086914063
patch: i = iter ;
rank: 891
score: 98.35990397135417
patch: int max CaMeL Eval ;
rank: 891
score: 98.32950846354167
patch: else { * * /
rank: 891
score: 98.3065185546875
patch: double max = 0 ;
rank: 891
score: 97.02796173095703
patch: ++ System ;
rank: 892
score: 98.5814697265625
patch: ++ iter * /
rank: 892
score: 98.4798583984375
patch: ++ iter ; ++ iter ; for ++ iter ; ;
rank: 892
score: 98.359375
patch: point [ ] = current ;
rank: 892
score: 98.35398646763393
patch: final double length = 0 ;
rank: 892
score: 98.3280029296875
patch: else { / * /
rank: 892
score: 98.29568481445312
patch: while ( ; ) {
rank: 892
score: 97.01298522949219
patch: ++ split ;
rank: 893
score: 98.47866821289062
patch: ++ iter ; ++ iter ; System . max ++ ;
rank: 893
score: 98.40795135498047
patch: ( iter <= point . length )
rank: 893
score: 98.35230364118304
patch: if ( n == 0 )
rank: 893
score: 98.35147530691964
patch: Iterator < double [ ] ;
rank: 893
score: 98.32477416992188
patch: else return iter ;
rank: 893
score: 98.29178873697917
patch: double iter = n ;
rank: 893
score: 98.07864379882812
patch: i ++ ;
rank: 893
score: 97.0051040649414
patch: ++ trim ;
rank: 894
score: 98.47862659801136
patch: ++ iter ; ++ 0 ; ++ iter ; ;
rank: 894
score: 98.40366036551339
patch: i = max CaMeL Eval ;
rank: 894
score: 98.34914143880208
patch: ++ iter ; { {
rank: 894
score: 98.34769694010417
patch: if ( point ) {
rank: 894
score: 98.32352701822917
patch: int [ ] iter ;
rank: 894
score: 98.28721110026042
patch: while ( iter ) {
rank: 894
score: 98.078125
patch: max CaMeL Eval -- ;
rank: 894
score: 97.00503540039062
patch: int iter /
rank: 895
score: 98.56828962053571
patch: ++ max CaMeL Eval *= ;
rank: 895
score: 98.47822709517045
patch: ++ iter ; ++ iter ; iter ; / ;
rank: 895
score: 98.34713309151786
patch: point [ point . length ;
rank: 895
score: 98.316748046875
patch: else ++ n ;
rank: 895
score: 98.2861328125
patch: synchronized ( true ) {
rank: 895
score: 97.00257110595703
patch: if iter :
rank: 896
score: 98.56800188337054
patch: ++ max CaMeL Eval <= ;
rank: 896
score: 98.4778544108073
patch: ++ iter ; ++ iter ; if iter ; break ;
rank: 896
score: 98.37675258091518
patch: i = point . length ;
rank: 896
score: 98.34346226283482
patch: ++ point [ iter ] ;
rank: 896
score: 98.33073120117187
patch: r = current ;
rank: 896
score: 98.31297810872395
patch: ++ $NUMBER$ * iter ;
rank: 896
score: 98.27670288085938
patch: int r = 0 ;
rank: 896
score: 97.00237274169922
patch: double iter ;
rank: 897
score: 98.566650390625
patch: ++ max CaMeL Eval > ;
rank: 897
score: 98.47770182291667
patch: else * ++ iter ; ++ iter ; ++ iter ;
rank: 897
score: 98.37635803222656
patch: < max CaMeL Eval - 0 )
rank: 897
score: 98.32866559709821
patch: r = current . current ;
rank: 897
score: 98.311474609375
patch: else return null ;
rank: 897
score: 98.2758280436198
patch: double start = 0 ;
rank: 897
score: 98.07169596354167
patch: int current = 0 ;
rank: 897
score: 96.9897689819336
patch: ++ read ;
rank: 898
score: 98.4772616299716
patch: ++ iter ; ++ iter ; case - 1 ;
rank: 898
score: 98.37507847377232
patch: size += point . length ;
rank: 898
score: 98.30659993489583
patch: for ; * * /
rank: 898
score: 98.06842041015625
patch: int iter = iter )
rank: 898
score: 96.98848724365234
patch: ++ matches ;
rank: 899
score: 98.47714233398438
patch: i ; ++ iter ;
rank: 899
score: 98.29933675130208
patch: ++ [ ] max ;
rank: 899
score: 98.06692504882812
patch: ++ iter >= 0 ;
rank: 899
score: 96.98682403564453
patch: ++ exit ;
rank: 900
score: 98.4753926595052
patch: ++ iter ; ++ iter ; ++ * iter ; ;
rank: 900
score: 98.31624930245536
patch: ++ iter ) { delta ;
rank: 900
score: 98.30601283482143
patch: max CaMeL Eval -= 0 ;
rank: 900
score: 98.2948506673177
patch: else if ++ 1 ;
rank: 900
score: 98.24472045898438
patch: int iter = $NUMBER$ ;
rank: 900
score: 98.06589762369792
patch: fg = ++ iter ;
rank: 900
score: 96.98676300048828
patch: int list ;
rank: 901
score: 98.4746602376302
patch: else if ++ iter ; ++ iter ; ++ iter ;
rank: 901
score: 98.36832682291667
patch: synchronized ( iter ) {
rank: 901
score: 98.30363246372768
patch: current = current . point ;
rank: 901
score: 98.0652364095052
patch: it = ++ iter ;
rank: 901
score: 96.98587036132812
patch: int max ;
rank: 902
score: 98.47426350911458
patch: ++ iter ; ++ 0 ; ++ * ++ iter ;
rank: 902
score: 98.35616629464286
patch: synchronized ( update CaMeL Formula )
rank: 902
score: 98.31143624441964
patch: ++ < point . length ;
rank: 902
score: 98.291259765625
patch: else { ++ max ;
rank: 902
score: 98.2365010579427
patch: double point = 0 ;
rank: 902
score: 96.61415608723958
patch: else iter
rank: 903
score: 98.47425333658855
patch: this . ++ iter ; ++ iter ; int iter ;
rank: 903
score: 98.29433768136161
patch: max CaMeL Eval -= $NUMBER$ ;
rank: 903
score: 98.290771484375
patch: / * * ++ ;
rank: 903
score: 98.22957356770833
patch: int max = n ;
rank: 903
score: 98.06204223632812
patch: synchronized ( ++ iter )
rank: 903
score: 96.60804239908855
patch: else ;
rank: 904
score: 98.4734598795573
patch: ++ * * iter ; ++ iter ; ++ iter ;
rank: 904
score: 98.27957153320312
patch: ++ iter ; ) {
rank: 904
score: 98.21543375651042
patch: double n = 0 ;
rank: 904
score: 98.05757649739583
patch: int n = 1 ;
rank: 904
score: 96.52955118815105
patch: break ;
rank: 905
score: 98.52233014787946
patch: ++ max CaMeL Eval + ;
rank: 905
score: 98.47291056315105
patch: ++ iter ; while iter + 0 ; ++ iter ;
rank: 905
score: 98.34194946289062
patch: synchronized ( point ) {
rank: 905
score: 98.28692626953125
patch: final double delta = $NUMBER$ ;
rank: 905
score: 98.28628540039062
patch: / * = iter ;
rank: 905
score: 98.26612200055804
patch: if ( true ) break ;
rank: 905
score: 96.503173828125
patch: /
rank: 906
score: 98.52176339285714
patch: if ( iter != null ;
rank: 906
score: 98.47278849283855
patch: ++ iter ; else * ++ iter ; ++ iter ;
rank: 906
score: 98.28433227539062
patch: if ( iter ; }
rank: 906
score: 98.27780587332589
patch: if ( checker . converged (
rank: 906
score: 98.05401611328125
patch: ++ iter ; current ;
rank: 906
score: 96.48240152994792
patch: ++ iter
rank: 907
score: 98.51405552455357
patch: r [ iter ] ++ ;
rank: 907
score: 98.47249348958333
patch: ++ iter ; ++ iter ; this . iter iter ;
rank: 907
score: 98.28414916992188
patch: / * * ; }
rank: 907
score: 98.25345284598214
patch: int -- iter = 0 ;
rank: 907
score: 98.20589192708333
patch: ++ r . length ;
rank: 907
score: 98.05130004882812
patch: current = iter . ;
rank: 907
score: 96.46451822916667
patch: / iter
rank: 908
score: 98.51218668619792
patch: ++ max CaMeL Memory ;
rank: 908
score: 98.47220865885417
patch: ++ iter ; ++ * * ++ iter ; break ;
rank: 908
score: 98.31446533203125
patch: result = current ;
rank: 908
score: 98.2391357421875
patch: i = 0 ;
rank: 908
score: 98.22525024414062
patch: ++ iter ; { ;
rank: 908
score: 98.1987813313802
patch: double iter = 1 ;
rank: 908
score: 98.05099487304688
patch: ++ n - n ;
rank: 908
score: 96.28787994384766
patch: 
rank: 909
score: 98.51162283761161
patch: ++ max CaMeL Eval iter ;
rank: 909
score: 98.30878557477679
patch: synchronized ( max CaMeL Eval )
rank: 909
score: 98.2704569498698
patch: preconditioner .
rank: 909
score: 98.2663330078125
patch: return iter ; }
rank: 909
score: 98.19774373372395
patch: while ( 1 ) {
rank: 909
score: 98.05088806152344
patch: n ++ ;
rank: 909
score: 96.2647705078125
patch: ++ else
rank: 910
score: 98.4713134765625
patch: ++ iter ; ++ iter ; / * * ; /
rank: 910
score: 98.29921177455357
patch: synchronized ( checker . converged )
rank: 910
score: 98.26434326171875
patch: final double iter = $NUMBER$ ;
rank: 910
score: 98.18544514973958
patch: int iter = false ;
rank: 910
score: 98.18055216471355
patch: ++ ++ iter ; {
rank: 910
score: 98.05029296875
patch: if ( ! ;
rank: 910
score: 96.25258382161458
patch: { iter
rank: 911
score: 98.50461251395089
patch: r [ max CaMeL Eval ;
rank: 911
score: 98.29664103190105
patch: i = ++ iter ;
rank: 911
score: 98.25843302408855
patch: double delta = $NUMBER$ ;
rank: 911
score: 98.2301025390625
patch: ++ 1 ; }
rank: 911
score: 98.183837890625
patch: if ( checker ) {
rank: 911
score: 98.05020751953126
patch: switch ( iter )
rank: 911
score: 96.21846008300781
patch: ++
rank: 912
score: 98.50081089564732
patch: ++ iter ; * iter ;
rank: 912
score: 98.29378836495536
patch: max CaMeL Eval -= iter ;
rank: 912
score: 98.23489990234376
patch: delta = 0 ;
rank: 912
score: 98.22999267578125
patch: else ++ 0 ;
rank: 912
score: 98.17684936523438
patch: ++ n ; {
rank: 912
score: 96.14429728190105
patch: continue ;
rank: 913
score: 98.49840436662946
patch: ++ iter ; synchronized ( ;
rank: 913
score: 98.29341634114583
patch: synchronized ( r ) {
rank: 913
score: 98.20537109375
patch: } return iter ;
rank: 913
score: 96.10269165039062
patch: ++ do
rank: 914
score: 98.49577113560268
patch: ++ iter ; if ; ;
rank: 914
score: 98.28803362165179
patch: Iterator < Univariate CaMeL Function )
rank: 914
score: 98.19795227050781
patch: / * ;
rank: 914
score: 98.19781494140625
patch: int length = 0 ;
rank: 914
score: 98.16851806640625
patch: ++ iter ; final else
rank: 914
score: 98.16510009765625
patch: synchronized ( checker ) {
rank: 914
score: 98.0386962890625
patch: start = - 1 ;
rank: 914
score: 96.08619181315105
patch: ++ Math
rank: 915
score: 98.49568394252232
patch: iter += iter + 1 ;
rank: 915
score: 98.16615804036458
patch: ++ iter ; delta ;
rank: 915
score: 98.15928141276042
patch: int iter = null ;
rank: 915
score: 98.03544108072917
patch: max CaMeL Eval ++ ;
rank: 915
score: 96.06814575195312
patch: iter }
rank: 916
score: 98.43825276692708
patch: ++ 1 - iter ;
rank: 916
score: 98.1909423828125
patch: delta += $NUMBER$ ;
rank: 916
score: 98.18173828125
patch: * * * ;
rank: 916
score: 98.15728759765625
patch: double current = 0 ;
rank: 916
score: 98.03179931640625
patch: iter = ++ n ;
rank: 916
score: 95.9984130859375
patch: ; iter
rank: 917
score: 98.49355643136161
patch: if ( iter <= iter )
rank: 917
score: 98.43770345052083
patch: else iter * ++ ;
rank: 917
score: 98.17740478515626
patch: i -- ; }
rank: 917
score: 98.15491739908855
patch: double iter = true ;
rank: 917
score: 95.98179117838542
patch: this ;
rank: 918
score: 98.49165852864583
patch: iter = iter . ;
rank: 918
score: 98.27672322591145
patch: [ ] ++ iter ;
rank: 918
score: 98.16566467285156
patch: else { }
rank: 918
score: 98.16005859375
patch: ++ [ ] ;
rank: 918
score: 98.15195719401042
patch: double r = 0 ;
rank: 918
score: 98.01369018554688
patch: tmp = iter ;
rank: 918
score: 95.96615600585938
patch: ++ super
rank: 919
score: 98.49129813058036
patch: iter += iter * iter ;
rank: 919
score: 98.16529541015625
patch: ++ length ; }
rank: 919
score: 98.16217041015625
patch: double length = 0 ;
rank: 919
score: 95.94919840494792
patch: ++ }
rank: 920
score: 98.48149762834821
patch: ++ max CaMeL Eval - ;
rank: 920
score: 98.42039998372395
patch: else return ++ iter ;
rank: 920
score: 98.27256266276042
patch: Iterator iter = 0 ;
rank: 920
score: 98.16412353515625
patch: double iter = $NUMBER$ ;
rank: 920
score: 98.1614481608073
patch: final double < 0 ;
rank: 920
score: 98.14423217773438
patch: * * * /
rank: 920
score: 98.0035400390625
patch: state = iter ;
rank: 920
score: 95.93168131510417
patch: System ;
rank: 921
score: 98.16029663085938
patch: current = null ;
rank: 921
score: 98.00137329101562
patch: result = iter ;
rank: 921
score: 95.90377807617188
patch: iter /
rank: 922
score: 98.47130330403645
patch: ++ iter ; * ;
rank: 922
score: 98.40414428710938
patch: / ++ ++ iter ;
rank: 922
score: 98.26546223958333
patch: Iterator iter = n ;
rank: 922
score: 98.15753173828125
patch: delta += 0 ;
rank: 922
score: 98.13438110351562
patch: for ; * /
rank: 922
score: 97.99659423828125
patch: previous = iter ;
rank: 922
score: 95.8885498046875
patch: / /
rank: 923
score: 98.40043131510417
patch: finally { ++ iter ;
rank: 923
score: 98.26146589006696
patch: max CaMeL Eval -= n ;
rank: 923
score: 97.97020263671875
patch: start = iter ;
rank: 923
score: 95.8836161295573
patch: int iter
rank: 924
score: 98.39796142578125
patch: j * ++ ;
rank: 924
score: 98.26060180664062
patch: ( true ) {
rank: 924
score: 98.1419677734375
patch: double delta = 1 ;
rank: 924
score: 98.100341796875
patch: if ( false ;
rank: 924
score: 98.0514404296875
patch: return current ; }
rank: 924
score: 97.96336059570312
patch: cur = iter ;
rank: 924
score: 95.86403401692708
patch: * ;
rank: 925
score: 98.46275634765625
patch: iter += iter ;
rank: 925
score: 98.14612426757813
patch: delta += n ;
rank: 925
score: 97.94764404296875
patch: while ( false )
rank: 925
score: 97.91876831054688
patch: curr = iter ;
rank: 925
score: 95.8475341796875
patch: start ;
rank: 926
score: 98.45355224609375
patch: ++ iter ] = ;
rank: 926
score: 98.38733927408855
patch: ++ 0 + iter ;
rank: 926
score: 98.13728841145833
patch: double delta = null ;
rank: 926
score: 98.09718017578125
patch: ++ * n ;
rank: 926
score: 97.93360595703125
patch: current = 0 ;
rank: 926
score: 97.90098876953125
patch: ++ iter 0 ;
rank: 926
score: 95.8343505859375
patch: int count
rank: 927
score: 98.4464823404948
patch: ++ iter - max ;
rank: 927
score: 98.3864034016927
patch: ++ while ++ iter ;
rank: 927
score: 98.25433349609375
patch: [ ] iter = 0 ;
rank: 927
score: 98.1278788248698
patch: final double < n ;
rank: 927
score: 98.09492797851563
patch: else ++ start ;
rank: 927
score: 97.920458984375
patch: iter = current ;
rank: 927
score: 97.88598022460937
patch: node = iter ;
rank: 927
score: 95.83199055989583
patch: iterator ;
rank: 928
score: 98.42992146809895
patch: ++ iter > 0 ;
rank: 928
score: 98.09437255859375
patch: / * ++ ;
rank: 928
score: 97.87327880859375
patch: if ( current ;
rank: 928
score: 95.81306966145833
patch: ++ this
rank: 929
score: 98.42552693684895
patch: ++ iter * / ;
rank: 929
score: 98.37977091471355
patch: * ; ++ iter ;
rank: 929
score: 98.24385579427083
patch: >= point . length ;
rank: 929
score: 98.11177978515624
patch: delta += 1 ;
rank: 929
score: 98.09972127278645
patch: double [ ] r ;
rank: 929
score: 98.09197998046875
patch: else ++ 1 ;
rank: 929
score: 97.88529052734376
patch: int < double ;
rank: 929
score: 95.80738321940105
patch: ++ $STRING$
rank: 930
score: 98.37744140625
patch: iter * ++ iter ;
rank: 930
score: 98.09768676757812
patch: double [ ] point ;
rank: 930
score: 98.0882080078125
patch: ++ start ; }
rank: 930
score: 97.86984252929688
patch: double < double ;
rank: 930
score: 97.86825561523438
patch: synchronized ( this )
rank: 930
score: 95.80303955078125
patch: try ;
rank: 931
score: 98.40244547526042
patch: ++ iter ; r ;
rank: 931
score: 98.22333374023438
patch: result = null ;
rank: 931
score: 98.07817077636719
patch: } else {
rank: 931
score: 97.86845092773437
patch: iter = null ;
rank: 931
score: 97.86680908203125
patch: ++ iter -- ;
rank: 931
score: 95.78355407714844
patch: else
rank: 932
score: 98.215234375
patch: int ++ iter ;
rank: 932
score: 98.07053833007812
patch: if ++ n ;
rank: 932
score: 97.86625366210937
patch: iter = 0 ;
rank: 932
score: 97.86270141601562
patch: Iterator iter = ;
rank: 932
score: 95.77786254882812
patch: try
rank: 933
score: 98.08340454101562
patch: double delta = false ;
rank: 933
score: 98.06868286132813
patch: start ++ ; }
rank: 933
score: 97.86436157226562
patch: ++ true ; }
rank: 933
score: 97.8435546875
patch: int iter = ;
rank: 933
score: 95.7562255859375
patch: logger ;
rank: 934
score: 98.37025960286458
patch: ++ start + iter ;
rank: 934
score: 97.83709716796875
patch: ++ iter iter ;
rank: 935
score: 98.37577514648437
patch: ++ max ; ;
rank: 935
score: 98.3662821451823
patch: iter = ++ 1 ;
rank: 935
score: 98.06257934570313
patch: ++ += iter ;
rank: 935
score: 98.05204467773437
patch: delta = $NUMBER$ ;
rank: 935
score: 97.94519653320313
patch: ++ max ; {
rank: 935
score: 97.835107421875
patch: reader . ++ ;
rank: 935
score: 95.75094604492188
patch: / else
rank: 936
score: 98.37154134114583
patch: r [ iter ] ;
rank: 936
score: 98.36107177734375
patch: else iter ++ ;
rank: 936
score: 98.03733520507812
patch: point = current ;
rank: 936
score: 97.8320068359375
patch: c = iter ;
rank: 936
score: 95.72216796875
patch: ++ *
rank: 937
score: 98.35865275065105
patch: ++ - - iter ;
rank: 937
score: 98.05843505859374
patch: ++ $NUMBER$ ; }
rank: 937
score: 97.9242431640625
patch: ++ delta ; {
rank: 937
score: 97.83193359375
patch: orig = iter ;
rank: 937
score: 95.71787516276042
patch: iter try
rank: 938
score: 98.35818481445312
patch: ++ 1 iter ;
rank: 938
score: 98.14605712890625
patch: iter = iter ;
rank: 938
score: 98.057568359375
patch: / * iter ;
rank: 938
score: 97.82896118164062
patch: other = iter ;
rank: 938
score: 95.67445882161458
patch: } ;
rank: 939
score: 98.33261108398438
patch: ++ max ; * /
rank: 939
score: 98.0090576171875
patch: r = null ;
rank: 939
score: 97.88468017578126
patch: ++ ++ max ;
rank: 939
score: 97.81602172851562
patch: if ( ( (
rank: 939
score: 95.53324890136719
patch: }
rank: 940
score: 98.04644775390625
patch: / * /
rank: 940
score: 97.869873046875
patch: if ( point .
rank: 940
score: 97.82470703125
patch: p = iter ;
rank: 940
score: 94.50956726074219
patch: final
rank: 941
score: 98.32283528645833
patch: ++ iter ; for ;
rank: 941
score: 98.0463134765625
patch: * ++ iter ;
rank: 941
score: 97.82306518554688
patch: current = iter )
rank: 941
score: 94.29539489746094
patch: {
rank: 942
score: 98.35013834635417
patch: ++ * int iter ;
rank: 942
score: 98.32096557617187
patch: iter -= iter ;
rank: 942
score: 98.11491088867187
patch: ( ++ iter )
rank: 942
score: 98.04522094726562
patch: if ( n ;
rank: 942
score: 97.9714111328125
patch: delta = null ;
rank: 942
score: 97.8591796875
patch: ++ r ; {
rank: 942
score: 97.81651611328125
patch: first = iter ;
rank: 942
score: 97.80091552734375
patch: final double iter ;
rank: 942
score: 94.2877197265625
patch: iterator
rank: 943
score: 98.30331420898438
patch: ++ iter % iter ;
rank: 943
score: 98.03827514648438
patch: else ++ $NUMBER$ ;
rank: 943
score: 97.95576171875
patch: delta = current ;
rank: 943
score: 97.8705810546875
patch: ++ < n ;
rank: 943
score: 97.84583740234375
patch: if ( ) {
rank: 943
score: 97.81475219726562
patch: left = iter ;
rank: 943
score: 97.79875183105469
patch: return current ;
rank: 943
score: 94.20169067382812
patch: count
rank: 944
score: 98.340380859375
patch: catch ++ iter ;
rank: 944
score: 98.29209391276042
patch: ++ n ; * /
rank: 944
score: 98.10966796875
patch: item = current ;
rank: 944
score: 98.03580322265626
patch: } else { }
rank: 944
score: 97.86447143554688
patch: i = n ;
rank: 944
score: 97.81400146484376
patch: prev = iter ;
rank: 944
score: 94.0783462524414
patch: *
rank: 945
score: 98.28975423177083
patch: ++ n > 0 ;
rank: 945
score: 98.10394287109375
patch: j = iter ;
rank: 945
score: 98.02650756835938
patch: if ++ 1 ;
rank: 945
score: 97.94173583984374
patch: r = 0 ;
rank: 945
score: 97.80616455078125
patch: ++ iter false ;
rank: 945
score: 94.06533813476562
patch: start
rank: 946
score: 98.2923095703125
patch: ++ start ++ ;
rank: 946
score: 98.08440551757812
patch: -- iter ; final
rank: 946
score: 98.02169799804688
patch: ++ r ; }
rank: 946
score: 97.937890625
patch: delta = true ;
rank: 946
score: 97.78980102539063
patch: if ( false )
rank: 946
score: 94.05766296386719
patch: ;
rank: 947
score: 98.27574666341145
patch: ++ iter ; final ;
rank: 947
score: 98.07404174804688
patch: tmp = current ;
rank: 947
score: 97.79471435546876
patch: key = iter ;
rank: 947
score: 97.78743896484374
patch: ++ true ; {
rank: 947
score: 94.01515197753906
patch: finally
rank: 948
score: 98.27187093098958
patch: ++ iter * * /
rank: 948
score: 98.02069091796875
patch: else { / ;
rank: 948
score: 97.90841674804688
patch: delta = false ;
rank: 948
score: 97.80841674804688
patch: delta += true ;
rank: 948
score: 97.79402465820313
patch: n -= iter ;
rank: 948
score: 94.00111389160156
patch: last
rank: 949
score: 98.26388549804688
patch: ++ n >= 0 ;
rank: 949
score: 98.02521362304688
patch: result = 0 ;
rank: 949
score: 98.020458984375
patch: } ++ n ;
rank: 949
score: 97.78751220703126
patch: n = iter ;
rank: 949
score: 93.9410629272461
patch: public
rank: 950
score: 98.2623799641927
patch: iter += iter + ;
rank: 950
score: 98.2169189453125
patch: return ++ iter ;
rank: 950
score: 97.9939208984375
patch: break ; break ;
rank: 950
score: 97.89614868164062
patch: delta = 1 ;
rank: 950
score: 97.79025268554688
patch: ++ 0 ; {
rank: 950
score: 97.7869140625
patch: old = iter ;
rank: 950
score: 93.90068054199219
patch: throw
rank: 951
score: 98.25107828776042
patch: ++ max CaMeL Eval :
rank: 951
score: 98.21279296875
patch: ++ ] iter ;
rank: 951
score: 98.0136474609375
patch: if ; * /
rank: 951
score: 97.98919067382812
patch: < iter ) {
rank: 951
score: 97.78223876953125
patch: ++ max ; }
rank: 951
score: 93.84142303466797
patch: this
rank: 952
score: 98.2490234375
patch: iter ++ ; * /
rank: 952
score: 98.0107177734375
patch: if ++ 0 ;
rank: 952
score: 97.76165771484375
patch: ++ iter $NUMBER$ ;
rank: 952
score: 97.7589111328125
patch: final double 1 ;
rank: 952
score: 93.83766174316406
patch: result
rank: 953
score: 98.24685668945312
patch: ++ max CaMeL Eval =
rank: 953
score: 98.00523071289062
patch: Set ++ iter ;
rank: 953
score: 97.79188842773438
patch: r = true ;
rank: 953
score: 97.7418701171875
patch: int n = ;
rank: 953
score: 97.72388916015625
patch: i += n ;
rank: 953
score: 93.70651245117188
patch: num
rank: 954
score: 98.15196533203125
patch: ++ value ++ ;
rank: 954
score: 97.97427978515626
patch: state = 0 ;
rank: 954
score: 97.78963623046874
patch: delta += iter ;
rank: 954
score: 97.7390380859375
patch: block = iter ;
rank: 954
score: 93.68628692626953
patch: current
rank: 955
score: 98.23052978515625
patch: r ; iter ++ ;
rank: 955
score: 98.15038452148437
patch: i iter ++ ;
rank: 955
score: 97.99052429199219
patch: break ; }
rank: 955
score: 97.973095703125
patch: tmp = null ;
rank: 955
score: 97.78935546875
patch: delta += false ;
rank: 955
score: 97.737841796875
patch: column = iter ;
rank: 955
score: 97.56103515625
patch: double delta ;
rank: 955
score: 93.65098571777344
patch: end
rank: 956
score: 97.98128662109374
patch: while ++ iter ;
rank: 956
score: 97.97249755859374
patch: Iterator < double )
rank: 956
score: 97.73203735351562
patch: context = iter ;
rank: 956
score: 93.64863586425781
patch: j
rank: 957
score: 97.978759765625
patch: i += iter ;
rank: 957
score: 97.96455078125
patch: ( ++ iter ;
rank: 957
score: 97.75897827148438
patch: current = true ;
rank: 957
score: 97.73167114257812
patch: input = iter ;
rank: 957
score: 97.71124267578125
patch: double < 0 ;
rank: 957
score: 93.64344787597656
patch: default
rank: 958
score: 98.1478515625
patch: ++ iter * ;
rank: 958
score: 97.97763061523438
patch: else { * /
rank: 958
score: 97.72880859375
patch: ++ iter true ;
rank: 958
score: 97.71109619140626
patch: iter = n ;
rank: 958
score: 93.62672424316406
patch: ret
rank: 959
score: 97.97071533203125
patch: if ++ length ;
rank: 959
score: 97.95496826171875
patch: j = 0 ;
rank: 959
score: 97.745947265625
patch: r = iter ;
rank: 959
score: 97.72763671875
patch: n += iter ;
rank: 959
score: 93.60618591308594
patch: next
rank: 960
score: 97.968505859375
patch: ++ value ; }
rank: 960
score: 97.951171875
patch: previous = current ;
rank: 960
score: 97.72363891601563
patch: top = iter ;
rank: 960
score: 97.45319366455078
patch: if ( {
rank: 960
score: 93.4837646484375
patch: m
rank: 961
score: 97.69312744140625
patch: double < n ;
rank: 961
score: 97.43006134033203
patch: if ( ;
rank: 961
score: 93.47271728515625
patch: remaining
rank: 962
score: 98.09732666015626
patch: j { ++ ;
rank: 962
score: 97.95320129394531
patch: } if ;
rank: 962
score: 97.74132080078125
patch: current = $NUMBER$ ;
rank: 962
score: 97.7148681640625
patch: pos = iter ;
rank: 962
score: 97.69288330078125
patch: final double n ;
rank: 962
score: 97.39824676513672
patch: delta ++ ;
rank: 962
score: 93.45671844482422
patch: in
rank: 963
score: 98.09678955078125
patch: ++ 0 iter ;
rank: 963
score: 97.94253540039062
patch: < ++ iter ;
rank: 963
score: 97.88245646158855
patch: else {
rank: 963
score: 97.6999267578125
patch: switch ( n )
rank: 963
score: 97.6845458984375
patch: delta += r [
rank: 963
score: 97.47412109375
patch: return null ;
rank: 963
score: 93.36813354492188
patch: return
rank: 964
score: 98.08612060546875
patch: j ; ++ ;
rank: 964
score: 97.94150390625
patch: end = iter ;
rank: 964
score: 97.7343994140625
patch: delta += r ;
rank: 964
score: 97.63389587402344
patch: current = ;
rank: 964
score: 93.31297302246094
patch: do
rank: 965
score: 98.082666015625
patch: Integer iter ++ ;
rank: 965
score: 97.94016723632812
patch: list = current ;
rank: 965
score: 97.59294891357422
patch: i -- ;
rank: 965
score: 93.30807495117188
patch: System
rank: 966
score: 98.07208862304688
patch: iter { ++ ;
rank: 966
score: 97.72042236328124
patch: current = false ;
rank: 966
score: 97.41606903076172
patch: ++ point .
rank: 966
score: 97.32318878173828
patch: delta -- ;
rank: 966
score: 93.23353576660156
patch: c
rank: 967
score: 98.047216796875
patch: start { ++ ;
rank: 967
score: 97.915087890625
patch: list = null ;
rank: 967
score: 97.72300720214844
patch: * * /
rank: 967
score: 97.71746215820312
patch: delta = iter ;
rank: 967
score: 97.59017944335938
patch: temp = ;
rank: 967
score: 97.31893157958984
patch: final double <
rank: 967
score: 93.18128967285156
patch: offset
rank: 968
score: 97.945703125
patch: ; iter ++ ;
rank: 968
score: 97.71585845947266
patch: * * ;
rank: 968
score: 97.71195678710937
patch: point = null ;
rank: 968
score: 93.17993927001953
patch: i
rank: 969
score: 97.94406127929688
patch: iter = ;
rank: 969
score: 97.90010986328124
patch: list = 0 ;
rank: 969
score: 97.70059814453126
patch: current = this ;
rank: 969
score: 97.5346908569336
patch: pos ++ ;
rank: 969
score: 97.3660888671875
patch: final else {
rank: 969
score: 93.14854431152344
patch: n
rank: 970
score: 98.04114990234375
patch: long iter ++ ;
rank: 970
score: 97.895703125
patch: item = null ;
rank: 970
score: 97.69766845703126
patch: delta += current ;
rank: 970
score: 93.01040649414062
patch: copy
rank: 971
score: 97.94326782226562
patch: result = ;
rank: 971
score: 97.8181381225586
patch: ( true )
rank: 971
score: 97.48583984375
patch: state = ;
rank: 971
score: 92.98967742919922
patch: My@@
rank: 972
score: 98.025390625
patch: key { ++ ;
rank: 972
score: 97.80834197998047
patch: ( iter ;
rank: 972
score: 97.48458862304688
patch: idx ++ ;
rank: 972
score: 97.24764251708984
patch: Iterator true ;
rank: 972
score: 92.96788024902344
patch: index
rank: 973
score: 98.02487182617188
patch: ++ $NUMBER$ iter ;
rank: 973
score: 97.88106689453124
patch: ++ max iter ;
rank: 973
score: 97.794921875
patch: [ ] ;
rank: 973
score: 97.32437896728516
patch: ++ goal ;
rank: 973
score: 92.95051574707031
patch: max
rank: 974
score: 97.66004943847656
patch: else * /
rank: 974
score: 97.22571563720703
patch: double r ;
rank: 974
score: 92.92791748046875
patch: sub
rank: 975
score: 97.41218566894531
patch: return new ;
rank: 975
score: 92.91680908203125
patch: input
rank: 976
score: 97.72274780273438
patch: continue ; }
rank: 976
score: 97.59762573242188
patch: iter += ;
rank: 976
score: 97.40914916992188
patch: context = ;
rank: 976
score: 97.13297526041667
patch: try {
rank: 976
score: 92.88898468017578
patch: number
rank: 977
score: 98.00973510742188
patch: ++ value iter ;
rank: 977
score: 97.6888427734375
patch: >= n ;
rank: 977
score: 96.8262939453125
patch: * /
rank: 977
score: 92.87300109863281
patch: :
rank: 978
score: 97.62965393066406
patch: <= n ;
rank: 978
score: 96.76568603515625
patch: if (
rank: 978
score: 92.87235260009766
patch: s
rank: 979
score: 98.00595092773438
patch: ++ ++ value ;
rank: 979
score: 97.5884780883789
patch: } else ;
rank: 979
score: 97.31930541992188
patch: pos -- ;
rank: 979
score: 96.93345133463542
patch: delta [
rank: 979
score: 96.73739624023438
patch: current ;
rank: 979
score: 92.85240173339844
patch: line
rank: 980
score: 96.73077392578125
patch: int <
rank: 980
score: 92.84696960449219
patch: check
rank: 981
score: 97.57917785644531
patch: else continue ;
rank: 981
score: 97.5650863647461
patch: int ++ ;
rank: 981
score: 96.92547607421875
patch: final else
rank: 981
score: 92.81314086914062
patch: t
rank: 982
score: 97.99985961914062
patch: value { ++ ;
rank: 982
score: 97.57636260986328
patch: else return ;
rank: 982
score: 97.56271362304688
patch: >= iter ;
rank: 982
score: 97.31023406982422
patch: tmp = ;
rank: 982
score: 96.6635030110677
patch: double <
rank: 982
score: 92.80369567871094
patch: mark
rank: 983
score: 97.57481384277344
patch: else break ;
rank: 983
score: 97.30058288574219
patch: idx -- ;
rank: 983
score: 96.62513224283855
patch: for (
rank: 983
score: 92.80325317382812
patch: super
rank: 984
score: 97.42939758300781
patch: counter ++ ;
rank: 984
score: 97.2955322265625
patch: int current ;
rank: 984
score: 97.20105743408203
patch: int point ;
rank: 984
score: 96.62484741210938
patch: point [
rank: 984
score: 96.5511474609375
patch: ++ {
rank: 984
score: 92.79943084716797
patch: found
rank: 985
score: 97.56622314453125
patch: int length ;
rank: 985
score: 97.25444793701172
patch: ++ n )
rank: 985
score: 97.17206573486328
patch: double 1 ;
rank: 985
score: 97.11734008789062
patch: true ;
rank: 985
score: 92.79527282714844
patch: total
rank: 986
score: 97.5643539428711
patch: else * ;
rank: 986
score: 97.25308227539062
patch: it ++ ;
rank: 986
score: 97.14736938476562
patch: final double [
rank: 986
score: 97.00979614257812
patch: ( (
rank: 986
score: 92.78956604003906
patch: matching
rank: 987
score: 97.84370422363281
patch: value ++ ;
rank: 987
score: 97.56096649169922
patch: else { else
rank: 987
score: 97.4044189453125
patch: float iter ;
rank: 987
score: 97.23137664794922
patch: double max ;
rank: 987
score: 97.1376953125
patch: if ;
rank: 987
score: 96.34573364257812
patch: { {
rank: 987
score: 96.2975565592448
patch: double {
rank: 987
score: 92.78794860839844
patch: pos
rank: 988
score: 97.36974334716797
patch: ++ round ;
rank: 988
score: 96.9932861328125
patch: get CaMeL
rank: 988
score: 96.26424153645833
patch: delta ;
rank: 988
score: 92.76939392089844
patch: @
rank: 989
score: 96.93271891276042
patch: while ;
rank: 989
score: 96.90565999348958
patch: false ;
rank: 989
score: 96.33770751953125
patch: r [
rank: 989
score: 96.25792439778645
patch: do {
rank: 989
score: 92.75447082519531
patch: l
rank: 990
score: 97.72928619384766
patch: j ++ ;
rank: 990
score: 97.49441528320312
patch: else { ;
rank: 990
score: 97.34026336669922
patch: sum ++ ;
rank: 990
score: 96.82965087890625
patch: / *
rank: 990
score: 92.752685546875
patch: size
rank: 991
score: 97.71175384521484
patch: start ++ ;
rank: 991
score: 97.4944076538086
patch: else if ;
rank: 991
score: 97.33659362792969
patch: return ; }
rank: 991
score: 96.77953084309895
patch: return ;
rank: 991
score: 96.77500406901042
patch: true {
rank: 991
score: 96.3261006673177
patch: r .
rank: 991
score: 92.75133514404297
patch: list
rank: 992
score: 97.68232727050781
patch: return false ;
rank: 992
score: 96.3050537109375
patch: delta .
rank: 992
score: 96.1951904296875
patch: 0 ;
rank: 992
score: 92.74609375
patch: out
rank: 993
score: 97.6064224243164
patch: key ++ ;
rank: 993
score: 97.32052612304688
patch: long start ;
rank: 993
score: 96.86187744140625
patch: finally {
rank: 993
score: 96.46657307942708
patch: final ;
rank: 993
score: 96.29580688476562
patch: current .
rank: 993
score: 92.72264099121094
patch: abs
rank: 994
score: 97.57025146484375
patch: return 0 ;
rank: 994
score: 92.70864868164062
patch: logger
rank: 995
score: 97.4971923828125
patch: end ++ ;
rank: 995
score: 96.8049825032552
patch: } else
rank: 995
score: 92.65916442871094
patch: it
rank: 996
score: 97.4798583984375
patch: Integer iter ;
rank: 996
score: 96.58762613932292
patch: r ;
rank: 996
score: 96.3468526204427
patch: temp ;
rank: 996
score: 96.13785807291667
patch: double [
rank: 996
score: 92.64936828613281
patch: value
rank: 997
score: 96.48036702473958
patch: result ;
rank: 997
score: 96.1982930501302
patch: tmp ;
rank: 997
score: 92.63543701171875
patch: context
rank: 998
score: 96.18711344401042
patch: point .
rank: 998
score: 92.619140625
patch: cur
rank: 999
score: 92.6106185913086
patch: thread
rank: 1000
score: 94.95869445800781
patch: Iterator
rank: 1000
score: 93.72984313964844
patch: int
rank: 1000
score: 92.59872436523438
patch: key
