rank: 1
score: 99.89401245117188
patch: result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 1
score: 99.84607950846355
patch: result = Node . new CaMeL Number ( result ) ;
rank: 1
score: 99.83263050426136
patch: result = lval CaMeL Int << rval CaMeL Int ;
rank: 1
score: 99.79539905894886
patch: result = lval CaMeL Int >> rval CaMeL Int ;
rank: 1
score: 99.7487041766827
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 3
score: 99.74790954589844
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 3
score: 99.74262346540179
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 3
score: 99.74202473958333
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 3
score: 99.6517578125
patch: result = lval CaMeL Int >> >> rval ;
rank: 4
score: 99.72664388020833
patch: result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 4
score: 99.6968765258789
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 4
score: 99.64654541015625
patch: result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 5
score: 99.71948920355902
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 5
score: 99.70533854166666
patch: result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 5
score: 99.69669835707721
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 5
score: 99.66910807291667
patch: result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 5
score: 99.64852469308036
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 5
score: 99.62214799360795
patch: result = lval CaMeL Int & rval CaMeL Int ;
rank: 6
score: 99.68988800048828
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 6
score: 99.6703369140625
patch: result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 6
score: 99.6419208233173
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 6
score: 99.62129480698529
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 6
score: 99.6207046508789
patch: result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;
rank: 7
score: 99.61196664663461
patch: result = lval CaMeL Int >> >> - rval CaMeL Int ;
rank: 7
score: 99.6077880859375
patch: result = lval CaMeL Int / >> rval CaMeL Int ;
rank: 8
score: 99.68751220703125
patch: result = Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 8
score: 99.66012369791666
patch: result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 8
score: 99.60622151692708
patch: result = n . new CaMeL Number ( result ) ;
rank: 8
score: 99.602294921875
patch: result = lval CaMeL Int & >> rval CaMeL Int ;
rank: 8
score: 99.60179227941177
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 8
score: 99.58424207899306
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 9
score: 99.65681457519531
patch: result = lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 9
score: 99.65226236979167
patch: result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 9
score: 99.59908718532986
patch: result = n . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 9
score: 99.59854888916016
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> lval CaMeL Int ;
rank: 9
score: 99.57448323567708
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 10
score: 99.65091705322266
patch: result = lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 10
score: 99.6247802734375
patch: result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;
rank: 10
score: 99.58861490885417
patch: result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ;
rank: 10
score: 99.58659362792969
patch: result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;
rank: 10
score: 99.56992594401042
patch: result = lval CaMeL Int >> >> lval CaMeL Int ;
rank: 11
score: 99.59900665283203
patch: result = lval CaMeL Int >> >> rval CaMeL Int + rval CaMeL Int ;
rank: 11
score: 99.57590895432692
patch: result = lval CaMeL Int >> >> ~ rval CaMeL Int ;
rank: 11
score: 99.51908052884616
patch: result = lval CaMeL Int << rval CaMeL Int ; break ;
rank: 12
score: 99.6315689086914
patch: result = lval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 12
score: 99.56100643382354
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 12
score: 99.55632467830883
patch: this . result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 12
score: 99.55446951729911
patch: result = lval CaMeL Int >> >> >> & rval CaMeL Int ;
rank: 12
score: 99.52985382080078
patch: result = lval CaMeL Int >> >> rval CaMeL Int + lval CaMeL Int ;
rank: 13
score: 99.6289813701923
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 13
score: 99.62458147321429
patch: Node new CaMeL Number = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 13
score: 99.5869369506836
patch: result = lval CaMeL Int >> >> rval CaMeL Int * rval CaMeL Int ;
rank: 13
score: 99.55387739701705
patch: result = lval CaMeL Int >> lval CaMeL Int ;
rank: 13
score: 99.54178560697116
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 13
score: 99.51084206321023
patch: return Node . new CaMeL Number ( result ) ;
rank: 14
score: 99.6142578125
patch: result = Node . new CaMeL Number ( ( int ) result ) ;
rank: 14
score: 99.58586883544922
patch: result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ;
rank: 14
score: 99.55050893930289
patch: this . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 15
score: 99.61053873697917
patch: Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 15
score: 99.5783462524414
patch: result = rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 15
score: 99.53131573016827
patch: result = lval CaMeL Int >> >> & rval CaMeL Int ;
rank: 15
score: 99.49116516113281
patch: result = lval CaMeL Int & Node . new CaMeL Number ( result ) ;
rank: 16
score: 99.5943244485294
patch: result = lval CaMeL Int >> >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 16
score: 99.59368218315973
patch: result = Node . new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 16
score: 99.57276204427083
patch: result = lval CaMeL Int >> >> rval CaMeL Int rval CaMeL Int ;
rank: 16
score: 99.547412109375
patch: result = lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;
rank: 16
score: 99.5221176147461
patch: result = lval CaMeL Int / rval CaMeL Int >> >> rval CaMeL Int ;
rank: 16
score: 99.48004705255681
patch: result = rval CaMeL Int >> rval CaMeL Int ;
rank: 17
score: 99.60614420572917
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ;
rank: 17
score: 99.58946397569444
patch: result = Node . new CaMeL Number ( left . get CaMeL Type ( ) ) ;
rank: 17
score: 99.56613338694854
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 17
score: 99.54573822021484
patch: result = lval CaMeL Int >> >> lval CaMeL Int >> rval CaMeL Int ;
rank: 17
score: 99.5150858561198
patch: result = lval CaMeL Int >> >> >> >> rval ;
rank: 18
score: 99.6040790264423
patch: result = lval CaMeL Int << >> >> rval CaMeL Int ;
rank: 18
score: 99.57329559326172
patch: result = lval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ;
rank: 18
score: 99.53461565290179
patch: this . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 18
score: 99.53179462139423
patch: result = lval CaMeL Int & >> >> rval CaMeL Int ;
rank: 18
score: 99.51436360677083
patch: result = lval CaMeL Int + >> rval CaMeL Int ;
rank: 19
score: 99.56963641826923
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 19
score: 99.56010437011719
patch: result = lval CaMeL Int >> >> rval CaMeL Int == rval CaMeL Int ;
rank: 19
score: 99.5233513327206
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> ;
rank: 19
score: 99.51210715553977
patch: result = lval CaMeL Int + rval CaMeL Int ;
rank: 19
score: 99.51177300347223
patch: result = lval CaMeL Int >> & rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 19
score: 99.50764465332031
patch: result = lval CaMeL Int >> >> rval CaMeL Int : lval CaMeL Int ;
rank: 20
score: 99.59801664806548
patch: error ( Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ) ;
rank: 20
score: 99.55919731987848
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = lval CaMeL Int ;
rank: 20
score: 99.55816650390625
patch: result = lval CaMeL Int << >> rval CaMeL Int << rval CaMeL Int ;
rank: 20
score: 99.51064046223958
patch: result = lval CaMeL Int >> ^ rval CaMeL Int ;
rank: 20
score: 99.50766170726104
patch: result = lval CaMeL Int >> & rval CaMeL Int >> >> rval CaMeL Int ;
rank: 21
score: 99.59320068359375
patch: result = Node . new CaMeL Number ( result ) ; report CaMeL Code CaMeL Change ( ) ;
rank: 21
score: 99.55950568704044
patch: double lval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 21
score: 99.5580695657169
patch: result = lval CaMeL Int >> >> rval CaMeL Int == >> rval CaMeL Int ;
rank: 21
score: 99.548583984375
patch: result = lval CaMeL Int << >> rval CaMeL Int >> rval CaMeL Int ;
rank: 21
score: 99.50761583116319
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 21
score: 99.50341796875
patch: result = lval CaMeL Int * >> rval CaMeL Int ;
rank: 22
score: 99.58846028645833
patch: result = Node . new CaMeL Number ( n . get CaMeL Double ( ) ) ;
rank: 22
score: 99.55447387695312
patch: result = lval CaMeL Int - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 22
score: 99.51588657924107
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> 1 ;
rank: 22
score: 99.50725241268383
patch: result = lval CaMeL Int + rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 22
score: 99.49790602463942
patch: result = lval CaMeL Int >> >> ^ rval CaMeL Int ;
rank: 22
score: 99.4909198467548
patch: result = lval CaMeL Int >> >> - lval CaMeL Int ;
rank: 23
score: 99.55091050091912
patch: result = lval CaMeL Int >> >> rval CaMeL Int - >> rval CaMeL Int ;
rank: 23
score: 99.54763454861111
patch: report CaMeL Code CaMeL Change ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 23
score: 99.51187133789062
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> lval CaMeL Int ;
rank: 23
score: 99.5069580078125
patch: result = new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 23
score: 99.49912923177084
patch: result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ;
rank: 23
score: 99.497900390625
patch: result = lval CaMeL Int >> >> >> >> & rval CaMeL Int ;
rank: 23
score: 99.4242412860577
patch: { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 24
score: 99.54051378038194
patch: double lval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 24
score: 99.52259018841912
patch: result = lval CaMeL Int << >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 24
score: 99.5086669921875
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> 1 ;
rank: 24
score: 99.50608995225694
patch: result = token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 24
score: 99.49760885799633
patch: result = lval CaMeL Int > rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 24
score: 99.48902893066406
patch: result = lval CaMeL Int >> >> >> >> >> & rval CaMeL Int ;
rank: 24
score: 99.48780822753906
patch: result = lval CaMeL Int >> >> rval CaMeL Int - lval CaMeL Int ;
rank: 24
score: 99.42254169170673
patch: result = rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 25
score: 99.58234252929688
patch: result = Node . new CaMeL Number ( result , n . get CaMeL Type ( ) ) ;
rank: 25
score: 99.53832194010417
patch: result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 25
score: 99.52076631433823
patch: result = lval CaMeL Int >> rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 25
score: 99.50478786892361
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; case Token . RSH :
rank: 25
score: 99.49318150111607
patch: result = lval CaMeL Int & >> >> >> rval CaMeL Int ;
rank: 25
score: 99.4881820678711
patch: result = lval ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 25
score: 99.4856708233173
patch: result = lval CaMeL Int >> >> >> lval CaMeL Int ;
rank: 25
score: 99.41970825195312
patch: result = lval CaMeL Int >> << rval CaMeL Int ;
rank: 26
score: 99.50407579210069
patch: get CaMeL Parent ( ) . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 26
score: 99.5033950805664
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> ;
rank: 26
score: 99.49302045036765
patch: result = lval CaMeL Int / rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 26
score: 99.4864032451923
patch: result = lval CaMeL Int / >> >> rval CaMeL Int ;
rank: 26
score: 99.48339125689338
patch: result = lval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ;
rank: 26
score: 99.41679164341518
patch: result = lval CaMeL Int << >> rval CaMeL Int ; break ;
rank: 27
score: 99.56471761067708
patch: result = Node . new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 27
score: 99.53665364583334
patch: result = n . get CaMeL Double ( ) >> rval CaMeL Int ;
rank: 27
score: 99.53642272949219
patch: result = rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 27
score: 99.50794893152573
patch: result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ; break ;
rank: 27
score: 99.49852701822917
patch: result = n . get CaMeL Type ( ) << rval CaMeL Int ;
rank: 27
score: 99.4977668313419
patch: result = rval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 27
score: 99.47908158735795
patch: result = lval CaMeL Int / rval CaMeL Int ;
rank: 28
score: 99.562744140625
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;
rank: 28
score: 99.53587123325893
patch: result = Node . new CaMeL Number ( lval CaMeL Int ) ;
rank: 28
score: 99.4982681274414
patch: result = Node . new CaMeL Number ( result , new CaMeL Number ) ;
rank: 28
score: 99.49141693115234
patch: result = lval CaMeL Int > rval CaMeL Int >> >> rval CaMeL Int ;
rank: 28
score: 99.47868795955883
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int + rval CaMeL Int ;
rank: 29
score: 99.56162109375
patch: result = Node . new CaMeL Number ( result , left . get CaMeL Type ( ) ) ;
rank: 29
score: 99.53289388020833
patch: result = left . get CaMeL Double ( ) >> rval CaMeL Int ;
rank: 29
score: 99.50210391773896
patch: result = lval CaMeL Int << >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 29
score: 99.49278259277344
patch: result = lval CaMeL Int >> lval CaMeL Int >> >> rval CaMeL Int ;
rank: 29
score: 99.48560248480902
patch: throw new Runtime CaMeL Exception ( $STRING$ + n . get CaMeL Message ( ) ) ;
rank: 29
score: 99.40538678850446
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 30
score: 99.554931640625
patch: result = lval CaMeL Int << >> >> >> rval CaMeL Int ;
rank: 30
score: 99.52911735983456
patch: result = Node . new CaMeL Number ( ( int ) lval CaMeL Int ) ;
rank: 30
score: 99.50201056985294
patch: result = lval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 30
score: 99.49278259277344
patch: result = lval CaMeL Int & >> rval CaMeL Int >> rval CaMeL Int ;
rank: 30
score: 99.48540496826172
patch: result = lval CaMeL Int + rval CaMeL Int >> >> rval CaMeL Int ;
rank: 30
score: 99.47292193244485
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int + lval CaMeL Int ;
rank: 31
score: 99.53093719482422
patch: result = lval CaMeL Int >> >> rval CaMeL Int / rval CaMeL Int ;
rank: 31
score: 99.52891031901042
patch: result = left . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 31
score: 99.49810431985294
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 31
score: 99.4925537109375
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;
rank: 31
score: 99.48570838341347
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; }
rank: 31
score: 99.45589505709134
patch: result = lval CaMeL Int >> & ~ rval CaMeL Int ;
rank: 31
score: 99.40321568080357
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; }
rank: 32
score: 99.5296859741211
patch: result = rval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 32
score: 99.49149867466518
patch: result = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 32
score: 99.46971130371094
patch: result = lval CaMeL Int : lval CaMeL Int >> >> rval CaMeL Int ;
rank: 32
score: 99.4533462524414
patch: result = lval CaMeL Int / rval CaMeL Int / >> rval CaMeL Int ;
rank: 32
score: 99.40150960286458
patch: { result = lval CaMeL Int >> rval CaMeL Int ;
rank: 33
score: 99.55092259457237
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; case Token . URSH :
rank: 33
score: 99.52923583984375
patch: result = lval >> >> >> >> rval CaMeL Int ;
rank: 33
score: 99.48809814453125
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 33
score: 99.48052978515625
patch: result = lval CaMeL Int >> rval CaMeL Int >> & rval CaMeL Int ;
rank: 33
score: 99.46917724609375
patch: result = lval CaMeL Int >> lval rval CaMeL Int ;
rank: 33
score: 99.39947509765625
patch: result = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 34
score: 99.55047607421875
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;
rank: 34
score: 99.52880859375
patch: result = lval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int ;
rank: 34
score: 99.49045697380515
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> lval CaMeL Int ;
rank: 34
score: 99.48565314797794
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 34
score: 99.47993977864583
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 34
score: 99.46759440104167
patch: result = lval CaMeL Int >> rval CaMeL Int - lval CaMeL Int ;
rank: 34
score: 99.44853071732955
patch: result = lval CaMeL Int * rval CaMeL Int ;
rank: 34
score: 99.39259440104166
patch: result = right . get CaMeL Double ( ) << rval CaMeL Int ;
rank: 35
score: 99.54688517252605
patch: result = Node . new CaMeL Number ( n ) ;
rank: 35
score: 99.51676432291667
patch: result = Node . new CaMeL Number ( result . get CaMeL Double ( ) ) ;
rank: 35
score: 99.48567468979779
patch: result = lval CaMeL Int & >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 35
score: 99.44757080078125
patch: result = lval CaMeL Int * rval CaMeL Int >> >> rval CaMeL Int ;
rank: 35
score: 99.39222935267857
patch: try { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 36
score: 99.52569580078125
patch: result = 0 ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 36
score: 99.47661675347223
patch: result = lval CaMeL Int >> >> rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 36
score: 99.47649069393383
patch: result = lval CaMeL Int - rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 36
score: 99.47144911024306
patch: result = Node . new CaMeL Number ( n . get CaMeL Name ( ) ) ;
rank: 36
score: 99.46315354567308
patch: int result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 36
score: 99.44427020733173
patch: result = lval CaMeL Int >> >> >= rval CaMeL Int ;
rank: 36
score: 99.38893127441406
patch: return new CaMeL Number ( Node . new CaMeL Number ( result ) ) ;
rank: 37
score: 99.52554321289062
patch: result = lval CaMeL Int >> rval CaMeL Int - >> rval CaMeL Int ;
rank: 37
score: 99.50898293887867
patch: int lval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 37
score: 99.47824276194854
patch: result = lval CaMeL Int >> >> lval CaMeL Int >> >> rval CaMeL Int ;
rank: 37
score: 99.47628445095486
patch: result = lval CaMeL Int & >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 37
score: 99.47608293805804
patch: result = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 37
score: 99.45872279575893
patch: result = lval CaMeL Int >> >> >> - rval CaMeL Int ;
rank: 37
score: 99.44415752704327
patch: result = lval CaMeL Int >> >> >> >> & 0 ;
rank: 38
score: 99.52537318638393
patch: result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;
rank: 38
score: 99.47353946461396
patch: result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ; break ;
rank: 38
score: 99.47288682725694
patch: result = lval CaMeL Int ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 38
score: 99.45987141927084
patch: result = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 38
score: 99.45758415670956
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int - lval CaMeL Int ;
rank: 38
score: 99.443701171875
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != 0 )
rank: 38
score: 99.3743896484375
patch: result = lval CaMeL Int >> - rval CaMeL Int ;
rank: 39
score: 99.53371710526316
patch: result = Node . new CaMeL Number ( Node . new CaMeL Number ( result ) ) ;
rank: 39
score: 99.46729233685662
patch: result = lval CaMeL Int * rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 39
score: 99.45675659179688
patch: result = lval CaMeL Int >> & lval CaMeL Int ;
rank: 39
score: 99.4433822631836
patch: result = lval CaMeL Int * rval CaMeL Int / >> rval CaMeL Int ;
rank: 39
score: 99.37418306790866
patch: result = rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 40
score: 99.53275339226974
patch: return Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 40
score: 99.50858800551471
patch: result = lval CaMeL Int << ( rval CaMeL Int >> rval CaMeL Int ) ;
rank: 40
score: 99.46619591346153
patch: result = lval CaMeL Int >> >> << rval CaMeL Int ;
rank: 40
score: 99.45065646701389
patch: result = lval CaMeL Int << rval CaMeL Int ; break ; case Token . RSH :
rank: 40
score: 99.44197591145833
patch: double lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 41
score: 99.53069747121711
patch: result = lval CaMeL Int << rval CaMeL Int ; break ; case Token . URSH :
rank: 41
score: 99.51181927849265
patch: result = lval CaMeL Int >> >> rval CaMeL Int != >> rval CaMeL Int ;
rank: 41
score: 99.50815158420139
patch: result = lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 41
score: 99.46753607855902
patch: result = lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ; break ;
rank: 41
score: 99.46470424107143
patch: long result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 41
score: 99.4636739095052
patch: result = lval CaMeL Int >> rval CaMeL Int >> ;
rank: 41
score: 99.44454752604166
patch: result = left . get CaMeL Type ( ) << rval CaMeL Int ;
rank: 41
score: 99.43907674153645
patch: result = lval CaMeL Int >> ~ rval CaMeL Int ;
rank: 41
score: 99.3686279296875
patch: result = left . get CaMeL Double ( ) << rval CaMeL Int ;
rank: 42
score: 99.51048368566177
patch: result = lval CaMeL Int >> >> rval CaMeL Int . - rval CaMeL Int ;
rank: 42
score: 99.50612505744485
patch: result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 42
score: 99.46671549479167
patch: result = lval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ;
rank: 42
score: 99.44637451171874
patch: result = lval CaMeL Int >> >> 1 ;
rank: 42
score: 99.44064331054688
patch: result = left . new CaMeL Number ( result ) ;
rank: 42
score: 99.43830108642578
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >> >> rval ;
rank: 42
score: 99.367333984375
patch: return lval CaMeL Int << rval CaMeL Int ;
rank: 43
score: 99.50908660888672
patch: result = lval CaMeL Int > >> rval CaMeL Int >> rval CaMeL Int ;
rank: 43
score: 99.45694986979167
patch: result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int ;
rank: 43
score: 99.44015299479166
patch: result = n . get CaMeL Double ( ) << rval CaMeL Int ;
rank: 43
score: 99.43644496372768
patch: result = lval CaMeL Int >> >> >> >> >> >> rval ;
rank: 43
score: 99.36624849759616
patch: try { result = lval CaMeL Int >> rval CaMeL Int ;
rank: 44
score: 99.52728271484375
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) , result ) ;
rank: 44
score: 99.50794982910156
patch: result = lval CaMeL Int >> >> rval CaMeL Int != rval CaMeL Int ;
rank: 44
score: 99.50505235460069
patch: result = Node . new CaMeL Number ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 44
score: 99.46225314670139
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 44
score: 99.46150476792279
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> & rval CaMeL Int ;
rank: 44
score: 99.43907335069444
patch: result = n . new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 44
score: 99.4319559733073
patch: result = lval CaMeL Int >> >> >> & 0 ;
rank: 44
score: 99.36356977982955
patch: result = lval CaMeL Int >> >> >> rval ;
rank: 45
score: 99.5212466591283
patch: result = lval CaMeL Int << rval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;
rank: 45
score: 99.50493028428819
patch: result = n . get CaMeL Node ( ) . new CaMeL Number ( result ) ;
rank: 45
score: 99.5036954012784
patch: result = lval CaMeL Int >> >> rval ) ;
rank: 45
score: 99.46128743489584
patch: result = lval CaMeL Int & >> >> >> >> rval CaMeL Int ;
rank: 45
score: 99.44292135799633
patch: result = lval CaMeL Int >> >> rval CaMeL Int & >> rval CaMeL Int ;
rank: 46
score: 99.4605712890625
patch: result = lval CaMeL Int >> >> >> >> >> | rval CaMeL Int ;
rank: 46
score: 99.45773111979166
patch: result = lval CaMeL Int >> rval CaMeL Int + rval CaMeL Int ;
rank: 46
score: 99.4521713256836
patch: result = lval CaMeL Int >> & rval CaMeL Int >> rval CaMeL Int ;
rank: 46
score: 99.43863932291667
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; case Token . LSH :
rank: 46
score: 99.42587716238839
patch: result = lval CaMeL Int >> >> >> >> >> & 0 ;
rank: 46
score: 99.36233723958334
patch: result = lval CaMeL Int - rval CaMeL Int >> rval CaMeL Int ;
rank: 47
score: 99.50379774305556
patch: result = lval CaMeL Int << ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 47
score: 99.49570719401042
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;
rank: 47
score: 99.42416817801339
patch: result = lval CaMeL Int & rval CaMeL Int >> >> rval ;
rank: 47
score: 99.35697937011719
patch: result = lval CaMeL Int >> Node . new CaMeL Number ( result ) ;
rank: 48
score: 99.50377546037946
patch: result = lval CaMeL Int << ( int ) rval CaMeL Int ;
rank: 48
score: 99.49470789292279
patch: result = lval CaMeL Int >> >> rval CaMeL Int : >> rval CaMeL Int ;
rank: 48
score: 99.44766438802084
patch: return lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 48
score: 99.43650716145834
patch: result = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 48
score: 99.42415945870536
patch: result = lval CaMeL Int / >> >> >> rval CaMeL Int ;
rank: 48
score: 99.35447340745192
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval ;
rank: 49
score: 99.5126888877467
patch: result = lval CaMeL Int >> rval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;
rank: 49
score: 99.45652669270834
patch: result = lval CaMeL Int << rval CaMeL Int : rval CaMeL Int ;
rank: 49
score: 99.44501139322917
patch: result = lval CaMeL Int > rval CaMeL Int >> rval CaMeL Int ;
rank: 49
score: 99.43641008649554
patch: result = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 49
score: 99.43579915364583
patch: this . result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 50
score: 99.50071716308594
patch: result = n . get CaMeL Double ( ) >> >> rval CaMeL Int ;
rank: 50
score: 99.49303481158088
patch: result = lval CaMeL Int > >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 50
score: 99.43149820963542
patch: result = lval CaMeL Int >> : rval CaMeL Int ;
rank: 50
score: 99.42024536132813
patch: result = lval CaMeL Int / >> rval ;
rank: 50
score: 99.35244750976562
patch: result = lval CaMeL Int >> >> rval CaMeL Int | rval CaMeL Int ;
rank: 51
score: 99.50758870442708
patch: throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 51
score: 99.4923828125
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; }
rank: 51
score: 99.45460420496323
patch: result = lval CaMeL Int << rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 51
score: 99.4339599609375
patch: result = lval CaMeL Int >> rval CaMeL Int ; result = lval CaMeL Int ;
rank: 51
score: 99.41864013671875
patch: result = lval CaMeL Int ^ rval CaMeL Int >> >> rval CaMeL Int ;
rank: 51
score: 99.35169982910156
patch: if ( n . get CaMeL Type ( ) == Token . RSH ) {
rank: 52
score: 99.50662841796876
patch: result = Node . new CaMeL Number ( result , lval CaMeL Int << rval CaMeL Int ) ;
rank: 52
score: 99.4981689453125
patch: result = lval CaMeL Int << ( rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 52
score: 99.45391167534723
patch: result = lval CaMeL Int << rval CaMeL Int ; switch ( rval CaMeL Int ) {
rank: 52
score: 99.44951923076923
patch: result = lval CaMeL Int >> >> -- rval CaMeL Int ;
rank: 52
score: 99.44336655560662
patch: result = lval CaMeL Int >> - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 52
score: 99.43372395833333
patch: int lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 52
score: 99.41740199497768
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; ;
rank: 52
score: 99.35161946614583
patch: result = lval CaMeL Int & lval CaMeL Int >> rval CaMeL Int ;
rank: 53
score: 99.5048828125
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . URSH :
rank: 53
score: 99.49660915798611
patch: int lval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 53
score: 99.49000133167614
patch: result = lval CaMeL Int >> >> rval $NUMBER$ ;
rank: 53
score: 99.44941711425781
patch: result = lval CaMeL Int & rval CaMeL Int >> & rval CaMeL Int ;
rank: 53
score: 99.44246673583984
patch: result = lval CaMeL Int >= rval CaMeL Int >> >> rval CaMeL Int ;
rank: 53
score: 99.42522515190973
patch: result = n . new CaMeL Number ( n . get CaMeL Double ( ) ) ;
rank: 53
score: 99.35074055989584
patch: result = right . get CaMeL Double ( ) >> rval CaMeL Int ;
rank: 54
score: 99.5015380859375
patch: result = Node . new CaMeL Number ( result , n . get CaMeL Double ( ) ) ;
rank: 54
score: 99.49574110243056
patch: result = Node . new CaMeL Number ( result . to CaMeL String ( ) ) ;
rank: 54
score: 99.44728190104166
patch: long result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 54
score: 99.42955433238636
patch: result = lval CaMeL Int >> >> >> 1 ;
rank: 54
score: 99.41493225097656
patch: result = lval ; result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 54
score: 99.34995339133523
patch: return lval CaMeL Int >> << rval CaMeL Int ;
rank: 55
score: 99.4453594501202
patch: result = lval CaMeL Int >> & >> rval CaMeL Int ;
rank: 55
score: 99.4145751953125
patch: result = lval CaMeL Int < 0 ? 0 : lval CaMeL Int ;
rank: 55
score: 99.34638671875
patch: result = lval CaMeL Int + rval CaMeL Int >> rval CaMeL Int ;
rank: 56
score: 99.49429175967262
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = lval CaMeL Int >> rval CaMeL Int ;
rank: 56
score: 99.49358723958333
patch: result = new Node ( n . get CaMeL Type ( ) ) ;
rank: 56
score: 99.48443048650569
patch: result = lval CaMeL Int - rval CaMeL Int ;
rank: 56
score: 99.44346110026042
patch: result = lval CaMeL Int >> rval CaMeL Int ; switch ( rval CaMeL Int ) {
rank: 56
score: 99.44208635602679
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> $NUMBER$ ;
rank: 56
score: 99.42222493489584
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return n ;
rank: 56
score: 99.41425323486328
patch: result = lval CaMeL Int >> == rval ? 0 : lval CaMeL Int ;
rank: 56
score: 99.34584045410156
patch: result = lval CaMeL Int >> >> rval CaMeL Int = rval CaMeL Int ;
rank: 57
score: 99.49233829273896
patch: result = lval CaMeL Int << ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 57
score: 99.49159071180556
patch: int lval CaMeL Int = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 57
score: 99.44190889246323
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> & rval CaMeL Int ;
rank: 57
score: 99.428515625
patch: result = lval CaMeL Int >> rval CaMeL Int + lval CaMeL Int ;
rank: 57
score: 99.421826171875
patch: result = new CaMeL Number ( result ) ;
rank: 57
score: 99.41316986083984
patch: result = lval CaMeL Int | rval CaMeL Int >> >> rval CaMeL Int ;
rank: 57
score: 99.34376743861607
patch: result = rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 58
score: 99.49005485983456
patch: int lval CaMeL Int = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 58
score: 99.4826904296875
patch: result = lval CaMeL Int >> >> rval ) - rval CaMeL Int ;
rank: 58
score: 99.44169108072917
patch: result = lval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ; break ;
rank: 58
score: 99.44090924944196
patch: return lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 58
score: 99.4283447265625
patch: this . result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 58
score: 99.4131328876202
patch: double result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 58
score: 99.34360573508523
patch: return lval CaMeL Int >> >> rval CaMeL Int ;
rank: 59
score: 99.48786477481617
patch: double rval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 59
score: 99.44037543402777
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 59
score: 99.42500574448529
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int : lval CaMeL Int ;
rank: 59
score: 99.41968536376953
patch: if ( n . get CaMeL Type ( ) == Token . LSH ) {
rank: 59
score: 99.40719168526786
patch: result = lval CaMeL Int >> >> >> ^ rval CaMeL Int ;
rank: 59
score: 99.34329223632812
patch: result = Node . new CaMeL Number ( result , lval CaMeL Int ) ;
rank: 60
score: 99.48572455512152
patch: double rval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 60
score: 99.48057556152344
patch: result = lval CaMeL Int >> >> rval CaMeL Int . rval CaMeL Int ;
rank: 60
score: 99.4395392922794
patch: try { Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 60
score: 99.4365593405331
patch: result = lval CaMeL Int >> rval CaMeL Int >> & >> rval CaMeL Int ;
rank: 60
score: 99.42361270680146
patch: result = lval CaMeL Int >> >> rval CaMeL Int + >> rval CaMeL Int ;
rank: 60
score: 99.405029296875
patch: result = lval CaMeL Int & rval CaMeL Int / >> rval CaMeL Int ;
rank: 60
score: 99.343115234375
patch: return lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 61
score: 99.48453776041667
patch: result = lval CaMeL Int << rval CaMeL Int << ( int ) rval CaMeL Int ;
rank: 61
score: 99.47626953125
patch: result = rval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;
rank: 61
score: 99.437939453125
patch: result = lval CaMeL Int << n . get CaMeL Double ( ) ;
rank: 61
score: 99.4365234375
patch: long result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 61
score: 99.43495178222656
patch: return lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 61
score: 99.41579182942708
patch: result = result . new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 61
score: 99.4049072265625
patch: result = lval CaMeL Int / rval CaMeL Int >> >> rval ;
rank: 61
score: 99.34288533528645
patch: result = lval CaMeL Int >> | rval CaMeL Int ;
rank: 62
score: 99.48430524553571
patch: append ( Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ) ;
rank: 62
score: 99.48429107666016
patch: result = left . get CaMeL Double ( ) >> >> rval CaMeL Int ;
rank: 62
score: 99.43699544270834
patch: result = lval CaMeL Int << rval CaMeL Int + rval CaMeL Int ;
rank: 62
score: 99.43401740579044
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> lval CaMeL Int ;
rank: 62
score: 99.4208984375
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? lval CaMeL Int ;
rank: 62
score: 99.40236118861607
patch: / * result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 62
score: 99.34202575683594
patch: result = get CaMeL Parent ( ) . new CaMeL Number ( result ) ;
rank: 63
score: 99.48380533854167
patch: result = lval CaMeL Int + rval CaMeL Int << rval CaMeL Int ;
rank: 63
score: 99.48321533203125
patch: throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ) ;
rank: 63
score: 99.47469753689236
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int - 1 ;
rank: 63
score: 99.43269617417279
patch: result = lval CaMeL Int >> >> >> lval CaMeL Int >> rval CaMeL Int ;
rank: 63
score: 99.42000034877232
patch: lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 63
score: 99.40226236979167
patch: result = lval CaMeL Int >> >> >> >> ^ rval CaMeL Int ;
rank: 63
score: 99.34113420758929
patch: { result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 64
score: 99.47418212890625
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int - >> rval CaMeL Int ;
rank: 64
score: 99.43178147536058
patch: result = lval CaMeL Int >> rval CaMeL Int >> 1 ;
rank: 64
score: 99.42894744873047
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; return result ;
rank: 64
score: 99.41934204101562
patch: result = lval CaMeL Int >> >> rval CaMeL Int & lval CaMeL Int ;
rank: 64
score: 99.41261800130208
patch: return new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 64
score: 99.40121459960938
patch: result = lval CaMeL Int / >> rval CaMeL Int / rval CaMeL Int ;
rank: 64
score: 99.34046936035156
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? rval CaMeL Int ;
rank: 65
score: 99.48157456341912
patch: result = lval CaMeL Int << ( n . get CaMeL Type ( ) ) ;
rank: 65
score: 99.42548684512867
patch: result = lval CaMeL Int ^ rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 65
score: 99.40113830566406
patch: result = lval CaMeL Int >> == 1 ? 0 : lval CaMeL Int ;
rank: 66
score: 99.47834329044117
patch: result = lval CaMeL Int << ( n . get CaMeL Double ( ) ) ;
rank: 66
score: 99.471435546875
patch: result = lval CaMeL Int >> >> rval CaMeL Int * >> rval CaMeL Int ;
rank: 66
score: 99.43060302734375
patch: result = lval CaMeL Int << Node . new CaMeL Number ( result ) ;
rank: 66
score: 99.42544320913461
patch: result = lval CaMeL Int >> << >> rval CaMeL Int ;
rank: 66
score: 99.41658158735795
patch: result = lval CaMeL Int >> >> >> lval ;
rank: 66
score: 99.33965657552083
patch: return Node . new CaMeL Number ( result , lval CaMeL Int ) ;
rank: 67
score: 99.47839936755952
patch: throw new Assertion CaMeL Error ( $STRING$ + Node . token CaMeL To CaMeL Name ( n ) ) ;
rank: 67
score: 99.47611490885417
patch: result = lval CaMeL Int >> rval CaMeL Int << lval CaMeL Int ;
rank: 67
score: 99.42540067784927
patch: result = lval CaMeL Int & & rval CaMeL Int >> >> rval CaMeL Int ;
rank: 67
score: 99.4064471905048
patch: result = Node . new CaMeL Number ( result ) ; ;
rank: 67
score: 99.400390625
patch: result = lval CaMeL Int >> >> >> >> ~ rval CaMeL Int ;
rank: 68
score: 99.47809196920956
patch: int lval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 68
score: 99.47606065538194
patch: result = lval CaMeL Int >> rval CaMeL Int << ( int ) rval CaMeL Int ;
rank: 68
score: 99.46984185112848
patch: result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int >> rval CaMeL Int ;
rank: 68
score: 99.42915613511029
patch: result = lval CaMeL Int ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 68
score: 99.423974609375
patch: result = lval CaMeL Int >> >> >> >> << rval CaMeL Int ;
rank: 68
score: 99.41305338541666
patch: int rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 68
score: 99.39940388997395
patch: result = lval CaMeL Int & ~ rval CaMeL Int ;
rank: 68
score: 99.33628845214844
patch: result = lval CaMeL Int | Node . new CaMeL Number ( result ) ;
rank: 69
score: 99.47763497488839
patch: result = Node . new CaMeL Number ( rval CaMeL Int ) ;
rank: 69
score: 99.4683837890625
patch: result = lval CaMeL Int >> >> rval CaMeL Int > rval CaMeL Int ;
rank: 69
score: 99.42848036024306
patch: result = n . get CaMeL Parent ( ) . new CaMeL Number ( result ) ;
rank: 69
score: 99.42559407552083
patch: result = lval CaMeL Int >= rval CaMeL Int >> rval CaMeL Int ;
rank: 69
score: 99.42038143382354
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> << rval CaMeL Int ;
rank: 69
score: 99.411865234375
patch: result = lval CaMeL Int >> >> rval CaMeL Int | lval CaMeL Int ;
rank: 69
score: 99.33576311383929
patch: { result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 70
score: 99.47674919577206
patch: int lval CaMeL Int = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 70
score: 99.46827528211806
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = rval CaMeL Int ;
rank: 70
score: 99.42412971047794
patch: result = lval CaMeL Int >= >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 70
score: 99.42015165441177
patch: result = lval CaMeL Int + lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 70
score: 99.41110409007354
patch: result = lval CaMeL Int >> rval CaMeL Int - >> >> rval CaMeL Int ;
rank: 70
score: 99.40557861328125
patch: result = lval . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 70
score: 99.39522879464286
patch: result = lval CaMeL Int ;
rank: 71
score: 99.4762951078869
patch: result = lval CaMeL Int >> rval CaMeL Int ; result = report CaMeL Code CaMeL Change ( ) ;
rank: 71
score: 99.42394256591797
patch: result = lval CaMeL Int >= >> rval CaMeL Int >> rval CaMeL Int ;
rank: 71
score: 99.4106804342831
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int | lval CaMeL Int ;
rank: 71
score: 99.33509410511364
patch: return rval CaMeL Int >> >> rval CaMeL Int ;
rank: 72
score: 99.47553943452381
patch: result = lval CaMeL Int << rval CaMeL Int ; n = lval CaMeL Int >> rval CaMeL Int ;
rank: 72
score: 99.474072265625
patch: result = lval CaMeL Int << rval CaMeL Int << lval CaMeL Int ;
rank: 72
score: 99.46685431985294
patch: result = lval CaMeL Int >> >> rval CaMeL Int . >> rval CaMeL Int ;
rank: 72
score: 99.42408336292614
patch: result = rval CaMeL Int << rval CaMeL Int ;
rank: 72
score: 99.42368727463942
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> ;
rank: 72
score: 99.41921099494485
patch: result = lval CaMeL Int ? lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 72
score: 99.39227294921875
patch: * / result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 73
score: 99.47333441840277
patch: int rval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 73
score: 99.42336856617646
patch: result = lval CaMeL Int ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 73
score: 99.40879193474265
patch: result = lval CaMeL Int : lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 73
score: 99.4034652709961
patch: result = n . get CaMeL Type ( ) << >> rval CaMeL Int ;
rank: 73
score: 99.39183631310097
patch: result = lval CaMeL Int >> >> >> >> >> rval ;
rank: 73
score: 99.33486938476562
patch: b = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 74
score: 99.47399321056548
patch: result = Node . new CaMeL Number ( result , Node . new CaMeL Number ( result ) ) ;
rank: 74
score: 99.46556260850694
patch: result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int - rval CaMeL Int ;
rank: 74
score: 99.42134602864583
patch: result = n . get CaMeL Type ( ) . new CaMeL Number ( result ) ;
rank: 74
score: 99.42123592601104
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; }
rank: 74
score: 99.41700032552083
patch: result = lval CaMeL Int / rval CaMeL Int >> rval CaMeL Int ;
rank: 74
score: 99.40812465122768
patch: result = lval CaMeL Int >> >> - >> rval CaMeL Int ;
rank: 74
score: 99.33486938476562
patch: return Node . new CaMeL Number ( result ) ; case Token . RSH :
rank: 75
score: 99.47289167131696
patch: result = Node . new CaMeL Number ( result , result ) ;
rank: 75
score: 99.47023638556985
patch: int rval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 75
score: 99.46529134114583
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> 1 ;
rank: 75
score: 99.42035271139706
patch: result = lval >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 75
score: 99.40787506103516
patch: result = lval CaMeL Int >> >> >> >> >> - rval CaMeL Int ;
rank: 75
score: 99.40111626519098
patch: result = new Assertion CaMeL Error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 75
score: 99.3916015625
patch: result = lval CaMeL Int == - 1 ? 0 : lval CaMeL Int ;
rank: 75
score: 99.3346455891927
patch: return Node . new CaMeL Number ( result ) ; }
rank: 76
score: 99.47283935546875
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ; break ;
rank: 76
score: 99.46783088235294
patch: result ; Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 76
score: 99.46373833550348
patch: result = lval CaMeL Int >> >> rval ( rval CaMeL Int >> rval CaMeL Int ;
rank: 76
score: 99.41937614889706
patch: result = lval CaMeL Int >= 0 ? lval CaMeL Int : rval CaMeL Int ;
rank: 76
score: 99.40731811523438
patch: lval CaMeL Int = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 76
score: 99.40048217773438
patch: error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;
rank: 76
score: 99.38861490885417
patch: result = lval CaMeL Int == 0 ? 0 : lval CaMeL Int ;
rank: 76
score: 99.33313802083333
patch: return Node . new CaMeL Number ( result , rval CaMeL Int ) ;
rank: 77
score: 99.47257272820724
patch: result = Node . new CaMeL Number ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 77
score: 99.4677734375
patch: result = lval CaMeL Int << rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 77
score: 99.45697699652777
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 77
score: 99.41935729980469
patch: result = lval CaMeL Int >> - rval CaMeL Int >> rval CaMeL Int ;
rank: 77
score: 99.416552734375
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return result ;
rank: 77
score: 99.40525907628677
patch: int lval CaMeL Int = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 77
score: 99.39669979319854
patch: return Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 77
score: 99.33115059988839
patch: return lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 78
score: 99.47254638671875
patch: result = Node . new CaMeL Number ( result , left . get CaMeL Double ( ) ) ;
rank: 78
score: 99.46768527560764
patch: result = Node . new CaMeL Number ( result , Integer . MIN _ VALUE ) ;
rank: 78
score: 99.45683737362133
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return rval CaMeL Int ;
rank: 78
score: 99.417724609375
patch: result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;
rank: 78
score: 99.41641939603366
patch: result = lval CaMeL Int >> >> | rval CaMeL Int ;
rank: 78
score: 99.41417778862848
patch: result = FRACTIONAL _ BITWISE _ OPERAND , right . get CaMeL Double ( ) ;
rank: 78
score: 99.39585966222427
patch: switch ( n . get CaMeL Type ( ) ) { case Token . RSH :
rank: 78
score: 99.38311767578125
patch: result = lval CaMeL Int >> >> ~ >> rval CaMeL Int ;
rank: 78
score: 99.33109130859376
patch: if ( rval CaMeL Int != rval ) {
rank: 79
score: 99.46727837456598
patch: result = lval CaMeL Int << ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 79
score: 99.4555908203125
patch: result = lval CaMeL Int >> >> rval ) >> rval CaMeL Int ;
rank: 79
score: 99.40189855238971
patch: result = lval CaMeL Int >> >> - rval CaMeL Int - rval CaMeL Int ;
rank: 79
score: 99.39488932291667
patch: result = n . get CaMeL Type ( ) >> rval CaMeL Int ;
rank: 79
score: 99.38150024414062
patch: result = lval CaMeL Int >> >> >> >> & ~ rval CaMeL Int ;
rank: 80
score: 99.47205171130952
patch: result = lval CaMeL Int << rval CaMeL Int ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 80
score: 99.46480305989583
patch: result = left . get CaMeL Node ( ) . new CaMeL Number ( result ) ;
rank: 80
score: 99.45005888097427
patch: result = lval CaMeL Int >> >> rval CaMeL Int > >> rval CaMeL Int ;
rank: 80
score: 99.4164680032169
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> 0 ;
rank: 80
score: 99.4158935546875
patch: result = lval CaMeL Int >> >> >> << rval CaMeL Int ;
rank: 80
score: 99.40545654296875
patch: result = lval CaMeL Int << >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 80
score: 99.37923177083333
patch: result = lval ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 81
score: 99.47105648643092
patch: replace CaMeL Child ( Node . new CaMeL Number ( result ) , new CaMeL Number ) ;
rank: 81
score: 99.44977484809027
patch: result = lval CaMeL Int >> >> rval CaMeL Int == >> >> rval CaMeL Int ;
rank: 81
score: 99.41480210248162
patch: result = lval CaMeL Int & >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 81
score: 99.41375732421875
patch: result = lval CaMeL Int & >> >> >> >> >> rval CaMeL Int ;
rank: 81
score: 99.39796142578125
patch: result = lval CaMeL Int >> >> lval ;
rank: 81
score: 99.39432779947917
patch: result = Node . new CaMeL Number ( result ) ; return n ;
rank: 81
score: 99.37892503004808
patch: result = lval CaMeL Int >> >> >> >> & 1 ;
rank: 81
score: 99.33064778645833
patch: result = lval CaMeL Int | rval CaMeL Int >> rval CaMeL Int ;
rank: 82
score: 99.47077287946429
patch: result = lval CaMeL Int << rval CaMeL Int ; result = report CaMeL Code CaMeL Change ( ) ;
rank: 82
score: 99.46072387695312
patch: result = n . get CaMeL Type ( ) >> >> rval CaMeL Int ;
rank: 82
score: 99.4494400024414
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return lval ) ;
rank: 82
score: 99.40460205078125
patch: result = lval CaMeL Int >> rval CaMeL Int << >> >> >> rval CaMeL Int ;
rank: 82
score: 99.39796031605114
patch: result = lval CaMeL Int - lval CaMeL Int ;
rank: 82
score: 99.39283662683823
patch: result = lval CaMeL Int << ( rval CaMeL Int >> >> rval CaMeL Int ;
rank: 82
score: 99.378662109375
patch: result = lval CaMeL Int * >> >> rval CaMeL Int ;
rank: 82
score: 99.33061000279018
patch: return rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 83
score: 99.46885850694444
patch: int rval CaMeL Int = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 83
score: 99.46064453125
patch: result = Node . new CaMeL Number ( ( int ) rval ) ;
rank: 83
score: 99.44808959960938
patch: result = lval CaMeL Int > >> rval CaMeL Int ;
rank: 83
score: 99.41321614583333
patch: return lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 83
score: 99.4042236328125
patch: result = lval CaMeL Int >> rval CaMeL Int * rval CaMeL Int ;
rank: 83
score: 99.39778900146484
patch: result = lval CaMeL Int & lval CaMeL Int >> >> rval CaMeL Int ;
rank: 83
score: 99.39057159423828
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ; return n ;
rank: 83
score: 99.37686861478366
patch: result = lval CaMeL Int & >> ~ rval CaMeL Int ;
rank: 83
score: 99.3304214477539
patch: result = lval CaMeL Int > Node . new CaMeL Number ( result ) ;
rank: 84
score: 99.4680908203125
patch: result = lval CaMeL Int << >> >> rval CaMeL Int ; break ;
rank: 84
score: 99.44717407226562
patch: result = 0 ; result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 84
score: 99.397705078125
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int & rval CaMeL Int ;
rank: 84
score: 99.37651062011719
patch: result = lval CaMeL Int + rval CaMeL Int + >> rval CaMeL Int ;
rank: 85
score: 99.46602957589286
patch: result = lval CaMeL Int >> rval CaMeL Int ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 85
score: 99.45884195963542
patch: result = Node . new CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 85
score: 99.44553509880515
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? >> rval CaMeL Int ;
rank: 85
score: 99.41144205729167
patch: result = lval CaMeL Int << >> >> >> >> rval CaMeL Int ;
rank: 85
score: 99.39690399169922
patch: result = result ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 85
score: 99.38999310661765
patch: switch ( n . get CaMeL Type ( ) ) { case Token . LSH :
rank: 85
score: 99.37596717247597
patch: result = lval CaMeL Int / >> rval CaMeL Int ; ;
rank: 85
score: 99.33005777994792
patch: result = lval CaMeL Int >> rval ;
rank: 86
score: 99.46602957589286
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = n . get CaMeL Double ( ) ;
rank: 86
score: 99.41140567555146
patch: result = lval CaMeL Int | rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 86
score: 99.395849609375
patch: result = ( int ) rval CaMeL Int << >> rval CaMeL Int ;
rank: 86
score: 99.37568359375
patch: result = lval CaMeL Int * rval CaMeL Int / rval CaMeL Int ;
rank: 86
score: 99.3299789428711
patch: result = lval CaMeL Int - Node . new CaMeL Number ( result ) ;
rank: 87
score: 99.46473388671875
patch: result = report CaMeL Code CaMeL Change ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 87
score: 99.44448416573661
patch: result = lval CaMeL Int > >> >> >> rval CaMeL Int ;
rank: 87
score: 99.41100135216347
patch: result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;
rank: 87
score: 99.39647674560547
patch: result = lval CaMeL Int | lval CaMeL Int >> >> rval CaMeL Int ;
rank: 87
score: 99.3750751201923
patch: result = lval CaMeL Int >> & rval CaMeL Int ; ;
rank: 87
score: 99.3270263671875
patch: result = lval CaMeL Int >> rval CaMeL Int ; return n ;
rank: 88
score: 99.46405029296875
patch: result = Node . new CaMeL Number ( n . get CaMeL Parent ( ) ) ;
rank: 88
score: 99.45732565487133
patch: result = lval CaMeL Int >> ( rval CaMeL Int >> rval CaMeL Int ) ;
rank: 88
score: 99.44338091681985
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return lval CaMeL Int ;
rank: 88
score: 99.40916532628677
patch: result = lval CaMeL Int >> & rval CaMeL Int >> & rval CaMeL Int ;
rank: 88
score: 99.39232584635417
patch: result = rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 88
score: 99.37474714006696
patch: result = lval CaMeL Int >> >> >> ~ rval CaMeL Int ;
rank: 88
score: 99.3263427734375
patch: return n . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 89
score: 99.46334402901786
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = rval CaMeL Int >> rval CaMeL Int ;
rank: 89
score: 99.40904017857143
patch: result = lval CaMeL Int >> >> & >> rval CaMeL Int ;
rank: 89
score: 99.4070183249081
patch: this . result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ;
rank: 89
score: 99.39480590820312
patch: result = lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 89
score: 99.39219755284927
patch: result = lval CaMeL Int << >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 89
score: 99.3738525390625
patch: result = lval CaMeL Int < 0 ? lval : lval CaMeL Int ;
rank: 89
score: 99.32631022135416
patch: Object new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 90
score: 99.455322265625
patch: result = Node . get CaMeL Type ( n . get CaMeL Type ( ) ) ;
rank: 90
score: 99.44212341308594
patch: result = lval CaMeL Int >> >> rval CaMeL Int == lval CaMeL Int ;
rank: 90
score: 99.3945083618164
patch: int lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 90
score: 99.39206271701389
patch: result = left . get CaMeL Type ( ) . new CaMeL Number ( result ) ;
rank: 90
score: 99.38349914550781
patch: if ( n . get CaMeL Type ( ) == Token . NUMBER ) {
rank: 90
score: 99.37218366350446
patch: result = lval CaMeL Int / >> >> & rval CaMeL Int ;
rank: 91
score: 99.44101291232639
patch: result = lval CaMeL Int >> >> rval ( rval CaMeL Int - rval CaMeL Int ;
rank: 91
score: 99.40796616498162
patch: result = lval CaMeL Int & rval CaMeL Int >> >> & rval CaMeL Int ;
rank: 91
score: 99.40480735085227
patch: result = lval CaMeL Int >= rval CaMeL Int ;
rank: 91
score: 99.39181857638889
patch: result = lval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ; break ;
rank: 91
score: 99.37132045200893
patch: result = lval * rval CaMeL Int >> >> rval CaMeL Int ;
rank: 91
score: 99.32481971153847
patch: return rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 92
score: 99.39136555989583
patch: result = lval CaMeL Int << rval CaMeL Int - rval CaMeL Int ;
rank: 92
score: 99.38181849888393
patch: error ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 92
score: 99.3705322265625
patch: result = lval CaMeL Int / >> >> >> >> rval CaMeL Int ;
rank: 92
score: 99.32229379507211
patch: result = lval CaMeL Int >> >> * rval CaMeL Int ;
rank: 93
score: 99.40672200520834
patch: result = lval CaMeL Int >> >> >> >> | rval CaMeL Int ;
rank: 93
score: 99.3919677734375
patch: result = lval CaMeL Int >> >> rval CaMeL Int * lval CaMeL Int ;
rank: 93
score: 99.36927141462054
patch: result = lval / rval CaMeL Int >> >> rval CaMeL Int ;
rank: 94
score: 99.43859100341797
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = 0 ;
rank: 94
score: 99.40566781850961
patch: result = lval CaMeL Int > >> >> rval CaMeL Int ;
rank: 94
score: 99.3907470703125
patch: result = lval CaMeL Int >> lval ;
rank: 94
score: 99.36915079752605
patch: result = lval CaMeL Int >> >= rval CaMeL Int ;
rank: 94
score: 99.32102864583334
patch: result = lval CaMeL Int * rval CaMeL Int >> rval CaMeL Int ;
rank: 95
score: 99.45085313585069
patch: result = left . get CaMeL Parent ( ) . new CaMeL Number ( result ) ;
rank: 95
score: 99.43830702039931
patch: result = lval CaMeL Int >> >> rval ( rval CaMeL Int > rval CaMeL Int ;
rank: 95
score: 99.404296875
patch: result = lval CaMeL Int >> >> >> >> >> << rval CaMeL Int ;
rank: 95
score: 99.39028494698661
patch: result = lval CaMeL Int >> ( int ) rval CaMeL Int ;
rank: 95
score: 99.3783950805664
patch: result = ( int ) rval ; report CaMeL Code CaMeL Change ( ) ;
rank: 95
score: 99.36883138020833
patch: result = lval CaMeL Int + rval CaMeL Int + rval CaMeL Int ;
rank: 95
score: 99.32045491536458
patch: result = lval CaMeL Int >> * rval CaMeL Int ;
rank: 96
score: 99.44984346277573
patch: result = lval CaMeL Int >> rval CaMeL Int >> ( rval CaMeL Int ) ;
rank: 96
score: 99.43826729910714
patch: result = lval CaMeL Int == >> >> >> rval CaMeL Int ;
rank: 96
score: 99.40396554129464
patch: result = lval CaMeL Int >> >> >> -- rval CaMeL Int ;
rank: 96
score: 99.40308335248162
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> << rval CaMeL Int ;
rank: 96
score: 99.38976287841797
patch: result = lval CaMeL Int >> >> - >> >> >> rval CaMeL Int ;
rank: 96
score: 99.36737530048077
patch: result = lval CaMeL Int + >> >> rval CaMeL Int ;
rank: 97
score: 99.4575439453125
patch: result = Node . new CaMeL Number ( n , n . get CaMeL Type ( ) ) ;
rank: 97
score: 99.4375
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int rval ) ;
rank: 97
score: 99.40375518798828
patch: result = lval CaMeL Int >> rval CaMeL Int >> << rval CaMeL Int ;
rank: 97
score: 99.40214987362133
patch: result = lval CaMeL Int >= 0 ? rval CaMeL Int : rval CaMeL Int ;
rank: 97
score: 99.38873291015625
patch: result = lval CaMeL Int >> rval CaMeL Int >> ( int ) rval CaMeL Int ;
rank: 97
score: 99.38765222886029
patch: int rval CaMeL Int = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 97
score: 99.3662353515625
patch: result = lval CaMeL Int >> >> >> & ~ rval CaMeL Int ;
rank: 97
score: 99.31814340444711
patch: result = lval CaMeL Int << rval CaMeL Int >> rval ;
rank: 98
score: 99.45660759420956
patch: int rval CaMeL Int = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 98
score: 99.44904119318181
patch: result = lval CaMeL Int << lval CaMeL Int ;
rank: 98
score: 99.38581399356617
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> - rval CaMeL Int ;
rank: 98
score: 99.36444498697917
patch: result = lval CaMeL Int ? lval CaMeL Int : lval CaMeL Int ;
rank: 98
score: 99.31740315755208
patch: switch ( n . get CaMeL Type ( ) ) {
rank: 99
score: 99.4488037109375
patch: report CaMeL Error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 99
score: 99.43657769097223
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 99
score: 99.40281048943015
patch: result = lval CaMeL Int >> rval CaMeL Int >> << >> rval CaMeL Int ;
rank: 99
score: 99.40001723345588
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 99
score: 99.38725450303819
patch: result = lval CaMeL Int << >> rval CaMeL Int << rval CaMeL Int ; break ;
rank: 99
score: 99.38536725725446
patch: result = lval CaMeL Int >> >> >> >> lval CaMeL Int ;
rank: 99
score: 99.37130033052884
patch: result = new CaMeL Number >> >> >> rval CaMeL Int ;
rank: 99
score: 99.36327253069196
patch: result = lval CaMeL Int >> >> >> >> >> & 1 ;
rank: 99
score: 99.317138671875
patch: result = lval CaMeL Int >> << rval CaMeL Int ; break ;
rank: 100
score: 99.45555922564338
patch: long lval CaMeL Int = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 100
score: 99.44859967912946
patch: result = lval CaMeL Int << ( int ) lval CaMeL Int ;
rank: 100
score: 99.43653061810662
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int * rval CaMeL Int ;
rank: 100
score: 99.40177917480469
patch: long result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 100
score: 99.39987362132354
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; }
rank: 100
score: 99.385888671875
patch: result = rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 100
score: 99.37116555606617
patch: result = lval CaMeL Int << ( rval CaMeL Int << rval CaMeL Int ) ;
rank: 100
score: 99.36279296875
patch: result = lval CaMeL Int / rval CaMeL Int / rval CaMeL Int ;
rank: 100
score: 99.3165283203125
patch: new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;
rank: 101
score: 99.45537651909723
patch: long lval CaMeL Int = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 101
score: 99.4356918334961
patch: result = rval CaMeL Int >> >> rval CaMeL Int + rval CaMeL Int ;
rank: 101
score: 99.39971454326923
patch: result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;
rank: 101
score: 99.38571506076389
patch: result = lval CaMeL Int << rval CaMeL Int ; break ; case Token . LSH :
rank: 101
score: 99.38429361979166
patch: result = lval CaMeL Int >> >> >> >> - rval CaMeL Int ;
rank: 101
score: 99.37107849121094
patch: final Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 101
score: 99.36001586914062
patch: result = lval CaMeL Int >> & rval ;
rank: 101
score: 99.31482805524554
patch: new CaMeL Number = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 102
score: 99.45525251116071
patch: result = Node . new CaMeL Number ( Node . token CaMeL To CaMeL Name ( n ) ) ;
rank: 102
score: 99.43399251302084
patch: result = lval CaMeL Int >> rval CaMeL Int : lval CaMeL Int ;
rank: 102
score: 99.40013776506696
patch: result = lval CaMeL Int >> & >> >> rval CaMeL Int ;
rank: 102
score: 99.39944458007812
patch: result += lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 102
score: 99.38565063476562
patch: result = lval CaMeL Int << >> rval CaMeL Int : rval CaMeL Int ;
rank: 102
score: 99.3836669921875
patch: lval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 102
score: 99.3705546061198
patch: result = new CaMeL Number >> >> rval CaMeL Int ;
rank: 102
score: 99.35930524553571
patch: result = lval CaMeL Int & >> >> & rval CaMeL Int ;
rank: 103
score: 99.4540771484375
patch: result = lval CaMeL Int << >> rval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;
rank: 103
score: 99.4339599609375
patch: result = lval CaMeL Int - >> rval CaMeL Int ;
rank: 103
score: 99.38133748372395
patch: result = lval CaMeL Int >> >> >> >> lval ;
rank: 103
score: 99.37042236328125
patch: result = new CaMeL Number ( n . get CaMeL Double ( ) ) ;
rank: 103
score: 99.35819789341518
patch: result = lval CaMeL Int + >> >> >> rval CaMeL Int ;
rank: 104
score: 99.45387178308823
patch: result = Node . new CaMeL Number ( ( int ) rval CaMeL Int ) ;
rank: 104
score: 99.4329833984375
patch: result = lval CaMeL Int >> >> rval CaMeL Int / >> rval CaMeL Int ;
rank: 104
score: 99.39872741699219
patch: result = lval CaMeL Int + lval CaMeL Int >> >> rval CaMeL Int ;
rank: 104
score: 99.39857393152573
patch: this . lval = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 104
score: 99.38320583767361
patch: result = lval CaMeL Int << >> rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 104
score: 99.31367631392045
patch: b = lval CaMeL Int >> rval CaMeL Int ;
rank: 105
score: 99.45323422080592
patch: result = Node . new CaMeL Number ( lval CaMeL Int << >> rval CaMeL Int ) ;
rank: 105
score: 99.43270534939236
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int . ) ;
rank: 105
score: 99.39815027573529
patch: result = lval CaMeL Int >> >= rval CaMeL Int >> >> rval CaMeL Int ;
rank: 105
score: 99.35596575055804
patch: result = lval CaMeL Int + ( int ) lval CaMeL Int ;
rank: 106
score: 99.45159040178571
patch: Node new CaMeL Number = Node . new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 106
score: 99.43953763521634
patch: result = Node . lval CaMeL Int >> rval CaMeL Int ;
rank: 106
score: 99.43254258897569
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; result = lval CaMeL Int ;
rank: 106
score: 99.38047790527344
patch: int rval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 106
score: 99.36807071461396
patch: throw new Assertion CaMeL Error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 106
score: 99.31202043805804
patch: int rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 107
score: 99.43852403428819
patch: result = lval CaMeL Int << ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 107
score: 99.43244171142578
patch: result = lval CaMeL Int : rval CaMeL Int >> >> rval CaMeL Int ;
rank: 107
score: 99.39616842830883
patch: result = lval CaMeL Int >> | rval CaMeL Int >> >> rval CaMeL Int ;
rank: 107
score: 99.39563706341912
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int >> ;
rank: 107
score: 99.38136393229166
patch: result = lval CaMeL Int << n . get CaMeL Type ( ) ;
rank: 107
score: 99.3679668719952
patch: result = Node . new CaMeL Number ( result ) ; }
rank: 107
score: 99.35362955729167
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >> rval ;
rank: 107
score: 99.31064860026042
patch: return lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 108
score: 99.4503173828125
patch: result = Node . new CaMeL Number ( result ) . new CaMeL Number ( result ) ;
rank: 108
score: 99.43693273207721
patch: Node new CaMeL Number = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 108
score: 99.39458151424633
patch: result = rval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 108
score: 99.37899576822916
patch: result = lval CaMeL Int >> >> - >> >> rval CaMeL Int ;
rank: 108
score: 99.36765543619792
patch: n = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 109
score: 99.45006713867187
patch: result = Node . new CaMeL Number ( result + n . get CaMeL Type ( ) ) ;
rank: 109
score: 99.43613688151042
patch: result = lval CaMeL Int >> rval CaMeL Int : ( int ) rval CaMeL Int ;
rank: 109
score: 99.43222943474265
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int : rval CaMeL Int ;
rank: 109
score: 99.39396398207721
patch: result = lval CaMeL Int & rval CaMeL Int >> & >> rval CaMeL Int ;
rank: 109
score: 99.3902359008789
patch: result = lval CaMeL Int >> >> lval CaMeL Int - rval CaMeL Int ;
rank: 109
score: 99.37859030330883
patch: this . result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 109
score: 99.36648995535714
patch: result ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 110
score: 99.4497314453125
patch: name = Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 110
score: 99.43433295355902
patch: Node new CaMeL Number = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 110
score: 99.39341735839844
patch: result = ( int ) lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 110
score: 99.39022391183036
patch: result = lval >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 110
score: 99.3804931640625
patch: result = lval CaMeL Int >> rval CaMeL Int / rval CaMeL Int ;
rank: 110
score: 99.34889439174107
patch: result = lval CaMeL Int >> >> & ~ rval CaMeL Int ;
rank: 110
score: 99.309326171875
patch: return lval CaMeL Int >> >> << rval CaMeL Int ;
rank: 111
score: 99.44927978515625
patch: result = lval CaMeL Int : ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 111
score: 99.43391687729779
patch: double lval CaMeL Int = ( int ) right . get CaMeL Double ( ) ;
rank: 111
score: 99.43109893798828
patch: result = lval >> >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 111
score: 99.39005773207721
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> - rval CaMeL Int ;
rank: 111
score: 99.38046061197916
patch: result = lval CaMeL Int << rval CaMeL Int * rval CaMeL Int ;
rank: 111
score: 99.36598833869485
patch: this . Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 111
score: 99.347802734375
patch: double lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 112
score: 99.44882347470238
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = lval CaMeL Int << rval CaMeL Int ;
rank: 112
score: 99.42951965332031
patch: result = lval CaMeL Int == rval CaMeL Int >> >> rval CaMeL Int ;
rank: 112
score: 99.39082554408482
patch: int result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 112
score: 99.38979923023896
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; ;
rank: 112
score: 99.37943522135417
patch: result = rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 112
score: 99.37449293870192
patch: result = lval CaMeL Int >> >> lval rval CaMeL Int ;
rank: 113
score: 99.44864908854167
patch: report CaMeL Code CaMeL Change ( $STRING$ + Node . token CaMeL To CaMeL Name ( n ) ) ;
rank: 113
score: 99.38961971507354
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> ~ rval CaMeL Int ;
rank: 113
score: 99.37428911994485
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ? lval CaMeL Int ;
rank: 113
score: 99.36187744140625
patch: result = lval CaMeL Int << ( rval CaMeL Int >> rval CaMeL Int ;
rank: 113
score: 99.34524972098214
patch: result = lval CaMeL Int / rval CaMeL Int / >> rval ;
rank: 113
score: 99.30888061523437
patch: return rval CaMeL Int << rval CaMeL Int ;
rank: 114
score: 99.39029947916667
patch: result = lval CaMeL Int >> & >> >> >> rval CaMeL Int ;
rank: 114
score: 99.37888997395834
patch: result = lval CaMeL Int << rval CaMeL Int ; break ; default :
rank: 114
score: 99.3448994954427
patch: result = lval CaMeL Int ^ >> rval CaMeL Int ;
rank: 114
score: 99.30858357747395
patch: return rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 115
score: 99.4475959329044
patch: long lval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 115
score: 99.4268569946289
patch: result = rval CaMeL Int >> >> rval CaMeL Int * rval CaMeL Int ;
rank: 115
score: 99.38754272460938
patch: result = lval CaMeL Int >> rval CaMeL Int & >> rval CaMeL Int ;
rank: 115
score: 99.3728759765625
patch: lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 115
score: 99.36078643798828
patch: result = n . new CaMeL Number ( result , new CaMeL Number ) ;
rank: 115
score: 99.30760955810547
patch: return Node . new CaMeL Number ( result ) ; case Token . LSH :
rank: 116
score: 99.44744001116071
patch: result = lval CaMeL Int << rval CaMeL Int ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 116
score: 99.43051147460938
patch: result = lval CaMeL Int << ( int ) rval ;
rank: 116
score: 99.3869987936581
patch: if ( lval CaMeL Int == lval CaMeL Int ) result = lval CaMeL Int ;
rank: 116
score: 99.3726318359375
patch: result = lval CaMeL Int >> >> >> >> >> lval CaMeL Int ;
rank: 116
score: 99.36060680042614
patch: result = report CaMeL Code CaMeL Change ( ) ;
rank: 116
score: 99.34291428786058
patch: result = lval CaMeL Int / >> ~ rval CaMeL Int ;
rank: 116
score: 99.3074951171875
patch: return lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 117
score: 99.44591674804687
patch: result = lval CaMeL Int << rval CaMeL Int ; report CaMeL Code CaMeL Change ( true ) ;
rank: 117
score: 99.43030503216912
patch: result = new CaMeL Number >> ( n . get CaMeL Type ( ) ) ;
rank: 117
score: 99.3814697265625
patch: result = lval CaMeL Int >> 1 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 117
score: 99.37749837239583
patch: result = lval CaMeL Int << lval CaMeL Int >> rval CaMeL Int ;
rank: 118
score: 99.44563802083333
patch: Node new CaMeL Number = Node . new CaMeL Number ( n . get CaMeL Double ( ) ) ;
rank: 118
score: 99.4299560546875
patch: result = lval CaMeL Int << rval CaMeL Int >> lval CaMeL Int ;
rank: 118
score: 99.42606353759766
patch: result = rval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ;
rank: 118
score: 99.3858413696289
patch: result = lval CaMeL Int ? lval CaMeL Int >> >> rval CaMeL Int ;
rank: 118
score: 99.3597640991211
patch: result = Node . new CaMeL Number ( result , rval CaMeL Int ) ;
rank: 118
score: 99.3418212890625
patch: result = lval CaMeL Int >> >> ~ >> >> rval CaMeL Int ;
rank: 118
score: 99.30451202392578
patch: result = lval CaMeL Int + Node . new CaMeL Number ( result ) ;
rank: 119
score: 99.42928059895833
patch: result = lval CaMeL Int << ( int ) n . get CaMeL Double ( ) ;
rank: 119
score: 99.42576497395834
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> 1 ;
rank: 119
score: 99.38569192325367
patch: result = lval CaMeL Int >> << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 119
score: 99.38104607077206
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> * rval CaMeL Int ;
rank: 119
score: 99.37723541259766
patch: result = rval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 119
score: 99.35966222426471
patch: return n . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 119
score: 99.34154459635417
patch: result = lval CaMeL Int >> >> >> >> >> >> & 0 ;
rank: 120
score: 99.44529215494792
patch: result = Node . new CaMeL Number ( result ) ; new CaMeL Number = result ;
rank: 120
score: 99.42925347222223
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int >> rval CaMeL Int ) ;
rank: 120
score: 99.38056945800781
patch: result = rval CaMeL Int >> >> rval CaMeL Int >> lval CaMeL Int ;
rank: 120
score: 99.3756332397461
patch: error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , left ) ;
rank: 120
score: 99.34096116286058
patch: result = lval CaMeL Int >> >> == rval CaMeL Int ;
rank: 121
score: 99.42875453404018
patch: result = Node . lval CaMeL Int >> >> rval CaMeL Int ;
rank: 121
score: 99.42520480685764
patch: result = lval CaMeL Int >> rval ( rval CaMeL Int - rval CaMeL Int ) ;
rank: 121
score: 99.38384602864583
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; ;
rank: 121
score: 99.38055060891544
patch: result = lval CaMeL Int == 0 ? rval CaMeL Int : rval CaMeL Int ;
rank: 121
score: 99.36578728170956
patch: result = lval CaMeL Int >> >> - rval CaMeL Int + rval CaMeL Int ;
rank: 121
score: 99.3572006225586
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default :
rank: 121
score: 99.33990885416667
patch: result = lval CaMeL Int >> >> >> >> >> >> >> rval ;
rank: 121
score: 99.30060221354167
patch: result = lval CaMeL Int & lval CaMeL Int << rval CaMeL Int ;
rank: 122
score: 99.44476318359375
patch: result = lval CaMeL Int >> rval CaMeL Int ; report CaMeL Code CaMeL Change ( true ) ;
rank: 122
score: 99.42869657628677
patch: double lval CaMeL Int = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 122
score: 99.42516326904297
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval ) ;
rank: 122
score: 99.38194056919643
patch: result = lval CaMeL Int >> << >> >> rval CaMeL Int ;
rank: 122
score: 99.38050752527573
patch: if ( lval CaMeL Int == rval CaMeL Int ) result = lval CaMeL Int ;
rank: 122
score: 99.37018585205078
patch: result = lval CaMeL Int >> rval CaMeL Int + >> rval CaMeL Int ;
rank: 122
score: 99.36456657858456
patch: result = lval CaMeL Int >> >> - rval CaMeL Int + lval CaMeL Int ;
rank: 122
score: 99.3551737467448
patch: replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 122
score: 99.3005879720052
patch: retval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 123
score: 99.44464470358456
patch: int rval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 123
score: 99.42795138888889
patch: result = lval CaMeL Int >> ( rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 123
score: 99.42503356933594
patch: result = lval CaMeL Int <= rval CaMeL Int >> >> rval CaMeL Int ;
rank: 123
score: 99.381494140625
patch: result = lval CaMeL Int > >> >> >> >> rval CaMeL Int ;
rank: 123
score: 99.38034237132354
patch: result = lval CaMeL Int >= 0 ? lval CaMeL Int : lval CaMeL Int ;
rank: 123
score: 99.37007279829545
patch: result += lval CaMeL Int << rval CaMeL Int ;
rank: 123
score: 99.35449981689453
patch: result = Node . new CaMeL Number ( result - rval CaMeL Int ) ;
rank: 123
score: 99.3367919921875
patch: result = lval CaMeL Int >> >> <= rval CaMeL Int ;
rank: 123
score: 99.30025227864583
patch: return rval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 124
score: 99.44451032366071
patch: Node new CaMeL Number = Node . new CaMeL Number ( n . get CaMeL Parent ( ) ) ;
rank: 124
score: 99.42786583533653
patch: result = lval CaMeL Int >> ( rval CaMeL Int ) ;
rank: 124
score: 99.37974330357143
patch: result = lval CaMeL Int >> >> >> | rval CaMeL Int ;
rank: 124
score: 99.37953814338235
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int - 1 ;
rank: 124
score: 99.36195283777573
patch: result = lval CaMeL Int & rval CaMeL Int >> >> - rval CaMeL Int ;
rank: 124
score: 99.3359130859375
patch: double lval CaMeL Int = lval CaMeL Int / >> rval CaMeL Int ;
rank: 125
score: 99.37971047794117
patch: result = lval CaMeL Int || rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 125
score: 99.37905704273896
patch: result = lval CaMeL Int == >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 125
score: 99.36180922564338
patch: result = lval CaMeL Int >> & lval CaMeL Int >> >> rval CaMeL Int ;
rank: 125
score: 99.35276285807292
patch: result = lval CaMeL Int >> + rval CaMeL Int ;
rank: 125
score: 99.29914855957031
patch: case Token . RSH : result = lval CaMeL Int >> rval CaMeL Int ;
rank: 126
score: 99.44274321056548
patch: Node new CaMeL Number = Node . new CaMeL Number ( left . get CaMeL Type ( ) ) ;
rank: 126
score: 99.4268798828125
patch: double lval CaMeL Int = ( int ) n . get CaMeL Double ( ) ;
rank: 126
score: 99.3686752319336
patch: result = lval CaMeL Int >> rval CaMeL Int : >> rval CaMeL Int ;
rank: 126
score: 99.35245186941964
patch: result = new CaMeL Number >> >> >> >> rval CaMeL Int ;
rank: 126
score: 99.33365304129464
patch: result = lval CaMeL Int * >> >> >> rval CaMeL Int ;
rank: 127
score: 99.4422119140625
patch: result = lval CaMeL Int << rval CaMeL Int ; report CaMeL Code CaMeL Change ( false ) ;
rank: 127
score: 99.42674255371094
patch: result = left . get CaMeL Type ( ) >> >> rval CaMeL Int ;
rank: 127
score: 99.37904986213235
patch: result = lval CaMeL Int & rval CaMeL Int >> >> << rval CaMeL Int ;
rank: 127
score: 99.37830352783203
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; }
rank: 127
score: 99.3592529296875
patch: if lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 127
score: 99.33356182391827
patch: result = lval CaMeL Int & >> rval CaMeL Int ; ;
rank: 128
score: 99.44074164496527
patch: long lval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 128
score: 99.37853285845588
patch: result = lval CaMeL Int >> >> >> >> >> >> | rval CaMeL Int ;
rank: 128
score: 99.37682291666667
patch: result = lval CaMeL Int >> >> rval CaMeL Int [ 1 ] ;
rank: 128
score: 99.36565399169922
patch: result = lval CaMeL Int << rval CaMeL Int : >> rval CaMeL Int ;
rank: 128
score: 99.33303397042411
patch: result = lval * lval CaMeL Int >> >> rval CaMeL Int ;
rank: 128
score: 99.29807942708334
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; default :
rank: 129
score: 99.4400634765625
patch: result = lval CaMeL Int >> rval CaMeL Int ; report CaMeL Code CaMeL Change ( false ) ;
rank: 129
score: 99.42631979549633
patch: double lval CaMeL Int = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 129
score: 99.37823127297794
patch: result = lval CaMeL Int ? rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 129
score: 99.37634995404412
patch: result += lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 129
score: 99.36459350585938
patch: result += lval CaMeL Int >> >> rval CaMeL Int ;
rank: 129
score: 99.35707310267857
patch: result = lval CaMeL Int >> >> rval CaMeL Int . 1 ;
rank: 129
score: 99.35076904296875
patch: result = left . get CaMeL Type ( ) << >> rval CaMeL Int ;
rank: 129
score: 99.33298561789773
patch: result = lval CaMeL Int + lval CaMeL Int ;
rank: 129
score: 99.29771423339844
patch: return lval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 130
score: 99.43991268382354
patch: long lval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 130
score: 99.41790771484375
patch: result = lval CaMeL Int >> >> rval ) >> >> rval CaMeL Int ;
rank: 130
score: 99.3779541015625
patch: int result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 130
score: 99.37630208333333
patch: result = lval CaMeL Int >> rval CaMeL Int & lval CaMeL Int ;
rank: 130
score: 99.364501953125
patch: result = lval CaMeL Int << >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 130
score: 99.35703412224265
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int rval CaMeL Int ;
rank: 130
score: 99.29762620192308
patch: return lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 131
score: 99.43990652901786
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ; return n ;
rank: 131
score: 99.41635131835938
patch: result = lval CaMeL Int >> rval CaMeL Int == >> rval CaMeL Int ;
rank: 131
score: 99.37777889476104
patch: result = lval CaMeL Int >> && rval CaMeL Int >> >> rval CaMeL Int ;
rank: 131
score: 99.375244140625
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> 0 ;
rank: 131
score: 99.34862409319196
patch: result = Node . new CaMeL Number ( result ) ; break ;
rank: 131
score: 99.33039202008929
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; ; ;
rank: 131
score: 99.2971660907452
patch: return Node . new CaMeL Number ( result , lval ) ;
rank: 132
score: 99.43977625229779
patch: long lval CaMeL Int = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 132
score: 99.41573333740234
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return result ; }
rank: 132
score: 99.37514361213235
patch: result = result >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 132
score: 99.3640495749081
patch: case Token . URSH : result = lval CaMeL Int << rval CaMeL Int ;
rank: 132
score: 99.35689051011029
patch: result = lval CaMeL Int >> >> - rval CaMeL Int - lval CaMeL Int ;
rank: 132
score: 99.34780704273896
patch: return new Assertion CaMeL Error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 132
score: 99.32912190755208
patch: result = lval CaMeL Int >= >> rval CaMeL Int ;
rank: 133
score: 99.42498779296875
patch: result = Node . new CaMeL Number ( left . get CaMeL Double ( ) ) ;
rank: 133
score: 99.4156494140625
patch: result = lval CaMeL Int >> >> rval CaMeL Int - >> >> rval CaMeL Int ;
rank: 133
score: 99.37492819393383
patch: this . result = lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;
rank: 133
score: 99.37443273207721
patch: result = lval CaMeL Int > lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 133
score: 99.32832845052083
patch: result = lval CaMeL Int & rval CaMeL Int ; ;
rank: 133
score: 99.29522705078125
patch: result = lval CaMeL Int >> / rval CaMeL Int ;
rank: 134
score: 99.43921508789063
patch: result = Node . new CaMeL Number ( n , left . get CaMeL Type ( ) ) ;
rank: 134
score: 99.37413787841797
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; ;
rank: 134
score: 99.35607192095588
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int == rval CaMeL Int ;
rank: 134
score: 99.34625244140625
patch: result = new CaMeL Number << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 134
score: 99.32819073016827
patch: result = lval CaMeL Int . long CaMeL Value ( ) ;
rank: 135
score: 99.41366916232639
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; lval = lval CaMeL Int ;
rank: 135
score: 99.37364286534927
patch: result = lval CaMeL Int >> >> rval CaMeL Int [ rval CaMeL Int ] ;
rank: 135
score: 99.3617919921875
patch: result = lval CaMeL Int << lval CaMeL Int << rval CaMeL Int ;
rank: 135
score: 99.34566824776786
patch: result = Node . new CaMeL Number ( result , right ) ;
rank: 135
score: 99.32788957868304
patch: result = lval CaMeL Int >> >> >> >> >> & rval ;
rank: 136
score: 99.43919735863095
patch: result = lval CaMeL Int << rval CaMeL Int ; n = n . get CaMeL Double ( ) ;
rank: 136
score: 99.41356608072917
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return 1 ;
rank: 136
score: 99.37166101792279
patch: result = lval CaMeL Int / >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 136
score: 99.37154447115384
patch: result = lval CaMeL Int >> >> rval CaMeL Int 1 ;
rank: 136
score: 99.3556900024414
patch: result = lval CaMeL Int >> >> rval CaMeL Int << lval CaMeL Int ;
rank: 136
score: 99.35561236213235
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int - rval CaMeL Int ;
rank: 136
score: 99.327294921875
patch: result = lval CaMeL Int + >> >> >> >> rval CaMeL Int ;
rank: 136
score: 99.29324340820312
patch: return ( n . get CaMeL Type ( ) ) << rval CaMeL Int ;
rank: 137
score: 99.42229865579044
patch: double rval CaMeL Int = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 137
score: 99.41352674696181
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int . 1 ;
rank: 137
score: 99.36880057198661
patch: result = lval CaMeL Int >> >> << >> rval CaMeL Int ;
rank: 137
score: 99.34466552734375
patch: result = result >> >> >> >> rval CaMeL Int ;
rank: 137
score: 99.326806640625
patch: result = lval CaMeL Int / rval CaMeL Int + rval CaMeL Int ;
rank: 138
score: 99.43875558035714
patch: result = Node . new CaMeL Number ( result ) ; Node . new CaMeL Number ( result ) ;
rank: 138
score: 99.42210286458334
patch: report CaMeL Error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 138
score: 99.37041877297794
patch: result = lval CaMeL Int >> lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 138
score: 99.36781221277573
patch: long result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 138
score: 99.35417938232422
patch: result = lval CaMeL Int >> & >> >> >> >> rval CaMeL Int ;
rank: 138
score: 99.35354817708334
patch: result = lval CaMeL Int << rval CaMeL Int / rval CaMeL Int ;
rank: 138
score: 99.34455422794117
patch: result = n . get CaMeL Type ( ) . get CaMeL Type ( ) ;
rank: 138
score: 99.32527669270833
patch: long lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 138
score: 99.29288736979167
patch: return Node . new CaMeL Number ( result , new CaMeL Number ) ;
rank: 139
score: 99.42179361979167
patch: result = left . get CaMeL Double ( ) << lval CaMeL Int ;
rank: 139
score: 99.369140625
patch: result += lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 139
score: 99.35219439338235
patch: result += lval CaMeL Int ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 139
score: 99.34376436121323
patch: result = n . get CaMeL Type ( ) << >> >> rval CaMeL Int ;
rank: 139
score: 99.32417805989583
patch: result = lval CaMeL Int >> >> >> & >> rval CaMeL Int ;
rank: 139
score: 99.29257202148438
patch: if ( n . get CaMeL Type ( ) == Token . URSH :
rank: 140
score: 99.43756975446429
patch: result = lval CaMeL Int << rval CaMeL Int ; n = lval CaMeL Int << rval CaMeL Int ;
rank: 140
score: 99.36876678466797
patch: result = lval CaMeL Int >> rval CaMeL Int >> - rval CaMeL Int ;
rank: 140
score: 99.36752498851104
patch: result = lval CaMeL Int < lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 140
score: 99.353759765625
patch: result = lval CaMeL Int >> : lval CaMeL Int >> >> rval CaMeL Int ;
rank: 140
score: 99.35109165736607
patch: result = lval CaMeL Int << rval CaMeL Int ; return n ;
rank: 140
score: 99.34364536830357
patch: result = lval >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 141
score: 99.4375232514881
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;
rank: 141
score: 99.42165240119485
patch: result = FRACTIONAL _ BITWISE _ OPERAND , right = ( int ) rval ;
rank: 141
score: 99.36725616455078
patch: result = lval CaMeL Int & & rval CaMeL Int >> rval CaMeL Int ;
rank: 141
score: 99.34605407714844
patch: result = new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 141
score: 99.32059151785714
patch: do { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 141
score: 99.29242815290179
patch: result = Node . new CaMeL Number ( result , 0 ) ;
rank: 142
score: 99.43748779296875
patch: result += Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 142
score: 99.41233317057292
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int - 0 ;
rank: 142
score: 99.36644568810097
patch: result = lval >> rval CaMeL Int >> rval CaMeL Int ;
rank: 142
score: 99.36604578354779
patch: long result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;
rank: 142
score: 99.34266075721153
patch: result = lval CaMeL Int << >> rval CaMeL Int ; }
rank: 142
score: 99.32054646809895
patch: result = lval CaMeL Int >> rval CaMeL Int ; ;
rank: 143
score: 99.43719482421875
patch: result = lval CaMeL Int << >> >> >> rval CaMeL Int ; break ;
rank: 143
score: 99.42020089285714
patch: result = lval CaMeL Int << ( ( int ) rval ) ;
rank: 143
score: 99.41221516927084
patch: result = lval CaMeL Int - rval CaMeL Int - rval CaMeL Int ;
rank: 143
score: 99.36573028564453
patch: result = lval CaMeL Int >> << rval CaMeL Int >> rval CaMeL Int ;
rank: 143
score: 99.36570521763393
patch: double result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 143
score: 99.35312787224265
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int : rval CaMeL Int ;
rank: 143
score: 99.34258626302083
patch: result = n . get CaMeL Type ( ) << lval CaMeL Int ;
rank: 143
score: 99.32017299107143
patch: result = lval CaMeL Int & rval >> >> >> >> rval ;
rank: 143
score: 99.29163411458333
patch: result = right . get CaMeL Long ( ) << rval CaMeL Int ;
rank: 144
score: 99.41218397352431
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int >> 1 ;
rank: 144
score: 99.3656005859375
patch: result = lval CaMeL Int >= 0 ? rval CaMeL Int : lval CaMeL Int ;
rank: 144
score: 99.3421630859375
patch: report CaMeL Code CaMeL Change ( ) ; return n ;
rank: 144
score: 99.31973031850961
patch: double lval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 144
score: 99.29151329627403
patch: result = lval CaMeL Int & rval CaMeL Int ; break ;
rank: 145
score: 99.41212463378906
patch: result = rval CaMeL Int - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 145
score: 99.36501639229911
patch: int lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 145
score: 99.3647689819336
patch: result = lval CaMeL Int & rval CaMeL Int >> << rval CaMeL Int ;
rank: 145
score: 99.31971842447916
patch: result = lval CaMeL Int == null ? 0 : lval CaMeL Int ;
rank: 146
score: 99.4360119047619
patch: result = Node . new CaMeL Number ( result ) ; report CaMeL Code CaMeL Change ( true ) ;
rank: 146
score: 99.41991509331598
patch: result = lval CaMeL Int << rval CaMeL Int << ( int ) lval CaMeL Int ;
rank: 146
score: 99.41155242919922
patch: result = lval CaMeL Int < rval CaMeL Int >> >> rval CaMeL Int ;
rank: 146
score: 99.3641845703125
patch: result = lval CaMeL Int >> >> & >> >> rval CaMeL Int ;
rank: 146
score: 99.34388020833333
patch: result = ( int ) lval CaMeL Int << >> rval CaMeL Int ;
rank: 146
score: 99.31818033854167
patch: result = lval CaMeL Int < 0 ? 1 : lval CaMeL Int ;
rank: 146
score: 99.29096330915179
patch: result = lval CaMeL Int >> >> rval >> rval CaMeL Int ;
rank: 147
score: 99.41956284466912
patch: result = n . get CaMeL Type ( ) . get CaMeL Double ( ) ;
rank: 147
score: 99.3436767578125
patch: result = lval CaMeL Int >> >> ( int ) rval CaMeL Int ;
rank: 147
score: 99.34095674402573
patch: result = lval CaMeL Int ; return Node . new CaMeL Number ( result ) ;
rank: 147
score: 99.31741768973214
patch: result = lval CaMeL Int >> >> ~ rval CaMeL Int ; ;
rank: 147
score: 99.29023960658482
patch: return rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 148
score: 99.43341064453125
patch: result = ( int ) rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 148
score: 99.41789694393383
patch: result = lval CaMeL Int << ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 148
score: 99.41115897042411
patch: result = lval CaMeL Int >> >> rval - rval CaMeL Int ;
rank: 148
score: 99.36359049479167
patch: * / result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 148
score: 99.36342486213235
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int / rval CaMeL Int ;
rank: 148
score: 99.35116373697916
patch: try { result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 148
score: 99.34214680989584
patch: result = error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 148
score: 99.3171142578125
patch: result = lval ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 149
score: 99.41724310980902
patch: result = lval CaMeL Int << ( int ) n . get CaMeL Type ( ) ;
rank: 149
score: 99.36308019301471
patch: result = lval CaMeL Int >> : rval CaMeL Int >> >> rval CaMeL Int ;
rank: 149
score: 99.31697904146634
patch: result = lval ? lval CaMeL Int : lval CaMeL Int ;
rank: 149
score: 99.29000651041666
patch: int rval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 150
score: 99.43246120876736
patch: long rval CaMeL Int = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 150
score: 99.4168701171875
patch: result = n . get CaMeL Double ( ) ;
rank: 150
score: 99.36326688878677
patch: return ( lval CaMeL Int >> >> rval CaMeL Int ) >> rval CaMeL Int ;
rank: 150
score: 99.36262063419117
patch: result = lval CaMeL Int >> >> & rval CaMeL Int >> rval CaMeL Int ;
rank: 150
score: 99.34032331194196
patch: result = Node . new CaMeL Number ( result , left ) ;
rank: 150
score: 99.31670735677083
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int == 0 )
rank: 150
score: 99.28907993861607
patch: result = lval CaMeL Int << rval CaMeL Int ; break ; }
rank: 151
score: 99.43229166666667
patch: result = Node . new CaMeL Number ( result ) ; report CaMeL Code CaMeL Change ( false ) ;
rank: 151
score: 99.41047668457031
patch: result = lval CaMeL Int - >> rval CaMeL Int >> rval CaMeL Int ;
rank: 151
score: 99.35057875689338
patch: result = ( lval CaMeL Int & lval CaMeL Int ) >> rval CaMeL Int ;
rank: 151
score: 99.34025065104167
patch: result = n . get CaMeL Double ( ) << lval CaMeL Int ;
rank: 151
score: 99.34014423076923
patch: result ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 151
score: 99.31557791573661
patch: result = lval CaMeL Int + >> >> & rval CaMeL Int ;
rank: 151
score: 99.28875732421875
patch: if ( left . get CaMeL Type ( ) == Token . RSH ) {
rank: 152
score: 99.41656901041667
patch: result = Node . new CaMeL Number ( ( int ) n ) ;
rank: 152
score: 99.36248420266544
patch: result = lval CaMeL Int - >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 152
score: 99.3619051846591
patch: result = lval CaMeL Int >> >> >= 1 ;
rank: 152
score: 99.34978889016544
patch: lval CaMeL Int = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 152
score: 99.31378173828125
patch: result = lval CaMeL Int & 0 rval CaMeL Int ;
rank: 152
score: 99.28844451904297
patch: { result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 153
score: 99.41653781467014
patch: result = lval CaMeL Int << rval CaMeL Int : ( int ) rval CaMeL Int ;
rank: 153
score: 99.40998077392578
patch: result = lval CaMeL Int - lval CaMeL Int >> >> rval CaMeL Int ;
rank: 153
score: 99.36227596507354
patch: result = lval = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 153
score: 99.36085611979166
patch: result = lval CaMeL Int >> << >> >> >> rval CaMeL Int ;
rank: 153
score: 99.33897816051136
patch: result += lval CaMeL Int >> rval CaMeL Int ;
rank: 153
score: 99.3133544921875
patch: result = lval CaMeL Int < lval ? 0 : lval CaMeL Int ;
rank: 154
score: 99.43075900607639
patch: result = Node . new CaMeL Number ( rval CaMeL Int << rval CaMeL Int ) ;
rank: 154
score: 99.41465759277344
patch: result = lval CaMeL Int << ( ( int ) rval CaMeL Int ) ;
rank: 154
score: 99.4087905883789
patch: result = lval CaMeL Int && rval CaMeL Int >> >> rval CaMeL Int ;
rank: 154
score: 99.3613640280331
patch: result = lval CaMeL Int ; return lval CaMeL Int >> >> rval CaMeL Int ;
rank: 154
score: 99.36058852251838
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >= rval CaMeL Int ;
rank: 154
score: 99.31195068359375
patch: result = lval CaMeL Int | >> rval CaMeL Int ;
rank: 154
score: 99.28777313232422
patch: result = lval CaMeL Int >= Node . new CaMeL Number ( result ) ;
rank: 155
score: 99.43050537109374
patch: report CaMeL Code CaMeL Change ( ) ; result = Node . new CaMeL Number ( result ) ;
rank: 155
score: 99.41398111979167
patch: result = lval CaMeL Int << ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 155
score: 99.36027257582721
patch: result = lval CaMeL Int >> >> && rval CaMeL Int >> rval CaMeL Int ;
rank: 155
score: 99.33875229779412
patch: result = lval CaMeL Int >> rval CaMeL Int . get CaMeL Double ( ) ;
rank: 155
score: 99.31090291341145
patch: this = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 155
score: 99.28739420572917
patch: result = lval CaMeL Int ; break ; case Token . URSH :
rank: 156
score: 99.4304431733631
patch: result = lval CaMeL Int >> rval CaMeL Int ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 156
score: 99.41382649739583
patch: result = left . get CaMeL Double ( ) >> lval CaMeL Int ;
rank: 156
score: 99.40837860107422
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int rval CaMeL Int ;
rank: 156
score: 99.33863022748162
patch: result = lval CaMeL Int >> >> Node . new CaMeL Number ( result ) ;
rank: 156
score: 99.33861586626838
patch: result = new Assertion CaMeL Error ( n . get CaMeL Type ( ) ) ;
rank: 156
score: 99.31027018229166
patch: result = lval * rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 156
score: 99.2871337890625
patch: return rval CaMeL Int << Node . new CaMeL Number ( result ) ;
rank: 157
score: 99.43027954101562
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) , left ) ;
rank: 157
score: 99.41274007161458
patch: result = lval CaMeL Int << rval CaMeL Int >> ( int ) rval CaMeL Int ;
rank: 157
score: 99.35887799944196
patch: result = lval CaMeL Int >> >> rval CaMeL Int - 1 ;
rank: 157
score: 99.33766802619485
patch: case Token . RSH : result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 157
score: 99.3096454326923
patch: * result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 157
score: 99.28595842633929
patch: int lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 158
score: 99.42980375744048
patch: result = Node . new CaMeL Number ( ( int ) n . get CaMeL Type ( ) ) ;
rank: 158
score: 99.40553792317708
patch: result = lval CaMeL Int >> >> - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 158
score: 99.35883645450367
patch: result = lval CaMeL Int >> * rval CaMeL Int >> >> rval CaMeL Int ;
rank: 158
score: 99.33692124310662
patch: if ( n . get CaMeL Type ( ) == Token . URSH ) {
rank: 158
score: 99.28590494791666
patch: result = lval CaMeL Int & rval CaMeL Int << rval CaMeL Int ;
rank: 159
score: 99.42896728515625
patch: result = Node . new CaMeL Number ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 159
score: 99.41215006510417
patch: double rval CaMeL Int = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 159
score: 99.40510559082031
patch: result = lval CaMeL Int >> rval CaMeL Int > >> rval CaMeL Int ;
rank: 159
score: 99.35877182904412
patch: this . result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;
rank: 159
score: 99.35714901194854
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> | rval CaMeL Int ;
rank: 159
score: 99.34349476207386
patch: result = lval CaMeL Int & lval CaMeL Int ;
rank: 159
score: 99.3360595703125
patch: result ; result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 159
score: 99.3083740234375
patch: result = lval CaMeL Int * rval CaMeL Int + rval CaMeL Int ;
rank: 159
score: 99.28563343394886
patch: retval = lval CaMeL Int >> rval CaMeL Int ;
rank: 160
score: 99.42845458984375
patch: result = Integer . MIN _ VALUE ; result = Node . new CaMeL Number ( result ) ;
rank: 160
score: 99.411767578125
patch: result = left . get CaMeL Type ( ) >> rval CaMeL Int ;
rank: 160
score: 99.35668182373047
patch: result = lval CaMeL Int || rval CaMeL Int >> >> rval CaMeL Int ;
rank: 160
score: 99.34347713694854
patch: result = lval CaMeL Int >> >> >> >> >> >> - rval CaMeL Int ;
rank: 160
score: 99.33577728271484
patch: result = lval CaMeL Int << >> rval CaMeL Int + rval CaMeL Int ;
rank: 160
score: 99.30825805664062
patch: result = lval CaMeL Int >> >> >> & rval ;
rank: 160
score: 99.28494027944711
patch: return Node . new CaMeL Number ( result ) ; break ;
rank: 161
score: 99.4283935546875
patch: Node new CaMeL Number = Node . new CaMeL Number ( n ) ;
rank: 161
score: 99.41140407986111
patch: result = lval CaMeL Int >> rval CaMeL Int + ( int ) rval CaMeL Int ;
rank: 161
score: 99.40446641710069
patch: result = lval CaMeL Int >> >> rval , rval CaMeL Int : rval CaMeL Int ;
rank: 161
score: 99.35818481445312
patch: result = lval CaMeL Int >> >= rval CaMeL Int >> rval CaMeL Int ;
rank: 161
score: 99.3563461303711
patch: result = lval CaMeL Int > lval CaMeL Int >> >> rval CaMeL Int ;
rank: 161
score: 99.3357162475586
patch: result = lval CaMeL Int >> rval CaMeL Int * >> rval CaMeL Int ;
rank: 161
score: 99.30811656605114
patch: result = lval CaMeL Int ^ rval CaMeL Int ;
rank: 161
score: 99.28490193684895
patch: { result = lval CaMeL Int << rval CaMeL Int ;
rank: 162
score: 99.42728097098214
patch: result = Node . new CaMeL Number ( result , FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 162
score: 99.41044108072917
patch: result += FRACTIONAL _ BITWISE _ OPERAND , right . get CaMeL Double ( ) ;
rank: 162
score: 99.33504231770833
patch: if ( rval CaMeL Int != rval CaMeL Int ) {
rank: 162
score: 99.30740559895834
patch: result = lval / rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 162
score: 99.28484700520833
patch: result = lval CaMeL Int >> rval CaMeL Int | rval CaMeL Int ;
rank: 163
score: 99.42709011501736
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; n = rval CaMeL Int ;
rank: 163
score: 99.40428924560547
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval $NUMBER$ ;
rank: 163
score: 99.35699821920956
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> lval CaMeL Int ;
rank: 163
score: 99.35568237304688
patch: result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; ;
rank: 163
score: 99.34208170572917
patch: result = rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 163
score: 99.334765625
patch: result = lval CaMeL Int >> >> 0 ;
rank: 163
score: 99.33455403645833
patch: result = lval CaMeL Int >> lval CaMeL Int << rval CaMeL Int ;
rank: 163
score: 99.30643136160714
patch: result = lval CaMeL Int + ( int ) rval CaMeL Int ;
rank: 163
score: 99.28338216145833
patch: result = lval CaMeL Int - rval CaMeL Int << rval CaMeL Int ;
rank: 164
score: 99.42696804470486
patch: result = lval CaMeL Int : ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 164
score: 99.4036865234375
patch: result = rval CaMeL Int >> >> rval CaMeL Int == >> rval CaMeL Int ;
rank: 164
score: 99.35689290364583
patch: result = lval CaMeL Int >= rval CaMeL Int - rval CaMeL Int ;
rank: 164
score: 99.3345947265625
patch: report CaMeL Code CaMeL Change ( ) ; report CaMeL Code CaMeL Change ( ) ;
rank: 164
score: 99.30603841145833
patch: result = lval CaMeL Int * rval CaMeL Int * rval CaMeL Int ;
rank: 164
score: 99.2831561748798
patch: return Node . new CaMeL Number ( result , 0 ) ;
rank: 165
score: 99.40935202205883
patch: report CaMeL Code CaMeL Change ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 165
score: 99.40262044270834
patch: result = rval CaMeL Int >> >> rval CaMeL Int rval CaMeL Int ;
rank: 165
score: 99.35678998161765
patch: result = lval CaMeL Int < 0 ? rval CaMeL Int : rval CaMeL Int ;
rank: 165
score: 99.35513126148896
patch: result = lval CaMeL Int & rval CaMeL Int >> << >> rval CaMeL Int ;
rank: 165
score: 99.33452606201172
patch: if ( left . get CaMeL Type ( ) == Token . LSH ) {
rank: 165
score: 99.33259851792279
patch: result ; result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 166
score: 99.42664184570313
patch: result = Node . new CaMeL Number ( lval CaMeL Int << >> >> rval CaMeL Int ) ;
rank: 166
score: 99.40908203125
patch: result = lval CaMeL Int << ( Integer . MIN _ VALUE ) ;
rank: 166
score: 99.35598754882812
patch: int result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 166
score: 99.3547134399414
patch: result = lval CaMeL Int << >> >> >> >> >> rval CaMeL Int ;
rank: 166
score: 99.34065246582031
patch: result = lval CaMeL Int += lval CaMeL Int >> >> rval CaMeL Int ;
rank: 166
score: 99.33237591911765
patch: try { result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 166
score: 99.303466796875
patch: result = lval CaMeL Int / >> ^ rval CaMeL Int ;
rank: 166
score: 99.28275240384616
patch: try { result = lval CaMeL Int << rval CaMeL Int ;
rank: 167
score: 99.42628173828125
patch: result = Node . new CaMeL Number ( lval CaMeL Int >> >> >> rval CaMeL Int ) ;
rank: 167
score: 99.35548311121323
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int 1 ;
rank: 167
score: 99.35463579963235
patch: result = lval CaMeL Int & >> rval CaMeL Int >> & rval CaMeL Int ;
rank: 167
score: 99.33934110753677
patch: result = lval CaMeL Int | lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 167
score: 99.3336181640625
patch: result = result >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 167
score: 99.33202311197917
patch: result = lval CaMeL Int >> n . get CaMeL Double ( ) ;
rank: 167
score: 99.30341448102679
patch: result = lval CaMeL Int >> >> >> >> >> == 1 ;
rank: 167
score: 99.28120640345982
patch: result = lval CaMeL Int >> - rval CaMeL Int ; break ;
rank: 168
score: 99.40719784007354
patch: result = n . get CaMeL Type ( ) >> >> >> rval CaMeL Int ;
rank: 168
score: 99.35507202148438
patch: result = lval CaMeL Int >> >> lval CaMeL Int >> lval CaMeL Int ;
rank: 168
score: 99.35463053385416
patch: result = lval CaMeL Int >> >> << >> >> rval CaMeL Int ;
rank: 168
score: 99.33863022748162
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int & lval CaMeL Int ;
rank: 168
score: 99.33082580566406
patch: result = lval CaMeL Int << rval CaMeL Int + >> rval CaMeL Int ;
rank: 168
score: 99.30233561197916
patch: result = lval CaMeL Int < 0 ? lval CaMeL Int : lval ;
rank: 168
score: 99.27960205078125
patch: if ( n . get CaMeL Type ( ) == Token . URSH )
rank: 169
score: 99.42610677083333
patch: double lval CaMeL Int = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 169
score: 99.40595838758681
patch: result = lval CaMeL Int >> rval CaMeL Int << ( int ) lval CaMeL Int ;
rank: 169
score: 99.40168592664931
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int - 1 ;
rank: 169
score: 99.35504913330078
patch: result = lval CaMeL Int == >> rval CaMeL Int >> rval CaMeL Int ;
rank: 169
score: 99.3327995749081
patch: result = new CaMeL Number ( Node . new CaMeL Number ( result ) ) ;
rank: 169
score: 99.33035098805146
patch: case Token . URSH : result = lval CaMeL Int >> rval CaMeL Int ;
rank: 169
score: 99.30075073242188
patch: result = lval CaMeL Int >> >> >> & 1 ;
rank: 169
score: 99.27803257533482
patch: new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 170
score: 99.4258544921875
patch: result = Node . new CaMeL Number ( result , right . get CaMeL Type ( ) ) ;
rank: 170
score: 99.40147399902344
patch: result = lval >> >> >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 170
score: 99.35417624080883
patch: result = lval CaMeL Int >> -- rval CaMeL Int >> >> rval CaMeL Int ;
rank: 170
score: 99.33245849609375
patch: result = n . new CaMeL Number ( lval CaMeL Int ) ;
rank: 171
score: 99.40452665441177
patch: Node new CaMeL Number = ( int ) n . get CaMeL Type ( ) ;
rank: 171
score: 99.35332782451923
patch: result = lval CaMeL Int >> >> > rval CaMeL Int ;
rank: 171
score: 99.33647155761719
patch: result = lval CaMeL Int >> & rval CaMeL Int + rval CaMeL Int ;
rank: 171
score: 99.32759363511029
patch: try { result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 171
score: 99.29951695033482
patch: result = lval CaMeL Int * rval CaMeL Int / >> rval ;
rank: 171
score: 99.27653285435268
patch: return lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 172
score: 99.39987182617188
patch: if = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 172
score: 99.35458553538604
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int - ;
rank: 172
score: 99.35274011948529
patch: result = lval CaMeL Int & - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 172
score: 99.33584415211396
patch: result = lval CaMeL Int < 1 ? lval CaMeL Int : lval CaMeL Int ;
rank: 172
score: 99.2987060546875
patch: result = lval CaMeL Int & >> >> >> & rval CaMeL Int ;
rank: 172
score: 99.2764892578125
patch: result = lval CaMeL Int == rval CaMeL Int >> rval CaMeL Int ;
rank: 173
score: 99.42490844726562
patch: result = Node . new CaMeL Number ( result - n . get CaMeL Type ( ) ) ;
rank: 173
score: 99.40428969439338
patch: result = lval CaMeL Int >> ( n . get CaMeL Type ( ) ) ;
rank: 173
score: 99.3526944247159
patch: result = lval CaMeL Int > rval CaMeL Int ;
rank: 173
score: 99.29852764423077
patch: result = new lval CaMeL Int >> >> rval CaMeL Int ;
rank: 174
score: 99.42431640625
patch: result = Node . new CaMeL Number ( result ) ; this . new CaMeL Number = result ;
rank: 174
score: 99.40426296657986
patch: result = Node . new CaMeL Number ( node . get CaMeL Type ( ) ) ;
rank: 174
score: 99.39970397949219
patch: result = false ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 174
score: 99.35120567908653
patch: result = lval CaMeL Int & >> & rval CaMeL Int ;
rank: 174
score: 99.32572174072266
patch: result = ( int ) rval CaMeL Int << rval CaMeL Int ; break ;
rank: 174
score: 99.2984130859375
patch: result = lval CaMeL Int / rval CaMeL Int >> >> >> rval ;
rank: 174
score: 99.2735126201923
patch: return result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 175
score: 99.42406063988095
patch: result = Node . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ) ;
rank: 175
score: 99.39960479736328
patch: result = lval CaMeL Int || lval CaMeL Int >> >> rval CaMeL Int ;
rank: 175
score: 99.35393524169922
patch: lval = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 175
score: 99.33465576171875
patch: result = lval CaMeL Int >> >> >> - lval CaMeL Int ;
rank: 175
score: 99.33131408691406
patch: result = lval CaMeL Int ( n . get CaMeL Type ( ) ) ;
rank: 175
score: 99.32525634765625
patch: result = lval CaMeL Int >> rval CaMeL Int / >> rval CaMeL Int ;
rank: 175
score: 99.29819899338942
patch: result = lval CaMeL Int >> >> ^= rval CaMeL Int ;
rank: 175
score: 99.27301897321429
patch: return rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 176
score: 99.42371826171875
patch: result = Node . new CaMeL Number ( left , n . get CaMeL Type ( ) ) ;
rank: 176
score: 99.40340169270833
patch: result = Node . get CaMeL Parent ( ) . new CaMeL Number ( result ) ;
rank: 176
score: 99.39956868489584
patch: result = 0 ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 176
score: 99.35385567801339
patch: result = result >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 176
score: 99.34968836167279
patch: result = lval CaMeL Int != 0 ? lval CaMeL Int : rval CaMeL Int ;
rank: 176
score: 99.33115059988839
patch: this . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 176
score: 99.32351505055146
patch: result = lval CaMeL Int >> >> rval CaMeL Int ( rval CaMeL Int ) ;
rank: 176
score: 99.29816080729167
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; if ( ;
rank: 176
score: 99.2724609375
patch: { result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 177
score: 99.40275743272569
patch: result = lval CaMeL Int >> rval CaMeL Int - ( int ) rval CaMeL Int ;
rank: 177
score: 99.34934369255515
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> -- rval CaMeL Int ;
rank: 177
score: 99.33412170410156
patch: result = lval CaMeL Int >> & rval CaMeL Int - rval CaMeL Int ;
rank: 177
score: 99.3285400390625
patch: result = ( int ) Node . new CaMeL Number ( result ) ;
rank: 177
score: 99.29806954520089
patch: result = lval CaMeL Int * rval CaMeL Int >> >> rval ;
rank: 177
score: 99.27211100260416
patch: result = lval CaMeL Int - lval CaMeL Int >> rval CaMeL Int ;
rank: 178
score: 99.42310180664063
patch: result = Node . new CaMeL Number ( n . get CaMeL Double ( ) , result ) ;
rank: 178
score: 99.40220013786765
patch: report CaMeL Code CaMeL Change ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 178
score: 99.39845784505208
patch: result = lval CaMeL Int > >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 178
score: 99.353271484375
patch: result = lval CaMeL Int >> lval >> rval CaMeL Int >> rval CaMeL Int ;
rank: 178
score: 99.34907082950367
patch: result = lval CaMeL Int >> >> && rval CaMeL Int > rval CaMeL Int ;
rank: 178
score: 99.3277587890625
patch: Parent new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 178
score: 99.3224105834961
patch: result = rval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 178
score: 99.2972412109375
patch: result = lval CaMeL Int >> >> >> & rval CaMeL Int ; ;
rank: 178
score: 99.27204241071429
patch: return left . get CaMeL Double ( ) << rval CaMeL Int ;
rank: 179
score: 99.39832221137152
patch: result = lval CaMeL Int >> >> rval CaMeL Int != >> >> rval CaMeL Int ;
rank: 179
score: 99.35321403952206
patch: result = lval CaMeL Int >= >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 179
score: 99.32740129743304
patch: result = Node . new CaMeL Number ( result , n ) ;
rank: 179
score: 99.29673414963942
patch: Object result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 180
score: 99.40118408203125
patch: result = lval CaMeL Int & ( int ) n . get CaMeL Type ( ) ;
rank: 180
score: 99.39793395996094
patch: result = lval CaMeL Int >> >> rval CaMeL Int || rval CaMeL Int ;
rank: 180
score: 99.35287475585938
patch: return lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 180
score: 99.33223783052884
patch: result = lval CaMeL Int >> >> >> >> >> lval ;
rank: 180
score: 99.29624430338542
patch: result = lval CaMeL Int [ rval CaMeL Int ] ;
rank: 180
score: 99.27123260498047
patch: result = lval CaMeL Int >> | rval CaMeL Int >> rval CaMeL Int ;
rank: 181
score: 99.42207845052083
patch: result = lval CaMeL Int : rval CaMeL Int << rval CaMeL Int ;
rank: 181
score: 99.39676920572917
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval ) ;
rank: 181
score: 99.35269368489584
patch: result = lval >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 181
score: 99.34716796875
patch: double result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 181
score: 99.32502746582031
patch: result = n . new CaMeL Number >> >> >> >> rval CaMeL Int ;
rank: 181
score: 99.29619954427083
patch: result = lval 0 / rval CaMeL Int >> >> rval CaMeL Int ;
rank: 182
score: 99.42200425091912
patch: long rval CaMeL Int = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 182
score: 99.4003547219669
patch: double lval CaMeL Int = ( int ) left . get CaMeL Double ( ) ;
rank: 182
score: 99.35235954733456
patch: result = lval CaMeL Int > >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 182
score: 99.34672546386719
patch: result = lval CaMeL Int > rval CaMeL Int >> & rval CaMeL Int ;
rank: 182
score: 99.32489013671875
patch: result = lval CaMeL Int << - rval CaMeL Int ;
rank: 182
score: 99.32145421645221
patch: result = lval CaMeL Int << rval CaMeL Int ; new CaMeL Number = result ;
rank: 182
score: 99.29589029947917
patch: result = lval CaMeL Int & rval CaMeL Int + rval CaMeL Int ;
rank: 182
score: 99.2677001953125
patch: value = lval CaMeL Int >> rval CaMeL Int ;
rank: 183
score: 99.42191569010417
patch: result = Node . new CaMeL Number ( rval ) ;
rank: 183
score: 99.39959038628473
patch: result = lval CaMeL Int << rval CaMeL Int + ( int ) rval CaMeL Int ;
rank: 183
score: 99.3959099264706
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ) ;
rank: 183
score: 99.34571030560662
patch: result = lval CaMeL Int >> >> | rval CaMeL Int >> rval CaMeL Int ;
rank: 183
score: 99.32952117919922
patch: final int rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 183
score: 99.32441057477679
patch: n . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 183
score: 99.29557291666667
patch: result = lval CaMeL Int >> |= rval CaMeL Int ;
rank: 183
score: 99.26718575613839
patch: double lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 184
score: 99.42026238692434
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 184
score: 99.39933507582721
patch: result = n . get CaMeL Double ( ) >> >> >> rval CaMeL Int ;
rank: 184
score: 99.39552612304688
patch: result = 0 >> >> rval CaMeL Int ;
rank: 184
score: 99.34552408854167
patch: result = lval CaMeL Int + lval CaMeL Int >> rval CaMeL Int ;
rank: 184
score: 99.32077026367188
patch: result = rval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 184
score: 99.29554966517857
patch: result = lval + lval CaMeL Int >> >> rval CaMeL Int ;
rank: 184
score: 99.26692417689732
patch: s . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 185
score: 99.41947856702302
patch: result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 185
score: 99.39869035993304
patch: try { result = Node . new CaMeL Number ( result ) ;
rank: 185
score: 99.39549424913194
patch: result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int + rval CaMeL Int ;
rank: 185
score: 99.3518928079044
patch: result = lval CaMeL Int >= rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 185
score: 99.34546661376953
patch: result = lval CaMeL Int ? rval CaMeL Int >> >> rval CaMeL Int ;
rank: 185
score: 99.32040405273438
patch: result = rval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ;
rank: 185
score: 99.29499162946429
patch: result = lval CaMeL Int >> >> ~ ~ rval CaMeL Int ;
rank: 185
score: 99.266845703125
patch: result = left . get CaMeL Long ( ) << rval CaMeL Int ;
rank: 186
score: 99.41899028577302
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ) ;
rank: 186
score: 99.39659288194444
patch: break ; case Token . RSH : result = lval CaMeL Int >> rval CaMeL Int ;
rank: 186
score: 99.39484514508929
patch: result = 0 >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 186
score: 99.35181603064903
patch: this . lval = lval CaMeL Int >> rval CaMeL Int ;
rank: 186
score: 99.34510040283203
patch: * / result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 186
score: 99.32881164550781
patch: final int lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 186
score: 99.26626586914062
patch: buf = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 187
score: 99.41897922092014
patch: result = Node . new CaMeL Number ( lval CaMeL Int + rval CaMeL Int ) ;
rank: 187
score: 99.39582061767578
patch: result = try CaMeL Fold CaMeL Shift ( n , new CaMeL Number ) ;
rank: 187
score: 99.39445665147569
patch: if lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 187
score: 99.3515396118164
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int - ;
rank: 187
score: 99.32823768028847
patch: result = lval CaMeL Int >> >> | lval CaMeL Int ;
rank: 187
score: 99.31901550292969
patch: result = lval CaMeL Int >> rval CaMeL Int >> * rval CaMeL Int ;
rank: 187
score: 99.29486490885417
patch: result = lval CaMeL Int / >> >> >> & rval CaMeL Int ;
rank: 187
score: 99.26545715332031
patch: new CaMeL Number = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 188
score: 99.41897583007812
patch: new CaMeL Number = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 188
score: 99.39430067274306
patch: result = lval CaMeL Int > >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 188
score: 99.31881893382354
patch: result = lval CaMeL Int >> rval CaMeL Int ; new CaMeL Number = result ;
rank: 188
score: 99.26521301269531
patch: return rval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 189
score: 99.4185302734375
patch: result = Node . new CaMeL Number ( n ) ; report CaMeL Code CaMeL Change ( ) ;
rank: 189
score: 99.39414978027344
patch: result = lval CaMeL Int > >> rval CaMeL Int - rval CaMeL Int ;
rank: 189
score: 99.35105985753677
patch: int result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 189
score: 99.34098052978516
patch: result = lval CaMeL Int + rval CaMeL Int >> & rval CaMeL Int ;
rank: 189
score: 99.32707663143383
patch: result = lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 189
score: 99.31832122802734
patch: . result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 189
score: 99.29423828125
patch: result = lval ; result = lval CaMeL Int + rval CaMeL Int ;
rank: 189
score: 99.26487379807692
patch: byte result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 190
score: 99.39398552389706
patch: result = lval CaMeL Int >> >> rval CaMeL Int ) - rval CaMeL Int ;
rank: 190
score: 99.34046128216912
patch: result = lval CaMeL Int >> >> && rval CaMeL Int & rval CaMeL Int ;
rank: 190
score: 99.32633209228516
patch: try { result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 190
score: 99.32106526692708
patch: result = rval CaMeL Int << >> rval CaMeL Int ;
rank: 190
score: 99.29387555803571
patch: if ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 190
score: 99.26409912109375
patch: result = lval CaMeL Int == Node . new CaMeL Number ( result ) ;
rank: 191
score: 99.3944953469669
patch: result = lval CaMeL Int >> rval CaMeL Int << ( rval CaMeL Int ) ;
rank: 191
score: 99.3933464499081
patch: result = rval CaMeL Int >> >> rval CaMeL Int - >> rval CaMeL Int ;
rank: 191
score: 99.3509051983173
patch: result = lval CaMeL Int >> 1 >> rval CaMeL Int ;
rank: 191
score: 99.32631022135416
patch: result = lval CaMeL Int rval CaMeL Int >> >> rval CaMeL Int ;
rank: 191
score: 99.31745461856617
patch: result += lval CaMeL Int ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 191
score: 99.29383138020833
patch: if ( lval CaMeL Int != null && lval CaMeL Int != null )
rank: 191
score: 99.26360614483173
patch: result = lval CaMeL Int >> rval >> rval CaMeL Int ;
rank: 192
score: 99.39413113064236
patch: result = lval CaMeL Int & ( int ) n . get CaMeL Double ( ) ;
rank: 192
score: 99.39301614200367
patch: result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ >> rval CaMeL Int ;
rank: 192
score: 99.33962833180146
patch: result = lval CaMeL Int & lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 192
score: 99.326171875
patch: result = lval CaMeL Int : lval CaMeL Int >> rval CaMeL Int ;
rank: 192
score: 99.32000373391544
patch: return token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 192
score: 99.29366629464286
patch: result = lval CaMeL Int == - 1 ? 0 : 0 ;
rank: 192
score: 99.2627685546875
patch: return left . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 193
score: 99.417138671875
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) + result ) ;
rank: 193
score: 99.39410400390625
patch: result = left . new CaMeL Number ( left . get CaMeL Type ( ) ) ;
rank: 193
score: 99.3927993774414
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return rval ) ;
rank: 193
score: 99.3380126953125
patch: result = lval CaMeL Int ; result = lval CaMeL Int > rval CaMeL Int ;
rank: 193
score: 99.3148193359375
patch: result = ( int ) lval CaMeL Int << rval CaMeL Int ; break ;
rank: 193
score: 99.26258951822916
patch: return rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 194
score: 99.41693793402777
patch: result = lval CaMeL Int ; result = Node . new CaMeL Number ( result ) ;
rank: 194
score: 99.39359537760417
patch: result = left . new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 194
score: 99.39266628689236
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int : >> rval CaMeL Int ;
rank: 194
score: 99.33794403076172
patch: result = lval CaMeL Int / rval CaMeL Int >> & rval CaMeL Int ;
rank: 194
score: 99.32444763183594
patch: result = lval CaMeL Int >> >> >> >> lval : lval CaMeL Int ;
rank: 194
score: 99.31985037667411
patch: result = Node . new CaMeL Number ( result , this ) ;
rank: 194
score: 99.29365234375
patch: result = lval ; result = lval CaMeL Int & rval CaMeL Int ;
rank: 195
score: 99.41689724392361
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; n = lval CaMeL Int ;
rank: 195
score: 99.39297146267361
patch: result = n . new CaMeL Number ( left . get CaMeL Type ( ) ) ;
rank: 195
score: 99.39229583740234
patch: result = lval CaMeL Int >> >> rval CaMeL Int != lval CaMeL Int ;
rank: 195
score: 99.33768956801471
patch: result = lval CaMeL Int & ~ rval CaMeL Int >> >> rval CaMeL Int ;
rank: 195
score: 99.32427978515625
patch: result = lval CaMeL Int >> >> >> lval rval CaMeL Int ;
rank: 195
score: 99.31962446732955
patch: result = n . get CaMeL Type ( ) ;
rank: 195
score: 99.29354858398438
patch: this . result = lval CaMeL Int >> >> rval ;
rank: 195
score: 99.26241048177083
patch: value = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 196
score: 99.41685575597427
patch: result = lval CaMeL Int : rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 196
score: 99.39286534926471
patch: String new CaMeL Number = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 196
score: 99.39187186104911
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> 1 ;
rank: 196
score: 99.34922880284927
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ++ ;
rank: 196
score: 99.3367560891544
patch: result = lval CaMeL Int >> || rval CaMeL Int >> >> rval CaMeL Int ;
rank: 196
score: 99.32427215576172
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> 1 ;
rank: 196
score: 99.31922149658203
patch: result = result ; report CaMeL Code CaMeL Change ( ) ; return n ;
rank: 196
score: 99.29342215401786
patch: result = lval - lval CaMeL Int >> >> rval CaMeL Int ;
rank: 196
score: 99.26138509114584
patch: result = lval CaMeL Int != rval CaMeL Int >> rval CaMeL Int ;
rank: 197
score: 99.41666259765626
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) , right ) ;
rank: 197
score: 99.39169311523438
patch: result = lval CaMeL Int >> >> rval CaMeL Int < rval CaMeL Int ;
rank: 197
score: 99.33584594726562
patch: result = lval CaMeL Int & >> >> >> >> | rval CaMeL Int ;
rank: 197
score: 99.31820678710938
patch: Node new CaMeL Number = Node . new CaMeL Number ( result ) ; ;
rank: 197
score: 99.29278157552083
patch: if ( lval CaMeL Int == 0 && lval CaMeL Int != 0 )
rank: 198
score: 99.41543579101562
patch: result = Node . token CaMeL To CaMeL Name ( n . get CaMeL Double ( ) ) ;
rank: 198
score: 99.39154459635417
patch: if lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 198
score: 99.34870461856617
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int 1 ;
rank: 198
score: 99.3109992532169
patch: return Node . new CaMeL Number ( result . get CaMeL Type ( ) ) ;
rank: 198
score: 99.29173787434895
patch: result = lval CaMeL Int / >> >> >> rval ;
rank: 198
score: 99.26081085205078
patch: if ( left . get CaMeL Type ( ) == Token . NUMBER ) {
rank: 199
score: 99.391357421875
patch: Node new CaMeL Number = ( Node ) Node . new CaMeL Number ( result ) ;
rank: 199
score: 99.39114040798611
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 199
score: 99.34870256696429
patch: result = lval CaMeL Int >> $NUMBER$ >> >> rval CaMeL Int ;
rank: 199
score: 99.32301330566406
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int - 1 ) ;
rank: 199
score: 99.3177490234375
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int >> rval CaMeL Int ;
rank: 199
score: 99.310546875
patch: this . result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 199
score: 99.29157366071429
patch: result = lval ; result = lval CaMeL Int >> >> rval ;
rank: 200
score: 99.39106580946181
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; >> >> rval CaMeL Int :
rank: 200
score: 99.39099799262152
patch: result = lval CaMeL Int << rval CaMeL Int - ( int ) rval CaMeL Int ;
rank: 200
score: 99.3486557006836
patch: result += lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 200
score: 99.333984375
patch: result = lval CaMeL Int > >> >> >> >> >> rval CaMeL Int ;
rank: 200
score: 99.32209014892578
patch: result = lval CaMeL Int >> >> >> >> lval : rval CaMeL Int ;
rank: 200
score: 99.31739044189453
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; n = n ;
rank: 200
score: 99.31022135416667
patch: result = new int ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 200
score: 99.29063313802084
patch: result = lval CaMeL Int == 0 ? 1 : lval CaMeL Int ;
rank: 200
score: 99.26028442382812
patch: result = rval CaMeL Int & Node . new CaMeL Number ( result ) ;
rank: 201
score: 99.41478729248047
patch: result = lval CaMeL Int : Node . new CaMeL Number ( result ) ;
rank: 201
score: 99.3910140991211
patch: result = rval CaMeL Int >> >> rval CaMeL Int == rval CaMeL Int ;
rank: 201
score: 99.39091796875
patch: result = n . get CaMeL Double ( ) >> lval CaMeL Int ;
rank: 201
score: 99.33330891927083
patch: result = lval CaMeL Int >> >> >> >> >= rval CaMeL Int ;
rank: 201
score: 99.3218002319336
patch: result = lval CaMeL Int >> >> >> & >> >> rval CaMeL Int ;
rank: 201
score: 99.31687825520834
patch: result = n . new CaMeL Number >> >> >> rval CaMeL Int ;
rank: 201
score: 99.2902587890625
patch: result = lval CaMeL Int & >> rval ;
rank: 201
score: 99.25970052083333
patch: { result = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 202
score: 99.41466000205592
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 202
score: 99.39082845052083
patch: result = lval CaMeL Int << ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 202
score: 99.390625
patch: result = lval CaMeL Int >> 1 >> >> rval CaMeL Int ;
rank: 202
score: 99.34694536994485
patch: result = lval CaMeL Int == 0 ? rval CaMeL Int : lval CaMeL Int ;
rank: 202
score: 99.3328857421875
patch: int result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 202
score: 99.32177734375
patch: this . lval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 202
score: 99.309375
patch: result = new String ( n . get CaMeL Type ( ) ) ;
rank: 202
score: 99.29010009765625
patch: this . result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 202
score: 99.258203125
patch: result = lval CaMeL Int & result . get CaMeL Double ( ) ;
rank: 203
score: 99.3217529296875
patch: result = lval CaMeL Int >> lval ( >> rval CaMeL Int ) ;
rank: 203
score: 99.31666564941406
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = n ;
rank: 203
score: 99.306982421875
patch: result = null ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 203
score: 99.258056640625
patch: result = lval CaMeL Int & ( int ) rval CaMeL Int ;
rank: 204
score: 99.39037272135417
patch: result = lval CaMeL Int >> >> >> 0 - rval CaMeL Int ;
rank: 204
score: 99.38966369628906
patch: result = new Token ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 204
score: 99.34681701660156
patch: result = lval CaMeL Int >> * rval CaMeL Int >> rval CaMeL Int ;
rank: 204
score: 99.33277803308823
patch: result = lval CaMeL Int & rval CaMeL Int >> >> -- rval CaMeL Int ;
rank: 204
score: 99.31648472377232
patch: result = Node . new CaMeL Number ( result , $STRING$ ) ;
rank: 204
score: 99.30642903645834
patch: result = lval CaMeL Int << n . get CaMeL Value ( ) ;
rank: 204
score: 99.28891225961539
patch: final result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 204
score: 99.25796508789062
patch: result = lval CaMeL Int & Node . new CaMeL Number ( rval ) ;
rank: 205
score: 99.38972473144531
patch: if = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 205
score: 99.38941192626953
patch: result = try CaMeL Fold CaMeL Shift ( result , new CaMeL Number ) ;
rank: 205
score: 99.31829071044922
patch: result = lval CaMeL Int & lval CaMeL Int >> & rval CaMeL Int ;
rank: 205
score: 99.31639906939338
patch: case Token . LSH : result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 205
score: 99.28888408954327
patch: result = lval CaMeL Int >> >> >> >> == 1 ;
rank: 205
score: 99.25779622395834
patch: result = lval CaMeL Int | rval CaMeL Int << rval CaMeL Int ;
rank: 206
score: 99.38912963867188
patch: result = rval CaMeL Int >> rval CaMeL Int - >> rval CaMeL Int ;
rank: 206
score: 99.3468017578125
patch: return lval CaMeL Int >> rval CaMeL Int ;
rank: 206
score: 99.30622100830078
patch: . result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 206
score: 99.28804837740384
patch: result = lval CaMeL Int & >> ^ rval CaMeL Int ;
rank: 206
score: 99.25771077473958
patch: return result = lval CaMeL Int >> rval CaMeL Int ;
rank: 207
score: 99.38877516526442
patch: result = lval >> >> >> >> >> rval CaMeL Int ;
rank: 207
score: 99.34679158528645
patch: throw new Runtime CaMeL Exception ( rval CaMeL Int ) ;
rank: 207
score: 99.3313849954044
patch: result = lval CaMeL Int ; result = lval CaMeL Int + rval CaMeL Int ;
rank: 207
score: 99.31609030330883
patch: result = lval CaMeL Int ; return n . new CaMeL Number ( result ) ;
rank: 207
score: 99.2879150390625
patch: result = lval CaMeL Int & rval CaMeL Int / rval CaMeL Int ;
rank: 207
score: 99.25690460205078
patch: result = right . get CaMeL Double ( ) >> >> rval CaMeL Int ;
rank: 208
score: 99.41022135416667
patch: result = lval CaMeL Int : rval CaMeL Int >> rval CaMeL Int ;
rank: 208
score: 99.3887710571289
patch: result = lval CaMeL Int >> >> rval CaMeL Int / lval CaMeL Int ;
rank: 208
score: 99.34625603170956
patch: this . result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 208
score: 99.31735464242789
patch: lval = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 208
score: 99.3059943704044
patch: result = lval CaMeL Int << >> rval CaMeL Int : >> rval CaMeL Int ;
rank: 208
score: 99.25556640625
patch: return new CaMeL Number ( rval CaMeL Int >> rval CaMeL Int ) ;
rank: 209
score: 99.38858371310764
patch: result = report CaMeL Code CaMeL Change ( n . get CaMeL Type ( ) ) ;
rank: 209
score: 99.34591238839286
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> false ;
rank: 209
score: 99.33099006204044
patch: result = lval CaMeL Int + rval CaMeL Int >> >> & rval CaMeL Int ;
rank: 209
score: 99.31508501838235
patch: result = n . get CaMeL Type ( ) . get CaMeL Name ( ) ;
rank: 209
score: 99.30538236177884
patch: result ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 209
score: 99.28783162434895
patch: result = lval CaMeL Int + ( int ) lval ;
rank: 209
score: 99.25490315755208
patch: tmp = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 210
score: 99.38811383928571
patch: if lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 210
score: 99.34583237591912
patch: result = lval CaMeL Int >> rval >> rval CaMeL Int >> rval CaMeL Int ;
rank: 210
score: 99.33073874080883
patch: result = lval CaMeL Int >> |= rval CaMeL Int >> >> rval CaMeL Int ;
rank: 210
score: 99.31679861886161
patch: result = lval CaMeL Int >> >> lval >> rval CaMeL Int ;
rank: 210
score: 99.31484549386161
patch: result = result << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 210
score: 99.30523274739583
patch: result = lval CaMeL Int << right . get CaMeL Double ( ) ;
rank: 210
score: 99.28702218191964
patch: result = lval CaMeL Int >> >> rval / rval CaMeL Int ;
rank: 210
score: 99.2546895345052
patch: long result = lval CaMeL Int >> rval CaMeL Int ;
rank: 211
score: 99.40823184742646
patch: double lval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 211
score: 99.38743591308594
patch: report CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 211
score: 99.38676622178819
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 211
score: 99.33061667049633
patch: result = lval CaMeL Int * >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 211
score: 99.31675618489584
patch: result = ( byte ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 211
score: 99.3148193359375
patch: result = new CaMeL Number << rval CaMeL Int << rval CaMeL Int ;
rank: 211
score: 99.304931640625
patch: result ; result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 211
score: 99.25414100060097
patch: Integer result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 212
score: 99.40803833007813
patch: result = Node . new CaMeL Number ( result , lval CaMeL Int >> rval CaMeL Int ) ;
rank: 212
score: 99.38739013671875
patch: result = Node . new CaMeL Number ( rval . get CaMeL Type ( ) ) ;
rank: 212
score: 99.38564724392361
patch: result = lval CaMeL Int ; result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 212
score: 99.34490966796875
patch: result = lval CaMeL Int >> & lval CaMeL Int >> rval CaMeL Int ;
rank: 212
score: 99.33006376378677
patch: result = lval CaMeL Int >> >> >> >> >> >> & rval CaMeL Int ;
rank: 212
score: 99.31607818603516
patch: result = rval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;
rank: 212
score: 99.30466134207589
patch: result ++ ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 212
score: 99.28545735677083
patch: result = lval CaMeL Int < lval ? lval : lval CaMeL Int ;
rank: 212
score: 99.2540283203125
patch: result = right . get CaMeL Long ( ) >> rval CaMeL Int ;
rank: 213
score: 99.4070685891544
patch: long rval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 213
score: 99.38734346277573
patch: int lval CaMeL Int = ( int ) n . get CaMeL Double ( ) ;
rank: 213
score: 99.33002068014706
patch: result = lval CaMeL Int - lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 213
score: 99.31584930419922
patch: result = true ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 213
score: 99.25396321614583
patch: result = lval CaMeL Int > lval CaMeL Int >> rval CaMeL Int ;
rank: 214
score: 99.38506721047794
patch: result = rval CaMeL Int >> >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 214
score: 99.34407312729779
patch: result = lval CaMeL Int != 0 ? rval CaMeL Int : rval CaMeL Int ;
rank: 214
score: 99.3295539407169
patch: result = lval CaMeL Int ; result = lval CaMeL Int & rval CaMeL Int ;
rank: 214
score: 99.3043441772461
patch: result = new CaMeL Number >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 214
score: 99.28474934895833
patch: result = lval * lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 215
score: 99.38653923483456
patch: int lval CaMeL Int = ( int ) right . get CaMeL Double ( ) ;
rank: 215
score: 99.38499620225694
patch: result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int rval CaMeL Int ;
rank: 215
score: 99.3427734375
patch: result = lval CaMeL Int >> lval CaMeL Int >> lval CaMeL Int ;
rank: 215
score: 99.32933756510417
patch: result = lval CaMeL Int ? lval CaMeL Int : rval CaMeL Int ;
rank: 215
score: 99.31426239013672
patch: result = null ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 215
score: 99.3043212890625
patch: result = lval CaMeL Int << lval CaMeL Int >> >> rval CaMeL Int ;
rank: 215
score: 99.28451334635416
patch: result = lval CaMeL Int & rval CaMeL Int & rval CaMeL Int ;
rank: 215
score: 99.25243530273437
patch: return report CaMeL Code CaMeL Change ( ) ;
rank: 216
score: 99.40652465820312
patch: result = Node . new CaMeL Number ( lval ) ;
rank: 216
score: 99.38498360770089
patch: result = lval CaMeL Int >> 0 >> >> rval CaMeL Int ;
rank: 216
score: 99.34270833333333
patch: result = lval >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 216
score: 99.31417083740234
patch: result = lval CaMeL Int >> ? rval CaMeL Int >> rval CaMeL Int ;
rank: 216
score: 99.25132399338942
patch: new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;
rank: 217
score: 99.38607449001736
patch: result = lval CaMeL Int << ( int ) left . get CaMeL Double ( ) ;
rank: 217
score: 99.38484022352431
patch: result = lval CaMeL Int >> >> rval [ rval CaMeL Int - rval CaMeL Int ;
rank: 217
score: 99.34264418658088
patch: if ( lval CaMeL Int != lval CaMeL Int ) result = lval CaMeL Int ;
rank: 217
score: 99.28363444010417
patch: result = lval ( lval CaMeL Int >> & rval CaMeL Int ) ;
rank: 217
score: 99.25120442708334
patch: return new CaMeL Number ( rval CaMeL Int << rval CaMeL Int ) ;
rank: 218
score: 99.38535970052084
patch: try { error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 218
score: 99.3423210592831
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> false ;
rank: 218
score: 99.32779134114584
patch: result = lval CaMeL Int >> >> >> >> -- rval CaMeL Int ;
rank: 218
score: 99.31410910866477
patch: result = lval CaMeL Int >> >> - 1 ;
rank: 218
score: 99.31399739583334
patch: result = lval CaMeL Int << >> rval CaMeL Int ; return n ;
rank: 218
score: 99.30384172712054
patch: result = lval >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 219
score: 99.40578884548611
patch: result = Node . new CaMeL Number ( lval CaMeL Int << lval CaMeL Int ) ;
rank: 219
score: 99.38445366753473
patch: result = lval CaMeL Int >> >> rval CaMeL Int : >> >> rval CaMeL Int ;
rank: 219
score: 99.34229951746323
patch: int result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 219
score: 99.32743072509766
patch: result = lval CaMeL Int / >> >> >> >> >> rval CaMeL Int ;
rank: 219
score: 99.31396484375
patch: result = new CaMeL Number ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 219
score: 99.31330108642578
patch: result = lval CaMeL Int >> & rval CaMeL Int + lval CaMeL Int ;
rank: 219
score: 99.25056675502232
patch: result = lval CaMeL Int >> | rval CaMeL Int ; break ;
rank: 220
score: 99.38465073529412
patch: result = lval CaMeL Int << rval CaMeL Int >> ( rval CaMeL Int ) ;
rank: 220
score: 99.38353729248047
patch: result = rval CaMeL Int >> >> rval CaMeL Int : lval CaMeL Int ;
rank: 220
score: 99.32741411994485
patch: result = lval CaMeL Int >> & rval CaMeL Int >> << rval CaMeL Int ;
rank: 220
score: 99.31369018554688
patch: result = lval CaMeL Int << ( rval CaMeL Int << rval CaMeL Int ;
rank: 220
score: 99.3131332397461
patch: result = 1 ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 220
score: 99.2810546875
patch: if ( lval CaMeL Int != 0 || lval CaMeL Int != 0 )
rank: 220
score: 99.25029645647321
patch: long rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 221
score: 99.40512424045139
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 221
score: 99.38450622558594
patch: result = ( int ) rval ;
rank: 221
score: 99.34168198529412
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int - $NUMBER$ ;
rank: 221
score: 99.3120361328125
patch: int lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 221
score: 99.2806729403409
patch: result = lval CaMeL Int | rval CaMeL Int ;
rank: 222
score: 99.38382975260417
patch: result = Node . new CaMeL Name ( result . get CaMeL Type ( ) ) ;
rank: 222
score: 99.38332790798611
patch: result = lval CaMeL Int >> rval ( rval CaMeL Int >> rval CaMeL Int ) ;
rank: 222
score: 99.34133731617646
patch: final result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 222
score: 99.32621256510417
patch: final int result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 222
score: 99.31101989746094
patch: result = ( result >> rval CaMeL Int ) >> >> rval CaMeL Int ;
rank: 222
score: 99.28050885881696
patch: result = lval CaMeL Int & >> >> >> >> >> rval ;
rank: 222
score: 99.24982244318181
patch: buf = lval CaMeL Int >> rval CaMeL Int ;
rank: 223
score: 99.40428402549342
patch: result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 223
score: 99.38328552246094
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return 1 ; }
rank: 223
score: 99.34066951976104
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> >> ;
rank: 223
score: 99.32615356445312
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 223
score: 99.31259591238839
patch: result = n . new CaMeL Number >> >> rval CaMeL Int ;
rank: 223
score: 99.30980631510417
patch: >> rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 223
score: 99.28032575334821
patch: result = lval CaMeL Int / >> >> ^ rval CaMeL Int ;
rank: 224
score: 99.40409770764802
patch: result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 224
score: 99.38300238715277
patch: result = Node . get CaMeL Type ( ) . new CaMeL Number ( result ) ;
rank: 224
score: 99.3401630108173
patch: this . result = lval CaMeL Int >> lval CaMeL Int ;
rank: 224
score: 99.32585797991071
patch: result = lval CaMeL Int >> >> >> >= rval CaMeL Int ;
rank: 224
score: 99.30968424479167
patch: result = ( result >> rval CaMeL Int ) >> rval CaMeL Int ;
rank: 224
score: 99.3002421061198
patch: result += lval CaMeL Int << >> rval CaMeL Int ;
rank: 224
score: 99.24923706054688
patch: return n . get CaMeL Parent ( ) . replace CaMeL Child ( n ,
rank: 225
score: 99.4039370888158
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ] ) ;
rank: 225
score: 99.38289642333984
patch: result = new Token ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 225
score: 99.38187902113971
patch: result = lval CaMeL Int > >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 225
score: 99.31233433314732
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; } }
rank: 225
score: 99.28013509114584
patch: / * result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 226
score: 99.40254720052083
patch: result = lval CaMeL Int + lval CaMeL Int << rval CaMeL Int ;
rank: 226
score: 99.38271915211396
patch: result = left . get CaMeL Double ( ) >> >> >> rval CaMeL Int ;
rank: 226
score: 99.38180202907986
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> >> 1 ;
rank: 226
score: 99.33982938878677
patch: result = lval CaMeL Int == rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 226
score: 99.32526711856617
patch: result = lval CaMeL Int / rval CaMeL Int >> >> & rval CaMeL Int ;
rank: 226
score: 99.30879211425781
patch: result = $NUMBER$ ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 226
score: 99.2993896484375
patch: result = error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 226
score: 99.28004673549107
patch: result = lval CaMeL Int >> >> ^ >> rval CaMeL Int ;
rank: 226
score: 99.24888392857143
patch: new CaMeL Number = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 227
score: 99.4024658203125
patch: result = Node . new CaMeL Number ( result ) ; new CaMeL Number = new CaMeL Number ;
rank: 227
score: 99.38245985243056
patch: String new CaMeL Number = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 227
score: 99.38127136230469
patch: result = lval CaMeL Int >> >> rval CaMeL Int <= rval CaMeL Int ;
rank: 227
score: 99.33981323242188
patch: result = lval CaMeL Int >> rval CaMeL Int >> ~ rval CaMeL Int ;
rank: 227
score: 99.32525634765625
patch: result = lval CaMeL Int >> && rval CaMeL Int > rval CaMeL Int ;
rank: 227
score: 99.31114196777344
patch: result = Node . new CaMeL Number ( result ) << rval CaMeL Int ;
rank: 227
score: 99.30850923978366
patch: result = lval CaMeL Int >> lval >> rval CaMeL Int ;
rank: 227
score: 99.29915125229779
patch: result = lval CaMeL Int << rval CaMeL Int ; result = lval CaMeL Int ;
rank: 227
score: 99.27976481119792
patch: result = lval CaMeL Int % >> rval CaMeL Int ;
rank: 227
score: 99.24842936197916
patch: return new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 228
score: 99.40216674804688
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) + $STRING$ ) ;
rank: 228
score: 99.3824462890625
patch: result = lval CaMeL Int >> ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 228
score: 99.3812255859375
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> 0 ;
rank: 228
score: 99.33977194393383
patch: result = lval CaMeL Int == >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 228
score: 99.32511080228366
patch: result = lval CaMeL Int >> >> < rval CaMeL Int ;
rank: 228
score: 99.3111328125
patch: result = lval >> >> rval CaMeL Int ;
rank: 228
score: 99.30732945033482
patch: lval = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 228
score: 99.29901885986328
patch: result = lval CaMeL Int << >> rval CaMeL Int - rval CaMeL Int ;
rank: 228
score: 99.27942833533653
patch: result = lval CaMeL Int * >> rval CaMeL Int ; ;
rank: 228
score: 99.24817657470703
patch: result = lval CaMeL Int != rval CaMeL Int >> >> rval CaMeL Int ;
rank: 229
score: 99.38243272569444
patch: Node new CaMeL Number = ( int ) Node . new CaMeL Number ( result ) ;
rank: 229
score: 99.38100857204861
patch: result = lval CaMeL Int - rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 229
score: 99.32467830882354
patch: result = lval CaMeL Int >> ^ rval CaMeL Int >> >> rval CaMeL Int ;
rank: 229
score: 99.31078162560097
patch: result = lval CaMeL Int << >> rval CaMeL Int ; ;
rank: 229
score: 99.3069580078125
patch: result = lval CaMeL Int >> rval CaMeL Int * lval CaMeL Int ;
rank: 229
score: 99.29878540039063
patch: result = ( int ) rval CaMeL Int ;
rank: 229
score: 99.27935384114583
patch: if ( lval CaMeL Int == 0 && lval CaMeL Int == 0 )
rank: 230
score: 99.39998133042279
patch: int rval CaMeL Int = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 230
score: 99.38062201605902
patch: result = lval CaMeL Int >> >> rval CaMeL Int == 1 - rval CaMeL Int ;
rank: 230
score: 99.29867553710938
patch: result = ( int ) rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 230
score: 99.27919224330357
patch: this . result = lval CaMeL Int / >> rval CaMeL Int ;
rank: 231
score: 99.39990234375
patch: break ; case Token . RSH : result = lval CaMeL Int << rval CaMeL Int ;
rank: 231
score: 99.38057454427083
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int . $NUMBER$ ;
rank: 231
score: 99.33924967447916
patch: result = rval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ;
rank: 231
score: 99.3245849609375
patch: result = lval CaMeL Int && rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 231
score: 99.31020682198661
patch: result = Node . new CaMeL Number ( result , null ) ;
rank: 231
score: 99.30498860677083
patch: } else { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 231
score: 99.29780578613281
patch: result = lval CaMeL Int << rval CaMeL Int * >> rval CaMeL Int ;
rank: 231
score: 99.27894694010416
patch: result = lval CaMeL Int * >> >> >> >> rval CaMeL Int ;
rank: 231
score: 99.24700372869319
patch: return rval CaMeL Int >> << rval CaMeL Int ;
rank: 232
score: 99.38044289981617
patch: result = lval CaMeL Int >> rval CaMeL Int >> 0 - rval CaMeL Int ;
rank: 232
score: 99.33889590992646
patch: result = lval CaMeL Int ? rval : rval CaMeL Int >> rval CaMeL Int ;
rank: 232
score: 99.30491638183594
patch: result = lval CaMeL Int rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 232
score: 99.27879503038194
patch: result = lval CaMeL Int & lval ;
rank: 232
score: 99.24640764508929
patch: long lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 233
score: 99.381103515625
patch: result = new Node ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 233
score: 99.33819986979167
patch: result = lval CaMeL Int >> lval CaMeL Int - rval CaMeL Int ;
rank: 233
score: 99.32418823242188
patch: long result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 233
score: 99.3045425415039
patch: if lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 233
score: 99.29762178308823
patch: Node new CaMeL Number = Node . new CaMeL Number ( result , result ) ;
rank: 233
score: 99.27864896334134
patch: result = lval CaMeL Int >> ^ ~ rval CaMeL Int ;
rank: 233
score: 99.24598106971153
patch: return lval CaMeL Int >> >> >> << rval CaMeL Int ;
rank: 234
score: 99.38079833984375
patch: result = lval CaMeL Int == ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 234
score: 99.37981499565973
patch: result = lval CaMeL Int >> >> rval ( rval CaMeL Int : rval CaMeL Int ;
rank: 234
score: 99.3380126953125
patch: return result >> >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 234
score: 99.32396742876838
patch: result = lval CaMeL Int >> >> || rval CaMeL Int >> rval CaMeL Int ;
rank: 234
score: 99.30953369140624
patch: result = result >> >> rval CaMeL Int ;
rank: 234
score: 99.30453287760416
patch: result = lval CaMeL Int >> >> lval >> >> rval CaMeL Int ;
rank: 234
score: 99.2973388671875
patch: result += lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 234
score: 99.2783203125
patch: result = lval CaMeL Int < 0 ? 0 : 0 ;
rank: 235
score: 99.37920673076923
patch: result = lval CaMeL Int == >> >> rval CaMeL Int ;
rank: 235
score: 99.33679962158203
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int 1 ;
rank: 235
score: 99.32199994255515
patch: result = lval CaMeL Int > rval CaMeL Int >> >> & rval CaMeL Int ;
rank: 235
score: 99.3091552734375
patch: result = n . new CaMeL Number ( result ) ; return n ;
rank: 235
score: 99.29706169577206
patch: . result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 236
score: 99.39905395507813
patch: result = Node . new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ) ; break ;
rank: 236
score: 99.37914321001838
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int rval ) ;
rank: 236
score: 99.37797277113971
patch: result = left . get CaMeL Type ( ) >> >> >> rval CaMeL Int ;
rank: 236
score: 99.33672018612133
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int >> ;
rank: 236
score: 99.32199276194854
patch: result = lval CaMeL Int & & rval CaMeL Int >> & rval CaMeL Int ;
rank: 236
score: 99.308984375
patch: result = left . get CaMeL Type ( ) << lval CaMeL Int ;
rank: 236
score: 99.30371856689453
patch: result = lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 236
score: 99.29645244891827
patch: result = lval CaMeL Int >> rval CaMeL Int << right ;
rank: 236
score: 99.2779541015625
patch: return lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;
rank: 237
score: 99.3983513327206
patch: result = Node . new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ;
rank: 237
score: 99.37783813476562
patch: result = new Node ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 237
score: 99.3218994140625
patch: result = lval CaMeL Int >> >> & >> >> >> rval CaMeL Int ;
rank: 237
score: 99.29984828404018
patch: result = lval CaMeL Int >> >> rval CaMeL Int . 0 ;
rank: 237
score: 99.29609375
patch: result = lval CaMeL Int * rval CaMeL Int << rval CaMeL Int ;
rank: 237
score: 99.27770124162946
patch: result = lval CaMeL Int * >> >> & rval CaMeL Int ;
rank: 237
score: 99.24404296875
patch: result = lval CaMeL Int | lval CaMeL Int >> rval CaMeL Int ;
rank: 238
score: 99.39809698807566
patch: result = lval CaMeL Int ? lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 238
score: 99.37872314453125
patch: result = lval CaMeL Int >> >> rval CaMeL Int >= rval CaMeL Int ;
rank: 238
score: 99.33544158935547
patch: result = lval [ 0 ] >> rval CaMeL Int >> rval CaMeL Int ;
rank: 238
score: 99.29751586914062
patch: result = ( byte ) lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 238
score: 99.27740478515625
patch: result = lval CaMeL Int & rval CaMeL Int rval CaMeL Int ;
rank: 238
score: 99.24391392299107
patch: b = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 239
score: 99.39797076056985
patch: result = lval CaMeL Int >> ( rval CaMeL Int << rval CaMeL Int ) ;
rank: 239
score: 99.30735868566177
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ;
rank: 239
score: 99.29498291015625
patch: result = lval CaMeL Int << >> rval CaMeL Int ; break ; default :
rank: 239
score: 99.24386160714286
patch: return rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 240
score: 99.37798517400569
patch: result = lval CaMeL Int >> >> rval 1 ;
rank: 240
score: 99.37696030560662
patch: double rval CaMeL Int = ( int ) n . get CaMeL Double ( ) ;
rank: 240
score: 99.3353630514706
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int -- ;
rank: 240
score: 99.32159064797794
patch: result = lval CaMeL Int > 0 ? lval CaMeL Int >> rval CaMeL Int ;
rank: 240
score: 99.30645392922794
patch: if ( $STRING$ . equals ( n . get CaMeL Type ( ) ) ) {
rank: 240
score: 99.29698944091797
patch: result = lval CaMeL Int >> >> >> >> >> - lval CaMeL Int ;
rank: 240
score: 99.29495442708334
patch: result = new Node ( result . get CaMeL Type ( ) ) ;
rank: 240
score: 99.27628871372768
patch: result = lval CaMeL Int >> >> & rval CaMeL Int ; ;
rank: 241
score: 99.37788391113281
patch: result = lval CaMeL Int >> rval CaMeL Int != >> rval CaMeL Int ;
rank: 241
score: 99.30540556066177
patch: result = lval CaMeL Int << ( rval CaMeL Int << >> rval CaMeL Int ;
rank: 241
score: 99.29579380580357
patch: result = lval CaMeL Int >> >> >> >> >> >> 1 ;
rank: 241
score: 99.29388427734375
patch: result = ( int ) ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 241
score: 99.27546037946429
patch: result = lval CaMeL Int + rval CaMeL Int >> >> rval ;
rank: 242
score: 99.3777084350586
patch: result = rval CaMeL Int > rval CaMeL Int >> >> rval CaMeL Int ;
rank: 242
score: 99.37643868582589
patch: result = Node . token CaMeL To CaMeL Name ( n ) ;
rank: 242
score: 99.33469525505515
patch: result = lval CaMeL Int >> ~ rval CaMeL Int >> >> rval CaMeL Int ;
rank: 242
score: 99.29575892857143
patch: result = lval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 242
score: 99.274072265625
patch: result = lval 0 * rval CaMeL Int >> >> rval CaMeL Int ;
rank: 243
score: 99.39634874131944
patch: int lval CaMeL Int = ( int ) rval CaMeL Int << >> rval CaMeL Int ;
rank: 243
score: 99.3345458984375
patch: lval = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 243
score: 99.294189453125
patch: result = lval CaMeL Int >> >> >> >> >> >> lval ;
rank: 243
score: 99.2737060546875
patch: result = lval CaMeL Int < 0 ? null : lval CaMeL Int ;
rank: 243
score: 99.2427978515625
patch: result = new Node . new CaMeL Number ( result ) ;
rank: 244
score: 99.37616838727679
patch: result = 0 + rval CaMeL Int >> >> rval CaMeL Int ;
rank: 244
score: 99.37527286305146
patch: result = n . get CaMeL Type ( ) . get CaMeL Value ( ) ;
rank: 244
score: 99.33419036865234
patch: result = lval CaMeL Int & >> rval CaMeL Int >> lval CaMeL Int ;
rank: 244
score: 99.30337344898896
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return new CaMeL Number ;
rank: 244
score: 99.29332778033088
patch: result ; result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 244
score: 99.27357584635416
patch: result = lval CaMeL Int >> >> >> >> == rval CaMeL Int ;
rank: 244
score: 99.2425537109375
patch: result = lval CaMeL Int != lval CaMeL Int >> rval CaMeL Int ;
rank: 245
score: 99.39561157226562
patch: result = Node . new CaMeL Number ( result , n . get CaMeL Parent ( ) ) ;
rank: 245
score: 99.37494973575367
patch: result += FRACTIONAL _ BITWISE _ OPERAND , right = ( int ) rval ;
rank: 245
score: 99.33372587316177
patch: result = lval CaMeL Int ? rval : lval CaMeL Int >> rval CaMeL Int ;
rank: 245
score: 99.3023681640625
patch: result = lval CaMeL Int >> : rval CaMeL Int >> rval CaMeL Int ;
rank: 245
score: 99.29325866699219
patch: result = lval CaMeL Int >> >> n . get CaMeL Double ( ) ;
rank: 245
score: 99.27200082632211
patch: result = lval CaMeL Int + >> ~ rval CaMeL Int ;
rank: 245
score: 99.24244791666666
patch: result = lval CaMeL Int >> rval CaMeL Int ? rval CaMeL Int ;
rank: 246
score: 99.3954216452206
patch: result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; break ;
rank: 246
score: 99.37551879882812
patch: result = rval CaMeL Int > >> rval CaMeL Int >> rval CaMeL Int ;
rank: 246
score: 99.3749138327206
patch: result = Node . new CaMeL Number ( lval CaMeL Int >> rval CaMeL Int ;
rank: 246
score: 99.29281412760416
patch: result = lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 246
score: 99.2718017578125
patch: result = lval CaMeL Int >> >> ~ >> & rval CaMeL Int ;
rank: 246
score: 99.24226379394531
patch: int rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 247
score: 99.39541190011161
patch: result ; result = Node . new CaMeL Number ( result ) ;
rank: 247
score: 99.374755859375
patch: result = lval CaMeL Int & ( int ) lval CaMeL Int ;
rank: 247
score: 99.33333587646484
patch: return ( lval CaMeL Int >> rval CaMeL Int ) >> rval CaMeL Int ;
rank: 247
score: 99.30134582519531
patch: report CaMeL Code CaMeL Change ( n . get CaMeL Type ( ) ) ;
rank: 247
score: 99.29277801513672
patch: result = lval CaMeL Int : lval CaMeL Int >> & rval CaMeL Int ;
rank: 247
score: 99.27155010516827
patch: result = lval CaMeL Int + >> rval CaMeL Int ; ;
rank: 247
score: 99.24185384114584
patch: return lval CaMeL Int << Node . new CaMeL Number ( result ) ;
rank: 248
score: 99.39522298177083
patch: result = lval CaMeL Int + ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 248
score: 99.31767578125
patch: result = lval CaMeL Int ^ rval CaMeL Int >> rval CaMeL Int ;
rank: 248
score: 99.3011703491211
patch: result = new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 248
score: 99.2927017211914
patch: int lval CaMeL Int = rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 248
score: 99.29265594482422
patch: result = lval >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 248
score: 99.2709491436298
patch: result = lval CaMeL Int >> >> >> >> rval ; ;
rank: 248
score: 99.24171447753906
patch: result = lval CaMeL Int == lval CaMeL Int >> >> rval CaMeL Int ;
rank: 249
score: 99.39467901932566
patch: result = lval CaMeL Int ? lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 249
score: 99.37425401475694
patch: return Node . new CaMeL Number ( Node . new CaMeL Number ( result ) ) ;
rank: 249
score: 99.33295440673828
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;
rank: 249
score: 99.3011245727539
patch: result = n . get CaMeL Double ( ) << >> rval CaMeL Int ;
rank: 249
score: 99.29261363636364
patch: result = lval CaMeL Int >> >> >> $NUMBER$ ;
rank: 249
score: 99.2923095703125
patch: this . error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 250
score: 99.37415422712054
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int ) ;
rank: 250
score: 99.317138671875
patch: result = lval CaMeL Int & >> >> >> >> & rval CaMeL Int ;
rank: 250
score: 99.30107565487133
patch: report CaMeL Code CaMeL Change ( Node . new CaMeL Number ( result ) ) ;
rank: 250
score: 99.29212188720703
patch: result = lval CaMeL Int << >> rval CaMeL Int * rval CaMeL Int ;
rank: 250
score: 99.27001953125
patch: result = lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 251
score: 99.3746826171875
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval $NUMBER$ ;
rank: 251
score: 99.33144962086396
patch: result = lval CaMeL Int >> & >> rval CaMeL Int >> rval CaMeL Int ;
rank: 251
score: 99.29203527113971
patch: result = lval CaMeL Int >> rval CaMeL Int : >> >> rval CaMeL Int ;
rank: 251
score: 99.29174041748047
patch: result = lval CaMeL Int & >> rval CaMeL Int & rval CaMeL Int ;
rank: 251
score: 99.26959698016827
patch: double lval CaMeL Int = lval CaMeL Int >> >> rval ;
rank: 251
score: 99.24090169270833
patch: result = lval CaMeL Int - lval CaMeL Int << rval CaMeL Int ;
rank: 252
score: 99.3943115234375
patch: result = lval CaMeL Int << >> rval CaMeL Int ; break ; case Token . URSH :
rank: 252
score: 99.37450408935547
patch: result = lval CaMeL Int >> >> rval CaMeL Int || lval CaMeL Int ;
rank: 252
score: 99.33118547712054
patch: result = lval CaMeL Int >> >> rval CaMeL Int & 1 ;
rank: 252
score: 99.31626892089844
patch: result = lval CaMeL Int >> << >> >> >> >> rval CaMeL Int ;
rank: 252
score: 99.29151153564453
patch: { result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 252
score: 99.29134368896484
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int : 1 ) ;
rank: 252
score: 99.26935221354167
patch: result = lval CaMeL Int == 0 ? null : lval CaMeL Int ;
rank: 252
score: 99.24062674386161
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; continue ;
rank: 253
score: 99.37443542480469
patch: result = lval CaMeL Int >> >> rval CaMeL Int && rval CaMeL Int ;
rank: 253
score: 99.3721923828125
patch: result = n . get CaMeL Node ( ) . get CaMeL Type ( ) ;
rank: 253
score: 99.31600952148438
patch: result = lval CaMeL Int / >> rval CaMeL Int >> rval CaMeL Int ;
rank: 253
score: 99.29143524169922
patch: result += lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 253
score: 99.26884765625
patch: result = lval CaMeL Int / rval CaMeL Int * rval CaMeL Int ;
rank: 254
score: 99.33071001838235
patch: result = rval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 254
score: 99.31558048023896
patch: result = lval CaMeL Int < 0 ? lval CaMeL Int : rval CaMeL Int ;
rank: 254
score: 99.29139619715073
patch: result = lval CaMeL Int << rval CaMeL Int . get CaMeL Double ( ) ;
rank: 254
score: 99.29034893329327
patch: result = lval CaMeL Int >> >> >> >> >> 1 ;
rank: 254
score: 99.26865234375
patch: result = lval CaMeL Int <= rval ? 0 : lval CaMeL Int ;
rank: 254
score: 99.23955078125
patch: result = lval CaMeL Int > rval CaMeL Int << rval CaMeL Int ;
rank: 255
score: 99.39408794202302
patch: break ; case Token . URSH : result = lval CaMeL Int << rval CaMeL Int ;
rank: 255
score: 99.37034098307292
patch: long rval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 255
score: 99.32923799402573
patch: result = lval CaMeL Int < 0 ? rval CaMeL Int : lval CaMeL Int ;
rank: 255
score: 99.3149055032169
patch: result = lval CaMeL Int & rval CaMeL Int >> >> | rval CaMeL Int ;
rank: 255
score: 99.29896647135416
patch: result = lval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;
rank: 255
score: 99.29005432128906
patch: result = lval CaMeL Int >> lval rval CaMeL Int + rval CaMeL Int ;
rank: 255
score: 99.23857116699219
patch: result = lval CaMeL Int >> || rval CaMeL Int >> rval CaMeL Int ;
rank: 256
score: 99.36924235026042
patch: report CaMeL Code CaMeL Change ( $STRING$ + Node . get CaMeL Type ( ) ) ;
rank: 256
score: 99.32902257582721
patch: result = lval CaMeL Int >> 0 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 256
score: 99.31486960018383
patch: result = lval CaMeL Int > rval ? lval CaMeL Int : rval CaMeL Int ;
rank: 256
score: 99.29069249770221
patch: result . result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 256
score: 99.288818359375
patch: result = lval CaMeL Int & >> rval CaMeL Int - rval CaMeL Int ;
rank: 257
score: 99.39321417557566
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . RSH :
rank: 257
score: 99.36900419347427
patch: double lval CaMeL Int = ( int ) n . get CaMeL Type ( ) ;
rank: 257
score: 99.31482747395833
patch: result = lval CaMeL Int && rval CaMeL Int > rval CaMeL Int ;
rank: 257
score: 99.2979377297794
patch: result = left . get CaMeL Type ( ) << >> >> rval CaMeL Int ;
rank: 257
score: 99.29041290283203
patch: result = lval CaMeL Int << rval CaMeL Int / >> rval CaMeL Int ;
rank: 257
score: 99.28876139322917
patch: this . lval = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 257
score: 99.265380859375
patch: result = lval CaMeL Int >> >> >> >> >> & $NUMBER$ ;
rank: 258
score: 99.37306315104166
patch: if = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 258
score: 99.36888970269098
patch: result = n . get CaMeL Type ( ) >> >> >> >> rval CaMeL Int ;
rank: 258
score: 99.32867431640625
patch: result = lval CaMeL Int ++ >> rval CaMeL Int >> rval CaMeL Int ;
rank: 258
score: 99.29754997702206
patch: report CaMeL Code CaMeL Change ( ) ; return new CaMeL Number ( result ) ;
rank: 258
score: 99.2895736694336
patch: result = lval CaMeL Int >> rval CaMeL Int ( rval CaMeL Int ) ;
rank: 258
score: 99.28803253173828
patch: this . lval = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 258
score: 99.26534016927083
patch: result = lval 1 / rval CaMeL Int >> >> rval CaMeL Int ;
rank: 259
score: 99.39241536458333
patch: result = Node . new CaMeL Number ( lval CaMeL Int >> >> rval CaMeL Int ;
rank: 259
score: 99.373046875
patch: result = lval CaMeL Int && lval CaMeL Int >> >> rval CaMeL Int ;
rank: 259
score: 99.36849975585938
patch: result = lval CaMeL Int & ( int ) rval ;
rank: 259
score: 99.32749938964844
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? 1 : 0 ;
rank: 259
score: 99.2876205444336
patch: result = lval CaMeL Int |= lval CaMeL Int >> >> rval CaMeL Int ;
rank: 259
score: 99.26531982421875
patch: if ( lval CaMeL Int >> & rval CaMeL Int )
rank: 259
score: 99.23765345982143
patch: result = lval CaMeL Int >> >> >> * rval CaMeL Int ;
rank: 260
score: 99.39228057861328
patch: result = Node . new = Node . new CaMeL Number ( result ) ;
rank: 260
score: 99.3727294921875
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return 0 ;
rank: 260
score: 99.36835394965277
patch: result = lval CaMeL Int >> rval CaMeL Int ? ( int ) rval CaMeL Int ;
rank: 260
score: 99.3274917602539
patch: final result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 260
score: 99.31126990685097
patch: result = lval CaMeL Int - >> >> rval CaMeL Int ;
rank: 260
score: 99.29696655273438
patch: token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 260
score: 99.28831129807692
patch: this . result = lval CaMeL Int << rval CaMeL Int ;
rank: 260
score: 99.287548828125
patch: result = lval = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 260
score: 99.26483561197917
patch: if ( lval CaMeL Int != 0 && rval CaMeL Int != 0 )
rank: 260
score: 99.23753255208334
patch: new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 261
score: 99.39170435855263
patch: result = Node . new CaMeL Number ( lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 261
score: 99.37259347098214
patch: result = 0 + lval CaMeL Int >> >> rval CaMeL Int ;
rank: 261
score: 99.32692583869485
patch: result = lval CaMeL Int < rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 261
score: 99.31087239583333
patch: result = lval CaMeL Int & & rval CaMeL Int ;
rank: 261
score: 99.23744303385416
patch: result = lval CaMeL Int / rval CaMeL Int << rval CaMeL Int ;
rank: 262
score: 99.36752658420139
patch: result = lval CaMeL Int >> rval CaMeL Int : ( int ) lval CaMeL Int ;
rank: 262
score: 99.32687557444854
patch: result = lval CaMeL Int != 0 ? lval CaMeL Int : lval CaMeL Int ;
rank: 262
score: 99.28638458251953
patch: result = rval CaMeL Int << >> rval CaMeL Int >> rval CaMeL Int ;
rank: 262
score: 99.26385498046875
patch: this . result = lval CaMeL Int & >> rval CaMeL Int ;
rank: 262
score: 99.237060546875
patch: return right . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 263
score: 99.3719951923077
patch: result = lval CaMeL Int >> 0 >> rval CaMeL Int ;
rank: 263
score: 99.36750623914931
patch: result = left . new CaMeL Number ( n . get CaMeL Double ( ) ) ;
rank: 263
score: 99.26358736478366
patch: double result = lval CaMeL Int / >> rval CaMeL Int ;
rank: 264
score: 99.3255145733173
patch: result = lval CaMeL Int >= >> >> rval CaMeL Int ;
rank: 264
score: 99.31061150045956
patch: result = lval CaMeL Int >> >> >> >> >> >> << rval CaMeL Int ;
rank: 264
score: 99.28581237792969
patch: result = lval CaMeL Int < lval CaMeL Int >> >> rval CaMeL Int ;
rank: 264
score: 99.26341029575893
patch: result = lval CaMeL Int >> == rval ? 0 : 0 ;
rank: 264
score: 99.23670247395833
patch: Patch new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 265
score: 99.3710049715909
patch: result = lval >> >> >> rval CaMeL Int ;
rank: 265
score: 99.3671875
patch: result = lval CaMeL Int << ( ( int ) result ) ;
rank: 265
score: 99.28570556640625
patch: long lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 265
score: 99.26290690104166
patch: return lval CaMeL Int / rval CaMeL Int >> >> rval CaMeL Int ;
rank: 265
score: 99.236572265625
patch: b = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 266
score: 99.38954072840073
patch: result = Node . new CaMeL Number ( result ) ; return new CaMeL Number ;
rank: 266
score: 99.37007649739583
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval ) ;
rank: 266
score: 99.36689588758681
patch: result = lval CaMeL Int & ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 266
score: 99.32426901424633
patch: result = lval CaMeL Int ; result = rval CaMeL Int >> rval CaMeL Int ;
rank: 266
score: 99.29489135742188
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default ;
rank: 266
score: 99.26282552083333
patch: result = lval CaMeL Int >> >> ^ >> >> rval CaMeL Int ;
rank: 267
score: 99.37004852294922
patch: result = rval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int ;
rank: 267
score: 99.36683565027573
patch: result = lval CaMeL Int << ( left . get CaMeL Double ( ) ) ;
rank: 267
score: 99.29486443014706
patch: result = new CaMeL Number ( rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 267
score: 99.2847900390625
patch: result = lval CaMeL Int >> >> ( >> rval CaMeL Int ) ;
rank: 267
score: 99.236328125
patch: result = lval CaMeL Int != lval CaMeL Int >> >> rval CaMeL Int ;
rank: 268
score: 99.36986541748047
patch: result = lval CaMeL Int >> 0 rval CaMeL Int >> rval CaMeL Int ;
rank: 268
score: 99.36669921875
patch: double rval CaMeL Int = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 268
score: 99.3236083984375
patch: result = 0 >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 268
score: 99.30889533547794
patch: result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 268
score: 99.28466078814338
patch: result . result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 268
score: 99.28458949497768
patch: result = lval CaMeL Int >> >> >> / rval CaMeL Int ;
rank: 268
score: 99.23601422991071
patch: result = lval CaMeL Int >> & rval CaMeL Int ; break ;
rank: 269
score: 99.38840619255515
patch: double rval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 269
score: 99.36944986979167
patch: result = lval CaMeL Int >> rval CaMeL Int == rval CaMeL Int ;
rank: 269
score: 99.36549287683823
patch: long rval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 269
score: 99.30872344970703
patch: result = lval CaMeL Int >> >> << >> >> >> rval CaMeL Int ;
rank: 269
score: 99.28431803385416
patch: result = new CaMeL Number >> rval CaMeL Int << rval CaMeL Int ;
rank: 269
score: 99.2840576171875
patch: result = lval CaMeL Int & rval CaMeL Int - rval CaMeL Int ;
rank: 269
score: 99.2615234375
patch: result = lval CaMeL Int >> >> >> >> ^= rval CaMeL Int ;
rank: 270
score: 99.38799370659723
patch: int lval CaMeL Int = ( int ) lval CaMeL Int << >> rval CaMeL Int ;
rank: 270
score: 99.36935424804688
patch: result = rval CaMeL Int >> >> rval CaMeL Int - lval CaMeL Int ;
rank: 270
score: 99.36534208409927
patch: double lval CaMeL Int = ( int ) right . get CaMeL Type ( ) ;
rank: 270
score: 99.32334899902344
patch: result = lval CaMeL Int >= lval CaMeL Int >> >> rval CaMeL Int ;
rank: 270
score: 99.29283796037946
patch: result . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 270
score: 99.2837422688802
patch: result = lval CaMeL Int < >> rval CaMeL Int ;
rank: 270
score: 99.26109967912946
patch: result = lval CaMeL Int / >> >> rval CaMeL Int ; ;
rank: 271
score: 99.36880696614584
patch: result = lval CaMeL Int >> rval CaMeL Int > rval CaMeL Int ;
rank: 271
score: 99.36518859863281
patch: result = lval CaMeL Int << ( ( int ) lval CaMeL Int ) ;
rank: 271
score: 99.30818939208984
patch: double result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 271
score: 99.28410788143383
patch: if ( left . get CaMeL Type ( ) == Token . URSH ) {
rank: 271
score: 99.26102701822917
patch: result = lval CaMeL Int >= >> >> >> >> rval CaMeL Int ;
rank: 271
score: 99.23511555989583
patch: result = lval CaMeL Int > lval CaMeL Int << rval CaMeL Int ;
rank: 272
score: 99.38678299753289
patch: result = lval CaMeL Int ? lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 272
score: 99.36408547794117
patch: result = lval CaMeL Int << ( left . get CaMeL Type ( ) ) ;
rank: 272
score: 99.32299086626838
patch: lval = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 272
score: 99.29264831542969
patch: result = Node . new CaMeL Number >> >> >> >> rval CaMeL Int ;
rank: 272
score: 99.284033203125
patch: result = lval CaMeL Int : lval CaMeL Int << rval CaMeL Int ;
rank: 273
score: 99.36385091145833
patch: result = lval CaMeL Int >> rval CaMeL Int + ( int ) lval CaMeL Int ;
rank: 273
score: 99.2348861694336
patch: new CaMeL Number = rval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 274
score: 99.36381261488971
patch: int rval CaMeL Int = ( int ) n . get CaMeL Double ( ) ;
rank: 274
score: 99.32290469898896
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ++ ;
rank: 274
score: 99.30802154541016
patch: result = lval CaMeL Int + >> >> >> >> >> rval CaMeL Int ;
rank: 274
score: 99.28373448988971
patch: result = lval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ; break ;
rank: 274
score: 99.28299713134766
patch: result = lval CaMeL Int >> lval rval CaMeL Int >> rval CaMeL Int ;
rank: 274
score: 99.26055908203125
patch: result = lval / lval CaMeL Int >> >> rval CaMeL Int ;
rank: 274
score: 99.23481096540179
patch: result = lval CaMeL Int >> * rval CaMeL Int ; break ;
rank: 275
score: 99.38544664884868
patch: result = lval CaMeL Int ? lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 275
score: 99.36557006835938
patch: if = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 275
score: 99.36347512637867
patch: byte lval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 275
score: 99.32279968261719
patch: return lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 275
score: 99.30684168198529
patch: result = lval CaMeL Int < rval ? lval CaMeL Int : rval CaMeL Int ;
rank: 275
score: 99.29131673177083
patch: result = right . get CaMeL Type ( ) << rval CaMeL Int ;
rank: 275
score: 99.28358369715073
patch: try { result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 275
score: 99.28250122070312
patch: result = lval CaMeL Int >> >> >> >> lval - rval CaMeL Int ;
rank: 275
score: 99.2604736328125
patch: result = lval CaMeL Int < 0 ? lval CaMeL Int : 0 ;
rank: 275
score: 99.23472493489584
patch: result = lval CaMeL Int == lval CaMeL Int >> rval CaMeL Int ;
rank: 276
score: 99.36551666259766
patch: result = rval CaMeL Int >> >> rval CaMeL Int / rval CaMeL Int ;
rank: 276
score: 99.36258273654514
patch: result += FRACTIONAL _ BITWISE _ OPERAND , right . get CaMeL Type ( ) ;
rank: 276
score: 99.32272774832589
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> true ;
rank: 276
score: 99.3061294555664
patch: final int result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 276
score: 99.28244018554688
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = result ;
rank: 276
score: 99.26031087239583
patch: String lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 276
score: 99.23422241210938
patch: if ( left . get CaMeL Type ( ) == Token . URSH :
rank: 277
score: 99.3622817993164
patch: result = new Node ( Node . new CaMeL Number ( result ) ) ;
rank: 277
score: 99.32186889648438
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ++ ;
rank: 277
score: 99.28242492675781
patch: result = lval CaMeL Int >> rval CaMeL Int >> & lval CaMeL Int ;
rank: 277
score: 99.26012244591347
patch: result = lval CaMeL Int / >> & rval CaMeL Int ;
rank: 278
score: 99.30562337239583
patch: result = lval CaMeL Int ? rval CaMeL Int : rval CaMeL Int ;
rank: 278
score: 99.2831561748798
patch: result = lval CaMeL Int >> rval CaMeL Int << 1 ;
rank: 278
score: 99.2597900390625
patch: result = lval CaMeL Int == rval ? 0 : lval CaMeL Int ;
rank: 278
score: 99.23358623798077
patch: result = lval CaMeL Int >> >> / rval CaMeL Int ;
rank: 279
score: 99.38434801603618
patch: append ( Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ) ;
rank: 279
score: 99.36183675130208
patch: System . out . println ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 279
score: 99.32150448069854
patch: result = lval CaMeL Int >> rval CaMeL Int >> 1 >> rval CaMeL Int ;
rank: 279
score: 99.28253173828125
patch: result = lval CaMeL Int 1 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 279
score: 99.25966796875
patch: result = lval CaMeL Int & rval CaMeL Int | rval CaMeL Int ;
rank: 279
score: 99.23355305989584
patch: result = lval CaMeL Int == lval CaMeL Int << rval CaMeL Int ;
rank: 280
score: 99.38341567095588
patch: result = Node . new CaMeL Number ( result ) ; Node new CaMeL Number ;
rank: 280
score: 99.36509704589844
patch: result = lval CaMeL Int - >> rval CaMeL Int - rval CaMeL Int ;
rank: 280
score: 99.3214111328125
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> ;
rank: 280
score: 99.3050308227539
patch: result = lval CaMeL Int - rval CaMeL Int >> & rval CaMeL Int ;
rank: 280
score: 99.28238254123264
patch: result = lval CaMeL Int >> 1 ;
rank: 280
score: 99.28226725260417
patch: result = lval CaMeL Int >> & ( >> rval CaMeL Int ) ;
rank: 280
score: 99.25878092447917
patch: if ( lval CaMeL Int >= 0 && lval CaMeL Int < 0 )
rank: 280
score: 99.2335205078125
patch: result = rval CaMeL Int >> >> >> rval CaMeL Int ; break ;
rank: 281
score: 99.38310803865132
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ; }
rank: 281
score: 99.36504720052083
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval $NUMBER$ ;
rank: 281
score: 99.32039701021634
patch: result = result >> rval CaMeL Int >> rval CaMeL Int ;
rank: 281
score: 99.28988826976104
patch: error ( $STRING$ + n . get CaMeL Type ( ) ) ; return n ;
rank: 281
score: 99.28157552083333
patch: return lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;
rank: 281
score: 99.25872247869319
patch: result = lval CaMeL Int >> >> rval ; ;
rank: 281
score: 99.23304036458333
patch: return new CaMeL Number ( result ) ; case Token . URSH :
rank: 282
score: 99.36473846435547
patch: result = $STRING$ ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 282
score: 99.36153157552083
patch: result = lval CaMeL Int << rval CaMeL Int + ( int ) lval CaMeL Int ;
rank: 282
score: 99.28946685791016
patch: result = lval CaMeL Int >> : rval CaMeL Int << rval CaMeL Int ;
rank: 282
score: 99.28187662760416
patch: result = lval CaMeL Int << left . get CaMeL Double ( ) ;
rank: 282
score: 99.25855431189903
patch: result = lval CaMeL Int << >> ~ rval CaMeL Int ;
rank: 282
score: 99.2329833984375
patch: return new CaMeL Number ( rval CaMeL Int ) << rval CaMeL Int ;
rank: 283
score: 99.38292846679687
patch: result = lval CaMeL Int ? Node . new CaMeL Number ( result ) : new CaMeL Number ;
rank: 283
score: 99.36149766710069
patch: result = n . get CaMeL Type ( ) << FRACTIONAL _ BITWISE _ OPERAND ,
rank: 283
score: 99.30429077148438
patch: long result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ;
rank: 283
score: 99.28150431315105
patch: result = lval CaMeL Int & lval rval CaMeL Int ;
rank: 283
score: 99.25834147135417
patch: L = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 283
score: 99.23297526041667
patch: result = lval CaMeL Int != lval CaMeL Int << rval CaMeL Int ;
rank: 284
score: 99.38243950737848
patch: result = lval CaMeL Int : ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 284
score: 99.36142985026042
patch: result = Node . new CaMeL Number ( result ) . get CaMeL Double ( ) ;
rank: 284
score: 99.31984049479166
patch: return lval CaMeL Int >> >> rval CaMeL Int >> lval CaMeL Int ;
rank: 284
score: 99.28128487723214
patch: result = lval CaMeL Int >> >> >> | lval CaMeL Int ;
rank: 284
score: 99.28058268229167
patch: result = new int ( result . get CaMeL Type ( ) ) ;
rank: 285
score: 99.38239288330078
patch: result = lval CaMeL Int + rval CaMeL Int << >> rval CaMeL Int ;
rank: 285
score: 99.36127387152777
patch: result = ( int ) n . get CaMeL Type ( ) >> rval CaMeL Int ;
rank: 285
score: 99.3197021484375
patch: result = lval CaMeL Int >> rval CaMeL Int & >> >> rval CaMeL Int ;
rank: 285
score: 99.30375402113971
patch: result = lval CaMeL Int == 0 ? lval CaMeL Int : rval CaMeL Int ;
rank: 285
score: 99.28118896484375
patch: result = lval CaMeL Int >> lval >> >> rval CaMeL Int ;
rank: 285
score: 99.28046061197917
patch: result = lval CaMeL Int << n . get CaMeL Long ( ) ;
rank: 285
score: 99.25757774939903
patch: String result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 286
score: 99.36377825055804
patch: result = lval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;
rank: 286
score: 99.30315399169922
patch: result = lval CaMeL Int >> rval CaMeL Int >> >= rval CaMeL Int ;
rank: 286
score: 99.28718836167279
patch: report CaMeL Code CaMeL Change ( ) ; return new Assertion CaMeL Error ( ) ;
rank: 286
score: 99.28117370605469
patch: result = lval CaMeL Int >> & rval CaMeL Int & rval CaMeL Int ;
rank: 286
score: 99.28018391927084
patch: result = new CaMeL Number >> rval CaMeL Int >> rval CaMeL Int ;
rank: 286
score: 99.257080078125
patch: result = lval CaMeL Int & >> >> >> rval ;
rank: 286
score: 99.23175455729167
patch: result = left . get CaMeL Long ( ) >> rval CaMeL Int ;
rank: 287
score: 99.3605095358456
patch: result = new CaMeL Number << ( n . get CaMeL Type ( ) ) ;
rank: 287
score: 99.30262974330357
patch: result = lval CaMeL Int >> rval CaMeL Int ; return result ;
rank: 287
score: 99.28679741753473
patch: result = result >> rval CaMeL Int ;
rank: 287
score: 99.28060150146484
patch: result = lval CaMeL Int & >> rval CaMeL Int + rval CaMeL Int ;
rank: 287
score: 99.27994537353516
patch: result = lval CaMeL Int << rval CaMeL Int ? >> rval CaMeL Int ;
rank: 287
score: 99.25694861778847
patch: result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;
rank: 287
score: 99.23162841796875
patch: return ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 288
score: 99.36036265980114
patch: double rval CaMeL Int = ( int ) rval ;
rank: 288
score: 99.31934407552083
patch: result = lval CaMeL Int == 0 ? lval : rval CaMeL Int ;
rank: 288
score: 99.30184173583984
patch: result = lval CaMeL Int & - rval CaMeL Int >> rval CaMeL Int ;
rank: 288
score: 99.28611653645834
patch: result = new int ( n . get CaMeL Type ( ) ) ;
rank: 288
score: 99.27988568474265
patch: result = lval CaMeL Int >> rval CaMeL Int + rval CaMeL Int ; break ;
rank: 288
score: 99.25679837740384
patch: result = lval CaMeL Int == 0 ? 0 : 0 ;
rank: 288
score: 99.2311503092448
patch: byte result = lval CaMeL Int >> rval CaMeL Int ;
rank: 289
score: 99.2795769186581
patch: result = lval CaMeL Int << rval CaMeL Int : rval CaMeL Int ; break ;
rank: 289
score: 99.25677897135417
patch: return lval CaMeL Int * rval CaMeL Int >> >> rval CaMeL Int ;
rank: 289
score: 99.23038736979167
patch: result = lval CaMeL Int & ( Integer . MIN _ VALUE ) ;
rank: 290
score: 99.38005235460069
patch: tmp = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 290
score: 99.30145263671875
patch: result = lval CaMeL Int * rval CaMeL Int >> & rval CaMeL Int ;
rank: 290
score: 99.2852783203125
patch: try { result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 290
score: 99.27957153320312
patch: result = rval CaMeL Int << >> rval CaMeL Int << rval CaMeL Int ;
rank: 290
score: 99.25673130580357
patch: result = lval CaMeL Int ^ rval CaMeL Int >> >> rval ;
rank: 290
score: 99.22980291193181
patch: result = lval CaMeL Int >> rval ; break ;
rank: 291
score: 99.38004985608552
patch: break ; case Token . URSH : result = lval CaMeL Int >> rval CaMeL Int ;
rank: 291
score: 99.3595832375919
patch: double rval CaMeL Int = ( int ) right . get CaMeL Double ( ) ;
rank: 291
score: 99.31907743566177
patch: result = rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> ;
rank: 291
score: 99.3014424641927
patch: result = lval CaMeL Int >> >> >> >> 1 ;
rank: 291
score: 99.25670514787946
patch: result = lval CaMeL Int | rval CaMeL Int >> >> rval ;
rank: 291
score: 99.22965494791667
patch: result = lval CaMeL Int == rval CaMeL Int << rval CaMeL Int ;
rank: 292
score: 99.36228314568015
patch: if = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 292
score: 99.31904153262867
patch: result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;
rank: 292
score: 99.30103302001953
patch: result = lval CaMeL Int >> && rval CaMeL Int >> rval CaMeL Int ;
rank: 292
score: 99.28439127604166
patch: return lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 292
score: 99.27861022949219
patch: result = lval CaMeL Int >> lval rval CaMeL Int - rval CaMeL Int ;
rank: 292
score: 99.25594656808036
patch: result = lval CaMeL Int >= >> >> >> rval CaMeL Int ;
rank: 292
score: 99.229248046875
patch: { result = lval CaMeL Int << rval CaMeL Int ; break ;
rank: 293
score: 99.36090959821429
patch: if lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 293
score: 99.35835096571181
patch: byte lval CaMeL Int = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 293
score: 99.31898408777573
patch: result = lval CaMeL Int != 0 ? rval CaMeL Int : lval CaMeL Int ;
rank: 293
score: 99.278564453125
patch: lval = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;
rank: 293
score: 99.25551932198661
patch: this . result = lval CaMeL Int + >> rval CaMeL Int ;
rank: 293
score: 99.2291748046875
patch: try { result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 294
score: 99.28415096507354
patch: result = Node . new CaMeL Number ( result , ( int ) rval ) ;
rank: 294
score: 99.27800750732422
patch: >> rval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 294
score: 99.25539725167411
patch: result = lval CaMeL Int << >> >> & rval CaMeL Int ;
rank: 295
score: 99.36060288373162
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int . ) ;
rank: 295
score: 99.35744222005208
patch: result = Node . new CaMeL Number ( result . get CaMeL Name ( ) ) ;
rank: 295
score: 99.31838091681985
patch: result = lval CaMeL Int ? lval : lval CaMeL Int >> rval CaMeL Int ;
rank: 295
score: 99.30001126802884
patch: result = lval CaMeL Int >> >> && rval CaMeL Int ;
rank: 295
score: 99.28294270833334
patch: result = new CaMeL Number << rval CaMeL Int >> rval CaMeL Int ;
rank: 295
score: 99.254931640625
patch: result = lval * / rval CaMeL Int >> >> rval CaMeL Int ;
rank: 295
score: 99.22840881347656
patch: if ( left . get CaMeL Type ( ) == Token . URSH )
rank: 296
score: 99.35722212357955
patch: int rval CaMeL Int = ( int ) rval ;
rank: 296
score: 99.29988316127232
patch: result = lval CaMeL Int - >> >> >> rval CaMeL Int ;
rank: 296
score: 99.25467623197116
patch: result = lval CaMeL Int >> ^ rval CaMeL Int ; ;
rank: 296
score: 99.22770182291667
patch: result = lval CaMeL Int < rval CaMeL Int >> rval CaMeL Int ;
rank: 297
score: 99.37838406032986
patch: result = lval CaMeL Int ? ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 297
score: 99.35704888237848
patch: result = Node . new CaMeL Number ( result , Token . MIN _ VALUE ) ;
rank: 297
score: 99.31794289981617
patch: return ( lval CaMeL Int >> rval CaMeL Int ) >> >> rval CaMeL Int ;
rank: 297
score: 99.2998779296875
patch: result = lval CaMeL Int || rval CaMeL Int > rval CaMeL Int ;
rank: 297
score: 99.27709147135417
patch: result = lval CaMeL Int >> rval CaMeL Int | lval CaMeL Int ;
rank: 297
score: 99.253271484375
patch: double rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 297
score: 99.22722625732422
patch: result = lval CaMeL Int >> | lval CaMeL Int >> rval CaMeL Int ;
rank: 298
score: 99.35939654181985
patch: result = rval CaMeL Int > >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 298
score: 99.3563003540039
patch: result = lval CaMeL Int << rval CaMeL Int << ( int ) rval ;
rank: 298
score: 99.31780646829044
patch: result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 298
score: 99.27747344970703
patch: if ( rval CaMeL Int != n . get CaMeL Type ( ) ) {
rank: 298
score: 99.227197265625
patch: return Node . new CaMeL Number ( result ) << rval CaMeL Int ;
rank: 299
score: 99.35826822916667
patch: result = lval CaMeL Int == >> >> >> >> rval CaMeL Int ;
rank: 299
score: 99.35594177246094
patch: result = lval CaMeL Int << ( n . get CaMeL Type ( ) ;
rank: 299
score: 99.31705474853516
patch: result = lval CaMeL Int -- >> rval CaMeL Int >> rval CaMeL Int ;
rank: 299
score: 99.29848069411058
patch: result = lval CaMeL Int >> >> >> >> >= 1 ;
rank: 299
score: 99.28145105698529
patch: throw new Assertion CaMeL Error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 299
score: 99.27642352764423
patch: result = lval CaMeL Int << rval CaMeL Int >> 1 ;
rank: 299
score: 99.25203159877232
patch: result = lval CaMeL Int >> >> >> & lval CaMeL Int ;
rank: 299
score: 99.2271395596591
patch: result = right . get CaMeL Double ( ) ;
rank: 300
score: 99.35789489746094
patch: result = lval CaMeL Int >> - rval CaMeL Int - rval CaMeL Int ;
rank: 300
score: 99.31702378216912
patch: result = lval CaMeL Int ? lval : rval CaMeL Int >> rval CaMeL Int ;
rank: 300
score: 99.28111267089844
patch: result = n ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 300
score: 99.27598219651442
patch: result = ( result >> >> >> rval CaMeL Int ) ;
rank: 300
score: 99.25152587890625
patch: / * result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 301
score: 99.35556209788604
patch: double rval CaMeL Int = ( int ) left . get CaMeL Double ( ) ;
rank: 301
score: 99.28101303998162
patch: result = n . get CaMeL Parent ( ) . get CaMeL Type ( ) ;
rank: 301
score: 99.27597045898438
patch: result = lval CaMeL Int & rval CaMeL Int >> & lval CaMeL Int ;
rank: 301
score: 99.27587890625
patch: try { result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 301
score: 99.22637469951923
patch: Long result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 302
score: 99.35759735107422
patch: result = lval CaMeL Int >> >> rval ( >> rval CaMeL Int ) ;
rank: 302
score: 99.31629180908203
patch: result = Math . min ( lval CaMeL Int , lval CaMeL Int ) ;
rank: 302
score: 99.29588216145834
patch: result = lval CaMeL Int >> >> >> << >> rval CaMeL Int ;
rank: 302
score: 99.2809589092548
patch: result = n . new CaMeL Number >> rval CaMeL Int ;
rank: 302
score: 99.27571323939732
patch: result = lval CaMeL Int >> >> rval CaMeL Int : 1 ;
rank: 302
score: 99.273828125
patch: result = lval CaMeL Int << >> ( int ) rval CaMeL Int ;
rank: 302
score: 99.25074114118304
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; if ;
rank: 302
score: 99.22569928850446
patch: int rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 303
score: 99.31626981847427
patch: return lval CaMeL Int >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 303
score: 99.28050130208334
patch: String new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 303
score: 99.2737548828125
patch: if ( ! ( lval >= Integer . MIN _ VALUE ) ) {
rank: 303
score: 99.2255147298177
patch: return rval CaMeL Int >> >> << rval CaMeL Int ;
rank: 304
score: 99.37658013237848
patch: c = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 304
score: 99.35417344835069
patch: result = lval CaMeL Int & ( int ) left . get CaMeL Double ( ) ;
rank: 304
score: 99.31581744025735
patch: result = lval CaMeL Int & rval >> rval CaMeL Int >> rval CaMeL Int ;
rank: 304
score: 99.28005746694711
patch: result = n . new CaMeL Number ( result ) ; ;
rank: 304
score: 99.27542317708334
patch: result = lval CaMeL Int >> >> >> - >> rval CaMeL Int ;
rank: 304
score: 99.24979654947917
patch: result = lval CaMeL Int >= 0 ? 0 : lval CaMeL Int ;
rank: 304
score: 99.2254638671875
patch: return lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 305
score: 99.3763656616211
patch: result = Node . new CaMeL Number ( n , new CaMeL Number ) ;
rank: 305
score: 99.35638068704044
patch: result = lval CaMeL Int ( rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 305
score: 99.3534797219669
patch: result = FRACTIONAL _ BITWISE _ OPERAND , left = ( int ) rval ;
rank: 305
score: 99.31578063964844
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + rval CaMeL Int ) ;
rank: 305
score: 99.29524993896484
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = lval ;
rank: 305
score: 99.27985696231617
patch: result = n . get CaMeL Type ( ) << rval CaMeL Int ; break ;
rank: 305
score: 99.24946812220982
patch: result = lval && lval CaMeL Int >> >> rval CaMeL Int ;
rank: 305
score: 99.22452218191964
patch: result . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 306
score: 99.37631064967105
patch: result = lval CaMeL Int : ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 306
score: 99.35577799479167
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return lval .
rank: 306
score: 99.35271139705883
patch: result = lval CaMeL Int >> ( n . get CaMeL Double ( ) ) ;
rank: 306
score: 99.27261555989584
patch: result = lval >> >> >> rval CaMeL Int << rval CaMeL Int ;
rank: 306
score: 99.2491963704427
patch: result = lval CaMeL Int + >> >> >> rval ;
rank: 306
score: 99.2237548828125
patch: s . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 307
score: 99.35239545036765
patch: int lval CaMeL Int = ( int ) left . get CaMeL Double ( ) ;
rank: 307
score: 99.31554457720588
patch: throw new Runtime CaMeL Exception ( rval CaMeL Int ( lval CaMeL Int ) ) ;
rank: 307
score: 99.29499816894531
patch: result = lval CaMeL Int >> >> >> >> >> >= rval CaMeL Int ;
rank: 307
score: 99.27873678768383
patch: if ( n . get CaMeL Type ( ) == Token . LSH ) { {
rank: 307
score: 99.274658203125
patch: result = lval CaMeL Int >> >> rval CaMeL Int : 0 ;
rank: 307
score: 99.2491924579327
patch: result = lval CaMeL Int >> >> >> >> & $NUMBER$ ;
rank: 307
score: 99.22221156529018
patch: return new CaMeL Number ( rval CaMeL Int >> >> rval ) ;
rank: 308
score: 99.37625732421876
patch: break ; case Token . URSH : result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 308
score: 99.35528923483456
patch: result = lval CaMeL Int >> rval ( rval CaMeL Int - rval CaMeL Int ;
rank: 308
score: 99.35195583767361
patch: result = Node . new CaMeL Number ( result . get CaMeL Node ( ) ) ;
rank: 308
score: 99.27851418887867
patch: error ( $STRING$ + Node . token CaMeL To CaMeL Name ( n ) ) ;
rank: 308
score: 99.27417755126953
patch: result = lval CaMeL Int >> & ( >> >> rval CaMeL Int ) ;
rank: 308
score: 99.2490478515625
patch: double lval CaMeL Int = lval CaMeL Int & >> rval CaMeL Int ;
rank: 309
score: 99.35166713169643
patch: result = lval : lval CaMeL Int >> >> rval CaMeL Int ;
rank: 309
score: 99.31430233226104
patch: if ( lval CaMeL Int != rval CaMeL Int ) result = lval CaMeL Int ;
rank: 309
score: 99.2948226928711
patch: result = lval CaMeL Int >> && rval CaMeL Int & rval CaMeL Int ;
rank: 309
score: 99.27366129557292
patch: int result = lval CaMeL Int >> rval CaMeL Int ;
rank: 309
score: 99.27114868164062
patch: result = lval CaMeL Int >> * rval CaMeL Int << rval CaMeL Int ;
rank: 309
score: 99.24891880580357
patch: result = lval CaMeL Int / >> >> >> >> >> rval ;
rank: 310
score: 99.37604437934027
patch: result = lval CaMeL Int + ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 310
score: 99.35411879595588
patch: result = rval CaMeL Int >> >> rval CaMeL Int != >> rval CaMeL Int ;
rank: 310
score: 99.35135650634766
patch: result = lval CaMeL Int << rval CaMeL Int >> >> lval CaMeL Int ;
rank: 310
score: 99.29453412224265
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; return result ;
rank: 310
score: 99.27340698242188
patch: result = lval CaMeL Int >> & rval CaMeL Int : lval CaMeL Int ;
rank: 310
score: 99.2481689453125
patch: result = lval CaMeL Int <= 0 ? 0 : lval CaMeL Int ;
rank: 310
score: 99.22130475725446
patch: int rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;
rank: 311
score: 99.29419663373162
patch: synchronized ( this ) { result = lval CaMeL Int >> rval CaMeL Int ; }
rank: 311
score: 99.24815784801136
patch: if ( lval CaMeL Int != rval CaMeL Int )
rank: 311
score: 99.22105994591347
patch: return lval CaMeL Int >> << rval CaMeL Int ; break ;
rank: 312
score: 99.35344587053571
patch: result = rval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;
rank: 312
score: 99.35108531605114
patch: double lval CaMeL Int = ( int ) rval ;
rank: 312
score: 99.29412841796875
patch: result = lval CaMeL Int << >> >> >> >> | rval CaMeL Int ;
rank: 312
score: 99.27285330636161
patch: final int result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 312
score: 99.26984049479167
patch: result = 0 ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 312
score: 99.24809047154018
patch: result = lval CaMeL Int >> >> >> >> >> >> & ;
rank: 312
score: 99.22067495492789
patch: b = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 313
score: 99.35306803385417
patch: result = rval CaMeL Int >> rval CaMeL Int - lval CaMeL Int ;
rank: 313
score: 99.35108139935662
patch: int lval CaMeL Int = ( int ) n . get CaMeL Type ( ) ;
rank: 313
score: 99.31240609975961
patch: result = lval CaMeL Int >> rval CaMeL Int >> 0 ;
rank: 313
score: 99.29411764705883
patch: result = lval CaMeL Int > 1 ? lval CaMeL Int >> rval CaMeL Int ;
rank: 313
score: 99.2765884399414
patch: result = n . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 313
score: 99.2722637469952
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int ;
rank: 313
score: 99.26981608072917
patch: result += lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 314
score: 99.37474646935097
patch: int lval CaMeL Int = ( int ) rval CaMeL Int ;
rank: 314
score: 99.31238555908203
patch: result = = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 314
score: 99.27547454833984
patch: result = new Exception ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 314
score: 99.27226257324219
patch: } else { result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 314
score: 99.24733323317308
patch: double result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 315
score: 99.37428042763158
patch: result = lval CaMeL Int >> rval CaMeL Int ? rval CaMeL Int >> rval CaMeL Int ;
rank: 315
score: 99.35032653808594
patch: return new CaMeL Number >> ( n . get CaMeL Type ( ) ) ;
rank: 315
score: 99.29291534423828
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval ;
rank: 315
score: 99.27546691894531
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; } return n ;
rank: 315
score: 99.27167510986328
patch: result = lval CaMeL Int >> & rval CaMeL Int - lval CaMeL Int ;
rank: 315
score: 99.24708775111607
patch: result = lval CaMeL Int >> >> ^ rval CaMeL Int ; ;
rank: 315
score: 99.21953125
patch: result = lval CaMeL Int ? rval CaMeL Int >> rval CaMeL Int ;
rank: 316
score: 99.37407090928819
patch: result += Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 316
score: 99.31165268841912
patch: result = rval CaMeL Int & >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 316
score: 99.2923916903409
patch: result = lval CaMeL Int >> >> > 1 ;
rank: 316
score: 99.27544403076172
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ; return n ;
rank: 316
score: 99.27158766526442
patch: result = lval CaMeL Int & >> - rval CaMeL Int ;
rank: 316
score: 99.26742553710938
patch: result = lval CaMeL Int << rval CaMeL Int ; return new CaMeL Number ;
rank: 316
score: 99.246923828125
patch: result = lval CaMeL Int >= 0 ? lval CaMeL Int : 0 ;
rank: 316
score: 99.21950857979911
patch: int lval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;
rank: 317
score: 99.35110473632812
patch: result = 1 ; result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 317
score: 99.31158806295956
patch: result = lval CaMeL Int >> >> - rval CaMeL Int >> rval CaMeL Int ;
rank: 317
score: 99.27541678292411
patch: result = new CaMeL Number << >> >> >> rval CaMeL Int ;
rank: 317
score: 99.24565778459821
patch: result = lval * rval CaMeL Int / >> rval CaMeL Int ;
rank: 317
score: 99.21898542131696
patch: double rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 318
score: 99.37360297309027
patch: buf = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 318
score: 99.35081263950893
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval ) ;
rank: 318
score: 99.31139418658088
patch: result = lval CaMeL Int ++ >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 318
score: 99.29154459635417
patch: result = lval CaMeL Int + lval CaMeL Int + rval CaMeL Int ;
rank: 318
score: 99.27540588378906
patch: result = 0 ; result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 318
score: 99.27069963727679
patch: result = lval CaMeL Int >> >> rval CaMeL Int : result ;
rank: 318
score: 99.26686314174107
patch: return lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 318
score: 99.21847534179688
patch: return rval CaMeL Int >> rval CaMeL Int ;
rank: 319
score: 99.35073673023896
patch: result = rval CaMeL Int >> >> rval CaMeL Int . - rval CaMeL Int ;
rank: 319
score: 99.31135828354779
patch: result = lval CaMeL Int 1 >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 319
score: 99.2664566040039
patch: result = lval CaMeL Int >> >> n . get CaMeL Type ( ) ;
rank: 320
score: 99.34866536458334
patch: try { error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 320
score: 99.2906494140625
patch: result = lval CaMeL Int & >> >> << rval CaMeL Int ;
rank: 320
score: 99.2660903930664
patch: result = lval CaMeL Int << >> rval CaMeL Int << lval CaMeL Int ;
rank: 320
score: 99.24448649088542
patch: result = lval CaMeL Int << & rval CaMeL Int ;
rank: 321
score: 99.37166341145833
patch: result = lval CaMeL Int : rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 321
score: 99.34960174560547
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return 0 ; }
rank: 321
score: 99.34852510340073
patch: Node new CaMeL Number = ( Node ) n . get CaMeL Parent ( ) ;
rank: 321
score: 99.31117078993056
patch: result = lval CaMeL Int >> $NUMBER$ ;
rank: 321
score: 99.29000150240384
patch: result = lval CaMeL Int << >> & rval CaMeL Int ;
rank: 321
score: 99.27386881510417
patch: result ++ ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 321
score: 99.26990509033203
patch: result = lval CaMeL Int & >> rval CaMeL Int : lval CaMeL Int ;
rank: 321
score: 99.2444580078125
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int == rval )
rank: 321
score: 99.21698404947917
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; break ;
rank: 322
score: 99.37141248914931
patch: result = lval CaMeL Int ? Node . new CaMeL Number ( result ) : n ;
rank: 322
score: 99.349462890625
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return lval ;
rank: 322
score: 99.31089782714844
patch: result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;
rank: 322
score: 99.28929138183594
patch: result = lval CaMeL Int ; throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 322
score: 99.27383188100961
patch: result = new CaMeL Number << >> >> rval CaMeL Int ;
rank: 322
score: 99.24390462239583
patch: result = lval CaMeL Int > 0 ? 0 : lval CaMeL Int ;
rank: 323
score: 99.34661865234375
patch: result = Node . new CaMeL Number ( result , true ) ;
rank: 323
score: 99.31085205078125
patch: result = lval CaMeL Int >> ~ rval CaMeL Int >> rval CaMeL Int ;
rank: 323
score: 99.2892596905048
patch: result = lval CaMeL Int >> >> ++ rval CaMeL Int ;
rank: 323
score: 99.26940046037946
patch: result = lval CaMeL Int < >> >> >> rval CaMeL Int ;
rank: 323
score: 99.24380057198661
patch: double lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 323
score: 99.21674053485577
patch: result = rval CaMeL Int << rval CaMeL Int ; break ;
rank: 324
score: 99.28916579026442
patch: result = lval CaMeL Int & >> << rval CaMeL Int ;
rank: 324
score: 99.26917266845703
patch: result = lval CaMeL Int >> >> rval CaMeL Int ^ lval CaMeL Int ;
rank: 324
score: 99.26520244891827
patch: result = lval >> rval CaMeL Int << rval CaMeL Int ;
rank: 324
score: 99.24372209821429
patch: result = lval CaMeL Int >> >> >> ^= rval CaMeL Int ;
rank: 324
score: 99.216552734375
patch: result = lval CaMeL Int < rval CaMeL Int << rval CaMeL Int ;
rank: 325
score: 99.34493582589286
patch: result = lval CaMeL Int << rval CaMeL Int rval CaMeL Int ;
rank: 325
score: 99.27262878417969
patch: result = ( int ) rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 325
score: 99.26885114397321
patch: result = this . lval CaMeL Int >> >> rval CaMeL Int ;
rank: 325
score: 99.26351928710938
patch: case Token . RSH : result = lval CaMeL Int << rval CaMeL Int ;
rank: 325
score: 99.24352213541667
patch: if ( lval CaMeL Int == 0 || lval CaMeL Int == 0 )
rank: 326
score: 99.34848920036765
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; = lval CaMeL Int ;
rank: 326
score: 99.30961339613971
patch: return lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 326
score: 99.2888542624081
patch: throw new Runtime CaMeL Exception ( $STRING$ + n . get CaMeL Message ( ) ;
rank: 326
score: 99.27127075195312
patch: result = n . new CaMeL Number ( result << rval CaMeL Int ) ;
rank: 326
score: 99.26717936197916
patch: result = result >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 326
score: 99.215234375
patch: Object new CaMeL Number = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 327
score: 99.36958821614583
patch: result = Node . new CaMeL Number ( right . get CaMeL Type ( ) ) ;
rank: 327
score: 99.2884765625
patch: result = lval CaMeL Int - >> >> >> >> rval CaMeL Int ;
rank: 327
score: 99.24345703125
patch: result = lval CaMeL Int == 0 ? lval : lval CaMeL Int ;
rank: 327
score: 99.21506754557292
patch: result = lval CaMeL Int + ( int ) rval ;
rank: 328
score: 99.34465475643383
patch: result = lval CaMeL Int << ( right . get CaMeL Double ( ) ) ;
rank: 328
score: 99.24231828962054
patch: result = new lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 328
score: 99.21484375
patch: tmp = lval CaMeL Int >> rval CaMeL Int ;
rank: 329
score: 99.34797886439732
patch: result = 0 >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 329
score: 99.30907485064338
patch: result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int >> 1 ;
rank: 329
score: 99.28777313232422
patch: result = lval CaMeL Int + rval CaMeL Int >> << rval CaMeL Int ;
rank: 329
score: 99.26995086669922
patch: result = n . get CaMeL Type ( ) >> - rval CaMeL Int ;
rank: 329
score: 99.24210030691964
patch: result = lval CaMeL Int == - 1 ? lval : lval ;
rank: 329
score: 99.21434674944196
patch: return right . get CaMeL Double ( ) << rval CaMeL Int ;
rank: 330
score: 99.3682861328125
patch: int rval CaMeL Int = ( int ) rval CaMeL Int << >> rval CaMeL Int ;
rank: 330
score: 99.34763470818015
patch: result = lval CaMeL Int >> >> rval CaMeL Int ) >> rval CaMeL Int ;
rank: 330
score: 99.30879429408482
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> count ;
rank: 330
score: 99.28774844898896
patch: result = lval CaMeL Int + rval CaMeL Int ; result = lval CaMeL Int ;
rank: 330
score: 99.26394653320312
patch: result = lval CaMeL Int >> : lval CaMeL Int >> rval CaMeL Int ;
rank: 330
score: 99.26231384277344
patch: result = lval CaMeL Int >> rval CaMeL Int << - rval CaMeL Int ;
rank: 330
score: 99.24208286830357
patch: result = lval CaMeL Int >> & ~ >> rval CaMeL Int ;
rank: 331
score: 99.36762830946181
patch: result = lval CaMeL Int : ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 331
score: 99.34450396369485
patch: result = new CaMeL Number >> ( result . get CaMeL Type ( ) ) ;
rank: 331
score: 99.3084357766544
patch: { result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; }
rank: 331
score: 99.28773716517857
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; }
rank: 331
score: 99.26373291015625
patch: super . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 331
score: 99.26222581129808
patch: result = lval CaMeL Int >> rval CaMeL Int << result ;
rank: 331
score: 99.24195274939903
patch: if ( lval CaMeL Int >> & rval CaMeL Int ) {
rank: 331
score: 99.21406773158482
patch: retval = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 332
score: 99.30833524816177
patch: result = lval CaMeL Int > 0 ? lval CaMeL Int : rval CaMeL Int ;
rank: 332
score: 99.2875732421875
patch: result = lval CaMeL Int >> & 1 ;
rank: 332
score: 99.26904296875
patch: Node new CaMeL Number = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 332
score: 99.2621078491211
patch: result += lval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 332
score: 99.24178873697916
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != 0 ;
rank: 333
score: 99.36728387129934
patch: break ; case Token . RSH : result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 333
score: 99.3439079733456
patch: result = lval CaMeL Int << rval CaMeL Int << Node . MIN _ VALUE ;
rank: 333
score: 99.308154296875
patch: return ( ( int ) lval CaMeL Int >> rval CaMeL Int ) ;
rank: 333
score: 99.26171112060547
patch: result = lval CaMeL Int >> Node . new CaMeL Number ( n ) ;
rank: 333
score: 99.2412353515625
patch: result = lval CaMeL Int >= rval ? 0 : lval CaMeL Int ;
rank: 333
score: 99.21368815104167
patch: result = lval CaMeL Int <= rval CaMeL Int >> rval CaMeL Int ;
rank: 334
score: 99.36725531684027
patch: result = lval CaMeL Int == ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 334
score: 99.3468487079327
patch: result = 0 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 334
score: 99.26861572265625
patch: report CaMeL Code CaMeL Change ( ) ;
rank: 334
score: 99.26126098632812
patch: result = lval CaMeL Int >> rval CaMeL Int ? >> rval CaMeL Int ;
rank: 334
score: 99.24112374441964
patch: * ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 335
score: 99.36700080422794
patch: result = lval CaMeL Int + rval CaMeL Int << rval CaMeL Int ; break ;
rank: 335
score: 99.3468017578125
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int - 0 ;
rank: 335
score: 99.30805520450367
patch: result = lval CaMeL Int >= 1 ? lval CaMeL Int : rval CaMeL Int ;
rank: 335
score: 99.28647748161765
patch: result = lval CaMeL Int >> >> && rval CaMeL Int + rval CaMeL Int ;
rank: 335
score: 99.26250457763672
patch: result = lval CaMeL Int >> lval rval CaMeL Int & rval CaMeL Int ;
rank: 335
score: 99.21350911458333
patch: long rval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 336
score: 99.34672546386719
patch: result = lval CaMeL Int == >> >> >> >> >> rval CaMeL Int ;
rank: 336
score: 99.30791877297794
patch: } result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 336
score: 99.26214192708333
patch: result = lval CaMeL Int & >> rval CaMeL Int rval CaMeL Int ;
rank: 336
score: 99.21338762555804
patch: result = lval CaMeL Int >> / rval CaMeL Int ; break ;
rank: 337
score: 99.34652889476104
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; = rval CaMeL Int ;
rank: 337
score: 99.34321145450367
patch: result = lval CaMeL Int << ( right . get CaMeL Type ( ) ) ;
rank: 337
score: 99.28568522135417
patch: long result = lval CaMeL Int & >> >> >> rval CaMeL Int ;
rank: 337
score: 99.26185607910156
patch: result = lval CaMeL Int >> >> rval CaMeL Int = lval CaMeL Int ;
rank: 338
score: 99.34632783777573
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ) ;
rank: 338
score: 99.28557942708333
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> & 1 ;
rank: 338
score: 99.26649475097656
patch: result = Node . new CaMeL Number ( result ) ; } return n ;
rank: 338
score: 99.26070404052734
patch: result = rval CaMeL Int >> >> rval CaMeL Int + lval CaMeL Int ;
rank: 338
score: 99.2598388671875
patch: result = lval CaMeL Int << rval CaMeL Int : lval CaMeL Int ;
rank: 338
score: 99.23868233816964
patch: result = lval CaMeL Int . compare CaMeL To ( lval ) ;
rank: 339
score: 99.34280598958334
patch: result = Node . new CaMeL Number ( result [ 0 ] ) ;
rank: 339
score: 99.30714326746323
patch: result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int >> 1 ;
rank: 339
score: 99.25983428955078
patch: if ( lval CaMeL Int != n . get CaMeL Type ( ) ) {
rank: 339
score: 99.23751220703124
patch: result = lval CaMeL Int << >> rval ;
rank: 339
score: 99.21186174665179
patch: float lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 340
score: 99.345458984375
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 340
score: 99.3427734375
patch: String lval CaMeL Int = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 340
score: 99.28504231770833
patch: result = lval CaMeL Int >> & >> >> & rval CaMeL Int ;
rank: 340
score: 99.26556396484375
patch: result = n ; report CaMeL Code CaMeL Change ( ) ; return n ;
rank: 340
score: 99.26036783854167
patch: result = lval CaMeL Int >> >> >> >> - lval CaMeL Int ;
rank: 340
score: 99.25972747802734
patch: { result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;
rank: 340
score: 99.23707798549107
patch: result = lval / rval CaMeL Int / >> rval CaMeL Int ;
rank: 341
score: 99.34153837316177
patch: int lval CaMeL Int = ( int ) right . get CaMeL Type ( ) ;
rank: 341
score: 99.30642520680146
patch: if ( lval CaMeL Int == rval CaMeL Int ) result = rval CaMeL Int ;
rank: 341
score: 99.28461100260417
patch: result = lval CaMeL Int && lval CaMeL Int > rval CaMeL Int ;
rank: 341
score: 99.26553344726562
patch: result = null ; result = Node . new CaMeL Number ( result ) ;
rank: 341
score: 99.2596664428711
patch: result = lval CaMeL Int << rval CaMeL Int >> - rval CaMeL Int ;
rank: 341
score: 99.23679896763393
patch: * / result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 341
score: 99.21056189903847
patch: new CaMeL Number = rval CaMeL Int << rval CaMeL Int ;
rank: 342
score: 99.34130045572917
patch: result = new Node ( left . get CaMeL Type ( ) ) ;
rank: 342
score: 99.30617388556985
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> lval ;
rank: 342
score: 99.26544548483456
patch: result = lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 342
score: 99.23649088541667
patch: if ( lval CaMeL Int < 0 && lval CaMeL Int < 0 )
rank: 342
score: 99.21028958834134
patch: return rval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 343
score: 99.36572265625
patch: case Token . URSH : result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 343
score: 99.34466145833333
patch: result = 0 ; result = rval CaMeL Int >> rval CaMeL Int ;
rank: 343
score: 99.34125518798828
patch: result = try CaMeL Fold CaMeL Shift ( n , left , right ) ;
rank: 343
score: 99.28385925292969
patch: result = lval CaMeL Int >> rval CaMeL Int >> | rval CaMeL Int ;
rank: 343
score: 99.26463487413194
patch: result = lval >> rval CaMeL Int ;
rank: 343
score: 99.25926971435547
patch: result = lval CaMeL Int >> >> ( >> >> rval CaMeL Int ) ;
rank: 343
score: 99.23640659877232
patch: result = lval || lval CaMeL Int >> >> rval CaMeL Int ;
rank: 343
score: 99.21017456054688
patch: state = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 344
score: 99.340576171875
patch: result = lval CaMeL Int >> rval CaMeL Int << lval CaMeL Int ; break ;
rank: 344
score: 99.28357805524554
patch: result = lval CaMeL Int >> >> >> <= rval CaMeL Int ;
rank: 344
score: 99.25909423828125
patch: result = lval CaMeL Int << >> rval CaMeL Int / rval CaMeL Int ;
rank: 344
score: 99.25906575520834
patch: result = lval CaMeL Int >> >> >> >> lval rval CaMeL Int ;
rank: 344
score: 99.23585611979166
patch: do { result = lval CaMeL Int >> >> rval CaMeL Int ; }
rank: 345
score: 99.34396541819854
patch: result = lval CaMeL Int == >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 345
score: 99.34010225183823
patch: int rval CaMeL Int = ( int ) left . get CaMeL Double ( ) ;
rank: 345
score: 99.25886535644531
patch: result = lval CaMeL Int >> >> lval CaMeL Int : lval CaMeL Int ;
rank: 345
score: 99.25882720947266
patch: new CaMeL Number = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 346
score: 99.36510552300348
patch: System . token CaMeL To CaMeL Name ( n . get CaMeL Type ( ) ) ;
rank: 346
score: 99.34371243990384
patch: result = lval CaMeL Int >> >> rval ( rval ) ;
rank: 346
score: 99.26355743408203
patch: result = new CaMeL Number ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 346
score: 99.23566143329327
patch: result = lval CaMeL Int >> >> >> >> & rval ;
rank: 346
score: 99.2099609375
patch: return Node . new CaMeL Number ( result ) ; } return n ;
rank: 347
score: 99.36443684895833
patch: result = lval CaMeL Int >> : ( int ) rval CaMeL Int ;
rank: 347
score: 99.33911850873162
patch: int rval CaMeL Int = ( int ) right . get CaMeL Double ( ) ;
rank: 347
score: 99.305078125
patch: result = lval CaMeL Int >> >> lval CaMeL Int rval CaMeL Int ;
rank: 347
score: 99.28312174479167
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 347
score: 99.25833333333334
patch: for lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 347
score: 99.2574462890625
patch: result = lval CaMeL Int >> rval CaMeL Int >> + rval CaMeL Int ;
rank: 347
score: 99.23526436941964
patch: result = lval CaMeL Int >> >> >> >> >> >> >> ;
rank: 347
score: 99.20967610677083
patch: return rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 348
score: 99.342431640625
patch: result = lval CaMeL Int && rval CaMeL Int >> rval CaMeL Int ;
rank: 348
score: 99.30506184895833
patch: result = lval CaMeL Int >> >> rval CaMeL Int [ 0 ] ;
rank: 348
score: 99.282861328125
patch: result = lval CaMeL Int & >> >> >> << rval CaMeL Int ;
rank: 348
score: 99.26289367675781
patch: result = result ; result = n . new CaMeL Number ( result ) ;
rank: 349
score: 99.36350708007812
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) << rval ;
rank: 349
score: 99.34238568474265
patch: result = rval CaMeL Int >> >> rval CaMeL Int : >> rval CaMeL Int ;
rank: 349
score: 99.30499626608456
patch: result = lval CaMeL Int == lval >> rval CaMeL Int >> rval CaMeL Int ;
rank: 349
score: 99.28269740513393
patch: result = lval CaMeL Int >> rval CaMeL Int >> & 1 ;
rank: 349
score: 99.26279703776042
patch: result = lval . new CaMeL Number ( result ) ;
rank: 349
score: 99.25763811383929
patch: result = lval CaMeL Int >> >> rval CaMeL Int + 1 ;
rank: 349
score: 99.257373046875
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; / * /
rank: 349
score: 99.23505859375
patch: result = lval CaMeL Int < rval ? 0 : lval CaMeL Int ;
rank: 349
score: 99.20950082632211
patch: return n . Node . new CaMeL Number ( result ) ;
rank: 350
score: 99.3634392233456
patch: long rval CaMeL Int = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 350
score: 99.30497741699219
patch: result = lval CaMeL Int >> = lval CaMeL Int >> rval CaMeL Int ;
rank: 351
score: 99.34224446614583
patch: result = rval CaMeL Int - rval CaMeL Int >> rval CaMeL Int ;
rank: 351
score: 99.33689252068015
patch: result = Node . new CaMeL Number ( result , ( int ) result ) ;
rank: 351
score: 99.3048095703125
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int -- ;
rank: 351
score: 99.26089477539062
patch: result = Node . new CaMeL Number ( result ) ; ; return n ;
rank: 351
score: 99.25687349759616
patch: result = lval CaMeL Int << rval CaMeL Int << right ;
rank: 351
score: 99.23458658854166
patch: result = lval CaMeL Int > 0 ? lval CaMeL Int : 0 ;
rank: 352
score: 99.36307373046876
patch: result = lval CaMeL Int << rval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ; }
rank: 352
score: 99.3421271829044
patch: result = lval CaMeL Int >> >> rval CaMeL Int || >> rval CaMeL Int ;
rank: 352
score: 99.3047234030331
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >= rval CaMeL Int ;
rank: 352
score: 99.26028207632211
patch: result = lval CaMeL Int << >> - rval CaMeL Int ;
rank: 352
score: 99.25606536865234
patch: result = lval CaMeL Int >> lval ( 1 - rval CaMeL Int ) ;
rank: 352
score: 99.23453776041667
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != rval )
rank: 352
score: 99.20773751395089
patch: Integer rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 353
score: 99.30443617876838
patch: result = lval CaMeL Int >> == rval CaMeL Int >> >> rval CaMeL Int ;
rank: 353
score: 99.2601318359375
patch: result = result ; result = Node . new CaMeL Number ( result ) ;
rank: 353
score: 99.25604654947917
patch: this . error ( FRACTIONAL _ BITWISE _ OPERAND , left ) ;
rank: 354
score: 99.33639526367188
patch: result = true ; result = Node . new CaMeL Number ( result ) ;
rank: 354
score: 99.30427551269531
patch: return rval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 354
score: 99.26004028320312
patch: result = Node . new CaMeL Number ( result - lval CaMeL Int ) ;
rank: 354
score: 99.25584309895834
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int . 1 ;
rank: 354
score: 99.23413899739583
patch: result = lval CaMeL Int < 0 ? $NUMBER$ : lval CaMeL Int ;
rank: 354
score: 99.2075439453125
patch: result = lval CaMeL Int << rval CaMeL Int ? rval CaMeL Int ;
rank: 355
score: 99.36135525173611
patch: s = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ;
rank: 355
score: 99.3362808227539
patch: } Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 355
score: 99.30400848388672
patch: } result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 355
score: 99.28050944010417
patch: result = lval CaMeL Int >> & rval CaMeL Int ; return result ;
rank: 355
score: 99.25529479980469
patch: result = ( result >> rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 355
score: 99.25528971354167
patch: result = lval CaMeL Int >> n . get CaMeL Type ( ) ;
rank: 355
score: 99.23397827148438
patch: result = lval CaMeL Int / & rval CaMeL Int ;
rank: 355
score: 99.20751081194196
patch: return lval CaMeL Int >> >> >> rval CaMeL Int ; break ;
rank: 356
score: 99.36088481702302
patch: result = lval CaMeL Int + rval CaMeL Int ; break ; case Token . URSH :
rank: 356
score: 99.34078216552734
patch: result = rval CaMeL Int >> >> rval CaMeL Int != rval CaMeL Int ;
rank: 356
score: 99.3362704190341
patch: result = left . get CaMeL Double ( ) ;
rank: 356
score: 99.30393880208334
patch: result = lval CaMeL Int >= 0 ? rval : rval CaMeL Int ;
rank: 356
score: 99.28044577205883
patch: result = lval CaMeL Int > rval ? lval CaMeL Int >> rval CaMeL Int ;
rank: 356
score: 99.25499725341797
patch: result = lval CaMeL Int >> rval CaMeL Int >> / rval CaMeL Int ;
rank: 356
score: 99.25497233072916
patch: result = lval CaMeL Int >> & rval CaMeL Int rval CaMeL Int ;
rank: 356
score: 99.23396809895833
patch: result = lval CaMeL Int & rval ;
rank: 357
score: 99.34046846277573
patch: result = - rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 357
score: 99.30385454963235
patch: result = lval CaMeL Int -- >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 357
score: 99.27961730957031
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval ;
rank: 357
score: 99.2586669921875
patch: result = ( int ) ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 357
score: 99.25370025634766
patch: result = new Node ( result ) . new CaMeL Number ( result ) ;
rank: 357
score: 99.23372395833333
patch: result = lval CaMeL Int & rval rval CaMeL Int ;
rank: 358
score: 99.33998736213235
patch: result = lval CaMeL Int >> rval CaMeL Int rval ) - rval CaMeL Int ;
rank: 358
score: 99.33615291819854
patch: result = Node . lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 358
score: 99.30376325334821
patch: this . result = lval CaMeL Int >> >> lval CaMeL Int ;
rank: 358
score: 99.27920968191964
patch: result = lval CaMeL Int & rval CaMeL Int >> >> 1 ;
rank: 358
score: 99.2586200420673
patch: result = n . new CaMeL Number << rval CaMeL Int ;
rank: 358
score: 99.25476888020833
patch: long rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 358
score: 99.2536865234375
patch: result = lval CaMeL Int << rval CaMeL Int + lval CaMeL Int ;
rank: 358
score: 99.23366135817308
patch: result = lval CaMeL Int >> >> & lval CaMeL Int ;
rank: 359
score: 99.35936279296875
patch: result = Node . new CaMeL Number ( result ) ; n . get CaMeL Parent ( ) ;
rank: 359
score: 99.33997300091912
patch: result = lval CaMeL Int >> 1 >> rval CaMeL Int - rval CaMeL Int ;
rank: 359
score: 99.33590698242188
patch: result = false ; result = Node . new CaMeL Number ( result ) ;
rank: 359
score: 99.30358014787946
patch: return lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;
rank: 359
score: 99.27880859375
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >= 1 ;
rank: 359
score: 99.25294596354166
patch: result = lval >> >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 359
score: 99.23324584960938
patch: result = lval CaMeL Int >> *= rval CaMeL Int ;
rank: 359
score: 99.20679649939903
patch: Buffer result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 360
score: 99.33955601283482
patch: result = 1 >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 360
score: 99.33498709542411
patch: result = Node . new CaMeL Number ( result , false ) ;
rank: 360
score: 99.27842018821023
patch: result = lval CaMeL Int >> >> & 1 ;
rank: 360
score: 99.25845336914062
patch: result = null ; result = n . new CaMeL Number ( result ) ;
rank: 360
score: 99.25369027944711
patch: result = lval CaMeL Int >> >> * lval CaMeL Int ;
rank: 360
score: 99.25257161458333
patch: try { result = lval CaMeL Int << rval CaMeL Int ; break ;
rank: 360
score: 99.20669555664062
patch: val = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 361
score: 99.33953857421875
patch: result = lval CaMeL Int : >> rval CaMeL Int >> rval CaMeL Int ;
rank: 361
score: 99.25822448730469
patch: result = Node . new CaMeL Number ( result << rval CaMeL Int ) ;
rank: 361
score: 99.2535400390625
patch: result = lval CaMeL Int ? lval CaMeL Int >> & rval CaMeL Int ;
rank: 361
score: 99.25210571289062
patch: result = lval CaMeL Int << rval CaMeL Int ; if ( lval ) {
rank: 361
score: 99.2330078125
patch: result = lval CaMeL Int < 0 ? $STRING$ : lval CaMeL Int ;
rank: 362
score: 99.33417510986328
patch: result = lval CaMeL Int >> rval CaMeL Int << ( int ) rval ;
rank: 362
score: 99.27760225183823
patch: result = lval CaMeL Int >> ; System . out . println ( $STRING$ ) ;
rank: 362
score: 99.2534649188702
patch: result = lval CaMeL Int >> & - rval CaMeL Int ;
rank: 362
score: 99.25199672154018
patch: result ++ ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 362
score: 99.23277180989584
patch: result = lval CaMeL Int < 0 ? rval : lval CaMeL Int ;
rank: 362
score: 99.20623309795673
patch: Value result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 363
score: 99.3580093383789
patch: result = Node . new CaMeL Number ( lval , new CaMeL Number ) ;
rank: 363
score: 99.33933803013393
patch: result = lval CaMeL Int >> >> 1 - rval CaMeL Int ;
rank: 363
score: 99.33367450420673
patch: double lval CaMeL Int = ( int ) lval CaMeL Int ;
rank: 363
score: 99.30310776654412
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> = rval CaMeL Int ;
rank: 363
score: 99.27696990966797
patch: result = lval CaMeL Int >> >> & rval CaMeL Int ; return result ;
rank: 363
score: 99.2581787109375
patch: result ; result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 363
score: 99.25286102294922
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? 1 : 1 ;
rank: 363
score: 99.25170026506696
patch: result = ( int ) n . get CaMeL Double ( ) ;
rank: 363
score: 99.23225911458333
patch: result = lval CaMeL Int <= >> rval CaMeL Int ;
rank: 363
score: 99.20596749441964
patch: Object new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;
rank: 364
score: 99.35760176809211
patch: result = lval CaMeL Int << lval CaMeL Int ; break ; case Token . URSH :
rank: 364
score: 99.3390754250919
patch: result = lval CaMeL Int ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 364
score: 99.33345540364583
patch: result = lval CaMeL Int << ( rval >> rval CaMeL Int ) ;
rank: 364
score: 99.30305032169117
patch: result = lval CaMeL Int & >> rval CaMeL Int >> rval CaMeL Int >> ;
rank: 364
score: 99.27684828814338
patch: result = lval CaMeL Int & >> >> >> >> >> >> rval CaMeL Int ;
rank: 364
score: 99.25804946001838
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; case Token . RSH :
rank: 364
score: 99.25264739990234
patch: result = lval CaMeL Int >> lval ( rval CaMeL Int - 1 ) ;
rank: 364
score: 99.25120326450893
patch: result = FRACTIONAL _ BITWISE _ OPERAND , rval CaMeL Int ;
rank: 364
score: 99.20583670479911
patch: float rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 365
score: 99.35706922743056
patch: long lval CaMeL Int = ( int ) rval CaMeL Int << >> rval CaMeL Int ;
rank: 365
score: 99.33317296645221
patch: result = lval CaMeL Int >> ( right . get CaMeL Type ( ) ) ;
rank: 365
score: 99.30297133501838
patch: if ( lval CaMeL Int == lval CaMeL Int ) result = rval CaMeL Int ;
rank: 365
score: 99.27571614583333
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >> 1 ;
rank: 365
score: 99.25775146484375
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( )
rank: 365
score: 99.2523422241211
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int + 1 ) ;
rank: 365
score: 99.25052642822266
patch: result = lval CaMeL Int << Node . new CaMeL Number ( n ) ;
rank: 365
score: 99.23195393880208
patch: result = lval CaMeL Int >> % rval CaMeL Int ;
rank: 366
score: 99.33821375229779
patch: result = lval CaMeL Int >> rval ( rval CaMeL Int >> rval CaMeL Int ;
rank: 366
score: 99.33312270220588
patch: String new CaMeL Number = ( int ) n . get CaMeL Type ( ) ;
rank: 366
score: 99.27494506835937
patch: result = lval CaMeL Int & - 1 ;
rank: 366
score: 99.25748697916667
patch: result = lval CaMeL Int >> > rval CaMeL Int ;
rank: 366
score: 99.25228678385416
patch: this . result = lval CaMeL Int >> >> - rval CaMeL Int ;
rank: 366
score: 99.23129272460938
patch: result = lval CaMeL Int == >> rval CaMeL Int ;
rank: 366
score: 99.20295061383929
patch: return rval CaMeL Int >> >> >> rval CaMeL Int ; break ;
rank: 367
score: 99.3557990579044
patch: result = lval CaMeL Int + rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 367
score: 99.33787626378677
patch: result = lval CaMeL Int >> 0 rval CaMeL Int >> >> rval CaMeL Int ;
rank: 367
score: 99.27447509765625
patch: result = lval CaMeL Int >> >> >> >= 1 ;
rank: 367
score: 99.25733947753906
patch: result = ( int ) lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 367
score: 99.2519864169034
patch: result = result >> >> >> rval CaMeL Int ;
rank: 367
score: 99.23126690204327
patch: result = lval CaMeL Int >> >> >> >> >> & ;
rank: 367
score: 99.20274939903847
patch: short result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 368
score: 99.35566980698529
patch: result = lval CaMeL Int >> ( rval CaMeL Int >> >> rval CaMeL Int ;
rank: 368
score: 99.2743671123798
patch: result = lval CaMeL Int >> >> || rval CaMeL Int ;
rank: 368
score: 99.25137329101562
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> - 1 ;
rank: 368
score: 99.24964250837054
patch: result = lval CaMeL Int >> >> rval CaMeL Int << 1 ;
rank: 368
score: 99.23123372395834
patch: if ( lval CaMeL Int >> >> >> & rval CaMeL Int ) {
rank: 368
score: 99.20243013822116
patch: return rval CaMeL Int >> >> >> << rval CaMeL Int ;
rank: 369
score: 99.3018439797794
patch: result = lval CaMeL Int . length >> rval CaMeL Int >> rval CaMeL Int ;
rank: 369
score: 99.27398212139423
patch: result = lval CaMeL Int >> >> >> >> >> $NUMBER$ ;
rank: 369
score: 99.25635579427083
patch: result -- ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 369
score: 99.2023213704427
patch: Integer result = lval CaMeL Int >> rval CaMeL Int ;
rank: 370
score: 99.35479736328125
patch: double new CaMeL Number = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 370
score: 99.3370830829327
patch: result = lval CaMeL Int >> 0 - rval CaMeL Int ;
rank: 370
score: 99.33222512637867
patch: double lval CaMeL Int = ( int ) left . get CaMeL Type ( ) ;
rank: 370
score: 99.30170084635417
patch: result = lval CaMeL Int > rval CaMeL Int - rval CaMeL Int ;
rank: 370
score: 99.27262660435268
patch: long result = lval CaMeL Int & >> >> rval CaMeL Int ;
rank: 370
score: 99.25611787683823
patch: result = lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ; }
rank: 370
score: 99.24952189127605
patch: . result = lval CaMeL Int << rval CaMeL Int ;
rank: 370
score: 99.23041178385417
patch: this . result = lval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 370
score: 99.20225306919643
patch: return result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 371
score: 99.33146667480469
patch: new CaMeL Number = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 371
score: 99.30150604248047
patch: result = lval CaMeL Int >= rval CaMeL Int - >> rval CaMeL Int ;
rank: 371
score: 99.24946594238281
patch: result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ; }
rank: 371
score: 99.23033854166667
patch: result = lval CaMeL Int >= 0 ? lval CaMeL Int : lval ;
rank: 371
score: 99.20168631417411
patch: return lval CaMeL Int >> >> << rval CaMeL Int ; break ;
rank: 372
score: 99.30108235677083
patch: result = lval CaMeL Int >= lval CaMeL Int >> rval CaMeL Int ;
rank: 372
score: 99.2712043313419
patch: result = lval CaMeL Int == rval ? lval CaMeL Int : rval CaMeL Int ;
rank: 372
score: 99.25410461425781
patch: result = n . new CaMeL Number ( result , lval CaMeL Int ) ;
rank: 372
score: 99.25038364955357
patch: result = lval CaMeL Int >> >> rval CaMeL Int & lval ;
rank: 372
score: 99.24876403808594
patch: try { new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 372
score: 99.22993687220982
patch: if ( lval CaMeL Int >> >> >> & rval CaMeL Int )
rank: 372
score: 99.20071847098214
patch: return lval CaMeL Int >> >> >> >> << rval CaMeL Int ;
rank: 373
score: 99.3310791015625
patch: result = Node . new CaMeL Number ( ( int ) lval ) ;
rank: 373
score: 99.30079650878906
patch: result = rval CaMeL Int & >> rval CaMeL Int >> rval CaMeL Int ;
rank: 373
score: 99.254052734375
patch: Node new CaMeL Number = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 373
score: 99.25016566685268
patch: result = lval CaMeL Int & lval >> >> rval CaMeL Int ;
rank: 373
score: 99.24853515625
patch: result = lval CaMeL Int >> Token . new CaMeL Number ( result ) ;
rank: 374
score: 99.27004107306985
patch: result = lval CaMeL Int ; throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 374
score: 99.2500991821289
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; result -- ;
rank: 374
score: 99.24849155970982
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; try {
rank: 374
score: 99.22919170673077
patch: result = lval CaMeL Int >> >> % rval CaMeL Int ;
rank: 374
score: 99.19920857747395
patch: return lval CaMeL Int << rval CaMeL Int ; break ;
rank: 375
score: 99.33011568509616
patch: result = Node . lval CaMeL Int << rval CaMeL Int ;
rank: 375
score: 99.30029296875
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> $NUMBER$ ;
rank: 375
score: 99.26943359375
patch: result = lval CaMeL Int && rval CaMeL Int == rval CaMeL Int ;
rank: 375
score: 99.25336456298828
patch: error ( BITWISE _ OPERAND _ OUT _ OF _ RANGE , right ) ;
rank: 375
score: 99.22903006417411
patch: result = lval CaMeL Int >> == 1 ? 0 : 0 ;
rank: 375
score: 99.1990966796875
patch: new CaMeL Number = rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 376
score: 99.33007094439338
patch: double lval CaMeL Int = ( int ) lval CaMeL Int << lval CaMeL Int ;
rank: 376
score: 99.29966634114584
patch: result = result >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 376
score: 99.269091796875
patch: result = lval CaMeL Int ? lval CaMeL Int >> rval CaMeL Int ;
rank: 376
score: 99.22847806490384
patch: result = lval CaMeL Int >> >> |= rval CaMeL Int ;
rank: 377
score: 99.32981962316177
patch: result = lval CaMeL Int << rval CaMeL Int << lval CaMeL Int ; break ;
rank: 377
score: 99.29857635498047
patch: result = rval CaMeL Int >> >> lval CaMeL Int >> rval CaMeL Int ;
rank: 377
score: 99.26885431463069
patch: result = lval CaMeL Int >> & - 1 ;
rank: 377
score: 99.253173828125
patch: error ( $STRING$ + n . get CaMeL Type ( ) + $STRING$ ) ;
rank: 377
score: 99.19878743489583
patch: b = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 378
score: 99.33535766601562
patch: result = lval CaMeL Int >> 1 rval CaMeL Int >> rval CaMeL Int ;
rank: 378
score: 99.2528584798177
patch: result = lval CaMeL Int >> rval CaMeL Int ; }
rank: 378
score: 99.24844796316964
patch: result = lval CaMeL Int >> >> >> : lval CaMeL Int ;
rank: 378
score: 99.22794596354167
patch: result = lval CaMeL Int >> >> >> >> >> >> >> >> ;
rank: 378
score: 99.19821602957589
patch: result = lval CaMeL Int << rval CaMeL Int >> >> rval ;
rank: 379
score: 99.33525085449219
patch: result = lval CaMeL Int >> rval CaMeL Int . - rval CaMeL Int ;
rank: 379
score: 99.32928107766544
patch: Node new CaMeL Number = ( int ) n . get CaMeL Parent ( ) ;
rank: 379
score: 99.24759674072266
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; result ++ ;
rank: 379
score: 99.22767857142857
patch: result = lval CaMeL Int >> & ~ ~ rval CaMeL Int ;
rank: 379
score: 99.19749098557692
patch: retval = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 380
score: 99.33477783203125
patch: result = lval CaMeL Int - rval CaMeL Int - >> rval CaMeL Int ;
rank: 380
score: 99.32916259765625
patch: result = lval CaMeL Int << rval CaMeL Int + ( int ) rval ;
rank: 380
score: 99.29766082763672
patch: lval = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 380
score: 99.25224304199219
patch: result = n . get CaMeL Type ( ) << ( int ) rval ;
rank: 380
score: 99.2272479717548
patch: result = lval CaMeL Int . int CaMeL Value ( ) ;
rank: 380
score: 99.19705904447116
patch: retval = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 381
score: 99.3282699584961
patch: result = lval CaMeL Int >> rval CaMeL Int + ( int ) rval ;
rank: 381
score: 99.29678109975961
patch: result = lval CaMeL Int >> >> rval CaMeL Int -- ;
rank: 381
score: 99.26798248291016
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> & 1 ;
rank: 381
score: 99.24691772460938
patch: result = new int ) ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 381
score: 99.24639485677083
patch: result = lval CaMeL Int < >> >> >> >> rval CaMeL Int ;
rank: 381
score: 99.22676304408482
patch: result = lval CaMeL Int . value CaMeL Of ( lval ) ;
rank: 381
score: 99.19637044270833
patch: result = lval CaMeL Int << rval CaMeL Int | rval CaMeL Int ;
rank: 382
score: 99.3347412109375
patch: result = lval CaMeL Int >> >> rval . - rval CaMeL Int ;
rank: 382
score: 99.26773507254464
patch: result = lval CaMeL Int & & >> >> rval CaMeL Int ;
rank: 382
score: 99.25201416015625
patch: result = 0 ; switch ( n . get CaMeL Type ( ) ) {
rank: 382
score: 99.24517352764423
patch: result = lval CaMeL Int >> >> : lval CaMeL Int ;
rank: 382
score: 99.19582297585227
patch: val = lval CaMeL Int >> rval CaMeL Int ;
rank: 383
score: 99.26771545410156
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; result = ;
rank: 383
score: 99.225830078125
patch: result = lval CaMeL Int & >> >> >> >> & 0 ;
rank: 383
score: 99.19537760416667
patch: long lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 384
score: 99.3346435546875
patch: result = rval CaMeL Int >> rval CaMeL Int + rval CaMeL Int ;
rank: 384
score: 99.26746419270833
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> 1 ;
rank: 384
score: 99.24498494466145
patch: result = lval CaMeL Int >> >> >> >> lval }
rank: 384
score: 99.22557654747597
patch: result = lval CaMeL Int < 0 ? lval CaMeL Int ;
rank: 384
score: 99.19525146484375
patch: return rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;
rank: 385
score: 99.34975298713235
patch: Node new CaMeL Number = Node . new CaMeL Number ( lval CaMeL Int ) ;
rank: 385
score: 99.26736450195312
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 385
score: 99.24498697916667
patch: result = new long ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 385
score: 99.19489397321429
patch: double lval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;
rank: 386
score: 99.3488300030048
patch: result = lval CaMeL Int >> >> + rval CaMeL Int ;
rank: 386
score: 99.25098374310662
patch: if ( n . get CaMeL Type ( ) == Token . RSH ) { {
rank: 386
score: 99.24481608072917
patch: result = null ; result = lval CaMeL Int >> rval CaMeL Int ;
rank: 386
score: 99.2432373046875
patch: result = lval CaMeL Int >> >> >> lval >> rval CaMeL Int ;
rank: 386
score: 99.225341796875
patch: result = lval CaMeL Int == - 1 ? lval : 0 ;
rank: 386
score: 99.19362571022727
patch: state = lval CaMeL Int >> rval CaMeL Int ;
rank: 387
score: 99.32504272460938
patch: result = lval CaMeL Int >> ( ( int ) rval CaMeL Int ) ;
rank: 387
score: 99.26649576822916
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >= 1 ;
rank: 387
score: 99.25072428385417
patch: Buffer new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 387
score: 99.2447021484375
patch: result += lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;
rank: 387
score: 99.22510637555804
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != ;
rank: 387
score: 99.19347205528847
patch: new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;
rank: 388
score: 99.33375549316406
patch: result = lval CaMeL Int != >> rval CaMeL Int >> rval CaMeL Int ;
rank: 388
score: 99.32499694824219
patch: result = lval CaMeL Int << ( lval CaMeL Int >> rval CaMeL Int ;
rank: 388
score: 99.26622663225446
patch: result = lval CaMeL Int >> >> >> >> >> >= 1 ;
rank: 388
score: 99.25017547607422
patch: result = null ; switch ( n . get CaMeL Type ( ) ) {
rank: 388
score: 99.244384765625
patch: result = new int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 388
score: 99.19347127278645
patch: double result = lval CaMeL Int >> rval CaMeL Int ;
rank: 389
score: 99.34763997395834
patch: result = lval CaMeL Int >> >> - rval CaMeL Int ; break ;
rank: 389
score: 99.33375459558823
patch: result = lval CaMeL Int > - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 389
score: 99.29370930989583
patch: result = lval CaMeL Int < 0 ? lval : rval CaMeL Int ;
rank: 389
score: 99.2410555752841
patch: if ( lval CaMeL Int == rval CaMeL Int ;
rank: 389
score: 99.22421264648438
patch: result = lval CaMeL Int + rval CaMeL Int ; ;
rank: 389
score: 99.19236403245192
patch: result = lval CaMeL Int >> rval CaMeL Int ; continue ;
rank: 390
score: 99.34694417317708
patch: result = lval CaMeL Int >> >> ( rval CaMeL Int << rval CaMeL Int ) ;
rank: 390
score: 99.24971226283482
patch: result = Node . new CaMeL Number ( result , lval ) ;
rank: 390
score: 99.24256310096153
patch: result . result = lval CaMeL Int << rval CaMeL Int ;
rank: 390
score: 99.24071451822917
patch: super . result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 390
score: 99.2241719563802
patch: result = lval CaMeL Int >> ^= rval CaMeL Int ;
rank: 391
score: 99.33348173253677
patch: result = lval CaMeL Int >> >> rval CaMeL Int >= >> rval CaMeL Int ;
rank: 391
score: 99.32431209788604
patch: result = lval CaMeL Int << ( result . get CaMeL Double ( ) ) ;
rank: 391
score: 99.29315948486328
patch: boolean result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 391
score: 99.2496696920956
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default finally {
rank: 391
score: 99.24062674386161
patch: result = lval CaMeL Int >> >> rval CaMeL Int + 0 ;
rank: 391
score: 99.22388567243304
patch: double lval CaMeL Int = lval CaMeL Int / rval CaMeL Int ;
rank: 391
score: 99.19158380681819
patch: return n . new CaMeL Number ( result ) ;
rank: 392
score: 99.33328067555146
patch: result = rval CaMeL Int >> >> rval CaMeL Int & >> rval CaMeL Int ;
rank: 392
score: 99.26529134114584
patch: result = lval CaMeL Int - rval CaMeL Int + rval CaMeL Int ;
rank: 392
score: 99.24949137369792
patch: result = report CaMeL Code CaMeL Change ( n ) ;
rank: 392
score: 99.24003383091518
patch: result = lval CaMeL Int >> >> rval CaMeL Int + result ;
rank: 392
score: 99.19082205636161
patch: Integer lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 393
score: 99.32398399939903
patch: result = lval : lval CaMeL Int >> rval CaMeL Int ;
rank: 393
score: 99.29247283935547
patch: this . result = lval CaMeL Int >> >> rval CaMeL Int >> 1 ;
rank: 393
score: 99.26498209635416
patch: result = lval CaMeL Int || rval CaMeL Int >> rval CaMeL Int ;
rank: 393
score: 99.23861929086539
patch: result = lval CaMeL Int << rval CaMeL Int << 1 ;
rank: 393
score: 99.22312709263393
patch: result = lval CaMeL Int >> >> rval * rval CaMeL Int ;
rank: 394
score: 99.33296472886029
patch: result = lval CaMeL Int >> >> rval CaMeL Int , rval CaMeL Int ++ ;
rank: 394
score: 99.32386690027573
patch: result = lval CaMeL Int << rval CaMeL Int << ( rval CaMeL Int ) ;
rank: 394
score: 99.2919921875
patch: result = lval CaMeL Int >> >> lval CaMeL Int / rval CaMeL Int ;
rank: 394
score: 99.24885110294117
patch: result = new CaMeL Number ( n . get CaMeL Type ( ) ) ; }
rank: 394
score: 99.23850911458334
patch: result = new int ) >> rval CaMeL Int << rval CaMeL Int ;
rank: 395
score: 99.34481991038604
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = lval CaMeL Int ;
rank: 395
score: 99.29084014892578
patch: result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int >> ;
rank: 395
score: 99.24879673549107
patch: result = Node . new CaMeL Number ( n , n ) ;
rank: 395
score: 99.2384033203125
patch: result = new int ( rval CaMeL Int << rval CaMeL Int ) ;
rank: 395
score: 99.2381591796875
patch: result = ( result >> >> rval CaMeL Int - rval CaMeL Int ) ;
rank: 395
score: 99.223046875
patch: result = lval CaMeL Int < T ? lval : lval CaMeL Int ;
rank: 395
score: 99.19002278645833
patch: res = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 396
score: 99.34471893310547
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; return n ;
rank: 396
score: 99.33165067784927
patch: result = lval CaMeL Int >> rval CaMeL Int >> 0 * rval CaMeL Int ;
rank: 396
score: 99.32349350873162
patch: result = lval CaMeL Int >> ( left . get CaMeL Type ( ) ) ;
rank: 396
score: 99.290771484375
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int $NUMBER$ ;
rank: 396
score: 99.2615478515625
patch: result = lval CaMeL Int >> >> >> >> > rval CaMeL Int ;
rank: 396
score: 99.24878801618304
patch: this . replace CaMeL Child ( result , new CaMeL Number ) ;
rank: 396
score: 99.23817545572916
patch: result = new Token ( result . get CaMeL Type ( ) ) ;
rank: 396
score: 99.22283528645833
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != lval )
rank: 396
score: 99.1892422762784
patch: b = lval CaMeL Int << rval CaMeL Int ;
rank: 397
score: 99.23794119698661
patch: result = new int = lval CaMeL Int >> rval CaMeL Int ;
rank: 397
score: 99.22175816127232
patch: result = lval CaMeL Int >> >> >> |= rval CaMeL Int ;
rank: 397
score: 99.18912082248264
patch: return new CaMeL Number ( result ) ;
rank: 398
score: 99.28968048095703
patch: if ( result == null ) return lval CaMeL Int >> rval CaMeL Int ;
rank: 398
score: 99.24833409926471
patch: switch ( result . get CaMeL Type ( ) ) { case Token . RSH :
rank: 398
score: 99.23736572265625
patch: result = ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 398
score: 99.23729654947917
patch: result = new CaMeL Number ( ( int ) rval CaMeL Int ) ;
rank: 398
score: 99.22171020507812
patch: result = lval CaMeL Int / rval CaMeL Int ; ;
rank: 398
score: 99.18898518880208
patch: Long result = lval CaMeL Int >> rval CaMeL Int ;
rank: 399
score: 99.3222297219669
patch: result = left . get CaMeL Type ( ) . get CaMeL Double ( ) ;
rank: 399
score: 99.24807504507211
patch: result = n . new CaMeL Number ( result ) ; }
rank: 399
score: 99.23670305524554
patch: result = lval CaMeL Int rval CaMeL Int >> rval CaMeL Int ;
rank: 399
score: 99.23604329427083
patch: if ( ! ( rval >= Integer . MIN _ VALUE ) ) {
rank: 399
score: 99.2213134765625
patch: result = lval CaMeL Int > 0 ? 1 : lval CaMeL Int ;
rank: 399
score: 99.18895612444196
patch: return rval CaMeL Int >> >> >> >> << rval CaMeL Int ;
rank: 400
score: 99.34354440789474
patch: result = Node . new CaMeL Number ( result , ( int ) rval CaMeL Int ) ;
rank: 400
score: 99.3302360983456
patch: result = 0 ; result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 400
score: 99.28791809082031
patch: result = lval CaMeL Int >> >> lval CaMeL Int * rval CaMeL Int ;
rank: 400
score: 99.2366473858173
patch: else result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 400
score: 99.22129720052084
patch: if ( lval CaMeL Int != 0 ) result = lval CaMeL Int ;
rank: 400
score: 99.18887329101562
patch: String result = lval CaMeL Int >> rval CaMeL Int ;
rank: 401
score: 99.32176298253677
patch: result = lval CaMeL Int << ( result . get CaMeL Type ( ) ) ;
rank: 401
score: 99.28785807291666
patch: result = lval CaMeL Int >> >> rval CaMeL Int lval CaMeL Int ;
rank: 401
score: 99.24708775111607
patch: result = n . new CaMeL Number ( rval CaMeL Int ) ;
rank: 401
score: 99.22122896634616
patch: result = lval CaMeL Int * >> ~ rval CaMeL Int ;
rank: 402
score: 99.34337093955592
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; n = lval CaMeL Int ;
rank: 402
score: 99.330126953125
patch: result = lval CaMeL Int >> >> rval ) - lval CaMeL Int ;
rank: 402
score: 99.28737967354911
patch: this . result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 402
score: 99.25900065104166
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = ;
rank: 402
score: 99.24672564338235
patch: switch ( left . get CaMeL Type ( ) ) { case Token . RSH :
rank: 402
score: 99.2361068725586
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = true ;
rank: 402
score: 99.22064615885417
patch: result = lval CaMeL Int >> >> >> >> >> >> & 1 ;
rank: 403
score: 99.34335166529605
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ; break ;
rank: 403
score: 99.32999674479167
patch: result = lval CaMeL Int >> >> rval CaMeL Int . case ) ;
rank: 403
score: 99.3206787109375
patch: result = lval CaMeL Int >> >> - ( int ) rval CaMeL Int ;
rank: 403
score: 99.2462158203125
patch: result = lval CaMeL Int >> ? rval CaMeL Int << rval CaMeL Int ;
rank: 403
score: 99.23603820800781
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = false ;
rank: 403
score: 99.23521071213942
patch: result = lval CaMeL Int >> rval CaMeL Int << n ;
rank: 403
score: 99.2205341045673
patch: result = lval CaMeL Int >= 0 ? lval CaMeL Int ;
rank: 403
score: 99.18694661458333
patch: result = lval CaMeL Int & n . get CaMeL Double ( ) ;
rank: 404
score: 99.32993451286765
patch: result = lval CaMeL Int >> >> rval CaMeL Int < >> rval CaMeL Int ;
rank: 404
score: 99.24576241629464
patch: result = Node . new CaMeL Number >> >> rval CaMeL Int ;
rank: 404
score: 99.23578350360577
patch: int result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 404
score: 99.23301595052084
patch: result = lval CaMeL Int << rval CaMeL Int ; result = result ;
rank: 404
score: 99.22014508928571
patch: result = lval CaMeL Int - >> >> & rval CaMeL Int ;
rank: 405
score: 99.34309467516448
patch: int lval CaMeL Int = ( int ) rval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 405
score: 99.3203125
patch: return try CaMeL Fold CaMeL Shift ( n , new CaMeL Number ) ;
rank: 405
score: 99.28549194335938
patch: result = rval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;
rank: 405
score: 99.25802408854166
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; }
rank: 405
score: 99.24573471966912
patch: result = left . get CaMeL Type ( ) . get CaMeL Name ( ) ;
rank: 405
score: 99.23263113839286
patch: result = lval CaMeL Int >> >> rval CaMeL Int << right ;
rank: 405
score: 99.22000558035714
patch: result = lval ? lval CaMeL Int >> >> rval CaMeL Int ;
rank: 405
score: 99.18592180524554
patch: byte result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 406
score: 99.32982584635417
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return $NUMBER$ ;
rank: 406
score: 99.23256022135416
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , left , right ) ;
rank: 406
score: 99.18514811197916
patch: if ( n . get CaMeL Type ( ) == Token . RSH )
rank: 407
score: 99.34206255744485
patch: double new CaMeL Number = ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 407
score: 99.31968778722427
patch: result = n . get CaMeL Double ( ) >> rval CaMeL Int ; break ;
rank: 407
score: 99.28506234975961
patch: result = lval CaMeL Int >> >> rval CaMeL Int ++ ;
rank: 407
score: 99.25786946614583
patch: result = lval CaMeL Int & & >> >> >> rval CaMeL Int ;
rank: 407
score: 99.24485560825893
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; * /
rank: 407
score: 99.2351303100586
patch: result = lval CaMeL Int ? lval CaMeL Int & >> rval CaMeL Int ;
rank: 407
score: 99.23212139423077
patch: . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 407
score: 99.2194073016827
patch: result = lval CaMeL Int * >> ^ rval CaMeL Int ;
rank: 407
score: 99.18508475167411
patch: AOM . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 408
score: 99.2833740234375
patch: result = lval CaMeL Int >> rval CaMeL Int >= rval CaMeL Int ;
rank: 408
score: 99.25768025716145
patch: result = lval CaMeL Int >> == rval CaMeL Int ;
rank: 408
score: 99.23505401611328
patch: result = lval CaMeL Int >> & rval CaMeL Int & lval CaMeL Int ;
rank: 408
score: 99.21938650948661
patch: result = lval CaMeL Int >> & ~ rval CaMeL Int ; ;
rank: 409
score: 99.34169006347656
patch: result = Node . new CaMeL Number ( lval CaMeL Int << rval ) ;
rank: 409
score: 99.3289306640625
patch: result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int .
rank: 409
score: 99.3188007061298
patch: result = lval CaMeL Int << ( rval CaMeL Int ) ;
rank: 409
score: 99.28323364257812
patch: result = lval CaMeL Int >> >> lval CaMeL Int + rval CaMeL Int ;
rank: 409
score: 99.25717599051339
patch: long result = lval CaMeL Int << >> >> rval CaMeL Int ;
rank: 409
score: 99.24468994140625
patch: result = n . new CaMeL Number ( result ) ; break ;
rank: 409
score: 99.23472595214844
patch: result = lval CaMeL Int >> >> >> >> rval CaMeL Int . 1 ;
rank: 409
score: 99.23208182198661
patch: result += ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 409
score: 99.21895054408482
patch: result = lval CaMeL Int + ( double ) lval CaMeL Int ;
rank: 409
score: 99.1845703125
patch: return ( Node ) Node . new CaMeL Number ( result ) ;
rank: 410
score: 99.31851959228516
patch: result = lval CaMeL Int >> >> ( Integer . MIN _ VALUE ) ;
rank: 410
score: 99.28289325420673
patch: return result >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 410
score: 99.25641338641827
patch: result = lval CaMeL Int == 0 ? 1 : 0 ;
rank: 410
score: 99.24468231201172
patch: Node Node new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 410
score: 99.23170689174107
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> $NUMBER$ ;
rank: 410
score: 99.21893780048077
patch: result = lval CaMeL Int >> ~ ~ rval CaMeL Int ;
rank: 410
score: 99.18455287388393
patch: Integer result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 411
score: 99.31836751302083
patch: result = new Token ( n . get CaMeL Type ( ) ) ;
rank: 411
score: 99.28256225585938
patch: if ( lval CaMeL Int == rval CaMeL Int ) { return result ; }
rank: 411
score: 99.25609537760417
patch: finally { result = lval CaMeL Int >> >> rval CaMeL Int ; }
rank: 411
score: 99.24441293569711
patch: result = Node . new CaMeL Number ( result , ) ;
rank: 411
score: 99.23451334635416
patch: result = ( result >> lval CaMeL Int ) >> rval CaMeL Int ;
rank: 411
score: 99.23141276041666
patch: result ; result = lval CaMeL Int << rval CaMeL Int ; break ;
rank: 411
score: 99.21847098214286
patch: result = lval CaMeL Int >> >> & & rval CaMeL Int ;
rank: 412
score: 99.3270622702206
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; return rval CaMeL Int ;
rank: 412
score: 99.31833065257354
patch: result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ; break ;
rank: 412
score: 99.25530598958333
patch: long result = lval CaMeL Int << >> >> >> rval CaMeL Int ;
rank: 412
score: 99.24436950683594
patch: result = lval CaMeL Int >> ( rval CaMeL Int >> rval CaMeL Int ;
rank: 412
score: 99.21730259486607
patch: result = lval CaMeL Int ; break ; case Token . lval :
rank: 412
score: 99.18319702148438
patch: result = lval CaMeL Int >> >> rval ; break ;
rank: 413
score: 99.34055463005515
patch: return Node . new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 413
score: 99.32676478794643
patch: result = lval CaMeL Int >> >> 0 - rval CaMeL Int ;
rank: 413
score: 99.31826602711396
patch: result = Node . get CaMeL Type ( ) . get CaMeL Double ( ) ;
rank: 413
score: 99.23366135817308
patch: result = lval CaMeL Int >> rval CaMeL Int . 1 ;
rank: 413
score: 99.22992350260417
patch: result = new int ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 413
score: 99.21708170572917
patch: result = lval CaMeL Int < T ? 0 : lval CaMeL Int ;
rank: 413
score: 99.18312424879808
patch: return Node . new CaMeL Number ( result , result ) ;
rank: 414
score: 99.3403384560033
patch: result = Node . new CaMeL Number ( n . get CaMeL Type ( ) ) ; ;
rank: 414
score: 99.32666778564453
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval . length ;
rank: 414
score: 99.31810584435097
patch: int lval CaMeL Int = ( int ) lval CaMeL Int ;
rank: 414
score: 99.25501427283653
patch: result = lval CaMeL Int & & >> rval CaMeL Int ;
rank: 414
score: 99.23321063701923
patch: result = rval CaMeL Int >> >> - rval CaMeL Int ;
rank: 414
score: 99.2299072265625
patch: result = lval CaMeL Int << n . get CaMeL Name ( ) ;
rank: 414
score: 99.21702223557692
patch: this . result = lval CaMeL Int & rval CaMeL Int ;
rank: 415
score: 99.31763413373162
patch: result = left . get CaMeL Double ( ) >> rval CaMeL Int ; break ;
rank: 415
score: 99.2812030498798
patch: result = lval = lval CaMeL Int >> rval CaMeL Int ;
rank: 415
score: 99.25474446614584
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval ;
rank: 415
score: 99.24312337239583
patch: result ; result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 415
score: 99.23282877604167
patch: result = lval CaMeL Int >> rval ( >> rval CaMeL Int ) ;
rank: 415
score: 99.22970145089286
patch: result = lval CaMeL Int >> ( int ) lval CaMeL Int ;
rank: 415
score: 99.21614583333333
patch: if ( lval CaMeL Int == 0 || lval CaMeL Int != 0 )
rank: 416
score: 99.32612609863281
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int rval
rank: 416
score: 99.31740500710227
patch: result ; report CaMeL Code CaMeL Change ( ) ;
rank: 416
score: 99.28113606770833
patch: result = lval CaMeL Int & rval CaMeL Int >> lval CaMeL Int ;
rank: 416
score: 99.24289376395089
patch: result = new CaMeL Number ( result , new CaMeL Number ) ;
rank: 416
score: 99.2317886352539
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? 0 : 1 ;
rank: 416
score: 99.22916259765626
patch: if ( lval CaMeL Int != rval ) {
rank: 416
score: 99.21575055803571
patch: result = lval CaMeL Int & >> ~ >> rval CaMeL Int ;
rank: 417
score: 99.32599639892578
patch: result = lval CaMeL Int || >> rval CaMeL Int >> rval CaMeL Int ;
rank: 417
score: 99.28111921037946
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> lval ;
rank: 417
score: 99.24236653645833
patch: result = Node . new CaMeL Number >> >> >> rval CaMeL Int ;
rank: 417
score: 99.23175603693181
patch: result = lval CaMeL Int < rval CaMeL Int ;
rank: 417
score: 99.21552385602679
patch: / ; result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 417
score: 99.18192545572917
patch: { result = lval CaMeL Int >> rval CaMeL Int ; break ; }
rank: 418
score: 99.32587890625
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval ) ;
rank: 418
score: 99.281005859375
patch: return ( ( int ) lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 418
score: 99.2538818359375
patch: result = lval CaMeL Int >> rval CaMeL Int >> & - 1 ;
rank: 418
score: 99.24195149739583
patch: result = lval CaMeL Int ; return new CaMeL Number ( result ) ;
rank: 418
score: 99.22874348958334
patch: result = new Number ( n . get CaMeL Type ( ) ) ;
rank: 418
score: 99.21536458333334
patch: result = lval CaMeL Int >= 0 ? 1 : lval CaMeL Int ;
rank: 418
score: 99.18187459309895
patch: result = lval CaMeL Int | ( int ) rval ;
rank: 419
score: 99.32551574707031
patch: result = lval CaMeL Int >> rval CaMeL Int ++ >> rval CaMeL Int ;
rank: 419
score: 99.25364467075893
patch: result = lval CaMeL Int >> >> >> == rval CaMeL Int ;
rank: 419
score: 99.24087727864584
patch: return lval CaMeL Int << >> rval CaMeL Int >> rval CaMeL Int ;
rank: 419
score: 99.23065185546875
patch: finally { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 419
score: 99.2285888671875
patch: result = result ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 419
score: 99.18179524739584
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval ; break ;
rank: 420
score: 99.33694278492646
patch: result = ( int ) rval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 420
score: 99.32489885602679
patch: result = lval CaMeL Int >> >> rval ( rval CaMeL Int ;
rank: 420
score: 99.25343831380208
patch: result = lval CaMeL Int >> -- rval CaMeL Int ;
rank: 420
score: 99.240576171875
patch: result = n . new CaMeL Number ( ( int ) rval ) ;
rank: 420
score: 99.23063151041667
patch: result = ( result >> >> rval CaMeL Int ) ;
rank: 420
score: 99.21480887276786
patch: result = lval CaMeL Int >> == rval ? 0 : lval ;
rank: 420
score: 99.18160574776786
patch: return ( rval CaMeL Int != lval ) << rval CaMeL Int ;
rank: 421
score: 99.3248650045956
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ++ ;
rank: 421
score: 99.28058268229167
patch: result = lval CaMeL Int >= 0 ? rval : lval CaMeL Int ;
rank: 421
score: 99.2533820657169
patch: result = lval CaMeL Int & >> >> >> >> >> | rval CaMeL Int ;
rank: 421
score: 99.24048868815105
patch: result = right . new CaMeL Number ( result ) ;
rank: 421
score: 99.23062896728516
patch: result = lval CaMeL Int >> >> rval CaMeL Int % rval CaMeL Int ;
rank: 421
score: 99.21443997896634
patch: result = lval CaMeL Int >> >> *= rval CaMeL Int ;
rank: 421
score: 99.18138020833334
patch: return new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ) ;
rank: 422
score: 99.33623395647321
patch: result = Node . new CaMeL Number ( n , result ) ;
rank: 422
score: 99.32447814941406
patch: result = lval ; result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 422
score: 99.23037484975961
patch: result = lval CaMeL Int >> lval - rval CaMeL Int ;
rank: 422
score: 99.21407376802884
patch: result = lval CaMeL Int ^ >> >> rval CaMeL Int ;
rank: 422
score: 99.18014526367188
patch: arg = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 423
score: 99.32440185546875
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval 1 ;
rank: 423
score: 99.31419372558594
patch: result = lval CaMeL Int >> ( ( int ) lval CaMeL Int ) ;
rank: 423
score: 99.2396748860677
patch: replace CaMeL Child ( result , new CaMeL Number ) ;
rank: 423
score: 99.23013509114584
patch: result = lval CaMeL Int >> rval CaMeL Int ? lval CaMeL Int ;
rank: 423
score: 99.21376255580357
patch: double lval CaMeL Int = lval CaMeL Int & rval CaMeL Int ;
rank: 424
score: 99.33443509615384
patch: result = lval CaMeL Int & Node . MIN _ VALUE ;
rank: 424
score: 99.31317901611328
patch: report CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ) ;
rank: 424
score: 99.27953338623047
patch: result = lval CaMeL Int > >> rval CaMeL Int >> lval CaMeL Int ;
rank: 424
score: 99.25257873535156
patch: result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ; ;
rank: 424
score: 99.22630964006696
patch: result = ( int ) rval CaMeL Int << lval CaMeL Int ;
rank: 424
score: 99.21344401041667
patch: if ( lval CaMeL Int != rval && lval CaMeL Int != rval )
rank: 425
score: 99.33342428768383
patch: new CaMeL Number = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 425
score: 99.27885437011719
patch: if ( lval CaMeL Int == lval CaMeL Int ) { return 0 ; }
rank: 425
score: 99.25198567708334
patch: result = lval CaMeL Int >> >> -- >> >> rval CaMeL Int ;
rank: 425
score: 99.23917643229167
patch: result = n . new CaMeL Number ( ( int ) result ) ;
rank: 425
score: 99.1797607421875
patch: result = lval CaMeL Int & result . get CaMeL Long ( ) ;
rank: 426
score: 99.33303833007812
patch: result = Node . new CaMeL Number ( result + rval CaMeL Int ) ;
rank: 426
score: 99.27877044677734
patch: return result >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 426
score: 99.25179617745536
patch: long result = lval CaMeL Int >> >> & rval CaMeL Int ;
rank: 426
score: 99.21279672475961
patch: result = lval CaMeL Int / >> >= rval CaMeL Int ;
rank: 426
score: 99.17971567007211
patch: return Node . new CaMeL Number ( rval CaMeL Int ) ;
rank: 427
score: 99.32320731026786
patch: result = lval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;
rank: 427
score: 99.3121337890625
patch: result = token CaMeL To CaMeL Name ( n ) ;
rank: 427
score: 99.27875627790179
patch: result = lval CaMeL Int & >> rval CaMeL Int >> 1 ;
rank: 427
score: 99.25157674153645
patch: result = lval CaMeL Int >> <= rval CaMeL Int ;
rank: 427
score: 99.2278060913086
patch: result = ( result >> >> rval CaMeL Int >> rval CaMeL Int ) ;
rank: 428
score: 99.33134191176471
patch: result = Node . new CaMeL Number << rval CaMeL Int << rval CaMeL Int ;
rank: 428
score: 99.25132841222427
patch: synchronized ( this ) { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 428
score: 99.21198381696429
patch: if ( ! lval CaMeL Int . equals ( lval ) ) {
rank: 428
score: 99.1773173014323
patch: Value result = lval CaMeL Int >> rval CaMeL Int ;
rank: 429
score: 99.33132755055146
patch: result = Node . new CaMeL Number ( lval CaMeL Int ) ; return n ;
rank: 429
score: 99.31100463867188
patch: result = new Node ( token CaMeL To CaMeL Name ( n ) ) ;
rank: 429
score: 99.27749633789062
patch: result = lval CaMeL Int >> / rval CaMeL Int >> rval CaMeL Int ;
rank: 429
score: 99.23849923270089
patch: result = Node . new CaMeL Number ( result - result ) ;
rank: 429
score: 99.22684733072917
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int & 1 ;
rank: 429
score: 99.2242431640625
patch: result = new int ( ( int ) rval CaMeL Int ) ;
rank: 429
score: 99.21185302734375
patch: result = lval CaMeL Int + >> >> >> >> >> rval ;
rank: 429
score: 99.17721121651786
patch: return ( lval CaMeL Int != lval ) << rval CaMeL Int ;
rank: 430
score: 99.25107247488839
patch: result = lval CaMeL Int >> >> -- >> rval CaMeL Int ;
rank: 430
score: 99.22656860351563
patch: result = lval CaMeL Int >> >> $NUMBER$ ;
rank: 431
score: 99.3221923828125
patch: result = 0 >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 431
score: 99.30998678768383
patch: result = lval CaMeL Int >> rval CaMeL Int >> ( lval CaMeL Int ) ;
rank: 431
score: 99.27714320591518
patch: result = lval CaMeL Int & rval >> >> rval CaMeL Int ;
rank: 431
score: 99.25045572916666
patch: result = lval CaMeL Int && lval CaMeL Int >> rval CaMeL Int ;
rank: 431
score: 99.21182454427084
patch: if ( lval CaMeL Int != null ) result = lval CaMeL Int ;
rank: 432
score: 99.3295036764706
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; Node new CaMeL Number ;
rank: 432
score: 99.2501449584961
patch: do { result = lval CaMeL Int >> >> >> rval CaMeL Int ; }
rank: 432
score: 99.2377596768466
patch: result = left . get CaMeL Type ( ) ;
rank: 432
score: 99.22288161057692
patch: result . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 432
score: 99.21129432091347
patch: boolean result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 432
score: 99.17669270833333
patch: new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 433
score: 99.32930814302884
patch: result = lval CaMeL Int + rval CaMeL Int ; break ;
rank: 433
score: 99.32105255126953
patch: result = lval CaMeL Int >> >> rval CaMeL Int && lval CaMeL Int ;
rank: 433
score: 99.27688598632812
patch: result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int >> ;
rank: 433
score: 99.25002872242646
patch: result = ( int ) lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 433
score: 99.23762512207031
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; default finally {
rank: 433
score: 99.22642415364584
patch: result = lval CaMeL Int & lval >> >> >> rval CaMeL Int ;
rank: 433
score: 99.22259928385417
patch: result = lval ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 433
score: 99.21121651785714
patch: if ( lval CaMeL Int == >> >> & rval CaMeL Int )
rank: 433
score: 99.17661830357143
patch: int lval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;
rank: 434
score: 99.32048797607422
patch: result = - rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 434
score: 99.276806640625
patch: result = lval CaMeL Int == 0 ? rval : rval CaMeL Int ;
rank: 434
score: 99.2496337890625
patch: result = lval CaMeL Int & >> >> >> >> >> & rval CaMeL Int ;
rank: 434
score: 99.22593587239584
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result -- ;
rank: 434
score: 99.21105018028847
patch: result = lval CaMeL Int & rval >> rval CaMeL Int ;
rank: 434
score: 99.17654854910714
patch: long rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 435
score: 99.31975911458333
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; break ; }
rank: 435
score: 99.30824381510416
patch: result = lval CaMeL Int << ( lval CaMeL Int >> rval ) ;
rank: 435
score: 99.24951985677083
patch: result = lval CaMeL Int & rval >> >> >> rval CaMeL Int ;
rank: 435
score: 99.23754119873047
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = null ;
rank: 435
score: 99.2253173828125
patch: result = lval CaMeL Int += lval CaMeL Int >> rval CaMeL Int ;
rank: 435
score: 99.22012532552084
patch: result = lval CaMeL Int << rval CaMeL Int - lval CaMeL Int ;
rank: 436
score: 99.31923130580357
patch: result = lval CaMeL Int >> >> rval CaMeL Int . ) ;
rank: 436
score: 99.27651977539062
patch: result = lval CaMeL Int >> >> lval CaMeL Int : rval CaMeL Int ;
rank: 436
score: 99.24947102864583
patch: result = lval CaMeL Int >> >> >> >> <= rval CaMeL Int ;
rank: 436
score: 99.23732503255208
patch: result = new CaMeL Number << >> rval CaMeL Int ;
rank: 436
score: 99.22478485107422
patch: result = lval CaMeL Int >> lval rval CaMeL Int : lval CaMeL Int ;
rank: 436
score: 99.21973595252403
patch: result = lval CaMeL Int >> rval CaMeL Int << left ;
rank: 436
score: 99.2105243389423
patch: result = lval CaMeL Int < 0 ? 1 : 0 ;
rank: 437
score: 99.3262710571289
patch: result = lval CaMeL Int >> >> >> - rval CaMeL Int ; break ;
rank: 437
score: 99.3190689086914
patch: result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int .
rank: 437
score: 99.27638244628906
patch: result = lval CaMeL Int >> rval CaMeL Int >> = rval CaMeL Int ;
rank: 437
score: 99.24927696814903
patch: result = lval CaMeL Int ; result = lval CaMeL Int ;
rank: 437
score: 99.23731282552083
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; ; break ;
rank: 437
score: 99.22473958333333
patch: result = lval CaMeL Int >> lval >> >> >> rval CaMeL Int ;
rank: 437
score: 99.21943359375
patch: result = lval CaMeL Int << rval CaMeL Int ; result = null ;
rank: 437
score: 99.21046549479166
patch: result = lval ; result = lval CaMeL Int / rval CaMeL Int ;
rank: 437
score: 99.17625075120192
patch: return ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 438
score: 99.31902313232422
patch: result = rval CaMeL Int >> >> rval CaMeL Int . rval CaMeL Int ;
rank: 438
score: 99.30726623535156
patch: result = Node . new CaMeL Number ( result >> rval CaMeL Int ) ;
rank: 438
score: 99.24913611778847
patch: value = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 438
score: 99.23729654947917
patch: result = result ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 438
score: 99.21866048177084
patch: result = new long ( n . get CaMeL Type ( ) ) ;
rank: 438
score: 99.17606898716518
patch: long new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;
rank: 439
score: 99.31867980957031
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; return lval ) ;
rank: 439
score: 99.30698529411765
patch: result = new Node ( result , n . get CaMeL Type ( ) ) ;
rank: 439
score: 99.27571927584134
patch: this . result = rval CaMeL Int >> rval CaMeL Int ;
rank: 439
score: 99.21845354352679
patch: result = lval CaMeL Int << rval CaMeL Int ; / * /
rank: 439
score: 99.20945638020834
patch: result = lval CaMeL Int < lval ? 1 : lval CaMeL Int ;
rank: 439
score: 99.17539760044643
patch: long lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 440
score: 99.31825256347656
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return lval ; }
rank: 440
score: 99.3062973022461
patch: try { result = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 440
score: 99.27568817138672
patch: if ( lval CaMeL Int == lval CaMeL Int ) { return result ; }
rank: 440
score: 99.21818033854167
patch: . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 440
score: 99.20900472005208
patch: result = lval * lval >> >> rval CaMeL Int ;
rank: 441
score: 99.22101236979167
patch: result = this . lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 441
score: 99.2089599609375
patch: if ( ! lval CaMeL Int . equals ( lval CaMeL Int ) )
rank: 442
score: 99.3181640625
patch: result = lval CaMeL Int >> >> rval ) / rval CaMeL Int ;
rank: 442
score: 99.30556418678977
patch: int lval CaMeL Int = ( int ) rval ;
rank: 442
score: 99.27507781982422
patch: result = lval CaMeL Int >> lval CaMeL Int >> >> lval CaMeL Int ;
rank: 442
score: 99.247998046875
patch: result = lval CaMeL Int ( rval CaMeL Int >> >> 1 ) ;
rank: 442
score: 99.22067057291666
patch: result = lval CaMeL Int & rval CaMeL Int - lval CaMeL Int ;
rank: 442
score: 99.21803635817308
patch: result = lval CaMeL Int >> rval CaMeL Int : result ;
rank: 442
score: 99.2086690266927
patch: if ( lval CaMeL Int != rval CaMeL Int ) {
rank: 442
score: 99.17399458451705
patch: retval = lval CaMeL Int << rval CaMeL Int ;
rank: 443
score: 99.32512350643383
patch: double new CaMeL Number = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 443
score: 99.31785481770834
patch: result = lval >> >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 443
score: 99.27445983886719
patch: return lval CaMeL Int >> >> rval CaMeL Int >> >> lval CaMeL Int ;
rank: 443
score: 99.20802525111607
patch: result = lval * lval CaMeL Int / >> rval CaMeL Int ;
rank: 443
score: 99.17396763392857
patch: return ( Node ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 444
score: 99.3050537109375
patch: return try CaMeL Fold CaMeL Shift ( result , new CaMeL Number ) ;
rank: 444
score: 99.27430943080357
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> ;
rank: 444
score: 99.24756673177083
patch: result = ( long ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 444
score: 99.20748197115384
patch: result = lval CaMeL Int & rval >> >> >> rval ;
rank: 444
score: 99.1738750751202
patch: result = lval CaMeL Int << rval CaMeL Int << rval ;
rank: 445
score: 99.31757354736328
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ) ;
rank: 445
score: 99.2735595703125
patch: result = lval CaMeL Int >> & rval CaMeL Int >> lval CaMeL Int ;
rank: 445
score: 99.24749755859375
patch: result = lval CaMeL Int >> >> >> > rval CaMeL Int ;
rank: 445
score: 99.23643391927084
patch: String new CaMeL Number = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 445
score: 99.21825299944196
patch: result = lval CaMeL Int >> & ( 1 : 1 ) ;
rank: 445
score: 99.21748046875
patch: result = lval CaMeL Int << n . get CaMeL Integer ( ) ;
rank: 445
score: 99.20737868088942
patch: double result = lval CaMeL Int & >> rval CaMeL Int ;
rank: 445
score: 99.17352294921875
patch: result = lval CaMeL Int | ( int ) rval CaMeL Int ;
rank: 446
score: 99.32376861572266
patch: result = lval ; result = Node . new CaMeL Number ( result ) ;
rank: 446
score: 99.31649076021634
patch: result = lval CaMeL Int >> rval CaMeL Int rval ) ;
rank: 446
score: 99.27350725446429
patch: return lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ;
rank: 446
score: 99.21813201904297
patch: result = lval CaMeL Int >> >> lval ; result = lval CaMeL Int ;
rank: 446
score: 99.21642127403847
patch: result = lval CaMeL Int >> rval CaMeL Int >> right ;
rank: 446
score: 99.17340087890625
patch: ret = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 447
score: 99.3162841796875
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result = 1 ;
rank: 447
score: 99.247314453125
patch: result = result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 447
score: 99.23514229910714
patch: result = rval >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 447
score: 99.2162841796875
patch: result = lval CaMeL Int >> right . get CaMeL Double ( ) ;
rank: 447
score: 99.20711263020833
patch: result = lval CaMeL Int / >> >> & 0 ;
rank: 448
score: 99.31583658854167
patch: result = rval CaMeL Int >> >> rval ) - rval CaMeL Int ;
rank: 448
score: 99.30412741268383
patch: result = new Node ( $STRING$ + n . get CaMeL Type ( ) ) ;
rank: 448
score: 99.27291870117188
patch: result = rval CaMeL Int >> rval CaMeL Int >> >> lval CaMeL Int ;
rank: 448
score: 99.23454938616071
patch: buffer . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 448
score: 99.2065938313802
patch: / * result = lval CaMeL Int >> >> rval ;
rank: 449
score: 99.32345760569854
patch: double new CaMeL Number = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 449
score: 99.31559535435268
patch: result = lval CaMeL Int >> >> rval CaMeL Int - 0 ;
rank: 449
score: 99.27266693115234
patch: if ( lval CaMeL Int == rval CaMeL Int ) { return 0 ; }
rank: 449
score: 99.24691336495536
patch: result = lval CaMeL Int & >> & >> rval CaMeL Int ;
rank: 449
score: 99.23417445591518
patch: result = Node . token CaMeL To CaMeL Name ( result ) ;
rank: 449
score: 99.21749441964286
patch: result = lval CaMeL Int >> >> >> : rval CaMeL Int ;
rank: 449
score: 99.2159423828125
patch: throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int ) ;
rank: 449
score: 99.20606407752403
patch: result = lval CaMeL Int [ >> rval CaMeL Int ] ;
rank: 449
score: 99.17263559194711
patch: tmp = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 450
score: 99.3231430053711
patch: result = ( Node ) lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 450
score: 99.31472778320312
patch: result = lval CaMeL Int >> rval ( 0 - rval CaMeL Int ) ;
rank: 450
score: 99.24680989583334
patch: result = lval CaMeL Int + rval CaMeL Int - rval CaMeL Int ;
rank: 450
score: 99.233642578125
patch: result = result << rval CaMeL Int ;
rank: 450
score: 99.21578776041666
patch: result = lval CaMeL Int << n . get CaMeL String ( ) ;
rank: 450
score: 99.20563213641827
patch: result = lval CaMeL Int < 0 ? lval : lval ;
rank: 451
score: 99.30310821533203
patch: result = n . get CaMeL Double ( ) << ( int ) rval ;
rank: 451
score: 99.27120768229166
patch: result = lval CaMeL Int == lval >> >> >> rval CaMeL Int ;
rank: 451
score: 99.24627685546875
patch: result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; }
rank: 451
score: 99.23347981770833
patch: replace CaMeL Child ( Node . new CaMeL Number ( result ) ) ;
rank: 451
score: 99.21707916259766
patch: result = lval CaMeL Int >> & rval CaMeL Int ? lval CaMeL Int ;
rank: 451
score: 99.2153076171875
patch: result = new int ) >> rval CaMeL Int >> rval CaMeL Int ;
rank: 451
score: 99.20441545758929
patch: double result = lval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 452
score: 99.32051595052083
patch: result = lval CaMeL Int ? lval CaMeL Int << rval CaMeL Int ;
rank: 452
score: 99.21698467548077
patch: lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 452
score: 99.21529447115384
patch: result = lval CaMeL Int . get CaMeL Double ( ) ;
rank: 452
score: 99.20418875558036
patch: result = lval CaMeL Int >> >> >= rval CaMeL Int ; ;
rank: 452
score: 99.17252291165866
patch: return ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 453
score: 99.27007587139423
patch: result = lval CaMeL Int & rval CaMeL Int >> 1 ;
rank: 453
score: 99.2460693359375
patch: result = lval CaMeL Int & >> >> >> | rval CaMeL Int ;
rank: 453
score: 99.23269856770834
patch: result = ( int ) n . new CaMeL Number ( result ) ;
rank: 453
score: 99.20393880208333
patch: if ( lval CaMeL Int != 0 || lval CaMeL Int == 0 )
rank: 453
score: 99.17201334635416
patch: result = lval CaMeL Int & result . get CaMeL Type ( ) ;
rank: 454
score: 99.31338936941964
patch: result = lval CaMeL Int >> >> rval CaMeL Int rval ) ;
rank: 454
score: 99.30265538832721
patch: int lval CaMeL Int = ( int ) left . get CaMeL Type ( ) ;
rank: 454
score: 99.24597930908203
patch: synchronized ( this ) { result = lval CaMeL Int >> rval CaMeL Int ;
rank: 454
score: 99.216552734375
patch: result = lval CaMeL Int >> >> >> >> lval ) ;
rank: 454
score: 99.20365084134616
patch: result = lval CaMeL Int >> >> ~ lval CaMeL Int ;
rank: 454
score: 99.171875
patch: return report CaMeL Code CaMeL Change ( ) ; } return n ;
rank: 455
score: 99.26976725260417
patch: result = rval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;
rank: 455
score: 99.24520169771634
patch: long result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 455
score: 99.21643880208333
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int + result ;
rank: 455
score: 99.21384974888393
patch: result = lval CaMeL Int >> rval CaMeL Int ( result ) ;
rank: 455
score: 99.20297475961539
patch: result = lval CaMeL Int + >> ^ rval CaMeL Int ;
rank: 455
score: 99.17122025923295
patch: arg = lval CaMeL Int >> rval CaMeL Int ;
rank: 456
score: 99.31686401367188
patch: result = Node . new CaMeL Number ( lval CaMeL Int ) ; break ;
rank: 456
score: 99.2449951171875
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != rval CaMeL Int ;
rank: 456
score: 99.21640450613839
patch: result = lval CaMeL Int >> >> rval CaMeL Int & 0 ;
rank: 456
score: 99.21347280649039
patch: result += lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 456
score: 99.2029520670573
patch: if ( lval CaMeL Int == rval CaMeL Int ) {
rank: 456
score: 99.17116873604911
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval ;
rank: 457
score: 99.31679124098558
patch: result = lval CaMeL Int << lval CaMeL Int ; break ;
rank: 457
score: 99.31266021728516
patch: result = lval CaMeL Int >> >> rval ) - >> rval CaMeL Int ;
rank: 457
score: 99.30097961425781
patch: result = left . get CaMeL Double ( ) << ( int ) rval ;
rank: 457
score: 99.26930454799107
patch: if ( lval CaMeL Int == lval CaMeL Int ) return 0 ;
rank: 457
score: 99.231689453125
patch: result = lval CaMeL Int << rval >> rval CaMeL Int ;
rank: 457
score: 99.20284598214286
patch: / * result = lval CaMeL Int / >> rval CaMeL Int ;
rank: 457
score: 99.17060198102679
patch: long lval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;
rank: 458
score: 99.3006591796875
patch: result = left . get CaMeL Parent ( ) . get CaMeL Type ( ) ;
rank: 458
score: 99.24468122209821
patch: short result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 458
score: 99.23053850446429
patch: n . result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 458
score: 99.21629115513393
patch: result = result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 458
score: 99.21337890625
patch: result = lval CaMeL Int >> rval CaMeL Int << >> 1 ;
rank: 458
score: 99.20220477764423
patch: result = lval CaMeL Int . double CaMeL Value ( ) ;
rank: 458
score: 99.1703369140625
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; } }
rank: 459
score: 99.31185150146484
patch: result = lval CaMeL Int >> 0 rval CaMeL Int - rval CaMeL Int ;
rank: 459
score: 99.30020141601562
patch: result = lval CaMeL Int << ( lval CaMeL Int >> >> rval ) ;
rank: 459
score: 99.26922607421875
patch: return result >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 459
score: 99.22942708333333
patch: result = - ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 459
score: 99.17026192801339
patch: dis . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 460
score: 99.29973958333333
patch: result = Node . lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 460
score: 99.26866736778847
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> ;
rank: 460
score: 99.2291729266827
patch: result = result ; report CaMeL Code CaMeL Change ( ) ;
rank: 460
score: 99.21112530048077
patch: result = lval CaMeL Int << rval CaMeL Int << result ;
rank: 460
score: 99.20181710379464
patch: if ( ! lval CaMeL Int . equals ( lval CaMeL Int ;
rank: 461
score: 99.31531524658203
patch: result = lval CaMeL Int >> ( rval CaMeL Int << rval CaMeL Int ;
rank: 461
score: 99.31168619791667
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int - 1 ;
rank: 461
score: 99.24285529641544
patch: long result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;
rank: 461
score: 99.22838483537946
patch: result = Node . new CaMeL Number ( result ) ; ) ;
rank: 461
score: 99.20161655970982
patch: result = lval ( lval CaMeL Int & rval CaMeL Int ) ;
rank: 461
score: 99.16975541548295
patch: value = lval CaMeL Int << rval CaMeL Int ;
rank: 462
score: 99.31513977050781
patch: result = lval CaMeL Int : rval CaMeL Int << >> rval CaMeL Int ;
rank: 462
score: 99.299365234375
patch: result = Node . get CaMeL Type ( ) >> rval CaMeL Int ;
rank: 462
score: 99.22603062220982
patch: result = lval << rval CaMeL Int >> >> rval CaMeL Int ;
rank: 462
score: 99.21581159319196
patch: result = lval CaMeL Int >> >> - - rval CaMeL Int ;
rank: 462
score: 99.21053641183036
patch: result = new int = lval CaMeL Int << rval CaMeL Int ;
rank: 462
score: 99.2013916015625
patch: result = lval CaMeL Int >> >> >> >> >> >> & rval ;
rank: 463
score: 99.31377766927083
patch: result = lval CaMeL Int & left . get CaMeL Double ( ) ;
rank: 463
score: 99.31148856026786
patch: result = lval CaMeL Int <= >> >> >> rval CaMeL Int ;
rank: 463
score: 99.2990010579427
patch: result = try CaMeL Fold CaMeL Shift ( result ) ;
rank: 463
score: 99.2004150390625
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int == lval )
rank: 463
score: 99.1693115234375
patch: value = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 464
score: 99.3107666015625
patch: result = lval CaMeL Int >> >> >> 1 - rval CaMeL Int ;
rank: 464
score: 99.2987060546875
patch: result = lval CaMeL Int << rval CaMeL Int >> lval CaMeL Int ; break ;
rank: 464
score: 99.2416015625
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> & 1 ;
rank: 464
score: 99.21494547526042
patch: result = lval CaMeL Int & - rval CaMeL Int ;
rank: 464
score: 99.21024867466518
patch: result = lval CaMeL Int << rval CaMeL Int >> >> 1 ;
rank: 465
score: 99.29835420496323
patch: result = left . get CaMeL Node ( ) . get CaMeL Type ( ) ;
rank: 465
score: 99.22459309895834
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; ;
rank: 465
score: 99.19906412760416
patch: result = lval CaMeL Int * rval CaMeL Int >> >> >> rval ;
rank: 465
score: 99.16896275111607
patch: result = new CaMeL Number >> >> rval CaMeL Int ; break ;
rank: 466
score: 99.31060791015625
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; }
rank: 466
score: 99.26649576822916
patch: result = lval CaMeL Int >> rval CaMeL Int % rval CaMeL Int ;
rank: 466
score: 99.22417743389423
patch: result = result >> rval CaMeL Int << rval CaMeL Int ;
rank: 466
score: 99.21455891927083
patch: result = ( result >> rval CaMeL Int >> rval CaMeL Int ) ;
rank: 466
score: 99.2093975360577
patch: result = lval CaMeL Int >> rval CaMeL Int >> result ;
rank: 466
score: 99.19901529947917
patch: result = lval CaMeL Int / ^ rval CaMeL Int ;
rank: 467
score: 99.30953979492188
patch: if = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 467
score: 99.29765768612133
patch: result = ( int ) ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 467
score: 99.26619466145833
patch: result = lval CaMeL Int > rval CaMeL Int >> lval CaMeL Int ;
rank: 467
score: 99.23947975852273
patch: result = lval CaMeL Int >> >> <= 1 ;
rank: 467
score: 99.21419270833333
patch: result = lval CaMeL Int >> rval rval CaMeL Int ;
rank: 467
score: 99.1988525390625
patch: result = lval CaMeL Int < lval ? lval : lval ;
rank: 468
score: 99.30908203125
patch: result = rval CaMeL Int == rval CaMeL Int >> >> rval CaMeL Int ;
rank: 468
score: 99.29725748697916
patch: result = lval CaMeL Int >> - ( int ) rval CaMeL Int ;
rank: 468
score: 99.21388346354166
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int : 1 ;
rank: 468
score: 99.20926106770834
patch: result = lval CaMeL Int << n . get CaMeL Parent ( ) ;
rank: 468
score: 99.19881184895833
patch: if ( lval CaMeL Int == >> >> & rval CaMeL Int ) {
rank: 468
score: 99.16734095982143
patch: int new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;
rank: 469
score: 99.30904715401786
patch: result = lval CaMeL Int >> >> rval [ rval CaMeL Int ;
rank: 469
score: 99.23892647879464
patch: result = lval CaMeL Int & >> >> rval CaMeL Int ; ;
rank: 469
score: 99.22373860677084
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return rval ;
rank: 469
score: 99.16707066127232
patch: long result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 470
score: 99.30880737304688
patch: result = lval CaMeL Int * >> rval CaMeL Int >> rval CaMeL Int ;
rank: 470
score: 99.21290940504808
patch: result = lval CaMeL Int >> rval CaMeL Int - result ;
rank: 470
score: 99.16682652064732
patch: result = lval CaMeL Int ; break ; case Token . RSH :
rank: 471
score: 99.31216195913461
patch: long lval CaMeL Int = ( int ) rval CaMeL Int ;
rank: 471
score: 99.30867767333984
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return lval . }
rank: 471
score: 99.22347005208333
patch: if ( n . get CaMeL Type ( ) == Token . LSH )
rank: 471
score: 99.20865885416667
patch: result = lval CaMeL Int << rval CaMeL Int ; }
rank: 471
score: 99.16643415178571
patch: int rval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;
rank: 472
score: 99.30859375
patch: result = lval CaMeL Int >> rval CaMeL Int ; result = 0 ;
rank: 472
score: 99.26397705078125
patch: if ( lval CaMeL Int == rval CaMeL Int ) return 0 ;
rank: 472
score: 99.237255859375
patch: result = lval CaMeL Int && rval CaMeL Int & rval CaMeL Int ;
rank: 472
score: 99.22304280598958
patch: n = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 472
score: 99.197998046875
patch: result = lval CaMeL Int >> >> ~ >> >> >> rval ;
rank: 472
score: 99.1664306640625
patch: result = lval CaMeL Int ? rval CaMeL Int << rval CaMeL Int ;
rank: 473
score: 99.3116455078125
patch: result = ( Node ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 473
score: 99.30787150065105
patch: result = lval CaMeL Int >> >> 1 ; break ;
rank: 473
score: 99.23708089192708
patch: long result = lval CaMeL Int & rval CaMeL Int ;
rank: 473
score: 99.22278849283855
patch: result = Node . new CaMeL Number ( 0 ) ;
rank: 473
score: 99.2120361328125
patch: result = lval CaMeL Int >> >> rval CaMeL Int . rval ;
rank: 473
score: 99.19783841646634
patch: result = lval CaMeL Int > 0 ? lval CaMeL Int ;
rank: 473
score: 99.16623360770089
patch: result = lval CaMeL Int & >> rval CaMeL Int ; break ;
rank: 474
score: 99.31148856026786
patch: result = lval CaMeL Int >> >> lval CaMeL Int ; break ;
rank: 474
score: 99.3075927734375
patch: result = lval CaMeL Int || lval CaMeL Int >> rval CaMeL Int ;
rank: 474
score: 99.23698156020221
patch: if ( result == 0 ) result = lval CaMeL Int >> rval CaMeL Int ;
rank: 474
score: 99.22242024739583
patch: Node new CaMeL Number = n . new CaMeL Number ( result ) ;
rank: 474
score: 99.21175443209134
patch: result = lval CaMeL Int >> & lval rval CaMeL Int ;
rank: 474
score: 99.20677839006696
patch: result = new int << rval CaMeL Int << rval CaMeL Int ;
rank: 474
score: 99.19747220552884
patch: do result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 474
score: 99.16615647536058
patch: buf = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 475
score: 99.30744280133929
patch: result = lval CaMeL Int != >> >> >> rval CaMeL Int ;
rank: 475
score: 99.26259940011161
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval ;
rank: 475
score: 99.23680877685547
patch: result = lval CaMeL Int + rval CaMeL Int >> >> >> >> rval ;
rank: 475
score: 99.22207641601562
patch: result = lval CaMeL Int << >> 1 ;
rank: 475
score: 99.21164376395089
patch: result = lval CaMeL Int >> >> rval CaMeL Int : lval ;
rank: 475
score: 99.205810546875
patch: result = lval CaMeL Int << 1 ;
rank: 475
score: 99.19746616908482
patch: result = lval CaMeL Int >> >> >> >> >> == 0 ;
rank: 475
score: 99.16583251953125
patch: return result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 476
score: 99.30704498291016
patch: lval = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 476
score: 99.29468491498162
patch: Node new CaMeL Number = ( int ) left . get CaMeL Type ( ) ;
rank: 476
score: 99.26254069010416
patch: return = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 476
score: 99.23643583409927
patch: if ( result == null ) result = lval CaMeL Int >> rval CaMeL Int ;
rank: 476
score: 99.20521763392857
patch: result = lval >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 476
score: 99.19734497070313
patch: result = lval CaMeL Int + >> rval ;
rank: 476
score: 99.16505940755208
patch: result = lval CaMeL Int << rval ;
rank: 477
score: 99.30689239501953
patch: result = lval CaMeL Int == >> rval CaMeL Int - rval CaMeL Int ;
rank: 477
score: 99.29444885253906
patch: result = Node . lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 477
score: 99.26241861979166
patch: result = lval CaMeL Int >= 0 ? lval : rval CaMeL Int ;
rank: 477
score: 99.22045084635417
patch: result = ( int ) rval . new CaMeL Number ( result ) ;
rank: 477
score: 99.21012056790866
patch: result = lval CaMeL Int >> lval ( rval CaMeL Int ;
rank: 477
score: 99.20499361478366
patch: result = lval CaMeL Int >> rval CaMeL Int << $NUMBER$ ;
rank: 477
score: 99.16496930803571
patch: buf = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 478
score: 99.2942123413086
patch: result = lval CaMeL Int >> rval CaMeL Int : ( int ) rval ;
rank: 478
score: 99.26192220052083
patch: result = lval CaMeL Int >= lval CaMeL Int - rval CaMeL Int ;
rank: 478
score: 99.2347900390625
patch: result = lval CaMeL Int >> >> >> >> || rval CaMeL Int ;
rank: 478
score: 99.21962890625
patch: result = n . get CaMeL Code ( ) << rval CaMeL Int ;
rank: 478
score: 99.20944010416666
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int + 1 ;
rank: 478
score: 99.20343017578125
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> n ;
rank: 478
score: 99.19725545247395
patch: result = lval / rval CaMeL Int >> >> rval ;
rank: 478
score: 99.16473858173077
patch: value = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 479
score: 99.30636393229166
patch: result = lval CaMeL Int >> >> rval $NUMBER$ - rval CaMeL Int ;
rank: 479
score: 99.26192220052083
patch: final int lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 479
score: 99.20916748046875
patch: result = lval CaMeL Int >> * lval CaMeL Int ;
rank: 479
score: 99.19716233473558
patch: result = lval CaMeL Int / >> >> >> & 0 ;
rank: 480
score: 99.30623626708984
patch: result = lval CaMeL Int - rval CaMeL Int >> - rval CaMeL Int ;
rank: 480
score: 99.26190185546875
patch: final String result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 480
score: 99.23360188802083
patch: result = lval CaMeL Int & rval CaMeL Int >> >> >> $NUMBER$ ;
rank: 480
score: 99.208984375
patch: lval = lval CaMeL Int >> rval CaMeL Int ;
rank: 480
score: 99.20238318810097
patch: result = lval CaMeL Int << rval CaMeL Int >> $NUMBER$ ;
rank: 480
score: 99.197021484375
patch: this . result = lval CaMeL Int + rval CaMeL Int ;
rank: 481
score: 99.30582427978516
patch: result = lval CaMeL Int >> >> rval CaMeL Int , rval CaMeL Int ;
rank: 481
score: 99.21841195913461
patch: result = result << rval CaMeL Int >> rval CaMeL Int ;
rank: 481
score: 99.20103102463942
patch: result = lval CaMeL Int << rval CaMeL Int ; try {
rank: 481
score: 99.19525553385417
patch: if ( lval CaMeL Int > 0 && lval CaMeL Int < 0 )
rank: 481
score: 99.16392299107143
patch: tmp = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 482
score: 99.29378255208333
patch: result = Node . new CaMeL Number ( left ) ;
rank: 482
score: 99.26081194196429
patch: result = lval CaMeL Int >> rval >> >> rval CaMeL Int ;
rank: 482
score: 99.21744210379464
patch: result = report CaMeL Code CaMeL Change ( ) ; return n ;
rank: 482
score: 99.20870535714286
patch: result = lval CaMeL Int >> >> * >> rval CaMeL Int ;
rank: 482
score: 99.19996861049107
patch: result += ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 482
score: 99.19509451729911
patch: result = lval CaMeL Int >> >> >> >> & >> rval ;
rank: 482
score: 99.16373697916667
patch: short result = lval CaMeL Int >> rval CaMeL Int ;
rank: 483
score: 99.30694580078125
patch: result = Node . new CaMeL Number ( Integer . MIN _ VALUE ) ;
rank: 483
score: 99.30550711495536
patch: result = lval CaMeL Int >> >> 1 + rval CaMeL Int ;
rank: 483
score: 99.23292541503906
patch: result = lval CaMeL Int >> ;
rank: 483
score: 99.19783841646634
patch: result = lval CaMeL Int << rval CaMeL Int << n ;
rank: 483
score: 99.19471153846153
patch: result = lval CaMeL Int << >> ^ rval CaMeL Int ;
rank: 484
score: 99.30531663161058
patch: result = - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 484
score: 99.25973946707589
patch: = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 484
score: 99.23250638521634
patch: result = lval CaMeL Int >> >> >> >> >> -- ;
rank: 484
score: 99.21554361979166
patch: result = lval CaMeL Int << >> rval CaMeL Int ; break ; }
rank: 484
score: 99.20853969029018
patch: result = lval CaMeL Int >> >> >> * lval CaMeL Int ;
rank: 484
score: 99.1964111328125
patch: result = rval CaMeL Int << ( int ) rval CaMeL Int ;
rank: 484
score: 99.1632792154948
patch: data = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 485
score: 99.3052734375
patch: result = lval CaMeL Int >> >> rval ) : rval CaMeL Int ;
rank: 485
score: 99.2919677734375
patch: result = new Node ( n . get CaMeL Parent ( ) ) ;
rank: 485
score: 99.20839280348558
patch: result = lval CaMeL Int < 1 ? lval CaMeL Int ;
rank: 485
score: 99.196044921875
patch: result = lval CaMeL Int >> rval CaMeL Int ; / * /
rank: 485
score: 99.19442044771634
patch: result = lval CaMeL Int + >> & rval CaMeL Int ;
rank: 485
score: 99.16326349431819
patch: res = lval CaMeL Int >> rval CaMeL Int ;
rank: 486
score: 99.30518517127403
patch: result = 0 + rval CaMeL Int >> rval CaMeL Int ;
rank: 486
score: 99.29193115234375
patch: result = ( int ) ( rval CaMeL Int >> rval CaMeL Int ) ;
rank: 486
score: 99.25946916852679
patch: return result >> >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 486
score: 99.21494954427084
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default
rank: 486
score: 99.19381009615384
patch: double lval = lval CaMeL Int / >> rval CaMeL Int ;
rank: 486
score: 99.16270955403645
patch: sb = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 487
score: 99.30484212239584
patch: result = rval CaMeL Int >> rval CaMeL Int : lval CaMeL Int ;
rank: 487
score: 99.30482835036058
patch: int rval CaMeL Int = ( int ) rval CaMeL Int ;
rank: 487
score: 99.2912109375
patch: result = Node . get CaMeL Type ( ) << rval CaMeL Int ;
rank: 487
score: 99.25940755208333
patch: result = rval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ;
rank: 487
score: 99.23200334821429
patch: result = lval CaMeL Int & >> >> -- rval CaMeL Int ;
rank: 487
score: 99.19427020733173
patch: result = lval CaMeL Int >> rval CaMeL Int >> n ;
rank: 487
score: 99.16262381417411
patch: byte try { result = lval CaMeL Int >> rval CaMeL Int ;
rank: 488
score: 99.30464172363281
patch: result = lval CaMeL Int + lval CaMeL Int << >> rval CaMeL Int ;
rank: 488
score: 99.30448404947917
patch: result = lval CaMeL Int != >> rval CaMeL Int ;
rank: 488
score: 99.2908706665039
patch: result = lval CaMeL Int << ( int ) rval CaMeL Int ; break ;
rank: 488
score: 99.25934392755681
patch: result = lval CaMeL Int == rval CaMeL Int ;
rank: 488
score: 99.231982421875
patch: result = lval CaMeL Int < lval CaMeL Int >> rval CaMeL Int ;
rank: 488
score: 99.21366664341518
patch: String new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;
rank: 488
score: 99.19324669471153
patch: if ( lval CaMeL Int == >> rval CaMeL Int ) {
rank: 488
score: 99.16102183948864
patch: head = lval CaMeL Int >> rval CaMeL Int ;
rank: 489
score: 99.30377197265625
patch: result = rval CaMeL Int >> >> rval CaMeL Int > rval CaMeL Int ;
rank: 489
score: 99.23159354073661
patch: result = lval CaMeL Int & rval CaMeL Int >> >> -- ;
rank: 489
score: 99.1929423014323
patch: result = lval CaMeL Int >> >> >> & lval ;
rank: 489
score: 99.19233049665179
patch: result = lval CaMeL Int >> >> rval CaMeL Int << left ;
rank: 489
score: 99.16055501302084
patch: return rval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;
rank: 490
score: 99.28965407151442
patch: result ; double lval CaMeL Int = ( int ) rval ;
rank: 490
score: 99.231396484375
patch: result = lval CaMeL Int || rval CaMeL Int & rval CaMeL Int ;
rank: 490
score: 99.21331787109375
patch: result = Node . lval CaMeL Int << >> rval CaMeL Int ;
rank: 490
score: 99.20581868489583
patch: result = ( result >> rval CaMeL Int ) & lval CaMeL Int ;
rank: 490
score: 99.19268798828125
patch: * / result = lval CaMeL Int >> >> rval ;
rank: 490
score: 99.19217623197116
patch: here . result = lval CaMeL Int << rval CaMeL Int ;
rank: 491
score: 99.25690252130681
patch: result = lval CaMeL Int >= lval CaMeL Int ;
rank: 491
score: 99.23125751201923
patch: result = lval CaMeL Int > >> & rval CaMeL Int ;
rank: 491
score: 99.20574951171875
patch: result = lval CaMeL Int & 1 >> >> rval CaMeL Int ;
rank: 491
score: 99.19206891741071
patch: result = lval CaMeL Int << rval CaMeL Int ; break ; default
rank: 491
score: 99.15972900390625
patch: try { switch ( n . get CaMeL Type ( ) ) {
rank: 492
score: 99.30402483258929
patch: result = lval CaMeL Int : ( int ) rval CaMeL Int ;
rank: 492
score: 99.30362701416016
patch: result = lval CaMeL Int >> rval CaMeL Int ; return lval CaMeL Int ;
rank: 492
score: 99.28882598876953
patch: result = lval CaMeL Int << rval CaMeL Int : ( int ) rval ;
rank: 492
score: 99.22984967912946
patch: boolean result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 492
score: 99.20548793247768
patch: result += lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 492
score: 99.19158935546875
patch: result = new int >> rval CaMeL Int << rval CaMeL Int ;
rank: 492
score: 99.19057053786058
patch: result = lval CaMeL Int >> >> ^ lval CaMeL Int ;
rank: 492
score: 99.15944260817308
patch: return switch ( n . get CaMeL Type ( ) ) {
rank: 493
score: 99.30380045572916
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = n ;
rank: 493
score: 99.30283203125
patch: result = lval CaMeL Int >> rval CaMeL Int != rval CaMeL Int ;
rank: 493
score: 99.28876604352679
patch: result = Node . new CaMeL Number ( result , 1 ) ;
rank: 493
score: 99.2563720703125
patch: result = lval CaMeL Int >> $NUMBER$ >> >> >> rval CaMeL Int ;
rank: 493
score: 99.2298114483173
patch: result = lval CaMeL Int >> >> : rval CaMeL Int ;
rank: 493
score: 99.1905184659091
patch: if ( lval CaMeL Int == rval CaMeL Int )
rank: 493
score: 99.15852864583333
patch: result = lval CaMeL Int << rval CaMeL Int >> >> >> rval ;
rank: 494
score: 99.30254720052083
patch: result = lval CaMeL Int >> >> rval ( rval CaMeL Int ) ;
rank: 494
score: 99.28871256510416
patch: result = Node . new CaMeL Number ( result , - 1 ) ;
rank: 494
score: 99.25575474330357
patch: result = rval CaMeL Int >> >> rval CaMeL Int >> 1 ;
rank: 494
score: 99.1900126139323
patch: result = new lval CaMeL Int >> rval CaMeL Int ;
rank: 494
score: 99.18892728365384
patch: result += lval CaMeL Int << rval CaMeL Int ; break ;
rank: 494
score: 99.1585184733073
patch: else result = lval CaMeL Int >> rval CaMeL Int ;
rank: 495
score: 99.30213216145833
patch: result = rval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ;
rank: 495
score: 99.2556396484375
patch: result = lval CaMeL Int == lval ? lval : rval CaMeL Int ;
rank: 495
score: 99.21138218470982
patch: n . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 495
score: 99.20493861607143
patch: result = lval CaMeL Int >> >> rval CaMeL Int - result ;
rank: 495
score: 99.18968709309895
patch: result = lval CaMeL Int & rval CaMeL Int ) ;
rank: 495
score: 99.18841083233173
patch: result = this . lval CaMeL Int >> rval CaMeL Int ;
rank: 495
score: 99.15846946022727
patch: return report CaMeL Code CaMeL Change ( ) ; }
rank: 496
score: 99.30088297526042
patch: result = lval CaMeL Int >> 0 rval CaMeL Int ;
rank: 496
score: 99.21111591045673
patch: result = n . get CaMeL Type ( ) << 1 ;
rank: 496
score: 99.2045147235577
patch: result = - lval CaMeL Int >> >> rval CaMeL Int ;
rank: 496
score: 99.18959263392857
patch: if ( lval CaMeL Int != 0 ) return lval CaMeL Int ;
rank: 496
score: 99.18703206380208
patch: result = new CaMeL Number ( rval CaMeL Int ) ;
rank: 496
score: 99.158154296875
patch: s . result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 497
score: 99.300732421875
patch: result = lval >> >> >> >> rval CaMeL Int rval CaMeL Int ;
rank: 497
score: 99.28745680588942
patch: result = lval CaMeL Int << Integer . MIN _ VALUE ;
rank: 497
score: 99.25348772321429
patch: result = lval CaMeL Int == lval >> >> rval CaMeL Int ;
rank: 497
score: 99.2041259765625
patch: result = lval CaMeL Int >> lval ( - rval CaMeL Int ) ;
rank: 497
score: 99.18956580528847
patch: result = lval CaMeL Int >> ^ >> rval CaMeL Int ;
rank: 497
score: 99.18690708705357
patch: this . result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 497
score: 99.15797008167614
patch: result = lval CaMeL Int <= rval CaMeL Int ;
rank: 498
score: 99.22713529146634
patch: long result = lval CaMeL Int & >> rval CaMeL Int ;
rank: 498
score: 99.21098981584821
patch: result = lval CaMeL Int >> >> rval : rval CaMeL Int ;
rank: 498
score: 99.20361328125
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int - result ;
rank: 498
score: 99.18944373497597
patch: / result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 498
score: 99.15792142427884
patch: result = lval CaMeL Int & lval CaMeL Int ; break ;
rank: 499
score: 99.22677847055289
patch: result = lval CaMeL Int >> >> >> >> > 1 ;
rank: 499
score: 99.21088518415179
patch: double rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 499
score: 99.18943434495192
patch: result = lval CaMeL Int >> ~ rval CaMeL Int ; ;
rank: 499
score: 99.18598284040179
patch: result = new int >> rval CaMeL Int >> rval CaMeL Int ;
rank: 499
score: 99.1571932705966
patch: base = lval CaMeL Int >> rval CaMeL Int ;
rank: 500
score: 99.30000813802083
patch: result = lval CaMeL Int >> >> rval - >> rval CaMeL Int ;
rank: 500
score: 99.28573404947916
patch: result = lval CaMeL Int << ( result >> rval CaMeL Int ) ;
rank: 500
score: 99.21026611328125
patch: result = report . new CaMeL Number ( result ) ;
rank: 500
score: 99.18878173828125
patch: result = lval CaMeL Int >> >> >> >> >> == $NUMBER$ ;
rank: 500
score: 99.18585205078125
patch: result = new int lval CaMeL Int >> >> rval CaMeL Int ;
rank: 500
score: 99.15677584134616
patch: Type result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 501
score: 99.28559112548828
patch: result = Node . lval CaMeL Int << ( int ) rval CaMeL Int ;
rank: 501
score: 99.25197928292411
patch: result = lval CaMeL Int >> lval CaMeL Int rval CaMeL Int ;
rank: 501
score: 99.2021240234375
patch: result = lval CaMeL Int >> lval ; result = lval CaMeL Int ;
rank: 501
score: 99.18805401141827
patch: result = lval CaMeL Int | >> >> rval CaMeL Int ;
rank: 501
score: 99.15653852982955
patch: s = lval CaMeL Int >> rval CaMeL Int ;
rank: 502
score: 99.29940359933036
patch: result = 0 == rval CaMeL Int >> >> rval CaMeL Int ;
rank: 502
score: 99.28544616699219
patch: result = new Node ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 502
score: 99.18761268028847
patch: result = lval CaMeL Int < lval ? 0 : 0 ;
rank: 502
score: 99.18579973493304
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; System .
rank: 502
score: 99.15525599888393
patch: byte result = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 503
score: 99.285400390625
patch: result = Node . new CaMeL Number ( result + $STRING$ ) ;
rank: 503
score: 99.25145670572917
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> >> lval ;
rank: 503
score: 99.2250732421875
patch: result = lval CaMeL Int >> >> >> >> && rval CaMeL Int ;
rank: 503
score: 99.2092041015625
patch: result = result ; return Node . new CaMeL Number ( result ) ;
rank: 503
score: 99.2017333984375
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result ++ ;
rank: 503
score: 99.18748121995192
patch: int type = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 503
score: 99.18539663461539
patch: result = rval CaMeL Int << >> >> rval CaMeL Int ;
rank: 504
score: 99.29923189603366
patch: result = lval CaMeL Int >> >> 1 ; break ; }
rank: 504
score: 99.29814147949219
patch: result ; new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 504
score: 99.22491096047794
patch: result = lval CaMeL Int << >> >> >> >> >> >> rval CaMeL Int ;
rank: 504
score: 99.20899376502403
patch: result = Node . new CaMeL Number ( result ] ) ;
rank: 504
score: 99.20111955915179
patch: } else result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 504
score: 99.18735177176339
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; return ;
rank: 504
score: 99.18463134765625
patch: result += lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 505
score: 99.29619140625
patch: result = ( Node ) Node . new CaMeL Number ( result ) ;
rank: 505
score: 99.22399030412946
patch: result = lval CaMeL Int == - 1 ? 1 : 0 ;
rank: 505
score: 99.20058030348558
patch: int result = lval CaMeL Int >> >> lval CaMeL Int ;
rank: 505
score: 99.18624173677884
patch: result = lval CaMeL Int & ~ ~ rval CaMeL Int ;
rank: 505
score: 99.1820819561298
patch: result = lval CaMeL Int >> rval CaMeL Int ; try {
rank: 506
score: 99.29798177083333
patch: result = lval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;
rank: 506
score: 99.29615885416666
patch: result = lval CaMeL Int << rval CaMeL Int ; result = n ;
rank: 506
score: 99.20839436848958
patch: pos = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 506
score: 99.18573608398438
patch: result = lval CaMeL Int * >> rval ;
rank: 506
score: 99.18082101004464
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; / /
rank: 506
score: 99.1533954326923
patch: result = lval CaMeL Int >> >> >> rval ; break ;
rank: 507
score: 99.29791729266827
patch: result = 0 + lval CaMeL Int >> rval CaMeL Int ;
rank: 507
score: 99.28312465122768
patch: result = try CaMeL Fold CaMeL Shift ( n , left ) ;
rank: 507
score: 99.22223772321429
patch: result = lval CaMeL Int >> >> >> && rval CaMeL Int ;
rank: 507
score: 99.18571333451705
patch: result = lval CaMeL Int >> >> rval 0 ;
rank: 508
score: 99.25026157924107
patch: result = lval CaMeL Int >> - rval CaMeL Int >> 1 ;
rank: 508
score: 99.2220458984375
patch: result = lval CaMeL Int >> >> != rval CaMeL Int ;
rank: 508
score: 99.18557303292411
patch: result = lval CaMeL Int >> >> rval ; result = lval ;
rank: 508
score: 99.17982991536458
patch: result = this . new CaMeL Number ( result ) ;
rank: 508
score: 99.15277099609375
patch: { error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 509
score: 99.29763357979911
patch: result = $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 509
score: 99.24996243990384
patch: result = lval CaMeL Int . length >> rval CaMeL Int ;
rank: 509
score: 99.20774623325893
patch: result = result >> rval CaMeL Int << >> rval CaMeL Int ;
rank: 509
score: 99.19984654017857
patch: rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 509
score: 99.18550931490384
patch: result = lval CaMeL Int ( >> rval CaMeL Int ) ;
rank: 509
score: 99.17978341238839
patch: result = lval CaMeL Int >> >> rval CaMeL Int << $NUMBER$ ;
rank: 509
score: 99.15276630108173
patch: s . result = lval CaMeL Int << rval CaMeL Int ;
rank: 510
score: 99.29749552408855
patch: result = lval ) >> >> >> rval CaMeL Int ;
rank: 510
score: 99.29523577008929
patch: result = lval CaMeL Int << >> >> - rval CaMeL Int ;
rank: 510
score: 99.24992152622768
patch: result = lval CaMeL Int >> & rval CaMeL Int >> 1 ;
rank: 510
score: 99.22100830078125
patch: result = lval CaMeL Int >> >> >> >> >> >> $NUMBER$ ;
rank: 510
score: 99.19914106889205
patch: result = ( result >> >> rval CaMeL Int ;
rank: 510
score: 99.18464006696429
patch: result = lval CaMeL Int >> >> == rval CaMeL Int ? ;
rank: 510
score: 99.17926494891827
patch: result = lval CaMeL Int << rval CaMeL Int << left ;
rank: 511
score: 99.29747596153847
patch: result = lval CaMeL Int >> rval CaMeL Int - 1 ;
rank: 511
score: 99.29500906808036
patch: result = lval CaMeL Int >> >> >> + rval CaMeL Int ;
rank: 511
score: 99.2209113625919
patch: if ( lval CaMeL Int != 0 && lval CaMeL Int != rval CaMeL Int )
rank: 511
score: 99.20745380108173
patch: result = result << rval CaMeL Int << rval CaMeL Int ;
rank: 511
score: 99.184326171875
patch: result = lval CaMeL Int & >> rval CaMeL Int ) ;
rank: 512
score: 99.29744096235795
patch: result = 0 >> >> >> rval CaMeL Int ;
rank: 512
score: 99.24968610491071
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> result ;
rank: 512
score: 99.2208251953125
patch: result = lval CaMeL Int >> >> < 1 ;
rank: 512
score: 99.19893391927083
patch: result = lval CaMeL Int >> >> >> lval : rval CaMeL Int ;
rank: 512
score: 99.17801339285714
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> n ;
rank: 512
score: 99.15213716947116
patch: { result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 513
score: 99.19861778846153
patch: int rval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 513
score: 99.18373325892857
patch: result = lval CaMeL Int / >> >> >> >> & 0 ;
rank: 513
score: 99.15208943684895
patch: c = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 514
score: 99.29720052083333
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> rval 1 ;
rank: 514
score: 99.2494384765625
patch: result = lval CaMeL Int < 0 ? rval : rval CaMeL Int ;
rank: 514
score: 99.2205078125
patch: if ( ! lval CaMeL Int . equals ( lval CaMeL Int ) ;
rank: 514
score: 99.20620727539062
patch: result = lval CaMeL Int << : rval CaMeL Int ;
rank: 514
score: 99.1981201171875
patch: result = lval CaMeL Int >> lval 1 ;
rank: 514
score: 99.18372521033653
patch: int lval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 514
score: 99.15208217075893
patch: state = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 515
score: 99.29691569010417
patch: result = lval CaMeL Int >> >> rval ) : lval CaMeL Int ;
rank: 515
score: 99.29407501220703
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; n = result ;
rank: 515
score: 99.27983093261719
patch: result = Node . new CaMeL Number ( ( int ) lval CaMeL Int ;
rank: 515
score: 99.249169921875
patch: result = lval CaMeL Int += rval CaMeL Int >> rval CaMeL Int ;
rank: 515
score: 99.20554024832589
patch: n . result = Node . new CaMeL Number ( result ) ;
rank: 515
score: 99.19723307291666
patch: result = lval CaMeL Int >> & ( 1 : rval CaMeL Int ;
rank: 515
score: 99.18349202473958
patch: result = lval CaMeL Int >> >> & 0 xffffffff ;
rank: 516
score: 99.2940673828125
patch: result = lval CaMeL Int >> + ( int ) rval CaMeL Int ;
rank: 516
score: 99.27975463867188
patch: result = lval CaMeL Int << rval CaMeL Int >> ( rval CaMeL Int ;
rank: 516
score: 99.22006661551339
patch: result = lval CaMeL Int >> >> >> < rval CaMeL Int ;
rank: 516
score: 99.19722493489583
patch: result = rval CaMeL Int >> & rval CaMeL Int ;
rank: 516
score: 99.18328387920673
patch: this = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 516
score: 99.17687116350446
patch: result = lval CaMeL Int >> >> rval CaMeL Int << n ;
rank: 516
score: 99.15153285435268
patch: result = rval CaMeL Int >> rval CaMeL Int ; break ; }
rank: 517
score: 99.29500906808036
patch: result = lval >> >> >> >> >> >> rval CaMeL Int ;
rank: 517
score: 99.21944754464286
patch: result = lval CaMeL Int >> >> >> >> >> - 1 ;
rank: 517
score: 99.2053973858173
patch: n . result = lval CaMeL Int << rval CaMeL Int ;
rank: 517
score: 99.18301391601562
patch: result = lval * rval CaMeL Int >> >> rval ;
rank: 517
score: 99.17664591471355
patch: if ( rval CaMeL Int == rval CaMeL Int ) {
rank: 517
score: 99.15146108774039
patch: result = right . get CaMeL Double ( ) >> rval ;
rank: 518
score: 99.29456380208333
patch: result = lval CaMeL Int >> 0 >> >> >> rval CaMeL Int ;
rank: 518
score: 99.27888997395833
patch: result = left . new CaMeL Number ( ( int ) result ) ;
rank: 518
score: 99.24877115885417
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> 1 ;
rank: 518
score: 99.21859537760416
patch: result = lval CaMeL Int + rval CaMeL Int >> >> >> rval ;
rank: 518
score: 99.18301156850961
patch: result = lval CaMeL Int >> >> >> & 0 xffffffff ;
rank: 518
score: 99.15143291766827
patch: { result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 519
score: 99.24851888020834
patch: result = lval CaMeL Int == 0 ? 0 : rval CaMeL Int ;
rank: 519
score: 99.2185528094952
patch: result = lval CaMeL Int >> >> >> >> >= 0 ;
rank: 519
score: 99.20431082589286
patch: String new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;
rank: 519
score: 99.19685872395833
patch: result = ( result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 519
score: 99.18251546223958
patch: result = lval CaMeL Int >> >> >> >> & ;
rank: 519
score: 99.17604573567708
patch: result = new Node ( result ) ;
rank: 519
score: 99.15129743303571
patch: result = lval CaMeL Int - ( int ) rval CaMeL Int ;
rank: 520
score: 99.29264068603516
patch: new CaMeL Number = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 520
score: 99.2781982421875
patch: result = Node CaMeL Util . new CaMeL Number ( result ) ;
rank: 520
score: 99.24842936197916
patch: result = lval CaMeL Int >= 0 ? lval : lval CaMeL Int ;
rank: 520
score: 99.20424241286058
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; }
rank: 520
score: 99.1822509765625
patch: result = lval CaMeL Int >> >> >> >> >> >> ;
rank: 520
score: 99.17601600060097
patch: result = this . lval CaMeL Int << rval CaMeL Int ;
rank: 521
score: 99.29329136439732
patch: result = lval CaMeL Int == >> >> - rval CaMeL Int ;
rank: 521
score: 99.21815708705357
patch: result = lval CaMeL Int & rval CaMeL Int ; return result ;
rank: 521
score: 99.20384870256696
patch: new CaMeL Number = lval CaMeL Int << >> rval CaMeL Int ;
rank: 521
score: 99.17598100142045
patch: result = new Node ( result , result ) ;
rank: 522
score: 99.29252624511719
patch: result = lval CaMeL Int != Node . new CaMeL Number ( result ) ;
rank: 522
score: 99.277490234375
patch: result = new Assertion CaMeL Error ( ) ;
rank: 522
score: 99.2177490234375
patch: result = lval CaMeL Int >> >> ; result = lval CaMeL Int ;
rank: 522
score: 99.19602864583334
patch: try { result = lval CaMeL Int >> >> rval CaMeL Int ; }
rank: 522
score: 99.18170635516827
patch: result = lval CaMeL Int & >> >> >> & 0 ;
rank: 522
score: 99.17596435546875
patch: result -- ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 523
score: 99.2474834735577
patch: result = lval CaMeL Int >> rval CaMeL Int & 1 ;
rank: 523
score: 99.21739850725446
patch: value = lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 523
score: 99.20348182091347
patch: result = Node . new CaMeL Number >> rval CaMeL Int ;
rank: 523
score: 99.1959228515625
patch: result = ! lval CaMeL Int >> >> rval CaMeL Int ;
rank: 523
score: 99.1814716045673
patch: result = lval CaMeL Int <= >> >> rval CaMeL Int ;
rank: 523
score: 99.14980643136161
patch: try { result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 524
score: 99.21702991832386
patch: result = lval CaMeL Int >> >> == 1 ;
rank: 524
score: 99.20295933314732
patch: Node new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;
rank: 524
score: 99.19582297585227
patch: result = lval CaMeL Int >> >> >> 0 ;
rank: 524
score: 99.18094308035714
patch: result = lval CaMeL Int / rval CaMeL Int + >> rval ;
rank: 524
score: 99.14918870192308
patch: result = lval CaMeL Int >> >> rval rval CaMeL Int ;
rank: 525
score: 99.27530110677084
patch: double lval = ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 525
score: 99.24701799665179
patch: result = lval CaMeL Int >> >> rval CaMeL Int - $NUMBER$ ;
rank: 525
score: 99.21659029447116
patch: long result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 525
score: 99.1954833984375
patch: result = lval CaMeL Int >> >> >> >> | lval CaMeL Int ;
rank: 525
score: 99.1806640625
patch: result = lval ? lval CaMeL Int >> >> >> >> rval ;
rank: 525
score: 99.14908541165866
patch: result = lval CaMeL Int >> rval CaMeL Int << rval ;
rank: 526
score: 99.246923828125
patch: result = lval CaMeL Int == 0 ? 1 : rval CaMeL Int ;
rank: 526
score: 99.19486781529018
patch: result = lval CaMeL Int >> lval >> & rval CaMeL Int ;
rank: 526
score: 99.18021334134616
patch: / * result = lval CaMeL Int >> rval CaMeL Int ;
rank: 526
score: 99.14891560872395
patch: s = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 527
score: 99.24658203125
patch: result = lval CaMeL Int == 0 ? rval : lval CaMeL Int ;
rank: 527
score: 99.19407435825893
patch: result = lval CaMeL Int >> >> >> / lval CaMeL Int ;
rank: 527
score: 99.1801288311298
patch: result = lval CaMeL Int & >> >> >> >> rval ;
rank: 528
score: 99.29108072916667
patch: result = lval CaMeL Int >> >> rval ) * rval CaMeL Int ;
rank: 528
score: 99.21551920572917
patch: result = lval CaMeL Int & >> rval CaMeL Int ; return result ;
rank: 528
score: 99.20208185369319
patch: return lval CaMeL Int << >> rval CaMeL Int ;
rank: 528
score: 99.19394356863839
patch: int result = lval CaMeL Int >> >> - rval CaMeL Int ;
rank: 528
score: 99.17992292131696
patch: result = lval CaMeL Int >> == rval ? lval : lval ;
rank: 529
score: 99.20186360677083
patch: result = ) . new CaMeL Number ( result ) ;
rank: 529
score: 99.19340297154018
patch: result = ( lval CaMeL Int & >> rval CaMeL Int ) ;
rank: 529
score: 99.17982835036058
patch: result = lval CaMeL Int >> | ~ rval CaMeL Int ;
rank: 529
score: 99.1736309344952
patch: result = lval CaMeL Int << rval CaMeL Int ; System .
rank: 529
score: 99.14635416666667
patch: result = lval CaMeL Int << rval CaMeL Int >> rval ; break ;
rank: 530
score: 99.29120279947917
patch: result = lval CaMeL Int << rval CaMeL Int . rval CaMeL Int ;
rank: 530
score: 99.2904296875
patch: result = lval CaMeL Int >> >> rval CaMeL Int - >> 1 ;
rank: 530
score: 99.27384185791016
patch: result = lval CaMeL Int << rval CaMeL Int << ( rval CaMeL Int ;
rank: 530
score: 99.24345703125
patch: result = lval CaMeL Int >= 1 ? rval : rval CaMeL Int ;
rank: 530
score: 99.20186070033482
patch: sb . replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 530
score: 99.19314575195312
patch: i = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 530
score: 99.1798095703125
patch: result = lval CaMeL Int * rval CaMeL Int ; ;
rank: 530
score: 99.17308631310097
patch: result = new int lval CaMeL Int >> rval CaMeL Int ;
rank: 530
score: 99.1458740234375
patch: head = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 531
score: 99.28892415364584
patch: result = lval CaMeL Int >> >> rval CaMeL Int - rval $NUMBER$ ;
rank: 531
score: 99.2736083984375
patch: result = Node . lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 531
score: 99.24274553571429
patch: result = lval CaMeL Int >> rval CaMeL Int ; return 0 ;
rank: 531
score: 99.19271414620536
patch: result = lval CaMeL Int >> >> >> >> lval : lval ;
rank: 531
score: 99.1796875
patch: result = lval CaMeL Int << >> >> >> rval ;
rank: 531
score: 99.17222243088942
patch: result = lval CaMeL Int >> rval CaMeL Int >> left ;
rank: 531
score: 99.1454608623798
patch: result = lval CaMeL Int - rval CaMeL Int ; break ;
rank: 532
score: 99.291162109375
patch: int rval CaMeL Int = Node . new CaMeL Number ( result ) ;
rank: 532
score: 99.27360534667969
patch: result = lval CaMeL Int >> rval CaMeL Int << ( rval CaMeL Int ;
rank: 532
score: 99.24249267578125
patch: this . result = lval CaMeL Int >> rval CaMeL Int >> ;
rank: 532
score: 99.214111328125
patch: result = lval CaMeL Int >> >> -= rval CaMeL Int ;
rank: 532
score: 99.1915283203125
patch: if ( lval CaMeL Int >> & rval CaMeL Int ;
rank: 532
score: 99.17898324819711
patch: result = lval CaMeL Int >> & 0 rval CaMeL Int ;
rank: 532
score: 99.17205341045673
patch: result = lval CaMeL Int << rval CaMeL Int : result ;
rank: 532
score: 99.1448641690341
patch: data = lval CaMeL Int >> rval CaMeL Int ;
rank: 533
score: 99.19948032924107
patch: error ( $STRING$ + n . get CaMeL Name ( ) ) ;
rank: 533
score: 99.190185546875
patch: result = ( lval CaMeL Int >> >> >> rval CaMeL Int ) ;
rank: 533
score: 99.17145647321429
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; default
rank: 533
score: 99.14451381138393
patch: result = right . get CaMeL Double ( ) ; return n ;
rank: 534
score: 99.27213832310268
patch: Node new CaMeL Number = n . get CaMeL Type ( ) ;
rank: 534
score: 99.19912484975961
patch: double rval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 534
score: 99.189453125
patch: result = lval CaMeL Int >> & ( 1 ? rval CaMeL Int ;
rank: 534
score: 99.17838832310268
patch: result = lval CaMeL Int >> >> >> & >> >> rval ;
rank: 534
score: 99.14390980113636
patch: result = lval CaMeL Int << >> >> rval ;
rank: 535
score: 99.29048156738281
patch: result = lval CaMeL Int ? Node . new CaMeL Number ( result ) ;
rank: 535
score: 99.28724016462054
patch: result = lval CaMeL Int >> >> rval ( >> 1 ) ;
rank: 535
score: 99.2400614420573
patch: final result = lval CaMeL Int >> rval CaMeL Int ;
rank: 535
score: 99.19872174944196
patch: result = n . new CaMeL Number ( result , right ) ;
rank: 535
score: 99.18892728365384
patch: result = lval CaMeL Int & lval >> rval CaMeL Int ;
rank: 535
score: 99.17833362926136
patch: double result = lval CaMeL Int >> >> rval ;
rank: 535
score: 99.14358723958334
patch: result = lval CaMeL Int >> >> * rval CaMeL Int ; break ;
rank: 536
score: 99.29025704520089
patch: this . result = Node . new CaMeL Number ( result ) ;
rank: 536
score: 99.27068219866071
patch: result = Node . new CaMeL Number ( result , $NUMBER$ ) ;
rank: 536
score: 99.23994954427083
patch: return result >> >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 536
score: 99.19866388494319
patch: n = lval CaMeL Int >> rval CaMeL Int ;
rank: 536
score: 99.1882793719952
patch: result = >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 536
score: 99.17769949776786
patch: result = lval CaMeL Int & lval >> >> >> >> rval ;
rank: 536
score: 99.1702880859375
patch: result = lval CaMeL Int << result ;
rank: 536
score: 99.14334309895834
patch: return left . get CaMeL Type ( ) == Token . URSH :
rank: 537
score: 99.286279296875
patch: result = lval CaMeL Int >> 1 >> >> >> rval CaMeL Int ;
rank: 537
score: 99.2385009765625
patch: return ( result >> >> rval CaMeL Int ) >> rval CaMeL Int ;
rank: 537
score: 99.188232421875
patch: result = lval CaMeL Int >> >> rval CaMeL Int & $NUMBER$ ;
rank: 537
score: 99.17752511160714
patch: result = lval CaMeL Int >> >> >> >> >> & lval ;
rank: 537
score: 99.1702880859375
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> 0 ;
rank: 538
score: 99.28617640904018
patch: result = lval CaMeL Int >> rval ) >> rval CaMeL Int ;
rank: 538
score: 99.26997593470982
patch: result = lval CaMeL Int >> >> Math . rval CaMeL Int ;
rank: 538
score: 99.23740797776442
patch: return ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 538
score: 99.19820731026786
patch: result = result << rval CaMeL Int << >> rval CaMeL Int ;
rank: 538
score: 99.1774569424716
patch: result = lval CaMeL Int / >> >> rval ;
rank: 539
score: 99.28553059895833
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> rval 1 ;
rank: 539
score: 99.269873046875
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ; break ;
rank: 539
score: 99.2113037109375
patch: result = lval CaMeL Int & >> << >> rval CaMeL Int ;
rank: 539
score: 99.18723842075893
patch: result = lval CaMeL Int & lval >> & rval CaMeL Int ;
rank: 539
score: 99.17676653180804
patch: result = lval CaMeL Int < 0 ? lval CaMeL Int : ;
rank: 539
score: 99.14194899338942
patch: result = ( int ) rval CaMeL Int >> >> rval ;
rank: 540
score: 99.28970540364584
patch: result = lval CaMeL Int + n . get CaMeL Double ( ) ;
rank: 540
score: 99.21097237723214
patch: result = = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 540
score: 99.19756208147321
patch: result = n . new CaMeL Number ( result , result ) ;
rank: 540
score: 99.176513671875
patch: result = lval CaMeL Int * >> >> >> rval ;
rank: 541
score: 99.2851806640625
patch: result = 0 ; result = lval CaMeL Int - rval CaMeL Int ;
rank: 541
score: 99.2367431640625
patch: result = lval CaMeL Int == lval ? rval : rval CaMeL Int ;
rank: 541
score: 99.21071951729911
patch: result = lval CaMeL Int >> >> >> != rval CaMeL Int ;
rank: 541
score: 99.18709891183036
patch: result = lval CaMeL Int >> >> rval CaMeL Int : $NUMBER$ ;
rank: 541
score: 99.16922433035714
patch: result = lval CaMeL Int >> >> rval CaMeL Int >> right ;
rank: 542
score: 99.26890345982143
patch: result ; report CaMeL Code CaMeL Change ( ) ; return n ;
rank: 542
score: 99.23656412760417
patch: result = lval CaMeL Int >= rval CaMeL Int >> lval CaMeL Int ;
rank: 542
score: 99.21002197265625
patch: result = lval CaMeL Int & >> >> | rval CaMeL Int ;
rank: 542
score: 99.19681222098214
patch: result = n . new CaMeL Number ( result , left ) ;
rank: 542
score: 99.16824340820312
patch: result = lval CaMeL Int >> rval CaMeL Int ) ;
rank: 543
score: 99.28810221354166
patch: result = lval CaMeL Int << rval CaMeL Int & rval CaMeL Int ;
rank: 543
score: 99.28448893229167
patch: result = lval CaMeL Int >> >> rval ) ? rval CaMeL Int ;
rank: 543
score: 99.2360107421875
patch: return lval CaMeL Int >> lval CaMeL Int >> >> rval CaMeL Int ;
rank: 543
score: 99.20996965680804
patch: float result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 543
score: 99.18654959542411
patch: result = lval CaMeL Int >> >> rval CaMeL Int . lval ;
rank: 543
score: 99.1740966796875
patch: result = lval CaMeL Int [ 0 ] ;
rank: 543
score: 99.16746303013393
patch: result = lval CaMeL Int << >> rval CaMeL Int ; try {
rank: 543
score: 99.14109108664773
patch: result = new CaMeL Number >> rval CaMeL Int ;
rank: 544
score: 99.19651285807292
patch: n = lval CaMeL Int << >> rval CaMeL Int ;
rank: 544
score: 99.18537248883929
patch: result = lval CaMeL Int >> >> - >> lval CaMeL Int ;
rank: 544
score: 99.17362154447116
patch: result = new lval CaMeL Int >> & rval CaMeL Int ;
rank: 544
score: 99.1409912109375
patch: if ( ! ( rval CaMeL Int != rval ) ) {
rank: 545
score: 99.28415749289773
patch: result = rval CaMeL Int - rval CaMeL Int ;
rank: 545
score: 99.26781412760417
patch: result = lval CaMeL Int << ( Integer . MAX _ VALUE ) ;
rank: 545
score: 99.20920034555289
patch: result = lval CaMeL Int << >> << rval CaMeL Int ;
rank: 545
score: 99.18523297991071
patch: result = lval CaMeL Int >> >> - rval CaMeL Int ; ;
rank: 545
score: 99.17119891826923
patch: / * = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 545
score: 99.16733224051339
patch: result = lval CaMeL Int << rval CaMeL Int ; return lval ;
rank: 546
score: 99.28410121372768
patch: result = lval CaMeL Int >> + rval CaMeL Int ; break ;
rank: 546
score: 99.28361002604167
patch: result = rval CaMeL Int > rval CaMeL Int >> rval CaMeL Int ;
rank: 546
score: 99.23462785993304
patch: result = lval CaMeL Int >> >> rval CaMeL Int ? rval ;
rank: 546
score: 99.20873084435097
patch: result = lval CaMeL Int & >> -- rval CaMeL Int ;
rank: 546
score: 99.1830303485577
patch: result = lval CaMeL Int < >> >> rval CaMeL Int ;
rank: 546
score: 99.1710205078125
patch: result = lval CaMeL Int % rval CaMeL Int ;
rank: 546
score: 99.16654146634616
patch: here . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 546
score: 99.140380859375
patch: return result = lval CaMeL Int << rval CaMeL Int ;
rank: 547
score: 99.28338623046875
patch: result = lval CaMeL Int >> >> rval = rval CaMeL Int ;
rank: 547
score: 99.26776123046875
patch: result = lval : Node . new CaMeL Number ( result ) ;
rank: 547
score: 99.23447265625
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int >> lval ;
rank: 547
score: 99.20812116350446
patch: else result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 547
score: 99.1956787109375
patch: result = new CaMeL Number >> >> >> rval CaMeL Int ; break ;
rank: 547
score: 99.16991577148437
patch: result = lval CaMeL Int >> ^ rval ;
rank: 547
score: 99.16612025669643
patch: result = lval CaMeL Int >> >> rval CaMeL Int << result ;
rank: 547
score: 99.14032451923077
patch: AOM . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 548
score: 99.28330485026042
patch: result = rval CaMeL Int > >> rval CaMeL Int ;
rank: 548
score: 99.28243815104166
patch: result = lval CaMeL Int >> rval CaMeL Int ; result = n ;
rank: 548
score: 99.26734337439903
patch: result = lval : lval CaMeL Int << rval CaMeL Int ;
rank: 548
score: 99.23434244791666
patch: result = lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;
rank: 548
score: 99.20713297526042
patch: result = lval CaMeL Int >> >> >> >> -- ;
rank: 548
score: 99.1955078125
patch: result = n . get CaMeL Type ( ) + Node . LSH ;
rank: 548
score: 99.16988118489583
patch: result = lval CaMeL Int >> >> rval - 1 ;
rank: 548
score: 99.14023263113839
patch: result = ( int ) left . get CaMeL Double ( ) ;
rank: 549
score: 99.28309733072916
patch: result = lval CaMeL Int >> rval CaMeL Int == lval CaMeL Int ;
rank: 549
score: 99.2672119140625
patch: result = lval CaMeL Int >> : ( int ) lval CaMeL Int ;
rank: 549
score: 99.23423665364584
patch: return lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> ;
rank: 549
score: 99.19544474283855
patch: result = n . new CaMeL Number ( 0 ) ;
rank: 549
score: 99.16982014973958
patch: result = lval CaMeL Int & rval >> >> rval ;
rank: 549
score: 99.1400146484375
patch: return Node . new CaMeL Number ( new CaMeL Number ) ;
rank: 550
score: 99.28304036458333
patch: result = lval >> >> >> - rval CaMeL Int ;
rank: 550
score: 99.26693725585938
patch: result = lval CaMeL Int << ( rval CaMeL Int ;
rank: 550
score: 99.23398263113839
patch: } else { result = lval CaMeL Int >> rval CaMeL Int ;
rank: 550
score: 99.19530378069196
patch: result = lval ( n . get CaMeL Type ( ) ) ;
rank: 550
score: 99.18143717447917
patch: result = lval CaMeL Int >> : lval CaMeL Int ;
rank: 550
score: 99.16964956430289
patch: result = lval CaMeL Int & rval / rval CaMeL Int ;
rank: 550
score: 99.16489955357143
patch: result = ( double ) rval CaMeL Int << rval CaMeL Int ;
rank: 550
score: 99.13915143694196
patch: switch ( rval CaMeL Int ) { case Token . URSH :
rank: 551
score: 99.28203938802083
patch: result = lval CaMeL Int << ( rval << rval CaMeL Int ) ;
rank: 551
score: 99.23384602864583
patch: result = lval CaMeL Int >> lval CaMeL Int & rval CaMeL Int ;
rank: 551
score: 99.19492885044643
patch: try { n = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 551
score: 99.18063151041666
patch: result = ( result >> rval CaMeL Int - rval CaMeL Int ) ;
rank: 551
score: 99.16937255859375
patch: result = lval * lval CaMeL Int >> >> rval ;
rank: 551
score: 99.16443743024554
patch: result = new int << rval CaMeL Int >> rval CaMeL Int ;
rank: 551
score: 99.1389668782552
patch: Buffer result = lval CaMeL Int >> rval CaMeL Int ;
rank: 552
score: 99.27980143229166
patch: result = lval CaMeL Int << rval CaMeL Int ; n = n ;
rank: 552
score: 99.2659403483073
patch: result = Node . new CaMeL Name ( result ) ;
rank: 552
score: 99.2338115985577
patch: result = lval CaMeL Int == lval >> rval CaMeL Int ;
rank: 552
score: 99.2058837890625
patch: if ( result == 0 || lval CaMeL Int != rval CaMeL Int ;
rank: 552
score: 99.19335065569196
patch: result = lval CaMeL Int >> : rval CaMeL Int ; break ;
rank: 552
score: 99.16885141225961
patch: result = lval CaMeL Int < 0 ? lval : 0 ;
rank: 552
score: 99.16437639508929
patch: result = FRACTIONAL _ BITWISE _ OPERAND , lval CaMeL Int ;
rank: 552
score: 99.13841834435097
patch: Buffer result = Node . new CaMeL Number ( result ) ;
rank: 553
score: 99.28229166666667
patch: result = lval CaMeL Int , rval CaMeL Int : lval CaMeL Int ;
rank: 553
score: 99.23368013822116
patch: result = lval CaMeL Int & rval CaMeL Int >> $NUMBER$ ;
rank: 553
score: 99.20450265066964
patch: result = lval CaMeL Int >> >> | >> rval CaMeL Int ;
rank: 553
score: 99.18017578125
patch: result = ( result >> >> >> >> rval CaMeL Int ) ;
rank: 553
score: 99.16724650065105
patch: result = lval CaMeL Int >> ++ rval CaMeL Int ;
rank: 553
score: 99.16383579799107
patch: result = lval CaMeL Int >> rval CaMeL Int << >> $NUMBER$ ;
rank: 553
score: 99.13841145833334
patch: new CaMeL Number = rval CaMeL Int << rval CaMeL Int ; break ;
rank: 554
score: 99.28180338541667
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; = 1 ;
rank: 554
score: 99.27831159319196
patch: result = lval CaMeL Int $NUMBER$ >> >> >> rval CaMeL Int ;
rank: 554
score: 99.26254708426339
patch: result = try CaMeL Fold CaMeL Shift ( result , left ) ;
rank: 554
score: 99.23346819196429
patch: return ( int ) lval CaMeL Int >> >> rval CaMeL Int ;
rank: 554
score: 99.20435442243304
patch: result = lval CaMeL Int >> & >> & rval CaMeL Int ;
rank: 554
score: 99.18009440104167
patch: result = rval CaMeL Int & >> rval CaMeL Int ;
rank: 554
score: 99.16712443033855
patch: result = lval >> >> >> & rval CaMeL Int ;
rank: 554
score: 99.16334025065105
patch: result = lval CaMeL Int << * rval CaMeL Int ;
rank: 554
score: 99.13776104266827
patch: return lval CaMeL Int << >> >> >> rval CaMeL Int ;
rank: 555
score: 99.19178185096153
patch: long rval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 555
score: 99.16709391276042
patch: result = lval CaMeL Int * / rval CaMeL Int ;
rank: 556
score: 99.281103515625
patch: result = lval CaMeL Int >> >> >> 0 / rval CaMeL Int ;
rank: 556
score: 99.27693997896634
patch: result = lval CaMeL Int >> lval CaMeL Int ; break ;
rank: 556
score: 99.262255859375
patch: result = new Node ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 556
score: 99.23326009114584
patch: = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 556
score: 99.20386759440105
patch: result = lval CaMeL Int >> >> >> <= 1 ;
rank: 556
score: 99.19077711838942
patch: result = rval CaMeL Int >> >> rval CaMeL Int ; ;
rank: 556
score: 99.16693793402777
patch: if ( lval CaMeL Int != 0 )
rank: 556
score: 99.16250174386161
patch: result += ( int ) rval CaMeL Int >> rval CaMeL Int ;
rank: 556
score: 99.13719685872395
patch: result = rval CaMeL Int >> << rval CaMeL Int ;
rank: 557
score: 99.28034319196429
patch: result = lval CaMeL Int - rval CaMeL Int rval CaMeL Int ;
rank: 557
score: 99.17979329427084
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> >> lval ;
rank: 557
score: 99.16686072716347
patch: if ( ! lval CaMeL Int . equals ( lval ) )
rank: 557
score: 99.16177133413461
patch: result = lval CaMeL Int << rval CaMeL Int << $NUMBER$ ;
rank: 557
score: 99.13717886117789
patch: buf = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 558
score: 99.28030598958334
patch: result = rval CaMeL Int >> >> rval ) >> rval CaMeL Int ;
rank: 558
score: 99.23280686598558
patch: result = lval CaMeL Int >> rval CaMeL Int >> false ;
rank: 558
score: 99.20297037760416
patch: do { result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 558
score: 99.18985421316964
patch: String new CaMeL Number = n . get CaMeL Type ( ) ;
rank: 558
score: 99.17972819010417
patch: result = lval CaMeL Int >> >> ( 1 : rval CaMeL Int ;
rank: 558
score: 99.16579965444711
patch: result = lval CaMeL Int >> == rval CaMeL Int ? ;
rank: 558
score: 99.16169084821429
patch: result = lval CaMeL Int << rval CaMeL Int >> >> $NUMBER$ ;
rank: 558
score: 99.13662484975961
patch: result = lval CaMeL Int & rval CaMeL Int >> rval ;
rank: 559
score: 99.2764423076923
patch: Node result = Node . new CaMeL Number ( result ) ;
rank: 559
score: 99.2025858561198
patch: result = lval CaMeL Int >> >> >> > 1 ;
rank: 559
score: 99.17878069196429
patch: if ( lval CaMeL Int == rval CaMeL Int ; return result ;
rank: 559
score: 99.16502888997395
patch: double result = lval CaMeL Int & rval CaMeL Int ;
rank: 559
score: 99.16033466045673
patch: result += lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 559
score: 99.13654033954327
patch: result = lval CaMeL Int >> - >> rval CaMeL Int ;
rank: 560
score: 99.28019575639205
patch: result = rval CaMeL Int >> >> rval ) ;
rank: 560
score: 99.20254952566964
patch: Double result = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 560
score: 99.18895545372597
patch: n . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 560
score: 99.1647479717548
patch: result = lval CaMeL Int >> >> >> >> >= $NUMBER$ ;
rank: 560
score: 99.1364501953125
patch: result = lval CaMeL Int >> | ( int ) rval CaMeL Int ;
rank: 561
score: 99.27885219029018
patch: result = lval CaMeL Int >> >> rval CaMeL Int lval ) ;
rank: 561
score: 99.18865094866071
patch: result = Node . new CaMeL Number ( result , rval ) ;
rank: 561
score: 99.17849496694711
patch: result = lval CaMeL Int >> >> >> >> >> lval }
rank: 561
score: 99.16454139122597
patch: result = lval CaMeL Int > 0 ? 1 : 0 ;
rank: 561
score: 99.15931919642857
patch: result = lval CaMeL Int << >> rval CaMeL Int >> 1 ;
rank: 562
score: 99.27786959134616
patch: result = lval CaMeL Int >> 1 - rval CaMeL Int ;
rank: 562
score: 99.27457682291667
patch: tmp = Node . new CaMeL Number ( result ) ;
rank: 562
score: 99.25995744977679
patch: result = try CaMeL Fold CaMeL Shift ( result , result ) ;
rank: 562
score: 99.18850272042411
patch: result ; result = n . new CaMeL Number ( result ) ;
rank: 562
score: 99.17808948863636
patch: result = lval CaMeL Int >> >> lval 1 ;
rank: 562
score: 99.13624064127605
patch: base = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 563
score: 99.27757975260417
patch: result = 0 >> >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 563
score: 99.20108468191964
patch: result = lval CaMeL Int & rval CaMeL Int >> & 1 ;
rank: 564
score: 99.27242024739583
patch: result = lval CaMeL Int += rval CaMeL Int << rval CaMeL Int ;
rank: 564
score: 99.2003662109375
patch: if ( result == null || lval CaMeL Int != rval CaMeL Int ;
rank: 564
score: 99.16355543870192
patch: result = lval CaMeL Int >> >> rval CaMeL Int ] ;
rank: 564
score: 99.15653170072116
patch: result = lval CaMeL Int >> rval CaMeL Int << Number ;
rank: 564
score: 99.1354647549716
patch: c = lval CaMeL Int >> rval CaMeL Int ;
rank: 565
score: 99.25726787860577
patch: result ; double rval CaMeL Int = ( int ) rval ;
rank: 565
score: 99.22511643629808
patch: } result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 565
score: 99.1998291015625
patch: result = lval CaMeL Int >> >> >> >> >> > 1 ;
rank: 565
score: 99.1862080891927
patch: return lval CaMeL Int << >> >> rval CaMeL Int ;
rank: 565
score: 99.15594951923077
patch: result = new int >> ( int ) rval CaMeL Int ;
rank: 565
score: 99.1354092684659
patch: return node . new CaMeL Number ( result ) ;
rank: 566
score: 99.27679850260417
patch: result = lval CaMeL Int - rval CaMeL Int - lval CaMeL Int ;
rank: 566
score: 99.25694056919643
patch: result = Node . new CaMeL Number ( new CaMeL Number ) ;
rank: 566
score: 99.2245585123698
patch: result = lval CaMeL Int ++ >> rval CaMeL Int ;
rank: 566
score: 99.18586948939732
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; / ;
rank: 566
score: 99.17571551983173
patch: result = lval CaMeL Int & 1 - rval CaMeL Int ;
rank: 566
score: 99.15592134915866
patch: result = new int rval CaMeL Int >> rval CaMeL Int ;
rank: 567
score: 99.16254216974431
patch: result = lval ; result = lval CaMeL Int ;
rank: 567
score: 99.1549072265625
patch: if ( rval CaMeL Int != lval ) {
rank: 567
score: 99.1353290264423
patch: state = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 568
score: 99.25675455729167
patch: result = lval CaMeL Int << ( ( int ) lval CaMeL Int ;
rank: 568
score: 99.19916240985577
patch: * / result = lval CaMeL Int >> rval CaMeL Int ;
rank: 568
score: 99.17406354631696
patch: result = lval CaMeL Int >> >> >> >> >> lval ) ;
rank: 568
score: 99.15450439453124
patch: = lval CaMeL Int << rval CaMeL Int ;
rank: 568
score: 99.1348876953125
patch: result = lval CaMeL Int >> rval CaMeL Int ; break ; finally {
rank: 569
score: 99.26949869791666
patch: Node new CaMeL Number = Node . new CaMeL Number ( lval ) ;
rank: 569
score: 99.2567138671875
patch: result = try CaMeL Fold CaMeL Shift ( n , right ) ;
rank: 569
score: 99.2239520733173
patch: final String result = lval CaMeL Int >> rval CaMeL Int ;
rank: 569
score: 99.19739641462054
patch: result = lval CaMeL Int >> == 1 ? 1 : 0 ;
rank: 569
score: 99.173974609375
patch: result = lval CaMeL Int & >> 1 ;
rank: 569
score: 99.16105143229167
patch: m = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 569
score: 99.15226236979167
patch: result = lval CaMeL Int << rval CaMeL Int ; ;
rank: 569
score: 99.13461538461539
patch: float result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 570
score: 99.25638521634616
patch: result = left . get CaMeL Double ( ) << result ;
rank: 570
score: 99.22222430889423
patch: return ( int ) lval CaMeL Int >> rval CaMeL Int ;
rank: 570
score: 99.19701276506696
patch: result = lval CaMeL Int >> >> >> >> >> >> -- ;
rank: 570
score: 99.17388916015625
patch: result = lval CaMeL Int >> >> rval CaMeL Int * lval ;
rank: 570
score: 99.16092623197116
patch: * lval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 570
score: 99.13421075994319
patch: sb = lval CaMeL Int >> rval CaMeL Int ;
rank: 571
score: 99.27519880022321
patch: result = lval CaMeL Int > >> >> - rval CaMeL Int ;
rank: 571
score: 99.26670735677084
patch: result = lval CaMeL Int + left . get CaMeL Double ( ) ;
rank: 571
score: 99.25591169084821
patch: result = ( int ) n . get CaMeL Type ( ) ;
rank: 571
score: 99.1968242938702
patch: result = lval CaMeL Int >> >> -- lval CaMeL Int ;
rank: 571
score: 99.14986478365384
patch: result = lval CaMeL Int >> rval CaMeL Int ; System .
rank: 572
score: 99.27517465444711
patch: result = 1 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 572
score: 99.25536295572917
patch: result = new double ( n . get CaMeL Type ( ) ) ;
rank: 572
score: 99.21986607142857
patch: this . result = lval CaMeL Int >> rval CaMeL Int ; ;
rank: 572
score: 99.19636753627232
patch: result = lval CaMeL Int >> >> >> >> >> | rval ;
rank: 572
score: 99.15885416666667
patch: result = lval CaMeL Int << ~ rval CaMeL Int ;
rank: 572
score: 99.14982466264205
patch: result = new int ( rval CaMeL Int ) ;
rank: 572
score: 99.13248697916667
patch: value = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 573
score: 99.25457763671875
patch: result = Node . Node . new CaMeL Number ( result ) ;
rank: 573
score: 99.21905048076923
patch: result = lval CaMeL Int >> rval CaMeL Int >> true ;
rank: 573
score: 99.17335728236607
patch: result = lval CaMeL Int >> >> >> >> >> >> 0 ;
rank: 574
score: 99.253515625
patch: result = FRACTIONAL _ BITWISE _ OPERAND ,
rank: 574
score: 99.15713266225961
patch: result = lval * rval CaMeL Int >> rval CaMeL Int ;
rank: 574
score: 99.14809163411458
patch: result = lval CaMeL Int ] << rval CaMeL Int ;
rank: 574
score: 99.13143484933036
patch: res = lval CaMeL Int >> >> rval CaMeL Int ; break ;
rank: 575
score: 99.2533671061198
patch: result = lval CaMeL Int << ( lval CaMeL Int ;
rank: 575
score: 99.1937255859375
patch: result = lval CaMeL Int << >> >> rval CaMeL Int ; ;
rank: 575
score: 99.18252127511161
patch: Node new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;
rank: 575
score: 99.15699351917614
patch: result = lval CaMeL Int >> >> & 0 ;
rank: 575
score: 99.13104802911931
patch: buf = lval CaMeL Int << rval CaMeL Int ;
rank: 576
score: 99.2743408203125
patch: result = lval CaMeL Int > >> rval CaMeL Int rval CaMeL Int ;
rank: 576
score: 99.25241323617789
patch: result = lval CaMeL Int << Node . MIN _ VALUE ;
rank: 576
score: 99.1918475811298
patch: result = lval CaMeL Int >> >> >> >> <= 1 ;
rank: 576
score: 99.18197195870536
patch: result = Node . new CaMeL Number ( result ) ; } }
rank: 576
score: 99.15646362304688
patch: double result = lval CaMeL Int / rval CaMeL Int ;
rank: 576
score: 99.14500843394886
patch: if ( ! ( rval >= 0 ) ) {
rank: 577
score: 99.19183819110577
patch: result = lval CaMeL Int << >> -- rval CaMeL Int ;
rank: 577
score: 99.18187459309895
patch: result = lval CaMeL Int >> ? rval CaMeL Int ;
rank: 577
score: 99.1728515625
patch: result = lval CaMeL Int & >> lval CaMeL Int ;
rank: 577
score: 99.15505746694711
patch: double lval CaMeL Int = rval CaMeL Int >> >> rval ;
rank: 577
score: 99.130859375
patch: ret = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 578
score: 99.27381310096153
patch: result = lval CaMeL Int != >> >> rval CaMeL Int ;
rank: 578
score: 99.26406625600961
patch: result = lval CaMeL Int & Integer . MIN _ VALUE ;
rank: 578
score: 99.2509033203125
patch: Node try { result = Node . new CaMeL Number ( result ) ;
rank: 578
score: 99.21736966646634
patch: { result = lval CaMeL Int >> rval CaMeL Int ; }
rank: 578
score: 99.19148393110795
patch: result = lval CaMeL Int >> >> & rval ;
rank: 578
score: 99.18123953683036
patch: double lval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;
rank: 578
score: 99.17284138997395
patch: result = rval CaMeL Int >> >> lval CaMeL Int ;
rank: 578
score: 99.15457857572116
patch: * result = lval CaMeL Int / >> rval CaMeL Int ;
rank: 578
score: 99.14426676432292
patch: result = lval CaMeL Int 1 >> rval CaMeL Int ;
rank: 579
score: 99.2723388671875
patch: result = lval CaMeL Int >> rval CaMeL Int >> rval $NUMBER$ ;
rank: 579
score: 99.263623046875
patch: result = lval CaMeL Int >> ( rval << rval CaMeL Int ) ;
rank: 579
score: 99.25067138671875
patch: result = report CaMeL Code CaMeL Change ( $STRING$ ) ;
rank: 579
score: 99.21624755859375
patch: { result = lval CaMeL Int >> >> rval CaMeL Int ; }
rank: 579
score: 99.19097345525569
patch: result = lval CaMeL Int >> >> >= $NUMBER$ ;
rank: 579
score: 99.17214529854911
patch: try { result = lval CaMeL Int & >> rval CaMeL Int ;
rank: 579
score: 99.14404296875
patch: = lval CaMeL Int >> rval CaMeL Int ;
rank: 579
score: 99.1300518329327
patch: result = lval CaMeL Int & lval CaMeL Int >> rval ;
rank: 580
score: 99.27110072544643
patch: result = lval >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 580
score: 99.263427734375
patch: result = lval CaMeL Int != rval CaMeL Int << rval CaMeL Int ;
rank: 580
score: 99.25054376775569
patch: result = Node . get CaMeL Type ( ) ;
rank: 580
score: 99.1802978515625
patch: result = n . get CaMeL Double ( ) ; return n ;
rank: 580
score: 99.1719501201923
patch: m 1 = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 580
score: 99.15349786931819
patch: result = lval CaMeL Int | lval CaMeL Int ;
rank: 580
score: 99.14400540865384
patch: return ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 581
score: 99.2629903157552
patch: result = lval CaMeL Int >> + lval CaMeL Int ;
rank: 581
score: 99.21590750558036
patch: result = lval $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;
rank: 581
score: 99.17181865985577
patch: result result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 581
score: 99.1533954326923
patch: result = lval / rval CaMeL Int >> rval CaMeL Int ;
rank: 581
score: 99.14396158854167
patch: else result = lval CaMeL Int << rval CaMeL Int ;
rank: 582
score: 99.27030726841518
patch: result = lval CaMeL Int >> >> 1 / rval CaMeL Int ;
rank: 582
score: 99.26290690104166
patch: result = lval CaMeL Int + right . get CaMeL Double ( ) ;
rank: 582
score: 99.2154071514423
patch: result = lval CaMeL Int >> false >> rval CaMeL Int ;
rank: 582
score: 99.1903827373798
patch: result = lval CaMeL Int & ( rval - 1 ) ;
rank: 582
score: 99.17990548270089
patch: result = lval CaMeL Int << >> rval CaMeL Int ; } }
rank: 582
score: 99.17029680524554
patch: result = lval CaMeL Int >> >> lval : lval CaMeL Int ;
rank: 582
score: 99.14391150841347
patch: result = lval CaMeL Int >> rval CaMeL Int << 0 ;
rank: 582
score: 99.12810809795673
patch: return ( Node ) rval CaMeL Int >> rval CaMeL Int ;
rank: 583
score: 99.21532264122597
patch: result = lval CaMeL Int >> true >> rval CaMeL Int ;
rank: 583
score: 99.19027273995536
patch: result = lval CaMeL Int + rval CaMeL Int ; return result ;
rank: 583
score: 99.17982700892857
patch: result = n . new CaMeL Number ( result , null ) ;
rank: 583
score: 99.17015662560097
patch: result = lval CaMeL Int >> >> >> >> >> 0 ;
rank: 583
score: 99.1531231219952
patch: try result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 583
score: 99.14222208658855
patch: result = lval CaMeL Int 1 << rval CaMeL Int ;
rank: 583
score: 99.12807210286458
patch: return rval CaMeL Int << rval CaMeL Int ; break ;
rank: 584
score: 99.27021484375
patch: result = lval CaMeL Int >> >> >> rval - rval CaMeL Int ;
rank: 584
score: 99.2627685546875
patch: double new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 584
score: 99.2491924579327
patch: result = lval CaMeL Int >> ( lval CaMeL Int ) ;
rank: 584
score: 99.18993201622597
patch: result = = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 584
score: 99.15242919921874
patch: result = lval CaMeL Int >> >= 1 ;
rank: 584
score: 99.1398174579327
patch: result += lval CaMeL Int << >> >> rval CaMeL Int ;
rank: 584
score: 99.1280517578125
patch: result = lval CaMeL Int >> >> << rval CaMeL Int ; break ;
rank: 585
score: 99.27015904017857
patch: result = lval CaMeL Int >> >> rval CaMeL Int . length ;
rank: 585
score: 99.21453857421875
patch: result = lval CaMeL Int >> >> rval CaMeL Int >= 1 ;
rank: 585
score: 99.1897481282552
patch: result = lval CaMeL Int >> >> >> >> $NUMBER$ ;
rank: 585
score: 99.17946079799107
patch: error ( $STRING$ + right . get CaMeL Type ( ) ) ;
rank: 585
score: 99.15224984975961
patch: result = lval CaMeL Int / >> >> >> >> rval ;
rank: 585
score: 99.13897235576923
patch: result = new Node ( result , rval CaMeL Int ) ;
rank: 585
score: 99.12786865234375
patch: result = lval CaMeL Int ] >> rval CaMeL Int ;
rank: 586
score: 99.26988932291667
patch: result = lval CaMeL Int , rval CaMeL Int : rval CaMeL Int ;
rank: 586
score: 99.26126802884616
patch: double lval CaMeL Int = ( int ) rval CaMeL Int ;
rank: 586
score: 99.21410193810097
patch: result = lval CaMeL Int >> >> rval CaMeL Int - ;
rank: 586
score: 99.18973214285714
patch: result = lval CaMeL Int >> >> >> || rval CaMeL Int ;
rank: 586
score: 99.16891043526786
patch: lval CaMeL Int = lval CaMeL Int & >> rval CaMeL Int ;
rank: 586
score: 99.1521465594952
patch: int result = lval CaMeL Int / >> rval CaMeL Int ;
rank: 586
score: 99.13796762319711
patch: = ( int ) lval CaMeL Int << rval CaMeL Int ;
rank: 586
score: 99.12762920673077
patch: Double result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 587
score: 99.26976667131696
patch: result = lval CaMeL Int >> >> 0 / rval CaMeL Int ;
rank: 587
score: 99.2607666015625
patch: result = lval CaMeL Int >> >> >> lval CaMeL Int ; break ;
rank: 587
score: 99.21401541573661
patch: result = lval CaMeL Int >> >> rval CaMeL Int > 1 ;
rank: 587
score: 99.17908732096355
patch: result -= lval CaMeL Int >> >> rval CaMeL Int ;
rank: 587
score: 99.16878836495536
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; result ;
rank: 587
score: 99.13771565755208
patch: result = lval CaMeL Int << rval CaMeL Int ) ;
rank: 587
score: 99.12750244140625
patch: result = lval CaMeL Int >> >> ( rval ) ;
rank: 588
score: 99.26935686383929
patch: result = lval CaMeL Int >> rval ) - rval CaMeL Int ;
rank: 588
score: 99.2476806640625
patch: result = Node . new CaMeL Number ( result . next ) ;
rank: 588
score: 99.21397181919643
patch: result = lval CaMeL Int . length >> >> rval CaMeL Int ;
rank: 588
score: 99.17905099051339
patch: double new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;
rank: 588
score: 99.16854154146634
patch: result = lval CaMeL Int >> >> / lval CaMeL Int ;
rank: 588
score: 99.1274883563702
patch: { switch ( n . get CaMeL Type ( ) ) {
rank: 589
score: 99.26905168805804
patch: result = lval CaMeL Int >> >> rval , rval CaMeL Int ;
rank: 589
score: 99.16843087332589
patch: result = lval CaMeL Int >> & lval >> rval CaMeL Int ;
rank: 589
score: 99.14988014914773
patch: result = lval CaMeL Int * lval CaMeL Int ;
rank: 590
score: 99.26886858258929
patch: result = lval CaMeL Int - rval CaMeL Int >> >> 1 ;
rank: 590
score: 99.21124737079327
patch: result = lval CaMeL Int >= 0 >> rval CaMeL Int ;
rank: 590
score: 99.17851911272321
patch: result = n . new CaMeL Number ( result , 0 ) ;
rank: 590
score: 99.1493389423077
patch: result = lval CaMeL Int >> & ~ lval CaMeL Int ;
rank: 590
score: 99.1268780048077
patch: return ( Node ) rval CaMeL Int << rval CaMeL Int ;
rank: 591
score: 99.247314453125
patch: result = Node . new CaMeL Number ( ( int ) left ) ;
rank: 591
score: 99.20949009486607
patch: result = lval CaMeL Int == rval >> >> rval CaMeL Int ;
rank: 591
score: 99.18764085036058
patch: result = lval CaMeL Int & >> >> >> >> $NUMBER$ ;
rank: 591
score: 99.14871215820312
patch: * = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 591
score: 99.13578287760417
patch: result . = lval CaMeL Int << rval CaMeL Int ;
rank: 592
score: 99.25911458333333
patch: result = ( Node ) rval CaMeL Int >> >> rval CaMeL Int ;
rank: 592
score: 99.24658203125
patch: result = lval CaMeL Int >> ( ( int ) result ) ;
rank: 592
score: 99.18740505642361
patch: result = lval CaMeL Int >> >> ;
rank: 592
score: 99.16740199497768
patch: else { result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 592
score: 99.13527268629808
patch: result = lval CaMeL Int >> rval CaMeL Int << $STRING$ ;
rank: 592
score: 99.12605794270833
patch: long result = lval CaMeL Int << rval CaMeL Int ;
rank: 593
score: 99.26402064732143
patch: result = lval CaMeL Int >> >> rval CaMeL Int != 1 ;
rank: 593
score: 99.24624197823661
patch: result = report CaMeL Code CaMeL Change ( $STRING$ + n ) ;
rank: 593
score: 99.2087910970052
patch: throw new Runtime CaMeL Exception ( lval CaMeL Int ) ;
rank: 593
score: 99.18661733774039
patch: result = lval CaMeL Int & rval CaMeL Int >> >> ;
rank: 593
score: 99.17726643880208
patch: result = rval CaMeL Int >> : rval CaMeL Int ;
rank: 593
score: 99.14825439453125
patch: result = lval + lval CaMeL Int >> >> rval ;
rank: 593
score: 99.13407076322116
patch: . result = lval CaMeL Int << >> rval CaMeL Int ;
rank: 593
score: 99.12434895833333
patch: result = ( int ) rval CaMeL Int >> rval ;
rank: 594
score: 99.26384626116071
patch: result = lval CaMeL Int >> rval CaMeL Int - rval ) ;
rank: 594
score: 99.24612862723214
patch: result = lval CaMeL Int >> ( ( int ) rval ) ;
rank: 594
score: 99.18546549479167
patch: long result = lval CaMeL Int + rval CaMeL Int ;
rank: 594
score: 99.16623360770089
patch: result = lval CaMeL Int & >> - >> rval CaMeL Int ;
rank: 594
score: 99.12434895833333
patch: return rval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;
rank: 595
score: 99.2580057779948
patch: result = lval CaMeL Int << >> lval CaMeL Int ;
rank: 595
score: 99.1838848407452
patch: result = lval CaMeL Int >> & & rval CaMeL Int ;
rank: 595
score: 99.1770489032452
patch: println ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 595
score: 99.16487260298295
patch: if ( lval CaMeL Int & rval CaMeL Int ;
rank: 595
score: 99.14747971754808
patch: if ( lval CaMeL Int >> >> rval CaMeL Int ) {
rank: 595
score: 99.12425740559895
patch: if ( rval CaMeL Int != lval CaMeL Int ) {
rank: 596
score: 99.26308768136161
patch: result = lval CaMeL Int >> >> rval CaMeL Int rval $NUMBER$ ;
rank: 596
score: 99.2579833984375
patch: int lval CaMeL Int = ( int ) rval CaMeL Int ; break ;
rank: 596
score: 99.20595703125
patch: return result >> >> >> rval CaMeL Int ;
rank: 596
score: 99.18369704026442
patch: result = lval CaMeL Int >> >> >> >> > 0 ;
rank: 596
score: 99.17621721540179
patch: Node new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;
rank: 596
score: 99.1474609375
patch: result = lval CaMeL Int >> != rval CaMeL Int ;
rank: 596
score: 99.13106595552884
patch: result = lval CaMeL Int >> rval CaMeL Int >> break ;
rank: 597
score: 99.2420654296875
patch: result = lval CaMeL Int == ( int ) rval ;
rank: 597
score: 99.2056551846591
patch: result = rval CaMeL Int >> lval CaMeL Int ;
rank: 597
score: 99.17612868088942
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; {
rank: 597
score: 99.16300746372768
patch: result = lval CaMeL Int >> >> >> ( rval CaMeL Int ;
rank: 597
score: 99.14697265625
patch: result = lval * rval CaMeL Int / rval CaMeL Int ;
rank: 597
score: 99.12293497721355
patch: result = lval CaMeL Int - ( int ) rval ;
rank: 598
score: 99.2618877704327
patch: result = lval CaMeL Int == >> - rval CaMeL Int ;
rank: 598
score: 99.20542555588942
patch: return result >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 598
score: 99.14693196614583
patch: result = lval CaMeL Int . >> rval CaMeL Int ;
rank: 598
score: 99.1228778545673
patch: result = ~ lval CaMeL Int >> >> rval CaMeL Int ;
rank: 599
score: 99.26171003069196
patch: result = lval CaMeL Int > 1 >> >> rval CaMeL Int ;
rank: 599
score: 99.20480581430289
patch: result = lval CaMeL Int >> rval CaMeL Int >> lval ;
rank: 599
score: 99.18157489483173
patch: result = lval CaMeL Int == 0 ? 1 : 1 ;
rank: 599
score: 99.17521449497768
patch: result = Node . rval CaMeL Int >> >> rval CaMeL Int ;
rank: 599
score: 99.16043090820312
patch: left = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 599
score: 99.14691772460938
patch: result = lval / >> rval CaMeL Int ;
rank: 599
score: 99.1281026204427
patch: result = FRACTIONAL _ BITWISE _ OPERAND , right ;
rank: 599
score: 99.12276517427884
patch: return n . lval CaMeL Int >> >> rval CaMeL Int ;
rank: 600
score: 99.26153564453125
patch: result else result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 600
score: 99.25615234375
patch: result = lval CaMeL Int + n . get CaMeL Type ( ) ;
rank: 600
score: 99.2413330078125
patch: result = lval CaMeL Int >> : ( int ) rval ;
rank: 600
score: 99.18133075420673
patch: result = lval CaMeL Int == 1 ? 1 : 0 ;
rank: 600
score: 99.17517961774554
patch: sb . result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 600
score: 99.16004289899554
patch: result = lval CaMeL Int >> lval ( >> rval CaMeL Int ;
rank: 600
score: 99.1466064453125
patch: result = lval CaMeL Int . hash CaMeL Code ( ) ;
rank: 600
score: 99.12782639723558
patch: result = lval CaMeL Int << rval CaMeL Int >> right ;
rank: 601
score: 99.25984409877232
patch: result = lval CaMeL Int >> >> rval CaMeL Int rval null ;
rank: 601
score: 99.15987723214286
patch: result = lval CaMeL Int >> & ( 1 : 0 ) ;
rank: 601
score: 99.14545147235577
patch: result = lval ( lval CaMeL Int >> >> rval ) ;
rank: 601
score: 99.1224853515625
patch: if ( left . get CaMeL Type ( ) == Token . RSH )
rank: 602
score: 99.25777762276786
patch: result = lval CaMeL Int != 1 >> >> rval CaMeL Int ;
rank: 602
score: 99.20335036057692
patch: result = lval [ 0 ] >> >> rval CaMeL Int ;
rank: 602
score: 99.18018687855114
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 602
score: 99.15977986653645
patch: result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int ;
rank: 602
score: 99.14426832932692
patch: if ( lval CaMeL Int >> >> & rval CaMeL Int )
rank: 602
score: 99.12235201322116
patch: return lval CaMeL Int << rval CaMeL Int >> >> rval ;
rank: 603
score: 99.25723702566964
patch: result = 0 >> >> rval CaMeL Int - rval CaMeL Int ;
rank: 603
score: 99.15975516183036
patch: result = lval CaMeL Int >> rval CaMeL Int >> >> lval ;
rank: 603
score: 99.14413452148438
patch: result = lval CaMeL Int >> >> >> & $NUMBER$ ;
rank: 603
score: 99.12547889122597
patch: report ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 604
score: 99.25574669471153
patch: result = lval CaMeL Int >> >> >> 1 ; break ;
rank: 604
score: 99.23870380108173
patch: result = Node . new CaMeL Number ( result 1 ) ;
rank: 604
score: 99.1796162923177
patch: result = lval CaMeL Int & >> >> >> 1 ;
rank: 604
score: 99.17486572265625
patch: result = rval >> >> >> >> rval CaMeL Int ;
rank: 604
score: 99.14356578480114
patch: result = lval CaMeL Int >> >> ~ rval ;
rank: 604
score: 99.12176513671875
patch: return new Node . new CaMeL Number ( result ) ;
rank: 605
score: 99.17913263494319
patch: result = lval CaMeL Int >> >> >= 0 ;
rank: 605
score: 99.17463902064732
patch: result = n . new CaMeL Number ( new CaMeL Number ) ;
rank: 605
score: 99.14266967773438
patch: result = lval CaMeL Int >> >> == 1 ? ;
rank: 605
score: 99.12350698617789
patch: result = lval CaMeL Int << rval CaMeL Int ? rval ;
rank: 606
score: 99.25510951450893
patch: result = rval CaMeL Int == >> >> >> rval CaMeL Int ;
rank: 606
score: 99.17862642728366
patch: result = lval CaMeL Int & >> >= rval CaMeL Int ;
rank: 606
score: 99.17462627704327
patch: result = n . get CaMeL Type ( ) >> 1 ;
rank: 606
score: 99.14195760091145
patch: result = lval CaMeL Int / ~ rval CaMeL Int ;
rank: 606
score: 99.12141557173295
patch: value = rval CaMeL Int >> rval CaMeL Int ;
rank: 607
score: 99.2547607421875
patch: result = lval >> >> >> >> rval CaMeL Int ; break ;
rank: 607
score: 99.2536865234375
patch: List new CaMeL Number = Node . new CaMeL Number ( result ) ;
rank: 607
score: 99.17350551060268
patch: long new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;
rank: 607
score: 99.1572735126202
patch: int result = lval CaMeL Int & >> rval CaMeL Int ;
rank: 607
score: 99.14163912259616
patch: result = lval CaMeL Int >> >> >> >> == $NUMBER$ ;
rank: 607
score: 99.12327991832386
patch: result = new Node . Number ( result ) ;
rank: 607
score: 99.12136606069711
patch: result = left . get CaMeL Double ( ) >> rval ;
rank: 608
score: 99.25367838541666
patch: result = lval CaMeL Int >> rval CaMeL Int ; n = result ;
rank: 608
score: 99.15720621744792
patch: expr = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 608
score: 99.14131986177884
patch: result = lval CaMeL Int . get CaMeL Value ( ) ;
rank: 608
score: 99.12323467548077
patch: result = lval CaMeL Int << Token . MIN _ VALUE ;
rank: 608
score: 99.12118765024039
patch: return rval CaMeL Int >> << rval CaMeL Int ; break ;
rank: 609
score: 99.25334821428571
patch: result = 1 + lval CaMeL Int >> >> rval CaMeL Int ;
rank: 609
score: 99.2527099609375
patch: result = lval CaMeL Int + rval CaMeL Int << lval CaMeL Int ;
rank: 609
score: 99.2364501953125
patch: result = left . new CaMeL Number ( lval CaMeL Int ) ;
rank: 609
score: 99.20033482142857
patch: result = lval >> >> rval CaMeL Int >> lval CaMeL Int ;
rank: 609
score: 99.1765887920673
patch: result = lval CaMeL Int << >> | rval CaMeL Int ;
rank: 609
score: 99.17194475446429
patch: result = n . get CaMeL Type ( ) << >> 1 ;
rank: 609
score: 99.15619451349431
patch: result = lval CaMeL Int >> >> >> >> ;
rank: 609
score: 99.1412823016827
patch: result = lval CaMeL Int >> >> >> & >> rval ;
rank: 609
score: 99.12318929036458
patch: result = lval CaMeL Int >> >> MAX _ VALUE ;
rank: 609
score: 99.12096058238636
patch: result = lval CaMeL Int >> ( rval ) ;
rank: 610
score: 99.25310407366071
patch: result = lval CaMeL Int >> >> >> rval CaMeL Int ) ;
rank: 610
score: 99.25172776442308
patch: double result = Node . new CaMeL Number ( result ) ;
rank: 610
score: 99.20032610212054
patch: boolean lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;
rank: 610
score: 99.14119262695313
patch: result = lval CaMeL Int & 0 rval ;
rank: 610
score: 99.12303748497597
patch: result = lval CaMeL Int >> rval CaMeL Int + right ;
rank: 611
score: 99.17495492788461
patch: int result = lval CaMeL Int >> & rval CaMeL Int ;
rank: 611
score: 99.17135854867789
patch: result = new CaMeL Number ( result ) ; return n ;
rank: 611
score: 99.1407001201923
patch: result = lval CaMeL Int / >> == rval CaMeL Int ;
rank: 611
score: 99.12232384314903
patch: result = new Node ( rval CaMeL Int , result ) ;
rank: 611
score: 99.1206387606534
patch: pos = lval CaMeL Int >> rval CaMeL Int ;
rank: 612
score: 99.19893101283482
patch: result = lval CaMeL Int >> >> rval CaMeL Int / 1 ;
rank: 612
score: 99.15476481119792
patch: result = lval CaMeL Int >> - lval CaMeL Int ;
rank: 612
score: 99.13995830829327
patch: result = lval CaMeL Int >> >> >> >> & lval ;
rank: 612
score: 99.1221435546875
patch: if ( lval CaMeL Int != lval ) {
rank: 613
score: 99.23200017755681
patch: result = new CaMeL Number << rval CaMeL Int ;
rank: 613
score: 99.17081392728366
patch: result = n ; report CaMeL Code CaMeL Change ( ) ;
rank: 613
score: 99.13945978338069
patch: result = lval . long CaMeL Value ( ) ;
rank: 613
score: 99.1201923076923
patch: return lval CaMeL Int >> << >> >> rval CaMeL Int ;
rank: 614
score: 99.25240071614583
patch: result = - rval CaMeL Int >> rval CaMeL Int ;
rank: 614
score: 99.25123697916666
patch: int lval CaMeL Int = Node . new CaMeL Number ( result ) ;
rank: 614
score: 99.1734110514323
patch: result = lval CaMeL Int >> >> >> == 1 ;
rank: 614
score: 99.17071063701923
patch: long lval CaMeL Int = ( int ) lval CaMeL Int ;
rank: 614
score: 99.15394944411058
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; else
rank: 614
score: 99.13857797475961
patch: result = lval CaMeL Int >= rval ? lval CaMeL Int ;
rank: 614
score: 99.12112192007211
patch: result : result = lval CaMeL Int << rval CaMeL Int ;
rank: 614
score: 99.11997633713942
patch: result = right . get CaMeL Double ( ) << rval ;
rank: 615
score: 99.25078473772321
patch: result = lval CaMeL Int 1 >> >> >> rval CaMeL Int ;
rank: 615
score: 99.1383526141827
patch: result = lval * lval CaMeL Int / rval CaMeL Int ;
rank: 615
score: 99.1197979266827
patch: tmp = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 616
score: 99.25051443917411
patch: result = Node . new CaMeL Number ( result , count ) ;
rank: 616
score: 99.2305438701923
patch: result = left . get CaMeL Double ( ) << n ;
rank: 616
score: 99.19764200846355
patch: result = lval CaMeL Int -- >> rval CaMeL Int ;
rank: 616
score: 99.1694844563802
patch: result = result . new CaMeL Number ( result ) ;
rank: 616
score: 99.1382587139423
patch: result = lval CaMeL Int < 0 ? 0 : lval ;
rank: 616
score: 99.12101606889205
patch: = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 617
score: 99.25041852678571
patch: result = ( Node ) lval CaMeL Int >> rval CaMeL Int ;
rank: 617
score: 99.2503329190341
patch: result = rval CaMeL Int >> >> rval $NUMBER$ ;
rank: 617
score: 99.23001534598214
patch: result = Node . new CaMeL Number ( ( result ) ) ;
rank: 617
score: 99.19618733723958
patch: } result = lval CaMeL Int >> rval CaMeL Int ;
rank: 617
score: 99.17276000976562
patch: long result = lval CaMeL Int - rval CaMeL Int ;
rank: 617
score: 99.16929408482143
patch: result = Node . new CaMeL Number ( result - 0 ) ;
rank: 617
score: 99.15303861177884
patch: result = lval CaMeL Int & 1 - lval CaMeL Int ;
rank: 617
score: 99.12041766826923
patch: result = lval CaMeL Int << rval CaMeL Int >> result ;
rank: 617
score: 99.11920635516827
patch: return new CaMeL Number ( rval CaMeL Int != rval ) ;
rank: 618
score: 99.2502950032552
patch: result = 0 >> >> >> >> rval CaMeL Int ;
rank: 618
score: 99.1723163311298
patch: final int result = lval CaMeL Int >> rval CaMeL Int ;
rank: 618
score: 99.11895197088069
patch: type = lval CaMeL Int >> rval CaMeL Int ;
rank: 619
score: 99.24965994698661
patch: result = Math . rval CaMeL Int >> >> rval CaMeL Int ;
rank: 619
score: 99.24959019252232
patch: array . result = Node . new CaMeL Number ( result ) ;
rank: 619
score: 99.19319974459134
patch: this . result = lval CaMeL Int - rval CaMeL Int ;
rank: 619
score: 99.17176231971153
patch: result = lval CaMeL Int % >> >> rval CaMeL Int ;
rank: 619
score: 99.11846368963069
patch: result += rval CaMeL Int << rval CaMeL Int ;
rank: 619
score: 99.11836751302083
patch: tmp = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 620
score: 99.24818725585938
patch: result = lval CaMeL Int >> rval ) ;
rank: 620
score: 99.16827862079327
patch: result = result >> >> >> >> >> rval CaMeL Int ;
rank: 620
score: 99.15180315290179
patch: result = lval CaMeL Int >> & rval CaMeL Int . 1 ;
rank: 620
score: 99.13521321614583
patch: result = lval CaMeL Int ( rval CaMeL Int ) ;
rank: 620
score: 99.11841759314903
patch: result = lval CaMeL Int << rval CaMeL Int + right ;
rank: 620
score: 99.11707560221355
patch: args = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 621
score: 99.24953049879808
patch: result = lval CaMeL Int $NUMBER$ >> >> rval CaMeL Int ;
rank: 621
score: 99.24810321514423
patch: result = lval CaMeL Int >> rval CaMeL Int - 0 ;
rank: 621
score: 99.22812325613839
patch: result = lval CaMeL Int >> >> Math . MIN _ VALUE ;
rank: 621
score: 99.19071451822917
patch: result = lval CaMeL Int & rval CaMeL Int >> ;
rank: 621
score: 99.1707763671875
patch: result = lval CaMeL Int ? rval : lval CaMeL Int ;
rank: 621
score: 99.15154157366071
patch: result = lval CaMeL Int >> >> rval CaMeL Int / lval ;
rank: 621
score: 99.11813589242789
patch: result = lval CaMeL Int << rval CaMeL Int << Number ;
rank: 621
score: 99.11660766601562
patch: Type result = lval CaMeL Int >> rval CaMeL Int ;
rank: 622
score: 99.24821254185268
patch: result = Node . new CaMeL Number ( n , left ) ;
rank: 622
score: 99.24640764508929
patch: result = lval CaMeL Int >> >> 0 + rval CaMeL Int ;
rank: 622
score: 99.19041224888393
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; >> ;
rank: 622
score: 99.1704852764423
patch: result = lval CaMeL Int << >> >= rval CaMeL Int ;
rank: 622
score: 99.167236328125
patch: try { replace CaMeL Child ( n , new CaMeL Number ) ;
rank: 622
score: 99.15102132161458
patch: result = lval CaMeL Int >> lval lval CaMeL Int ;
rank: 622
score: 99.13297526041667
patch: result = lval CaMeL Int * ^ rval CaMeL Int ;
rank: 622
score: 99.11557241586539
patch: result = lval CaMeL Int & result >> rval CaMeL Int ;
rank: 623
score: 99.24636404854911
patch: result = 0 ; result = 0 >> >> rval CaMeL Int ;
rank: 623
score: 99.19035121372768
patch: result = rval >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 623
score: 99.16665213448661
patch: result = n . get CaMeL Type ( ) ; return n ;
rank: 623
score: 99.15101841517857
patch: result = lval CaMeL Int >> >> >> ? lval CaMeL Int ;
rank: 623
score: 99.13130326704545
patch: result = lval CaMeL Int ^ lval CaMeL Int ;
rank: 623
score: 99.11539306640626
patch: if ( rval CaMeL Int == rval ) {
rank: 624
score: 99.16576276506696
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; finally {
rank: 624
score: 99.15076622596153
patch: int value = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 624
score: 99.13092041015625
patch: result = lval CaMeL Int >> >> ~ >> rval ;
rank: 624
score: 99.11501057942708
patch: result = lval CaMeL Int >> rval ; return n ;
rank: 625
score: 99.24364217122395
patch: result = lval $NUMBER$ >> >> >> rval CaMeL Int ;
rank: 625
score: 99.22597092848558
patch: msg ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 625
score: 99.18801443917411
patch: result = lval 1 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 625
score: 99.15055338541667
patch: result = ( lval CaMeL Int & rval CaMeL Int ;
rank: 625
score: 99.13043891059027
patch: if ( lval CaMeL Int != rval )
rank: 625
score: 99.11551607572116
patch: result = lval << rval CaMeL Int >> rval CaMeL Int ;
rank: 625
score: 99.1139803799716
patch: result = lval CaMeL Int & ( rval ) ;
rank: 626
score: 99.24654715401786
patch: result = Node . new CaMeL Number ( left , result ) ;
rank: 626
score: 99.24298967633929
patch: result = rval CaMeL Int > >> >> >> rval CaMeL Int ;
rank: 626
score: 99.16510881696429
patch: result = lval CaMeL Int >> >> rval CaMeL Int ; ) {
rank: 626
score: 99.15020282451923
patch: if ( lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 626
score: 99.13018798828125
patch: result = lval CaMeL Int ( lval CaMeL Int ) ;
rank: 626
score: 99.11358173076923
patch: return new CaMeL Number ( rval CaMeL Int << rval ) ;
rank: 627
score: 99.24230018028847
patch: result = lval >> >> >> >> - rval CaMeL Int ;
rank: 627
score: 99.22368512834821
patch: Node new CaMeL Number = left . get CaMeL Type ( ) ;
rank: 627
score: 99.18750871930804
patch: result = Math . value CaMeL Of ( lval CaMeL Int ) ;
rank: 627
score: 99.14993990384616
patch: result = lval CaMeL Int >> rval CaMeL Int + result ;
rank: 627
score: 99.13014729817708
patch: if ( lval == Integer . MAX _ VALUE ) {
rank: 627
score: 99.11474609375
patch: result = lval CaMeL Int << rval CaMeL Int >> 0 ;
rank: 627
score: 99.11322490985577
patch: return new CaMeL Number ( rval CaMeL Int >> rval ) ;
rank: 628
score: 99.24545522836539
patch: result = lval CaMeL Int + Node . MIN _ VALUE ;
rank: 628
score: 99.22081647600446
patch: Node . result = Node . new CaMeL Number ( result ) ;
rank: 628
score: 99.18589430588942
patch: } else result = lval CaMeL Int >> rval CaMeL Int ;
rank: 628
score: 99.16450718470982
patch: result = new ( n . get CaMeL Type ( ) ) ;
rank: 628
score: 99.14982386997768
patch: if ( lval CaMeL Int >> >> >> >> rval CaMeL Int ;
rank: 628
score: 99.11436110276442
patch: result = lval CaMeL Int >> rval CaMeL Int >> Number ;
rank: 628
score: 99.1131591796875
patch: result = lval CaMeL Int & result ;
rank: 629
score: 99.24520169771634
patch: long rval CaMeL Int = ( int ) rval CaMeL Int ;
rank: 629
score: 99.24036661783855
patch: result = lval CaMeL Int >> >> >> rval $NUMBER$ ;
rank: 629
score: 99.18573869977679
patch: int lval CaMeL Int = lval CaMeL Int >> lval CaMeL Int ;
rank: 629
score: 99.1641337076823
patch: t = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 629
score: 99.14978966346153
patch: char result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 629
score: 99.12807210286458
patch: result = lval / lval CaMeL Int >> >> rval ;
rank: 629
score: 99.11424842247597
patch: = ( int ) rval CaMeL Int << rval CaMeL Int ;
rank: 630
score: 99.24031575520833
patch: result = rval CaMeL Int - >> rval CaMeL Int ;
rank: 630
score: 99.21983846028645
patch: double rval = lval CaMeL Int >> rval CaMeL Int ;
rank: 630
score: 99.1857022372159
patch: result = lval CaMeL Int > lval CaMeL Int ;
rank: 630
score: 99.16367750901442
patch: result = SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS ;
rank: 630
score: 99.14947040264423
patch: result = lval CaMeL Int != 1 ? lval CaMeL Int ;
rank: 630
score: 99.1277743252841
patch: return lval CaMeL Int / >> rval CaMeL Int ;
rank: 630
score: 99.11154409555289
patch: state = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 631
score: 99.23992919921875
patch: result = 1 >> >> rval CaMeL Int ;
rank: 631
score: 99.2186279296875
patch: return Node . new CaMeL Number ( ( int ) result ) ;
rank: 631
score: 99.14854079026442
patch: result = ( lval CaMeL Int & >> rval CaMeL Int ;
rank: 631
score: 99.11397611177884
patch: result = new int lval CaMeL Int << rval CaMeL Int ;
rank: 631
score: 99.1114971454327
patch: sequence . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 632
score: 99.23890032087054
patch: result = 0 - rval CaMeL Int >> >> rval CaMeL Int ;
rank: 632
score: 99.1628085049716
patch: result = result >> >> - rval CaMeL Int ;
rank: 632
score: 99.12560017903645
patch: result = lval CaMeL Int >> >> >> rval ; ;
rank: 632
score: 99.11336576021634
patch: result . = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 632
score: 99.11082106370192
patch: { result = Node . new CaMeL Number ( result ) ;
rank: 633
score: 99.24236591045673
patch: result = lval CaMeL Int + lval CaMeL Int ; break ;
rank: 633
score: 99.16579026442308
patch: result = lval CaMeL Int == 1 ? 0 : 0 ;
rank: 633
score: 99.14763532366071
patch: result = lval CaMeL Int >> >> lval : rval CaMeL Int ;
rank: 633
score: 99.12361653645833
patch: do { result = lval CaMeL Int >> >> rval ;
rank: 633
score: 99.11314978966347
patch: * / result = lval CaMeL Int << rval CaMeL Int ;
rank: 633
score: 99.10999552408855
patch: result = ( int ) rval >> rval CaMeL Int ;
rank: 634
score: 99.23814174107143
patch: result = lval CaMeL Int >> >> rval = lval CaMeL Int ;
rank: 634
score: 99.18453640407986
patch: result = lval CaMeL Int >> 0 ;
rank: 634
score: 99.16263521634616
patch: result = Node . new CaMeL Number ( result 0 ) ;
rank: 634
score: 99.12340198863636
patch: this = lval CaMeL Int >> rval CaMeL Int ;
rank: 634
score: 99.11285869891827
patch: result = FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 635
score: 99.21832744891827
patch: result = lval CaMeL Int << ( lval CaMeL Int ) ;
rank: 635
score: 99.18440464564732
patch: result = lval CaMeL Int >> rval CaMeL Int lval CaMeL Int ;
rank: 635
score: 99.16498357599431
patch: result = lval CaMeL Int >> >> & $NUMBER$ ;
rank: 635
score: 99.1459073153409
patch: result = ( result >> rval CaMeL Int ) ;
rank: 635
score: 99.12294514973958
patch: if ( lval CaMeL Int == >> rval CaMeL Int )
rank: 636
score: 99.24007161458333
patch: buf = Node . new CaMeL Number ( result ) ;
rank: 636
score: 99.2380840594952
patch: result = lval CaMeL Int >> >> >> >> rval $NUMBER$ ;
rank: 636
score: 99.18424166165866
patch: result = lval >> rval CaMeL Int >> lval CaMeL Int ;
rank: 636
score: 99.12124633789062
patch: result = lval 0 >> >> >> rval CaMeL Int ;
rank: 636
score: 99.1111172762784
patch: result = lval CaMeL Int : rval CaMeL Int ;
rank: 637
score: 99.23707071940105
patch: result = lval CaMeL Int >> >> >> rval ) ;
rank: 637
score: 99.2174541766827
patch: Node n = Node . new CaMeL Number ( result ) ;
rank: 637
score: 99.18238321940105
patch: return ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 637
score: 99.1620342548077
patch: result = lval CaMeL Int == rval ? 1 : 0 ;
rank: 637
score: 99.14474722055289
patch: lval = lval CaMeL Int >> >> - rval CaMeL Int ;
rank: 637
score: 99.11988661024306
patch: result = lval ? lval : lval ;
rank: 637
score: 99.1103985126202
patch: result = lval CaMeL Int << Number >> rval CaMeL Int ;
rank: 637
score: 99.1090596516927
patch: b = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 638
score: 99.23976353236607
patch: result = lval CaMeL Int : ( ( int ) rval ) ;
rank: 638
score: 99.23703438895089
patch: result = lval CaMeL Int > >> 1 - rval CaMeL Int ;
rank: 638
score: 99.2173360188802
patch: result = lval CaMeL Int : ( int ) rval ;
rank: 638
score: 99.1822040264423
patch: super . result = lval CaMeL Int >> rval CaMeL Int ;
rank: 638
score: 99.16104830228366
patch: result = lval CaMeL Int >> -- >> rval CaMeL Int ;
rank: 638
score: 99.14470966045673
patch: if = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 638
score: 99.11832004123264
patch: result = lval CaMeL Int / rval ;
rank: 638
score: 99.1100604717548
patch: result = lval CaMeL Int >> rval CaMeL Int + left ;
rank: 638
score: 99.10868013822116
patch: s result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 639
score: 99.23687744140625
patch: result = lval CaMeL Int == 1 >> >> rval CaMeL Int ;
rank: 639
score: 99.21649169921875
patch: double error ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 639
score: 99.1808330829327
patch: result = lval CaMeL Int == 0 >> rval CaMeL Int ;
rank: 639
score: 99.11708577473958
patch: result = lval 1 >> >> >> rval CaMeL Int ;
rank: 639
score: 99.10951585036058
patch: result = new int - ( int ) rval CaMeL Int ;
rank: 640
score: 99.23686872209821
patch: result = lval CaMeL Int >> >> 1 >> rval CaMeL Int ;
rank: 640
score: 99.21625225360577
patch: result = lval : left . get CaMeL Double ( ) ;
rank: 640
score: 99.18076735276442
patch: result = lval CaMeL Int >> rval CaMeL Int & $NUMBER$ ;
rank: 640
score: 99.15992149939903
patch: result = lval CaMeL Int & >> >> >> >> 1 ;
rank: 640
score: 99.1444091796875
patch: result = lval CaMeL Int >> >> >> >> >> ;
rank: 640
score: 99.1164883700284
patch: return lval CaMeL Int >> & rval CaMeL Int ;
rank: 640
score: 99.1085713704427
patch: result . = lval CaMeL Int >> rval CaMeL Int ;
rank: 641
score: 99.21567946213942
patch: result = Node . lval CaMeL Int << lval CaMeL Int ;
rank: 641
score: 99.15926688058036
patch: error ( $STRING$ + left . get CaMeL Type ( ) ) ;
rank: 641
score: 99.115478515625
patch: this = lval CaMeL Int >> & rval CaMeL Int ;
rank: 642
score: 99.18033541165866
patch: result = $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;
rank: 642
score: 99.1581280048077
patch: result = lval CaMeL Int ? >> >> rval CaMeL Int ;
rank: 642
score: 99.11508178710938
patch: result = lval CaMeL Int >= >> >> >> rval ;
rank: 643
score: 99.23595319475446
patch: result = lval = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 643
score: 99.21512276785714
patch: result = Node . lval CaMeL Int << ( int ) rval ;
rank: 643
score: 99.18013509114583
patch: return result >> rval CaMeL Int >> rval CaMeL Int ;
rank: 643
score: 99.15764825994319
patch: result = lval CaMeL Int >> >> < $NUMBER$ ;
rank: 643
score: 99.11459350585938
patch: result = lval CaMeL Int << ^ rval CaMeL Int ;
rank: 643
score: 99.1079571063702
patch: result = lval CaMeL Int >> rval << rval CaMeL Int ;
rank: 644
score: 99.23541729266827
patch: result = lval CaMeL Int > >> - rval CaMeL Int ;
rank: 644
score: 99.17852313701923
patch: result = lval CaMeL Int & >> rval CaMeL Int >> ;
rank: 644
score: 99.15756460336539
patch: result = lval CaMeL Int == rval ? 0 : 0 ;
rank: 644
score: 99.14395845853366
patch: int end = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 644
score: 99.10769418569711
patch: Boolean result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 644
score: 99.1068115234375
patch: result = lval CaMeL Int >> 1 << rval CaMeL Int ;
rank: 645
score: 99.21482496995192
patch: Node new CaMeL Number = ( ( int ) result ) ;
rank: 645
score: 99.11431274414062
patch: result = lval CaMeL Int >> & 0 ;
rank: 645
score: 99.1071026141827
patch: val = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 645
score: 99.1040771484375
patch: result = new int << rval CaMeL Int ;
rank: 646
score: 99.23430524553571
patch: result = lval CaMeL Int >> >> >> >> 1 ; break ;
rank: 646
score: 99.1781757061298
patch: return lval CaMeL Int >> >> rval CaMeL Int >> 1 ;
rank: 646
score: 99.15537516276042
patch: long result = lval CaMeL Int > rval CaMeL Int ;
rank: 646
score: 99.14254995492789
patch: result = lval CaMeL Int & 1 >> rval CaMeL Int ;
rank: 646
score: 99.11412217881944
patch: if ( lval CaMeL Int == rval )
rank: 646
score: 99.10704627403847
patch: result = lval CaMeL Int + rval CaMeL Int >> rval ;
rank: 647
score: 99.23476736886161
patch: result = lval CaMeL Int >> >> rval == rval CaMeL Int ;
rank: 647
score: 99.17624918619792
patch: result = lval [ 0 ] >> rval CaMeL Int ;
rank: 647
score: 99.1546630859375
patch: result = lval CaMeL Int 1 >> >> rval CaMeL Int ;
rank: 647
score: 99.15370686848958
patch: result = result << >> >> >> rval CaMeL Int ;
rank: 647
score: 99.11365763346355
patch: this . lval = lval CaMeL Int >> >> rval ;
rank: 647
score: 99.10698993389423
patch: try { result = rval CaMeL Int >> rval CaMeL Int ;
rank: 647
score: 99.10158284505208
patch: result = lval CaMeL Int << / rval CaMeL Int ;
rank: 648
score: 99.15462239583333
patch: result = lval CaMeL Int >> >> >> rval 1 ;
rank: 648
score: 99.14076585036058
patch: int count = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 648
score: 99.1134541829427
patch: if ( lval CaMeL Int >> >> rval CaMeL Int )
rank: 648
score: 99.10648600260417
patch: byte result = lval CaMeL Int << rval CaMeL Int ;
rank: 648
score: 99.10129616477273
patch: result = new Node ( n , result ) ;
rank: 649
score: 99.23183969350961
patch: result ; return Node . new CaMeL Number ( result ) ;
rank: 649
score: 99.15449662642045
patch: result = lval CaMeL Int >> >> > $NUMBER$ ;
rank: 649
score: 99.1529032389323
patch: result = new CaMeL Number ( lval CaMeL Int ) ;
rank: 649
score: 99.14012732872597
patch: result = lval CaMeL Int < 1 : lval CaMeL Int ;
rank: 649
score: 99.11316935221355
patch: this = lval CaMeL Int / >> rval CaMeL Int ;
rank: 649
score: 99.10609788161058
patch: result = lval CaMeL Int >> * >> rval CaMeL Int ;
rank: 650
score: 99.23330252511161
patch: result = 1 >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 650
score: 99.21277965198864
patch: result = n . get CaMeL Value ( ) ;
rank: 650
score: 99.1727764423077
patch: result = rval CaMeL Int >> >> rval CaMeL Int >> ;
rank: 650
score: 99.15256911057692
patch: n = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 650
score: 99.1398456280048
patch: result = lval CaMeL Int rval >> >> rval CaMeL Int ;
rank: 650
score: 99.11250813802083
patch: result = lval CaMeL Int > - rval CaMeL Int ;
rank: 650
score: 99.10590069110577
patch: return ( Node . new CaMeL Number ( result ) ) ;
rank: 650
score: 99.09534801136364
patch: result = new Node ( rval CaMeL Int ) ;
rank: 651
score: 99.21250563401442
patch: result = n . get CaMeL Double ( ) << result ;
rank: 651
score: 99.17166137695312
patch: result = lval CaMeL Int >> rval CaMeL Int - ;
rank: 651
score: 99.15242826021634
patch: result = rval >> rval CaMeL Int >> rval CaMeL Int ;
rank: 651
score: 99.1121317545573
patch: result = lval - lval CaMeL Int >> >> rval ;
rank: 651
score: 99.10586313100961
patch: Token result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 651
score: 99.0940829190341
patch: here = lval CaMeL Int << rval CaMeL Int ;
rank: 652
score: 99.21161358173077
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , null ) ;
rank: 652
score: 99.17147122896634
patch: result = lval CaMeL Int == rval >> rval CaMeL Int ;
rank: 652
score: 99.15162242542614
patch: result = lval CaMeL Int & >> >> 1 ;
rank: 652
score: 99.11181640625
patch: result = lval CaMeL Int >> >> rval / rval ;
rank: 652
score: 99.10540301983173
patch: long result = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 653
score: 99.15158315805289
patch: result = lval CaMeL Int & >> | rval CaMeL Int ;
rank: 653
score: 99.15060659555289
patch: return new CaMeL Number >> >> >> >> rval CaMeL Int ;
rank: 653
score: 99.13741048177083
patch: type = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 653
score: 99.11052911931819
patch: result = lval ? lval CaMeL Int : lval ;
rank: 653
score: 99.10513070913461
patch: result = lval CaMeL Int > rval CaMeL Int ; break ;
rank: 653
score: 99.08840942382812
patch: here = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 654
score: 99.1515362079327
patch: result = lval CaMeL Int / >> << rval CaMeL Int ;
rank: 654
score: 99.15052286783855
patch: result = n . get CaMeL Type ( ) ) ;
rank: 654
score: 99.13675631009616
patch: result = ( lval CaMeL Int >> rval CaMeL Int ) ;
rank: 654
score: 99.10867309570312
patch: result = lval CaMeL Int / >> >> & rval ;
rank: 654
score: 99.08786349826389
patch: result = lval CaMeL Int << $NUMBER$ ;
rank: 655
score: 99.23076520647321
patch: result = lval CaMeL Int >> rval CaMeL Int - >> 1 ;
rank: 655
score: 99.22742571149554
patch: result = lval CaMeL Int >> >> >> >> rval ; break ;
rank: 655
score: 99.14886944110577
patch: result = lval CaMeL Int << rval << rval CaMeL Int ;
rank: 655
score: 99.1366475423177
patch: z = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 655
score: 99.10463303786058
patch: res = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 656
score: 99.23032924107143
patch: result = rval CaMeL Int >> >> rval CaMeL Int . 1 ;
rank: 656
score: 99.22733561197917
patch: n = Node . new CaMeL Number ( result ) ;
rank: 656
score: 99.21058872767857
patch: result = lval CaMeL Int - ( int ) lval CaMeL Int ;
rank: 656
score: 99.16726684570312
patch: result = lval CaMeL Int >> lval CaMeL Int >> ;
rank: 656
score: 99.15064415564903
patch: result = lval CaMeL Int >> >> >> >> != 0 ;
rank: 656
score: 99.13651216947116
patch: result = lval CaMeL Int >> rval CaMeL Int . 0 ;
rank: 656
score: 99.1078592936198
patch: result = lval CaMeL Int - >> >> >> rval ;
rank: 656
score: 99.10459547776442
patch: Offset result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 657
score: 99.2098858173077
patch: result ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 657
score: 99.16685994466145
patch: result = lval CaMeL Int >> rval CaMeL Int 1 ;
rank: 657
score: 99.1504618326823
patch: result = lval CaMeL Int >> >> & - 1 ;
rank: 657
score: 99.14830433238636
patch: long lval CaMeL Int = ( int ) rval ;
rank: 657
score: 99.10760498046875
patch: if ( lval > Integer . MAX _ VALUE ) {
rank: 658
score: 99.2301494891827
patch: result = rval CaMeL Int > >> >> rval CaMeL Int ;
rank: 658
score: 99.226806640625
patch: c = Node . new CaMeL Number ( result ) ;
rank: 658
score: 99.20891462053571
patch: return n . get CaMeL Double ( ) >> rval CaMeL Int ;
rank: 658
score: 99.10758463541667
patch: try { result = lval CaMeL Int >> >> rval ;
rank: 658
score: 99.10430438701923
patch: result = lval CaMeL Int >> | ( int ) rval ;
rank: 659
score: 99.22945149739583
patch: result = $STRING$ >> >> >> >> rval CaMeL Int ;
rank: 659
score: 99.20654296875
patch: result = left . new CaMeL Number ( n ) ;
rank: 659
score: 99.16624098557692
patch: result = lval CaMeL Int >> $NUMBER$ >> lval CaMeL Int ;
rank: 659
score: 99.13469989483173
patch: result = lval CaMeL Int >> lval - lval CaMeL Int ;
rank: 659
score: 99.10755411783855
patch: result = lval CaMeL Int >> >> & >> rval ;
rank: 659
score: 99.10426682692308
patch: return Node . new CaMeL Number ( result ) ; } }
rank: 659
score: 99.08061079545455
patch: here = lval CaMeL Int >> rval CaMeL Int ;
rank: 660
score: 99.2287930575284
patch: result = lval >> >> - rval CaMeL Int ;
rank: 660
score: 99.16290752704327
patch: return 0 >> >> rval CaMeL Int >> rval CaMeL Int ;
rank: 660
score: 99.14942345252403
patch: result = lval CaMeL Int ? rval : rval CaMeL Int ;
rank: 660
score: 99.10352501502403
patch: val = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 661
score: 99.20411095252403
patch: result = new CaMeL Number >> ( rval CaMeL Int ) ;
rank: 661
score: 99.16256713867188
patch: result = rval CaMeL Int >> rval CaMeL Int >> ;
rank: 661
score: 99.14857835036058
patch: result = lval CaMeL Int < rval ? 1 : 0 ;
rank: 661
score: 99.14306640625
patch: result = lval CaMeL Int >> >> 0 ; break ;
rank: 661
score: 99.13374837239583
patch: if ( lval CaMeL Int >> >> rval CaMeL Int ;
rank: 661
score: 99.10329182942708
patch: p = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 661
score: 99.07630504261364
patch: result = rval CaMeL Int << lval CaMeL Int ;
rank: 662
score: 99.10238037109374
patch: return n ; case Token . URSH :
rank: 662
score: 99.07628377278645
patch: ; result = lval CaMeL Int << rval CaMeL Int ;
rank: 663
score: 99.22730431189903
patch: result = lval CaMeL Int >> rval - rval CaMeL Int ;
rank: 663
score: 99.16074782151442
patch: result = lval CaMeL Int > lval >> rval CaMeL Int ;
rank: 663
score: 99.14791165865384
patch: result = lval CaMeL Int >> >> && lval CaMeL Int ;
rank: 663
score: 99.14173380533855
patch: result = lval CaMeL Int << + rval CaMeL Int ;
rank: 663
score: 99.1048583984375
patch: . = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 663
score: 99.0755615234375
patch: result = lval CaMeL Int << ( int ) lval ;
rank: 664
score: 99.13181715745192
patch: result = lval CaMeL Int > 1 ? lval CaMeL Int ;
rank: 664
score: 99.10195090553977
patch: return Node . new CaMeL Number ( rval ) ;
rank: 664
score: 99.07339477539062
patch: result = new CaMeL Number ( result , result ) ;
rank: 665
score: 99.22361537388393
patch: result = Node . new CaMeL Number ( lval , result ) ;
rank: 665
score: 99.15963979867789
patch: result = lval CaMeL Int > rval >> rval CaMeL Int ;
rank: 665
score: 99.14639282226562
patch: long result = lval CaMeL Int / rval CaMeL Int ;
rank: 665
score: 99.13161996694711
patch: if result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 665
score: 99.1034823330966
patch: this = lval CaMeL Int & rval CaMeL Int ;
rank: 665
score: 99.10186212713069
patch: result = rval CaMeL Int & rval CaMeL Int ;
rank: 666
score: 99.2262451171875
patch: result = rval CaMeL Int >> >> 1 ;
rank: 666
score: 99.20017311789773
patch: Node new CaMeL Number = ( int ) rval ;
rank: 666
score: 99.10344848632812
patch: result = lval CaMeL Int >> >> ] ;
rank: 666
score: 99.10089111328125
patch: { result = rval CaMeL Int >> rval CaMeL Int ;
rank: 666
score: 99.07187906901042
patch: new CaMeL Number = ( int ) rval CaMeL Int ;
rank: 667
score: 99.22623116629464
patch: result = lval CaMeL Int >> >> rval CaMeL Int == 1 ;
rank: 667
score: 99.22292073567708
patch: result = lval CaMeL Int >> ( rval CaMeL Int ;
rank: 667
score: 99.19926234654018
patch: result = lval CaMeL Int : ( int ) lval CaMeL Int ;
rank: 667
score: 99.1593768780048
patch: return 0 >> rval CaMeL Int >> >> rval CaMeL Int ;
rank: 667
score: 99.14603881835937
patch: result = lval CaMeL Int >> >> -- ;
rank: 667
score: 99.1310565655048
patch: result = lval CaMeL Int >> >> lval lval CaMeL Int ;
rank: 667
score: 99.10326131184895
patch: result = Double . value CaMeL Of ( lval ) ;
rank: 667
score: 99.1006610576923
patch: result = ~ rval CaMeL Int >> >> rval CaMeL Int ;
rank: 667
score: 99.07146606445312
patch: result += ( int ) rval CaMeL Int ;
rank: 668
score: 99.22612653459821
patch: result = 1 + rval CaMeL Int >> >> rval CaMeL Int ;
rank: 668
score: 99.19840864701705
patch: result = lval CaMeL Int << ( rval ) ;
rank: 668
score: 99.15831580528847
patch: result = lval CaMeL Int > rval CaMeL Int >> 1 ;
rank: 668
score: 99.13868204752605
patch: result = result >> >> >> : rval CaMeL Int ;
rank: 668
score: 99.13082181490384
patch: result = lval CaMeL Int & 0 - rval CaMeL Int ;
rank: 668
score: 99.10316975911458
patch: result = lval * / >> >> rval CaMeL Int ;
rank: 668
score: 99.10025728665866
patch: res = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 668
score: 99.07097710503473
patch: result = lval CaMeL Int >> result ;
rank: 669
score: 99.1025899251302
patch: result = lval / >> >> >> rval CaMeL Int ;
rank: 669
score: 99.07071940104167
patch: add ( n . get CaMeL Type ( ) ) ;
rank: 670
score: 99.22525728665866
patch: result = rval CaMeL Int == >> >> rval CaMeL Int ;
rank: 670
score: 99.22157505580357
patch: result = Node . new CaMeL Number ( lval , left ) ;
rank: 670
score: 99.19760366586539
patch: result = Node . new CaMeL Number ( result $NUMBER$ ) ;
rank: 670
score: 99.15724487304688
patch: return lval CaMeL Int >> lval CaMeL Int ;
rank: 670
score: 99.13861083984375
patch: result = lval CaMeL Int << << rval CaMeL Int ;
rank: 670
score: 99.13060584435097
patch: result = ( lval CaMeL Int >> >> rval CaMeL Int ;
rank: 670
score: 99.0992098721591
patch: args = lval CaMeL Int >> rval CaMeL Int ;
rank: 671
score: 99.22510704627403
patch: result = lval CaMeL Int >> >> rval ) - 1 ;
rank: 671
score: 99.22123209635417
patch: result = Node . new CaMeL Number ( count ) ;
rank: 671
score: 99.15604341947116
patch: result = lval CaMeL Int >= 1 >> rval CaMeL Int ;
rank: 671
score: 99.1299579326923
patch: result = ( result >> >> rval CaMeL Int 1 ) ;
rank: 671
score: 99.07018025716145
patch: result = FRACTIONAL _ BITWISE _ OPERAND , left ;
rank: 672
score: 99.2233417217548
patch: result = lval CaMeL Int >> rval CaMeL Int rval null ;
rank: 672
score: 99.19559420072116
patch: result = true ; report CaMeL Code CaMeL Change ( ) ;
rank: 672
score: 99.14110218394886
patch: result = lval CaMeL Int >> & 0 result ;
rank: 672
score: 99.098876953125
patch: result = lval CaMeL Int | rval CaMeL Int >> rval ;
rank: 672
score: 99.068359375
patch: result = lval CaMeL Int << MAX _ VALUE ;
rank: 673
score: 99.22322591145833
patch: result = lval CaMeL Int >> 1 rval CaMeL Int ;
rank: 673
score: 99.19472092848558
patch: result result = Node . new CaMeL Number ( result ) ;
rank: 673
score: 99.13792067307692
patch: result = left . new CaMeL Number ( result ) ; ;
rank: 673
score: 99.12972005208333
patch: if ( lval CaMeL Int == >> rval CaMeL Int ;
rank: 673
score: 99.09881591796875
patch: result = lval CaMeL Int >> < rval CaMeL Int ;
rank: 673
score: 99.06374104817708
patch: result = lval CaMeL Int << right ;
rank: 674
score: 99.22310093470982
patch: result = lval CaMeL Int >> >> rval CaMeL Int * 1 ;
rank: 674
score: 99.22035569411058
patch: result = lval CaMeL Int << >> >> lval CaMeL Int ;
rank: 674
score: 99.194580078125
patch: result = Node . get CaMeL Type ( result ) ;
rank: 674
score: 99.15506685697116
patch: result = 0 >> lval CaMeL Int >> rval CaMeL Int ;
rank: 674
score: 99.13770470252403
patch: result = n . new CaMeL Number << lval CaMeL Int ;
rank: 674
score: 99.0970458984375
patch: arg = lval CaMeL Int >> rval CaMeL Int ; break ;
rank: 674
score: 99.06337483723958
patch: result = Token . new CaMeL Number ( result ) ;
rank: 675
score: 99.22301307091347
patch: result = lval CaMeL Int != 1 >> rval CaMeL Int ;
rank: 675
score: 99.15501912434895
patch: result = lval CaMeL Int >> rval CaMeL Int ++ ;
rank: 675
score: 99.0975341796875
patch: result = lval CaMeL Int & >> >> & rval ;
rank: 675
score: 99.09677956321023
patch: p = lval CaMeL Int >> rval CaMeL Int ;
rank: 675
score: 99.06325276692708
patch: result += rval CaMeL Int >> >> rval CaMeL Int ;
rank: 676
score: 99.2218526204427
patch: if = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 676
score: 99.096435546875
patch: result = lval * >> rval CaMeL Int ;
rank: 676
score: 99.0621337890625
patch: result = lval >> >> rval CaMeL Int ; break ;
rank: 677
score: 99.22037179129464
patch: result = lval CaMeL Int >> >> rval - lval CaMeL Int ;
rank: 677
score: 99.13844992897727
patch: result = lval CaMeL Int & >> >> rval ;
rank: 677
score: 99.13596598307292
patch: result = Node . new CaMeL Number ( index ) ;
rank: 677
score: 99.1282450358073
patch: char = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 677
score: 99.09623209635417
patch: result = lval CaMeL Int >> >> == 0 ? ;
rank: 677
score: 99.09549967447917
patch: Double result = lval CaMeL Int >> rval CaMeL Int ;
rank: 677
score: 99.06196732954545
patch: lval = lval CaMeL Int << rval CaMeL Int ;
rank: 678
score: 99.21841866629464
patch: result = Node . new CaMeL Number ( result , value ) ;
rank: 678
score: 99.19292743389423
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , false ) ;
rank: 678
score: 99.1373623934659
patch: result = lval CaMeL Int & & - 1 ;
rank: 678
score: 99.0951397235577
patch: result = left . get CaMeL Double ( ) << rval ;
rank: 678
score: 99.09446207682292
patch: result = lval CaMeL Int < / rval CaMeL Int ;
rank: 678
score: 99.0614013671875
patch: result = new long ( rval CaMeL Int ) ;
rank: 679
score: 99.21951729910714
patch: result = rval CaMeL Int >> rval CaMeL Int >> >> 1 ;
rank: 679
score: 99.1926778157552
patch: result = try CaMeL Fold CaMeL Shift ( n ) ;
rank: 679
score: 99.15329214242789
patch: result = lval CaMeL Int >> count >> rval CaMeL Int ;
rank: 679
score: 99.13524451622597
patch: result = left . get CaMeL Type ( ) << 1 ;
rank: 679
score: 99.13519841974431
patch: result = lval CaMeL Int >> >> > 0 ;
rank: 679
score: 99.12752591646634
patch: Node result = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 679
score: 99.09477095170455
patch: result = lval CaMeL Int != rval CaMeL Int ;
rank: 679
score: 99.09393920898438
patch: result = lval 0 >> rval CaMeL Int ;
rank: 680
score: 99.2167499248798
patch: result else result = lval CaMeL Int >> rval CaMeL Int ;
rank: 680
score: 99.19125600961539
patch: result = false ; report CaMeL Code CaMeL Change ( ) ;
rank: 680
score: 99.13456217447917
patch: int result = lval CaMeL Int & rval CaMeL Int ;
rank: 680
score: 99.12701416015625
patch: id = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 680
score: 99.09190877278645
patch: if ( lval == Integer . MIN _ VALUE ) {
rank: 680
score: 99.05987548828125
patch: result = lval CaMeL Int << >> $NUMBER$ ;
rank: 681
score: 99.19070199819711
patch: result = left . get CaMeL Double ( ) >> n ;
rank: 681
score: 99.0940410907452
patch: b = lval CaMeL Int << rval CaMeL Int ; break ;
rank: 681
score: 99.09150390625
patch: if ( lval CaMeL Int == rval ) {
rank: 682
score: 99.134130859375
patch: if ( result == 0 ) return n ;
rank: 682
score: 99.13294474283855
patch: result = rval . new CaMeL Number ( result ) ;
rank: 682
score: 99.12615497295673
patch: result = lval CaMeL Int & >> - lval CaMeL Int ;
rank: 682
score: 99.093994140625
patch: result = lval CaMeL Int ) >> rval CaMeL Int ;
rank: 682
score: 99.091064453125
patch: result = lval ? lval ? lval : lval ;
rank: 683
score: 99.15163010817308
patch: result = lval CaMeL Int >> result >> rval CaMeL Int ;
rank: 683
score: 99.13327026367188
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 683
score: 99.1327880859375
patch: result = lval CaMeL Int << >> 0 ;
rank: 683
score: 99.12611083984375
patch: result = lval CaMeL Int >> >> lval }
rank: 683
score: 99.09100341796875
patch: result = lval CaMeL Int >> ^ lval CaMeL Int ;
rank: 684
score: 99.2163594563802
patch: result += Node . new CaMeL Number ( result ) ;
rank: 684
score: 99.21327903053977
patch: if = lval CaMeL Int >> rval CaMeL Int ;
rank: 684
score: 99.13304646809895
patch: result = lval CaMeL Int >> >> >> != 1 ;
rank: 684
score: 99.1324932391827
patch: result ( lval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 684
score: 99.1253995028409
patch: result = lval CaMeL Int : lval CaMeL Int ;
rank: 684
score: 99.0904541015625
patch: result = lval ;
rank: 684
score: 99.05264282226562
patch: result = lval CaMeL Int << Token . URSH ;
rank: 685
score: 99.21268717447917
patch: lval = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 685
score: 99.18874887319711
patch: result = new CaMeL Number ( ( int ) result ) ;
rank: 685
score: 99.15087890625
patch: result = lval CaMeL Int >= rval CaMeL Int >> 1 ;
rank: 685
score: 99.13179524739583
patch: result = lval CaMeL Int & >> >> >> $NUMBER$ ;
rank: 685
score: 99.12408916766827
patch: result = rval CaMeL Int >> >> - lval CaMeL Int ;
rank: 685
score: 99.09266246448864
patch: tmp = lval CaMeL Int << rval CaMeL Int ;
rank: 685
score: 99.09000651041667
patch: result = lval CaMeL Int / | rval CaMeL Int ;
rank: 685
score: 99.05234596946023
patch: result = lval CaMeL Int >> >> rval CaMeL Int
rank: 686
score: 99.14989217122395
patch: result = = lval CaMeL Int >> rval CaMeL Int ;
rank: 686
score: 99.13095092773438
patch: throw new Runtime CaMeL Exception ( $STRING$ + n ) ;
rank: 686
score: 99.08966064453125
patch: double lval = lval CaMeL Int >> rval CaMeL Int ;
rank: 687
score: 99.18826998197116
patch: result = lval CaMeL Int >> - ( int ) rval ;
rank: 687
score: 99.12954711914062
patch: result = n . new CaMeL Number ( n ) ;
rank: 687
score: 99.12285907451923
patch: result = lval CaMeL Int >> & >> lval CaMeL Int ;
rank: 687
score: 99.09182739257812
patch: b = lval CaMeL Int << >> rval CaMeL Int ;
rank: 687
score: 99.08962180397727
patch: result = lval CaMeL Int ? lval : lval ;
rank: 687
score: 99.05164591471355
patch: result = lval CaMeL Int << ++ rval CaMeL Int ;
rank: 688
score: 99.2101338704427
patch: result = lval CaMeL Int : >> rval CaMeL Int ;
rank: 688
score: 99.12831467848558
patch: result = null ; report CaMeL Code CaMeL Change ( ) ;
rank: 688
score: 99.12664794921875
patch: result = lval CaMeL Int & 1 ;
rank: 688
score: 99.1228496844952
patch: result = lval CaMeL Int >> rval CaMeL Int + 1 ;
rank: 688
score: 99.09140249399039
patch: result = lval CaMeL Int >> rval CaMeL Int ; * /
rank: 688
score: 99.08906693892045
patch: result = lval CaMeL Int / >> rval ; ;
rank: 688
score: 99.0508145419034
patch: result += rval CaMeL Int >> rval CaMeL Int ;
rank: 689
score: 99.14839993990384
patch: result = lval >> lval CaMeL Int >> rval CaMeL Int ;
rank: 689
score: 99.1275165264423
patch: result = new Assertion CaMeL Error ( $STRING$ + n ) ;
rank: 689
score: 99.12276517427884
patch: result = lval CaMeL Int >> >> lval CaMeL Int ; ;
rank: 689
score: 99.0911395733173
patch: retval = lval CaMeL Int << rval CaMeL Int ; break ;
rank: 690
score: 99.20780123197116
patch: result = lval ) >> >> >> >> rval CaMeL Int ;
rank: 690
score: 99.14717923677884
patch: result = lval + rval CaMeL Int >> rval CaMeL Int ;
rank: 690
score: 99.12416585286458
patch: result = lval CaMeL Int >> >> & 0 result ;
rank: 690
score: 99.05020141601562
patch: result out = lval CaMeL Int << rval CaMeL Int ;
rank: 691
score: 99.21347280649039
patch: double rval CaMeL Int = ( int ) rval CaMeL Int ;
rank: 691
score: 99.14584585336539
patch: result = lval CaMeL Int >> >> lval CaMeL Int ; }
rank: 691
score: 99.09049166165866
patch: result = lval CaMeL Int >> rval CaMeL Int ; false ;
rank: 691
score: 99.08796830610795
patch: double lval = lval CaMeL Int >> >> rval ;
rank: 691
score: 99.0498046875
patch: result += rval CaMeL Int << >> rval CaMeL Int ;
rank: 692
score: 99.21319580078125
patch: result = lval CaMeL Int << >> >> >> lval CaMeL Int ;
rank: 692
score: 99.1848614032452
patch: result = left . get CaMeL Double ( ) >> result ;
rank: 692
score: 99.12293497721355
patch: result = lval CaMeL Int >> >> >> >= 0 ;
rank: 692
score: 99.09015362079327
patch: result = lval CaMeL Int - rval CaMeL Int >> rval ;
rank: 692
score: 99.08742065429688
patch: result = lval CaMeL Int >> ~ rval ;
rank: 692
score: 99.0459696451823
patch: r = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 693
score: 99.12503051757812
patch: rval = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 693
score: 99.12045522836539
patch: result = lval CaMeL Int & >> >> lval CaMeL Int ;
rank: 693
score: 99.08970133463542
patch: return lval CaMeL Int << >> << rval CaMeL Int ;
rank: 693
score: 99.08460582386364
patch: result = lval CaMeL Int >> >> >> & ;
rank: 693
score: 99.04578653971355
patch: result ; if ( rval CaMeL Int != rval ) {
rank: 694
score: 99.18335899939903
patch: Node left = Node . new CaMeL Number ( result ) ;
rank: 694
score: 99.14442952473958
patch: return = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 694
score: 99.12501017252605
patch: result = rval CaMeL Int >> - rval CaMeL Int ;
rank: 694
score: 99.12151544744319
patch: throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 694
score: 99.08909254807692
patch: result = right . get CaMeL Double ( ) ; break ;
rank: 694
score: 99.08110961914062
patch: result = lval CaMeL Int >> >= rval ;
rank: 695
score: 99.20441143329327
patch: result = lval CaMeL Int > 1 >> rval CaMeL Int ;
rank: 695
score: 99.1441650390625
patch: result = lval CaMeL Int >> rval CaMeL Int - $NUMBER$ ;
rank: 695
score: 99.11978149414062
patch: result = ( result >> >> >> rval CaMeL Int ;
rank: 695
score: 99.08865356445312
patch: float result = lval CaMeL Int >> rval CaMeL Int ;
rank: 695
score: 99.07806396484375
patch: result = lval CaMeL Int >> & lval ;
rank: 695
score: 99.04322509765625
patch: result = lval CaMeL Int >> rval CaMeL Int
rank: 696
score: 99.14407113882211
patch: result = lval CaMeL Int != 0 >> rval CaMeL Int ;
rank: 696
score: 99.11973063151042
patch: location = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 696
score: 99.11956787109375
patch: return n . to CaMeL String ( ) ;
rank: 696
score: 99.08814493815105
patch: inst = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 696
score: 99.07773659446023
patch: if ( lval CaMeL Int != lval CaMeL Int )
rank: 696
score: 99.04201253255208
patch: result = lval CaMeL Int >> ( int ) rval ;
rank: 697
score: 99.21086774553571
patch: result = lval CaMeL Int + rval CaMeL Int ; return n ;
rank: 697
score: 99.14375443892045
patch: result = lval CaMeL Int >> >> lval $NUMBER$ ;
rank: 697
score: 99.12400465745192
patch: result = n . get CaMeL Type ( ) << rval ;
rank: 697
score: 99.08800159801136
patch: long rval CaMeL Int = ( int ) rval ;
rank: 697
score: 99.07727728949652
patch: result = lval - lval CaMeL Int ;
rank: 697
score: 99.04082697088069
patch: result = lval CaMeL Int >> MAX _ VALUE ;
rank: 698
score: 99.17964993990384
patch: int rval CaMeL Int = ( int ) lval CaMeL Int ;
rank: 698
score: 99.14358520507812
patch: result = lval CaMeL Int rval >> rval CaMeL Int ;
rank: 698
score: 99.1239901455966
patch: n = lval CaMeL Int << rval CaMeL Int ;
rank: 698
score: 99.08800159801136
patch: result = lval CaMeL Int << rval ; break ;
rank: 698
score: 99.07334206321023
patch: result = lval CaMeL Int >> & ~ rval ;
rank: 699
score: 99.2032001201923
patch: result = lval CaMeL Int - rval CaMeL Int >> 1 ;
rank: 699
score: 99.11853966346153
patch: result = lval CaMeL Int >> rval CaMeL Int : 1 ;
rank: 699
score: 99.11592610677083
patch: result = lval CaMeL Int & 0 x $NUMBER$ f ;
rank: 699
score: 99.0875577059659
patch: array = lval CaMeL Int >> rval CaMeL Int ;
rank: 699
score: 99.0731201171875
patch: result = lval CaMeL Int >> & rval ; ;
rank: 699
score: 99.0394795735677
patch: result = lval CaMeL Int << >> MAX _ VALUE ;
rank: 700
score: 99.17876727764423
patch: result = lval CaMeL Int >> & ( int ) rval ;
rank: 700
score: 99.14298502604167
patch: result = lval CaMeL Int >> rval CaMeL Int -- ;
rank: 700
score: 99.1236102764423
patch: result = ) Node . new CaMeL Number ( result ) ;
rank: 700
score: 99.08754475911458
patch: result = node . new CaMeL Number ( result ) ;
rank: 700
score: 99.03943888346355
patch: result = lval CaMeL Int >> ( int ) lval ;
rank: 701
score: 99.20840018136161
patch: result ; n = Node . new CaMeL Number ( result ) ;
rank: 701
score: 99.14223904079861
patch: this . result = lval CaMeL Int ;
rank: 701
score: 99.12347881610577
patch: result = lval ; report CaMeL Code CaMeL Change ( ) ;
rank: 701
score: 99.11814186789773
patch: result = lval CaMeL Int >> >> - $NUMBER$ ;
rank: 701
score: 99.08707682291667
patch: retval = Node . new CaMeL Number ( result ) ;
rank: 701
score: 99.03889973958333
patch: result out = lval CaMeL Int >> rval CaMeL Int ;
rank: 702
score: 99.11800130208333
patch: item = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 702
score: 99.11481267755681
patch: result = lval CaMeL Int & >> >= 1 ;
rank: 702
score: 99.0869140625
patch: array = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 702
score: 99.06748046875
patch: result = lval CaMeL Int >> >> options ;
rank: 703
score: 99.1390380859375
patch: result = lval CaMeL Int >= rval >> rval CaMeL Int ;
rank: 703
score: 99.11380004882812
patch: result = ( int ) lval CaMeL Int ;
rank: 703
score: 99.0673828125
patch: if ( lval CaMeL Int != rval CaMeL Int ;
rank: 703
score: 99.03852982954545
patch: r = lval CaMeL Int << rval CaMeL Int ;
rank: 704
score: 99.17816631610577
patch: Node new CaMeL Number = ( int ) lval CaMeL Int ;
rank: 704
score: 99.13751775568181
patch: return result >> >> >> >> rval CaMeL Int ;
rank: 704
score: 99.12099045973558
patch: result = new CaMeL Number ( ( int ) rval ) ;
rank: 704
score: 99.113037109375
patch: result = lval CaMeL Int >> >> >> count ;
rank: 704
score: 99.08397420247395
patch: return rval CaMeL Int >> rval CaMeL Int ; break ;
rank: 704
score: 99.06690562855114
patch: result = lval CaMeL Int ; break ; default :
rank: 704
score: 99.0380859375
patch: result = new Assertion CaMeL Error ( result ) ;
rank: 705
score: 99.20695277622768
patch: result = ( Node ) rval CaMeL Int >> rval CaMeL Int ;
rank: 705
score: 99.13731892903645
patch: if ( lval CaMeL Int == rval CaMeL Int ) ;
rank: 705
score: 99.12096228966347
patch: result = left . new CaMeL Number >> rval CaMeL Int ;
rank: 705
score: 99.11778846153847
patch: result = lval CaMeL Int < 1 - rval CaMeL Int ;
rank: 705
score: 99.06672807173295
patch: double lval CaMeL Int = ( int ) lval ;
rank: 705
score: 99.03645463423295
patch: if ( rval CaMeL Int != rval CaMeL Int )
rank: 706
score: 99.17630709134616
patch: result = lval CaMeL Int << ( rval >> rval ) ;
rank: 706
score: 99.11728140024039
patch: return lval CaMeL Int >> >> >> >> lval CaMeL Int ;
rank: 706
score: 99.1099520596591
patch: result = lval CaMeL Int >> & >> rval ;
rank: 706
score: 99.06416459517045
patch: result = lval . int CaMeL Value ( ) ;
rank: 706
score: 99.03535600142045
patch: result = lval CaMeL Int << n . result ;
rank: 707
score: 99.12033315805289
patch: result = lval CaMeL Int << >> * rval CaMeL Int ;
rank: 707
score: 99.11659592848558
patch: result = lval CaMeL Int >> >> ? lval CaMeL Int ;
rank: 707
score: 99.10987345377605
patch: result = lval CaMeL Int >> >> >> < 1 ;
rank: 707
score: 99.06379838423295
patch: result = lval CaMeL Int ? lval : 0 ;
rank: 707
score: 99.03484552556819
patch: if ( ! ( lval >= 0 ) ) {
rank: 708
score: 99.192724609375
patch: result = $NUMBER$ >> >> rval CaMeL Int ;
rank: 708
score: 99.13441975911458
patch: return lval CaMeL Int >> >> rval CaMeL Int >> ;
rank: 708
score: 99.11984487680289
patch: result = new CaMeL Number >> >> - rval CaMeL Int ;
rank: 708
score: 99.11643629807692
patch: result = lval CaMeL Int >> rval CaMeL Int ; result ;
rank: 708
score: 99.08174438476563
patch: return ( rval CaMeL Int != rval ) ;
rank: 708
score: 99.06312144886364
patch: result = lval CaMeL Int >> >> >= rval ;
rank: 709
score: 99.20540364583333
patch: s = Node . new CaMeL Number ( result ) ;
rank: 709
score: 99.13355509440105
patch: Object result = lval CaMeL Int >> rval CaMeL Int ;
rank: 709
score: 99.11590106670673
patch: i = lval CaMeL Int >> >> >> rval CaMeL Int ;
rank: 709
score: 99.07979329427083
patch: retval = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 709
score: 99.06306596235795
patch: result = lval CaMeL Int >> >> ^ rval ;
rank: 710
score: 99.20540073939732
patch: result = Node . new CaMeL Number ( result + result ) ;
rank: 710
score: 99.19085223858173
patch: result = lval CaMeL Int >> lval CaMeL Int >> 1 ;
rank: 710
score: 99.1316426595052
patch: result = lval CaMeL Int >> lval CaMeL Int ; }
rank: 710
score: 99.1195819561298
patch: result = lval CaMeL Int >> rval CaMeL Int ; } }
rank: 710
score: 99.07963423295455
patch: { result = lval CaMeL Int >> >> rval ;
rank: 710
score: 99.06287730823864
patch: result = lval CaMeL Int >> == rval ? ;
rank: 710
score: 99.02516867897727
patch: result = lval CaMeL Int >> 1 ; break ;
rank: 711
score: 99.19080528846153
patch: result = lval CaMeL Int >> >> rval ( 0 ) ;
rank: 711
score: 99.1743915264423
patch: result = Node . rval CaMeL Int >> rval CaMeL Int ;
rank: 711
score: 99.13071017795139
patch: result = lval CaMeL Int >> false ;
rank: 711
score: 99.11470170454545
patch: result = lval CaMeL Int >> >> >> length ;
rank: 711
score: 99.1085713704427
patch: int result = lval CaMeL Int + rval CaMeL Int ;
rank: 711
score: 99.06240012428977
patch: result = lval CaMeL Int >> >> == rval ;
rank: 711
score: 99.024755859375
patch: result = lval CaMeL Int << rval CaMeL Int
rank: 712
score: 99.1287129720052
patch: result = >> rval CaMeL Int >> rval CaMeL Int ;
rank: 712
score: 99.10795454545455
patch: result = lval CaMeL Int >> >> != 1 ;
rank: 712
score: 99.07958984375
patch: return n . report CaMeL Code CaMeL Change ( ) ;
rank: 712
score: 99.024658203125
patch: r = lval CaMeL Int >> rval CaMeL Int ;
rank: 713
score: 99.18964092548077
patch: result = lval CaMeL Int >> 0 * rval CaMeL Int ;
rank: 713
score: 99.10781860351562
patch: result = lval CaMeL Int & >> >> >= 1 ;
rank: 713
score: 99.07942708333333
patch: buf = rval CaMeL Int >> >> rval CaMeL Int ;
rank: 713
score: 99.05999200994319
patch: if ( lval CaMeL Int >> >> == 1 )
rank: 714
score: 99.11302771935097
patch: this . result = lval CaMeL Int >> >> >> 1 ;
rank: 714
score: 99.10771040482955
patch: result = lval CaMeL Int >> >> >> -- ;
rank: 714
score: 99.07838948567708
patch: String result = lval CaMeL Int << rval CaMeL Int ;
rank: 714
score: 99.05804443359375
patch: this = lval CaMeL Int >> >> rval ;
rank: 714
score: 99.02351684570313
patch: if ( rval CaMeL Int != 0 ) {
rank: 715
score: 99.12550862630208
patch: return ( int ) lval >> >> rval CaMeL Int ;
rank: 715
score: 99.07820638020833
patch: node = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 715
score: 99.05748401988636
patch: result = lval CaMeL Int ? 0 : 0 ;
rank: 715
score: 99.02223899147727
patch: = lval CaMeL Int << >> rval CaMeL Int ;
rank: 716
score: 99.1892559344952
patch: result = lval CaMeL Int - 1 >> rval CaMeL Int ;
rank: 716
score: 99.12379964192708
patch: if ( lval CaMeL Int == lval CaMeL Int ) ;
rank: 716
score: 99.1047607421875
patch: result = lval CaMeL Int >> >> ++ ;
rank: 716
score: 99.07623845880681
patch: val = lval CaMeL Int << rval CaMeL Int ;
rank: 716
score: 99.05528428819444
patch: result = lval CaMeL Int + lval ;
rank: 717
score: 99.19739879261364
patch: result = lval CaMeL Int << >> >> 1 ;
rank: 717
score: 99.18776292067308
patch: result = rval CaMeL Int >> rval CaMeL Int >> 1 ;
rank: 717
score: 99.12156168619792
patch: result = lval CaMeL Int >> lval CaMeL Int ; ;
rank: 717
score: 99.11196067116477
patch: if ( rval CaMeL Int == rval CaMeL Int ;
rank: 717
score: 99.10467529296875
patch: result = lval CaMeL Int >> >> >> >= $NUMBER$ ;
rank: 717
score: 99.07619222005208
patch: return lval CaMeL Int >> >> / rval CaMeL Int ;
rank: 717
score: 99.05515358664773
patch: result = lval >> >> & rval CaMeL Int ;
rank: 718
score: 99.19724684495192
patch: result = Node . new CaMeL Number << rval CaMeL Int ;
rank: 718
score: 99.1865946451823
patch: result = Math . 0 >> >> rval CaMeL Int ;
rank: 718
score: 99.12154134114583
patch: boolean result = lval CaMeL Int >> rval CaMeL Int ;
rank: 718
score: 99.11173189603366
patch: result = lval CaMeL Int >> >> ( lval CaMeL Int ;
rank: 718
score: 99.10879516601562
patch: result = result >> >> >> - rval CaMeL Int ;
rank: 718
score: 99.10396321614583
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 718
score: 99.05424360795455
patch: result = lval > 0 ? lval : lval ;
rank: 718
score: 99.01868785511364
patch: result = new int ) >> rval CaMeL Int ;
rank: 719
score: 99.19657076322116
patch: long result = Node . new CaMeL Number ( result ) ;
rank: 719
score: 99.1856689453125
patch: result = lval CaMeL Int >> rval CaMeL Int lval ) ;
rank: 719
score: 99.169677734375
patch: return left . new CaMeL Number ( result ) ;
rank: 719
score: 99.07609049479167
patch: int result = lval CaMeL Int << rval CaMeL Int ;
rank: 719
score: 99.04918823242187
patch: result = lval CaMeL Int ( rval ) ;
rank: 720
score: 99.1853535970052
patch: result = rval CaMeL Int == >> rval CaMeL Int ;
rank: 720
score: 99.1671475497159
patch: result = lval CaMeL Int << ( 0 ) ;
rank: 720
score: 99.12071736653645
patch: throw new Runtime CaMeL Exception ( lval , $STRING$ ) ;
rank: 720
score: 99.1109110514323
patch: target = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 720
score: 99.10768636067708
patch: result = rval CaMeL Int >> + rval CaMeL Int ;
rank: 720
score: 99.10278930664063
patch: result = lval CaMeL Int ; return result ;
rank: 720
score: 99.0490234375
patch: result = lval 1 >> rval CaMeL Int ;
rank: 721
score: 99.10761108398438
patch: result = rval >> >> rval CaMeL Int ;
rank: 721
score: 99.10189819335938
patch: result = lval CaMeL Int >> >> >> >> count ;
rank: 721
score: 99.07481892903645
patch: buffer = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 721
score: 99.04834594726563
patch: result = lval CaMeL Int >> >> LT ;
rank: 722
score: 99.10897827148438
patch: name = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 722
score: 99.0997314453125
patch: result = lval CaMeL Int == - rval CaMeL Int ;
rank: 722
score: 99.04761420355902
patch: return lval CaMeL Int >> >> rval ;
rank: 723
score: 99.18253267728366
patch: result = Math . rval CaMeL Int >> rval CaMeL Int ;
rank: 723
score: 99.10589599609375
patch: double = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 723
score: 99.09967651367188
patch: result = lval CaMeL Int >> & $NUMBER$ ;
rank: 723
score: 99.01256214488636
patch: sb = lval CaMeL Int << rval CaMeL Int ;
rank: 724
score: 99.11888538707386
patch: result = lval CaMeL Int >> >> lval length ;
rank: 724
score: 99.10781860351562
patch: d = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 724
score: 99.0726826985677
patch: result = ~ lval CaMeL Int >> rval CaMeL Int ;
rank: 724
score: 99.04531028053977
patch: result = lval . double CaMeL Value ( ) ;
rank: 724
score: 99.01231800426136
patch: rval = lval CaMeL Int << rval CaMeL Int ;
rank: 725
score: 99.1818378155048
patch: result = lval CaMeL Int >> >> >> >> rval ) ;
rank: 725
score: 99.11841930042614
patch: if ( lval CaMeL Int == lval CaMeL Int ;
rank: 725
score: 99.09946695963542
patch: result = lval CaMeL Int >> && rval CaMeL Int ;
rank: 725
score: 99.07211303710938
patch: Integer result = lval CaMeL Int << rval CaMeL Int ;
rank: 725
score: 99.04527698863636
patch: result = lval CaMeL Int / >> rval 0 ;
rank: 726
score: 99.19014798677884
patch: result = lval CaMeL Int << >> + rval CaMeL Int ;
rank: 726
score: 99.16372680664062
patch: result = Node . new CaMeL Number ( 1 ) ;
rank: 726
score: 99.1043192545573
patch: position = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 726
score: 99.09886474609375
patch: result = lval CaMeL Int >> >> >> ;
rank: 726
score: 99.04460005326705
patch: result = lval CaMeL Int == - 1 ? ;
rank: 727
score: 99.16372445913461
patch: double rval CaMeL Int = ( int ) lval CaMeL Int ;
rank: 727
score: 99.10373942057292
patch: x = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 727
score: 99.09837849934895
patch: result = lval CaMeL Int >> >> >> != 0 ;
rank: 727
score: 99.07152303059895
patch: value = Node . new CaMeL Number ( result ) ;
rank: 727
score: 99.0443359375
patch: if ( lval CaMeL Int != 0 ) {
rank: 727
score: 99.01061333550348
patch: result = lval CaMeL Int << left ;
rank: 728
score: 99.16257731119792
patch: result = new report CaMeL Code CaMeL Change ( ) ;
rank: 728
score: 99.10312721946023
patch: result = lval CaMeL Int ? lval CaMeL Int ;
rank: 728
score: 99.07030140269886
patch: state = lval CaMeL Int << rval CaMeL Int ;
rank: 728
score: 99.04193115234375
patch: result = lval CaMeL Int >> ] ;
rank: 729
score: 99.11281331380208
patch: return 0 >> rval CaMeL Int >> rval CaMeL Int ;
rank: 729
score: 99.07007853190105
patch: retval = lval CaMeL Int << >> rval CaMeL Int ;
rank: 729
score: 99.04191450639205
patch: result = lval CaMeL Int >> == 1 ? ;
rank: 729
score: 99.00865342881944
patch: result = lval CaMeL Int << n ;
rank: 730
score: 99.09947713216145
patch: element = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 730
score: 99.0699971516927
patch: vals = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 730
score: 99.04153781467014
patch: if ( lval CaMeL Int != null )
rank: 731
score: 99.17826021634616
patch: result = lval CaMeL Int >> >> 1 ; return 1 ;
rank: 731
score: 99.16212815504808
patch: result ; int rval CaMeL Int = ( int ) rval ;
rank: 731
score: 99.10198974609375
patch: result = n . new CaMeL Number ( rval ) ;
rank: 731
score: 99.0694247159091
patch: ret = lval CaMeL Int >> rval CaMeL Int ;
rank: 731
score: 99.04052734375
patch: double lval CaMeL Int = >> rval CaMeL Int ;
rank: 731
score: 99.00226384943181
patch: return new CaMeL Number ( rval CaMeL Int ) ;
rank: 732
score: 99.17791278545673
patch: result = lval CaMeL Int >> 0 + rval CaMeL Int ;
rank: 732
score: 99.16202799479167
patch: result ++ ; report CaMeL Code CaMeL Change ( ) ;
rank: 732
score: 99.10188802083333
patch: result = token CaMeL To CaMeL Name ( result ) ;
rank: 732
score: 99.09876598011364
patch: result = lval CaMeL Int >> >> - 0 ;
rank: 732
score: 99.09443969726563
patch: result = lval CaMeL Int & 0 result ;
rank: 732
score: 99.06924438476562
patch: return n . lval CaMeL Int << rval CaMeL Int ;
rank: 732
score: 99.03984375
patch: result = lval CaMeL Int >> >> EQ ;
rank: 732
score: 99.00169788707386
patch: result = new Node ( result , n ) ;
rank: 733
score: 99.177490234375
patch: result = lval CaMeL Int >> 0 / rval CaMeL Int ;
rank: 733
score: 99.1008809407552
patch: if ( lval CaMeL Int != lval CaMeL Int ) {
rank: 733
score: 99.09610595703126
patch: result = lval CaMeL Int & lval 1 ;
rank: 733
score: 99.09398304332386
patch: result = lval CaMeL Int >> >> -- rval ;
rank: 733
score: 99.0396728515625
patch: result = lval CaMeL Int / lval CaMeL Int ;
rank: 733
score: 99.00009987571023
patch: result = new int ( lval CaMeL Int ) ;
rank: 734
score: 99.17469200721153
patch: result = rval CaMeL Int >> >> rval CaMeL Int 1 ;
rank: 734
score: 99.16049194335938
patch: result = Node . new CaMeL Number ( length ) ;
rank: 734
score: 99.09537760416667
patch: expression = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 734
score: 99.0394775390625
patch: result = lval CaMeL Int < 0 ? ;
rank: 734
score: 98.99819113991477
patch: out = lval CaMeL Int >> rval CaMeL Int ;
rank: 735
score: 99.17431640625
patch: result = lval CaMeL Int - 0 >> rval CaMeL Int ;
rank: 735
score: 99.16041056315105
patch: result = Node . get CaMeL Type ( n ) ;
rank: 735
score: 99.10878499348958
patch: result = lval CaMeL Int > rval CaMeL Int >> ;
rank: 735
score: 99.09218528053977
patch: result = lval CaMeL Int >> >> | rval ;
rank: 735
score: 99.06765747070312
patch: l = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 735
score: 99.03904030539773
patch: Object result = lval CaMeL Int >> >> rval ;
rank: 735
score: 98.99719916449652
patch: result = lval CaMeL Int << 0 ;
rank: 736
score: 99.1742412860577
patch: result = lval CaMeL Int >> >> rval CaMeL Int lval }
rank: 736
score: 99.16017503004808
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;
rank: 736
score: 99.08998616536458
patch: result = lval CaMeL Int >> >> >> > 0 ;
rank: 736
score: 99.03693181818181
patch: result = lval CaMeL Int ? 1 : 0 ;
rank: 736
score: 98.99697536892361
patch: result = new int ( result ) ;
rank: 737
score: 98.99688165838069
patch: try { report CaMeL Code CaMeL Change ( ) ;
rank: 738
score: 99.09585571289062
patch: result = n . new CaMeL Number ( index ) ;
rank: 738
score: 99.09439086914062
patch: result = lval CaMeL Int & 1 rval CaMeL Int ;
rank: 738
score: 99.06689453125
patch: double result = lval CaMeL Int << rval CaMeL Int ;
rank: 738
score: 99.03443492542614
patch: result = lval CaMeL Int / >> >= 1 ;
rank: 739
score: 99.17320838341347
patch: result = lval CaMeL Int >> rval ( >> 1 ) ;
rank: 739
score: 99.15880330403645
patch: int rval = lval CaMeL Int >> rval CaMeL Int ;
rank: 739
score: 99.09417169744319
patch: result = lval CaMeL Int >> >> lval ) ;
rank: 739
score: 99.0667724609375
patch: result = ~ rval CaMeL Int >> rval CaMeL Int ;
rank: 740
score: 99.17301432291667
patch: result = lval CaMeL Int >> >> rval CaMeL Int lval
rank: 740
score: 99.15704345703125
patch: result += FRACTIONAL _ BITWISE _ OPERAND , right ;
rank: 740
score: 99.09480794270833
patch: result = result >> >> rval CaMeL Int ; break ;
rank: 740
score: 99.09182739257812
patch: index = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 740
score: 99.08771430121527
patch: result = lval CaMeL Int > rval ;
rank: 740
score: 99.06653849283855
patch: align = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 740
score: 99.03413899739583
patch: if ( lval CaMeL Int == 0 )
rank: 740
score: 98.99383544921875
patch: result += lval CaMeL Int ;
rank: 741
score: 99.18112182617188
patch: ret = Node . new CaMeL Number ( result ) ;
rank: 741
score: 99.17196890024039
patch: result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ ;
rank: 741
score: 99.1566631610577
patch: match ( FRACTIONAL _ BITWISE _ OPERAND , right ) ;
rank: 741
score: 99.1029764811198
patch: result = lval CaMeL Int >> rval CaMeL Int result ;
rank: 741
score: 99.06651814778645
patch: s result = lval CaMeL Int >> rval CaMeL Int ;
rank: 741
score: 99.03399658203125
patch: result = lval CaMeL Int >> == rval ;
rank: 742
score: 99.17050405649039
patch: result = rval CaMeL Int >> >> rval CaMeL Int ) ;
rank: 742
score: 99.09437052408855
patch: result -= lval CaMeL Int << >> rval CaMeL Int ;
rank: 742
score: 99.0857821377841
patch: result = lval CaMeL Int >> >> <= 0 ;
rank: 742
score: 99.06633966619319
patch: s = lval CaMeL Int << rval CaMeL Int ;
rank: 742
score: 99.03340287642045
patch: if ( lval CaMeL Int >= rval CaMeL Int )
rank: 743
score: 99.10071478949652
patch: result = lval CaMeL Int >> true ;
rank: 743
score: 99.08502752130681
patch: if ( result == 0 || result == 0 )
rank: 743
score: 99.0663174715909
patch: switch ( n . get CaMeL Type ( ) )
rank: 743
score: 99.0328125
patch: result = lval >> >> >> >> rval ;
rank: 743
score: 98.99276123046874
patch: result = lval << >> rval CaMeL Int ;
rank: 744
score: 99.15529378255208
patch: result = Node . new CaMeL Number ( $NUMBER$ ) ;
rank: 744
score: 99.09147135416667
patch: long rval = lval CaMeL Int >> rval CaMeL Int ;
rank: 744
score: 99.03233753551136
patch: result = lval CaMeL Int / >> rval $NUMBER$ ;
rank: 744
score: 98.99236505681819
patch: result = left . get CaMeL Value ( ) ;
rank: 745
score: 99.17959359975961
patch: result = lval CaMeL Int >> $NUMBER$ << rval CaMeL Int ;
rank: 745
score: 99.08988444010417
patch: line = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 745
score: 99.08396218039773
patch: result = lval CaMeL Int ? rval : rval ;
rank: 745
score: 99.0653584798177
patch: if ( rval CaMeL Int != rval ) return n ;
rank: 745
score: 99.0320157137784
patch: result = lval / >> >> rval CaMeL Int ;
rank: 745
score: 98.99223188920455
patch: result = lval CaMeL Int << Token . LSH ;
rank: 746
score: 99.1788330078125
patch: result = lval CaMeL Int >> >> >> >> 0 ;
rank: 746
score: 99.0992940266927
patch: result = lval CaMeL Int >= - rval CaMeL Int ;
rank: 746
score: 99.09080921519886
patch: result = new CaMeL Number ( result ) ; ;
rank: 746
score: 99.08256392045455
patch: result = lval CaMeL Int >> >> ; break ;
rank: 746
score: 99.06529744466145
patch: result = super . new CaMeL Number ( result ) ;
rank: 746
score: 99.03059525923295
patch: L = lval CaMeL Int & rval CaMeL Int ;
rank: 746
score: 98.99217640269886
patch: result = new Number ( rval CaMeL Int ) ;
rank: 747
score: 99.16653442382812
patch: result = lval CaMeL Int >> rval $NUMBER$ ;
rank: 747
score: 99.15423029119319
patch: result = new CaMeL Number >> ( result ) ;
rank: 747
score: 99.0991719563802
patch: result = lval CaMeL Int >> $NUMBER$ rval CaMeL Int ;
rank: 747
score: 99.0907491048177
patch: result |= lval CaMeL Int >> >> rval CaMeL Int ;
rank: 747
score: 99.08005593039773
patch: throw new Null CaMeL Pointer CaMeL Exception ( ) ;
rank: 747
score: 99.0292080965909
patch: return lval CaMeL Int & >> rval CaMeL Int ;
rank: 747
score: 98.99156605113636
patch: result = lval << >> >> rval CaMeL Int ;
rank: 748
score: 99.0906270345052
patch: result = report CaMeL Code CaMeL Change ( result ) ;
rank: 748
score: 99.06442260742188
patch: sb = Node . new CaMeL Number ( result ) ;
rank: 748
score: 99.02903442382812
patch: result = lval CaMeL Int ( lval ) ;
rank: 748
score: 98.99128861860795
patch: end = lval CaMeL Int << rval CaMeL Int ;
rank: 749
score: 99.16525268554688
patch: result = lval >> & >> >> rval CaMeL Int ;
rank: 749
score: 99.08949788411458
patch: result = Node . new CaMeL Number ( id ) ;
rank: 749
score: 99.0874532063802
patch: return lval CaMeL Int >> >> - rval CaMeL Int ;
rank: 749
score: 99.07258744673295
patch: result = lval CaMeL Int >> & >> 1 ;
rank: 749
score: 99.0636494954427
patch: Offset result = lval CaMeL Int >> rval CaMeL Int ;
rank: 749
score: 98.9905118075284
patch: out = lval CaMeL Int << rval CaMeL Int ;
rank: 750
score: 99.1632588704427
patch: result = lval CaMeL Int . / rval CaMeL Int ;
rank: 750
score: 99.15142352764423
patch: result = lval CaMeL Int >> rval CaMeL Int + n ;
rank: 750
score: 99.09654744466145
patch: if ( lval CaMeL Int == lval CaMeL Int ) {
rank: 750
score: 99.08707682291667
patch: result = rval CaMeL Int >> & lval CaMeL Int ;
rank: 750
score: 99.06361897786458
patch: long result = rval CaMeL Int >> rval CaMeL Int ;
rank: 750
score: 99.02783203125
patch: double result = lval CaMeL Int / >> rval ;
rank: 750
score: 98.9903564453125
patch: result = new double ( rval CaMeL Int ) ;
rank: 751
score: 99.1631571451823
patch: result = lval CaMeL Int ? >> rval CaMeL Int ;
rank: 751
score: 99.09522594105114
patch: result = lval CaMeL Int >> >> rval length ;
rank: 751
score: 99.08663940429688
patch: result = ( lval CaMeL Int >> rval CaMeL Int ;
rank: 751
score: 99.02737426757812
patch: result = lval CaMeL Int ; ;
rank: 751
score: 98.99033425071023
patch: ret = lval CaMeL Int << rval CaMeL Int ;
rank: 752
score: 99.15052208533653
patch: result = lval CaMeL Int << rval CaMeL Int >> n ;
rank: 752
score: 99.09466552734375
patch: return lval CaMeL Int >> rval CaMeL Int >> 1 ;
rank: 752
score: 99.06251017252605
patch: Long result = lval CaMeL Int << rval CaMeL Int ;
rank: 752
score: 99.02685546875
patch: if ( lval CaMeL Int < rval CaMeL Int )
rank: 752
score: 98.99010120738636
patch: result = lval CaMeL Int << n . length ;
rank: 753
score: 99.1721942608173
patch: ! result = Node . new CaMeL Number ( result ) ;
rank: 753
score: 99.16065470377605
patch: result = - lval CaMeL Int >> rval CaMeL Int ;
rank: 753
score: 99.0873514811198
patch: result = n . new CaMeL Number ( this ) ;
rank: 753
score: 99.08467610677083
patch: lval = lval CaMeL Int >> & rval CaMeL Int ;
rank: 753
score: 99.0683926669034
patch: result = lval CaMeL Int & rval - 1 ;
rank: 753
score: 99.06150124289773
patch: inst = lval CaMeL Int >> rval CaMeL Int ;
rank: 753
score: 99.02573464133523
patch: lval = lval CaMeL Int & rval CaMeL Int ;
rank: 754
score: 99.15831502278645
patch: result = lval CaMeL Int >> rval ( rval ) ;
rank: 754
score: 99.14990234375
patch: result = lval : FRACTIONAL _ BITWISE _ OPERAND ,
rank: 754
score: 99.092529296875
patch: result = lval CaMeL Int rval - rval CaMeL Int ;
rank: 754
score: 99.08656819661458
patch: result = Node . new CaMeL Number ( value ) ;
rank: 754
score: 99.08465576171875
patch: result = rval CaMeL Int >> lval rval CaMeL Int ;
rank: 754
score: 99.06732732599431
patch: result = lval CaMeL Int & >> >> $NUMBER$ ;
rank: 754
score: 99.0613301595052
patch: block = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 754
score: 99.02555708451705
patch: if ( lval CaMeL Int >> >> >= 1 )
rank: 754
score: 98.98813698508523
patch: this . report CaMeL Code CaMeL Change ( ) ;
rank: 755
score: 99.17201741536458
patch: result = lval CaMeL Int << >> >> >> 1 ;
rank: 755
score: 99.0670498934659
patch: result = lval CaMeL Int >> >> <= $NUMBER$ ;
rank: 755
score: 99.060791015625
patch: result = rval CaMeL Int >> | rval CaMeL Int ;
rank: 755
score: 99.02545720880681
patch: result = lval CaMeL Int . trim ( ) ;
rank: 755
score: 98.9880704012784
patch: result -= lval CaMeL Int << rval CaMeL Int ;
rank: 756
score: 99.17120830829327
patch: result = lval CaMeL Int >> >> + lval CaMeL Int ;
rank: 756
score: 99.15702311197917
patch: result result = lval CaMeL Int >> rval CaMeL Int ;
rank: 756
score: 99.0249911221591
patch: result = lval >= 0 ? lval : lval ;
rank: 756
score: 98.98289659288194
patch: result = lval CaMeL Int ; break ;
rank: 757
score: 99.08509318033855
patch: return new CaMeL Number >> >> >> rval CaMeL Int ;
rank: 757
score: 99.08389282226562
patch: result = lval CaMeL Int >> >> rval CaMeL Int ,
rank: 757
score: 99.06276633522727
patch: result = lval CaMeL Int >> >> < rval ;
rank: 757
score: 99.0596590909091
patch: align = lval CaMeL Int >> rval CaMeL Int ;
rank: 757
score: 99.02492453835227
patch: if ( lval CaMeL Int >> >> >= $NUMBER$ )
rank: 758
score: 99.08284505208333
patch: result = lval CaMeL Int >> = lval CaMeL Int ;
rank: 758
score: 99.08194986979167
patch: error ( n . get CaMeL Type ( ) ) ;
rank: 758
score: 99.06227805397727
patch: result = lval CaMeL Int << >> >= 1 ;
rank: 758
score: 99.0594482421875
patch: b = rval CaMeL Int >> rval CaMeL Int ;
rank: 758
score: 98.9824551669034
patch: result -= lval CaMeL Int >> rval CaMeL Int ;
rank: 759
score: 99.14396158854167
patch: result = Node . new CaMeL Id ( result ) ;
rank: 759
score: 99.08225504557292
patch: start = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 759
score: 99.08177601207386
patch: result = new CaMeL Number ( result ) ; }
rank: 759
score: 99.02298583984376
patch: result = lval CaMeL Int >> >> LE ;
rank: 759
score: 98.98061301491477
patch: end = lval CaMeL Int >> rval CaMeL Int ;
rank: 760
score: 99.1506856282552
patch: result = lval CaMeL Int >> >> rval . length ;
rank: 760
score: 99.14290364583333
patch: result = Node . new CaMeL Number ( type ) ;
rank: 760
score: 99.08114624023438
patch: result = lval << >> >> >> rval CaMeL Int ;
rank: 760
score: 99.05857155539773
patch: return rval CaMeL Int >> >> >> >> rval ;
rank: 761
score: 99.14217122395833
patch: result = lval CaMeL Int << ( int ) result ;
rank: 761
score: 99.08179820667614
patch: result = lval CaMeL Int < lval CaMeL Int ;
rank: 761
score: 99.05842729048295
patch: return rval CaMeL Int >> / rval CaMeL Int ;
rank: 761
score: 99.05719549005681
patch: if ( lval CaMeL Int != lval CaMeL Int ;
rank: 761
score: 99.02194213867188
patch: assert lval CaMeL Int < rval CaMeL Int ;
rank: 762
score: 99.14163208007812
patch: result -- ; report CaMeL Code CaMeL Change ( ) ;
rank: 762
score: 99.0580546061198
patch: Token result = lval CaMeL Int >> rval CaMeL Int ;
rank: 762
score: 99.05686257102273
patch: result = lval CaMeL Int >> >> < 0 ;
rank: 762
score: 99.02138943142361
patch: result = lval ; result = lval ;
rank: 763
score: 99.14068603515625
patch: error ( FRACTIONAL _ BITWISE _ OPERAND ,
rank: 763
score: 99.07888793945312
patch: result ( n . get CaMeL Type ( ) ) ;
rank: 763
score: 99.05678488991477
patch: result = result . to CaMeL String ( ) ;
rank: 763
score: 99.02135009765625
patch: return lval CaMeL Int & rval CaMeL Int ;
rank: 763
score: 98.97760564630681
patch: result = lval CaMeL Int += rval CaMeL Int ;
rank: 764
score: 99.1458740234375
patch: result = lval CaMeL Int >> >> rval - 0 ;
rank: 764
score: 99.0786641438802
patch: result = Node . new CaMeL Number ( end ) ;
rank: 764
score: 99.07794189453125
patch: throw new Runtime CaMeL Exception ( lval ) ;
rank: 764
score: 99.05775960286458
patch: final int rval CaMeL Int = ( int ) rval ;
rank: 764
score: 99.05523126775569
patch: result = lval CaMeL Int ? rval : 0 ;
rank: 764
score: 98.97520616319444
patch: result = new Number ( result ) ;
rank: 765
score: 99.1454833984375
patch: result = lval >> - rval CaMeL Int ;
rank: 765
score: 99.079736328125
patch: result = result >> >> lval CaMeL Int ;
rank: 765
score: 99.07568359375
patch: return = lval CaMeL Int >> rval CaMeL Int ;
rank: 765
score: 99.019482421875
patch: result = lval CaMeL Int >> | rval ;
rank: 766
score: 99.1444424715909
patch: result = lval CaMeL Int >> rval CaMeL Int .
rank: 766
score: 99.07466264204545
patch: return lval CaMeL Int >> >> lval CaMeL Int ;
rank: 766
score: 99.0570068359375
patch: target = lval CaMeL Int >> rval CaMeL Int ;
rank: 766
score: 99.05294799804688
patch: result = lval CaMeL Int & & rval ;
rank: 766
score: 99.01819458007813
patch: assert lval CaMeL Int != 0 : $STRING$ ;
rank: 766
score: 98.9739102450284
patch: result = new Node ( result , lval ) ;
rank: 767
score: 99.14408365885417
patch: result = value >> >> >> >> rval CaMeL Int ;
rank: 767
score: 99.0791015625
patch: result = lval CaMeL Int >> >> >> lval }
rank: 767
score: 99.0760498046875
patch: result = Node . new CaMeL Number ( this ) ;
rank: 767
score: 99.0567118326823
patch: return lval CaMeL Int >> << >> rval CaMeL Int ;
rank: 767
score: 99.05286754261364
patch: result = lval CaMeL Int >> >> != 0 ;
rank: 767
score: 99.01806640625
patch: * result = lval CaMeL Int >> >> rval ;
rank: 767
score: 98.97350463867187
patch: result = lval CaMeL Int >> >> n ;
rank: 768
score: 99.07876586914062
patch: result = lval CaMeL Int > & rval CaMeL Int ;
rank: 768
score: 99.0757080078125
patch: result = result << >> rval CaMeL Int ;
rank: 768
score: 99.06815962357955
patch: this . result = lval CaMeL Int >> $NUMBER$ ;
rank: 768
score: 99.05640758167614
patch: node = lval CaMeL Int >> rval CaMeL Int ;
rank: 768
score: 99.01789686414931
patch: result = lval CaMeL Int >> ++ ;
rank: 768
score: 98.97284490411931
patch: rval = lval CaMeL Int >> rval CaMeL Int ;
rank: 769
score: 99.13386674360795
patch: Node new CaMeL Number = ( int ) result ;
rank: 769
score: 99.07467651367188
patch: result = n . new CaMeL Number ( count ) ;
rank: 769
score: 99.0563077059659
patch: head = lval CaMeL Int << rval CaMeL Int ;
rank: 769
score: 99.05072576349431
patch: result = lval CaMeL Int & >> > 1 ;
rank: 769
score: 99.01688232421876
patch: result = lval CaMeL Int & rval 1 ;
rank: 769
score: 98.97235107421875
patch: return new CaMeL Number << rval CaMeL Int ;
rank: 770
score: 99.13724365234376
patch: result = lval >> >> >> >> 1 ;
rank: 770
score: 99.0497713955966
patch: result = lval CaMeL Int >> ; return result ;
rank: 770
score: 99.01610107421875
patch: return lval CaMeL Int + rval CaMeL Int ;
rank: 771
score: 99.07632446289062
patch: result = lval CaMeL Int >> >> >> - 1 ;
rank: 771
score: 99.073486328125
patch: long = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 771
score: 99.06458875868056
patch: return result >> >> rval CaMeL Int ;
rank: 771
score: 99.0562032063802
patch: result = lval CaMeL Int >> & ( rval ) ;
rank: 771
score: 99.04763454861111
patch: result = lval CaMeL Int & $NUMBER$ ;
rank: 771
score: 99.01089138454861
patch: if ( lval CaMeL Int != lval )
rank: 772
score: 99.136962890625
patch: result = lval CaMeL Int >> >> rval . ) ;
rank: 772
score: 99.13062540690105
patch: result = result << FRACTIONAL _ BITWISE _ OPERAND ,
rank: 772
score: 99.064208984375
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;
rank: 772
score: 99.05610795454545
patch: l = lval CaMeL Int >> rval CaMeL Int ;
rank: 772
score: 99.0467196377841
patch: result = lval CaMeL Int >> >> && result ;
rank: 772
score: 99.0105224609375
patch: result = lval CaMeL Int >> >> Comparable ;
rank: 772
score: 98.96823459201389
patch: result = new Token ( result ) ;
rank: 773
score: 99.05544211647727
patch: vals = lval CaMeL Int >> rval CaMeL Int ;
rank: 773
score: 99.04646809895833
patch: result = lval CaMeL Int + 1 ;
rank: 773
score: 99.00941772460938
patch: result = lval % >> rval CaMeL Int ;
rank: 774
score: 99.16385591947116
patch: result = lval CaMeL Int >> >> >> $NUMBER$ ; break ;
rank: 774
score: 99.13236860795455
patch: result = rval CaMeL Int >> >> rval 1 ;
rank: 774
score: 99.12987263997395
patch: result = result + FRACTIONAL _ BITWISE _ OPERAND ,
rank: 774
score: 99.05968128551136
patch: result = lval CaMeL Int >= 0 ? rval ;
rank: 774
score: 99.05484008789062
patch: result = lval CaMeL Int & ( int ) lval ;
rank: 774
score: 99.0067138671875
patch: L = lval CaMeL Int >> >> rval ;
rank: 774
score: 98.96652221679688
patch: throw new Assertion CaMeL Error ( $STRING$ ) ;
rank: 775
score: 99.16347092848558
patch: result = lval CaMeL Int + n << rval CaMeL Int ;
rank: 775
score: 99.13187662760417
patch: result = lval CaMeL Int >> >> rval . 0 ;
rank: 775
score: 99.1298116048177
patch: result = Node . new CaMeL Number ( true ) ;
rank: 775
score: 99.05475408380681
patch: pos = lval CaMeL Int << rval CaMeL Int ;
rank: 775
score: 99.0015380859375
patch: result = lval CaMeL Int >> & true ;
rank: 775
score: 98.96528764204545
patch: result = left . get CaMeL Long ( ) ;
rank: 776
score: 99.06898803710938
patch: result = result >> - rval CaMeL Int ;
rank: 776
score: 99.05474853515625
patch: return rval CaMeL Int ; case Token . URSH :
rank: 776
score: 99.00094943576389
patch: result = lval CaMeL Int + rval ;
rank: 776
score: 98.96527654474431
patch: l = lval CaMeL Int << rval CaMeL Int ;
rank: 777
score: 99.16147085336539
patch: result = lval CaMeL Int + result << rval CaMeL Int ;
rank: 777
score: 99.13035074869792
patch: result = lval CaMeL Int >> >> rval CaMeL Int .
rank: 777
score: 99.12826538085938
patch: error ( FRACTIONAL _ BITWISE _ OPERAND , left ,
rank: 777
score: 99.06980387369792
patch: result = lval CaMeL Int >> rval lval CaMeL Int ;
rank: 777
score: 99.0545145670573
patch: argument = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 777
score: 99.04082697088069
patch: result = lval CaMeL Int >> >> >> refs ;
rank: 777
score: 99.00056966145833
patch: result = lval CaMeL Int & null ;
rank: 778
score: 99.1278076171875
patch: result = Node . new CaMeL Number ( name ) ;
rank: 778
score: 99.05401056463069
patch: result += lval CaMeL Int >> lval CaMeL Int ;
rank: 778
score: 99.05309041341145
patch: result = new CaMeL Number >> << rval CaMeL Int ;
rank: 778
score: 99.0396395596591
patch: result = lval CaMeL Int >> >> && rval ;
rank: 778
score: 99.00050184461806
patch: result = lval CaMeL Int & 0 ;
rank: 778
score: 98.96410023082386
patch: result = n . get CaMeL Parent ( ) ;
rank: 779
score: 99.16002308238636
patch: result = lval . get CaMeL Double ( ) ;
rank: 779
score: 99.12727864583333
patch: result = Node . new CaMeL Number ( null ) ;
rank: 779
score: 99.1258544921875
patch: result = lval CaMeL Int >> >> rval null ;
rank: 779
score: 99.05089222301136
patch: return lval CaMeL Int >> rval CaMeL Int >> ;
rank: 779
score: 99.03898481889205
patch: result = lval CaMeL Int >> >> >> ] ;
rank: 779
score: 98.96329956054687
patch: result = lval CaMeL Int >> >> size ;
rank: 780
score: 99.12633260091145
patch: result = lval CaMeL Int << rval CaMeL Int 1 ;
rank: 780
score: 99.0679219563802
patch: if ( lval CaMeL Int & >> rval CaMeL Int ;
rank: 780
score: 99.052001953125
patch: z = lval CaMeL Int >> rval CaMeL Int ;
rank: 780
score: 99.04773559570313
patch: if ( result == null ) return 0 ;
rank: 780
score: 98.96321411132813
patch: result = new int Number ( result ) ;
rank: 781
score: 99.06787109375
patch: result = lval CaMeL Int >> >> lval ; ;
rank: 781
score: 98.9971923828125
patch: lval = lval CaMeL Int >> >> rval ;
rank: 781
score: 98.96251331676136
patch: result = new Node ( left , result ) ;
rank: 782
score: 99.12542724609375
patch: result = Node . new CaMeL Number ( false ) ;
rank: 782
score: 99.12479654947917
patch: result = rval CaMeL Int != >> rval CaMeL Int ;
rank: 782
score: 99.06706099076705
patch: result = lval CaMeL Int >> >> 1 ; ;
rank: 782
score: 99.0517911044034
patch: addr = lval CaMeL Int >> rval CaMeL Int ;
rank: 782
score: 98.9621914950284
patch: = Node . new CaMeL Number ( result ) ;
rank: 783
score: 99.12330118815105
patch: result = lval CaMeL Int << rval CaMeL Int >> ;
rank: 783
score: 99.0660909016927
patch: result = left . get CaMeL Type ( ) ) ;
rank: 783
score: 99.0516690340909
patch: base = lval CaMeL Int << rval CaMeL Int ;
rank: 783
score: 99.034326171875
patch: result = lval CaMeL Int >> >> T ;
rank: 783
score: 98.99405517578126
patch: result = lval CaMeL Int >> >> true ;
rank: 783
score: 98.96210271661931
patch: result = new int >> >> rval CaMeL Int ;
rank: 784
score: 99.1555887858073
patch: p = Node . new CaMeL Number ( result ) ;
rank: 784
score: 99.12193714488636
patch: result = 1 >> >> >> rval CaMeL Int ;
rank: 784
score: 99.06577555338542
patch: result = report CaMeL Code CaMeL Change ( false ) ;
rank: 784
score: 99.05119185014205
patch: expr = lval CaMeL Int >> rval CaMeL Int ;
rank: 784
score: 99.03409423828126
patch: result = lval CaMeL Int >> >> count ;
rank: 784
score: 98.99012451171875
patch: result = lval CaMeL Int >> << rval ;
rank: 785
score: 99.1219482421875
patch: result = new lval CaMeL Int << rval CaMeL Int ;
rank: 785
score: 99.12180397727273
patch: result = rval CaMeL Int >> >> >> 1 ;
rank: 785
score: 99.06554497612848
patch: result = lval << rval CaMeL Int ;
rank: 785
score: 99.05072021484375
patch: return rval ; case Token . URSH :
rank: 785
score: 99.04092746310764
patch: result = lval CaMeL Int >> count ;
rank: 785
score: 98.98933919270833
patch: result = lval CaMeL Int >> EQ ;
rank: 785
score: 98.96091530539773
patch: expr = lval CaMeL Int << rval CaMeL Int ;
rank: 786
score: 99.15497381036931
patch: return Node . new CaMeL Number ( n ) ;
rank: 786
score: 99.12172629616477
patch: result = new Assertion CaMeL Error ( $STRING$ ) ;
rank: 786
score: 99.12118530273438
patch: result = ! lval CaMeL Int >> rval CaMeL Int ;
rank: 786
score: 99.03813032670455
patch: result = rval CaMeL Int > rval CaMeL Int ;
rank: 786
score: 99.0336181640625
patch: result = lval CaMeL Int >> <= 1 ;
rank: 786
score: 98.98893229166667
patch: result = lval CaMeL Int . lval ;
rank: 786
score: 98.96003861860795
patch: result = lval CaMeL Int << 1 ; break ;
rank: 787
score: 99.1545879657452
patch: return Node . new CaMeL Number ( lval CaMeL Int ) ;
rank: 787
score: 99.0343905362216
patch: result = rval CaMeL Int & lval CaMeL Int ;
rank: 787
score: 99.03159401633523
patch: result = lval CaMeL Int & >> & 1 ;
rank: 787
score: 98.98731825086806
patch: result = lval / rval CaMeL Int ;
rank: 788
score: 99.1544940655048
patch: result = lval CaMeL Int << 1 << rval CaMeL Int ;
rank: 788
score: 99.12038845486111
patch: result = 0 >> rval CaMeL Int ;
rank: 788
score: 99.06436157226562
patch: int result = lval CaMeL Int >> lval CaMeL Int ;
rank: 788
score: 99.05033735795455
patch: argument = lval CaMeL Int >> rval CaMeL Int ;
rank: 788
score: 99.03141645951705
patch: result = lval CaMeL Int >> >> >> n ;
rank: 788
score: 98.98583374023437
patch: assert lval CaMeL Int != rval CaMeL Int ;
rank: 788
score: 98.95849609375
patch: result = lval CaMeL Int << MIN _ VALUE ;
rank: 789
score: 99.1148348721591
patch: double lval CaMeL Int = ( int ) result ;
rank: 789
score: 99.06475830078125
patch: result = lval . new CaMeL Number ( n ) ;
rank: 789
score: 99.0492276278409
patch: arg = lval CaMeL Int << rval CaMeL Int ;
rank: 789
score: 99.03163840553977
patch: result = lval . to CaMeL String ( ) ;
rank: 789
score: 99.02728881835938
patch: if ( result == null ) return n ;
rank: 789
score: 98.98432006835938
patch: result = lval CaMeL Int == 0 ? ;
rank: 789
score: 98.95694580078126
patch: = rval CaMeL Int << rval CaMeL Int ;
rank: 790
score: 99.1543438251202
patch: result = lval CaMeL Int : rval CaMeL Int ; break ;
rank: 790
score: 99.11394708806819
patch: result = lval CaMeL Int == lval CaMeL Int ;
rank: 790
score: 99.0606180826823
patch: byte = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 790
score: 99.0487060546875
patch: try { result = lval CaMeL Int >> rval ;
rank: 790
score: 99.0255459872159
patch: if ( result == - 1 ) return n ;
rank: 790
score: 98.98262329101563
patch: result = lval CaMeL Int >> == 1 ;
rank: 790
score: 98.9561434659091
patch: result = lval CaMeL Int . length ( ) ;
rank: 791
score: 99.1177645596591
patch: result = lval >> >> >> >> rval $NUMBER$ ;
rank: 791
score: 99.06038411458333
patch: text = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 791
score: 99.0240811434659
patch: result = lval CaMeL Int >> >> << rval ;
rank: 791
score: 98.98178100585938
patch: if ( lval CaMeL Int >> == 1 )
rank: 791
score: 98.9517578125
patch: result = new CaMeL Number ( n ) ;
rank: 792
score: 99.1129150390625
patch: result = lval CaMeL Int << ( int ) n ;
rank: 792
score: 99.06032307942708
patch: result = lval CaMeL Int - >> lval CaMeL Int ;
rank: 792
score: 99.0473876953125
patch: return n . get CaMeL Parent ( ) ;
rank: 792
score: 99.02696644176136
patch: result = lval CaMeL Int >> $NUMBER$ >> 1 ;
rank: 792
score: 99.02394797585227
patch: result = lval CaMeL Int >> >> <= rval ;
rank: 792
score: 98.98009033203125
patch: result = lval CaMeL Int >> - 1 ;
rank: 793
score: 99.1122538248698
patch: result = lval CaMeL Int >> >> rval . $NUMBER$ ;
rank: 793
score: 99.06270345052083
patch: result = Number . new CaMeL Number ( result ) ;
rank: 793
score: 99.0238924893466
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 793
score: 98.97973022460937
patch: return lval CaMeL Int / rval CaMeL Int ;
rank: 794
score: 99.0619405110677
patch: j = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 794
score: 99.05941772460938
patch: result = lval CaMeL Int >> rval CaMeL Int ; else
rank: 794
score: 99.04688609730114
patch: tmp = rval CaMeL Int >> rval CaMeL Int ;
rank: 794
score: 98.9787353515625
patch: if ( lval CaMeL Int == 0 ) {
rank: 794
score: 98.94501953125
patch: result = lval CaMeL Int << rval ) ;
rank: 795
score: 99.15226236979167
patch: result = lval CaMeL Int >> >> $NUMBER$ ; break ;
rank: 795
score: 99.11077325994319
patch: String new CaMeL Number = ( int ) rval ;
rank: 795
score: 99.10904947916667
patch: result = lval CaMeL Int , rval CaMeL Int ++ ;
rank: 795
score: 99.04576526988636
patch: buffer = lval CaMeL Int >> rval CaMeL Int ;
rank: 795
score: 99.0202303799716
patch: result = lval CaMeL Int & >> - 1 ;
rank: 795
score: 98.97620239257813
patch: result = lval CaMeL Int >= >> rval ;
rank: 795
score: 98.94051106770833
patch: result = lval CaMeL Int >> right ;
rank: 796
score: 99.15158315805289
patch: result = Node . new CaMeL Number ( result ) ; {
rank: 796
score: 99.10950816761364
patch: result = new Node ( lval CaMeL Int ) ;
rank: 796
score: 99.06011962890625
patch: result = n . new CaMeL Number ( 1 ) ;
rank: 796
score: 99.04393421519886
patch: block = lval CaMeL Int >> rval CaMeL Int ;
rank: 796
score: 99.02409224076705
patch: result = lval CaMeL Int = lval CaMeL Int ;
rank: 796
score: 98.97561645507812
patch: result = lval CaMeL Int >> >> & ;
rank: 796
score: 98.940185546875
patch: result = lval CaMeL Int >> >> result ;
rank: 797
score: 99.04334605823864
patch: result = lval >> rval CaMeL Int ; break ;
rank: 797
score: 99.02243874289773
patch: lval = lval CaMeL Int >> lval CaMeL Int ;
rank: 797
score: 99.01845481178977
patch: result = lval CaMeL Int & & >> $NUMBER$ ;
rank: 797
score: 98.97450561523438
patch: result = lval CaMeL Int ^ >> rval ;
rank: 797
score: 98.93857421875
patch: if ( rval CaMeL Int == lval ) {
rank: 798
score: 98.97408447265624
patch: result = lval CaMeL Int >> >> type ;
rank: 798
score: 98.93567504882813
patch: return n . get CaMeL Type ( ) ;
rank: 799
score: 99.14366658528645
patch: result = lval CaMeL Int >> . rval CaMeL Int ;
rank: 799
score: 99.10511271158855
patch: result = lval CaMeL Int <= ( int ) rval ;
rank: 799
score: 99.05704752604167
patch: result = lval CaMeL Int >> result rval CaMeL Int ;
rank: 799
score: 99.03718705610795
patch: res = lval CaMeL Int << rval CaMeL Int ;
rank: 799
score: 99.02034135298295
patch: result = lval CaMeL Int += lval CaMeL Int ;
rank: 799
score: 99.01701216264205
patch: result = lval CaMeL Int & & >> 1 ;
rank: 799
score: 98.9729248046875
patch: result = lval ; lval CaMeL Int ++ ;
rank: 799
score: 98.93280029296875
patch: result = lval CaMeL Int >> n ;
rank: 800
score: 99.10670979817708
patch: result = lval ( ) >> >> rval CaMeL Int ;
rank: 800
score: 99.10455322265625
patch: result = lval CaMeL Int >> ( lval CaMeL Int ;
rank: 800
score: 99.0567118326823
patch: right = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 800
score: 99.05602349175348
patch: result = result << lval CaMeL Int ;
rank: 800
score: 99.03590087890625
patch: result = ( int ) rval ; break ;
rank: 800
score: 99.0202303799716
patch: result = lval CaMeL Int >= 0 ? lval ;
rank: 800
score: 98.97276306152344
patch: result = lval CaMeL Int < ;
rank: 800
score: 98.92857666015625
patch: if ( rval CaMeL Int == 0 ) {
rank: 801
score: 99.14169311523438
patch: j = Node . new CaMeL Number ( result ) ;
rank: 801
score: 99.1057637532552
patch: result = 1 >> >> >> >> rval CaMeL Int ;
rank: 801
score: 99.05670166015625
patch: prefix = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 801
score: 99.0351229580966
patch: retval = rval CaMeL Int >> rval CaMeL Int ;
rank: 801
score: 99.0188876065341
patch: return ( ( String ) lval CaMeL Int ) ;
rank: 801
score: 99.01310424804687
patch: if ( lval CaMeL Int != - 1 )
rank: 801
score: 98.97181532118056
patch: result = lval CaMeL Int >> LE ;
rank: 801
score: 98.927783203125
patch: if ( rval CaMeL Int >= 0 ) {
rank: 802
score: 99.10515802556819
patch: result = lval >> >> >> >> rval ) ;
rank: 802
score: 99.10396321614583
patch: result = lval CaMeL Int & ( int ) right ;
rank: 802
score: 99.05618286132812
patch: result = ( rval CaMeL Int & rval CaMeL Int ;
rank: 802
score: 99.03505637428977
patch: c = lval CaMeL Int << rval CaMeL Int ;
rank: 802
score: 98.99571533203125
patch: if ( lval CaMeL Int == - 1 )
rank: 802
score: 98.97117919921875
patch: result = lval 0 / rval CaMeL Int ;
rank: 802
score: 98.92715793185764
patch: result = lval CaMeL Int >> left ;
rank: 803
score: 99.14136759440105
patch: x = Node . new CaMeL Number ( result ) ;
rank: 803
score: 99.05525716145833
patch: bytes = lval CaMeL Int >> >> rval CaMeL Int ;
rank: 803
score: 99.03440163352273
patch: type = lval CaMeL Int << rval CaMeL Int ;
rank: 803
score: 98.99376085069444
patch: result = lval CaMeL Int >= rval ;
rank: 803
score: 98.92533569335937
patch: result = new int - rval CaMeL Int ;
rank: 804
score: 99.1030606356534
patch: if = rval CaMeL Int >> rval CaMeL Int ;
rank: 804
score: 99.10289510091145
patch: result = Node . new CaMeL Number ( $STRING$ ) ;
rank: 804
score: 99.0338467684659
patch: dst = lval CaMeL Int >> rval CaMeL Int ;
rank: 804
score: 99.01591352982955
patch: result = lval CaMeL Int ; return ( int ;
rank: 804
score: 98.9927001953125
patch: throw new Internal CaMeL Error ( $STRING$ ) ;
rank: 804
score: 98.97042846679688
patch: result = lval CaMeL Int >> >> == ;
rank: 804
score: 98.9203125
patch: result += new CaMeL Number ( result ) ;
rank: 805
score: 99.10271661931819
patch: result = lval ) >> >> rval CaMeL Int ;
rank: 805
score: 99.03302556818181
patch: float rval CaMeL Int = ( int ) rval ;
rank: 805
score: 99.01521439985795
patch: result = rval CaMeL Int >= rval CaMeL Int ;
rank: 805
score: 98.98761664496527
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 805
score: 98.96978759765625
patch: result = lval * rval CaMeL Int ;
rank: 805
score: 98.92030843098958
patch: break ; case Token . URSH :
rank: 806
score: 99.13987038352273
patch: result = Node . new CaMeL Number ( ) ;
rank: 806
score: 99.05374145507812
patch: result = ( lval CaMeL Int & lval CaMeL Int ;
rank: 806
score: 99.04416725852273
patch: result = rval >> >> >> rval CaMeL Int ;
rank: 806
score: 99.0321377840909
patch: buf = rval CaMeL Int >> rval CaMeL Int ;
rank: 806
score: 98.98616333007813
patch: result = lval CaMeL Int & - $NUMBER$ ;
rank: 806
score: 98.96945529513889
patch: result = lval + lval CaMeL Int ;
rank: 806
score: 98.92012329101563
patch: if ( lval CaMeL Int == lval ) {
rank: 807
score: 99.0946533203125
patch: result = 0 . >> rval CaMeL Int ;
rank: 807
score: 99.05300903320312
patch: result = ( result >> rval CaMeL Int ;
rank: 807
score: 99.04351251775569
patch: result = ( int ) rval ; return n ;
rank: 807
score: 99.03138316761364
patch: Integer rval CaMeL Int = ( int ) rval ;
rank: 807
score: 99.01413796164773
patch: this . result = lval CaMeL Int >> 1 ;
rank: 807
score: 98.96762424045139
patch: result = lval * lval CaMeL Int ;
rank: 808
score: 99.09750366210938
patch: report CaMeL Code CaMeL Change ( $STRING$ + n ) ;
rank: 808
score: 99.02930797230114
patch: v = lval CaMeL Int >> rval CaMeL Int ;
rank: 808
score: 99.01127485795455
patch: result = lval CaMeL Int == 0 ? rval ;
rank: 808
score: 98.97969360351563
patch: System . err . println ( $STRING$ ) ;
rank: 808
score: 98.91701931423611
patch: result = lval CaMeL Int >> break ;
rank: 809
score: 99.13736979166667
patch: result = Node . new = Node ( result ) ;
rank: 809
score: 99.0493496981534
patch: result = lval CaMeL Int >> lval ( 1 ;
rank: 809
score: 99.0413818359375
patch: result = lval CaMeL Int ( result ) ;
rank: 809
score: 98.97931518554688
patch: result = lval CaMeL Int & & 1 ;
rank: 809
score: 98.96656494140625
patch: result = rval CaMeL Int >> >> rval ;
rank: 809
score: 98.91586642795139
patch: result = new Node ( n ) ;
rank: 810
score: 99.09672037760417
patch: result = Node . get CaMeL Value ( result ) ;
rank: 810
score: 99.09046519886364
patch: lval = rval CaMeL Int >> rval CaMeL Int ;
rank: 810
score: 99.04774058948864
patch: result = lval CaMeL Int >> >> >> result ;
rank: 810
score: 99.02842018821023
patch: result = lval CaMeL Int >> rval >> rval ;
rank: 810
score: 98.97648315429687
patch: result = lval CaMeL Int >> >> refs ;
rank: 810
score: 98.96649169921875
patch: result = lval + ( int ) lval ;
rank: 811
score: 99.04759632457386
patch: result = lval CaMeL Int >> >> - result ;
rank: 811
score: 99.04011674360795
patch: result = result >> rval CaMeL Int ; break ;
rank: 811
score: 99.027783203125
patch: return new CaMeL Number ( result ) ; }
rank: 811
score: 98.96463012695312
patch: result = lval ( lval ) ;
rank: 811
score: 98.91002061631944
patch: result = new long ( result ) ;
rank: 812
score: 99.0276766690341
patch: x = lval CaMeL Int >> rval CaMeL Int ;
rank: 812
score: 99.00531560724431
patch: result = lval CaMeL Int >> $NUMBER$ >> $NUMBER$ ;
rank: 812
score: 98.96280517578126
patch: result = lval - ( int ) lval ;
rank: 812
score: 98.90184936523437
patch: result = new double << rval CaMeL Int ;
rank: 813
score: 99.09104225852273
patch: result = try CaMeL Fold CaMeL Shift ( ) ;
rank: 813
score: 99.044921875
patch: result = rval CaMeL Int - lval CaMeL Int ;
rank: 813
score: 99.0043612393466
patch: result = lval $NUMBER$ >> >> rval CaMeL Int ;
rank: 813
score: 98.973291015625
patch: System . out . println ( $STRING$ ) ;
rank: 813
score: 98.95940551757812
patch: double lval CaMeL Int = lval CaMeL Int ;
rank: 813
score: 98.897412109375
patch: report CaMeL Code CaMeL Change ( $STRING$ ) ;
rank: 814
score: 99.08218994140626
patch: result = lval >> & rval CaMeL Int ;
rank: 814
score: 99.02985174005681
patch: result = right . get CaMeL Type ( ) ;
rank: 814
score: 99.02643377130681
patch: return rval CaMeL Int << >> rval CaMeL Int ;
rank: 814
score: 98.97315131293402
patch: result = lval CaMeL Int * rval ;
rank: 814
score: 98.8958984375
patch: = left . get CaMeL Double ( ) ;
rank: 815
score: 99.02434747869319
patch: name = lval CaMeL Int >> rval CaMeL Int ;
rank: 815
score: 98.99331665039062
patch: int lval CaMeL Int = lval CaMeL Int ;
rank: 815
score: 98.96880425347223
patch: result = lval CaMeL Int & >> ;
rank: 815
score: 98.89567260742187
patch: result = lval CaMeL Int >> >> length ;
rank: 816
score: 99.0808993252841
patch: result = rval CaMeL Int + rval CaMeL Int ;
rank: 816
score: 98.9836181640625
patch: result = lval $NUMBER$ >> rval CaMeL Int ;
rank: 816
score: 98.95534057617188
patch: result = lval / >> >> >> rval ;
rank: 817
score: 99.12563069661458
patch: val = Node . new CaMeL Number ( result ) ;
rank: 817
score: 99.07982177734375
patch: result = lval CaMeL Int >> rval 1 ;
rank: 817
score: 99.02545720880681
patch: result = Node . new CaMeL Number ( result ,
rank: 817
score: 99.02342640269886
patch: VM = lval CaMeL Int >> rval CaMeL Int ;
rank: 817
score: 98.97867838541667
patch: result = lval CaMeL Int >= 0 ;
rank: 817
score: 98.96827528211806
patch: result = lval CaMeL Int - rval ;
rank: 817
score: 98.88516845703126
patch: result = new int . MIN _ VALUE ;
rank: 818
score: 99.0774258700284
patch: result = $STRING$ >> >> >> rval CaMeL Int ;
rank: 818
score: 98.95486886160714
patch: result = lval * lval ;
rank: 818
score: 98.88325330946181
patch: result = lval CaMeL Int << lval ;
rank: 819
score: 99.07466264204545
patch: result = lval CaMeL Int >> rval . ) ;
rank: 819
score: 99.02250532670455
patch: result = rval CaMeL Int >> >> >> rval ;
rank: 819
score: 98.97567138671874
patch: if ( result == null ) return result ;
rank: 819
score: 98.95391845703125
patch: result = lval [ lval CaMeL Int ] ;
rank: 819
score: 98.88303048270089
patch: result = rval CaMeL Int ;
rank: 820
score: 99.02114035866477
patch: n = rval CaMeL Int >> rval CaMeL Int ;
rank: 820
score: 99.02060768821023
patch: float lval CaMeL Int = ( int ) rval ;
rank: 820
score: 98.96314086914063
patch: throw new Runtime CaMeL Exception ( >> ) ;
rank: 820
score: 98.95935668945313
patch: return n . get CaMeL Value ( ) ;
rank: 820
score: 98.953857421875
patch: result = lval CaMeL Int % >> rval ;
rank: 820
score: 98.8816650390625
patch: result = new int >> rval CaMeL Int ;
rank: 821
score: 99.0697909268466
patch: result = lval 1 >> >> rval CaMeL Int ;
rank: 821
score: 99.0204745205966
patch: head = rval CaMeL Int >> rval CaMeL Int ;
rank: 821
score: 98.95928955078125
patch: result = lval CaMeL Int >> ; break ;
rank: 822
score: 99.0697909268466
patch: result = $NUMBER$ >> >> >> rval CaMeL Int ;
rank: 822
score: 98.95919799804688
patch: result = lval CaMeL Int >> > 1 ;
rank: 822
score: 98.95368041992188
patch: result = lval CaMeL Int | >> rval ;
rank: 822
score: 98.87845458984376
patch: result = FRACTIONAL _ BITWISE _ OPERAND ;
rank: 823
score: 99.06369850852273
patch: byte lval CaMeL Int = ( int ) rval ;
rank: 823
score: 98.95546875
patch: throw new Runtime CaMeL Exception ( 1 ) ;
rank: 823
score: 98.87824096679688
patch: return new CaMeL Number >> rval CaMeL Int ;
rank: 824
score: 99.0691250887784
patch: result = lval CaMeL Int > >> rval $NUMBER$ ;
rank: 824
score: 98.954541015625
patch: return new Integer ( lval CaMeL Int ) ;
rank: 824
score: 98.952001953125
patch: return lval CaMeL Int * rval CaMeL Int ;
rank: 824
score: 98.876904296875
patch: = rval CaMeL Int >> rval CaMeL Int ;
rank: 825
score: 99.1173095703125
patch: t = Node . new CaMeL Number ( result ) ;
rank: 825
score: 99.06746049360795
patch: result = Math . 0 >> rval CaMeL Int ;
rank: 825
score: 99.01323908025569
patch: result = result << >> >> rval CaMeL Int ;
rank: 825
score: 98.9585205078125
patch: result = lval CaMeL Int >> >> break ;
rank: 825
score: 98.95128173828125
patch: result = lval CaMeL Int >> |= rval ;
rank: 825
score: 98.9501708984375
patch: if ( result == null ) return lval ;
rank: 825
score: 98.87471516927083
patch: result = lval CaMeL Int << $STRING$ ;
rank: 826
score: 99.01503684303977
patch: data = lval CaMeL Int << rval CaMeL Int ;
rank: 826
score: 98.95795440673828
patch: long result = lval CaMeL Int ;
rank: 826
score: 98.94978637695313
patch: result = lval CaMeL Int & ~ rval ;
rank: 826
score: 98.87135145399306
patch: result = lval CaMeL Int << Number ;
rank: 827
score: 99.01444868607955
patch: return lval CaMeL Int << rval CaMeL Int ; }
rank: 827
score: 98.95477294921875
patch: if ( result == 0 ) return 0 ;
rank: 827
score: 98.94835205078125
patch: result = lval CaMeL Int & rval ) ;
rank: 827
score: 98.94761962890625
patch: throw new Runtime CaMeL Exception ( result ) ;
rank: 828
score: 99.02143998579545
patch: result = ( result >> lval CaMeL Int ) ;
rank: 828
score: 99.0127840909091
patch: pg = lval CaMeL Int >> rval CaMeL Int ;
rank: 828
score: 98.9518798828125
patch: result = Math . abs ( result ) ;
rank: 828
score: 98.94823540581598
patch: result = lval CaMeL Int < 0 ;
rank: 828
score: 98.86815795898437
patch: result = new CaMeL Number ( lval ) ;
rank: 829
score: 99.0578125
patch: result = rval CaMeL Int >> rval ) ;
rank: 829
score: 99.05732865767045
patch: result = new CaMeL Number << lval CaMeL Int ;
rank: 829
score: 99.01895751953126
patch: result = lval CaMeL Int >> lval $NUMBER$ ;
rank: 829
score: 99.0122403231534
patch: if ( rval CaMeL Int != rval ) break ;
rank: 829
score: 98.95085991753473
patch: throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 829
score: 98.86788330078124
patch: return n . get CaMeL Double ( ) ;
rank: 830
score: 99.0568603515625
patch: new CaMeL Number = ( int ) rval ;
rank: 830
score: 99.05659623579545
patch: result = 0 . >> >> rval CaMeL Int ;
rank: 830
score: 99.01145241477273
patch: Integer lval CaMeL Int = ( int ) rval ;
rank: 830
score: 98.94688720703125
patch: result = lval 0 * rval CaMeL Int ;
rank: 830
score: 98.8665283203125
patch: result = lval CaMeL Int >> >> $STRING$ ;
rank: 831
score: 99.01047585227273
patch: d = lval CaMeL Int >> rval CaMeL Int ;
rank: 831
score: 99.00200737847223
patch: result = rval >> rval CaMeL Int ;
rank: 831
score: 98.94636366102431
patch: if ( lval CaMeL Int != 0 ;
rank: 831
score: 98.94082302517361
patch: result = lval CaMeL Int == lval ;
rank: 831
score: 98.86599731445312
patch: result = lval CaMeL Int >> 1 ) ;
rank: 832
score: 99.05190207741477
patch: result = lval CaMeL Int >> rval . length ;
rank: 832
score: 99.01418235085227
patch: result = lval CaMeL Int >> & lval 1 ;
rank: 832
score: 98.94364624023437
patch: result = lval ( lval , lval ) ;
rank: 833
score: 99.04918323863636
patch: result = value >> >> >> rval CaMeL Int ;
rank: 833
score: 99.01198508522727
patch: int result = lval CaMeL Int >> >> 1 ;
rank: 833
score: 99.00144264914773
patch: result = n . new CaMeL Number ( ) ;
rank: 833
score: 98.94251844618056
patch: result = lval CaMeL Int >> LT ;
rank: 833
score: 98.93898010253906
patch: result = lval [ 0 ] ;
rank: 833
score: 98.86118774414062
patch: result = lval CaMeL Int << >> size ;
rank: 834
score: 99.0104647549716
patch: result = ( result & >> rval CaMeL Int ;
rank: 834
score: 99.00994318181819
patch: metadata = lval CaMeL Int >> rval CaMeL Int ;
rank: 834
score: 98.99903564453125
patch: result = rval CaMeL Int >> >> 0 ;
rank: 834
score: 98.94218139648437
patch: result = lval CaMeL Int - >> rval ;
rank: 834
score: 98.931689453125
patch: result = lval CaMeL Int >> rval ; ;
rank: 834
score: 98.85989379882812
patch: result = lval CaMeL Int >> >> left ;
rank: 835
score: 99.11163330078125
patch: result = lval CaMeL Int ++ << rval CaMeL Int ;
rank: 835
score: 99.05262340198864
patch: double rval CaMeL Int = ( int ) result ;
rank: 835
score: 99.0483065518466
patch: result = lval >> >> >> >> >> 1 ;
rank: 835
score: 99.009765625
patch: return result = lval CaMeL Int >> >> rval ;
rank: 835
score: 98.99824662642045
patch: result = result << rval CaMeL Int ; break ;
rank: 835
score: 98.93351440429687
patch: return lval >> >> >> rval CaMeL Int ;
rank: 835
score: 98.93150634765625
patch: result = lval CaMeL Int + ( int ;
rank: 835
score: 98.8597900390625
patch: result = new int 1 ( result ) ;
rank: 836
score: 99.04752974076705
patch: result = lval CaMeL Int > >> >> 1 ;
rank: 836
score: 99.0083740234375
patch: return result ; case Token . URSH :
rank: 836
score: 98.94040256076389
patch: result = lval CaMeL Int & true ;
rank: 836
score: 98.92824978298611
patch: result = rval CaMeL Int >> 1 ;
rank: 836
score: 98.85916748046876
patch: result = lval CaMeL Int >> >> right ;
rank: 837
score: 99.04889470880681
patch: int lval CaMeL Int = ( int ) result ;
rank: 837
score: 99.04707845052083
patch: result = 0 + rval CaMeL Int ;
rank: 837
score: 99.0069912997159
patch: result = lval >> >> << rval CaMeL Int ;
rank: 837
score: 98.9936767578125
patch: result = new CaMeL Number ( rval ) ;
rank: 837
score: 98.93914116753473
patch: return lval CaMeL Int / >> rval ;
rank: 837
score: 98.92935791015626
patch: result = lval CaMeL Int >> << 1 ;
rank: 837
score: 98.92547607421875
patch: result = rval CaMeL Int >> $NUMBER$ ;
rank: 837
score: 98.85756225585938
patch: result = lval CaMeL Int >> $NUMBER$ ) ;
rank: 838
score: 99.11119588216145
patch: arg = Node . new CaMeL Number ( result ) ;
rank: 838
score: 99.04740767045455
patch: result = lval CaMeL Int >> ( result ) ;
rank: 838
score: 99.0083984375
patch: result = lval CaMeL Int >> lval ) ;
rank: 838
score: 98.92523871527777
patch: result = lval CaMeL Int == 0 ;
rank: 838
score: 98.85683865017361
patch: result = new Node ( lval ) ;
rank: 839
score: 99.0048828125
patch: arg = rval CaMeL Int >> rval CaMeL Int ;
rank: 839
score: 98.9361328125
patch: assert lval CaMeL Int < lval CaMeL Int ;
rank: 839
score: 98.92479248046875
patch: result = lval CaMeL Int ; return 0 ;
rank: 839
score: 98.90303548177083
patch: result = lval CaMeL Int == rval ;
rank: 839
score: 98.85658569335938
patch: if ( rval CaMeL Int >= lval ) {
rank: 840
score: 99.04551003196023
patch: j = lval CaMeL Int >> rval CaMeL Int ;
rank: 840
score: 99.04299094460227
patch: result = lval CaMeL Int != lval CaMeL Int ;
rank: 840
score: 99.0059814453125
patch: result = result . length >> rval CaMeL Int ;
rank: 840
score: 99.00471635298295
patch: array = lval CaMeL Int << rval CaMeL Int ;
rank: 840
score: 98.98704944957386
patch: result = lval CaMeL Int << >> >> 0 ;
rank: 840
score: 98.93338012695312
patch: result = lval CaMeL Int ) ;
rank: 840
score: 98.92171630859374
patch: return 0 >> >> >> rval CaMeL Int ;
rank: 840
score: 98.89966498480902
patch: result = lval CaMeL Int >> -- ;
rank: 841
score: 99.10801188151042
patch: buf = lval CaMeL Int << >> rval CaMeL Int ;
rank: 841
score: 99.04236949573864
patch: byte rval CaMeL Int = ( int ) rval ;
rank: 841
score: 99.00486061789773
patch: result = lval CaMeL Int >> >> - lval ;
rank: 841
score: 99.00248579545455
patch: return lval CaMeL Int >> / rval CaMeL Int ;
rank: 841
score: 98.93226318359375
patch: result = lval CaMeL Int [ 1 ] ;
rank: 841
score: 98.92080078125
patch: return ( ( int ) lval CaMeL Int ;
rank: 842
score: 99.04234730113636
patch: result = lval CaMeL Int << ( 1 ) ;
rank: 842
score: 99.0391512784091
patch: result = false >> >> >> rval CaMeL Int ;
rank: 842
score: 99.0016202059659
patch: array = rval CaMeL Int >> rval CaMeL Int ;
rank: 842
score: 98.91681518554688
patch: throw new Runtime CaMeL Exception ( false ) ;
rank: 842
score: 98.88883463541667
patch: result = lval CaMeL Int - 1 ;
rank: 843
score: 99.03697620738636
patch: result = - 1 >> >> rval CaMeL Int ;
rank: 843
score: 99.00459428267045
patch: result = lval CaMeL Int >> >> 1 ; }
rank: 843
score: 98.98029119318181
patch: result = n . new CaMeL Number >> 1 ;
rank: 843
score: 98.93001980251736
patch: if ( lval CaMeL Int == lval )
rank: 843
score: 98.91353759765624
patch: result = lval >> >> lval CaMeL Int ;
rank: 843
score: 98.85279676649306
patch: result = new double ( result ) ;
rank: 844
score: 99.03607732599431
patch: result = lval CaMeL Int > >> rval ) ;
rank: 844
score: 99.00379638671875
patch: result = lval CaMeL Int >> lval result ;
rank: 844
score: 98.97838245738636
patch: result = n . get CaMeL Name ( ) ;
rank: 844
score: 98.91189914279514
patch: if ( lval CaMeL Int < 0 )
rank: 844
score: 98.852734375
patch: result = lval CaMeL Int << >> n ;
rank: 845
score: 99.03917236328125
patch: return new CaMeL Number >> ( result ) ;
rank: 845
score: 99.00360662286931
patch: result = lval CaMeL Int & >> >> lval ;
rank: 845
score: 99.00047718394886
patch: flags = lval CaMeL Int >> rval CaMeL Int ;
rank: 845
score: 98.9782381924716
patch: result = n . get CaMeL Code ( ) ;
rank: 845
score: 98.91276245117187
patch: result = lval CaMeL Int >> >> false ;
rank: 845
score: 98.90907796223958
patch: result = lval CaMeL Int - lval ;
rank: 845
score: 98.852685546875
patch: result = new long << rval CaMeL Int ;
rank: 846
score: 99.03818581321023
patch: String lval CaMeL Int = ( int ) rval ;
rank: 846
score: 98.99982244318181
patch: args = lval CaMeL Int << rval CaMeL Int ;
rank: 846
score: 98.90846761067708
patch: result = lval ? 0 : 0 ;
rank: 846
score: 98.8509765625
patch: if ( rval CaMeL Int != result ) {
rank: 847
score: 99.10523478190105
patch: b = Node . new CaMeL Number ( result ) ;
rank: 847
score: 99.03703002929687
patch: result += FRACTIONAL _ BITWISE _ OPERAND ,
rank: 847
score: 99.00025523792614
patch: result = result . get CaMeL Value ( ) ;
rank: 848
score: 99.0325039950284
patch: result = lval >> >> >> >> rval 1 ;
rank: 848
score: 98.99995561079545
patch: if ( rval CaMeL Int & rval CaMeL Int ;
rank: 848
score: 98.99640447443181
patch: result = lval CaMeL Int & rval ; break ;
rank: 848
score: 98.90576171875
patch: result = lval - lval ;
rank: 848
score: 98.86362711588542
patch: result = lval CaMeL Int / >> ;
rank: 848
score: 98.84813232421875
patch: result = lval CaMeL Int << >> result ;
rank: 849
score: 99.10371907552083
patch: pos = Node . new CaMeL Number ( result ) ;
rank: 849
score: 99.03203790838069
patch: result = lval CaMeL Int >> rval CaMeL Int lval
rank: 849
score: 98.99638227982955
patch: body = lval CaMeL Int >> rval CaMeL Int ;
rank: 849
score: 98.99553888494319
patch: result = lval CaMeL Int >> >> ( 1 ;
rank: 849
score: 98.96588134765625
patch: result = lval CaMeL Int ; return n ;
rank: 849
score: 98.9082763671875
patch: result = lval CaMeL Int ; return false ;
rank: 849
score: 98.90573459201389
patch: if ( lval CaMeL Int < lval )
rank: 849
score: 98.86171468098958
patch: result = lval CaMeL Int >> T ;
rank: 849
score: 98.847705078125
patch: if ( lval CaMeL Int >= 0 ) {
rank: 850
score: 99.03480113636364
patch: result = lval CaMeL Int << ( result ) ;
rank: 850
score: 99.02928577769886
patch: result = rval CaMeL Int >> >> >> 0 ;
rank: 850
score: 98.99594948508523
patch: p = lval CaMeL Int << rval CaMeL Int ;
rank: 850
score: 98.90265570746527
patch: result = lval CaMeL Int / lval ;
rank: 850
score: 98.90081787109375
patch: result = lval CaMeL Int >= 1 ;
rank: 850
score: 98.8470458984375
patch: result += ( int ) lval CaMeL Int ;
rank: 851
score: 99.10137939453125
patch: y = Node . new CaMeL Number ( result ) ;
rank: 851
score: 98.9949951171875
patch: dest = lval CaMeL Int >> rval CaMeL Int ;
rank: 851
score: 98.99022327769886
patch: result = lval CaMeL Int >> >> >> >> lval
rank: 851
score: 98.9640869140625
patch: result = ( ( int ) rval ) ;
rank: 851
score: 98.89783325195313
patch: result = lval CaMeL Int == - 1 ;
rank: 851
score: 98.85420057508681
patch: result = lval CaMeL Int + $NUMBER$ ;
rank: 852
score: 99.02777654474431
patch: result = true >> >> >> rval CaMeL Int ;
rank: 852
score: 98.99005681818181
patch: result = lval CaMeL Int >> >> lval ; }
rank: 852
score: 98.90054321289062
patch: result = lval CaMeL Int + ;
rank: 852
score: 98.897021484375
patch: if ( result == null ) return false ;
rank: 852
score: 98.84621853298611
patch: * / result = lval CaMeL Int ;
rank: 852
score: 98.838623046875
patch: result = new int + rval CaMeL Int ;
rank: 853
score: 99.0292635830966
patch: result = result . get CaMeL Double ( ) ;
rank: 853
score: 98.9939852627841
patch: ch = lval CaMeL Int >> rval CaMeL Int ;
rank: 853
score: 98.98883611505681
patch: result = rval CaMeL Int >> >> >> lval ;
rank: 853
score: 98.89956325954861
patch: result = lval CaMeL Int [ ] ;
rank: 853
score: 98.84556749131944
patch: if ( result == 0 ) break ;
rank: 853
score: 98.83761596679688
patch: count = ( int ) rval CaMeL Int ;
rank: 854
score: 99.02921919389205
patch: result = Node . new CaMeL Number ( result ;
rank: 854
score: 99.02398126775569
patch: result = lval CaMeL Int - >> rval ) ;
rank: 854
score: 98.99373002485795
patch: cached = lval CaMeL Int >> rval CaMeL Int ;
rank: 854
score: 98.98676091974431
patch: i = lval CaMeL Int >> rval CaMeL Int ;
rank: 854
score: 98.95704956054688
patch: result = result >> >> >> >> 1 ;
rank: 855
score: 99.09708658854167
patch: result = lval CaMeL Int << >> 1 ; break ;
rank: 855
score: 98.99363014914773
patch: result = lval CaMeL Int & result ; break ;
rank: 855
score: 98.95182495117187
patch: result = lval CaMeL Int ( n ) ;
rank: 855
score: 98.89826117621527
patch: result = lval ; lval = lval ;
rank: 856
score: 99.02858664772727
patch: int rval CaMeL Int = ( int ) result ;
rank: 856
score: 99.02069646661931
patch: result = lval CaMeL Int & >> rval ) ;
rank: 856
score: 98.99168812144886
patch: result = right . get CaMeL Long ( ) ;
rank: 856
score: 98.94832763671874
patch: report CaMeL Code CaMeL Change ( ) ; }
rank: 856
score: 98.8737564086914
patch: return lval CaMeL Int >> $NUMBER$ ;
rank: 856
score: 98.84283447265625
patch: int result = lval CaMeL Int ;
rank: 856
score: 98.83486599392361
patch: if ( rval CaMeL Int != rval )
rank: 857
score: 98.9797696200284
patch: result = rval CaMeL Int + lval CaMeL Int ;
rank: 857
score: 98.88912200927734
patch: result = lval CaMeL Int == ;
rank: 857
score: 98.84432644314236
patch: return 0 >> >> rval CaMeL Int ;
rank: 857
score: 98.84145100911458
patch: result = lval CaMeL Int | rval ;
rank: 857
score: 98.83113606770833
patch: result = new String ( result ) ;
rank: 858
score: 99.095947265625
patch: result ; report CaMeL Code CaMeL Change ( true ) ;
rank: 858
score: 99.01243760850694
patch: result = 1 >> rval CaMeL Int ;
rank: 858
score: 98.99021218039773
patch: p = rval CaMeL Int >> rval CaMeL Int ;
rank: 858
score: 98.97943670099431
patch: result = lval CaMeL Int >> & ( 1 ;
rank: 858
score: 98.88871934678819
patch: result = lval CaMeL Int ( ) ;
rank: 858
score: 98.83037651909723
patch: result = lval CaMeL Int >> ) ;
rank: 859
score: 99.0957539876302
patch: result = - rval CaMeL Int << rval CaMeL Int ;
rank: 859
score: 99.02180619673295
patch: return ( lval CaMeL Int >> >> rval ) ;
rank: 859
score: 99.00872124565973
patch: result = 0 + lval CaMeL Int ;
rank: 859
score: 98.99000133167614
patch: return lval CaMeL Int << rval CaMeL Int >> ;
rank: 859
score: 98.94003634982639
patch: result = result >> lval CaMeL Int ;
rank: 859
score: 98.88831922743056
patch: result = lval % rval CaMeL Int ;
rank: 859
score: 98.84103393554688
patch: return lval CaMeL Int >> 1 ;
rank: 859
score: 98.83422173394098
patch: result = lval CaMeL Int >> ; ;
rank: 859
score: 98.82890489366319
patch: = ( int ) rval CaMeL Int ;
rank: 860
score: 99.02060768821023
patch: return new CaMeL Number >> >> rval CaMeL Int ;
rank: 860
score: 98.98912464488636
patch: function = lval CaMeL Int >> rval CaMeL Int ;
rank: 860
score: 98.88768005371094
patch: if ( lval CaMeL Int != ;
rank: 860
score: 98.83810085720486
patch: this . lval = lval CaMeL Int ;
rank: 860
score: 98.83399793836806
patch: final int result = lval CaMeL Int ;
rank: 860
score: 98.80264621310764
patch: result = lval CaMeL Int >> Number ;
rank: 861
score: 99.0000732421875
patch: result = lval >> >> >> >> 0 ;
rank: 861
score: 98.98433061079545
patch: base = rval CaMeL Int >> rval CaMeL Int ;
rank: 861
score: 98.97847123579545
patch: result = lval CaMeL Int >> >> lval result ;
rank: 861
score: 98.93789672851562
patch: result = n >> >> rval CaMeL Int ;
rank: 861
score: 98.88069661458333
patch: result = lval CaMeL Int >> options ;
rank: 861
score: 98.82808430989583
patch: result = lval CaMeL Int != 0 ;
rank: 861
score: 98.79985894097223
patch: if ( rval CaMeL Int != lval )
rank: 862
score: 98.99998779296875
patch: result = $STRING$ >> >> rval CaMeL Int ;
rank: 862
score: 98.9840087890625
patch: return new CaMeL Number >> << rval CaMeL Int ;
rank: 862
score: 98.9779052734375
patch: if ( rval CaMeL Int != rval CaMeL Int ;
rank: 862
score: 98.87879774305556
patch: if ( lval CaMeL Int >= 0 )
rank: 862
score: 98.82603624131944
patch: if ( lval CaMeL Int == 0 ;
rank: 862
score: 98.8204116821289
patch: return result >> rval CaMeL Int ;
rank: 863
score: 99.0869140625
patch: n = Node . new CaMeL Number ( n ) ;
rank: 863
score: 98.99752807617188
patch: result = lval CaMeL Int - >> 1 ;
rank: 863
score: 98.9832763671875
patch: value = rval CaMeL Int << rval CaMeL Int ;
rank: 863
score: 98.92770724826389
patch: result = n >> rval CaMeL Int ;
rank: 863
score: 98.87667507595486
patch: result = lval ? lval : 0 ;
rank: 863
score: 98.82559543185764
patch: result = lval CaMeL Int >> extends ;
rank: 863
score: 98.81292724609375
patch: result = lval CaMeL Int ++ ;
rank: 863
score: 98.79938422309027
patch: result = lval CaMeL Int >> $STRING$ ;
rank: 864
score: 99.08638139204545
patch: result = lval CaMeL Int << >> >> $NUMBER$ ;
rank: 864
score: 99.00874633789063
patch: result = lval CaMeL Int << ( rval ;
rank: 864
score: 98.992431640625
patch: result = 0 . - rval CaMeL Int ;
rank: 864
score: 98.97621848366477
patch: result = lval CaMeL Int >> >> case 1 ;
rank: 864
score: 98.92088487413194
patch: return new Assertion CaMeL Error ( ) ;
rank: 864
score: 98.81129286024306
patch: result = lval CaMeL Int > 1 ;
rank: 864
score: 98.79828643798828
patch: result = ( int ) lval ;
rank: 865
score: 98.98235473632812
patch: return ( lval CaMeL Int != rval ) ;
rank: 865
score: 98.82310485839844
patch: throw new Error ( $STRING$ ) ;
rank: 866
score: 98.989599609375
patch: result = lval ) >> rval CaMeL Int ;
rank: 866
score: 98.98216663707386
patch: S = lval CaMeL Int >> rval CaMeL Int ;
rank: 866
score: 98.91046142578125
patch: result = new CaMeL Number ( 0 ) ;
rank: 866
score: 98.86851671006944
patch: result = lval / lval CaMeL Int ;
rank: 866
score: 98.82240295410156
patch: result = ( int ) result ;
rank: 866
score: 98.80415174696181
patch: result = lval CaMeL Int > 0 ;
rank: 867
score: 98.98671468098958
patch: result = lval >> >> rval $NUMBER$ ;
rank: 867
score: 98.98210005326705
patch: code = lval CaMeL Int >> rval CaMeL Int ;
rank: 867
score: 98.91033325195312
patch: result = lval CaMeL Int >> >> SIZE ;
rank: 867
score: 98.86814371744792
patch: result = lval * lval / lval ;
rank: 867
score: 98.79364013671875
patch: result = lval >> >> $NUMBER$ ;
rank: 868
score: 98.98665364583333
patch: result = lval >> >> >> 1 ;
rank: 868
score: 98.9080078125
patch: result = result << - rval CaMeL Int ;
rank: 868
score: 98.81685384114583
patch: result = lval CaMeL Int > >> ;
rank: 868
score: 98.79215494791667
patch: result = rval CaMeL Int >> 0 ;
rank: 869
score: 98.99092407226563
patch: result = lval : ( int ) rval ;
rank: 869
score: 98.9830322265625
patch: result = >> >> >> rval CaMeL Int ;
rank: 869
score: 98.975537109375
patch: return rval CaMeL Int != rval CaMeL Int ;
rank: 869
score: 98.96625310724431
patch: result = result . get CaMeL Code ( ) ;
rank: 870
score: 98.97536010742188
patch: return left . get CaMeL Double ( ) ;
rank: 870
score: 98.90592193603516
patch: result = result >> >> 1 ;
rank: 870
score: 98.85689544677734
patch: result = lval CaMeL Int & ;
rank: 870
score: 98.78717719184027
patch: result = lval CaMeL Int << size ;
rank: 870
score: 98.78670247395833
patch: result = lval CaMeL Int > $NUMBER$ ;
rank: 871
score: 98.962255859375
patch: result = 0 >> - rval CaMeL Int ;
rank: 871
score: 98.95941772460938
patch: result = rval CaMeL Int >> >> lval ;
rank: 871
score: 98.903466796875
patch: report CaMeL Code CaMeL Change ( false ) ;
rank: 871
score: 98.78496551513672
patch: return lval CaMeL Int >> 0 ;
rank: 871
score: 98.78354220920139
patch: result = rval CaMeL Int << result ;
rank: 872
score: 98.96032104492187
patch: result = rval CaMeL Int >> rval $NUMBER$ ;
rank: 872
score: 98.95696411132812
patch: result = ( result & rval CaMeL Int ;
rank: 872
score: 98.7847900390625
patch: result = rval CaMeL Int >> lval ;
rank: 872
score: 98.78125
patch: result = lval CaMeL Int : result ;
rank: 873
score: 98.9580078125
patch: result = lval CaMeL Int > >> 1 ;
rank: 873
score: 98.85133192274306
patch: result = lval CaMeL Int >> TRUE ;
rank: 873
score: 98.78311496310764
patch: result = lval >> lval CaMeL Int ;
rank: 873
score: 98.77452935112848
patch: result = new Integer ( result ) ;
rank: 873
score: 98.77440643310547
patch: result = lval CaMeL Int / ;
rank: 874
score: 98.96005859375
patch: if ( rval CaMeL Int <= rval ) {
rank: 874
score: 98.9562255859375
patch: if lval CaMeL Int = lval CaMeL Int ;
rank: 874
score: 98.89462890625
patch: result = rval CaMeL Int >> >> $NUMBER$ ;
rank: 874
score: 98.85075547960069
patch: result = lval >> >> >> rval ;
rank: 874
score: 98.78311496310764
patch: result = lval CaMeL Int > lval ;
rank: 874
score: 98.7736587524414
patch: result = result [ 0 ] ;
rank: 874
score: 98.76325141059027
patch: result = lval CaMeL Int != lval ;
rank: 875
score: 98.95248074001736
patch: result = lval CaMeL Int >> lval }
rank: 875
score: 98.95239868164063
patch: result = value >> >> rval CaMeL Int ;
rank: 875
score: 98.8487548828125
patch: result = lval CaMeL Int rval ;
rank: 875
score: 98.78209771050348
patch: result = lval = lval CaMeL Int ;
rank: 875
score: 98.76724243164062
patch: result = lval CaMeL Int ? ;
rank: 876
score: 98.94928588867188
patch: result = - 1 >> rval CaMeL Int ;
rank: 876
score: 98.84864637586806
patch: result = lval CaMeL Int * lval ;
rank: 876
score: 98.76681518554688
patch: double result = lval CaMeL Int ;
rank: 876
score: 98.75773111979167
patch: result = lval CaMeL Int << length ;
rank: 877
score: 98.96400146484375
patch: result = lval CaMeL Int << rval 1 ;
rank: 877
score: 98.88964233398437
patch: result = new CaMeL Number >> >> 1 ;
rank: 877
score: 98.84727647569444
patch: result = lval * lval * lval ;
rank: 877
score: 98.77961561414931
patch: result = lval [ 0 ++ ] ;
rank: 877
score: 98.75664605034723
patch: result = 1 << rval CaMeL Int ;
rank: 878
score: 98.84459092881944
patch: result = lval CaMeL Int >> >> rval
rank: 878
score: 98.73323822021484
patch: result = lval CaMeL Int ] ;
rank: 879
score: 98.93903198242188
patch: result = lval CaMeL Int >> >> rval CaMeL
rank: 879
score: 98.84317355685764
patch: result = lval * lval + 1 ;
rank: 879
score: 98.77628580729167
patch: if ( result == lval CaMeL Int ;
rank: 879
score: 98.75631374782986
patch: result = lval CaMeL Int << break ;
rank: 879
score: 98.7269515991211
patch: result = lval CaMeL Int << ;
rank: 880
score: 98.8846435546875
patch: report CaMeL Code CaMeL Change ( true ) ;
rank: 880
score: 98.84117296006944
patch: result = lval CaMeL Int * $NUMBER$ ;
rank: 880
score: 98.77333577473958
patch: result = lval CaMeL Int == 1 ;
rank: 881
score: 98.93255004882812
patch: int lval CaMeL Int = rval CaMeL Int ;
rank: 881
score: 98.91865234375
patch: result = lval CaMeL Int >> lval ; ;
rank: 881
score: 98.88430447048611
patch: result = Integer . MIN _ VALUE ;
rank: 881
score: 98.77081298828125
patch: this . result = rval CaMeL Int ;
rank: 881
score: 98.75553385416667
patch: result = lval CaMeL Int >> length ;
rank: 881
score: 98.71319580078125
patch: if ( result == 0 )
rank: 882
score: 98.9151123046875
patch: result = lval CaMeL Int & lval ) ;
rank: 882
score: 98.882666015625
patch: result = lval CaMeL Int >> >> FALSE ;
rank: 882
score: 98.83894178602431
patch: if ( lval CaMeL Int == null )
rank: 883
score: 98.92695922851563
patch: int rval CaMeL Int = rval CaMeL Int ;
rank: 883
score: 98.92589111328125
patch: result = Math . >> rval CaMeL Int ;
rank: 883
score: 98.87893676757812
patch: result = Node . lval ( result ) ;
rank: 883
score: 98.83658854166667
patch: result = lval CaMeL Int >> & ;
rank: 883
score: 98.76677110460069
patch: result = lval CaMeL Int >= $NUMBER$ ;
rank: 883
score: 98.75222439236111
patch: result += lval CaMeL Int ; break ;
rank: 883
score: 98.70967102050781
patch: if ( result == - 1 )
rank: 884
score: 98.94234619140624
patch: lval CaMeL Int = ( int ) rval ;
rank: 884
score: 98.92450561523438
patch: return null ; case Token . URSH :
rank: 884
score: 98.76600477430556
patch: result = 0 >> lval CaMeL Int ;
rank: 884
score: 98.75199381510417
patch: result = $STRING$ + rval CaMeL Int ;
rank: 884
score: 98.70691680908203
patch: if ( result == - 1 ;
rank: 885
score: 98.924658203125
patch: if = 0 >> >> rval CaMeL Int ;
rank: 885
score: 98.898876953125
patch: result = lval CaMeL Int >> lval ; }
rank: 885
score: 98.83280436197917
patch: result = lval CaMeL Int ^ rval ;
rank: 885
score: 98.76402452256944
patch: result = lval CaMeL Int >= lval ;
rank: 885
score: 98.69873046875
patch: result = lval CaMeL Int - ;
rank: 886
score: 98.92338053385417
patch: result = lval CaMeL Int - result ;
rank: 886
score: 98.87171630859375
patch: result = result >> / rval CaMeL Int ;
rank: 886
score: 98.76323784722223
patch: return lval >> >> rval CaMeL Int ;
rank: 886
score: 98.746826171875
patch: result = lval CaMeL Int >> size ;
rank: 886
score: 98.68252563476562
patch: result = 0 ;
rank: 887
score: 98.92045762803819
patch: result = 0 >> >> rval $NUMBER$ ;
rank: 887
score: 98.92038302951389
patch: return n ; case Token . RSH :
rank: 887
score: 98.87161254882812
patch: result = Node . LSH ( result ) ;
rank: 887
score: 98.82460021972656
patch: result = lval CaMeL Int >= ;
rank: 887
score: 98.75351388113839
patch: return ( int ) lval ;
rank: 887
score: 98.68211146763393
patch: if ( result == lval )
rank: 888
score: 98.9175537109375
patch: result = 0 >> >> lval CaMeL Int ;
rank: 888
score: 98.89439697265625
patch: result = lval CaMeL Int & lval $NUMBER$ ;
rank: 888
score: 98.87142944335938
patch: result = ( ( int ) result ) ;
rank: 888
score: 98.82453070746527
patch: result = lval CaMeL Int | lval ;
rank: 888
score: 98.75196838378906
patch: throw new Runtime CaMeL Exception ( ;
rank: 888
score: 98.73844401041667
patch: result = rval CaMeL Int << 1 ;
rank: 888
score: 98.67945207868304
patch: lval = lval CaMeL Int ;
rank: 889
score: 98.9272705078125
patch: return lval CaMeL Int << lval CaMeL Int ;
rank: 889
score: 98.82301161024306
patch: if ( lval CaMeL Int > 0 )
rank: 889
score: 98.75167846679688
patch: result = lval >> >> 1 ;
rank: 890
score: 99.0263338955966
patch: result = lval CaMeL Int 1 ( result ) ;
rank: 890
score: 98.91505737304688
patch: { result = lval CaMeL Int >> rval ;
rank: 890
score: 98.91236029730902
patch: result = $NUMBER$ >> rval CaMeL Int ;
rank: 890
score: 98.88845825195312
patch: result = result >> & rval CaMeL Int ;
rank: 890
score: 98.822265625
patch: if ( lval CaMeL Int == 1 )
rank: 890
score: 98.73706732855902
patch: result = new CaMeL Number ( ) ;
rank: 891
score: 98.92529296875
patch: result = lval CaMeL Int << ( ) ;
rank: 891
score: 98.91168891059027
patch: result = lval CaMeL Int > result ;
rank: 891
score: 98.91067504882812
patch: if = lval CaMeL Int >> >> 1 ;
rank: 891
score: 98.88546142578124
patch: result = lval CaMeL Int & >> lval ;
rank: 891
score: 98.81771850585938
patch: result = lval CaMeL Int > ;
rank: 891
score: 98.73493109809027
patch: result = new Node ( left ) ;
rank: 891
score: 98.65020751953125
patch: result = lval CaMeL Int ; }
rank: 892
score: 98.91017456054688
patch: return true ; case Token . URSH :
rank: 892
score: 98.907470703125
patch: result = false >> >> rval CaMeL Int ;
rank: 892
score: 98.8837890625
patch: result = lval CaMeL Int >> rval result ;
rank: 892
score: 98.849853515625
patch: result = $STRING$ << rval CaMeL Int ;
rank: 892
score: 98.789794921875
patch: if ( lval CaMeL Int ;
rank: 892
score: 98.73475864955357
patch: result += rval CaMeL Int ;
rank: 892
score: 98.72846221923828
patch: result = lval [ 1 ] ;
rank: 892
score: 98.63916015625
patch: result = result ;
rank: 893
score: 98.90942993164063
patch: result = lval CaMeL Int << rval $NUMBER$ ;
rank: 893
score: 98.88258056640625
patch: result = lval CaMeL Int & >> $NUMBER$ ;
rank: 893
score: 98.77684674944196
patch: result = lval / lval ;
rank: 893
score: 98.73213704427083
patch: result = new Double ( result ) ;
rank: 893
score: 98.6175028483073
patch: for ( ; ; )
rank: 894
score: 99.01601340553977
patch: return Node . new CaMeL Number ( lval ) ;
rank: 894
score: 98.90743408203124
patch: return rval CaMeL Int << lval CaMeL Int ;
rank: 894
score: 98.90277709960938
patch: result = lval CaMeL Int - rval ) ;
rank: 894
score: 98.76483154296875
patch: result = lval ; ;
rank: 894
score: 98.72728814019098
patch: result = new Object ( result ) ;
rank: 894
score: 98.61300223214286
patch: if ( result == 0 ;
rank: 895
score: 98.89612494574652
patch: result = 0 ; result = 0 ;
rank: 895
score: 98.83194308810764
patch: result = - ( int ) rval ;
rank: 895
score: 98.76432800292969
patch: result = lval CaMeL Int . ;
rank: 895
score: 98.7266845703125
patch: switch ( rval CaMeL Int ) {
rank: 895
score: 98.72017669677734
patch: return result >> >> >> 1 ;
rank: 895
score: 98.59912109375
patch: long result = 0 ;
rank: 896
score: 98.86759033203126
patch: result = ( result & lval CaMeL Int ;
rank: 896
score: 98.81220838758681
patch: result = n << rval CaMeL Int ;
rank: 896
score: 98.76235961914062
patch: result = lval CaMeL Int ( ;
rank: 896
score: 98.72376844618056
patch: result = lval CaMeL Int <= lval ;
rank: 896
score: 98.58936418805804
patch: if ( result == null )
rank: 897
score: 98.9083984375
patch: return try CaMeL Fold CaMeL Shift ( ) ;
rank: 897
score: 98.90440673828125
patch: return right . get CaMeL Double ( ) ;
rank: 897
score: 98.87959798177083
patch: result = lval CaMeL Int rval null ;
rank: 897
score: 98.8670166015625
patch: result = lval CaMeL Int < >> 1 ;
rank: 897
score: 98.79550509982639
patch: result = $STRING$ >> rval CaMeL Int ;
rank: 897
score: 98.75910186767578
patch: result = lval CaMeL Int * ;
rank: 897
score: 98.72099473741319
patch: result = new int ( lval ) ;
rank: 897
score: 98.6890869140625
patch: return 0 >> rval CaMeL Int ;
rank: 898
score: 98.75693184988839
patch: result = lval + lval ;
rank: 898
score: 98.72083875868056
patch: if ( ! rval CaMeL Int ) {
rank: 898
score: 98.68695068359375
patch: return lval CaMeL Int ;
rank: 898
score: 98.58299037388393
patch: long result = - 1 ;
rank: 899
score: 98.90395779079861
patch: result = rval CaMeL Int >> rval ;
rank: 899
score: 98.90308837890625
patch: result = lval CaMeL Int >> : n ;
rank: 899
score: 98.78556993272569
patch: result = ( int ) rval ; }
rank: 899
score: 98.75198364257812
patch: result = lval >> >> rval ;
rank: 899
score: 98.72003173828125
patch: add ( lval CaMeL Int ) ;
rank: 899
score: 98.57271030970982
patch: if ( result != 0 )
rank: 900
score: 98.85144721137152
patch: result = lval CaMeL Int < 1 ;
rank: 900
score: 98.84608289930556
patch: result = lval CaMeL Int rval ) ;
rank: 900
score: 98.77983262803819
patch: result = lval - rval CaMeL Int ;
rank: 900
score: 98.66883850097656
patch: result = result >> >> $NUMBER$ ;
rank: 900
score: 98.56517537434895
patch: result = - 1 ;
rank: 901
score: 98.84549289279514
patch: result = lval >> >> rval ) ;
rank: 901
score: 98.73411560058594
patch: result = lval * / lval ;
rank: 901
score: 98.70990753173828
patch: result = lval CaMeL Int -- ;
rank: 901
score: 98.66569519042969
patch: return result >> lval CaMeL Int ;
rank: 902
score: 99.01066450639205
patch: result = lval CaMeL Int << rval CaMeL Int ,
rank: 902
score: 98.90184326171875
patch: result = lval >> << rval CaMeL Int ;
rank: 902
score: 98.77262369791667
patch: throw new Assertion CaMeL Error ( ) ;
rank: 902
score: 98.72264099121094
patch: return lval CaMeL Int / rval ;
rank: 902
score: 98.70774841308594
patch: result = new Node ( ) ;
rank: 902
score: 98.66039167131696
patch: result = lval >> 1 ;
rank: 902
score: 98.54939488002232
patch: if ( result != lval )
rank: 903
score: 99.01056463068181
patch: result = lval CaMeL Int >> rval CaMeL Int ,
rank: 903
score: 98.89979858398438
patch: result = lval CaMeL Int >> >> ) ;
rank: 903
score: 98.89068603515625
patch: double rval = ( int ) rval ;
rank: 903
score: 98.8377685546875
patch: result = >> >> rval CaMeL Int ;
rank: 903
score: 98.71353149414062
patch: assert lval CaMeL Int < 0 ;
rank: 903
score: 98.68817138671875
patch: = ( int ) rval ;
rank: 903
score: 98.6599349975586
patch: result = rval CaMeL Int >> ;
rank: 903
score: 98.54514857700893
patch: if ( result == null ;
rank: 904
score: 99.00776811079545
patch: t = lval CaMeL Int >> rval CaMeL Int ;
rank: 904
score: 98.83336046006944
patch: result = lval >> >> rval 1 ;
rank: 904
score: 98.76979573567708
patch: error ( $STRING$ ) ; return n ;
rank: 904
score: 98.65039825439453
patch: return result >> >> - 1 ;
rank: 904
score: 98.52099609375
patch: int result = 0 ;
rank: 905
score: 98.89392852783203
patch: result = lval CaMeL Int >> >>
rank: 905
score: 98.86315239800348
patch: return ( ( int ) rval ) ;
rank: 905
score: 98.82645670572917
patch: result = lval >> >> >> $NUMBER$ ;
rank: 905
score: 98.80603705512152
patch: result = lval CaMeL Int >> >> lval
rank: 905
score: 98.7079086303711
patch: this . lval CaMeL Int ++ ;
rank: 905
score: 98.66393280029297
patch: break ; case Token . RSH :
rank: 905
score: 98.64425659179688
patch: return lval CaMeL Int >> false ;
rank: 905
score: 98.51243373325893
patch: int result = - 1 ;
rank: 906
score: 99.00390625
patch: result = lval CaMeL Int = ( result ) ;
rank: 906
score: 98.89358520507812
patch: return false ; case Token . URSH :
rank: 906
score: 98.85696411132812
patch: result = ( Node ) rval ;
rank: 906
score: 98.79121229383681
patch: result = lval CaMeL Int . 1 ;
rank: 906
score: 98.70111846923828
patch: if ( result == lval ) {
rank: 906
score: 98.642822265625
patch: return 0 >> lval CaMeL Int ;
rank: 906
score: 98.5042724609375
patch: value = lval CaMeL Int ;
rank: 907
score: 98.855712890625
patch: int rval = ( int ) rval ;
rank: 907
score: 98.8245849609375
patch: result = lval >> >> >> 0 ;
rank: 907
score: 98.79028998480902
patch: result = 1 >> lval CaMeL Int ;
rank: 907
score: 98.76491292317708
patch: result = Number . MIN _ VALUE ;
rank: 907
score: 98.70057678222656
patch: result = lval / >> rval ;
rank: 907
score: 98.65711321149554
patch: result = new int ) ;
rank: 907
score: 98.64225769042969
patch: return lval CaMeL Int >> lval ;
rank: 907
score: 98.48857770647321
patch: result = ; return result ;
rank: 908
score: 98.7596664428711
patch: result = ( int ) n ;
rank: 908
score: 98.6995849609375
patch: if ( lval CaMeL Int == ;
rank: 908
score: 98.65316336495536
patch: result = MAX _ VALUE ;
rank: 908
score: 98.64071219308036
patch: result = result >> 1 ;
rank: 908
score: 98.46978759765625
patch: if ( result != 0 ;
rank: 909
score: 99.00205300071023
patch: double new CaMeL Number = ( int ) rval ;
rank: 909
score: 98.84345160590277
patch: double lval = ( int ) rval ;
rank: 909
score: 98.783203125
patch: result = >> rval CaMeL Int ;
rank: 909
score: 98.63804626464844
patch: return result >> >> >> $NUMBER$ ;
rank: 909
score: 98.4622314453125
patch: result = 1 ;
rank: 910
score: 98.88825073242188
patch: if ( rval CaMeL Int < rval ) {
rank: 910
score: 98.80457221137152
patch: result = 0 >> >> rval 1 ;
rank: 910
score: 98.77886962890625
patch: result = lval CaMeL Int + result ;
rank: 910
score: 98.67952728271484
patch: return lval CaMeL Int >> rval ;
rank: 910
score: 98.44989013671875
patch: final int result = 0 ;
rank: 911
score: 99.00016645951705
patch: x = lval CaMeL Int << rval CaMeL Int ;
rank: 911
score: 98.88793267144098
patch: return new CaMeL Number ( rval ) ;
rank: 911
score: 98.83336724175348
patch: result = new result ( result ) ;
rank: 911
score: 98.80002848307292
patch: result = lval >> >> rval null ;
rank: 911
score: 98.75354682074652
patch: result = 0 << rval CaMeL Int ;
rank: 911
score: 98.6759033203125
patch: result = lval * lval / ;
rank: 911
score: 98.64613647460938
patch: result = null ;
rank: 911
score: 98.43362862723214
patch: for ( ; ; ; )
rank: 912
score: 98.88716125488281
patch: return lval CaMeL Int << rval ;
rank: 912
score: 98.82941351996527
patch: result = Node . lval CaMeL Int ;
rank: 912
score: 98.79586452907986
patch: result = 1 + lval CaMeL Int ;
rank: 912
score: 98.77107069227431
patch: result = lval CaMeL Int : 1 ;
rank: 912
score: 98.63906860351562
patch: return new Node ( result ) ;
rank: 912
score: 98.6261215209961
patch: return lval CaMeL Int >> >> ;
rank: 912
score: 98.4166768391927
patch: synchronized ( this ) {
rank: 913
score: 98.77985297309027
patch: result = 1 + rval CaMeL Int ;
rank: 913
score: 98.77105712890625
patch: result = rval CaMeL Int & lval ;
rank: 913
score: 98.74347686767578
patch: n = ( int ) rval ;
rank: 913
score: 98.65919712611607
patch: this . result = lval ;
rank: 913
score: 98.63280487060547
patch: result = ( Integer ) rval ;
rank: 913
score: 98.62092590332031
patch: int lval CaMeL Int = 0 ;
rank: 913
score: 98.41214425223214
patch: result = ; return n ;
rank: 914
score: 98.777587890625
patch: result = 0 >> >> >> 1 ;
rank: 914
score: 98.64200265066964
patch: result = lval * $NUMBER$ ;
rank: 914
score: 98.62832641601562
patch: result = new int ( ) ;
rank: 914
score: 98.6207275390625
patch: return rval CaMeL Int >> 1 ;
rank: 915
score: 98.77519226074219
patch: result = - rval CaMeL Int ;
rank: 915
score: 98.63424246651786
patch: result = lval / $NUMBER$ ;
rank: 915
score: 98.62493133544922
patch: Node new CaMeL Number = null ;
rank: 915
score: 98.39175851004464
patch: for ( ; ; ) {
rank: 916
score: 98.77501085069444
patch: result = 0 == rval CaMeL Int ;
rank: 916
score: 98.62990897042411
patch: result = lval / rval ;
rank: 916
score: 98.6239013671875
patch: case Token . URSH :
rank: 916
score: 98.6203384399414
patch: } result = lval CaMeL Int ;
rank: 917
score: 98.7728271484375
patch: result = lval CaMeL Int .
rank: 917
score: 98.70845031738281
patch: result = - lval CaMeL Int ;
rank: 917
score: 98.6207046508789
patch: result = lval CaMeL Int 1 ;
rank: 917
score: 98.61683654785156
patch: return rval CaMeL Int >> $NUMBER$ ;
rank: 918
score: 98.86294216579861
patch: result = lval CaMeL Int & false ;
rank: 918
score: 98.77110460069444
patch: result = 0 >> >> rval ) ;
rank: 918
score: 98.70230538504464
patch: result -= lval CaMeL Int ;
rank: 918
score: 98.60935974121094
patch: result = ( String ) rval ;
rank: 918
score: 98.60253034319196
patch: return result >> >> 1 ;
rank: 918
score: 98.58688790457589
patch: result = lval * 0 ;
rank: 918
score: 98.34084065755208
patch: boolean result = false ;
rank: 919
score: 98.86140272352431
patch: result = lval CaMeL Int >> rval CaMeL
rank: 919
score: 98.76957872178819
patch: result = lval CaMeL Int >> null ;
rank: 919
score: 98.74485948350694
patch: result = lval CaMeL Int & ) ;
rank: 919
score: 98.68766021728516
patch: result = lval ( result ) ;
rank: 919
score: 98.60541643415179
patch: result = new int 0 ;
rank: 919
score: 98.56778390066964
patch: result = lval >> $NUMBER$ ;
rank: 919
score: 98.29283650716145
patch: double result = 0 ;
rank: 920
score: 98.85492621527777
patch: result = lval CaMeL Int >> >> >>
rank: 920
score: 98.79635281032986
patch: result = lval : lval CaMeL Int ;
rank: 920
score: 98.57178606305804
patch: this = lval CaMeL Int ;
rank: 920
score: 98.27759806315105
patch: if ( result == ;
rank: 921
score: 98.79474555121527
patch: result = lval CaMeL Int >> >> }
rank: 921
score: 98.56045096261161
patch: result = lval * rval ;
rank: 921
score: 98.54088483537946
patch: result = lval >> 0 ;
rank: 921
score: 98.264208984375
patch: result = false ;
rank: 922
score: 98.79450819227431
patch: result = new Token ( $STRING$ ) ;
rank: 922
score: 98.75944688585069
patch: result = 0 - rval CaMeL Int ;
rank: 922
score: 98.66787719726562
patch: Node new CaMeL Number = result ;
rank: 922
score: 98.59917340959821
patch: result = lval CaMeL Int >>
rank: 922
score: 98.54318673270089
patch: result = lval * / ;
rank: 922
score: 98.2607421875
patch: * / return n ;
rank: 923
score: 98.85092502170139
patch: return rval ; case Token . RSH :
rank: 923
score: 98.73247612847223
patch: lval = lval CaMeL Int >> lval ;
rank: 923
score: 98.53242710658482
patch: this . lval = lval ;
rank: 923
score: 98.47584751674107
patch: result = result >> $NUMBER$ ;
rank: 923
score: 98.257568359375
patch: long result = result ;
rank: 924
score: 98.84575737847223
patch: result = lval CaMeL Int != rval ;
rank: 924
score: 98.78819274902344
patch: result = ( double ) rval ;
rank: 924
score: 98.6661148071289
patch: result = result ; return n ;
rank: 924
score: 98.52078683035714
patch: result = lval - result ;
rank: 924
score: 98.46441650390625
patch: return lval CaMeL Int >> ;
rank: 924
score: 98.24391682942708
patch: result = ( int ;
rank: 925
score: 98.66594696044922
patch: replace CaMeL Child ( result ) ;
rank: 925
score: 98.51557268415179
patch: result = lval ( ) ;
rank: 925
score: 98.4369608561198
patch: return result >> 1 ;
rank: 925
score: 98.24088541666667
patch: assert result != 0 ;
rank: 926
score: 98.78675672743056
patch: result = lval CaMeL Int & $STRING$ ;
rank: 926
score: 98.65454864501953
patch: result ( lval CaMeL Int ) ;
rank: 926
score: 98.57748413085938
patch: result = lval CaMeL Int << }
rank: 926
score: 98.43327985491071
patch: result = result >> 0 ;
rank: 926
score: 98.22576904296875
patch: result = $STRING$ ;
rank: 927
score: 98.83563232421875
patch: result = lval CaMeL Int < result ;
rank: 927
score: 98.65484619140625
patch: result = lval CaMeL Int . else
rank: 927
score: 98.51131766183036
patch: result = lval - 1 ;
rank: 927
score: 98.43072509765625
patch: return result >> 0 ;
rank: 927
score: 98.2038065592448
patch: assert result == 0 ;
rank: 928
score: 98.90211995442708
patch: result = lval CaMeL Int + n ;
rank: 928
score: 98.83437093098958
patch: result = new Node ( rval ) ;
rank: 928
score: 98.78426361083984
patch: j = ( int ) rval ;
rank: 928
score: 98.64450073242188
patch: result = 0 >> >> 1 ;
rank: 928
score: 98.6441650390625
patch: result = new ( result ) ;
rank: 928
score: 98.63175201416016
patch: result = >> lval CaMeL Int ;
rank: 928
score: 98.57333374023438
patch: result = ( Number ) rval ;
rank: 928
score: 98.50356038411458
patch: result = lval 0 ;
rank: 928
score: 98.1929219563802
patch: result = lval ) ;
rank: 929
score: 98.78188747829861
patch: return new Assertion CaMeL Error ( ) {
rank: 929
score: 98.6363296508789
patch: result = ( int ) right ;
rank: 929
score: 98.57176208496094
patch: result = ( int ) 0 ;
rank: 929
score: 98.49901471819196
patch: if ( lval > 0 )
rank: 929
score: 98.4024658203125
patch: return ( int ) result ;
rank: 929
score: 98.18861694335938
patch: result = true ;
rank: 930
score: 98.82716200086806
patch: return n ; case Token . LSH :
rank: 930
score: 98.77937147352431
patch: final Node new CaMeL Number = result ;
rank: 930
score: 98.60792541503906
patch: result = result >> >> lval ;
rank: 930
score: 98.52874755859375
patch: return ( int ) rval ;
rank: 930
score: 98.49888392857143
patch: if ( lval >= 0 )
rank: 930
score: 98.16807047526042
patch: int result = result ;
rank: 931
score: 98.82200113932292
patch: return result ; case Token . RSH :
rank: 931
score: 98.60485076904297
patch: result = lval >> & 1 ;
rank: 931
score: 98.50338309151786
patch: result = lval CaMeL Int <<
rank: 931
score: 98.49708775111607
patch: result = lval ^ lval ;
rank: 931
score: 98.16344197591145
patch: lval = - 1 ;
rank: 932
score: 98.76209368024554
patch: result = new CaMeL Number ;
rank: 932
score: 98.59415435791016
patch: result = lval CaMeL Int >> lval
rank: 932
score: 98.49501255580357
patch: double lval CaMeL Int = ;
rank: 932
score: 98.42172677176339
patch: result = MIN _ VALUE ;
rank: 932
score: 98.1462646484375
patch: lval = 0 ;
rank: 933
score: 98.8101806640625
patch: result = lval CaMeL Int >= result ;
rank: 933
score: 98.62010192871094
patch: result = Node . new null ;
rank: 933
score: 98.56908307756696
patch: result = Math . 0 ;
rank: 933
score: 98.4932861328125
patch: result = lval / * /
rank: 933
score: 98.36469116210938
patch: return ( int ;
rank: 933
score: 98.14577229817708
patch: long result = 1 ;
rank: 934
score: 98.71493530273438
patch: result = new Token ( ) ;
rank: 934
score: 98.61802673339844
patch: result = result >> >> 0 ;
rank: 934
score: 98.56422642299107
patch: result = lval . null ;
rank: 934
score: 98.48495919363839
patch: result = lval - 0 ;
rank: 934
score: 98.13240051269531
patch: result = ;
rank: 935
score: 98.70336151123047
patch: result += ( int ) rval ;
rank: 935
score: 98.61646379743304
patch: result = result << 1 ;
rank: 935
score: 98.55956159319196
patch: result = lval ; break ;
rank: 935
score: 98.47957938058036
patch: result = lval && lval ;
rank: 935
score: 98.39986746651786
patch: if ( ! lval ) {
rank: 935
score: 98.30866241455078
patch: return result ;
rank: 935
score: 98.13116455078125
patch: assert result != null ;
rank: 936
score: 98.801025390625
patch: return rval CaMeL Int >> >> rval ;
rank: 936
score: 98.6136474609375
patch: result = result << >> 1 ;
rank: 936
score: 98.55865478515625
patch: result = result >> lval ;
rank: 936
score: 98.47641427176339
patch: result = lval | lval ;
rank: 936
score: 98.38832600911458
patch: result = new int ;
rank: 936
score: 98.3058369954427
patch: return rval CaMeL Int ;
rank: 936
score: 98.11947631835938
patch: return n ;
rank: 937
score: 98.7999496459961
patch: return rval CaMeL Int << rval ;
rank: 937
score: 98.70289829799107
patch: result = lval : $STRING$ ;
rank: 937
score: 98.48544747488839
patch: result = result . lval ;
rank: 937
score: 98.47410365513393
patch: result = lval ? lval ;
rank: 937
score: 98.30154418945312
patch: return result >> $NUMBER$ ;
rank: 937
score: 98.11307779947917
patch: if lval CaMeL Int ;
rank: 938
score: 98.79817030164931
patch: return lval CaMeL Int >> << rval ;
rank: 938
score: 98.45774623325893
patch: result = 0 >> lval ;
rank: 938
score: 98.35991559709821
patch: result -= rval CaMeL Int ;
rank: 938
score: 98.26957194010417
patch: return ( ( int ;
rank: 938
score: 98.11088053385417
patch: synchronized ( result ) {
rank: 939
score: 98.35687255859375
patch: result = 0 ; break ;
rank: 939
score: 98.25996907552083
patch: return ( ( String ;
rank: 939
score: 98.10555013020833
patch: this . return n ;
rank: 940
score: 98.58978271484375
patch: result = 0 ; return n ;
rank: 940
score: 98.4486592610677
patch: result = lval * ;
rank: 940
score: 98.35552106584821
patch: result = new int result ;
rank: 940
score: 98.25568389892578
patch: return 0 ;
rank: 940
score: 98.09498087565105
patch: boolean result = true ;
rank: 941
score: 98.58575439453125
patch: result = n . new null ;
rank: 941
score: 98.44573974609375
patch: L = lval CaMeL Int ;
rank: 941
score: 98.44163295200893
patch: result = lval lval null ;
rank: 941
score: 98.36970738002232
patch: result = result . null ;
rank: 941
score: 98.35160609654018
patch: result = lval . result ;
rank: 941
score: 98.2359619140625
patch: return result >> >> ;
rank: 941
score: 98.09414672851562
patch: long result = lval ;
rank: 942
score: 98.55869838169643
patch: n = lval CaMeL Int ;
rank: 942
score: 98.43812779017857
patch: if = lval CaMeL Int ;
rank: 942
score: 98.43266950334821
patch: result = lval + 1 ;
rank: 942
score: 98.36263602120536
patch: result = result . result ;
rank: 942
score: 98.0910135904948
patch: int result = 1 ;
rank: 943
score: 98.78184678819444
patch: result = lval CaMeL Int <= rval ;
rank: 943
score: 98.43117850167411
patch: result = lval ( lval ;
rank: 943
score: 98.41105433872768
patch: result = 0 + result ;
rank: 943
score: 98.20864868164062
patch: result = lval >> ;
rank: 943
score: 98.07164510091145
patch: return n . result ;
rank: 944
score: 98.78049045138889
patch: result = lval CaMeL Int == result ;
rank: 944
score: 98.63401794433594
patch: pos = ( int ) rval ;
rank: 944
score: 98.40278843470982
patch: result = lval . null .
rank: 944
score: 98.28381958007813
patch: result = $NUMBER$ ;
rank: 944
score: 98.06793212890625
patch: long result = null ;
rank: 945
score: 98.7752685546875
patch: return ( int ) rval CaMeL Int ;
rank: 945
score: 98.6182861328125
patch: result = lval CaMeL Int << (
rank: 945
score: 98.51627022879464
patch: result = result << 0 ;
rank: 945
score: 98.38155110677083
patch: result = lval ++ ;
rank: 945
score: 98.33706229073661
patch: result = $NUMBER$ >> lval ;
rank: 945
score: 98.16190592447917
patch: result = >> 1 ;
rank: 945
score: 98.06065877278645
patch: return n + 1 ;
rank: 946
score: 98.77435302734375
patch: result = lval CaMeL Int | result ;
rank: 946
score: 98.75147840711806
patch: result = new Long ( result ) ;
rank: 946
score: 98.60528564453125
patch: result = new result ( ) ;
rank: 946
score: 98.37998453776042
patch: result = lval ( ;
rank: 946
score: 98.336669921875
patch: result = >> >> lval ;
rank: 946
score: 98.27426147460938
patch: if ( lval ) {
rank: 946
score: 98.05223592122395
patch: if ; return n ;
rank: 947
score: 98.45418875558036
patch: result = lval >> rval ;
rank: 947
score: 98.36776733398438
patch: result = lval 1 ;
rank: 947
score: 98.12227376302083
patch: return 0 >> 0 ;
rank: 947
score: 98.04781087239583
patch: double result = result ;
rank: 948
score: 98.54059709821429
patch: result = Node . class ;
rank: 948
score: 98.43564278738839
patch: result = rval >> 0 ;
rank: 948
score: 98.04669189453125
patch: this . return 0 ;
rank: 949
score: 98.76639811197917
patch: return rval CaMeL Int >> >> >> ;
rank: 949
score: 98.64881896972656
patch: result = lval ; return n ;
rank: 949
score: 98.36866978236607
patch: result = 0 >> 0 ;
rank: 949
score: 98.32197788783482
patch: result = 1 >> lval ;
rank: 949
score: 98.30237833658855
patch: double lval CaMeL Int ;
rank: 949
score: 98.25371551513672
patch: result ++ ;
rank: 949
score: 98.0916748046875
patch: return result >> lval ;
rank: 949
score: 98.03829956054688
patch: synchronized ( this )
rank: 950
score: 98.74520874023438
patch: value = ( int ) rval ;
rank: 950
score: 98.41998291015625
patch: result = result >> rval ;
rank: 950
score: 98.3004659016927
patch: result = lval / ;
rank: 950
score: 98.2250467936198
patch: case Token . RSH :
rank: 950
score: 98.07737223307292
patch: return lval >> 0 ;
rank: 950
score: 98.03739420572917
patch: * / return result ;
rank: 951
score: 98.49677385602679
patch: result = false ; break ;
rank: 951
score: 98.35483224051339
patch: result = lval >> >> ;
rank: 951
score: 98.2223409016927
patch: add ( lval ) ;
rank: 951
score: 98.07223510742188
patch: result = result >> ;
rank: 951
score: 98.03018188476562
patch: this . result = ;
rank: 952
score: 98.73046875
patch: return rval CaMeL Int >> >> ;
rank: 952
score: 98.61723327636719
patch: error ( lval CaMeL Int ) ;
rank: 952
score: 98.4967041015625
patch: return ( Node ) rval ;
rank: 952
score: 98.40747680664063
patch: result = n ;
rank: 952
score: 98.34538922991071
patch: result = this . result ;
rank: 952
score: 98.25912475585938
patch: double result = lval ;
rank: 952
score: 98.2201436360677
patch: result = lval CaMeL Int
rank: 952
score: 98.06863403320312
patch: = lval CaMeL Int ;
rank: 952
score: 98.00825805664063
patch: result = rval ;
rank: 953
score: 98.72357177734375
patch: return rval CaMeL Int >> rval ;
rank: 953
score: 98.492431640625
patch: result = true ; break ;
rank: 953
score: 98.21986897786458
patch: return new CaMeL Number ;
rank: 953
score: 98.05723063151042
patch: return 0 >> 1 ;
rank: 954
score: 98.224365234375
patch: result = lval $NUMBER$ ;
rank: 954
score: 98.2124532063802
patch: if ( rval ) {
rank: 954
score: 97.94066772460937
patch: synchronized ( this ;
rank: 955
score: 98.21319580078125
patch: return lval ;
rank: 955
score: 98.17616780598958
patch: result ; return n ;
rank: 955
score: 97.90139770507812
patch: synchronized ( result )
rank: 956
score: 98.39384242466518
patch: result = rval >> 1 ;
rank: 956
score: 98.16505940755208
patch: switch ( lval ) {
rank: 956
score: 98.03213500976562
patch: return 0 >> $NUMBER$ ;
rank: 956
score: 97.89166870117188
patch: lval = lval ;
rank: 957
score: 98.41123744419643
patch: result = Node . NUMBER ;
rank: 957
score: 98.24388631184895
patch: result = lval result ;
rank: 957
score: 98.11654663085938
patch: throw ( lval ) ;
rank: 957
score: 98.02903238932292
patch: / * * * /
rank: 957
score: 97.88170776367187
patch: if ( result ;
rank: 958
score: 98.147412109375
patch: result = left ;
rank: 958
score: 98.13368733723958
patch: double lval = lval ;
rank: 958
score: 98.10337320963542
patch: result = result ; ;
rank: 958
score: 97.934521484375
patch: return ( double ;
rank: 958
score: 97.87376098632812
patch: value = 0 ;
rank: 959
score: 98.68292236328125
patch: result = << rval CaMeL Int ;
rank: 959
score: 98.37871442522321
patch: result = lval << 1 ;
rank: 959
score: 98.13101196289062
patch: return n ; default :
rank: 959
score: 97.93030395507813
patch: return ( result ;
rank: 959
score: 97.84671630859376
patch: for ( ; )
rank: 960
score: 98.6750259399414
patch: buf = ( int ) rval ;
rank: 960
score: 98.12633260091145
patch: result = lval -- ;
rank: 960
score: 98.11897786458333
patch: result ++ ; break ;
rank: 960
score: 97.91214599609376
patch: return result >> ;
rank: 961
score: 98.46267700195312
patch: Node new CaMeL Number ;
rank: 961
score: 98.38617815290179
patch: result = result ; break ;
rank: 961
score: 98.37607247488839
patch: result = result ( ) ;
rank: 961
score: 98.18489583333333
patch: result = lval ; {
rank: 961
score: 98.088134765625
patch: add ( result ) ;
rank: 961
score: 98.06006876627605
patch: result = ( result ;
rank: 961
score: 97.88436889648438
patch: return result ; }
rank: 961
score: 97.81212158203125
patch: return - 1 ;
rank: 962
score: 98.66448974609375
patch: return rval CaMeL Int ; break ;
rank: 962
score: 98.37180873325893
patch: result = result << $NUMBER$ ;
rank: 962
score: 98.07613118489583
patch: switch ( result ) {
rank: 962
score: 97.86239624023438
patch: return ( String ;
rank: 962
score: 97.75994873046875
patch: ok = false ;
rank: 963
score: 98.65882873535156
patch: head = ( int ) rval ;
rank: 963
score: 98.44728306361607
patch: result = null ; break ;
rank: 963
score: 98.3802490234375
patch: return new CaMeL Number ; }
rank: 963
score: 98.32118733723958
patch: error ( $STRING$ ) ;
rank: 963
score: 98.11082967122395
patch: return lval ; default :
rank: 963
score: 98.0611572265625
patch: = rval CaMeL Int ;
rank: 963
score: 97.85304565429688
patch: return ( ) ;
rank: 963
score: 97.73775634765624
patch: lval = result ;
rank: 964
score: 98.65498352050781
patch: result = ( short ) rval ;
rank: 964
score: 98.42606026785714
patch: result = $NUMBER$ . 0 ;
rank: 964
score: 98.09989420572917
patch: result = lval ] ;
rank: 964
score: 98.03457641601562
patch: result = ) ;
rank: 964
score: 97.73338623046875
patch: lval = 1 ;
rank: 965
score: 98.09130859375
patch: return n . lval ;
rank: 965
score: 98.03009033203125
patch: result = result ) ;
rank: 965
score: 97.97517903645833
patch: result = ( byte ;
rank: 965
score: 97.72379150390626
patch: ok = true ;
rank: 966
score: 98.62491607666016
patch: retval = ( int ) rval ;
rank: 966
score: 98.34237670898438
patch: result = new ) ;
rank: 966
score: 98.10462443033855
patch: result = lval , ;
rank: 966
score: 98.0678955078125
patch: if ( lval ;
rank: 966
score: 97.98890380859375
patch: result = right ;
rank: 966
score: 97.7906494140625
patch: return false ;
rank: 966
score: 97.6902587890625
patch: lval = $NUMBER$ ;
rank: 967
score: 98.386962890625
patch: result = 1 . 0 ;
rank: 967
score: 98.34012858072917
patch: result = new result ;
rank: 967
score: 98.07765706380208
patch: result = rval ) ;
rank: 967
score: 97.9700215657552
patch: throw ( true ) ;
rank: 968
score: 98.2526143391927
patch: case Token . LSH :
rank: 968
score: 98.04850260416667
patch: result = lval lval ;
rank: 968
score: 97.95631917317708
patch: result = - $NUMBER$ ;
rank: 968
score: 97.9136962890625
patch: result ; break ;
rank: 968
score: 97.76882934570312
patch: return ( long ;
rank: 968
score: 97.6624755859375
patch: result = value ;
rank: 969
score: 98.61524963378906
patch: return n ; } return n ;
rank: 969
score: 97.99512939453125
patch: synchronized ( lval )
rank: 969
score: 97.91718139648438
patch: result = result .
rank: 969
score: 97.8998031616211
patch: result -- ;
rank: 969
score: 97.76189422607422
patch: return 1 ;
rank: 969
score: 97.65564575195313
patch: result = new ;
rank: 970
score: 98.03756713867188
patch: result = super .
rank: 970
score: 97.87176513671875
patch: flush ( ) ;
rank: 970
score: 97.75989379882813
patch: return ( Integer ;
rank: 970
score: 97.7232177734375
patch: return result ; ;
rank: 971
score: 98.18905639648438
patch: result = lval null ;
rank: 971
score: 98.0269266764323
patch: if lval = 0 ;
rank: 971
score: 97.8457275390625
patch: close ( ) ;
rank: 971
score: 97.7552490234375
patch: return result lval ;
rank: 971
score: 97.69111938476563
patch: deallocate ( ) ;
rank: 971
score: 97.63394165039062
patch: long result = ;
rank: 972
score: 98.0082499186198
patch: result = 0 ; ;
rank: 972
score: 97.81893920898438
patch: clear ( ) ;
rank: 972
score: 97.66854858398438
patch: result = this ;
rank: 972
score: 97.62910766601563
patch: count = 0 ;
rank: 973
score: 98.15433756510417
patch: result = - rval ;
rank: 973
score: 97.96709594726562
patch: if = 0 ;
rank: 973
score: 97.80944213867187
patch: result += result ;
rank: 973
score: 97.74534912109375
patch: return 0 ; }
rank: 974
score: 97.95042114257812
patch: result = Math ;
rank: 974
score: 97.794287109375
patch: result += null ;
rank: 974
score: 97.60604248046874
patch: code = 0 ;
rank: 975
score: 97.90880737304687
patch: result = $STRING$ .
rank: 975
score: 97.85108032226563
patch: this = lval ;
rank: 975
score: 97.79076538085937
patch: result += 0 ;
rank: 975
score: 97.60096435546875
patch: value = 1 ;
rank: 976
score: 98.24947102864583
patch: switch ( rval ) {
rank: 976
score: 97.84769897460937
patch: synchronized ( result ;
rank: 976
score: 97.71861572265625
patch: / * * /
rank: 976
score: 97.6340087890625
patch: throw ( ) ;
rank: 977
score: 98.22735595703125
patch: return ( result ) ;
rank: 977
score: 97.7597900390625
patch: result = TRUE ;
rank: 977
score: 97.62811279296875
patch: result = EQ ;
rank: 977
score: 97.50096893310547
patch: long result ;
rank: 978
score: 98.16261800130208
patch: return n ; break ;
rank: 978
score: 98.09621175130208
patch: result ( result ) ;
rank: 978
score: 98.0889892578125
patch: result = new null ;
rank: 978
score: 97.78404541015625
patch: synchronized ( lval ;
rank: 978
score: 97.71154174804687
patch: if ( lval )
rank: 978
score: 97.45909118652344
patch: assert false ;
rank: 979
score: 98.15509033203125
patch: return ( rval ) ;
rank: 979
score: 98.09105428059895
patch: result = result ; }
rank: 979
score: 97.77587280273437
patch: L = lval ;
rank: 979
score: 97.7112548828125
patch: start ( ) ;
rank: 979
score: 97.6434326171875
patch: return $NUMBER$ ;
rank: 979
score: 97.45684814453125
patch: return this ;
rank: 980
score: 97.70279541015626
patch: result += lval ;
rank: 980
score: 97.63491821289062
patch: return ( short ;
rank: 980
score: 97.54718627929688
patch: result = EOL ;
rank: 980
score: 97.3419189453125
patch: throw result ;
rank: 981
score: 97.6999755859375
patch: result = FALSE ;
rank: 981
score: 97.53788452148437
patch: lval = true ;
rank: 981
score: 97.33631896972656
patch: int result ;
rank: 982
score: 98.10052490234375
patch: int ( result ) ;
rank: 982
score: 98.07741292317708
patch: result = result 1 ;
rank: 982
score: 97.68187255859375
patch: if = 1 ;
rank: 982
score: 97.53618774414062
patch: result = ( ;
rank: 982
score: 97.32887268066406
patch: assert true ;
rank: 983
score: 98.10036214192708
patch: byte ( result ) ;
rank: 983
score: 97.8446533203125
patch: throw new Runtime CaMeL
rank: 983
score: 97.68692016601562
patch: double lval ;
rank: 983
score: 97.6660888671875
patch: result = long ;
rank: 983
score: 97.6427490234375
patch: result = n .
rank: 983
score: 97.58582305908203
patch: return null ;
rank: 983
score: 97.5194091796875
patch: result = EOF ;
rank: 983
score: 97.32091522216797
patch: * * /
rank: 984
score: 97.79821014404297
patch: return rval ;
rank: 984
score: 97.61608276367187
patch: repaint ( ) ;
rank: 984
score: 97.61260986328125
patch: result = lval
rank: 984
score: 97.55877685546875
patch: return true ;
rank: 984
score: 97.31012725830078
patch: if ( ;
rank: 985
score: 97.83975219726562
patch: result ( ) ;
rank: 985
score: 97.55473327636719
patch: break lval ;
rank: 985
score: 97.507373046875
patch: result = BLOCK ;
rank: 985
score: 97.28190612792969
patch: / * ?
rank: 986
score: 97.831005859375
patch: result = new int
rank: 986
score: 97.61305541992188
patch: if = result ;
rank: 986
score: 97.53783416748047
patch: return value ;
rank: 986
score: 97.51741790771484
patch: result = new
rank: 986
score: 97.48763275146484
patch: double result ;
rank: 986
score: 97.2270278930664
patch: / * ;
rank: 987
score: 97.6580078125
patch: result += $STRING$ ;
rank: 987
score: 97.61127471923828
patch: return left ;
rank: 987
score: 97.49458618164063
patch: result = BYTES ;
rank: 988
score: 97.5532470703125
patch: result = lval _
rank: 988
score: 97.39249420166016
patch: throw lval ;
rank: 988
score: 97.18783569335938
patch: throw new ;
rank: 989
score: 97.5414794921875
patch: if = false ;
rank: 989
score: 97.26071166992188
patch: = result ;
rank: 989
score: 97.1809310913086
patch: ? * /
rank: 990
score: 97.33978271484375
patch: return ) ;
rank: 990
score: 97.32352447509766
patch: case 0 :
rank: 991
score: 97.31993103027344
patch: throw null ;
rank: 991
score: 97.3104248046875
patch: result = (
rank: 992
score: 97.3040771484375
patch: break result ;
rank: 992
score: 97.29420471191406
patch: result = )
rank: 992
score: 97.26570892333984
patch: int lval ;
rank: 992
score: 97.23576354980469
patch: case 1 :
rank: 993
score: 97.26792907714844
patch: return $STRING$ ;
rank: 993
score: 97.07275390625
patch: = 0 ;
rank: 993
score: 97.05723571777344
patch: * * ?
rank: 994
score: 97.2501449584961
patch: break rval ;
rank: 994
score: 97.02123260498047
patch: / * /
rank: 995
score: 97.07963562011719
patch: throw ) ;
rank: 995
score: 97.0723648071289
patch: for ( int
rank: 995
score: 97.041748046875
patch: return right ;
rank: 996
score: 97.17303466796875
patch: break ; }
rank: 996
score: 97.13258361816406
patch: long lval ;
rank: 997
score: 97.1333236694336
patch: return type ;
rank: 997
score: 97.04293823242188
patch: double rval ;
rank: 997
score: 97.00045013427734
patch: return node ;
rank: 997
score: 96.95050811767578
patch: throw 1 ;
rank: 998
score: 97.00837707519531
patch: result finally {
rank: 998
score: 97.00157928466797
patch: Object result ;
rank: 998
score: 96.74686686197917
patch: * /
rank: 999
score: 97.08637237548828
patch: break rval }
rank: 999
score: 96.99454498291016
patch: byte ( )
rank: 999
score: 96.99102020263672
patch: for ( ?
rank: 999
score: 96.88650512695312
patch: throw $NUMBER$ ;
rank: 999
score: 96.56325276692708
patch: break ;
rank: 999
score: 96.27071126302083
patch: result ;
rank: 999
score: 96.04571533203125
patch: if ;
rank: 1000
score: 96.95359802246094
patch: } else ;
rank: 1000
score: 95.83463541666667
patch: result .
rank: 1000
score: 94.30816650390625
patch: {
rank: 1000
score: 93.92385864257812
patch: }
