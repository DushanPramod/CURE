rank: 1
score: 99.8492764559659
patch: return 0 . $NUMBER$ * exp ( x ) ;
rank: 1
score: 99.68196614583333
patch: return 0 . $NUMBER$ * exp ( - x ) ;
rank: 2
score: 99.74085582386364
patch: return 0 . 0 * exp ( x ) ;
rank: 2
score: 99.54864501953125
patch: return 0 * exp ( x ) ;
rank: 3
score: 99.61525315504808
patch: return 0 . $NUMBER$ * exp ( x + x ) ;
rank: 3
score: 99.56779341264205
patch: return 1 . $NUMBER$ * exp ( x ) ;
rank: 3
score: 99.54613148082386
patch: return 0 . $NUMBER$ / exp ( x ) ;
rank: 3
score: 99.5382792154948
patch: return 0 . $NUMBER$ * exp ( x ) ; }
rank: 3
score: 99.53624616350446
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 3
score: 99.53612342247597
patch: return 0 . $NUMBER$ * exp ( x , x ) ;
rank: 4
score: 99.6234639485677
patch: return 0 . 0 * exp ( - x ) ;
rank: 4
score: 99.59766734730114
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 4
score: 99.55564371744792
patch: return - 0 . $NUMBER$ * exp ( x ) ;
rank: 4
score: 99.53415151742789
patch: return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 4
score: 99.5184326171875
patch: return exp ( x ) ;
rank: 5
score: 99.54239595853366
patch: return 0 . $NUMBER$ * exp ( x ) + x ;
rank: 5
score: 99.50916544596355
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 5
score: 99.48195975167411
patch: return 0 . $NUMBER$ ; } else { return 0 . $NUMBER$ ;
rank: 6
score: 99.54635854867789
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 6
score: 99.53338153545673
patch: return 0 . $NUMBER$ * exp ( x * x ) ;
rank: 6
score: 99.51060384114584
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 6
score: 99.48487345377605
patch: return 0 . $NUMBER$ * exp ( x ) ) ;
rank: 6
score: 99.481689453125
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 6
score: 99.46623011997768
patch: return 0 . $NUMBER$ * exp ( x , - x ) ;
rank: 7
score: 99.56496018629808
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ;
rank: 7
score: 99.52113694411058
patch: return 0 . 0 * $NUMBER$ * exp ( x ) ;
rank: 8
score: 99.52827671595982
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 8
score: 99.51690118963069
patch: return 1 . 0 * exp ( x ) ;
rank: 8
score: 99.50002817007211
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 8
score: 99.47211565290179
patch: return 0 . $NUMBER$ ; } else { return 0 . 0 ;
rank: 8
score: 99.45377894810268
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 9
score: 99.52565696022727
patch: return 0 . 1 * exp ( x ) ;
rank: 9
score: 99.51651705228366
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 9
score: 99.49828162560097
patch: return 0 . $NUMBER$ * exp ( x ) * x ;
rank: 9
score: 99.4928690592448
patch: result = 0 . $NUMBER$ * exp ( x ) ;
rank: 9
score: 99.47632945667614
patch: return 0 . $NUMBER$ + exp ( x ) ;
rank: 9
score: 99.46297200520833
patch: return 0 . 0 * exp ( x ) ; }
rank: 9
score: 99.4573465983073
patch: return 0 . $NUMBER$ * / exp ( x ) ;
rank: 9
score: 99.45657113882211
patch: return 0 . $NUMBER$ * exp ( x - x ) ;
rank: 10
score: 99.53470865885417
patch: return 0 . $NUMBER$ * exp exp ( x ) ;
rank: 10
score: 99.5094745342548
patch: return 0 . 0 * exp ( x * x ) ;
rank: 10
score: 99.4926045735677
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 10
score: 99.48518371582031
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 11
score: 99.51448059082031
patch: return 0 . $NUMBER$ * x ;
rank: 11
score: 99.48513559194711
patch: return 0 . $NUMBER$ * exp ( x ) - x ;
rank: 11
score: 99.419189453125
patch: x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 12
score: 99.50701904296875
patch: return 0 . 1 * exp ( - x ) ;
rank: 12
score: 99.50387807992789
patch: return 0 . 0 * exp ( x ) + x ;
rank: 12
score: 99.472216796875
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ;
rank: 12
score: 99.451416015625
patch: return Double . $NUMBER$ * exp ( x ) ;
rank: 12
score: 99.43552652994792
patch: return 0 + exp ( x ) ;
rank: 12
score: 99.41428629557292
patch: return 0 . $NUMBER$ / exp ( - x ) ;
rank: 13
score: 99.45043131510417
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . $NUMBER$ ;
rank: 13
score: 99.43646709735577
patch: return 0 . 0 * exp ( - x ) ; }
rank: 13
score: 99.43011944110577
patch: return 0 . $NUMBER$ * this . exp ( x ) ;
rank: 14
score: 99.49237530048077
patch: return 0 . $NUMBER$ * x * exp ( x ) ;
rank: 14
score: 99.46285807291666
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 0 ;
rank: 15
score: 99.4913799579327
patch: return 0 * 0 . $NUMBER$ * exp ( x ) ;
rank: 15
score: 99.4840799967448
patch: return - 0 . 0 * exp ( x ) ;
rank: 15
score: 99.45338541666666
patch: return 0 . $NUMBER$ * exp ( x ) exp ( x ) ;
rank: 15
score: 99.44225202287946
patch: return 0 . 0 ; } else { return 0 . 0 ;
rank: 15
score: 99.43081430288461
patch: return 0 . 0 * exp ( x , x ) ;
rank: 16
score: 99.48196176382211
patch: return 0 . 0 * 0 * exp ( x ) ;
rank: 16
score: 99.4706280048077
patch: return 0 . $NUMBER$ * exp ( - - x ) ;
rank: 16
score: 99.45309448242188
patch: return 0 . $NUMBER$ * exp ( x ) . exp ( x ) ;
rank: 16
score: 99.43472726004464
patch: return 0 . 0 ; } else { return 0 . $NUMBER$ ;
rank: 16
score: 99.42477651742789
patch: return 0 . 0 . $NUMBER$ * exp ( x ) ;
rank: 17
score: 99.47723858173077
patch: return 0 . 0 * exp ( x + x ) ;
rank: 17
score: 99.45706612723214
patch: return 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 17
score: 99.42231968470982
patch: return 0 . $NUMBER$ * exp ( x ) ; } else {
rank: 17
score: 99.39626057942708
patch: x = 0 . $NUMBER$ * exp ( x ) ;
rank: 18
score: 99.43208451704545
patch: return 0 . 0 / exp ( x ) ;
rank: 18
score: 99.41642252604167
patch: return 1 . $NUMBER$ * exp ( - x ) ;
rank: 18
score: 99.3752774325284
patch: return 0 * exp ( x + x ) ;
rank: 19
score: 99.41402762276786
patch: return 0 . $NUMBER$ * exp ( - x - x ) ;
rank: 19
score: 99.36153470552884
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 20
score: 99.46712239583333
patch: return - 1 . $NUMBER$ * exp ( x ) ;
rank: 20
score: 99.44658203125
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . 0 ;
rank: 20
score: 99.42628173828125
patch: return 0 . $NUMBER$ * exp ( ) ;
rank: 20
score: 99.41379957932692
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 20
score: 99.41042654854911
patch: return 0 . 0 * exp ( x , - x ) ;
rank: 20
score: 99.40008544921875
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 20
score: 99.37068006727431
patch: return exp ( x , x ) ;
rank: 20
score: 99.36068289620536
patch: return 0 . 1 . $NUMBER$ * exp ( - x ) ;
rank: 21
score: 99.46376953125
patch: return 0 . $NUMBER$ * ( x ) ;
rank: 21
score: 99.44326985677084
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ ;
rank: 21
score: 99.42342122395833
patch: return 0 . 0 * / exp ( x ) ;
rank: 21
score: 99.4095928485577
patch: return - 0 . $NUMBER$ * exp ( - x ) ;
rank: 21
score: 99.36764761117789
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ ;
rank: 21
score: 99.35895647321429
patch: return 0 . $NUMBER$ * exp ( - x ) ; } }
rank: 22
score: 99.464599609375
patch: return 0 . 0 * exp ( x - x ) ;
rank: 22
score: 99.422265625
patch: return 0 . 0 * exp ( x ) / $NUMBER$ . $NUMBER$ ;
rank: 22
score: 99.40326397235577
patch: return x - 0 . $NUMBER$ * exp ( x ) ;
rank: 22
score: 99.39362444196429
patch: return 0 . $NUMBER$ * exp ( - x + x ) ;
rank: 22
score: 99.35763549804688
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 23
score: 99.43820626395089
patch: return 0 * exp ( x ) . exp ( x ) ;
rank: 23
score: 99.39552408854166
patch: return 0 . $NUMBER$ * 0 . 0 * exp ( x ) ;
rank: 24
score: 99.43741607666016
patch: return 0 . $NUMBER$ * exp ( x ) + exp ( x ) ;
rank: 24
score: 99.42632184709821
patch: return 0 . $NUMBER$ * 0 * exp ( - x ) ;
rank: 24
score: 99.4171612079327
patch: return 0 . 0 * exp ( x ) / $NUMBER$ ;
rank: 24
score: 99.40278764204545
patch: return exp ( x , 0 . 0 ) ;
rank: 24
score: 99.39369895241477
patch: return $NUMBER$ . 0 * exp ( x ) ;
rank: 24
score: 99.34987095424107
patch: return 0 . $NUMBER$ * exp ( x , x ) ; }
rank: 25
score: 99.42882622612848
patch: return $NUMBER$ * exp ( x ) ;
rank: 25
score: 99.4109375
patch: return 0 . $NUMBER$ * exp ( ) * exp ( x ) ;
rank: 25
score: 99.39249965122768
patch: return 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 25
score: 99.38917759486607
patch: return 0 . $NUMBER$ * exp ( - x ) + x ;
rank: 25
score: 99.34955303485577
patch: return 0 . 1 . $NUMBER$ * exp ( x ) ;
rank: 26
score: 99.4421856219952
patch: return 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 26
score: 99.40966796875
patch: return 0 . $NUMBER$ * exp ( x ) / ( x ) ;
rank: 26
score: 99.39217435396634
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ ) ;
rank: 26
score: 99.33925374348958
patch: } return 0 . $NUMBER$ * exp ( x ) ;
rank: 27
score: 99.43541541466347
patch: return 0 . 0 * exp ( x ) * x ;
rank: 27
score: 99.42652306189903
patch: return 0 . $NUMBER$ * ( exp ( x ) ) ;
rank: 27
score: 99.42425130208333
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . 0 ;
rank: 27
score: 99.37620239257812
patch: return 0 * exp ( - x ) ;
rank: 28
score: 99.4212646484375
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 28
score: 99.41927664620536
patch: return 0 . 0 * exp ( exp ( x ) ) ;
rank: 28
score: 99.40949358258929
patch: return 0 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 28
score: 99.39078463040866
patch: return x + 0 . $NUMBER$ * exp ( x ) ;
rank: 28
score: 99.3430926983173
patch: return 0 . $NUMBER$ * exp ( x ) ; } }
rank: 28
score: 99.33638139204545
patch: return 0 * exp ( x , x ) ;
rank: 29
score: 99.42020670572917
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . $NUMBER$ ;
rank: 29
score: 99.41656494140625
patch: return 0 . $NUMBER$ * x * x ;
rank: 29
score: 99.40746198381696
patch: return 0 . 0 . $NUMBER$ * exp ( - x ) ;
rank: 29
score: 99.40045572916667
patch: return 0 . $NUMBER$ ; } else { return 0 . $NUMBER$ ; }
rank: 29
score: 99.39016488882211
patch: return 0 . $NUMBER$ * x - exp ( x ) ;
rank: 29
score: 99.33599384014423
patch: return 0 . $NUMBER$ * exp ( x ) . x ;
rank: 30
score: 99.4143798828125
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . $NUMBER$ ;
rank: 30
score: 99.3872578938802
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 30
score: 99.37677001953125
patch: return 0 . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 30
score: 99.36511993408203
patch: return exp ( - x ) ;
rank: 31
score: 99.42357459435097
patch: return 0 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 31
score: 99.41265106201172
patch: return 0 . $NUMBER$ * exp ( x ) . min ( x ) ;
rank: 31
score: 99.40644666883681
patch: return 0 . exp ( x ) ;
rank: 31
score: 99.37457275390625
patch: if ( x < 0 ) { return 0 ; }
rank: 31
score: 99.34075055803571
patch: return 0 . $NUMBER$ * exp ( x - x ) ; }
rank: 31
score: 99.3275146484375
patch: return $NUMBER$ . $NUMBER$ * exp ( x + x ) ;
rank: 32
score: 99.41111755371094
patch: return 0 . $NUMBER$ * exp ( x ) - exp ( x ) ;
rank: 32
score: 99.40671011117789
patch: return 0 . 0 * exp ( x * $NUMBER$ ) ;
rank: 32
score: 99.3812255859375
patch: return x - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 32
score: 99.32687612680289
patch: try { return 0 . $NUMBER$ * exp ( x ) ;
rank: 33
score: 99.40962727864583
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . $NUMBER$ ;
rank: 33
score: 99.4033954326923
patch: return 0 . $NUMBER$ . 0 * exp ( x ) ;
rank: 33
score: 99.40139535757211
patch: return $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 33
score: 99.37964806189903
patch: result = 0 . $NUMBER$ * exp ( - x ) ;
rank: 33
score: 99.36378831129808
patch: x = 0 . 0 * exp ( - x ) ;
rank: 33
score: 99.3267352764423
patch: return 0 . $NUMBER$ * exp ( x / x ) ;
rank: 33
score: 99.32418118990384
patch: return 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 34
score: 99.40237426757812
patch: return - 1 . 0 * exp ( x ) ;
rank: 34
score: 99.40077718098958
patch: return 0 . $NUMBER$ * exp ( x ) ; ;
rank: 34
score: 99.3868741122159
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 34
score: 99.32505446213942
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ;
rank: 34
score: 99.32291957310268
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 35
score: 99.40740203857422
patch: return 0 . $NUMBER$ * exp ( x + exp ( x ) ) ;
rank: 35
score: 99.39828725961539
patch: return 0 . $NUMBER$ * exp ( x ) ; / /
rank: 35
score: 99.37826334635416
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 35
score: 99.32384236653645
patch: return 0 * exp ( exp ( x ) ) ;
rank: 35
score: 99.32188720703125
patch: return $NUMBER$ * exp ( - x ) ;
rank: 36
score: 99.39793982872597
patch: return 0 . 0 * exp ( x / $NUMBER$ ) ;
rank: 36
score: 99.39368438720703
patch: return 0 . $NUMBER$ * 0 ;
rank: 36
score: 99.3582294170673
patch: return exp ( x , 0 . 0 , x ) ;
rank: 36
score: 99.35330904447116
patch: return $NUMBER$ . $NUMBER$ * exp ( x , x ) ;
rank: 37
score: 99.3934326171875
patch: return Double . 0 * exp ( x ) ;
rank: 37
score: 99.37300931490384
patch: return 0 . $NUMBER$ * exp ( x ) ; break ;
rank: 37
score: 99.31845092773438
patch: return exp ( x + exp ( x ) ) ;
rank: 38
score: 99.37091471354167
patch: return $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 38
score: 99.3182842548077
patch: return 0 . $NUMBER$ . 1 * exp ( x ) ;
rank: 39
score: 99.4025146484375
patch: return 0 . $NUMBER$ * exp ( x + 0 . 0 ) ;
rank: 39
score: 99.38900320870536
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ) ;
rank: 39
score: 99.34154401506696
patch: return 0 . $NUMBER$ * exp ( - x , x ) ;
rank: 39
score: 99.31696026141827
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ) ;
rank: 39
score: 99.31232158954327
patch: return 0 . $NUMBER$ * exp ( x , 0 ) ;
rank: 40
score: 99.40205078125
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . 0 ;
rank: 40
score: 99.3883565266927
patch: return 0 . $NUMBER$ * exp ( x ) ; /
rank: 40
score: 99.3800760904948
patch: return 0 ; } else { return 0 . $NUMBER$ ;
rank: 40
score: 99.3157958984375
patch: return exp ( x ) * exp ( x ) ;
rank: 41
score: 99.3980712890625
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . 0 ;
rank: 41
score: 99.39078194754464
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 41
score: 99.3780048076923
patch: / * return 0 . $NUMBER$ * exp ( x ) ;
rank: 41
score: 99.34815470377605
patch: if ( x > 0 ) { return 0 ; }
rank: 41
score: 99.33889535757211
patch: if ( x > $NUMBER$ ) { x = - x ;
rank: 41
score: 99.31019083658855
patch: return 0 . $NUMBER$ * exp ( x ) x ;
rank: 42
score: 99.39691631610577
patch: return 0 . $NUMBER$ * exp ( x ) . 1 ;
rank: 42
score: 99.38986642020089
patch: return 0 . $NUMBER$ . 0 * exp ( - x ) ;
rank: 42
score: 99.37441781850961
patch: return ( 0 . 0 * exp ( x ) ) ;
rank: 42
score: 99.34649658203125
patch: x = 0 . 0 * exp ( x ) ;
rank: 42
score: 99.33884974888393
patch: return 0 . $NUMBER$ * exp ( - x ) / x ;
rank: 42
score: 99.3087627704327
patch: return 0 . $NUMBER$ + exp ( x + x ) ;
rank: 43
score: 99.39554537259616
patch: return 0 . $NUMBER$ * exp ( x ) . 0 ;
rank: 43
score: 99.3840840657552
patch: return 0 . $NUMBER$ * ( x - x ) ;
rank: 43
score: 99.37506975446429
patch: return 0 . $NUMBER$ * exp ( x + x ) ) ;
rank: 43
score: 99.36165364583333
patch: return 0 . 0 * 0 . $NUMBER$ * exp ( x ) ;
rank: 44
score: 99.39111328125
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 - x ) ;
rank: 44
score: 99.37397904829545
patch: return 0 * 0 * exp ( x ) ;
rank: 44
score: 99.37086995442708
patch: return 0 ; } else { return 0 . 0 ;
rank: 44
score: 99.3056640625
patch: return 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 45
score: 99.37319946289062
patch: return 0 . $NUMBER$ * ( x + x ) ;
rank: 45
score: 99.35943134014423
patch: return ( $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 45
score: 99.34163724459134
patch: return exp ( x , exp ( - x ) ) ;
rank: 45
score: 99.30224609375
patch: return exp ( x ) . exp ( x ) ;
rank: 46
score: 99.37856038411458
patch: { return 0 . $NUMBER$ * exp ( x ) ;
rank: 46
score: 99.37287248883929
patch: return $NUMBER$ . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 46
score: 99.36456853693181
patch: return 0 . $NUMBER$ * x ( x ) ;
rank: 46
score: 99.35889689127605
patch: return 0 . $NUMBER$ + exp ( - x ) ;
rank: 46
score: 99.34075927734375
patch: if ( x < $NUMBER$ ) { return 0 ; }
rank: 46
score: 99.32134540264423
patch: return 0 . $NUMBER$ * exp ( x ) / x ;
rank: 46
score: 99.30270620492789
patch: x = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 46
score: 99.30222389914773
patch: return 0 . $NUMBER$ - exp ( x ) ;
rank: 47
score: 99.37117513020833
patch: return 0 . 0 * exp ( x ) ) ;
rank: 47
score: 99.36451134314903
patch: return 0 . 0 . 0 * exp ( x ) ;
rank: 47
score: 99.36122824928977
patch: return 0 . $NUMBER$ * exp ( 0 ) ;
rank: 47
score: 99.35849233774039
patch: return 0 . $NUMBER$ * exp ( x ) ; } else
rank: 47
score: 99.33864920479911
patch: return 0 . $NUMBER$ * exp ( - x ) : 0 ;
rank: 47
score: 99.31859412560097
patch: if ( x > 0 ) { x = - x ;
rank: 47
score: 99.29836203835227
patch: return Double . value CaMeL Of ( x ) ;
rank: 48
score: 99.37208909254808
patch: return - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 48
score: 99.36666434151786
patch: return 0 . $NUMBER$ * exp ( x ) ; return x ;
rank: 48
score: 99.33662245008681
patch: return exp ( x , 0 ) ;
rank: 49
score: 99.37866973876953
patch: return 0 . $NUMBER$ * exp ( x ) ) / 0 . $NUMBER$ ;
rank: 49
score: 99.36971341646634
patch: { return 0 . $NUMBER$ * exp ( - x ) ;
rank: 49
score: 99.35626627604167
patch: return 0 . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 49
score: 99.29430280412946
patch: return 0 . $NUMBER$ * exp ( x + x ) ; }
rank: 50
score: 99.37635713465073
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ * x ;
rank: 50
score: 99.36374733664773
patch: return 0 . $NUMBER$ * exp ( x ) .
rank: 50
score: 99.35500863882211
patch: return 0 . $NUMBER$ * exp ( x ) + 1 ;
rank: 51
score: 99.37559509277344
patch: return 0 . $NUMBER$ * exp ( x ) / exp ( x ) ;
rank: 51
score: 99.36893404447116
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ ;
rank: 51
score: 99.36332484654018
patch: return 0 . $NUMBER$ * exp ( x ) ; -- x ;
rank: 51
score: 99.35039813701923
patch: return x * 0 . $NUMBER$ * exp ( x ) ;
rank: 51
score: 99.33456655649039
patch: return 0 . $NUMBER$ * exp ( x ) : 0 ;
rank: 51
score: 99.29276733398437
patch: return exp ( exp ( x ) ) ;
rank: 52
score: 99.35952758789062
patch: return 0 . 0 * exp exp ( x ) ;
rank: 52
score: 99.30332253196023
patch: return 0 . $NUMBER$ * ( - x ) ;
rank: 52
score: 99.28732299804688
patch: return $NUMBER$ . 0 * exp ( - x ) ;
rank: 53
score: 99.3748309795673
patch: return 0 = 0 . $NUMBER$ * exp ( x ) ;
rank: 53
score: 99.36721801757812
patch: return 0 . $NUMBER$ * - exp ( x ) ;
rank: 53
score: 99.35689871651786
patch: return - 0 . $NUMBER$ * exp ( x * x ) ;
rank: 53
score: 99.35653921274039
patch: return $NUMBER$ . $NUMBER$ * 0 * exp ( x ) ;
rank: 53
score: 99.33308919270833
patch: return exp ( x , exp ( x ) ) ;
rank: 54
score: 99.37481689453125
patch: return 0 . $NUMBER$ * exp ( x ) . max ( x ) ;
rank: 54
score: 99.3539287860577
patch: return 1 . $NUMBER$ * exp ( x ) + x ;
rank: 54
score: 99.35270552201705
patch: return 0 * $NUMBER$ * exp ( x ) ;
rank: 54
score: 99.35063825334821
patch: return 0 . $NUMBER$ * exp ( x ) ( x ) ;
rank: 54
score: 99.28470552884616
patch: return $NUMBER$ . $NUMBER$ * exp ( x - x ) ;
rank: 55
score: 99.35390061598558
patch: return 1 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 55
score: 99.32734026227679
patch: return 0 . $NUMBER$ * ( exp ( - x ) ) ;
rank: 55
score: 99.2967862215909
patch: return exp ( x , 0 . $NUMBER$ ) ;
rank: 55
score: 99.2836026278409
patch: return 0 * exp ( x ) * x ;
rank: 55
score: 99.28299654447116
patch: return 0 . $NUMBER$ / exp ( - x ) ; }
rank: 56
score: 99.37361414292279
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ * x ;
rank: 56
score: 99.35244516225961
patch: return 1 . $NUMBER$ * exp ( x * x ) ;
rank: 56
score: 99.3427001953125
patch: return 0 . $NUMBER$ * exp ( x + 0 . $NUMBER$ ) ;
rank: 56
score: 99.32399204799107
patch: / / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 56
score: 99.2796122233073
patch: x = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 57
score: 99.37317766462054
patch: return 0 . $NUMBER$ * exp ( x ) [ 0 ] ;
rank: 57
score: 99.3560791015625
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ ;
rank: 57
score: 99.34734235491071
patch: return 0 . $NUMBER$ * x * exp ( x ) ) ;
rank: 57
score: 99.33708844866071
patch: return 0 . $NUMBER$ * exp ( - ( x ) ) ;
rank: 57
score: 99.29052124023437
patch: return 0 / exp ( - x ) ;
rank: 58
score: 99.35045369466145
patch: return 0 . 0 * exp ( x ) ; ;
rank: 58
score: 99.319091796875
patch: return exp ( x , 0 . 0 , - x ) ;
rank: 59
score: 99.3501688639323
patch: return 0 . 1 * exp ( x ) ; }
rank: 59
score: 99.3443603515625
patch: return 0 . $NUMBER$ * exp ( x , x ) ) ;
rank: 59
score: 99.28048001802884
patch: return 0 . $NUMBER$ * exp ( 0 . 0 ) ;
rank: 59
score: 99.28028361002605
patch: if ( x > $NUMBER$ ) { return 0 ; }
rank: 60
score: 99.37077331542969
patch: return 0 . 0 * exp ( x ) * exp ( x ) ;
rank: 60
score: 99.31673490084134
patch: / / return 0 . $NUMBER$ * exp ( x ) ;
rank: 60
score: 99.27099609375
patch: return ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 61
score: 99.36952209472656
patch: return 0 . $NUMBER$ * exp ( x ) . start ( x ) ;
rank: 61
score: 99.34347768930289
patch: return 0 . 0 * x * exp ( x ) ;
rank: 61
score: 99.33091042258523
patch: double 0 . $NUMBER$ * exp ( x ) ;
rank: 61
score: 99.3156494140625
patch: return exp ( x , - x ) ;
rank: 61
score: 99.27742143110795
patch: return 0 . 0 + exp ( x ) ;
rank: 62
score: 99.3414306640625
patch: return 0 . x * exp ( x ) ;
rank: 62
score: 99.3355712890625
patch: return 0 . 0 * x $NUMBER$ * exp ( x ) ;
rank: 63
score: 99.36765950520834
patch: return 0 . $NUMBER$ * exp ( x ) / 1 . $NUMBER$ ;
rank: 63
score: 99.34608764648438
patch: return 0 . 0 * ( x ) ;
rank: 63
score: 99.33882962740384
patch: return 0 . $NUMBER$ * exp exp exp ( x ) ;
rank: 63
score: 99.3349276455966
patch: return 0 . $NUMBER$ * / ( x ) ;
rank: 64
score: 99.34523362379808
patch: return 0 . $NUMBER$ * - exp ( - x ) ;
rank: 64
score: 99.34478290264423
patch: return 1 . 0 * $NUMBER$ * exp ( x ) ;
rank: 64
score: 99.33154296875
patch: return 0 . $NUMBER$ * x $NUMBER$ * exp ( x ) ;
rank: 64
score: 99.32850999098558
patch: return 0 . $NUMBER$ * exp / exp ( x ) ;
rank: 64
score: 99.27072378305289
patch: return 0 . 1 * exp ( x + x ) ;
rank: 65
score: 99.3672119140625
patch: return 0 . 0 * exp ( x ) * 0 . $NUMBER$ ;
rank: 65
score: 99.34085518973214
patch: return - 0 . $NUMBER$ * exp ( x ) + x ;
rank: 65
score: 99.26866803850446
patch: x = 0 . $NUMBER$ * exp ( - x ) ; }
rank: 66
score: 99.3421630859375
patch: return 0 . 1 * exp ( - x ) ; }
rank: 66
score: 99.329443359375
patch: return 0 . 0 * exp ( ) ;
rank: 66
score: 99.31161063058036
patch: return 0 . 0 * exp ( - x - x ) ;
rank: 66
score: 99.27373798076923
patch: * / return 0 . $NUMBER$ * exp ( x ) ;
rank: 66
score: 99.26959228515625
patch: return exp ( x ) + exp ( x ) ;
rank: 67
score: 99.33663236177884
patch: return 0 . 0 * exp ( x / x ) ;
rank: 67
score: 99.2694561298077
patch: return 0 * exp ( x ) * 0 . $NUMBER$ ;
rank: 68
score: 99.36481182391827
patch: return 0 . 0 * exp ( x ) - x ;
rank: 68
score: 99.33617225060097
patch: return 0 . 0 * exp ( 0 . 0 ) ;
rank: 68
score: 99.33524867466518
patch: return 0 . $NUMBER$ * exp ( x ) - x ; }
rank: 68
score: 99.32530866350446
patch: return 0 . 0 * exp ( x ) ; } else {
rank: 68
score: 99.31699625651042
patch: return 0 . 0 * exp ( - $NUMBER$ ) ;
rank: 68
score: 99.26354108537946
patch: return 0 . $NUMBER$ * exp ( x ) ; } * /
rank: 69
score: 99.36247702205883
patch: return 0 . $NUMBER$ ; } return 0 . $NUMBER$ * exp ( x ) ;
rank: 69
score: 99.33591134207589
patch: return - 0 . $NUMBER$ * exp ( x + x ) ;
rank: 69
score: 99.3248779296875
patch: return 0 . $NUMBER$ exp ( x ) ;
rank: 69
score: 99.30970982142857
patch: return 0 . $NUMBER$ * exp ( - x ) ; break ;
rank: 69
score: 99.26140485491071
patch: return 0 - 0 . $NUMBER$ * exp ( - x ) ;
rank: 70
score: 99.36131286621094
patch: return 0 . $NUMBER$ * exp ( x ) ? exp ( x ) ;
rank: 70
score: 99.33140345982143
patch: return 0 . $NUMBER$ . 1 * exp ( - x ) ;
rank: 70
score: 99.3248291015625
patch: return 0 . 0 * exp ( x ) * $NUMBER$ ;
rank: 70
score: 99.2688739483173
patch: if ( x < $NUMBER$ ) { x = - x ;
rank: 70
score: 99.26607572115384
patch: return 1 . $NUMBER$ * exp ( x + x ) ;
rank: 71
score: 99.35990636488971
patch: return 0 . $NUMBER$ * exp ( x , x ) * 0 . $NUMBER$ ;
rank: 71
score: 99.33129010881696
patch: return 0 . $NUMBER$ * exp ( - x ) + $NUMBER$ ;
rank: 71
score: 99.3245849609375
patch: return 0 ; } else { return 0 . $NUMBER$ ; }
rank: 71
score: 99.2685546875
patch: if ( x < 0 ) { x = - x ;
rank: 72
score: 99.33107346754808
patch: return 0 . $NUMBER$ * exp ( x , $NUMBER$ ) ;
rank: 72
score: 99.33028157552083
patch: return 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 72
score: 99.32296987680289
patch: return 0 . $NUMBER$ * exp ( x - 1 ) ;
rank: 72
score: 99.26545854048295
patch: return 0 . $NUMBER$ * double ( x ) ;
rank: 72
score: 99.2572733561198
patch: return 0 . $NUMBER$ / exp ( x ) ; }
rank: 73
score: 99.35734340122768
patch: return 0 * exp ( x ) . min ( x ) ;
rank: 73
score: 99.26510620117188
patch: return 0 . $NUMBER$ * exp ( x )
rank: 74
score: 99.32826741536458
patch: return 0 . $NUMBER$ * exp ( x , ) ;
rank: 74
score: 99.26498413085938
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 74
score: 99.25228445870536
patch: return $NUMBER$ . $NUMBER$ * exp ( x , - x ) ;
rank: 75
score: 99.33126126802884
patch: return 0 . 0 * exp ( x ) / x ;
rank: 75
score: 99.32804048978366
patch: return 0 . $NUMBER$ * exp exp ( x ) ) ;
rank: 75
score: 99.30603841145833
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 75
score: 99.26321176382211
patch: return 0 . 0 * this . exp ( x ) ;
rank: 75
score: 99.2600848858173
patch: return 1 . $NUMBER$ * exp ( x , x ) ;
rank: 75
score: 99.25171770368304
patch: return 0 . $NUMBER$ * exp ( x ) ; } ) ;
rank: 76
score: 99.35667509191177
patch: return 0 . $NUMBER$ * exp ( x + 0 . 0 - x ) ;
rank: 76
score: 99.32944161551339
patch: return ( double ) 0 . $NUMBER$ * exp ( x ) ;
rank: 76
score: 99.32698567708333
patch: return 0 . $NUMBER$ * x * x * x ;
rank: 76
score: 99.26214599609375
patch: return 0 . $NUMBER$ + exp ( x ) ) ;
rank: 77
score: 99.35595703125
patch: return 0 . $NUMBER$ * 0 / exp ( x ) ;
rank: 77
score: 99.32688685825893
patch: return Double . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 77
score: 99.32338169642857
patch: return 0 . $NUMBER$ * exp ( - - x ) ; }
rank: 77
score: 99.29941231863839
patch: return 0 . 0 * $NUMBER$ * exp ( - x ) ;
rank: 77
score: 99.25912814670139
patch: return 0 / exp ( x ) ;
rank: 77
score: 99.2506573016827
patch: return return 0 . $NUMBER$ * exp ( - x ) ;
rank: 78
score: 99.35470145089286
patch: return 0 * exp ( x ) * exp ( x ) ;
rank: 78
score: 99.31321022727273
patch: return 0 . 0 * exp ( $NUMBER$ ) ;
rank: 78
score: 99.25645094651442
patch: return 0 . $NUMBER$ * exp ( x ) * 0 ;
rank: 79
score: 99.35425618489583
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . $NUMBER$ ;
rank: 79
score: 99.32598876953125
patch: return 0 . $NUMBER$ * 0 * exp exp ( x ) ;
rank: 79
score: 99.30373910757211
patch: return 0 . $NUMBER$ * exp * exp ( x ) ;
rank: 79
score: 99.25855431189903
patch: if ( x >= 0 ) { x = - x ;
rank: 79
score: 99.25634765625
patch: return 0 * exp ( x ) ) ;
rank: 80
score: 99.35276166130515
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . 0 * x ;
rank: 80
score: 99.32358022836539
patch: return 1 . 0 * exp ( x * x ) ;
rank: 80
score: 99.30904134114583
patch: return 0 . $NUMBER$ * * exp ( x ) ;
rank: 80
score: 99.303662109375
patch: double ( ) . return 0 . $NUMBER$ * exp ( x ) ;
rank: 80
score: 99.25850736177884
patch: if ( x >= $NUMBER$ ) { x = - x ;
rank: 80
score: 99.24853515625
patch: return 0 . 0 / exp ( - x ) ;
rank: 81
score: 99.35042317708333
patch: return 0 . 0 * exp ( x ) * 0 . 0 ;
rank: 81
score: 99.32325157752403
patch: return 0 . $NUMBER$ * exp ( x * 0 ) ;
rank: 81
score: 99.25357055664062
patch: return 0 . $NUMBER$ * $NUMBER$ ;
rank: 82
score: 99.34915364583334
patch: return 0 . $NUMBER$ * exp ( x , x + x ) ;
rank: 82
score: 99.29661051432292
patch: result return 0 . $NUMBER$ * exp ( x ) ;
rank: 82
score: 99.2534930889423
patch: return 0 . $NUMBER$ * x ( x + x ) ;
rank: 82
score: 99.24718366350446
patch: return x - 1 . $NUMBER$ * exp ( - x ) ;
rank: 83
score: 99.34912109375
patch: return 0 . $NUMBER$ * exp ( x ) ) / 1 . $NUMBER$ ;
rank: 83
score: 99.31619873046876
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 83
score: 99.30728149414062
patch: return 0 . $NUMBER$ * exp ( x ;
rank: 83
score: 99.29484049479167
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ + exp ( x ) ;
rank: 83
score: 99.25119018554688
patch: return exp ( x ) - exp ( x ) ;
rank: 83
score: 99.24660081129808
patch: x = 0 . $NUMBER$ * exp ( x ) ; }
rank: 84
score: 99.34880514705883
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 * x ) ;
rank: 84
score: 99.32166466346153
patch: return 0 . $NUMBER$ * exp ( x ) ; ) ;
rank: 84
score: 99.32082297585227
patch: return 0 . 0 * x ( x ) ;
rank: 84
score: 99.31617082868304
patch: return 0 / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 84
score: 99.30479213169643
patch: if ( x < $NUMBER$ ) { return 0 . $NUMBER$ ; }
rank: 84
score: 99.25377478966347
patch: return 0 - 0 . $NUMBER$ * exp ( x ) ;
rank: 85
score: 99.31525127704327
patch: return 0 / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 85
score: 99.30423677884616
patch: return 0 ; } else { return 0 . 0 ; }
rank: 85
score: 99.29423692491319
patch: return ( exp ( x ) ) ;
rank: 85
score: 99.25067693536931
patch: return 0 * exp ( x ) * 0 ;
rank: 85
score: 99.24530029296875
patch: return $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 86
score: 99.34697614397321
patch: return 0 . $NUMBER$ * exp ( x ) [ x ] ;
rank: 86
score: 99.3208895596591
patch: return 0 . $NUMBER$ * max ( x ) ;
rank: 86
score: 99.31461007254464
patch: return 0 . $NUMBER$ * 0 / exp ( - x ) ;
rank: 86
score: 99.30363325639205
patch: return 0 . 0 * exp ( 0 ) ;
rank: 86
score: 99.28055245535714
patch: return 0 . $NUMBER$ * exp ( x ) : - x ;
rank: 87
score: 99.34669596354166
patch: return 0 . $NUMBER$ * exp ( x + x + x ) ;
rank: 87
score: 99.32068743024554
patch: return 0 . $NUMBER$ * exp ( x ) ; ++ x ;
rank: 87
score: 99.28024727957589
patch: return 0 . 0 * exp ( x , x ) ; }
rank: 87
score: 99.24875112680289
patch: return 0 * exp ( x + x + x ) ;
rank: 88
score: 99.34549967447917
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x , x ) ;
rank: 88
score: 99.31688581194196
patch: return - 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 88
score: 99.30277797154018
patch: if ( x < $NUMBER$ ) { return 0 . 0 ; }
rank: 88
score: 99.28993443080357
patch: result = 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 88
score: 99.24898587740384
patch: if ( x > $NUMBER$ ) { exp ( x ) ;
rank: 89
score: 99.34458821614584
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . $NUMBER$ ;
rank: 89
score: 99.31892533735795
patch: return 0 . $NUMBER$ * exp ( x ) )
rank: 89
score: 99.3148193359375
patch: return 0 . $NUMBER$ * $NUMBER$ / exp ( x ) ;
rank: 89
score: 99.31307279146634
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - x ;
rank: 89
score: 99.30180140904018
patch: return 0 . 0 * exp ( x ) ( x ) ;
rank: 89
score: 99.28929036458334
patch: return 0 . $NUMBER$ * exp ( x - 0 . 0 ) ;
rank: 89
score: 99.24866661658653
patch: return exp ( x , 0 . $NUMBER$ , x ) ;
rank: 89
score: 99.2440655048077
patch: return 0 . $NUMBER$ + exp ( x ) * $NUMBER$ ;
rank: 90
score: 99.31399100167411
patch: return - 0 . $NUMBER$ * exp ( x - x ) ;
rank: 90
score: 99.30027418870192
patch: return Double . Na CaMeL N * exp ( x ) ;
rank: 90
score: 99.2882080078125
patch: result = 0 . 0 * exp ( x ) ;
rank: 90
score: 99.2434551532452
patch: return 0 * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 91
score: 99.3429946899414
patch: return 0 . $NUMBER$ * exp ( exp ( x ) + x ) ;
rank: 91
score: 99.31524658203125
patch: return 0 . $NUMBER$ * exp ( x ) ; return ) ;
rank: 91
score: 99.3139178936298
patch: return 0 . 0 * $NUMBER$ / exp ( x ) ;
rank: 91
score: 99.30019705636161
patch: return 0 . $NUMBER$ * exp ( x ( x ) ) ;
rank: 91
score: 99.24312650240384
patch: return 0 . $NUMBER$ + $NUMBER$ * exp ( x ) ;
rank: 91
score: 99.2419903094952
patch: if ( x > $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 91
score: 99.23629324776786
patch: return 0 . 1 . $NUMBER$ * exp ( x ) ; }
rank: 92
score: 99.31390850360577
patch: return 0 . 0 * 0 / exp ( x ) ;
rank: 92
score: 99.3096454326923
patch: return 0 . 0 * exp ( - - x ) ;
rank: 92
score: 99.24285419170673
patch: return 0 . $NUMBER$ * this * exp ( x ) ;
rank: 92
score: 99.23533121744792
patch: exp ( x , 0 . 0 , x ) ;
rank: 93
score: 99.3138936360677
patch: return 0 . $NUMBER$ * ( exp ( x ) ;
rank: 93
score: 99.31253756009616
patch: return 1 . $NUMBER$ * 0 * exp ( x ) ;
rank: 93
score: 99.30771309988839
patch: return 0 . $NUMBER$ * - exp ( x - x ) ;
rank: 93
score: 99.29861215444711
patch: return 0 . $NUMBER$ * exp ( x ) ; * /
rank: 93
score: 99.28597005208333
patch: ret = 0 . $NUMBER$ * exp ( x ) ;
rank: 94
score: 99.31072528545673
patch: return 1 . 0 * exp ( x ) + x ;
rank: 94
score: 99.30765206473214
patch: return 0 . 0 * exp ( - x ) - x ;
rank: 94
score: 99.29811789772727
patch: return Double . double CaMeL Value ( x ) ;
rank: 94
score: 99.28526204427084
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ * x ) ;
rank: 95
score: 99.33929850260417
patch: return 0 . 0 * exp ( x ) exp ( x ) ;
rank: 95
score: 99.31027456430289
patch: return 0 . $NUMBER$ * Math . abs ( x ) ;
rank: 95
score: 99.30964878627232
patch: return 0 . $NUMBER$ * exp ( x ) ; / ) ;
rank: 95
score: 99.30564662388393
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) ;
rank: 95
score: 99.29761759440105
patch: return 0 . $NUMBER$ ( exp ( x ) ) ;
rank: 95
score: 99.23830344460227
patch: return 0 + exp ( x + x ) ;
rank: 95
score: 99.23720139723558
patch: if ( x > 0 ) { exp ( x ) ;
rank: 95
score: 99.23439243861607
patch: return 0 . $NUMBER$ * exp ( - x ) . x ;
rank: 96
score: 99.338818359375
patch: return 0 . $NUMBER$ * exp ( x , x ) + x ;
rank: 96
score: 99.30960518973214
patch: return 0 . $NUMBER$ * exp ( x ) ; return $NUMBER$ ;
rank: 96
score: 99.30289132254464
patch: return 0 . $NUMBER$ * exp ( - x ) - $NUMBER$ ;
rank: 96
score: 99.29710170200893
patch: if ( x < 0 ) { return 0 . $NUMBER$ ; }
rank: 96
score: 99.2708270733173
patch: return - 0 . 0 * exp ( - x ) ;
rank: 96
score: 99.2337646484375
patch: x = 0 . $NUMBER$ * exp ( x - x ) ;
rank: 97
score: 99.3387451171875
patch: return 0 . $NUMBER$ * exp ( x , 1 . 0 ) ;
rank: 97
score: 99.30893179086539
patch: return 0 . $NUMBER$ x $NUMBER$ * exp ( x ) ;
rank: 97
score: 99.30157470703125
patch: return 0 . $NUMBER$ * exp ( - 1 . 0 ) ;
rank: 97
score: 99.29590782752403
patch: / * return 0 . 0 * exp ( x ) ;
rank: 97
score: 99.23612154447116
patch: return 0 * exp ( x + x , x ) ;
rank: 97
score: 99.23546346028645
patch: return 0 . $NUMBER$ * exp ( x x ) ;
rank: 97
score: 99.23086313100961
patch: x = 1 . $NUMBER$ * exp ( - x ) ;
rank: 98
score: 99.30726841517857
patch: return 0 . $NUMBER$ * exp ( double ) ( x ) ;
rank: 98
score: 99.29587026742789
patch: this . return 0 . $NUMBER$ * exp ( x ) ;
rank: 98
score: 99.26895577566964
patch: * / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 98
score: 99.23580228365384
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) * x ;
rank: 99
score: 99.29953438895089
patch: return 0 . $NUMBER$ * exp ( - x + $NUMBER$ ) ;
rank: 99
score: 99.23338734019886
patch: return exp ( x ) * 0 . $NUMBER$ ;
rank: 100
score: 99.33688151041666
patch: return 0 . $NUMBER$ * exp ( x + 1 . 0 ) ;
rank: 100
score: 99.3079325358073
patch: return 0 . $NUMBER$ * exp ( x ) ; else
rank: 100
score: 99.30633075420673
patch: return 0 . $NUMBER$ * x ( x * x ) ;
rank: 100
score: 99.29469517299107
patch: if ( x < 0 ) { return 0 . 0 ; }
rank: 100
score: 99.2330322265625
patch: return 0 . $NUMBER$ + exp ( x , x ) ;
rank: 100
score: 99.23255333533653
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 100
score: 99.22951096754808
patch: return 1 . $NUMBER$ * exp ( - x ) ; }
rank: 101
score: 99.33596567007211
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 ;
rank: 101
score: 99.30730646306819
patch: return 0 . $NUMBER$ * exp ( x ) *
rank: 101
score: 99.29871477399554
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 101
score: 99.2940673828125
patch: return 0 . $NUMBER$ * double $NUMBER$ * exp ( x ) ;
rank: 101
score: 99.26629638671875
patch: return 0 . 0 * exp ( - x + x ) ;
rank: 101
score: 99.23040216619319
patch: return 0 . $NUMBER$ * get ( x ) ;
rank: 101
score: 99.22872488839286
patch: return - 0 . $NUMBER$ * exp ( - x ) ; }
rank: 102
score: 99.33470052083334
patch: return 0 . $NUMBER$ * exp ( x , x ) - x ;
rank: 102
score: 99.30724158653847
patch: return ( 0 . $NUMBER$ ) * exp ( x ) ;
rank: 102
score: 99.30624624399039
patch: return 0 . $NUMBER$ + exp ( x ) + x ;
rank: 102
score: 99.29817708333333
patch: . return 0 . $NUMBER$ * exp ( x ) ;
rank: 102
score: 99.22959547776442
patch: return 0 . $NUMBER$ * exp ( x ) * ) ;
rank: 103
score: 99.33428548177083
patch: return 0 ; } return 0 . $NUMBER$ * exp ( x ) ;
rank: 103
score: 99.30702561598558
patch: return 0 . $NUMBER$ * 0 + exp ( x ) ;
rank: 103
score: 99.30587332589286
patch: return - 0 . 0 * exp ( x * x ) ;
rank: 103
score: 99.29795485276442
patch: return 0 . $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 103
score: 99.29332386363636
patch: return 0 . $NUMBER$ * exp ( 1 ) ;
rank: 103
score: 99.27786959134616
patch: return $NUMBER$ . 0 . $NUMBER$ * exp ( x ) ;
rank: 103
score: 99.26416015625
patch: return 1 . 0 * exp ( - x ) ;
rank: 103
score: 99.2289569561298
patch: return 0 . $NUMBER$ * exp ( x ) & 0 ;
rank: 103
score: 99.22518216646634
patch: return new 0 . $NUMBER$ * exp ( - x ) ;
rank: 104
score: 99.3336651141827
patch: return 0 . $NUMBER$ * exp ( x ) . $NUMBER$ ;
rank: 104
score: 99.29733511117789
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; }
rank: 104
score: 99.29274338942308
patch: return 0 . 0 * exp ( x ) + 1 ;
rank: 104
score: 99.2281963641827
patch: return 0 . $NUMBER$ * * exp ( - x ) ;
rank: 104
score: 99.22747124565973
patch: return exp ( x + x ) ;
rank: 104
score: 99.22364298502605
patch: if ( x <= 0 ) { return 0 ; }
rank: 105
score: 99.33266977163461
patch: return 0 . $NUMBER$ * exp ( x , 1 ) ;
rank: 105
score: 99.30609600360577
patch: return 0 . $NUMBER$ * exp ( x ) ; / ;
rank: 105
score: 99.30506388346355
patch: return 0 . $NUMBER$ * exp ( double ) x ;
rank: 105
score: 99.29708426339286
patch: return 0 . $NUMBER$ * exp ( x ) - - x ;
rank: 105
score: 99.2917949969952
patch: return 0 . $NUMBER$ * double CaMeL Value ( x ) ;
rank: 105
score: 99.2772705078125
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ , x ) ;
rank: 105
score: 99.2628173828125
patch: return - 0 . $NUMBER$ * exp ( x ) ; }
rank: 105
score: 99.22748357599431
patch: return $NUMBER$ * exp ( x , x ) ;
rank: 105
score: 99.22572835286458
patch: return 0 + exp ( exp ( x ) ) ;
rank: 106
score: 99.33226725260417
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . 0 ;
rank: 106
score: 99.30574340820313
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 106
score: 99.3023681640625
patch: return 0 * 0 . 0 * exp ( x ) ;
rank: 106
score: 99.2967529296875
patch: return 0 . $NUMBER$ * exp ( x ) + - x ;
rank: 106
score: 99.2917813387784
patch: return Double . parse CaMeL Double ( x ) ;
rank: 106
score: 99.27684733072917
patch: return x - $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 106
score: 99.26267311789773
patch: if ( x < 0 ) { return 0 ;
rank: 107
score: 99.30511474609375
patch: return 0 . $NUMBER$ * exp ( x ) ; *
rank: 107
score: 99.30055588942308
patch: return 1 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 107
score: 99.27679036458333
patch: return 0 . $NUMBER$ * 0 . 1 * exp ( x ) ;
rank: 107
score: 99.26225934709821
patch: return 0 . $NUMBER$ * exp ( - x ) : $NUMBER$ ;
rank: 107
score: 99.22530423677884
patch: return $NUMBER$ . $NUMBER$ * this . exp ( x ) ;
rank: 107
score: 99.2227313701923
patch: return * 0 . $NUMBER$ * exp ( - x ) ;
rank: 108
score: 99.33172200520833
patch: return 0 . $NUMBER$ * exp ( x / 0 . 0 ) ;
rank: 108
score: 99.30404227120536
patch: return 0 . $NUMBER$ * exp ( x ) ; return 0 ;
rank: 108
score: 99.29568045479911
patch: return x * 0 . $NUMBER$ * exp ( - x ) ;
rank: 108
score: 99.28874860491071
patch: return Double . value CaMeL Of ( exp ( x ) ) ;
rank: 108
score: 99.26204427083333
patch: return 0 . $NUMBER$ * exp ( , x ) ;
rank: 108
score: 99.2249004657452
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ + x ) ;
rank: 108
score: 99.22040264423077
patch: return 0 . 1 * exp ( x , x ) ;
rank: 109
score: 99.33171081542969
patch: return 0 . $NUMBER$ * exp ( x ) ) / 0 . 0 ;
rank: 109
score: 99.30401141826923
patch: return 0 * 0 * exp ( x + x ) ;
rank: 109
score: 99.29283728966347
patch: { return 0 . $NUMBER$ * exp ( x ) ; }
rank: 109
score: 99.27548217773438
patch: double 0 . $NUMBER$ * exp ( - x ) ;
rank: 109
score: 99.22365500710227
patch: return $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 110
score: 99.30391438802083
patch: return 0 . $NUMBER$ * ( x * x ) ;
rank: 110
score: 99.2975323016827
patch: return 0 . 0 * Math . abs ( x ) ;
rank: 110
score: 99.29188889723558
patch: return 0 . 1 * exp ( x ) - x ;
rank: 110
score: 99.2884521484375
patch: return Double . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 110
score: 99.22364298502605
patch: return return 0 . $NUMBER$ * exp ( x ) ;
rank: 110
score: 99.21949181189903
patch: temp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 111
score: 99.33131408691406
patch: return 0 . $NUMBER$ * exp ( exp ( x ) , x ) ;
rank: 111
score: 99.29184194711539
patch: . return 0 . $NUMBER$ * exp ( - x ) ;
rank: 111
score: 99.28768216646634
patch: return 0 . $NUMBER$ / exp ( x , x ) ;
rank: 111
score: 99.27491173377403
patch: return x - 1 . $NUMBER$ * exp ( x ) ;
rank: 111
score: 99.22356708233173
patch: return 0 . $NUMBER$ * exp ( 1 . $NUMBER$ ) ;
rank: 111
score: 99.2190692608173
patch: z = 0 . $NUMBER$ * exp ( - x ) ;
rank: 111
score: 99.21831720525569
patch: if ( x > $NUMBER$ ) { return 0 ;
rank: 112
score: 99.33128255208334
patch: return 0 . $NUMBER$ * exp ( x , x ) * x ;
rank: 112
score: 99.30149623325893
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ * x ) ;
rank: 112
score: 99.2917949969952
patch: return 0 . $NUMBER$ * / exp ( - x ) ;
rank: 112
score: 99.2232998934659
patch: return 0 * exp ( x - x ) ;
rank: 112
score: 99.21901633522727
patch: x = $NUMBER$ * exp ( - x ) ;
rank: 112
score: 99.21671752929687
patch: return 0 + exp ( - x ) ;
rank: 113
score: 99.29527936662946
patch: return - 0 . $NUMBER$ * exp ( x , x ) ;
rank: 113
score: 99.28941999162946
patch: return 0 . 0 . 0 * exp ( - x ) ;
rank: 113
score: 99.27371920072116
patch: return x - 0 . 0 * exp ( x ) ;
rank: 113
score: 99.25960286458333
patch: return exp ( x , 0 . 0 ) ; }
rank: 113
score: 99.22200520833333
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * $NUMBER$ ;
rank: 114
score: 99.33084106445312
patch: return 0 . 0 * exp ( x ) . exp ( x ) ;
rank: 114
score: 99.29497821514423
patch: return 1 . $NUMBER$ * exp ( x - x ) ;
rank: 114
score: 99.28883579799107
patch: return 0 . $NUMBER$ * x * exp ( - x ) ;
rank: 114
score: 99.28341909555289
patch: return 0 . 0 * double CaMeL Value ( x ) ;
rank: 114
score: 99.27274263822116
patch: return $NUMBER$ . $NUMBER$ . 0 * exp ( x ) ;
rank: 114
score: 99.2218017578125
patch: return exp ( exp ( x ) - x ) ;
rank: 115
score: 99.33060128348214
patch: return 0 . $NUMBER$ * exp ( x ) [ 1 ] ;
rank: 115
score: 99.29503522600446
patch: return 0 . $NUMBER$ * exp ( x * x ) ) ;
rank: 115
score: 99.28868611653645
patch: return 1 . $NUMBER$ * exp ( x ) ; }
rank: 115
score: 99.2712910970052
patch: return $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 115
score: 99.22124774639423
patch: return 0 . $NUMBER$ * exp ( x ) & $NUMBER$ ;
rank: 115
score: 99.21432495117188
patch: if ( x >= 0 ) { return 0 ; }
rank: 116
score: 99.32939147949219
patch: return 0 . $NUMBER$ * exp ( x ) . value ( x ) ;
rank: 116
score: 99.29407677283653
patch: return 0 . $NUMBER$ * exp ( ( x ) ) ;
rank: 116
score: 99.282470703125
patch: return 0 . 0 * / ( x ) ;
rank: 116
score: 99.27024332682292
patch: return 0 . $NUMBER$ * exp $NUMBER$ ( x ) ;
rank: 116
score: 99.25570242745536
patch: / * return 0 . $NUMBER$ * exp ( - x ) ;
rank: 116
score: 99.213134765625
patch: return * 0 . $NUMBER$ * exp ( x ) ;
rank: 117
score: 99.29396409254808
patch: return 0 . $NUMBER$ * exp ( x ) ) ) ;
rank: 117
score: 99.29280911959134
patch: return 0 . 0 * exp ( x * 0 ) ;
rank: 117
score: 99.25409807477679
patch: return 0 . $NUMBER$ * exp ( - x ) ; * /
rank: 117
score: 99.21613420758929
patch: return 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ; }
rank: 118
score: 99.29391043526786
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ) ;
rank: 118
score: 99.26850043402777
patch: return $NUMBER$ / exp ( x ) ;
rank: 118
score: 99.22046837439903
patch: return 0 . $NUMBER$ + this . exp ( x ) ;
rank: 118
score: 99.21178181966145
patch: return 0 * exp ( x , - x ) ;
rank: 119
score: 99.29371861049107
patch: return 0 . $NUMBER$ * exp 0 * exp ( x ) ;
rank: 119
score: 99.29244559151786
patch: return - 0 . $NUMBER$ * 0 * exp ( x ) ;
rank: 119
score: 99.28767613002232
patch: return 0 . $NUMBER$ * exp ( x ) = - x ;
rank: 119
score: 99.27520282451923
patch: return 0 . 0 * exp ( x ) + $NUMBER$ ;
rank: 119
score: 99.26781354631696
patch: return 0 . $NUMBER$ * x - exp ( - x ) ;
rank: 119
score: 99.25381905691964
patch: return 0 . $NUMBER$ * exp ( ( double ) x ) ;
rank: 119
score: 99.21169809194711
patch: if ( x < $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 120
score: 99.29236711774554
patch: return 0 . $NUMBER$ * exp ( x ) * x ) ;
rank: 120
score: 99.29216657366071
patch: return - 0 . 0 * $NUMBER$ * exp ( x ) ;
rank: 120
score: 99.28766741071429
patch: return 0 . 0 * 0 * exp ( - x ) ;
rank: 120
score: 99.27466759314903
patch: return 0 . 0 * exp ( x - 1 ) ;
rank: 121
score: 99.29176025390625
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 121
score: 99.28719656808036
patch: return x * $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 121
score: 99.27239990234375
patch: return Double . parse CaMeL Double ( exp ( x ) ) ;
rank: 121
score: 99.21905987079327
patch: return 0 . $NUMBER$ + exp ( x ) * x ;
rank: 121
score: 99.21372633713942
patch: if ( x <= 0 ) { x = - x ;
rank: 122
score: 99.32574869791667
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 1 ;
rank: 122
score: 99.28574916294643
patch: { return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 122
score: 99.2168477376302
patch: return 0 . $NUMBER$ * exp ( x ) $NUMBER$ ;
rank: 123
score: 99.32569986979166
patch: return 0 . $NUMBER$ * exp ( 0 . 0 + x ) ;
rank: 123
score: 99.29082697088069
patch: = 0 . $NUMBER$ * exp ( x ) ;
rank: 123
score: 99.28951590401786
patch: return 0 . $NUMBER$ * exp exp ( x + x ) ;
rank: 123
score: 99.2855224609375
patch: return 0 * 0 . $NUMBER$ * exp ( - x ) ;
rank: 123
score: 99.27064344618056
patch: return 0 . $NUMBER$ ( x ) ;
rank: 123
score: 99.21609262319711
patch: return 0 . $NUMBER$ * exp ( x ) >> $NUMBER$ ;
rank: 124
score: 99.32495880126953
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 124
score: 99.2904803936298
patch: return 0 . 0 * exp ( x - $NUMBER$ ) ;
rank: 124
score: 99.2705078125
patch: return 0 . 0 - exp ( x ) ;
rank: 124
score: 99.26327514648438
patch: return ( exp ( - x ) ) ;
rank: 124
score: 99.214501953125
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ ;
rank: 124
score: 99.21152169363839
patch: / * / return 0 . $NUMBER$ * exp ( x ) ;
rank: 125
score: 99.28892299107143
patch: return 0 * 0 . $NUMBER$ * exp ( x ) ) ;
rank: 125
score: 99.28514753069196
patch: return 0 . $NUMBER$ * exp ( x , - $NUMBER$ ) ;
rank: 125
score: 99.26307779947916
patch: return 0 . $NUMBER$ * exp ( x * 0 . $NUMBER$ ) ;
rank: 125
score: 99.21448863636364
patch: return 0 . $NUMBER$ | exp ( x ) ;
rank: 125
score: 99.20651245117188
patch: return $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 126
score: 99.32220052083333
patch: return 0 . $NUMBER$ * exp ( x ) / 1 . 0 ;
rank: 126
score: 99.29020182291667
patch: return - 0 . $NUMBER$ + exp ( x ) ;
rank: 126
score: 99.28856549944196
patch: return 0 . $NUMBER$ * exp $NUMBER$ * exp ( x ) ;
rank: 126
score: 99.28497314453125
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ; }
rank: 126
score: 99.26112717848558
patch: return $NUMBER$ / 0 . $NUMBER$ * exp ( x ) ;
rank: 126
score: 99.25096638997395
patch: return 0 . 0 * new double [ $NUMBER$ ] ;
rank: 126
score: 99.21129353841145
patch: if ( x <= $NUMBER$ ) { return 0 ; }
rank: 126
score: 99.20403583233173
patch: return 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 127
score: 99.32197265625
patch: return 0 . $NUMBER$ * exp ( x , x , x ) ;
rank: 127
score: 99.29013497488839
patch: return 0 . $NUMBER$ * exp ( x ) + x ) ;
rank: 127
score: 99.28819928850446
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ) ;
rank: 127
score: 99.28389195033482
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 127
score: 99.26092122395833
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ . $NUMBER$ ;
rank: 127
score: 99.21347878196023
patch: return 0 . $NUMBER$ * value ( x ) ;
rank: 127
score: 99.20225016276042
patch: return 0 . $NUMBER$ * cosh ( - x ) ;
rank: 128
score: 99.32125651041666
patch: return 0 . 0 * exp ( x ) + 0 . $NUMBER$ ;
rank: 128
score: 99.28904371995192
patch: return 1 . 0 * 0 * exp ( x ) ;
rank: 128
score: 99.28768310546874
patch: return 0 . $NUMBER$ * 0 * x ;
rank: 128
score: 99.26821463448661
patch: if ( x > $NUMBER$ ) { return 0 . $NUMBER$ ; }
rank: 128
score: 99.25009591238839
patch: return 0 . $NUMBER$ * exp ( x ) . return 0 ;
rank: 128
score: 99.210693359375
patch: return 0 . $NUMBER$ * exp ( x , 0 ) ; }
rank: 128
score: 99.2021953876202
patch: return x + 1 . $NUMBER$ * exp ( x ) ;
rank: 129
score: 99.32063293457031
patch: return 0 . $NUMBER$ * exp ( x ) ) / $NUMBER$ . $NUMBER$ ;
rank: 129
score: 99.28899676983173
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + x ;
rank: 129
score: 99.26750837053571
patch: if ( x > $NUMBER$ ) { return 0 . 0 ; }
rank: 129
score: 99.25002817007211
patch: result = 0 . 0 * exp ( - x ) ;
rank: 129
score: 99.21153846153847
patch: return 0 . $NUMBER$ * exp ( x + $STRING$ ) ;
rank: 129
score: 99.20989520733173
patch: return / 0 . $NUMBER$ * exp ( - x ) ;
rank: 129
score: 99.20212026742789
patch: if ( x > 0 ) { return 0 . $NUMBER$ ;
rank: 130
score: 99.28629244290866
patch: return Double . $NUMBER$ * exp ( x + x ) ;
rank: 130
score: 99.28354317801339
patch: return 0 . $NUMBER$ * exp ( - x - $NUMBER$ ) ;
rank: 130
score: 99.26682826450893
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ; }
rank: 130
score: 99.21117054332386
patch: return 0 * exp ( x ) - x ;
rank: 130
score: 99.20940692608173
patch: if ( x <= $NUMBER$ ) { x = - x ;
rank: 130
score: 99.20209209735577
patch: return exp ( x , 0 . $NUMBER$ * x ) ;
rank: 131
score: 99.28712815504808
patch: return 1 . 0 * exp ( x + x ) ;
rank: 131
score: 99.28271484375
patch: return 0 . $NUMBER$ * $NUMBER$ / exp ( - x ) ;
rank: 131
score: 99.2666766826923
patch: return 0 ; } else { return exp ( x ) ;
rank: 131
score: 99.25702311197917
patch: return 0 . $NUMBER$ + 0 . 0 * exp ( x ) ;
rank: 131
score: 99.20166015625
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ - x ) ;
rank: 132
score: 99.31946614583333
patch: return 0 . 0 * exp ( x ) / 0 . $NUMBER$ ;
rank: 132
score: 99.28644670758929
patch: return ( double ) 0 . 0 * exp ( x ) ;
rank: 132
score: 99.28265380859375
patch: return 0 * $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 132
score: 99.24888258713942
patch: return 0 . $NUMBER$ * exp ( x ) + 0 ;
rank: 132
score: 99.2074307528409
patch: return 0 . $NUMBER$ * exp ( $STRING$ ) ;
rank: 133
score: 99.25619506835938
patch: result = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 133
score: 99.24782151442308
patch: return 0 . $NUMBER$ * exp ( x ) : $NUMBER$ ;
rank: 133
score: 99.2070645419034
patch: if ( x == 0 ) { return 0 ;
rank: 134
score: 99.2852783203125
patch: return 0 . $NUMBER$ * exp ( x ) + x ; ;
rank: 134
score: 99.264892578125
patch: return 0 . $NUMBER$ ) * exp ( x ) ;
rank: 134
score: 99.24710787259616
patch: return 0 . 0 * exp ( x , 0 ) ;
rank: 134
score: 99.19900512695312
patch: return 0 * $NUMBER$ * exp ( - x ) ;
rank: 135
score: 99.317822265625
patch: return 0 . $NUMBER$ * exp ( x , 0 . $NUMBER$ ) ;
rank: 135
score: 99.25589192708334
patch: return 0 . $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 135
score: 99.20613316127232
patch: return $NUMBER$ . 1 . $NUMBER$ * exp ( - x ) ;
rank: 135
score: 99.20558518629808
patch: return 0 . $NUMBER$ + 0 * exp ( x ) ;
rank: 136
score: 99.3177978515625
patch: return 0 . 0 * exp ( x ) + 0 . 0 ;
rank: 136
score: 99.28410121372768
patch: return - 0 . 0 * exp ( x + x ) ;
rank: 136
score: 99.28362165178571
patch: return 0 * 0 . $NUMBER$ * exp exp ( x ) ;
rank: 136
score: 99.27943929036458
patch: return 0 . $NUMBER$ * ( x - $NUMBER$ ) ;
rank: 136
score: 99.25501302083333
patch: return 0 . $NUMBER$ * exp ( x + 1 . $NUMBER$ ) ;
rank: 136
score: 99.24470738002232
patch: return 0 ; } exp ( x , 0 . 0 ) ;
rank: 136
score: 99.20526123046875
patch: return 0 . $NUMBER$ * exp ( ) + x ;
rank: 137
score: 99.28330300071023
patch: return 0 . ) * exp ( x ) ;
rank: 137
score: 99.19805353338069
patch: if ( x > 0 ) { return 0 ;
rank: 138
score: 99.2831280048077
patch: return 0 . 0 * exp ( 0 . $NUMBER$ ) ;
rank: 138
score: 99.28301532451923
patch: return 0 . $NUMBER$ * exp ( x ) ; / *
rank: 138
score: 99.2786865234375
patch: return 0 . $NUMBER$ * exp ( x ) - x ) ;
rank: 138
score: 99.26406424386161
patch: return 0 . $NUMBER$ ; } else { exp ( x ) ;
rank: 138
score: 99.25392252604166
patch: return $NUMBER$ . $NUMBER$ * 0 . 0 * exp ( x ) ;
rank: 138
score: 99.24420635516827
patch: return 0 . $NUMBER$ * ( x , - x ) ;
rank: 138
score: 99.20438326322116
patch: return 0 * x * exp ( x + x ) ;
rank: 139
score: 99.31731305803571
patch: } else { return 0 . $NUMBER$ * exp ( x ) ;
rank: 139
score: 99.28285725911458
patch: 0 return 0 . $NUMBER$ * exp ( x ) ;
rank: 139
score: 99.28185017903645
patch: return 0 . 0 * exp ( double ) x ;
rank: 139
score: 99.27862079326923
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 139
score: 99.24345179966518
patch: return 0 . $NUMBER$ * exp ( - x ) : x ;
rank: 139
score: 99.20122821514423
patch: return 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 139
score: 99.19715294471153
patch: if ( x < 0 ) { return 0 . $NUMBER$ ;
rank: 140
score: 99.3171630859375
patch: return 0 . $NUMBER$ * exp ( x ) ? x : x ;
rank: 140
score: 99.2816631610577
patch: return $NUMBER$ . $NUMBER$ * exp ( x * x ) ;
rank: 140
score: 99.26253255208333
patch: return 0 . 0 * * exp ( x ) ;
rank: 140
score: 99.25252278645833
patch: return 0 . $NUMBER$ * exp ( exp ( - $NUMBER$ ) ) ;
rank: 140
score: 99.20147150213069
patch: return 0 * x * exp ( x ) ;
rank: 140
score: 99.20063920454545
patch: return $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 141
score: 99.31715393066406
patch: return exp ( x ) * 0 . $NUMBER$ * exp ( x ) ;
rank: 141
score: 99.28151157924107
patch: return 0 . $NUMBER$ * ( x ) * 0 . $NUMBER$ ;
rank: 141
score: 99.26025390625
patch: return 0 . 0 * exp ( x ( x ) ) ;
rank: 141
score: 99.25174967447917
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else {
rank: 141
score: 99.2430889423077
patch: return 0 . $NUMBER$ * exp ( , - x ) ;
rank: 141
score: 99.19942220052083
patch: x = 1 . $NUMBER$ * exp ( x ) ;
rank: 142
score: 99.31635284423828
patch: return 0 . 0 * exp ( x ) + exp ( x ) ;
rank: 142
score: 99.28122384207589
patch: return - 1 . $NUMBER$ * exp ( x * x ) ;
rank: 142
score: 99.28111921037946
patch: return 1 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 142
score: 99.25083821614584
patch: return $NUMBER$ . $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 142
score: 99.19973520132211
patch: return 0 . $NUMBER$ * exp ( x ) * $STRING$ ;
rank: 142
score: 99.1968994140625
patch: return 0 / exp ( x , x ) ;
rank: 143
score: 99.2808837890625
patch: return 1 . $NUMBER$ * exp ( x ) * x ;
rank: 143
score: 99.28076171875
patch: return 0 . $NUMBER$ * exp ( x ) ; x
rank: 143
score: 99.27751813616071
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) - x ;
rank: 143
score: 99.24999186197917
patch: return 1 . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 143
score: 99.24265543619792
patch: return new 0 . $NUMBER$ * exp ( x ) ;
rank: 143
score: 99.19916326349431
patch: if ( 0 == x ) { return 0 ;
rank: 143
score: 99.19790649414062
patch: x = $NUMBER$ * exp ( x ) ;
rank: 143
score: 99.19676717122395
patch: if ( x >= $NUMBER$ ) { return 0 ; }
rank: 144
score: 99.28044782366071
patch: return exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 144
score: 99.27987234933036
patch: return - 0 . 0 * exp ( x ) + x ;
rank: 144
score: 99.27733503069196
patch: return 1 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 144
score: 99.25846041165866
patch: return - 0 . $NUMBER$ * / exp ( x ) ;
rank: 144
score: 99.24886380709134
patch: return ( 1 . $NUMBER$ * exp ( x ) ) ;
rank: 145
score: 99.28041585286458
patch: return $NUMBER$ . $NUMBER$ * exp exp ( x ) ;
rank: 145
score: 99.27839878627232
patch: return 0 . 0 * exp ( double ) ( x ) ;
rank: 145
score: 99.27669583834134
patch: return 0 . 1 * exp ( x - x ) ;
rank: 145
score: 99.25778198242188
patch: return 0 . 0 ( exp ( x ) ) ;
rank: 145
score: 99.24860088641827
patch: return 0 . $NUMBER$ * x + exp ( x ) ;
rank: 145
score: 99.1956035907452
patch: else { return 0 . $NUMBER$ * exp ( x ) ;
rank: 146
score: 99.31324005126953
patch: return 0 . 0 * exp ( x ) . min ( x ) ;
rank: 146
score: 99.25736177884616
patch: return 0 . 0 * x - exp ( x ) ;
rank: 146
score: 99.24642740885416
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 146
score: 99.23998151506696
patch: return 0 . $NUMBER$ * exp ( ( - x ) ) ;
rank: 146
score: 99.19645552201705
patch: return 0 . $NUMBER$ * cosh ( x ) ;
rank: 146
score: 99.1951153094952
patch: return 0 + exp ( x ) * 0 . $NUMBER$ ;
rank: 147
score: 99.31258951822916
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . 1 ;
rank: 147
score: 99.27552141462054
patch: return 0 . $NUMBER$ * this . exp ( - x ) ;
rank: 147
score: 99.2572021484375
patch: return Double . $NUMBER$ ; } else { return 0 . $NUMBER$ ;
rank: 147
score: 99.24456108940973
patch: return x * exp ( x ) ;
rank: 147
score: 99.23948160807292
patch: return 0 . $NUMBER$ * x ( - x ) ;
rank: 147
score: 99.19502766927083
patch: return 0 . $NUMBER$ $NUMBER$ * exp ( x ) ;
rank: 148
score: 99.3125
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . length ;
rank: 148
score: 99.27455139160156
patch: double CaMeL Value ( x ) ;
rank: 148
score: 99.19500262920673
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . $NUMBER$ ) ;
rank: 148
score: 99.19244854266827
patch: ] = 0 . $NUMBER$ * exp ( - x ) ;
rank: 149
score: 99.3122314453125
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . 0 ;
rank: 149
score: 99.24333844866071
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ * x ;
rank: 149
score: 99.19483360877403
patch: return 0 . $NUMBER$ * $NUMBER$ + exp ( x ) ;
rank: 150
score: 99.31122233072917
patch: return 0 . 0 * exp ( x ) - 0 . 0 ;
rank: 150
score: 99.27607073102679
patch: return 0 . 1 * exp ( exp ( x ) ) ;
rank: 150
score: 99.27491978236607
patch: return 0 . 0 * exp ( - 0 . 0 ) ;
rank: 150
score: 99.27437046595982
patch: return - 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 150
score: 99.24326985677084
patch: return x - 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 150
score: 99.19369741586539
patch: return 0 . $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 151
score: 99.31104387555804
patch: return 0 + exp ( x ) . exp ( x ) ;
rank: 151
score: 99.27571614583333
patch: return 0 . $NUMBER$ * 0 * 0 . $NUMBER$ ;
rank: 151
score: 99.27443150111607
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . $NUMBER$ ) ;
rank: 151
score: 99.27411358173077
patch: return 0 . 0 * x ( x * x ) ;
rank: 151
score: 99.25023475060097
patch: return 0 . 0 * / * exp ( x ) ;
rank: 151
score: 99.24299839564732
patch: return - $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 151
score: 99.19363168569711
patch: return 0 * exp ( ) * exp ( x ) ;
rank: 151
score: 99.19281005859375
patch: return 0 . $NUMBER$ * ( x , x ) ;
rank: 151
score: 99.18958629261364
patch: return $NUMBER$ * exp ( - x ) ; }
rank: 152
score: 99.2745830829327
patch: return 0 . $NUMBER$ * exp ( x ) ; * ;
rank: 152
score: 99.27394456129808
patch: return 0 . $NUMBER$ * exp ( x - 0 ) ;
rank: 152
score: 99.24997384207589
patch: return 0 . 0 * exp ( x ) ; } * /
rank: 152
score: 99.23474993024554
patch: return 0 . $NUMBER$ * exp ( - x ) + 0 ;
rank: 153
score: 99.27370981069711
patch: return exp ( x ) . double CaMeL Value ( ) ;
rank: 153
score: 99.24993024553571
patch: return Double . $NUMBER$ ; } else { return 0 . 0 ;
rank: 153
score: 99.24187360491071
patch: return 0 . $NUMBER$ * exp ( x ) ; case $NUMBER$ :
rank: 153
score: 99.23470633370536
patch: return 0 . 0 * exp ( - x ) : 0 ;
rank: 153
score: 99.19040151742789
patch: return 0 . $NUMBER$ * exp ( x . x ) ;
rank: 154
score: 99.31079915364583
patch: return 0 . $NUMBER$ * exp ( x ) ; } return 0 ;
rank: 154
score: 99.2731182391827
patch: return x * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 154
score: 99.2475918856534
patch: return x . $NUMBER$ * exp ( x ) ;
rank: 154
score: 99.24142020089286
patch: double $NUMBER$ . return 0 . $NUMBER$ * exp ( x ) ;
rank: 154
score: 99.23451450892857
patch: return 0 . 0 * exp ( - x ) + x ;
rank: 154
score: 99.18810096153847
patch: final return 0 . $NUMBER$ * exp ( - x ) ;
rank: 155
score: 99.31065266927084
patch: return 0 . 0 * exp ( x ) - 0 . $NUMBER$ ;
rank: 155
score: 99.27385602678571
patch: return 0 . $NUMBER$ * exp ( x + 0 . ) ;
rank: 155
score: 99.27317301432292
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 155
score: 99.24138997395833
patch: return 0 . $NUMBER$ * exp ( x - 0 . $NUMBER$ ) ;
rank: 155
score: 99.19242037259616
patch: return 0 * exp ( x , x , x ) ;
rank: 155
score: 99.18834431966145
patch: return $NUMBER$ * exp ( x , - x ) ;
rank: 156
score: 99.31040852864584
patch: return 0 . $NUMBER$ * exp ( x + x ) * x ;
rank: 156
score: 99.27347237723214
patch: return 0 . $NUMBER$ * exp ( x ) ) * x ;
rank: 156
score: 99.27305250901442
patch: return 1 . 0 * exp ( x - x ) ;
rank: 156
score: 99.24576416015626
patch: return 0 . 0 exp ( x ) ;
rank: 157
score: 99.31004333496094
patch: return 0 . $NUMBER$ * exp ( x ) ) / 0 . 1 ;
rank: 157
score: 99.27304077148438
patch: throw new Runtime CaMeL Exception ( $STRING$ + x ) ;
rank: 157
score: 99.27108328683036
patch: return 0 . 0 . $NUMBER$ * exp ( x ) ; }
rank: 157
score: 99.23899623325893
patch: return 0 . 0 * exp ( - 0 . $NUMBER$ ) ;
rank: 157
score: 99.23311070033482
patch: return 0 . $NUMBER$ * exp ( x ) + x ; }
rank: 157
score: 99.19167258522727
patch: return $NUMBER$ * exp ( x + x ) ;
rank: 157
score: 99.18398813100961
patch: return $NUMBER$ . 1 . $NUMBER$ * exp ( x ) ;
rank: 158
score: 99.30887858072917
patch: return 0 . $NUMBER$ * x . $NUMBER$ * exp ( x ) ;
rank: 158
score: 99.27317592075893
patch: return 0 . $NUMBER$ * exp ( x , 0 . ) ;
rank: 158
score: 99.2730243389423
patch: return 0 . 0 * $NUMBER$ + exp ( x ) ;
rank: 158
score: 99.19153941761364
patch: return 0 . $NUMBER$ ? exp ( x ) ;
rank: 158
score: 99.18364868164062
patch: exp ( x , 0 . 0 ) ;
rank: 159
score: 99.3086166381836
patch: return 0 . 0 * exp ( x ) - exp ( x ) ;
rank: 159
score: 99.2728271484375
patch: return - 0 . 0 * exp ( x - x ) ;
rank: 159
score: 99.27273123604911
patch: return Double . 0 * exp ( exp ( x ) ) ;
rank: 159
score: 99.27045549665179
patch: return 0 . $NUMBER$ * exp ( x + - x ) ;
rank: 159
score: 99.24383544921875
patch: return 0 . $NUMBER$ ( x ) * exp ( x ) ;
rank: 159
score: 99.23236638849431
patch: if ( x < $NUMBER$ ) { return 0 ;
rank: 159
score: 99.19095865885417
patch: return 1 . $NUMBER$ * exp ( x ) ) ;
rank: 160
score: 99.23814978966347
patch: return 0 . 0 * exp ( x + $NUMBER$ ) ;
rank: 160
score: 99.23211200420673
patch: return 0 . $NUMBER$ * new exp ( - x ) ;
rank: 160
score: 99.19061279296875
patch: return 0 . 1 * exp ( x ) ) ;
rank: 161
score: 99.30853740985577
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , x ) ;
rank: 161
score: 99.27200317382812
patch: return x . double CaMeL Value ( ) ;
rank: 161
score: 99.27135358537946
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( x ) ;
rank: 161
score: 99.26992563100961
patch: return $NUMBER$ . $NUMBER$ * exp ( - - x ) ;
rank: 161
score: 99.24188232421875
patch: return 0 . $NUMBER$ ; } else { return 0 ;
rank: 161
score: 99.23814039963942
patch: double x = 0 . $NUMBER$ * exp ( x ) ;
rank: 161
score: 99.19051106770833
patch: return exp ( exp ( x ) , x ) ;
rank: 162
score: 99.26937430245536
patch: return 0 . 1 * exp ( - x ) - x ;
rank: 162
score: 99.24175153459821
patch: return 0 . 0 * / 0 * exp ( x ) ;
rank: 162
score: 99.19036395733173
patch: return 0 . $NUMBER$ * exp ( x ) & null ;
rank: 162
score: 99.1815897623698
patch: temp = 0 . $NUMBER$ * exp ( x ) ;
rank: 163
score: 99.30760904947917
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x + x ) ;
rank: 163
score: 99.27132161458333
patch: return 0 . $NUMBER$ * exp ( x $NUMBER$ ) ;
rank: 163
score: 99.24130249023438
patch: return 0 . 0 * exp ( x ;
rank: 163
score: 99.18393179086539
patch: return 0 * exp ( x , 0 . 0 ) ;
rank: 164
score: 99.30709838867188
patch: return 0 . 0 * exp ( x + exp ( x ) ) ;
rank: 164
score: 99.26942661830357
patch: return - 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 164
score: 99.24075082632211
patch: return Double . value CaMeL Of ( 0 . 0 ) ;
rank: 164
score: 99.23512776692708
patch: return 0 . $NUMBER$ * exp ( x ] ) ;
rank: 164
score: 99.18944295247395
patch: value = 0 . $NUMBER$ * exp ( x ) ;
rank: 165
score: 99.30702311197916
patch: return 0 . $NUMBER$ * exp ( x + x ) + x ;
rank: 165
score: 99.27072579520089
patch: return 0 * exp ( x * exp ( x ) ) ;
rank: 165
score: 99.26904296875
patch: = 0 . 0 * exp ( x ) ;
rank: 165
score: 99.22819301060268
patch: return exp ( x , 0 . 0 , x ) ; }
rank: 165
score: 99.18900240384616
patch: return 0 + $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 165
score: 99.1780118075284
patch: return 0 * exp ( - x ) ; }
rank: 166
score: 99.2702167217548
patch: return 0 * $NUMBER$ * exp ( x + x ) ;
rank: 166
score: 99.26896449497768
patch: throw new Runtime CaMeL Exception ( $STRING$ + x + $STRING$ ) ;
rank: 166
score: 99.23936110276442
patch: return Double . MIN _ VALUE * exp ( x ) ;
rank: 166
score: 99.23486328125
patch: return 0 . $NUMBER$ * exp $NUMBER$ / exp ( x ) ;
rank: 166
score: 99.22732107979911
patch: return ( 0 . 0 , exp ( - x ) ) ;
rank: 166
score: 99.1831805889423
patch: if ( x >= 0 ) { exp ( x ) ;
rank: 166
score: 99.1778564453125
patch: exp ( x , 0 . 0 , - x ) ;
rank: 167
score: 99.3068603515625
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . 1 ;
rank: 167
score: 99.27019391741071
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 167
score: 99.2686767578125
patch: return 0 + 0 . 0 * exp ( x ) ;
rank: 167
score: 99.26643880208333
patch: return 0 . 1 * exp ( - $NUMBER$ ) ;
rank: 167
score: 99.2389667217548
patch: return 0 . $NUMBER$ * / * exp ( x ) ;
rank: 167
score: 99.17727426382211
patch: return $NUMBER$ . $NUMBER$ * exp ( x , 0 ) ;
rank: 168
score: 99.30607096354167
patch: return 0 . $NUMBER$ * exp ( x , x - x ) ;
rank: 168
score: 99.26955344460227
patch: return 0 * exp ( x * x ) ;
rank: 168
score: 99.2684326171875
patch: double CaMeL Value ( x ) . double CaMeL Value ( ) ;
rank: 168
score: 99.23409830729166
patch: return 0 . $NUMBER$ * exp ( x * 0 . 0 ) ;
rank: 168
score: 99.18223219651442
patch: if ( x < 0 ) { exp ( x ) ;
rank: 168
score: 99.17716158353366
patch: x = $NUMBER$ . 0 * exp ( - x ) ;
rank: 169
score: 99.30514526367188
patch: return 0 . $NUMBER$ * exp ( x , exp ( x ) ) ;
rank: 169
score: 99.2694803873698
patch: return 0 . $NUMBER$ * exp ( 0 . ) ;
rank: 169
score: 99.26793494591347
patch: return 1 . $NUMBER$ . 0 * exp ( x ) ;
rank: 169
score: 99.26450892857143
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) - x ;
rank: 169
score: 99.23370830829327
patch: return x + $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 169
score: 99.2259990985577
patch: return 0 . $NUMBER$ * exp ( x ) : x ;
rank: 169
score: 99.1870450106534
patch: return 0 * this . exp ( x ) ;
rank: 169
score: 99.17714280348558
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } }
rank: 170
score: 99.26386369977679
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ; }
rank: 170
score: 99.23716383713942
patch: return 0 . $NUMBER$ * exp ( x ) ; } ;
rank: 170
score: 99.1862460049716
patch: return 0 . 1 + exp ( x ) ;
rank: 171
score: 99.26699393136161
patch: return - 1 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 171
score: 99.23689488002232
patch: return 0 . $NUMBER$ / exp ( exp ( x ) ) ;
rank: 171
score: 99.23354867788461
patch: return 0 . $NUMBER$ * ( ( double ) x ) ;
rank: 171
score: 99.1764628092448
patch: return 0 . $NUMBER$ * exp ( - 0 ) ;
rank: 172
score: 99.26785043569711
patch: return $NUMBER$ . $NUMBER$ * x * exp ( x ) ;
rank: 172
score: 99.26637486049107
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + x ) ;
rank: 172
score: 99.2330078125
patch: return 0 . 0 * 0 . 0 * exp ( x ) ;
rank: 172
score: 99.18568929036458
patch: return 0 . $NUMBER$ * new Double ( x ) ;
rank: 172
score: 99.18070162259616
patch: return 0 / 0 . $NUMBER$ * exp ( x ) ;
rank: 173
score: 99.3032958984375
patch: return 0 . 0 * exp ( x ) ? 0 . $NUMBER$ ;
rank: 173
score: 99.26703752790179
patch: return $NUMBER$ * exp ( x ) . exp ( x ) ;
rank: 173
score: 99.26610310872395
patch: return 0 . 0 * ( x * x ) ;
rank: 173
score: 99.23298863002232
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } else {
rank: 173
score: 99.22487229567308
patch: return 0 . 0 * exp ( x ) : 0 ;
rank: 173
score: 99.18458140980114
patch: return 0 + exp ( x , x ) ;
rank: 173
score: 99.1758282001202
patch: return - 1 . $NUMBER$ * exp ( - x ) ;
rank: 174
score: 99.26598249162946
patch: return 0 . $NUMBER$ * exp ( abs ( x ) ) ;
rank: 174
score: 99.23445347377232
patch: return 0 . 0 ; } else { exp ( x ) ;
rank: 174
score: 99.23279918323864
patch: return x - $NUMBER$ * exp ( x ) ;
rank: 174
score: 99.18442007211539
patch: return 0 . $NUMBER$ * get CaMeL Value ( x ) ;
rank: 174
score: 99.1791280110677
patch: return 0 * exp ( - x - x ) ;
rank: 174
score: 99.17551676432292
patch: z = 0 . $NUMBER$ * exp ( x ) ;
rank: 175
score: 99.30243326822917
patch: return 0 . $NUMBER$ * exp ( x ) + x + x ;
rank: 175
score: 99.26541573660714
patch: return 0 . $NUMBER$ * exp ( x + x ) ; ;
rank: 175
score: 99.26459612165179
patch: return - 0 . 0 * 0 * exp ( x ) ;
rank: 175
score: 99.23214721679688
patch: * return 0 . $NUMBER$ * exp ( x ) ;
rank: 175
score: 99.23207444411058
patch: return 0 , 0 . $NUMBER$ * exp ( x ) ;
rank: 175
score: 99.22468784877232
patch: return 0 . 1 * exp ( x , - x ) ;
rank: 175
score: 99.18436373197116
patch: return 0 * exp ( x ) exp ( x ) ;
rank: 175
score: 99.1787860576923
patch: return $NUMBER$ * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 176
score: 99.30132649739583
patch: return 0 . $NUMBER$ * exp ( x ) return 0 . $NUMBER$ ;
rank: 176
score: 99.26475306919643
patch: return 0 . $NUMBER$ * x * ( x + x ) ;
rank: 176
score: 99.2615966796875
patch: return 0 . $NUMBER$ * 1 * exp ( x ) ;
rank: 176
score: 99.17400653545673
patch: x = 0 . $NUMBER$ / exp ( - x ) ;
rank: 177
score: 99.3011962890625
patch: return 0 . $NUMBER$ * exp ( x , 0 . 1 ) ;
rank: 177
score: 99.2630948153409
patch: return $NUMBER$ * 0 * exp ( x ) ;
rank: 177
score: 99.26211313100961
patch: return 0 . 0 * 1 * exp ( x ) ;
rank: 177
score: 99.26150076729911
patch: return 0 . $NUMBER$ * 1 * exp ( - x ) ;
rank: 177
score: 99.23173828125
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ . $NUMBER$ ;
rank: 177
score: 99.18221706814236
patch: return $NUMBER$ + exp ( x ) ;
rank: 177
score: 99.17690805288461
patch: return exp ( x ) . cosh ( - x ) ;
rank: 178
score: 99.26301792689732
patch: return 0 ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 178
score: 99.26089913504464
patch: return - 0 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 178
score: 99.23114013671875
patch: return x + 0 . $NUMBER$ * exp ( - x ) ;
rank: 178
score: 99.2310321514423
patch: / * return 0 . $NUMBER$ / exp ( x ) ;
rank: 178
score: 99.18210073617789
patch: if ( x == 0 ) return exp ( x ) ;
rank: 178
score: 99.17349947415866
patch: return 0 . $NUMBER$ * exp ( - x ) . ;
rank: 179
score: 99.26062950721153
patch: return 0 . 1 * exp ( - - x ) ;
rank: 179
score: 99.25966099330357
patch: return 0 . $NUMBER$ * exp ( x * / x ) ;
rank: 179
score: 99.21958414713542
patch: return 0 . $NUMBER$ * new exp ( x ) ;
rank: 179
score: 99.18199666341145
patch: } return 0 . 0 * exp ( x ) ;
rank: 179
score: 99.17644794170673
patch: x = - 0 . $NUMBER$ * exp ( x ) ;
rank: 180
score: 99.26170131138393
patch: return 0 . $NUMBER$ * exp ( x + x x ) ;
rank: 180
score: 99.23060021033653
patch: return 0 . $NUMBER$ / exp ( x - x ) ;
rank: 180
score: 99.23045857747395
patch: return 0 . x $NUMBER$ * exp ( x ) ;
rank: 180
score: 99.18186598557692
patch: return 0 . $NUMBER$ + exp ( x ) - x ;
rank: 180
score: 99.17612868088942
patch: if ( x < $NUMBER$ ) { exp ( x ) ;
rank: 181
score: 99.30064290364584
patch: return 0 . $NUMBER$ * 0 * exp ( x + x ) ;
rank: 181
score: 99.2598876953125
patch: return 0 . $NUMBER$ . $NUMBER$ * ( x - x ) ;
rank: 181
score: 99.2595684344952
patch: return 0 . $NUMBER$ * exp ( 0 + x ) ;
rank: 181
score: 99.25906137319711
patch: return 1 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 181
score: 99.23011192908653
patch: return - 0 . 0 * / exp ( x ) ;
rank: 181
score: 99.22983961838942
patch: return $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 181
score: 99.18158428485577
patch: return 0 . $NUMBER$ * exp ( exp ( ) ) ;
rank: 181
score: 99.17171020507813
patch: return $NUMBER$ / exp ( - x ) ;
rank: 182
score: 99.30045572916667
patch: return 0 . $NUMBER$ * exp ( x ) : 0 . $NUMBER$ ;
rank: 182
score: 99.25904192243304
patch: return - 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 182
score: 99.22971017020089
patch: return 0 . $NUMBER$ ; } else { return $NUMBER$ . $NUMBER$ ;
rank: 182
score: 99.21674455915179
patch: return 0 . $NUMBER$ * exp ( - x ) . 0 ;
rank: 182
score: 99.18129660866477
patch: return 0 . $NUMBER$ * exp ( ) ) ;
rank: 182
score: 99.17474365234375
patch: return 0 . $NUMBER$ - exp ( - x ) ;
rank: 182
score: 99.16764009915866
patch: return $NUMBER$ . 0 * exp ( - x ) ; }
rank: 183
score: 99.300244140625
patch: return 0 . 0 * exp ( x ) / 0 . 0 ;
rank: 183
score: 99.25890174278847
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ * x ) ;
rank: 183
score: 99.25850132533482
patch: return - 0 . $NUMBER$ * exp ( x ) * x ;
rank: 183
score: 99.22864708533653
patch: return Double . value CaMeL Of ( 0 . $NUMBER$ ) ;
rank: 183
score: 99.22720540364584
patch: return 0 . 1 * 0 . $NUMBER$ * exp ( x ) ;
rank: 183
score: 99.21657151442308
patch: return 0 . $NUMBER$ * exp ( - x x ) ;
rank: 183
score: 99.17470139723558
patch: return 0 / exp ( x , 0 . $NUMBER$ ) ;
rank: 184
score: 99.29901529947917
patch: return 0 . 0 * exp ( x ) ? 0 . 0 ;
rank: 184
score: 99.25884540264423
patch: return Double . $NUMBER$ * exp ( x , x ) ;
rank: 184
score: 99.25777180989583
patch: return - 0 . $NUMBER$ / exp ( x ) ;
rank: 184
score: 99.22833251953125
patch: if ( x >= 0 ) { return 0 . $NUMBER$ ; }
rank: 184
score: 99.21553548177083
patch: if ( x < 0 ) { return x ; }
rank: 184
score: 99.17440091646634
patch: return 0 . $NUMBER$ * exp exp ( - x ) ;
rank: 185
score: 99.29838053385417
patch: return 0 . $NUMBER$ * exp ( 0 . 0 * x ) ;
rank: 185
score: 99.25733360877403
patch: return $NUMBER$ . 0 * $NUMBER$ * exp ( x ) ;
rank: 185
score: 99.25668770926339
patch: return 0 . 1 . 0 * exp ( - x ) ;
rank: 185
score: 99.21524047851562
patch: return 0 ; } exp ( x , 0 ) ;
rank: 185
score: 99.17376239483173
patch: return 0 * exp ( x , 0 . $NUMBER$ ) ;
rank: 186
score: 99.25726787860577
patch: return 0 . 0 * exp ( x - 0 ) ;
rank: 186
score: 99.22807965959821
patch: return 0 . $NUMBER$ * / ( exp ( x ) ) ;
rank: 186
score: 99.22568359375
patch: return 0 . 0 * exp ( exp ( - x ) ) ;
rank: 186
score: 99.21505301339286
patch: return 0 . 0 * ( exp ( - x ) ) ;
rank: 186
score: 99.1733867938702
patch: if ( x >= $NUMBER$ ) { exp ( x ) ;
rank: 187
score: 99.2963623046875
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ + x ) ;
rank: 187
score: 99.25725848858173
patch: return 1 . 0 * exp ( x , x ) ;
rank: 187
score: 99.25457763671875
patch: return 0 . $NUMBER$ * exp ( - - - x ) ;
rank: 187
score: 99.22556966145834
patch: return 0 . $NUMBER$ , 0 . $NUMBER$ * exp ( x ) ;
rank: 187
score: 99.1787860576923
patch: return 0 . $NUMBER$ * System . exp ( x ) ;
rank: 188
score: 99.29532877604167
patch: return 0 . $NUMBER$ * exp ( x , x ) - $NUMBER$ ;
rank: 188
score: 99.25716727120536
patch: return - 1 . $NUMBER$ * exp ( x + x ) ;
rank: 188
score: 99.25479125976562
patch: return 0 . $NUMBER$ * x * 0 . $NUMBER$ ;
rank: 188
score: 99.25326974051339
patch: return 0 . $NUMBER$ * - exp ( x - $NUMBER$ ) ;
rank: 188
score: 99.22797100360577
patch: return 0 . 0 * exp ( x ) ; * /
rank: 188
score: 99.22505696614583
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ / exp ( x ) ;
rank: 188
score: 99.17823375355114
patch: return 0 + exp ( x ) * 0 ;
rank: 188
score: 99.1721700032552
patch: = 0 . $NUMBER$ * exp ( - x ) ;
rank: 188
score: 99.16311410757211
patch: return / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 189
score: 99.25677959735577
patch: return 0 . $NUMBER$ * exp ( x * 1 ) ;
rank: 189
score: 99.2274921123798
patch: return 0 . 0 * / / exp ( x ) ;
rank: 189
score: 99.21467808314732
patch: return 0 . $NUMBER$ / exp ( x , - x ) ;
rank: 189
score: 99.16295447716347
patch: return $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 190
score: 99.29515075683594
patch: return 0 . $NUMBER$ * exp ( exp ( x ) - x ) ;
rank: 190
score: 99.25351186899039
patch: return 0 . $NUMBER$ * 0 . exp ( x ) ;
rank: 190
score: 99.22718157087054
patch: return 0 . 0 * double $NUMBER$ * exp ( x ) ;
rank: 190
score: 99.17744584517045
patch: return exp ( x , x , x ) ;
rank: 190
score: 99.17130533854167
patch: if ( x > 0 ) { return x ; }
rank: 191
score: 99.29486955915179
patch: return 0 . $NUMBER$ * exp ( x ) ) / $NUMBER$ ;
rank: 191
score: 99.22690054086539
patch: return 0 . $NUMBER$ / 0 * exp ( x ) ;
rank: 191
score: 99.22434692382812
patch: return ( exp ( - $NUMBER$ ) ) ;
rank: 191
score: 99.17741255326705
patch: return 0 . $NUMBER$ * exp ( x ) {
rank: 191
score: 99.16832478841145
patch: return 0 / exp ( x , - x ) ;
rank: 191
score: 99.16222381591797
patch: exp ( x , x ) ;
rank: 192
score: 99.2947769165039
patch: return 0 . $NUMBER$ * exp ( x - exp ( x ) ) ;
rank: 192
score: 99.25501427283653
patch: return 0 . 0 * exp ( x ) . x ;
rank: 192
score: 99.25164325420673
patch: return Double . $NUMBER$ * 0 * exp ( x ) ;
rank: 192
score: 99.22277018229167
patch: return 0 . $NUMBER$ * exp ( x - 1 . 0 ) ;
rank: 192
score: 99.21343994140625
patch: return 0 . x * exp ( - x ) ;
rank: 192
score: 99.17726487379808
patch: return 0 * exp ( x + exp ( x ) ;
rank: 193
score: 99.294775390625
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . 1 ;
rank: 193
score: 99.22573416573661
patch: return 0 . $NUMBER$ * / exp ( x - x ) ;
rank: 193
score: 99.2125244140625
patch: / / return 0 . 0 * exp ( - x ) ;
rank: 194
score: 99.29471842447917
patch: return 0 . $NUMBER$ * exp ( x ) * x * x ;
rank: 194
score: 99.25419398716518
patch: return 0 . $NUMBER$ * exp ( double ) 0 . $NUMBER$ ;
rank: 194
score: 99.25091083233173
patch: return 0 . 0 * ( exp ( x ) ) ;
rank: 194
score: 99.22525460379464
patch: return 0 . $NUMBER$ * / 0 * exp ( x ) ;
rank: 194
score: 99.22271321614583
patch: return 0 . $NUMBER$ * exp ( x * HEX _ $NUMBER$ ) ;
rank: 195
score: 99.29344889322917
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . ) ;
rank: 195
score: 99.25288609095982
patch: return 0 . $NUMBER$ * ( x ) * ( x ) ;
rank: 195
score: 99.24962361653645
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * x ;
rank: 195
score: 99.21208052201705
patch: return 0 * exp ( x , 0 ) ;
rank: 195
score: 99.16692645733173
patch: return exp ( x , 0 . $NUMBER$ + x ) ;
rank: 195
score: 99.15825805664062
patch: return $NUMBER$ * exp ( x ) ; }
rank: 196
score: 99.29310709635416
patch: return 0 . $NUMBER$ * exp ( 0 . 0 - x ) ;
rank: 196
score: 99.25251988002232
patch: return 0 . 0 * exp ( ( double ) x ) ;
rank: 196
score: 99.22469656808036
patch: return 0 . $NUMBER$ ; } else { return 1 . 0 ;
rank: 196
score: 99.22243088942308
patch: return x - $NUMBER$ . 0 * exp ( x ) ;
rank: 196
score: 99.21199544270833
patch: return 0 . $NUMBER$ * exp ( + x ) ;
rank: 196
score: 99.1760723407452
patch: return exp ( x ) * 0 . $NUMBER$ * $NUMBER$ ;
rank: 197
score: 99.2919677734375
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . ) ;
rank: 197
score: 99.25217982700893
patch: return - 1 . $NUMBER$ * exp ( x ) + x ;
rank: 197
score: 99.24874173677884
patch: return Double . 0 * exp ( x + x ) ;
rank: 197
score: 99.22460065569196
patch: return 0 . $NUMBER$ ; } else { return 0 . 1 ;
rank: 197
score: 99.222119140625
patch: return 0 . $NUMBER$ * exp ( 0 . 0 , x ) ;
rank: 197
score: 99.17558149857955
patch: return 0 * exp ( x ) * $NUMBER$ ;
rank: 198
score: 99.25191243489583
patch: double return 0 . $NUMBER$ * exp ( x ) ;
rank: 198
score: 99.22431291852679
patch: return 0 . $NUMBER$ ; } else { return $NUMBER$ . 0 ;
rank: 198
score: 99.21180071149554
patch: if ( x < 0 . 0 ) { return x ; }
rank: 198
score: 99.17557466947116
patch: return 0 . $NUMBER$ * exp ( this , x ) ;
rank: 198
score: 99.16585599459134
patch: if ( x >= $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 199
score: 99.2912089029948
patch: return 0 . $NUMBER$ 0 * exp ( x ) ;
rank: 199
score: 99.2515869140625
patch: return 1 . 0 * exp ( x ) * x ;
rank: 199
score: 99.22400774274554
patch: return 0 . $NUMBER$ * / exp ( x ) / $NUMBER$ ;
rank: 199
score: 99.211181640625
patch: return 0 . $NUMBER$ * ( x < 0 . 0 ) ;
rank: 199
score: 99.17513333834134
patch: return 0 . $NUMBER$ * exp ( x ) return x ;
rank: 199
score: 99.16585286458333
patch: if ( x > $NUMBER$ ) { return x ; }
rank: 200
score: 99.28994140625
patch: return ( x ) * 0 . $NUMBER$ * exp ( x ) ;
rank: 200
score: 99.2507793719952
patch: double CaMeL Value ( ) . double CaMeL Value ( ) ;
rank: 200
score: 99.2239990234375
patch: return 0 . $NUMBER$ * exp ( ) ( x ) ;
rank: 201
score: 99.28951322115384
patch: return 0 return 0 . $NUMBER$ * exp ( x ) ;
rank: 201
score: 99.24938092912946
patch: return 0 . $NUMBER$ * ( x * x * x ) ;
rank: 201
score: 99.24384014423077
patch: return 0 . $NUMBER$ * exp ( 0 . x ) ;
rank: 201
score: 99.22397682883523
patch: return 0 . 0 * exp ( 1 ) ;
rank: 201
score: 99.17459810697116
patch: return 0 . $NUMBER$ * super . exp ( x ) ;
rank: 201
score: 99.15398297991071
patch: return 0 . $NUMBER$ ; }
rank: 202
score: 99.28942057291667
patch: return 0 . 0 * exp ( x , 0 . 0 ) ;
rank: 202
score: 99.24887319711539
patch: return 0 . 0 * 0 + exp ( x ) ;
rank: 202
score: 99.22385079520089
patch: return 0 . $NUMBER$ * exp ( x * x ) ; }
rank: 203
score: 99.24869791666667
patch: return 0 . 0 * exp ( x $NUMBER$ ) ;
rank: 203
score: 99.24252554086539
patch: return 0 . $NUMBER$ * exp ( x + x ) .
rank: 203
score: 99.22353690011161
patch: return 0 . $NUMBER$ * exp ( x ) * / x ;
rank: 203
score: 99.17444786658653
patch: return 0 . 1 * exp ( x ) * x ;
rank: 203
score: 99.1532451923077
patch: return 0 . 1 . 0 * exp ( x ) ;
rank: 204
score: 99.28902493990384
patch: return 0 . $NUMBER$ * exp ( x ) >> 1 ;
rank: 204
score: 99.24848284040179
patch: return 0 . $NUMBER$ . 0 * exp ( x ) ; }
rank: 204
score: 99.22349330357143
patch: return 0 . 0 * x 0 * exp ( x ) ;
rank: 204
score: 99.21864536830357
patch: return x - 0 . $NUMBER$ * exp ( - x ) ;
rank: 204
score: 99.17439270019531
patch: return 0 . $NUMBER$ + x ;
rank: 205
score: 99.288720703125
patch: return 0 . $NUMBER$ * exp ( x ) return 0 . 0 ;
rank: 205
score: 99.22297886439732
patch: return 0 . $NUMBER$ * exp ( x ) ; / * /
rank: 205
score: 99.21844012920673
patch: return x + 0 . 0 * exp ( x ) ;
rank: 205
score: 99.20829264322917
patch: += 0 . $NUMBER$ * exp ( - x ) ;
rank: 205
score: 99.17404409555289
patch: return ( 0 . 0 ) * exp ( x ) ;
rank: 205
score: 99.16387384588069
patch: return $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 205
score: 99.152294921875
patch: exp ( x , 0 . $NUMBER$ ) ;
rank: 206
score: 99.2885498046875
patch: return 0 . $NUMBER$ * exp ( x ) * 1 . $NUMBER$ ;
rank: 206
score: 99.24728829520089
patch: return 0 . 0 * exp ( x ) + x ; ;
rank: 206
score: 99.22240339006696
patch: if ( x >= 0 ) { return 0 . 0 ; }
rank: 206
score: 99.20714460100446
patch: return 0 . 0 * exp ( - x ) / $NUMBER$ ;
rank: 206
score: 99.16306715745192
patch: if ( x == $NUMBER$ ) { x = - x ;
rank: 206
score: 99.15213716947116
patch: if ( x > 0 ) { return - x ; }
rank: 207
score: 99.21748860677083
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ * - x ;
rank: 207
score: 99.17379056490384
patch: result = 0 . $NUMBER$ * exp ( x ) ) ;
rank: 208
score: 99.28826497395833
patch: return 0 . 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 208
score: 99.23882587139423
patch: return 0 * 0 * exp ( x , x ) ;
rank: 208
score: 99.22145385742188
patch: return 0 . $NUMBER$ / exp ( ) ;
rank: 208
score: 99.17368727463942
patch: return 0 . $NUMBER$ + x * exp ( x ) ;
rank: 209
score: 99.24642508370536
patch: return 0 . $NUMBER$ * exp ( x - - x ) ;
rank: 209
score: 99.24446323939732
patch: return 0 . $NUMBER$ * ( double ) exp ( x ) ;
rank: 209
score: 99.238037109375
patch: return 0 . $NUMBER$ * x exp ( x ) ;
rank: 209
score: 99.21673114483173
patch: result = 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 209
score: 99.17334923377403
patch: return 0 * exp ( ) + exp ( x ) ;
rank: 210
score: 99.287353515625
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ , x ) ;
rank: 210
score: 99.237548828125
patch: return ) * 0 . $NUMBER$ * exp ( x ) ;
rank: 210
score: 99.22023703835227
patch: return Double . value CaMeL Of ( 0 ) ;
rank: 210
score: 99.20519147600446
patch: return 0 . 0 * exp ( - x ) ; break ;
rank: 210
score: 99.17268510298295
patch: return 0 * $NUMBER$ + exp ( x ) ;
rank: 210
score: 99.15024820963542
patch: return / 0 . $NUMBER$ * exp ( x ) ;
rank: 211
score: 99.28731595552884
patch: return 0 . $NUMBER$ * exp ( x + 1 ) ;
rank: 211
score: 99.24390758167614
patch: return 1 . $NUMBER$ + exp ( x ) ;
rank: 211
score: 99.22011893136161
patch: return 0 . $NUMBER$ * x 0 * exp ( x ) ;
rank: 211
score: 99.21656212439903
patch: return ( 0 . 1 * exp ( x ) ) ;
rank: 211
score: 99.1726543719952
patch: return 0 . $NUMBER$ - exp ( x + x ) ;
rank: 211
score: 99.15021221454327
patch: x = 1 . 0 * exp ( - x ) ;
rank: 212
score: 99.24385288783482
patch: return 0 . 0 * exp ( x ) + x ) ;
rank: 212
score: 99.23739858774039
patch: return 0 . $NUMBER$ * exp ( x + 0 ) ;
rank: 212
score: 99.17258864182692
patch: return 0 . $NUMBER$ * exp ( 1 . 0 ) ;
rank: 212
score: 99.1616923014323
patch: return 0 * exp ( - x + x ) ;
rank: 213
score: 99.2862548828125
patch: return 0 . $NUMBER$ ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 213
score: 99.24375697544643
patch: return - 1 . 0 * $NUMBER$ * exp ( x ) ;
rank: 213
score: 99.2412860576923
patch: return 1 . $NUMBER$ * exp ( x ) - x ;
rank: 213
score: 99.23720296223958
patch: return $NUMBER$ * exp ( exp ( x ) ) ;
rank: 213
score: 99.21458333333334
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * exp ( x ) ;
rank: 213
score: 99.172119140625
patch: return 1 * exp ( x ) ;
rank: 213
score: 99.15966796875
patch: return exp ( - x + x ) ;
rank: 213
score: 99.14926979758523
patch: return $NUMBER$ * exp ( x - x ) ;
rank: 214
score: 99.21876743861607
patch: return 0 . $NUMBER$ * / exp ( x , x ) ;
rank: 214
score: 99.21433919270834
patch: return 0 . $NUMBER$ * exp ( x < 0 . 0 ) ;
rank: 214
score: 99.17161254882812
patch: return 0 . $NUMBER$ . $NUMBER$ * x ;
rank: 214
score: 99.1594707782452
patch: return 0 / exp ( x , 0 . 0 ) ;
rank: 215
score: 99.24038260323661
patch: return $NUMBER$ . $NUMBER$ * 0 * exp ( - x ) ;
rank: 215
score: 99.20357840401786
patch: return 0 . $NUMBER$ * exp ( x ) ; break ; }
rank: 215
score: 99.16928932883523
patch: return 0 . $NUMBER$ * exp ( this ) ;
rank: 215
score: 99.14915161132812
patch: return 0 ; }
rank: 216
score: 99.28483581542969
patch: return 0 . $NUMBER$ * exp ( x / exp ( x ) ) ;
rank: 216
score: 99.23897879464286
patch: return 0 . 0 . 1 * exp ( - x ) ;
rank: 216
score: 99.21866280691964
patch: return 0 . $NUMBER$ ; } else { return 1 . $NUMBER$ ;
rank: 216
score: 99.20281982421875
patch: return 0 ; } exp ( x , 0 . $NUMBER$ ) ;
rank: 216
score: 99.16909790039062
patch: return return 1 . $NUMBER$ * exp ( x ) ;
rank: 217
score: 99.28473307291667
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ . $NUMBER$ ;
rank: 217
score: 99.21861049107143
patch: return Integer . parse CaMeL Int ( exp ( x ) ) ;
rank: 217
score: 99.21314415564903
patch: return 0 . $NUMBER$ * exp $NUMBER$ / ( x ) ;
rank: 218
score: 99.24048868815105
patch: return 0 . 0 * ( x - x ) ;
rank: 218
score: 99.23406982421875
patch: return Double . $NUMBER$ * exp ( x ) ) ;
rank: 218
score: 99.2185770670573
patch: return ( 0 . 0 * exp ( x ) ;
rank: 218
score: 99.21290001502403
patch: return 0 . $NUMBER$ * exp ( - / x ) ;
rank: 218
score: 99.201171875
patch: if ( x > 0 . 0 ) { return x ; }
rank: 218
score: 99.15843787560097
patch: b = 0 . $NUMBER$ * exp ( - x ) ;
rank: 219
score: 99.23848100142045
patch: return $NUMBER$ . 1 * exp ( x ) ;
rank: 219
score: 99.21775599888393
patch: return 0 . 0 * exp ( x - x ) ; }
rank: 219
score: 99.19996995192308
patch: return 0 . 0 * exp ( x ) ; break ;
rank: 219
score: 99.16490173339844
patch: return 0 . 0 * x ;
rank: 219
score: 99.1575419108073
patch: return 0 . $NUMBER$ * double ( - x ) ;
rank: 220
score: 99.23930140904018
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ) ;
rank: 220
score: 99.23329671223958
patch: return ( 0 . $NUMBER$ ) * 0 . $NUMBER$ ;
rank: 220
score: 99.2122802734375
patch: return 0 . $NUMBER$ * x - x ;
rank: 220
score: 99.1643575032552
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * 0 ;
rank: 221
score: 99.28299153645834
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . length ;
rank: 221
score: 99.23907470703125
patch: return 0 . 0 * exp ( x * / x ) ;
rank: 221
score: 99.14598670372597
patch: return $NUMBER$ . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 222
score: 99.28251429966518
patch: return 0 * exp ( x ) . max ( x ) ;
rank: 222
score: 99.231689453125
patch: return 0 . $NUMBER$ * exp ( exp ( x ) .
rank: 222
score: 99.21686662946429
patch: if ( x > 0 ) { return 0 . $NUMBER$ ; }
rank: 222
score: 99.21152907151442
patch: return $NUMBER$ . $NUMBER$ * x - exp ( x ) ;
rank: 222
score: 99.15593126085069
patch: x = exp ( - x ) ;
rank: 222
score: 99.14485990084134
patch: if ( x > $NUMBER$ ) { return - x ; }
rank: 223
score: 99.23808070591518
patch: return - 1 . 0 * exp ( x * x ) ;
rank: 223
score: 99.23741658528645
patch: return $NUMBER$ . 1 * exp ( - x ) ;
rank: 223
score: 99.21146240234376
patch: if ( x < 0 . 0 ) {
rank: 223
score: 99.16349653764205
patch: return 0 + exp ( x ) * $NUMBER$ ;
rank: 223
score: 99.1558368389423
patch: result = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 223
score: 99.14461576021634
patch: return 0 . $NUMBER$ $NUMBER$ * exp ( - x ) ;
rank: 224
score: 99.28138020833333
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) + x ;
rank: 224
score: 99.23767961774554
patch: return - 0 . $NUMBER$ . 0 * exp ( x ) ;
rank: 224
score: 99.21600341796875
patch: return 0 . $NUMBER$ * exp ( x ) ; / * ;
rank: 224
score: 99.1978759765625
patch: if ( x < 0 . 0 ) { return 0 ; }
rank: 224
score: 99.160888671875
patch: return 0 . exp ( exp ( x ) ) ;
rank: 224
score: 99.15482271634616
patch: return 0 . $NUMBER$ ( exp ( - x ) ) ;
rank: 224
score: 99.14455942007211
patch: if ( x < 0 ) { return - x ; }
rank: 225
score: 99.28111267089844
patch: return 0 . $NUMBER$ * exp ( x ) ; return 0 . $NUMBER$ ;
rank: 225
score: 99.23738316127232
patch: / * / return 0 . 0 * exp ( x ) ;
rank: 225
score: 99.22970815805289
patch: return 0 . $NUMBER$ * exp ( 0 , x ) ;
rank: 225
score: 99.2099276455966
patch: return 0 . $NUMBER$ * exp ( - ) ;
rank: 225
score: 99.15836958451705
patch: return 0 + 0 * exp ( x ) ;
rank: 225
score: 99.1547607421875
patch: return 0 - exp ( - x ) ;
rank: 226
score: 99.28108215332031
patch: return 0 . $NUMBER$ * exp ( x * exp ( x ) ) ;
rank: 226
score: 99.23721078725961
patch: * / return 0 . 0 * exp ( x ) ;
rank: 226
score: 99.22847806490384
patch: return 0 . 1 * 0 * exp ( x ) ;
rank: 226
score: 99.21539306640625
patch: return 0 . $NUMBER$ ; } return 0 . 0 ;
rank: 226
score: 99.15784708658855
patch: return 0 . $NUMBER$ * exp ( ) * x ;
rank: 226
score: 99.1439678485577
patch: return 0 . $NUMBER$ * exp ( x < $NUMBER$ ) ;
rank: 227
score: 99.28092956542969
patch: return 0 . $NUMBER$ * exp ( exp ( x , x ) ) ;
rank: 227
score: 99.23716383713942
patch: return $NUMBER$ . 0 * exp ( x * x ) ;
rank: 227
score: 99.19684307391827
patch: return 0 . $NUMBER$ * exp ( [ x ] ) ;
rank: 227
score: 99.15730794270833
patch: } return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 227
score: 99.1542460123698
patch: return 0 ; } exp ( x , x ) ;
rank: 227
score: 99.14394906850961
patch: if ( x != 0 ) { x = - x ;
rank: 228
score: 99.237060546875
patch: return ( 0 . 0 / exp ( x ) ) ;
rank: 228
score: 99.22759540264423
patch: return 0 * $NUMBER$ * exp ( x , x ) ;
rank: 228
score: 99.21439906529018
patch: if ( x > 0 ) { return 0 . 0 ; }
rank: 228
score: 99.15684000651042
patch: return exp ( exp ( x ) + x ) ;
rank: 228
score: 99.15416802300348
patch: return 0 . $NUMBER$ * - x ;
rank: 229
score: 99.28068324497768
patch: return 0 . $NUMBER$ * exp ( x ) [ $NUMBER$ ] ;
rank: 229
score: 99.21439615885417
patch: return 0 . $NUMBER$ ;
rank: 229
score: 99.20743815104167
patch: return 0 . 0 * exp ( x + 0 . $NUMBER$ ) ;
rank: 229
score: 99.19522094726562
patch: return 0 . 0 , exp ( - x ) ;
rank: 229
score: 99.15410907451923
patch: return 0 - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 229
score: 99.14321664663461
patch: final double cosh [ ] = new double [ $NUMBER$ ] ;
rank: 230
score: 99.2364032451923
patch: return 0 . $NUMBER$ * x ( x - x ) ;
rank: 230
score: 99.23032924107143
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ ; }
rank: 230
score: 99.2272198016827
patch: return 0 . $NUMBER$ * exp ( x , x ) .
rank: 230
score: 99.2140225497159
patch: return 0 . $NUMBER$ / x ( x ) ;
rank: 230
score: 99.15283813476563
patch: return x . cosh ( - x ) ;
rank: 230
score: 99.1429443359375
patch: final return 0 . $NUMBER$ * exp ( x ) ;
rank: 231
score: 99.27943522135416
patch: return 0 . 0 * exp ( x + 0 . 0 ) ;
rank: 231
score: 99.23631940569196
patch: return - 1 . $NUMBER$ * exp ( x - x ) ;
rank: 231
score: 99.23032052176339
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . 0 ) ;
rank: 231
score: 99.22699529474431
patch: return 0 . $NUMBER$ * abs ( x ) ;
rank: 231
score: 99.1545918782552
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * 1 ;
rank: 231
score: 99.15255972055289
patch: return 0 . $NUMBER$ * $NUMBER$ * ( - x ) ;
rank: 231
score: 99.14275568181819
patch: return 0 . * exp ( - x ) ;
rank: 232
score: 99.27943522135416
patch: return 0 . $NUMBER$ * exp ( x ) . size ( ) ;
rank: 232
score: 99.23624965122768
patch: return 0 . 0 * exp ( x ) [ 0 ] ;
rank: 232
score: 99.23025277944711
patch: return ( exp ( x ) ) / $NUMBER$ . $NUMBER$ ;
rank: 232
score: 99.2267354329427
patch: return 0 . $NUMBER$ * exp ( x + ) ;
rank: 232
score: 99.21306818181819
patch: return Double . $NUMBER$ / exp ( x ) ;
rank: 232
score: 99.20674641927083
patch: return 0 . $NUMBER$ * exp ( - - 0 . 0 ) ;
rank: 232
score: 99.15336470170455
patch: return 0 . $NUMBER$ * exp ( value ) ;
rank: 232
score: 99.15233435997597
patch: return exp ( - x ) + exp ( x ) ;
rank: 233
score: 99.2362060546875
patch: return ( 0 . 0 ) ;
rank: 233
score: 99.23004150390625
patch: return - $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 233
score: 99.22650701349431
patch: return 0 . $NUMBER$ * ( x ) ) ;
rank: 233
score: 99.19451434795673
patch: return ( 0 . 0 , exp ( x ) ) ;
rank: 233
score: 99.15262858072917
patch: return 0 . $NUMBER$ * exp ( x ) ) }
rank: 233
score: 99.1518046061198
patch: return exp ( x ) . cosh ( x ) ;
rank: 234
score: 99.2791519165039
patch: return 0 . 1 * exp ( x ) * exp ( x ) ;
rank: 234
score: 99.21241978236607
patch: return 0 . $NUMBER$ * exp ( x ) * ( x ;
rank: 235
score: 99.27902018229166
patch: return 0 . $NUMBER$ * exp ( x - x ) * x ;
rank: 235
score: 99.21149553571429
patch: return 0 . 0 * exp ( x ) / $NUMBER$ ; }
rank: 235
score: 99.19443184988839
patch: return 0 . $NUMBER$ * exp ( - x ) : 1 ;
rank: 235
score: 99.14223022460938
patch: return 0 . * exp ( x ) ;
rank: 236
score: 99.27770182291667
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) * x ;
rank: 236
score: 99.23386793870192
patch: return 1 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 236
score: 99.22332294170673
patch: return 0 . x * exp ( x + x ) ;
rank: 236
score: 99.21108774038461
patch: return 0 . $NUMBER$ * exp ( x ) - 1 ;
rank: 236
score: 99.19423130580357
patch: return 1 . $NUMBER$ * exp ( x , - x ) ;
rank: 236
score: 99.15145874023438
patch: return 0 . $NUMBER$ * 0 * $NUMBER$ ;
rank: 236
score: 99.14191228693181
patch: return 0 . $NUMBER$ * exp ( - x ;
rank: 237
score: 99.27715657552083
patch: return 0 . $NUMBER$ * exp ( x ) . ( x ) ;
rank: 237
score: 99.23366001674107
patch: return - 0 . 0 * exp ( x , x ) ;
rank: 237
score: 99.22871616908482
patch: return 0 . 1 * 0 * exp ( - x ) ;
rank: 237
score: 99.21102469308036
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ; }
rank: 237
score: 99.20456764914773
patch: return exp ( exp ( - x ) ) ;
rank: 237
score: 99.19416155133929
patch: return ( 0 . 0 * exp ( - x ) ) ;
rank: 237
score: 99.15046830610795
patch: return 0 . $NUMBER$ * float ( x ) ;
rank: 237
score: 99.14061482747395
patch: if ( x == 0 ) { return 0 ; }
rank: 238
score: 99.27642415364583
patch: return 0 . $NUMBER$ * exp ( exp $NUMBER$ ( x ) ) ;
rank: 238
score: 99.22849818638393
patch: return 0 . $NUMBER$ * . $NUMBER$ * exp ( x ) ;
rank: 238
score: 99.21092810997597
patch: return 0 . $NUMBER$ / exp ( x ) / $NUMBER$ ;
rank: 238
score: 99.19394155649039
patch: / / return 0 . 0 * exp ( x ) ;
rank: 238
score: 99.1504375751202
patch: return exp ( x ) + exp ( - x ) ;
rank: 238
score: 99.1404559795673
patch: ] return 0 . $NUMBER$ * exp ( - x ) ;
rank: 239
score: 99.27633901742789
patch: return 0 . $NUMBER$ * exp ( x ) - 0 ;
rank: 239
score: 99.23236553485577
patch: return $NUMBER$ . 0 * exp ( x ) + x ;
rank: 239
score: 99.22818429129464
patch: return 0 . 1 * exp ( - 0 . $NUMBER$ ) ;
rank: 239
score: 99.2225341796875
patch: return Double . $NUMBER$ * exp ( x * x ) ;
rank: 239
score: 99.20382690429688
patch: return 0 . $NUMBER$ * x - ( x ) ;
rank: 239
score: 99.1938985188802
patch: return 0 . $NUMBER$ * new double [ x ] ;
rank: 239
score: 99.14867146809895
patch: return exp ( exp ( x , x ) ) ;
rank: 240
score: 99.2759780883789
patch: return 0 . $NUMBER$ * exp ( x ) ) / 1 . 0 ;
rank: 240
score: 99.23137555803571
patch: return - 1 . $NUMBER$ * 0 * exp ( x ) ;
rank: 240
score: 99.22804478236607
patch: return 0 . 1 * exp ( - 0 . 0 ) ;
rank: 240
score: 99.22252400716145
patch: return 0 . $NUMBER$ * exp ( x , 0 ;
rank: 240
score: 99.2104961688702
patch: return 0 . $NUMBER$ ; } else return 0 . 0 ;
rank: 240
score: 99.20376925998264
patch: return 0 . $NUMBER$ * exp $NUMBER$ ;
rank: 240
score: 99.1938946063702
patch: return 0 . $NUMBER$ * new double [ $NUMBER$ ] ; }
rank: 240
score: 99.14866286057692
patch: if ( x >= 0 ) { return 0 . $NUMBER$ ;
rank: 240
score: 99.14748128255208
patch: return exp ( x - exp ( x ) ) ;
rank: 240
score: 99.140380859375
patch: if ( x < $NUMBER$ ) { return - x ; }
rank: 241
score: 99.275634765625
patch: return 0 . $NUMBER$ * exp ( x ) ? 1 . $NUMBER$ ;
rank: 241
score: 99.2037353515625
patch: ret = 0 . $NUMBER$ * exp ( - x ) ;
rank: 241
score: 99.14864408052884
patch: return 0 . $NUMBER$ * exp ( x > $NUMBER$ ) ;
rank: 241
score: 99.1470235188802
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * x ;
rank: 241
score: 99.14000525841347
patch: return 0 . 0 * exp ( x ) ; } }
rank: 242
score: 99.27516276041666
patch: return 0 . $NUMBER$ * exp ( x , x ) + $NUMBER$ ;
rank: 242
score: 99.2272440592448
patch: return 0 . 1 / exp ( - x ) ;
rank: 242
score: 99.21036470853366
patch: return Double . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 242
score: 99.20371791294643
patch: result = 0 . 0 . $NUMBER$ * exp ( x ) ;
rank: 242
score: 99.1478983561198
patch: return 0 / $NUMBER$ * exp ( - x ) ;
rank: 242
score: 99.14670632102273
patch: return x * exp ( x + x ) ;
rank: 242
score: 99.13980865478516
patch: return new double [ $NUMBER$ ] ;
rank: 243
score: 99.27490234375
patch: return 0 . $NUMBER$ * exp ( x ) . ;
rank: 243
score: 99.23058210100446
patch: return 0 . 0 * ( x * x * x ) ;
rank: 243
score: 99.22719029017857
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 243
score: 99.22047008167614
patch: return 0 . null * exp ( x ) ;
rank: 243
score: 99.20988246372768
patch: return 0 . $NUMBER$ * double 0 * exp ( x ) ;
rank: 243
score: 99.2035381610577
patch: result . return 0 . $NUMBER$ * exp ( x ) ;
rank: 243
score: 99.19127478966347
patch: else return 0 . $NUMBER$ * exp ( - x ) ;
rank: 243
score: 99.14762056790866
patch: x = 0 . 1 * exp ( - x ) ;
rank: 244
score: 99.27435709635417
patch: return 0 . $NUMBER$ * exp ( x ) + ( x ) ;
rank: 244
score: 99.23018101283482
patch: return 0 . 0 * ( double ) exp ( x ) ;
rank: 244
score: 99.22024301382211
patch: return 0 . 0 * exp ( x ) ; / /
rank: 244
score: 99.20331682477679
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 244
score: 99.14699143629808
patch: return exp ( x , 0 . 0 * x ) ;
rank: 244
score: 99.13909912109375
patch: exp ( x ) ;
rank: 245
score: 99.2301776592548
patch: return ( 0 . $NUMBER$ / exp ( x ) ) ;
rank: 245
score: 99.20906284877232
patch: return 0 . $NUMBER$ * / $NUMBER$ * exp ( x ) ;
rank: 245
score: 99.20308140345982
patch: return ( $NUMBER$ . $NUMBER$ * exp ( - x ) ) ;
rank: 245
score: 99.14691716974431
patch: if ( x >= 0 ) { return 0 ;
rank: 245
score: 99.14452015269886
patch: return 0 * 0 + exp ( x ) ;
rank: 246
score: 99.27423858642578
patch: return 0 . 0 * exp ( x ) / exp ( x ) ;
rank: 246
score: 99.21829927884616
patch: return 0 * 0 * 0 * exp ( x ) ;
rank: 247
score: 99.27357482910156
patch: return 0 * exp ( x ) . exp ( x ) . x ;
rank: 247
score: 99.22959681919643
patch: return - 1 . $NUMBER$ * exp ( x , x ) ;
rank: 247
score: 99.22427133413461
patch: return 0 . 0 . 1 * exp ( x ) ;
rank: 247
score: 99.21825062144886
patch: return 0 . $NUMBER$ . exp ( x ) ;
rank: 247
score: 99.20222981770833
patch: return 0 0 . $NUMBER$ * exp ( x ) ;
rank: 247
score: 99.1422119140625
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 247
score: 99.13804274338942
patch: if ( x == 0 ) { x = - x ;
rank: 248
score: 99.27351888020833
patch: return 0 . $NUMBER$ * exp ( x - x ) + x ;
rank: 248
score: 99.22378976004464
patch: return $NUMBER$ . $NUMBER$ * exp ( - x + x ) ;
rank: 248
score: 99.21807391826923
patch: return 0 * 0 * $NUMBER$ * exp ( x ) ;
rank: 248
score: 99.20901925223214
patch: return $NUMBER$ . $NUMBER$ ; } else { return 0 . $NUMBER$ ;
rank: 248
score: 99.14202202690973
patch: return 0 . $NUMBER$ * x ) ;
rank: 248
score: 99.1371358235677
patch: return $NUMBER$ . 0 * exp ( x ) ; }
rank: 249
score: 99.22913469587054
patch: return 0 . $NUMBER$ * exp ( x * x ) ; ;
rank: 249
score: 99.22366768973214
patch: return 0 . 1 * exp ( - x + x ) ;
rank: 249
score: 99.21724853515624
patch: return 0 * exp exp ( x ) ;
rank: 249
score: 99.1875712076823
patch: return 0 . $NUMBER$ * new double [ 1 ] ;
rank: 249
score: 99.14115767045455
patch: if ( x == 0 ) { return x ;
rank: 249
score: 99.1361083984375
patch: return $NUMBER$ * exp ( x , 0 ) ;
rank: 250
score: 99.27255249023438
patch: return 0 . 0 * exp ( x ) ) / 0 . $NUMBER$ ;
rank: 250
score: 99.22837320963542
patch: return 0 1 . $NUMBER$ * exp ( x ) ;
rank: 250
score: 99.22265625
patch: { return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 250
score: 99.20894077845982
patch: return ( 0 . 0 * exp ( x ) ) ; }
rank: 250
score: 99.13583374023438
patch: ] = 0 . $NUMBER$ * exp ( x ) ;
rank: 251
score: 99.21648700420673
patch: return 0 . $NUMBER$ * x / exp ( x ) ;
rank: 251
score: 99.20890590122768
patch: return 0 . 0 * / ( exp ( x ) ) ;
rank: 251
score: 99.20042067307692
patch: return double ) 0 . $NUMBER$ * exp ( x ) ;
rank: 251
score: 99.13564828725961
patch: x return 0 . $NUMBER$ * exp ( - x ) ;
rank: 252
score: 99.271826171875
patch: return 0 . $NUMBER$ * exp ( x ) . 0 * x ;
rank: 252
score: 99.21506911057692
patch: return 0 . $NUMBER$ * ( x + x ) ) ;
rank: 252
score: 99.1392822265625
patch: } return 0 . $NUMBER$ + exp ( x ) ;
rank: 253
score: 99.27172037760417
patch: return 0 . $NUMBER$ * exp ( x + x ) - x ;
rank: 253
score: 99.21497599283855
patch: return 0 . $NUMBER$ * 0 * ( x ) ;
rank: 253
score: 99.20811110276442
patch: return 0 . $NUMBER$ ; } else { return 0 ; }
rank: 253
score: 99.13805042613636
patch: return 0 * exp ( exp ( x ) ;
rank: 254
score: 99.22637067522321
patch: return 0 . 0 * / exp ( x * x ) ;
rank: 254
score: 99.18587239583333
patch: return 0 . $NUMBER$ * new double [ 0 ] ;
rank: 254
score: 99.14499918619792
patch: return 0 / exp ( - x - x ) ;
rank: 255
score: 99.27098795572917
patch: return 0 . $NUMBER$ * exp ( x ) . 1 * x ;
rank: 255
score: 99.22049386160714
patch: return 0 . $NUMBER$ * 0 * exp ( - $NUMBER$ ) ;
rank: 255
score: 99.21317232572116
patch: return 0 . x * 0 * exp ( x ) ;
rank: 255
score: 99.2073974609375
patch: return 0 . 0 * / exp ( x - x ) ;
rank: 255
score: 99.14471435546875
patch: return exp ( - x - x ) ;
rank: 255
score: 99.13656005859374
patch: return 0 + exp ( x ) ) ;
rank: 255
score: 99.13413492838542
patch: x = $NUMBER$ . 0 * exp ( x ) ;
rank: 256
score: 99.22548130580357
patch: return 0 . $NUMBER$ * exp ( x ) ) + x ;
rank: 256
score: 99.21295635516827
patch: return 0 . $NUMBER$ * exp ( x ) * 1 ;
rank: 256
score: 99.19921875
patch: return 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ; }
rank: 256
score: 99.13568725585938
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 256
score: 99.13335712139423
patch: return 0 . 0 / exp ( - x ) ; }
rank: 257
score: 99.21965680803571
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ ; }
rank: 257
score: 99.20625443892045
patch: return Integer . parse CaMeL Int ( x ) ;
rank: 257
score: 99.19886192908653
patch: return x * 0 . 0 * exp ( x ) ;
rank: 257
score: 99.18356557992789
patch: return exp ( x , exp ( x ) ) ; }
rank: 258
score: 99.27031598772321
patch: return 0 . $NUMBER$ * exp ( ( int ) x ) ;
rank: 258
score: 99.22524588448661
patch: return 0 . $NUMBER$ * / exp ( x * x ) ;
rank: 258
score: 99.21776471819196
patch: return 0 . $NUMBER$ * exp ( - x ) * x ;
rank: 258
score: 99.13259055397727
patch: return 0 + exp ( x ) * x ;
rank: 259
score: 99.22515399639423
patch: return 0 . $NUMBER$ + exp ( x * x ) ;
rank: 259
score: 99.2174960049716
patch: return 0 . 1 / exp ( x ) ;
rank: 259
score: 99.21084359975961
patch: return 0 . $NUMBER$ * x . exp ( x ) ;
rank: 259
score: 99.20571899414062
patch: return Double . $NUMBER$ * exp ( x ) ; }
rank: 260
score: 99.27001953125
patch: return 0 . 1 * exp ( x ) * 0 . $NUMBER$ ;
rank: 260
score: 99.21715369591347
patch: return 0 . 1 * exp ( x ) + x ;
rank: 260
score: 99.19771902901786
patch: return 0 . $NUMBER$ * x + 0 . $NUMBER$ * x ;
rank: 260
score: 99.13235473632812
patch: exp ( x , 0 ) ;
rank: 260
score: 99.1315185546875
patch: return 0 . $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 261
score: 99.26993560791016
patch: return 0 . $NUMBER$ * exp ( x ) ) / 1 . 1 ;
rank: 261
score: 99.21044921875
patch: return 0 * 0 . $NUMBER$ + exp ( x ) ;
rank: 261
score: 99.20481363932292
patch: return 0 . $NUMBER$ / / exp ( x ) ;
rank: 261
score: 99.19760131835938
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ ;
rank: 261
score: 99.13211763822116
patch: x = $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 261
score: 99.1312588778409
patch: return 0 + x * exp ( x ) ;
rank: 262
score: 99.26985990084134
patch: return 0 . $NUMBER$ * exp ( x ) ? x ;
rank: 262
score: 99.22385951450893
patch: return 0 . 0 * $NUMBER$ * exp ( x ) ; }
rank: 262
score: 99.2101299579327
patch: return Double . 0 * exp ( x , x ) ;
rank: 262
score: 99.20479910714286
patch: return Math . abs ( x ) * exp ( x ) ;
rank: 262
score: 99.19747220552884
patch: return 0 . $NUMBER$ * exp ( - / $NUMBER$ ) ;
rank: 262
score: 99.14197716346153
patch: return ( x , 0 . 0 , - x ) ;
rank: 262
score: 99.13092595880681
patch: return 0 . $NUMBER$ || exp ( x ) ;
rank: 263
score: 99.26979166666666
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ - x ) ;
rank: 263
score: 99.1974385579427
patch: result *= 0 . $NUMBER$ * exp ( x ) ;
rank: 263
score: 99.17991129557292
patch: return 0 . $NUMBER$ * new int [ $NUMBER$ ] ;
rank: 263
score: 99.13091486150569
patch: return 0 + $NUMBER$ * exp ( x ) ;
rank: 264
score: 99.22173602764423
patch: return - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 264
score: 99.2141864483173
patch: return 0 . $NUMBER$ . $NUMBER$ * ( - x ) ;
rank: 264
score: 99.20955716646634
patch: return 0 . $NUMBER$ * exp ( x ) ; else ;
rank: 264
score: 99.20360389122597
patch: return 0 . $NUMBER$ * / / exp ( x ) ;
rank: 264
score: 99.17964680989583
patch: return 0 . $NUMBER$ * max ( - x ) ;
rank: 264
score: 99.14192708333333
patch: return $NUMBER$ * exp ( - x - x ) ;
rank: 264
score: 99.13190307617188
patch: return 0 * exp ( x ) ; }
rank: 264
score: 99.1301778157552
patch: return 0 [ x ] * exp ( x ) ;
rank: 265
score: 99.26907348632812
patch: return 0 . $NUMBER$ * exp ( x ) ) * 0 . $NUMBER$ ;
rank: 265
score: 99.2215576171875
patch: return 0 . 0 * x ( x - x ) ;
rank: 265
score: 99.20932006835938
patch: return 0 . 0 * exp ( x ) ; /
rank: 265
score: 99.17929909446023
patch: return 0 . 0 * ( - x ) ;
rank: 265
score: 99.1417705829327
patch: x = exp ( x ) + exp ( x ) ;
rank: 266
score: 99.2688232421875
patch: return 0 . 0 * exp ( x ) / 1 . $NUMBER$ ;
rank: 266
score: 99.22111293247768
patch: return 0 . $NUMBER$ * exp ( x ) * x ; ;
rank: 266
score: 99.20875901442308
patch: return 0 . $NUMBER$ * exp ( 0 * x ) ;
rank: 266
score: 99.20337592230902
patch: return 0 . $NUMBER$ ; } else {
rank: 266
score: 99.17922738882211
patch: return 0 . 0 * exp ( x ) . 0 ;
rank: 266
score: 99.1412823016827
patch: if ( x > $NUMBER$ ) { x = 0 ; }
rank: 267
score: 99.20782470703125
patch: return 0 . $NUMBER$ * ( x ) * x ;
rank: 267
score: 99.20247977120536
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ ; }
rank: 267
score: 99.19573974609375
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * exp ;
rank: 267
score: 99.17881081321023
patch: += 0 . $NUMBER$ * exp ( x ) ;
rank: 267
score: 99.13120524088542
patch: return exp ( - x ) ; }
rank: 268
score: 99.2682373046875
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . 1 ;
rank: 268
score: 99.21120042067308
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 268
score: 99.17836507161458
patch: else return 0 . $NUMBER$ * exp ( x ) ;
rank: 268
score: 99.12676447088069
patch: return 0 + exp ( x ) * 1 ;
rank: 269
score: 99.22056995738636
patch: return 0 . $NUMBER$ ; exp ( x ) ;
rank: 269
score: 99.20204380580357
patch: return $NUMBER$ . $NUMBER$ ; } else { return 0 . 0 ;
rank: 269
score: 99.12586466471355
patch: return return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 270
score: 99.26821463448661
patch: return exp ( x ) . exp ( x ) . x ;
rank: 270
score: 99.219970703125
patch: return 0 . 0 ; } return 0 . 0 ;
rank: 270
score: 99.20196063701923
patch: return 0 . $NUMBER$ * / exp ( x ) ; }
rank: 270
score: 99.19495442708333
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ ;
rank: 271
score: 99.21958705357143
patch: return 0 . 0 * $NUMBER$ * exp ( x ) ) ;
rank: 271
score: 99.205078125
patch: return 0 * exp ( 0 . $NUMBER$ * x ) ;
rank: 271
score: 99.1948711688702
patch: return 0 . 0 * exp ( x ) ; } else
rank: 271
score: 99.1385967548077
patch: if ( x > 1 ) { x = - x ;
rank: 271
score: 99.1256612141927
patch: return exp ( exp ( x + x ) ) ;
rank: 272
score: 99.26704915364583
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . 0 ;
rank: 272
score: 99.2194491299716
patch: return 0 . 0 ; exp ( x ) ;
rank: 272
score: 99.1256436434659
patch: return 0 . $NUMBER$ * x ) * x ;
rank: 273
score: 99.20873084435097
patch: return 0 . $NUMBER$ * - exp ( x ) ; }
rank: 273
score: 99.20332845052083
patch: return 0 . $NUMBER$ * x * x + x ;
rank: 273
score: 99.1747713955966
patch: return 0 . $NUMBER$ exp ( - x ) ;
rank: 273
score: 99.1267598470052
patch: if ( x < $NUMBER$ ) { return x ; }
rank: 273
score: 99.12546608664773
patch: return 0 . $NUMBER$ * default ( x ) ;
rank: 274
score: 99.26649576822916
patch: return 0 . $NUMBER$ * exp ( 0 . 1 + x ) ;
rank: 274
score: 99.20152936662946
patch: return 0 . $NUMBER$ * exp ( x ) * x ; }
rank: 274
score: 99.1254170735677
patch: if ( x == 0 ) exp ( x ) ;
rank: 275
score: 99.20110614483173
patch: return 0 . $NUMBER$ ; } else return 0 . $NUMBER$ ;
rank: 275
score: 99.1376953125
patch: return 0 - exp ( x ) ;
rank: 275
score: 99.12534586588542
patch: return 0 * exp ( x + x ) ) ;
rank: 276
score: 99.26602376302084
patch: return 0 . $NUMBER$ * ( exp ( x ) - x ) ;
rank: 276
score: 99.21791428786058
patch: return 0 . 0 * exp ( x * 1 ) ;
rank: 276
score: 99.20259915865384
patch: return Double . $NUMBER$ * exp ( x ) * x ;
rank: 276
score: 99.19300333658855
patch: return ( ) . $NUMBER$ * exp ( x ) ;
rank: 276
score: 99.12620192307692
patch: return - 0 . $NUMBER$ / exp ( - x ) ;
rank: 276
score: 99.12469482421875
patch: return 0 * x ;
rank: 277
score: 99.20648662860577
patch: return 0 . $NUMBER$ * ( x - x ) ; }
rank: 277
score: 99.2024434407552
patch: return 0 . $NUMBER$ * exp ( x + x ;
rank: 277
score: 99.19277719350961
patch: return ( 0 . $NUMBER$ + exp ( x ) ) ;
rank: 277
score: 99.12464488636364
patch: return exp ( x ) * 1 . $NUMBER$ ;
rank: 278
score: 99.2177734375
patch: if ( x == 0 ) { return 0 . 0 ; }
rank: 278
score: 99.20647723858173
patch: return 0 . $NUMBER$ * exp ( x ) = x ;
rank: 278
score: 99.2022235576923
patch: return 0 . $NUMBER$ * x ; exp ( x ) ;
rank: 279
score: 99.26398111979167
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ + x ;
rank: 279
score: 99.21767014723558
patch: return 1 . 0 * exp ( x * $NUMBER$ ) ;
rank: 279
score: 99.20616736778847
patch: return 0 . 1 * exp ( x - $NUMBER$ ) ;
rank: 279
score: 99.1360751065341
patch: if ( x >= $NUMBER$ ) { return 0 ;
rank: 279
score: 99.12428977272727
patch: return 0 * exp ( x ) / $NUMBER$ ;
rank: 280
score: 99.2162334735577
patch: return 0 . $NUMBER$ * 0 * x ( x ) ;
rank: 280
score: 99.20535043569711
patch: return 0 . 0 * exp ( x ) - $NUMBER$ ;
rank: 280
score: 99.20005289713542
patch: return ( 0 . $NUMBER$ * exp ( x ) ;
rank: 280
score: 99.12120564778645
patch: return exp ( $NUMBER$ * exp ( x ) ) ;
rank: 281
score: 99.26390787760417
patch: return 0 . $NUMBER$ * exp ( x + 0 . length ) ;
rank: 281
score: 99.21622140066964
patch: return - 0 . 0 * exp ( x * $NUMBER$ ) ;
rank: 281
score: 99.20517202524039
patch: return 1 . $NUMBER$ * exp ( - - x ) ;
rank: 281
score: 99.2017822265625
patch: return 0 . $NUMBER$ * exp ( x ) ) ; }
rank: 281
score: 99.19969831194196
patch: return 0 . $NUMBER$ ; } else return exp ( x ) ;
rank: 281
score: 99.19122314453125
patch: return x * exp ( - x ) ;
rank: 281
score: 99.12178548177083
patch: return 0 . $NUMBER$ * this ( - x ) ;
rank: 281
score: 99.12116033380681
patch: return 0 . $NUMBER$ : exp ( x ) ;
rank: 282
score: 99.26266276041666
patch: return 0 . $NUMBER$ * exp ( x , x ) / $NUMBER$ ;
rank: 282
score: 99.21573893229167
patch: return - 1 . $NUMBER$ + exp ( x ) ;
rank: 282
score: 99.2015889485677
patch: return 0 . $NUMBER$ * x * ( x ) ;
rank: 282
score: 99.19960239955357
patch: return 0 . $NUMBER$ / exp ( x ) ( x ) ;
rank: 282
score: 99.13534780649039
patch: if ( x > 0 ) { x = 0 ; }
rank: 282
score: 99.1210049715909
patch: if ( x == $NUMBER$ ) { return 0 ;
rank: 283
score: 99.26241861979166
patch: { return 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 283
score: 99.21543375651042
patch: return - $NUMBER$ . 0 * exp ( x ) ;
rank: 283
score: 99.20189490685097
patch: { return 0 . 0 * exp ( - x ) ;
rank: 283
score: 99.201025390625
patch: return 0 . $NUMBER$ * 0 * 0 ;
rank: 283
score: 99.197998046875
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) ; }
rank: 283
score: 99.18992919921875
patch: if ( x > 0 . 0 ) {
rank: 283
score: 99.13469989483173
patch: return 0 - x . $NUMBER$ * exp ( x ) ;
rank: 283
score: 99.121337890625
patch: return exp ( x , 0 . $NUMBER$ ) ; }
rank: 284
score: 99.2622299194336
patch: return 0 . 0 * exp ( x ) ? exp ( x ) ;
rank: 284
score: 99.19788953993056
patch: return 0 . 0 ( x ) ;
rank: 285
score: 99.21475923978366
patch: return 0 . 0 * $NUMBER$ * x ( x ) ;
rank: 285
score: 99.19782366071429
patch: if ( x < x ) { return 0 . 0 ; }
rank: 285
score: 99.18960774739584
patch: return 0 . $NUMBER$ * exp ( x > 0 . 0 ) ;
rank: 285
score: 99.13392991286058
patch: return $NUMBER$ * exp ( x , 0 . $NUMBER$ ) ;
rank: 285
score: 99.11835271661931
patch: return ( x + exp ( x ) ) ;
rank: 286
score: 99.2615234375
patch: return 0 . $NUMBER$ * exp ( x ) : 0 . 0 ;
rank: 286
score: 99.21460978190105
patch: return 0 . 0 * $NUMBER$ * ( x ) ;
rank: 286
score: 99.19842998798077
patch: return - 0 . 1 * exp ( - x ) ;
rank: 286
score: 99.19778878348214
patch: return 0 . 0 * / $NUMBER$ * exp ( x ) ;
rank: 286
score: 99.16914876302083
patch: if ( x == $NUMBER$ ) { return 0 ; }
rank: 286
score: 99.12073692908653
patch: return $NUMBER$ . $NUMBER$ / exp ( - x ) ; }
rank: 287
score: 99.26116943359375
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 287
score: 99.2143046061198
patch: return 0 . $NUMBER$ * $NUMBER$ * ( x ) ;
rank: 287
score: 99.2001201923077
patch: return 0 . x * exp ( x , x ) ;
rank: 287
score: 99.197509765625
patch: * return 0 . 0 * exp ( x ) ;
rank: 287
score: 99.18870326450893
patch: return x - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 287
score: 99.16855875651042
patch: if ( x < 0 ) { x = 0 ;
rank: 287
score: 99.13360595703125
patch: x = - x ;
rank: 288
score: 99.26063889723558
patch: return 0 . $NUMBER$ * exp ( x ) ? $NUMBER$ ;
rank: 288
score: 99.21404559795673
patch: return 0 . $NUMBER$ / exp ( x * x ) ;
rank: 288
score: 99.19993239182692
patch: return 0 . $NUMBER$ * exp exp ( x ) ; }
rank: 288
score: 99.19734409877232
patch: return 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ; }
rank: 289
score: 99.21370755709134
patch: return 0 . $NUMBER$ * exp ( x ) , x ;
rank: 289
score: 99.19981032151442
patch: return Double . 0 * 0 * exp ( x ) ;
rank: 289
score: 99.19715227399554
patch: return 0 . 0 * exp ( x ) * / x ;
rank: 289
score: 99.18825120192308
patch: return 0 . $NUMBER$ * double ) exp ( x ) ;
rank: 289
score: 99.1328125
patch: if ( x > $NUMBER$ ) { x += - x ;
rank: 289
score: 99.11751302083333
patch: return 0 . $NUMBER$ * ( x / x ) ;
rank: 290
score: 99.26009114583333
patch: return 0 . $NUMBER$ * exp ( x , x ) ? 0 ;
rank: 290
score: 99.21332659040179
patch: return 0 . $NUMBER$ * ( ( x ) + x ) ;
rank: 290
score: 99.19574444110577
patch: return - 0 . 0 * exp ( x ) ; }
rank: 290
score: 99.18805803571429
patch: return x ; } if ( x < 0 . 0 ) {
rank: 290
score: 99.11852010091145
patch: double cosh [ ] = new double [ $NUMBER$ ] ;
rank: 290
score: 99.11630249023438
patch: return 0 . $NUMBER$ * exp ( * x ) ;
rank: 291
score: 99.2597885131836
patch: return 0 . $NUMBER$ * exp ( x ) * min ( x ) ;
rank: 291
score: 99.19944411057692
patch: return 0 . 0 * exp exp exp ( x ) ;
rank: 291
score: 99.197021484375
patch: { return 0 . 0 * exp ( x ) ;
rank: 291
score: 99.19558279854911
patch: return 0 . 0 ( x ) * exp ( x ) ;
rank: 291
score: 99.1321270282452
patch: return exp ( x , 0 . 0 + x ) ;
rank: 291
score: 99.11850210336539
patch: return 0 . $NUMBER$ / exp ( x + x ) ;
rank: 291
score: 99.11555619673295
patch: if ( 0 == x ) { return x ;
rank: 292
score: 99.25960867745536
patch: return 0 * exp ( x ) . start ( x ) ;
rank: 292
score: 99.19935099283855
patch: return 0 . $NUMBER$ * 0 * x * x ;
rank: 292
score: 99.19537823016827
patch: return 0 . $NUMBER$ * x ( x ) * x ;
rank: 293
score: 99.25950404575893
patch: return 0 * exp ( x ) - exp ( x ) ;
rank: 293
score: 99.21139962332589
patch: return - 1 . 0 * exp ( x + x ) ;
rank: 293
score: 99.19910278320313
patch: return ( 0 . $NUMBER$ * x ) ;
rank: 293
score: 99.19551908052884
patch: return 0 . 1 * $NUMBER$ * exp ( x ) ;
rank: 293
score: 99.1317608173077
patch: return exp ( x , 0 . 1 , x ) ;
rank: 293
score: 99.11501057942708
patch: return 0 . $NUMBER$ * exp ( x ) * ;
rank: 294
score: 99.258837890625
patch: return 0 . $NUMBER$ * exp ( 0 . 0 / x ) ;
rank: 294
score: 99.19875863882211
patch: exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 294
score: 99.19480678013393
patch: return 0 . 0 ; } else { return $NUMBER$ . 0 ;
rank: 294
score: 99.16411884014423
patch: return 0 . $NUMBER$ * exp ( x ) : 1 ;
rank: 294
score: 99.1313946063702
patch: return 0 . $NUMBER$ * x . $NUMBER$ * - x ;
rank: 294
score: 99.11778846153847
patch: return 0 . $NUMBER$ * exp ( x ) + exp ;
rank: 294
score: 99.11441040039062
patch: } else { return 0 * exp ( x ) ;
rank: 295
score: 99.1859130859375
patch: double x = 0 . 0 * exp ( x ) ;
rank: 295
score: 99.1176249186198
patch: x = 0 . $NUMBER$ / exp ( x ) ;
rank: 295
score: 99.1138583096591
patch: return Math . value CaMeL Of ( x ) ;
rank: 296
score: 99.25879720052083
patch: return 0 . $NUMBER$ * 0 * exp ( x ) * x ;
rank: 296
score: 99.21095493861607
patch: return - 0 . 0 * exp ( x ) / $NUMBER$ ;
rank: 296
score: 99.19835486778847
patch: return $NUMBER$ . $NUMBER$ * ( exp ( x ) ) ;
rank: 296
score: 99.19467163085938
patch: return 0 . 0 ; } else { return 0 ;
rank: 296
score: 99.18560236150569
patch: return ( x ) * exp ( x ) ;
rank: 296
score: 99.11363728841145
patch: return 0 . 0 * exp ( x ) x ;
rank: 297
score: 99.2586669921875
patch: return 0 . $NUMBER$ * exp ( x + exp ( x ) ;
rank: 297
score: 99.19439697265625
patch: return 0 . $NUMBER$ * exp ( ) / $NUMBER$ ;
rank: 297
score: 99.1851806640625
patch: return 0 . $NUMBER$ * exp - exp ( x ) ;
rank: 297
score: 99.11304820667614
patch: return 0 * exp ( x ) + x ;
rank: 298
score: 99.25865173339844
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 0 ) ;
rank: 298
score: 99.19756610576923
patch: return 0 . 0 * exp ( exp ( x ) ;
rank: 298
score: 99.19336809430804
patch: if ( x < x ) { return 0 . $NUMBER$ ; }
rank: 298
score: 99.13055889423077
patch: if ( x != $NUMBER$ ) { x = - x ;
rank: 298
score: 99.11299641927083
patch: } else { return 0 + exp ( x ) ;
rank: 299
score: 99.25819498697916
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . ) ;
rank: 299
score: 99.20997837611607
patch: return - 0 . 0 * exp ( x / $NUMBER$ ) ;
rank: 299
score: 99.19272682883523
patch: return 0 . $NUMBER$ * / exp ( ) ;
rank: 299
score: 99.19240159254808
patch: return 0 . 1 . 1 * exp ( x ) ;
rank: 299
score: 99.1835467998798
patch: return 0 . $NUMBER$ * exp ( x < 0 ) ;
rank: 299
score: 99.13003305288461
patch: if ( x < 0 ) { x = 0 ; }
rank: 299
score: 99.11668982872597
patch: y = 0 . $NUMBER$ * exp ( - x ) ;
rank: 299
score: 99.11231486002605
patch: return 0 . $NUMBER$ * get CaMeL Value ( ) ;
rank: 300
score: 99.20994262695312
patch: return 0 . $NUMBER$ * this . x ;
rank: 300
score: 99.19658954326923
patch: return exp ( x ) ; return exp ( x ) ;
rank: 300
score: 99.19267926897321
patch: if ( x < $NUMBER$ ) { return 1 . 0 ; }
rank: 300
score: 99.19137573242188
patch: return 1 . 1 * exp ( - x ) ;
rank: 300
score: 99.12989298502605
patch: return ( x , 0 . 0 , x ) ;
rank: 300
score: 99.1121493252841
patch: return 0 . $NUMBER$ * exp ( exp ) ;
rank: 301
score: 99.19649251302083
patch: return 0 . $NUMBER$ * 0 exp ( x ) ;
rank: 301
score: 99.1922607421875
patch: return Double . $NUMBER$ . 0 * exp ( x ) ;
rank: 301
score: 99.18270438058036
patch: return 0 . 0 * exp ( - ( x ) ) ;
rank: 301
score: 99.160888671875
patch: return 0 . 0 , exp ( x ) ;
rank: 302
score: 99.19082641601562
patch: return $NUMBER$ . $NUMBER$ * ( x - x ) ;
rank: 302
score: 99.10987345377605
patch: return 0 . $NUMBER$ * this . exp ( ) ;
rank: 303
score: 99.20907156808036
patch: return 0 . $NUMBER$ * / exp ( x ) + x ;
rank: 303
score: 99.19370680588942
patch: return 0 * 0 * exp ( x * x ) ;
rank: 303
score: 99.19161551339286
patch: return 0 . 0 * / exp ( x , x ) ;
rank: 303
score: 99.1907958984375
patch: return cosh - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 303
score: 99.18219866071429
patch: return 0 . $NUMBER$ * x + exp ( - x ) ;
rank: 303
score: 99.1291748046875
patch: return ( x , 0 . 0 ) ;
rank: 303
score: 99.11595740685097
patch: return 0 - 1 . $NUMBER$ * exp ( x ) ;
rank: 303
score: 99.10943048650569
patch: return 0 * exp ( x ) . x ;
rank: 304
score: 99.25728352864583
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( ) ;
rank: 304
score: 99.19362229567308
patch: return 0 . $NUMBER$ * max ( x + x ) ;
rank: 304
score: 99.1915283203125
patch: return 0 . $NUMBER$ / exp ( x ) ; } else {
rank: 304
score: 99.1290752704327
patch: final . return 0 . $NUMBER$ * exp ( x ) ;
rank: 304
score: 99.11554718017578
patch: return exp ( x ) ; }
rank: 304
score: 99.10862223307292
patch: result = 0 . $NUMBER$ + exp ( x ) ;
rank: 305
score: 99.20897420247395
patch: return 0 . $NUMBER$ * exp ( float ) x ;
rank: 305
score: 99.11531888521634
patch: return return 0 . $NUMBER$ * exp ( x ) ; }
rank: 305
score: 99.10831705729167
patch: return exp ( x * exp ( x ) ) ;
rank: 306
score: 99.20882474459134
patch: return 0 . 0 * ( ( double ) x ) ;
rank: 306
score: 99.1915752704327
patch: return $NUMBER$ * 0 * exp ( x + x ) ;
rank: 306
score: 99.19138746995192
patch: return 0 . $NUMBER$ * / ( x - x ) ;
rank: 306
score: 99.18157087053571
patch: return 0 . $NUMBER$ ; } if ( x < 0 ) {
rank: 306
score: 99.1583251953125
patch: result = 0 . $NUMBER$ * exp ( x ) ; }
rank: 306
score: 99.12853064903847
patch: return exp ( - x ) . cosh ( x ) ;
rank: 307
score: 99.25696563720703
patch: return 0 . $NUMBER$ * exp ( x ) $NUMBER$ / 0 . $NUMBER$ ;
rank: 307
score: 99.18882399338942
patch: . . return 0 . $NUMBER$ * exp ( x ) ;
rank: 307
score: 99.1814473470052
patch: d = 0 . $NUMBER$ * exp ( x ) ;
rank: 308
score: 99.25650787353516
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ * exp ( x ) ;
rank: 308
score: 99.19130295973558
patch: return 0 . $NUMBER$ * max ( x , x ) ;
rank: 308
score: 99.1904296875
patch: return 0 . $NUMBER$ * exp ( x - 1 ) ; }
rank: 308
score: 99.18113490513393
patch: return 0 . $NUMBER$ * ( exp ( - $NUMBER$ ) ) ;
rank: 308
score: 99.12815504807692
patch: if ( x <= $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 308
score: 99.1068115234375
patch: return exp ( 0 . $NUMBER$ * x ) ;
rank: 309
score: 99.25646158854167
patch: return 0 . $NUMBER$ * exp ( x , [ x ] ) ;
rank: 309
score: 99.19121844951923
patch: return $NUMBER$ . 0 * exp ( x + x ) ;
rank: 309
score: 99.18089881310097
patch: return $NUMBER$ . $NUMBER$ * exp ( x + $NUMBER$ ) ;
rank: 310
score: 99.20755440848214
patch: return 0 . 0 * exp ( x * x ) ; ;
rank: 310
score: 99.19078480113636
patch: return ( x * exp ( x ) ) ;
rank: 310
score: 99.18961879185268
patch: return 0 . 0 ; } else { return 1 . 0 ;
rank: 310
score: 99.18516188401442
patch: { return 0 . 1 * exp ( - x ) ;
rank: 310
score: 99.11129995492789
patch: return 0 ) . $NUMBER$ * exp ( - x ) ;
rank: 311
score: 99.20753831129808
patch: return - 0 . $NUMBER$ * exp ( x ) ; ;
rank: 311
score: 99.1894864169034
patch: return 0 ; } else { return 0 ; }
rank: 311
score: 99.18516188401442
patch: return 0 . $NUMBER$ . 0 / exp ( x ) ;
rank: 311
score: 99.1567891438802
patch: return 0 . $NUMBER$ * new ( - x ) ;
rank: 311
score: 99.10434977213542
patch: } return 1 . $NUMBER$ * exp ( x ) ;
rank: 312
score: 99.25618198939732
patch: return 0 * exp ( x + exp ( x ) ) ;
rank: 312
score: 99.2074725811298
patch: return 0 . 0 * float CaMeL Value ( x ) ;
rank: 312
score: 99.19002278645833
patch: return Double . exp ( exp ( x ) ) ;
rank: 312
score: 99.18934849330357
patch: return 0 . 0 * 0 * exp ( x ) ; }
rank: 312
score: 99.12700861150569
patch: if ( x > $NUMBER$ ) { return x ;
rank: 312
score: 99.10294966264205
patch: return 0 . $NUMBER$ << exp ( x ) ;
rank: 313
score: 99.25611165364583
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( x ;
rank: 313
score: 99.20742563100961
patch: return 0 . $NUMBER$ * Math . round ( x ) ;
rank: 313
score: 99.1896221454327
patch: return 0 . $NUMBER$ * ) * exp ( x ) ;
rank: 313
score: 99.18922642299107
patch: return 0 . $NUMBER$ * exp ( x ) ; } else ;
rank: 313
score: 99.1560770670573
patch: return 0 . $NUMBER$ * get ( - x ) ;
rank: 313
score: 99.12603759765625
patch: b = 0 . $NUMBER$ * exp ( x ) ;
rank: 313
score: 99.11040790264423
patch: x = 0 . 0 * exp ( x ) ; }
rank: 313
score: 99.10241088867187
patch: return 0 . $NUMBER$ * $NUMBER$ * x ;
rank: 314
score: 99.18914240056819
patch: return 0 . $NUMBER$ * min ( x ) ;
rank: 314
score: 99.18379350142045
patch: return 1 . 1 * exp ( x ) ;
rank: 314
score: 99.155224609375
patch: return exp ( x , x ) ; }
rank: 314
score: 99.10233561197917
patch: return return 0 . 0 * exp ( x ) ;
rank: 315
score: 99.25482584635417
patch: return 0 . $NUMBER$ * exp ( x ) * x + x ;
rank: 315
score: 99.18890850360577
patch: return 0 . 0 / exp ( x , x ) ;
rank: 315
score: 99.15517953725961
patch: return exp ( x , 0 . 0 , 0 ) ;
rank: 315
score: 99.10152180989583
patch: return exp ( x ) * 0 [ x ] ;
rank: 316
score: 99.25408466045673
patch: return 0 = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 316
score: 99.18875461154514
patch: return Double . exp ( x ) ;
rank: 316
score: 99.18817138671875
patch: if ( x < $NUMBER$ ) { return 1 . $NUMBER$ ; }
rank: 316
score: 99.18259887695312
patch: return 0 . - exp ( x ) ;
rank: 316
score: 99.1253662109375
patch: return 0 . $NUMBER$ * exp ( x ) / 1 ;
rank: 317
score: 99.20663888113839
patch: return 0 . 0 * $NUMBER$ * exp ( x ) ; ;
rank: 317
score: 99.18794468470982
patch: return 0 . 0 ; } else { return $NUMBER$ . $NUMBER$ ;
rank: 317
score: 99.18780048076923
patch: return 0 . 1 * exp ( x * x ) ;
rank: 317
score: 99.18252563476562
patch: return 1 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 317
score: 99.1083984375
patch: return / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 318
score: 99.20659930889423
patch: return $NUMBER$ . 0 * 0 * exp ( x ) ;
rank: 318
score: 99.18768310546875
patch: return 0 . $NUMBER$ * exp ( ) * exp ( ) ;
rank: 318
score: 99.1869647686298
patch: return Double . $NUMBER$ * x * exp ( x ) ;
rank: 318
score: 99.10806039663461
patch: exp ( x , 0 . 0 , x ) ; }
rank: 318
score: 99.09980912642045
patch: return $NUMBER$ * exp ( x ) * x ;
rank: 319
score: 99.20653424944196
patch: return 0 . 0 * ( x ) * ( x ) ;
rank: 319
score: 99.18758138020833
patch: return 0 . $NUMBER$ x * exp ( x ) ;
rank: 319
score: 99.18686147836539
patch: return 0 . $NUMBER$ * exp ( x ) ) ; ;
rank: 319
score: 99.1822509765625
patch: return 0 . $NUMBER$ * exp ( - + x ) ;
rank: 319
score: 99.15167236328125
patch: return 0 . $NUMBER$ * ( - x ) ; }
rank: 319
score: 99.10804239908855
patch: return 0 . $NUMBER$ * exp ( $STRING$ ) ; }
rank: 319
score: 99.09959827769886
patch: return 0 + exp ( x ) - x ;
rank: 320
score: 99.1865703876202
patch: return 0 * 0 * x * exp ( x ) ;
rank: 320
score: 99.18630746694711
patch: return ( 0 . 0 * exp ( $NUMBER$ ) ) ;
rank: 320
score: 99.1761474609375
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; break ;
rank: 320
score: 99.12425818810097
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) / x ;
rank: 320
score: 99.09940592447917
patch: return ( 0 . $NUMBER$ ? x : x ) ;
rank: 321
score: 99.2532470703125
patch: return 0 . $NUMBER$ * exp ( x / 0 . $NUMBER$ ) ;
rank: 321
score: 99.186279296875
patch: return 0 . $NUMBER$ ; } exp ( x ) ;
rank: 321
score: 99.18084716796875
patch: return 0 . 0 * exp ( - 1 ) ;
rank: 321
score: 99.176025390625
patch: double 0 . 0 * exp ( x ) ;
rank: 321
score: 99.12398587740384
patch: * / return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 321
score: 99.09866333007812
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * x ;
rank: 322
score: 99.2530517578125
patch: exp ( x ) ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 322
score: 99.18611966646634
patch: return 0 . $NUMBER$ * 0 * exp ( $NUMBER$ ) ;
rank: 322
score: 99.17578125
patch: return x = 0 . $NUMBER$ * exp ( x ) ;
rank: 322
score: 99.09848854758523
patch: return 0 . ) + exp ( x ) ;
rank: 323
score: 99.25238037109375
patch: return 0 . $NUMBER$ * exp ( x ) ) / true ;
rank: 323
score: 99.17986591045673
patch: return - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 323
score: 99.17551491477273
patch: return ( exp ( x ) + $NUMBER$ ) ;
rank: 323
score: 99.14893517127403
patch: return 0 . 0 * exp ( x , $NUMBER$ ) ;
rank: 323
score: 99.10682091346153
patch: if ( x <= 0 ) { return - x ; }
rank: 323
score: 99.0980224609375
patch: return 0 * exp ( x ) / 1 ;
rank: 324
score: 99.20496544471153
patch: return 1 . $NUMBER$ * exp ( x / x ) ;
rank: 324
score: 99.1796405498798
patch: return x * 1 . $NUMBER$ * exp ( x ) ;
rank: 324
score: 99.14879150390625
patch: return exp ( x , 0 ) ; }
rank: 324
score: 99.12293419471153
patch: return exp ( x , 0 . $NUMBER$ - x ) ;
rank: 324
score: 99.09747314453125
patch: } return 0 * exp ( x ) ;
rank: 325
score: 99.25135904947916
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ + $NUMBER$ ;
rank: 325
score: 99.2044344815341
patch: return 1 . $NUMBER$ / exp ( x ) ;
rank: 325
score: 99.18334021935097
patch: return $NUMBER$ * 0 . 0 * exp ( x ) ;
rank: 325
score: 99.17962176983173
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - $NUMBER$ ;
rank: 325
score: 99.14876302083333
patch: if ( x > 0 ) { x = 0 ;
rank: 325
score: 99.1066425030048
patch: if ( x <= $NUMBER$ ) { return - x ; }
rank: 325
score: 99.09689331054688
patch: if ( x == - 1 ) { return 0 ;
rank: 326
score: 99.25111389160156
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ) ;
rank: 326
score: 99.20366962139423
patch: return 0 . $NUMBER$ * exp ( x ) + $STRING$ ;
rank: 326
score: 99.18589564732143
patch: return 0 . 0 * / exp ( x ) / $NUMBER$ ;
rank: 326
score: 99.18316180889423
patch: return 0 . $NUMBER$ * exp ( x ) ; * *
rank: 326
score: 99.17897542317708
patch: return Double . $NUMBER$ * exp ( - x ) ;
rank: 326
score: 99.1729248046875
patch: return $NUMBER$ . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 326
score: 99.12274169921875
patch: return $NUMBER$ * exp ( - x + x ) ;
rank: 326
score: 99.0945536295573
patch: return exp ( x ) || exp ( x ) ;
rank: 327
score: 99.2508544921875
patch: return 0 . $NUMBER$ * exp ( exp ( x ) * x ) ;
rank: 327
score: 99.1823018391927
patch: return 0 . 0 * ( x + x ) ;
rank: 327
score: 99.1786358173077
patch: return - $NUMBER$ . 0 * exp ( - x ) ;
rank: 327
score: 99.147705078125
patch: return 0 . $NUMBER$ * new double [ - x ] ;
rank: 327
score: 99.12173227163461
patch: return 0 . $NUMBER$ * exp ( 0 - x ) ;
rank: 327
score: 99.0930887858073
patch: return exp ( $NUMBER$ + exp ( x ) ) ;
rank: 328
score: 99.25062662760416
patch: return 0 . $NUMBER$ * exp ( x ) . 1 + x ;
rank: 328
score: 99.20236440805289
patch: return $NUMBER$ . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 328
score: 99.18541608537946
patch: return 0 . $NUMBER$ * exp ( x ) / ( x ;
rank: 328
score: 99.12154134114583
patch: return 0 . $NUMBER$ * x . $NUMBER$ * x ;
rank: 328
score: 99.09241739908855
patch: return 0 * exp ( x ) ) / 1 ;
rank: 329
score: 99.20194244384766
patch: return 0 . 0 * $NUMBER$ ;
rank: 329
score: 99.1811053936298
patch: return Double . 0 * exp ( x * x ) ;
rank: 329
score: 99.14651254507211
patch: return 0 . 0 * exp ( x ) + 0 ;
rank: 329
score: 99.104736328125
patch: return 0 . $NUMBER$ * exp ( - x ] ) ;
rank: 329
score: 99.09227159288194
patch: return exp ( x - x ) ;
rank: 330
score: 99.25034993489584
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . 1 ;
rank: 330
score: 99.20172588641827
patch: return 0 . $NUMBER$ * $NUMBER$ * x ( x ) ;
rank: 330
score: 99.1809833233173
patch: return 0 * exp ( x ) ; } return 0 ;
rank: 330
score: 99.17632501775569
patch: return 0 . - exp ( - x ) ;
rank: 330
score: 99.09190877278645
patch: return 0 . $NUMBER$ * exp ( exp x ) ;
rank: 331
score: 99.25030924479167
patch: return 0 . $NUMBER$ * exp ( x , 1 . $NUMBER$ ) ;
rank: 331
score: 99.18067345252403
patch: return 0 * x * exp ( x , x ) ;
rank: 331
score: 99.09184126420455
patch: return ( exp ( x ) - x ) ;
rank: 332
score: 99.2501953125
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ * x ;
rank: 332
score: 99.1806640625
patch: return 1 . $NUMBER$ * exp exp ( x ) ;
rank: 332
score: 99.1752041903409
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ ; }
rank: 332
score: 99.17033386230469
patch: if ( x < 0 ) {
rank: 332
score: 99.11905611478366
patch: return exp ( x , x , 0 . 0 ) ;
rank: 332
score: 99.1042989095052
patch: return 0 - $NUMBER$ * exp ( - x ) ;
rank: 332
score: 99.09135131835937
patch: if ( x == 0 ) return 0 ;
rank: 333
score: 99.2493896484375
patch: return 0 . $NUMBER$ * exp ( x ) - min ( x ) ;
rank: 333
score: 99.20095825195312
patch: return 0 . $NUMBER$ * ( x / $NUMBER$ ) ;
rank: 333
score: 99.16996256510417
patch: return 0 . $NUMBER$ * exp ( x ) ] ;
rank: 333
score: 99.11898803710938
patch: x = 0 . 1 * exp ( x ) ;
rank: 334
score: 99.200927734375
patch: return 1 . 0 * exp ( x / $NUMBER$ ) ;
rank: 334
score: 99.18003336588542
patch: return 0 . 1 * exp exp ( x ) ;
rank: 334
score: 99.17505900065105
patch: { return 0 . 1 * exp ( x ) ;
rank: 334
score: 99.16991170247395
patch: return double 1 . $NUMBER$ * exp ( x ) ;
rank: 334
score: 99.09096457741477
patch: return ( 0 * exp ( x ) ) ;
rank: 335
score: 99.24933268229167
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . ) ;
rank: 335
score: 99.18314906529018
patch: return 0 . $NUMBER$ * ( x ) * exp ( ) ;
rank: 335
score: 99.17995042067308
patch: return 0 . $NUMBER$ * exp = exp ( x ) ;
rank: 335
score: 99.09059651692708
patch: return 0 . $NUMBER$ * $NUMBER$ * 0 . $NUMBER$ ;
rank: 336
score: 99.24918619791667
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . length ;
rank: 336
score: 99.20027160644531
patch: return ( 0 . $NUMBER$ ) ;
rank: 336
score: 99.17409261067708
patch: return 0 . $NUMBER$ . $NUMBER$ * ( x ) ;
rank: 336
score: 99.16951810396634
patch: result return 0 . $NUMBER$ * exp ( - x ) ;
rank: 337
score: 99.17931189903847
patch: return 0 . 1 * x * exp ( x ) ;
rank: 337
score: 99.14441935221355
patch: return 0 . $NUMBER$ * value ( - x ) ;
rank: 338
score: 99.19906180245536
patch: return - 0 . $NUMBER$ ;
rank: 338
score: 99.17910531850961
patch: return 0 * $NUMBER$ * 0 * exp ( x ) ;
rank: 338
score: 99.11574143629808
patch: if ( x < $NUMBER$ ) { x = 0 ; }
rank: 338
score: 99.10312906901042
patch: x = 1 . 0 * exp ( x ) ;
rank: 338
score: 99.08974387428977
patch: return 0 + 0 + exp ( x ) ;
rank: 339
score: 99.24823404947917
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . ) ;
rank: 339
score: 99.18164934430804
patch: return 0 . $NUMBER$ * exp ( x ) + ( x ;
rank: 339
score: 99.1430194561298
patch: return 0 . $NUMBER$ * exp ( - x 1 ) ;
rank: 339
score: 99.11501057942708
patch: return 0 * exp ( - x ) / $NUMBER$ ;
rank: 339
score: 99.08965454101562
patch: return 0 . $NUMBER$ * 0 . 1 ;
rank: 340
score: 99.18136160714286
patch: return 0 ; } else { return 0 . $NUMBER$ * x ;
rank: 340
score: 99.17276705228366
patch: return 0 . $NUMBER$ * exp ( - 1 ) ; }
rank: 340
score: 99.11494584517045
patch: if ( x > 0 ) { return x ;
rank: 340
score: 99.08926730685764
patch: return 0 = exp ( x ) ;
rank: 341
score: 99.1983642578125
patch: return 1 . $NUMBER$ * exp ( x ) ; ;
rank: 341
score: 99.17799729567308
patch: return 0 * x * x * exp ( x ) ;
rank: 341
score: 99.17266845703125
patch: return - 0 . 1 * exp ( x ) ;
rank: 341
score: 99.10153432992789
patch: if ( x >= 0 ) { return - x ; }
rank: 341
score: 99.08899536132813
patch: return 0 . $NUMBER$ * 0 . 0 ;
rank: 342
score: 99.24783528645834
patch: return 0 . $NUMBER$ * exp ( x , x ) * $NUMBER$ ;
rank: 342
score: 99.18049760298295
patch: return 0 . $NUMBER$ / exp ( $NUMBER$ ) ;
rank: 342
score: 99.14201216264205
patch: return exp ( x , x , 0 ) ;
rank: 343
score: 99.24740397135416
patch: return 0 . $NUMBER$ + exp ( x ) * 0 . $NUMBER$ ;
rank: 343
score: 99.19797926682692
patch: return 0 . $NUMBER$ * exp ( x ) % $NUMBER$ ;
rank: 343
score: 99.18043009440105
patch: return Double . $NUMBER$ * / exp ( x ) ;
rank: 343
score: 99.17638221153847
patch: return 0 . 0 * exp exp ( x ) ) ;
rank: 343
score: 99.17227877103366
patch: return ( exp ( x , 0 . 0 ) ) ;
rank: 343
score: 99.16789027622768
patch: return ( 0 . $NUMBER$ * exp ( - $NUMBER$ ) ) ;
rank: 343
score: 99.10125177556819
patch: return - $NUMBER$ * exp ( - x ) ;
rank: 343
score: 99.08831787109375
patch: return 0 . $NUMBER$ + exp ( x ) x ;
rank: 344
score: 99.2470947265625
patch: return 0 . $NUMBER$ * exp ( exp ( x ) x ) ;
rank: 344
score: 99.17991420200893
patch: / * * return 0 . $NUMBER$ * exp ( x ) ;
rank: 344
score: 99.17149861653645
patch: return 0 . 0 - exp ( - x ) ;
rank: 344
score: 99.14110389122597
patch: return 0 . 0 * * exp ( - x ) ;
rank: 344
score: 99.08802379261364
patch: return exp ( ) + exp ( x ) ;
rank: 345
score: 99.19730318509616
patch: return 0 . 0 + exp ( x ) + x ;
rank: 345
score: 99.17553100585937
patch: return $NUMBER$ . $NUMBER$ * ( x ) ;
rank: 345
score: 99.17049466646634
patch: return 0 . 0 * exp ( - $NUMBER$ ) ; }
rank: 345
score: 99.1406005859375
patch: return 0 ; } exp ( x ) ;
rank: 346
score: 99.17960611979167
patch: return 0 . $NUMBER$ * Double . MIN _ VALUE ;
rank: 346
score: 99.16766826923077
patch: return cosh - 0 . $NUMBER$ * exp ( x ) ;
rank: 346
score: 99.11372680664063
patch: return ( x , 0 . $NUMBER$ ) ;
rank: 346
score: 99.08741251627605
patch: return exp ( 0 * exp ( x ) ) ;
rank: 347
score: 99.19686185396634
patch: double CaMeL Value ( x ) ; return 0 . 0 ;
rank: 347
score: 99.17934006911058
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) / $NUMBER$ ;
rank: 347
score: 99.17533569335937
patch: return 0 . $NUMBER$ * x * 0 ;
rank: 347
score: 99.16744995117188
patch: return 0 . 0 + exp ( - x ) ;
rank: 347
score: 99.09920247395833
patch: return 1 . $NUMBER$ / exp ( - x ) ;
rank: 347
score: 99.08633422851562
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) x ;
rank: 348
score: 99.17525227864583
patch: return 0 * 0 * exp exp ( x ) ;
rank: 348
score: 99.14016723632812
patch: if ( x < $NUMBER$ ) { x = 0 ;
rank: 349
score: 99.24603678385417
patch: return 0 . $NUMBER$ * exp ( x / 1 . 0 ) ;
rank: 349
score: 99.1666015625
patch: return ( x ) + 0 . $NUMBER$ * exp ( x ) ;
rank: 349
score: 99.11199481670673
patch: if ( x == $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 350
score: 99.19534067007211
patch: return 0 . $NUMBER$ + exp ( x * $NUMBER$ ) ;
rank: 350
score: 99.17864520733173
patch: this . return 0 . 0 * exp ( x ) ;
rank: 350
score: 99.1663818359375
patch: result [ 0 ] = 0 . $NUMBER$ * exp ( x ) ;
rank: 350
score: 99.09833233173077
patch: return $NUMBER$ . 0 * exp ( x , x ) ;
rank: 350
score: 99.08229758522727
patch: return 0 * x ( x + x ) ;
rank: 351
score: 99.24514973958334
patch: return 0 . $NUMBER$ * x * exp ( x + x ) ;
rank: 351
score: 99.194580078125
patch: return 0 . $NUMBER$ + exp ( x - x ) ;
rank: 351
score: 99.17856069711539
patch: return Double . MAX _ VALUE * exp ( x ) ;
rank: 351
score: 99.17466383713942
patch: return 0 . $NUMBER$ * Math . exp ( x ) ;
rank: 351
score: 99.16815655048077
patch: return 0 . 1 * exp ( x ) - $NUMBER$ ;
rank: 351
score: 99.16634114583333
patch: return 0 . $NUMBER$ , exp ( - x ) ;
rank: 351
score: 99.11153157552083
patch: return x . cosh ( x ) ;
rank: 351
score: 99.08220079210069
patch: return exp ( x ) * x ;
rank: 352
score: 99.17813546316964
patch: return 0 . 0 * exp ( x * x ) ; }
rank: 352
score: 99.17433518629808
patch: return 0 . $NUMBER$ * exp exp ( x ) ; ;
rank: 352
score: 99.16743977864583
patch: return 0 . $NUMBER$ * exp ( - $STRING$ ) ;
rank: 352
score: 99.13875325520833
patch: return 0 . 0 * exp ( , x ) ;
rank: 352
score: 99.11147238991477
patch: return exp ( x , 0 . 1 ) ;
rank: 352
score: 99.09723369891827
patch: z = 0 . 0 * exp ( - x ) ;
rank: 353
score: 99.24448067801339
patch: return 0 . $NUMBER$ * exp ( x ) ) / false ;
rank: 353
score: 99.19410118689903
patch: return 0 . 0 * this * exp ( x ) ;
rank: 353
score: 99.16614708533653
patch: return 0 . $NUMBER$ double $NUMBER$ * exp ( x ) ;
rank: 353
score: 99.11086801382211
patch: return 0 / x . $NUMBER$ * exp ( x ) ;
rank: 353
score: 99.09576885516827
patch: return $NUMBER$ . 0 * exp ( x - x ) ;
rank: 353
score: 99.08113236860795
patch: return 0 + exp ( x - x ) ;
rank: 354
score: 99.16525704520089
patch: return 0 . $NUMBER$ ; } if ( x < $NUMBER$ ) {
rank: 354
score: 99.09566824776786
patch: return 0 . 0 ; }
rank: 355
score: 99.24408365885417
patch: return 0 . $NUMBER$ * exp ( x ) ? x : 0 ;
rank: 355
score: 99.19321695963542
patch: return 1 . $NUMBER$ * / exp ( x ) ;
rank: 355
score: 99.1754150390625
patch: return 0 . $NUMBER$ * exp ( x ) ) * $NUMBER$ ;
rank: 355
score: 99.17332153320312
patch: return 0 . 0 * x * x ;
rank: 355
score: 99.11035766601563
patch: return exp ( - x , x ) ;
rank: 355
score: 99.08035278320312
patch: return 0 . $NUMBER$ * exp ( ) * $NUMBER$ ;
rank: 356
score: 99.24354771205357
patch: return 0 * exp ( x ) + exp ( x ) ;
rank: 356
score: 99.16663536658653
patch: return 0 . $NUMBER$ * 0 - exp ( x ) ;
rank: 356
score: 99.1650390625
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ / x ;
rank: 356
score: 99.11029924665179
patch: return ( - x ) ;
rank: 356
score: 99.08014526367188
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ ;
rank: 357
score: 99.24325358072916
patch: return 0 . $NUMBER$ * exp ( x ) ? 1 . 0 ;
rank: 357
score: 99.17502065805289
patch: return 0 . $NUMBER$ * 0 * exp ( 0 ) ;
rank: 357
score: 99.17252291165866
patch: return 0 . $NUMBER$ * exp ( x ) * false ;
rank: 357
score: 99.13668118990384
patch: return ( 0 . $NUMBER$ , exp ( x ) ) ;
rank: 357
score: 99.07996715198864
patch: return 0 * x + exp ( x ) ;
rank: 358
score: 99.24313151041666
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . length ;
rank: 358
score: 99.19182880108173
patch: return 0 . 0 * 0 * x ( x ) ;
rank: 358
score: 99.17244466145833
patch: return 0 * 0 * exp ( x ) ) ;
rank: 358
score: 99.16605318509616
patch: return 0 . $NUMBER$ . $NUMBER$ - exp ( x ) ;
rank: 358
score: 99.16394981971153
patch: return 0 . $NUMBER$ * - exp ( - $NUMBER$ ) ;
rank: 358
score: 99.11014498197116
patch: return 0 ; } exp ( x , - x ) ;
rank: 358
score: 99.0792236328125
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( ) ;
rank: 359
score: 99.24310772235577
patch: return 0 . $NUMBER$ * exp ( x / 0 ) ;
rank: 359
score: 99.17406209309895
patch: return 0 . 0 * double CaMeL Value ( ) ;
rank: 359
score: 99.13597615559895
patch: if ( x != 0 ) { return 0 ; }
rank: 359
score: 99.07914595170455
patch: return 0 . $NUMBER$ >> exp ( x ) ;
rank: 360
score: 99.17405348557692
patch: return 0 . $NUMBER$ * double * exp ( x ) ;
rank: 360
score: 99.17111440805289
patch: return 0 . $NUMBER$ * ( x . - x ) ;
rank: 360
score: 99.1632412997159
patch: return 0 . $NUMBER$ * exp $NUMBER$ / x ;
rank: 360
score: 99.078857421875
patch: return 0 * exp ( x ) x ;
rank: 361
score: 99.24256184895833
patch: return 0 . 0 * exp ( x + x + x ) ;
rank: 361
score: 99.1708514873798
patch: return 1 * 0 . $NUMBER$ * exp ( x ) ;
rank: 361
score: 99.16284993489583
patch: return 0 . $NUMBER$ * exp ( - ( - x ) ) ;
rank: 361
score: 99.13547585227273
patch: return 0 . $NUMBER$ * new ( x ) ;
rank: 361
score: 99.07874644886364
patch: return 0 + this . exp ( x ) ;
rank: 362
score: 99.17308631310097
patch: return 0 . 0 * exp ( x ) ; } ;
rank: 362
score: 99.17078575721153
patch: return 0 . $NUMBER$ * * exp ( x ) ) ;
rank: 362
score: 99.13535719651442
patch: x += 0 . $NUMBER$ * exp ( - x ) ;
rank: 362
score: 99.0787020596591
patch: return 0 * exp ( x / x ) ;
rank: 363
score: 99.19083345853366
patch: return 0 . 0 * Math . round ( x ) ;
rank: 363
score: 99.17055257161458
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ ) ;
rank: 363
score: 99.09237670898438
patch: exp ( x , 0 . $NUMBER$ , x ) ;
rank: 363
score: 99.07816938920455
patch: return 0 * exp ( x ) / 0 ;
rank: 364
score: 99.19058227539062
patch: return 0 . 0 * Double . MIN _ VALUE ;
rank: 364
score: 99.17276000976562
patch: . return 0 . 0 * exp ( x ) ;
rank: 364
score: 99.1704813639323
patch: return Double . 0 * exp ( x ) ) ;
rank: 364
score: 99.092041015625
patch: exp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 364
score: 99.07816569010417
patch: if ( 0 == x ) { return 0 ; }
rank: 365
score: 99.17258864182692
patch: return 0 . 0 * / exp ( x ) ; }
rank: 365
score: 99.17037259615384
patch: return 0 . $NUMBER$ * exp ( $STRING$ * x ) ;
rank: 365
score: 99.16055297851562
patch: result = 1 . $NUMBER$ * exp ( x ) ;
rank: 366
score: 99.17247314453125
patch: return 0 ; } else { return 0 ;
rank: 366
score: 99.160400390625
patch: return HEX _ $NUMBER$ * exp ( x ) ;
rank: 366
score: 99.13418344350961
patch: if ( x < 0 . 0 ) { return x ;
rank: 367
score: 99.2413330078125
patch: return 0 . $NUMBER$ + exp ( x ) * exp ( x ) ;
rank: 367
score: 99.17239145132211
patch: return 0 . $NUMBER$ / $NUMBER$ * exp ( x ) ;
rank: 367
score: 99.15986328125
patch: return 0 . $NUMBER$ * exp ( - 0 . 0 ) ; }
rank: 367
score: 99.10640775240384
patch: if ( x > x ) { x = - x ;
rank: 367
score: 99.09104567307692
patch: return new 0 . $NUMBER$ * exp ( x ) ; }
rank: 367
score: 99.07774522569444
patch: return exp ( x ) * $NUMBER$ ;
rank: 368
score: 99.1890399639423
patch: return 0 . $NUMBER$ * exp ( x / 1 ) ;
rank: 368
score: 99.17010967548077
patch: return 0 . ) * 0 * exp ( x ) ;
rank: 368
score: 99.162353515625
patch: return $NUMBER$ . $NUMBER$ * - exp ( x ) ;
rank: 368
score: 99.1062723795573
patch: return 0 / exp ( - x + x ) ;
rank: 368
score: 99.09097994290866
patch: return 0 . 1 . $NUMBER$ / exp ( x ) ;
rank: 369
score: 99.2408203125
patch: return 0 . 1 * exp ( x ) + 0 . $NUMBER$ ;
rank: 369
score: 99.18758451021634
patch: double exp = 0 . $NUMBER$ * exp ( x ) ;
rank: 369
score: 99.17184682992789
patch: return 0 . 0 * / ( x - x ) ;
rank: 369
score: 99.0907451923077
patch: return 0 . $NUMBER$ * exp ( x x ) ; }
rank: 370
score: 99.24061686197916
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ) ;
rank: 370
score: 99.17176310221355
patch: return 0 . $NUMBER$ * exp ( 0 ) ; }
rank: 370
score: 99.16178072415866
patch: return - $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 370
score: 99.10592651367188
patch: return 0 ; } else { exp ( x ) ;
rank: 370
score: 99.09071858723958
patch: if ( x <= 0 ) { return x ; }
rank: 370
score: 99.0751620205966
patch: return 0 . 0 * double ( x ) ;
rank: 371
score: 99.24053548177083
patch: return 0 . $NUMBER$ * 0 * exp ( x , x ) ;
rank: 371
score: 99.16836313100961
patch: return 0 . $NUMBER$ * exp . exp ( x ) ;
rank: 371
score: 99.15861511230469
patch: if ( x < $NUMBER$ ) {
rank: 371
score: 99.10508375901442
patch: if ( x > $NUMBER$ ) { return 0 ; } }
rank: 372
score: 99.24014986478366
patch: return 0 . 0 * exp ( x ) . 1 ;
rank: 372
score: 99.16830679086539
patch: return 0 . $NUMBER$ * exp ( x . 0 ) ;
rank: 372
score: 99.07423909505208
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * 0 ;
rank: 373
score: 99.2400634765625
patch: return 0 . $NUMBER$ * exp ( x ) . 0 + x ;
rank: 373
score: 99.18642953725961
patch: return 0 . $NUMBER$ * exp ( x ) << $NUMBER$ ;
rank: 373
score: 99.168212890625
patch: return 0 . ) * exp ( x + x ) ;
rank: 373
score: 99.08762904575893
patch: exp ( - x ) ;
rank: 373
score: 99.073974609375
patch: return 0 . $NUMBER$ * 0 * $NUMBER$ * $NUMBER$ ;
rank: 374
score: 99.2394550030048
patch: return 0 . $NUMBER$ * exp ( x . length ) ;
rank: 374
score: 99.18601296164773
patch: return - 0 . $NUMBER$ * ( x ) ;
rank: 374
score: 99.1709735576923
patch: return 0 . 0 ; } else return 0 . 0 ;
rank: 374
score: 99.16751802884616
patch: return 0 . ) . $NUMBER$ * exp ( x ) ;
rank: 374
score: 99.15818277994792
patch: return 0 . $NUMBER$ + exp ( - $NUMBER$ ) ;
rank: 374
score: 99.08707682291667
patch: return 0 . 0 / exp ( x ) ; }
rank: 375
score: 99.23944498697917
patch: return 0 . 0 . $NUMBER$ * exp ( x , x ) ;
rank: 375
score: 99.18527456430289
patch: return 0 . 0 + 0 * exp ( x ) ;
rank: 375
score: 99.17080453725961
patch: return 0 . $NUMBER$ ; } return exp ( x ) ;
rank: 375
score: 99.16734900841347
patch: return 0 * $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 375
score: 99.1329012784091
patch: return Math . $NUMBER$ * exp ( x ) ;
rank: 376
score: 99.23933919270833
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ + x ;
rank: 376
score: 99.1848856608073
patch: return 0 $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 376
score: 99.17057291666667
patch: return 0 . $NUMBER$ / * exp ( x ) ;
rank: 376
score: 99.16732083834134
patch: return 0 . $NUMBER$ * x ; return 0 . $NUMBER$ ;
rank: 376
score: 99.15754838423295
patch: return ( exp ( x ) - $NUMBER$ ) ;
rank: 376
score: 99.13280232747395
patch: return 0 . 0 * exp ( x x ) ;
rank: 376
score: 99.10182698567708
patch: if ( x >= 0 ) { return x ; }
rank: 376
score: 99.08678260216347
patch: return 0 . $NUMBER$ / exp ( x ) ; } }
rank: 376
score: 99.07243208451705
patch: return 0 * exp ( 0 . $NUMBER$ ) ;
rank: 377
score: 99.23924967447917
patch: return 0 . 1 * exp ( x ) * 0 . 0 ;
rank: 377
score: 99.17054966517857
patch: if ( 0 == x ) { return 0 . 0 ; }
rank: 377
score: 99.15977125901442
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + $NUMBER$ ;
rank: 377
score: 99.1326395670573
patch: return 0 . $NUMBER$ * min ( - x ) ;
rank: 377
score: 99.08636474609375
patch: return $NUMBER$ . $NUMBER$ / exp ( x ) ; }
rank: 378
score: 99.23922964242789
patch: return 0 . $NUMBER$ exp ( exp ( x ) ) ;
rank: 378
score: 99.18406325120192
patch: return 1 . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 378
score: 99.17043832632211
patch: return 0 . $NUMBER$ + exp ( x ) / $NUMBER$ ;
rank: 378
score: 99.1668701171875
patch: return 0 . $NUMBER$ * exp ( x ( ) ) ;
rank: 378
score: 99.15944260817308
patch: return 0 . 1 * exp ( x ) + $NUMBER$ ;
rank: 378
score: 99.156982421875
patch: z . return 0 . $NUMBER$ * exp ( x ) ;
rank: 378
score: 99.13260591947116
patch: if ( x < 0 ) { return 0 ; } }
rank: 378
score: 99.1009051983173
patch: if ( x <= 0 ) { return 0 . $NUMBER$ ;
rank: 378
score: 99.08619103064903
patch: if ( x >= $NUMBER$ ) { return - x ; }
rank: 378
score: 99.07205200195312
patch: return 0 . $NUMBER$ * exp ( ) + $NUMBER$ ;
rank: 379
score: 99.23885091145833
patch: return 0 . $NUMBER$ + exp ( x ) * 0 . 0 ;
rank: 379
score: 99.1593487079327
patch: { return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 379
score: 99.10085824819711
patch: if ( x != 0 ) { exp ( x ) ;
rank: 379
score: 99.07195281982422
patch: return exp ( x ) ) ;
rank: 380
score: 99.18381911057692
patch: double CaMeL Value ( x ) ; return 0 . $NUMBER$ ;
rank: 380
score: 99.16600545247395
patch: return 0 . $NUMBER$ * exp ( x ) ; .
rank: 380
score: 99.15932992788461
patch: return 0 . $NUMBER$ * 1 / exp ( x ) ;
rank: 380
score: 99.07186889648438
patch: if ( x < 0 ) exp ( x ) ;
rank: 381
score: 99.23863118489584
patch: return 0 . $NUMBER$ * Math . min ( x , x ) ;
rank: 381
score: 99.18358435997597
patch: return 0 . 0 * exp ( x ) , x ;
rank: 381
score: 99.16986638849431
patch: return 0 . $NUMBER$ / exp ( 0 ) ;
rank: 381
score: 99.1655742938702
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; / /
rank: 381
score: 99.13217397836539
patch: return 0 . $NUMBER$ * x double ( - x ) ;
rank: 381
score: 99.07151100852273
patch: if ( x == 0 ) { return $NUMBER$ ;
rank: 382
score: 99.16969517299107
patch: return 0 . 0 * exp ( x ) ; / * /
rank: 382
score: 99.15596829927884
patch: return ( 0 . $NUMBER$ - exp ( x ) ) ;
rank: 382
score: 99.07047119140626
patch: return $NUMBER$ * exp ( x ) ) ;
rank: 383
score: 99.23780110677083
patch: return 0 . $NUMBER$ * exp ( x ) ; } return $NUMBER$ ;
rank: 383
score: 99.18269856770833
patch: return 0 . 0 * exp ( float ) x ;
rank: 383
score: 99.16945103236607
patch: return 0 . 0 ; } else { return 1 . $NUMBER$ ;
rank: 383
score: 99.16469163161058
patch: return 1 . $NUMBER$ * x * exp ( x ) ;
rank: 383
score: 99.15577915736607
patch: return ( - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 383
score: 99.1314697265625
patch: return Math . $NUMBER$ * exp ( - x ) ;
rank: 383
score: 99.09835815429688
patch: return 0 . $NUMBER$ * exp ( x 1 ) ;
rank: 383
score: 99.0834491436298
patch: return 0 . $NUMBER$ * exp ( - 0 ) ; }
rank: 383
score: 99.0704012784091
patch: return exp ( x + x , x ) ;
rank: 384
score: 99.237646484375
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . 1 ;
rank: 384
score: 99.16930135091145
patch: return 0 . $NUMBER$ ) / exp ( x ) ;
rank: 384
score: 99.16468302408855
patch: return 0 . $NUMBER$ * 0 . ( x ) ;
rank: 384
score: 99.15786508413461
patch: ; return 0 . $NUMBER$ * exp ( - x ) ;
rank: 384
score: 99.15576171875
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 384
score: 99.13014914772727
patch: return exp ( x , - x ) ; }
rank: 384
score: 99.06993519176136
patch: if ( x == x ) { return 0 ;
rank: 385
score: 99.23694661458333
patch: return 0 . 0 * exp ( x ) - 1 . $NUMBER$ ;
rank: 385
score: 99.16925518329327
patch: return 0 . $NUMBER$ / ( exp ( x ) ) ;
rank: 385
score: 99.16396077473958
patch: return 0 . ( ) * exp ( x ) ;
rank: 385
score: 99.15575154622395
patch: return 0 . $NUMBER$ + exp ( x ) ; }
rank: 385
score: 99.08336385091145
patch: if ( x <= $NUMBER$ ) { return x ; }
rank: 385
score: 99.06984456380208
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ;
rank: 386
score: 99.23670959472656
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( $NUMBER$ ) ;
rank: 386
score: 99.16391823508523
patch: return 0 . $NUMBER$ * x * x ) ;
rank: 386
score: 99.15542367788461
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } else
rank: 386
score: 99.06979370117188
patch: return 0 . 0 + exp ( x ) ) ;
rank: 387
score: 99.23631998697917
patch: return 0 * 0 . $NUMBER$ * exp ( x + x ) ;
rank: 387
score: 99.16768704927884
patch: / * return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 387
score: 99.1553485576923
patch: return x - $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 387
score: 99.12979830228366
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . 0 ) ;
rank: 387
score: 99.0821024576823
patch: return x - $NUMBER$ * exp ( - x ) ;
rank: 387
score: 99.0697909268466
patch: if ( 0 == 0 ) { return 0 ;
rank: 388
score: 99.23614908854167
patch: return 0 * 0 . $NUMBER$ * exp ( x , x ) ;
rank: 388
score: 99.16763305664062
patch: return $NUMBER$ . $NUMBER$ * / exp ( x ) ;
rank: 388
score: 99.16366577148438
patch: return $NUMBER$ . $NUMBER$ * x ;
rank: 388
score: 99.1565692608173
patch: return 0 . 0 * exp ( - - $NUMBER$ ) ;
rank: 388
score: 99.12941672585227
patch: return 0 . $NUMBER$ * this ( x ) ;
rank: 388
score: 99.0696309407552
patch: return 0 . $NUMBER$ * exp ( x + 0 ;
rank: 389
score: 99.23590494791667
patch: return 0 . $NUMBER$ * exp ( x + 0 . 1 ) ;
rank: 389
score: 99.16576209435097
patch: return 0 . $NUMBER$ / exp ( x - $NUMBER$ ) ;
rank: 389
score: 99.16328568892045
patch: throw 0 . $NUMBER$ * exp ( x ) ;
rank: 389
score: 99.15618896484375
patch: return 0 . 1 * ( x - x ) ;
rank: 389
score: 99.15509643554688
patch: return x + exp ( - x ) ;
rank: 389
score: 99.09663899739583
patch: x return 0 . $NUMBER$ * exp ( x ) ;
rank: 389
score: 99.08118693033855
patch: exp ( x , exp ( - x ) ) ;
rank: 389
score: 99.06945037841797
patch: return 0 . $NUMBER$ - x ;
rank: 390
score: 99.2357666015625
patch: return 0 . $NUMBER$ * exp ( x ) * 1 . 0 ;
rank: 390
score: 99.15597534179688
patch: { return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 390
score: 99.06919167258523
patch: return x * exp ( x , x ) ;
rank: 391
score: 99.1802734375
patch: return - 0 * exp ( x ) ;
rank: 391
score: 99.16233317057292
patch: return 0 * exp ( x ) ; return 0 ;
rank: 391
score: 99.15485026041667
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - 0 . $NUMBER$ ;
rank: 391
score: 99.0679931640625
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * x ;
rank: 392
score: 99.23548177083333
patch: return 0 . 1 * exp ( x ) exp ( x ) ;
rank: 392
score: 99.16525503305289
patch: return 0 . 0 / exp ( x - x ) ;
rank: 392
score: 99.16225179036458
patch: return Double . $NUMBER$ * exp exp ( x ) ;
rank: 392
score: 99.15479387555804
patch: return 0 . $NUMBER$ * x - exp ( - $NUMBER$ ) ;
rank: 392
score: 99.128662109375
patch: return 0 . 0 exp ( - x ) ;
rank: 392
score: 99.09388316761364
patch: return exp ( - x , - x ) ;
rank: 392
score: 99.07972208658855
patch: ] return 0 . $NUMBER$ * exp ( x ) ;
rank: 393
score: 99.23527018229167
patch: return 0 . $NUMBER$ * exp ( x ) & 0 . $NUMBER$ ;
rank: 393
score: 99.16502967247597
patch: return 0 . $NUMBER$ * exp ( x ) * / ;
rank: 393
score: 99.16224083533653
patch: return 0 . Double . $NUMBER$ * exp ( x ) ;
rank: 393
score: 99.15469125600961
patch: d = 0 . $NUMBER$ * exp ( - x ) ;
rank: 393
score: 99.0934549967448
patch: return 0 . $NUMBER$ double exp ( - x ) ;
rank: 393
score: 99.06685014204545
patch: return 0 + $NUMBER$ + exp ( x ) ;
rank: 394
score: 99.16465407151442
patch: return - 1 . $NUMBER$ * / exp ( x ) ;
rank: 394
score: 99.16151936848958
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; ;
rank: 394
score: 99.15462239583333
patch: val = 0 . $NUMBER$ * exp ( x ) ;
rank: 394
score: 99.0933837890625
patch: if ( x > $NUMBER$ ) { x = 0 ;
rank: 394
score: 99.07850230823864
patch: return 0 / exp ( - x ) ; }
rank: 394
score: 99.06665649414063
patch: return 0 * exp ( x ) ; ;
rank: 395
score: 99.23505108173077
patch: return 0 . $NUMBER$ * exp ( 0 . length ) ;
rank: 395
score: 99.17887056790866
patch: return 0 . $NUMBER$ * float CaMeL Value ( x ) ;
rank: 395
score: 99.16448505108173
patch: return 0 . $NUMBER$ * exp ( x ) ^ $NUMBER$ ;
rank: 395
score: 99.16141451322116
patch: return 0 . $NUMBER$ * ( x * x ) ) ;
rank: 395
score: 99.15457153320312
patch: return x . $NUMBER$ * exp ( - x ) ;
rank: 395
score: 99.15448467548077
patch: return 0 . $NUMBER$ * exp ( x > 0 ) ;
rank: 395
score: 99.0655008951823
patch: return ( 0 . 0 ) * 0 . $NUMBER$ ;
rank: 396
score: 99.23451334635416
patch: return 0 . $NUMBER$ * exp ( x ) - ( x ) ;
rank: 396
score: 99.16437237079327
patch: return 0 . $NUMBER$ * x ( x ) / $NUMBER$ ;
rank: 396
score: 99.16111403245192
patch: return 0 . ) * $NUMBER$ * exp ( x ) ;
rank: 396
score: 99.15443772536058
patch: return 0 . x $NUMBER$ * exp ( - x ) ;
rank: 396
score: 99.06427001953125
patch: return 0 * exp ( x ) ) / $NUMBER$ ;
rank: 397
score: 99.1610440340909
patch: return 0 . $NUMBER$ * ( 0 . ) ;
rank: 397
score: 99.15392194475446
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 398
score: 99.23424421037946
patch: return 0 . $NUMBER$ + exp ( exp ( x ) ) ;
rank: 398
score: 99.15391540527344
patch: return exp ( - $NUMBER$ ) ;
rank: 398
score: 99.15317946213942
patch: . return 0 . $NUMBER$ * exp ( x ) ; }
rank: 398
score: 99.1275634765625
patch: if ( x > 0 . 0 ) { return x ;
rank: 398
score: 99.09014892578125
patch: x = exp ( x , 0 . 0 ) ;
rank: 398
score: 99.07668050130208
patch: if ( x < 1 ) { return 0 ; }
rank: 398
score: 99.06303267045455
patch: return exp ( x + x + x ) ;
rank: 399
score: 99.17782827524039
patch: return 0 . 0 * x ( x ) * x ;
rank: 399
score: 99.16356404622395
patch: return 0 . $NUMBER$ / exp ( x ) ; ;
rank: 399
score: 99.16013746995192
patch: return 0 * 0 * exp ( x - x ) ;
rank: 399
score: 99.15373883928571
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else
rank: 399
score: 99.09007679332386
patch: return 0 / $NUMBER$ * exp ( x ) ;
rank: 399
score: 99.06285511363636
patch: return ( exp ( x ) + x ) ;
rank: 400
score: 99.23417154947917
patch: return 0 . $NUMBER$ * 0 * exp ( x - x ) ;
rank: 400
score: 99.17774454752605
patch: return 0 . 0 ; } return 0 . $NUMBER$ ;
rank: 400
score: 99.1625225360577
patch: return 0 . $NUMBER$ / x * exp ( x ) ;
rank: 400
score: 99.16011555989583
patch: return 0 * 0 . $NUMBER$ * ( x ) ;
rank: 401
score: 99.2341552734375
patch: return 0 . $NUMBER$ * exp ( x ) ; } return 1 ;
rank: 401
score: 99.16241924579327
patch: return 0 . 0 * exp ( x ) - 1 ;
rank: 401
score: 99.15302385602679
patch: return $NUMBER$ . $NUMBER$ * exp ( - ( x ) ) ;
rank: 401
score: 99.08953302556819
patch: return 0 / exp ( x , 0 ) ;
rank: 401
score: 99.0625
patch: return ( exp ( x ) * x ) ;
rank: 402
score: 99.23335774739583
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) . 1 ;
rank: 402
score: 99.15927358774039
patch: return 0 . $NUMBER$ * exp ( x , $STRING$ ) ;
rank: 402
score: 99.1525390625
patch: return ( x ) - 0 . $NUMBER$ * exp ( x ) ;
rank: 402
score: 99.0879414876302
patch: return ( exp ( - x ) + x ) ;
rank: 402
score: 99.07574462890625
patch: return Integer . $NUMBER$ * exp ( - x ) ;
rank: 403
score: 99.23248697916667
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 * exp ( x ) ;
rank: 403
score: 99.17685171274039
patch: return 0 . $NUMBER$ * Math . max ( x ) ;
rank: 403
score: 99.16225961538461
patch: double 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 403
score: 99.15884399414062
patch: return 0 . ( x ) ;
rank: 403
score: 99.15230618990384
patch: return 0 . $NUMBER$ * ( - 0 . $NUMBER$ ) ;
rank: 403
score: 99.15008075420673
patch: return 0 . 1 * exp ( x ) / $NUMBER$ ;
rank: 403
score: 99.08771306818181
patch: return $NUMBER$ . $NUMBER$ * ( - x ) ;
rank: 403
score: 99.06187947591145
patch: return 0 . $NUMBER$ exp * exp ( x ) ;
rank: 404
score: 99.1767108623798
patch: return 0 . $NUMBER$ * x ( x ) + x ;
rank: 404
score: 99.1619121844952
patch: return 0 . $NUMBER$ / exp ( x - 1 ) ;
rank: 404
score: 99.15814678485577
patch: return 0 . ( x ) * exp ( x ) ;
rank: 404
score: 99.15204264322917
patch: return 0 . $NUMBER$ * exp ( - exp ( x ) ) ;
rank: 404
score: 99.14977010091145
patch: return 0 . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 404
score: 99.06145685369319
patch: return $NUMBER$ * exp ( x ) * 0 ;
rank: 405
score: 99.23216247558594
patch: return 0 . 1 * exp ( x ) + exp ( x ) ;
rank: 405
score: 99.16148963341347
patch: return 0 . 0 ; } else { return 0 ; }
rank: 405
score: 99.15185546875
patch: return 0 . $NUMBER$ * exp ( x ) ; case 1 :
rank: 405
score: 99.12644264914773
patch: if ( x < 0 ) { return x ;
rank: 405
score: 99.061279296875
patch: return $NUMBER$ . 0 * exp ( x ) ) ;
rank: 406
score: 99.23192545572917
patch: return 0 . $NUMBER$ * ( exp ( x ) + x ) ;
rank: 406
score: 99.17648315429688
patch: return 0 . $NUMBER$ * double CaMeL Value ( ) ;
rank: 406
score: 99.15141950334821
patch: return 0 . $NUMBER$ * exp ( - 0 . 1 ) ;
rank: 406
score: 99.0842618075284
patch: return 0 . $NUMBER$ double exp ( x ) ;
rank: 406
score: 99.0731201171875
patch: return $NUMBER$ . 0 / exp ( - x ) ;
rank: 406
score: 99.06123860677083
patch: return 0 . $NUMBER$ * 0 * $NUMBER$ . $NUMBER$ ;
rank: 407
score: 99.23148890904018
patch: { return 0 . $NUMBER$ * exp ( x ) - x ;
rank: 407
score: 99.17633056640625
patch: return - 0 . 0 ;
rank: 407
score: 99.15692608173077
patch: return Double . 0 * x * exp ( x ) ;
rank: 407
score: 99.12621131310097
patch: if ( x < 0 ) { return - 0 ; }
rank: 407
score: 99.0841397372159
patch: if ( x <= $NUMBER$ ) { return 0 ;
rank: 408
score: 99.23140462239583
patch: return ( 0 . $NUMBER$ * exp ( x ) - x ) ;
rank: 408
score: 99.17623901367188
patch: return 0 . $NUMBER$ * ( x * $NUMBER$ ) ;
rank: 408
score: 99.16055063100961
patch: return Double . Double . double CaMeL Value ( x ) ;
rank: 408
score: 99.15613731971153
patch: return ( x ) * $NUMBER$ * exp ( x ) ;
rank: 408
score: 99.15103853665866
patch: return 0 . 0 * exp / exp ( x ) ;
rank: 408
score: 99.08375040690105
patch: return ( exp ( - x ) ) / $NUMBER$ ;
rank: 408
score: 99.0730692545573
patch: x = $NUMBER$ * exp ( x - x ) ;
rank: 408
score: 99.0611572265625
patch: return exp ( x ) * $NUMBER$ * $NUMBER$ ;
rank: 409
score: 99.23133138020833
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . x ;
rank: 409
score: 99.17611694335938
patch: return 0 . 0 * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 409
score: 99.16030883789062
patch: return 0 . $NUMBER$ * exp ( x , x ;
rank: 409
score: 99.15601524939903
patch: return Double . 0 . $NUMBER$ * exp ( x ) ;
rank: 409
score: 99.14899151141827
patch: return cosh * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 409
score: 99.07292036576705
patch: exp ( x , exp ( x ) ) ;
rank: 410
score: 99.175048828125
patch: return 0 . $NUMBER$ * Math . min ( x ) ;
rank: 410
score: 99.16029710036058
patch: return Math . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 410
score: 99.15579562717014
patch: return 0 . $NUMBER$ * exp x ;
rank: 410
score: 99.15058244977679
patch: return 0 . $NUMBER$ * exp ( x , - 1 ) ;
rank: 410
score: 99.08353678385417
patch: return 0 . $NUMBER$ * exp ( - start ) ;
rank: 410
score: 99.06059126420455
patch: return 0 * exp ( x ) - 0 ;
rank: 411
score: 99.23123931884766
patch: return 0 . $NUMBER$ + exp ( x ) + exp ( x ) ;
rank: 411
score: 99.15565074573864
patch: return 0 . 0 * exp ( x ) .
rank: 411
score: 99.1499252319336
patch: if ( x > 0 ) {
rank: 411
score: 99.08345170454545
patch: return exp ( x , x + x ) ;
rank: 412
score: 99.23026820591518
patch: { return 0 . $NUMBER$ * exp ( x , x ) ;
rank: 412
score: 99.15990271935097
patch: return ( 0 . $NUMBER$ * exp ( $NUMBER$ ) ) ;
rank: 412
score: 99.14979771205357
patch: return 0 . $NUMBER$ * exp / exp ( - x ) ;
rank: 412
score: 99.1485262784091
patch: return 0 * exp ( x - $NUMBER$ ) ;
rank: 412
score: 99.12406099759616
patch: return 0 . 0 * exp ( - x ) ) ;
rank: 413
score: 99.23019205729166
patch: return 0 . $NUMBER$ * exp ( x , x + $NUMBER$ ) ;
rank: 413
score: 99.15945434570312
patch: return 0 . $NUMBER$ * / exp ( 0 ) ;
rank: 413
score: 99.15499173677884
patch: return 0 * exp ( x , x + x ) ;
rank: 413
score: 99.08307647705078
patch: x = exp ( x ) ;
rank: 413
score: 99.06033325195312
patch: return 0 . $NUMBER$ * exp ( double ) $NUMBER$ ;
rank: 414
score: 99.23008219401042
patch: return exp ( x ) . min ( x ) ;
rank: 414
score: 99.17397836538461
patch: return 0 . 0 * x ( x + x ) ;
rank: 414
score: 99.1549784342448
patch: return 0 . $NUMBER$ * exp ( x * x ;
rank: 414
score: 99.14830525716145
patch: return 0 . 0 * - exp ( x ) ;
rank: 414
score: 99.06559244791667
patch: return 0 . $NUMBER$ * exp ( x - x ;
rank: 414
score: 99.06020100911458
patch: if ( x >= 0 ) exp ( x ) ;
rank: 415
score: 99.22987365722656
patch: return 0 . 0 * exp ( exp ( x ) + x ) ;
rank: 415
score: 99.15902005709134
patch: return 0 . $NUMBER$ * exp ( x ) ; ; }
rank: 415
score: 99.15486966646634
patch: return 0 * exp ( x * x + x ) ;
rank: 415
score: 99.14842006138393
patch: return 1 . $NUMBER$ * exp ( x ) ; } else {
rank: 415
score: 99.14820274939903
patch: return $NUMBER$ . $NUMBER$ * - exp ( - x ) ;
rank: 415
score: 99.08256022135417
patch: return * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 415
score: 99.0595370205966
patch: if ( 0 == exp ( x ) ) {
rank: 416
score: 99.22975376674107
patch: return 0 . $NUMBER$ * exp ( x ) ) / null ;
rank: 416
score: 99.17325846354167
patch: return 0 . 0 * 0 * ( x ) ;
rank: 416
score: 99.14829508463542
patch: l = 0 . $NUMBER$ * exp ( x ) ;
rank: 416
score: 99.08229573567708
patch: result += 0 . $NUMBER$ * exp ( x ) ;
rank: 416
score: 99.06502278645833
patch: return 0 ) . $NUMBER$ * exp ( x ) ;
rank: 416
score: 99.05935668945312
patch: return 0 . $NUMBER$ + exp ( x ) ; ;
rank: 417
score: 99.17269897460938
patch: return 0 . 0 * this . x ;
rank: 417
score: 99.15802001953125
patch: return Math . abs ( exp ( x ) ) ;
rank: 417
score: 99.15397135416667
patch: / return 0 . $NUMBER$ * exp ( x ) ;
rank: 417
score: 99.14816284179688
patch: return ( double ) exp ( x ) ;
rank: 417
score: 99.05924479166667
patch: return 0 * x ) * exp ( x ) ;
rank: 418
score: 99.1723388671875
patch: return 0 . 0 * $NUMBER$ * x ;
rank: 418
score: 99.14739520733173
patch: return 0 . $NUMBER$ * exp ( - - 1 ) ;
rank: 418
score: 99.06458536783855
patch: if ( x < $NUMBER$ ) { x = $NUMBER$ ;
rank: 419
score: 99.22967529296875
patch: return 0 . $NUMBER$ * exp ( exp ( 0 ) ) ;
rank: 419
score: 99.1717998798077
patch: return 0 . $NUMBER$ / exp ( x ) + x ;
rank: 419
score: 99.15762094350961
patch: return 0 . $NUMBER$ * exp ( 0 ) / $NUMBER$ ;
rank: 419
score: 99.15215594951923
patch: return 0 . $NUMBER$ * x * x * x ) ;
rank: 419
score: 99.1478500366211
patch: if ( x > $NUMBER$ ) {
rank: 419
score: 99.12100923978366
patch: return 0 . 0 * exp ( x ) : $NUMBER$ ;
rank: 419
score: 99.0806884765625
patch: return 0 . $NUMBER$ ( - x ) ;
rank: 420
score: 99.22933756510416
patch: return 0 . $NUMBER$ * exp ( x ) . $NUMBER$ * x ;
rank: 420
score: 99.1714618389423
patch: return 1 . $NUMBER$ * exp ( x ) / x ;
rank: 420
score: 99.15746053059895
patch: return 0 . 0 * exp ( x ) * /
rank: 420
score: 99.08059692382812
patch: x += 0 . $NUMBER$ * exp ( x ) ;
rank: 421
score: 99.22905622209821
patch: return 0 . 0 * exp ( x ) [ x ] ;
rank: 421
score: 99.17139434814453
patch: return 0 . 0 * 0 ;
rank: 421
score: 99.15744018554688
patch: return new 0 . 0 * exp ( x ) ;
rank: 421
score: 99.15107865767045
patch: return 0 . $NUMBER$ * 0 * x ) ;
rank: 421
score: 99.14772251674107
patch: return 0 . $NUMBER$ * x - 0 . 0 * x ;
rank: 421
score: 99.05731756036931
patch: if ( 0 == x ) { return $NUMBER$ ;
rank: 422
score: 99.17055935329861
patch: return double CaMeL Value ( x ) ;
rank: 422
score: 99.15708571213942
patch: return - 1 . 0 * / exp ( x ) ;
rank: 422
score: 99.15069580078125
patch: return ( 0 . $NUMBER$ * ( x ) ) ;
rank: 422
score: 99.14588341346153
patch: return 0 / $NUMBER$ . 0 * exp ( x ) ;
rank: 422
score: 99.06182861328125
patch: y = 0 . $NUMBER$ * exp ( x ) ;
rank: 422
score: 99.05715942382812
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ ;
rank: 423
score: 99.15664438100961
patch: return 0 . 0 * exp ( x ) * 0 ;
rank: 423
score: 99.15052208533653
patch: return 0 * ( exp ( x ) - x ) ;
rank: 423
score: 99.1468505859375
patch: return ( exp ( x ) - 0 . $NUMBER$ ) ;
rank: 423
score: 99.14535757211539
patch: return $NUMBER$ . $NUMBER$ . 1 * exp ( x ) ;
rank: 423
score: 99.07999674479167
patch: return exp ( x , - x + x ) ;
rank: 423
score: 99.0609130859375
patch: = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 423
score: 99.05713568793402
patch: return exp ( x ) * 0 ;
rank: 424
score: 99.16939603365384
patch: return $NUMBER$ . 0 * exp ( x ) * x ;
rank: 424
score: 99.15619506835938
patch: return 0 . $NUMBER$ / ( x ) ;
rank: 424
score: 99.14643205915179
patch: return 0 + 0 . $NUMBER$ * exp ( - x ) ;
rank: 424
score: 99.14532470703125
patch: return 0 . 1 * - exp ( x ) ;
rank: 424
score: 99.05706787109375
patch: return 0 . $NUMBER$ * exp ( x ) 0 ;
rank: 425
score: 99.16857299804687
patch: return 1 . $NUMBER$ * ( x ) ;
rank: 425
score: 99.14991344105114
patch: return $NUMBER$ * exp ( x * x ) ;
rank: 425
score: 99.1426114169034
patch: return Integer . $NUMBER$ * exp ( x ) ;
rank: 425
score: 99.07892400568181
patch: if ( x <= 0 ) { return 0 ;
rank: 425
score: 99.05632990056819
patch: return 1 * exp ( x + x ) ;
rank: 426
score: 99.145751953125
patch: return 0 . $NUMBER$ * x + 0 . $NUMBER$ ;
rank: 426
score: 99.1422870342548
patch: return 0 . 0 * - exp ( - x ) ;
rank: 426
score: 99.11861165364583
patch: if ( x != $NUMBER$ ) { return 0 ; }
rank: 426
score: 99.05970255533855
patch: return 0 * exp ( x - x ) ; }
rank: 426
score: 99.05601917613636
patch: if ( x == $NUMBER$ ) { return x ;
rank: 427
score: 99.22772979736328
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ; }
rank: 427
score: 99.14215557391827
patch: return 0 . $NUMBER$ * exp ( x ) / 0 ;
rank: 428
score: 99.22713216145833
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . x ;
rank: 428
score: 99.1554706280048
patch: return 0 . $NUMBER$ * ( double ) ( x ) ;
rank: 428
score: 99.1494610126202
patch: return 0 . $NUMBER$ * exp ( x ( x ) ;
rank: 428
score: 99.0763448079427
patch: return 0 * exp ( - x ) + x ;
rank: 428
score: 99.05923461914062
patch: if ( x < 0 ) { x = $NUMBER$ ;
rank: 428
score: 99.05467640269886
patch: return exp ( x ) * 0 . 0 ;
rank: 429
score: 99.16780911959134
patch: return 0 . 0 * exp ( x ) / 1 ;
rank: 429
score: 99.15492600661058
patch: return 0 . $NUMBER$ * exp ( x ) ^ x ;
rank: 429
score: 99.14858176491477
patch: return 0 . $NUMBER$ exp exp ( x ) ;
rank: 429
score: 99.05426580255681
patch: return 0 . $NUMBER$ * exp ( start ) ;
rank: 430
score: 99.14833420973558
patch: return 0 . $NUMBER$ * exp ( x ) ; $NUMBER$ ;
rank: 430
score: 99.1443758877841
patch: return 0 . $NUMBER$ < exp ( x ) ;
rank: 430
score: 99.0575663248698
patch: if ( x >= $NUMBER$ ) { return x ; }
rank: 430
score: 99.05399946732955
patch: return 0 . $NUMBER$ * start ( x ) ;
rank: 431
score: 99.16705791766827
patch: return 0 . 0 * exp ( x / 0 ) ;
rank: 431
score: 99.15416541466347
patch: return - 1 . $NUMBER$ * exp ( x ) ; }
rank: 431
score: 99.147705078125
patch: return 0 . $NUMBER$ * exp exp ( ) ;
rank: 431
score: 99.14342244466145
patch: double 0 . 0 * exp ( - x ) ;
rank: 431
score: 99.13976111778847
patch: return ( 1 . $NUMBER$ ) * exp ( x ) ;
rank: 431
score: 99.05752224392361
patch: exp ( x , - x ) ;
rank: 431
score: 99.0538330078125
patch: return 0 . $NUMBER$ && exp ( x ) ;
rank: 432
score: 99.22581481933594
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , exp ( x ) ) ;
rank: 432
score: 99.16690767728366
patch: return 1 . 0 * exp ( x / x ) ;
rank: 432
score: 99.15411846454327
patch: return 0 . 0 ; } return exp ( x ) ;
rank: 432
score: 99.14715021306819
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ ;
rank: 432
score: 99.11483060396634
patch: return ( x > $NUMBER$ ) / exp ( x ) ;
rank: 432
score: 99.05264892578126
patch: return 0 . $NUMBER$ + 0 . 0 ;
rank: 433
score: 99.22556715745192
patch: return 0 * 0 . 1 * exp ( x ) ;
rank: 433
score: 99.16683255709134
patch: return 0 . $NUMBER$ * x ( x / $NUMBER$ ) ;
rank: 433
score: 99.15406290690105
patch: return 0 . 0 ) * exp ( x ) ;
rank: 433
score: 99.13885028545673
patch: return 0 . 1 * exp ( x + $NUMBER$ ) ;
rank: 433
score: 99.1141826923077
patch: if ( x > 0 ) { return - 0 ; }
rank: 433
score: 99.05255681818181
patch: return 0 = 0 + exp ( x ) ;
rank: 434
score: 99.22555338541666
patch: return 0 . $NUMBER$ * exp ( x ) ? $NUMBER$ + x ;
rank: 434
score: 99.16652268629808
patch: return 0 . $NUMBER$ + exp ( x / $NUMBER$ ) ;
rank: 434
score: 99.14279610770089
patch: return 0 . $NUMBER$ * x - $NUMBER$ . $NUMBER$ * x ;
rank: 434
score: 99.13858736478366
patch: return 0 . $NUMBER$ * ( - x ) - x ;
rank: 434
score: 99.0746561686198
patch: return 0 . $NUMBER$ exp ( x , x ) ;
rank: 434
score: 99.05191650390626
patch: if ( x == 0 ) return x ;
rank: 435
score: 99.22552490234375
patch: return 0 . $NUMBER$ * exp ( exp ( x + x ) ) ;
rank: 435
score: 99.0740966796875
patch: return HEX _ $NUMBER$ * exp ( - x ) ;
rank: 435
score: 99.05624389648438
patch: return - $NUMBER$ * exp ( x ) ;
rank: 436
score: 99.16587477463942
patch: = 0 . $NUMBER$ * exp ( x ) + x ;
rank: 436
score: 99.1455411044034
patch: return x * 0 * exp ( x ) ;
rank: 436
score: 99.13717886117789
patch: return exp ( x , 0 . 0 , $NUMBER$ ) ;
rank: 437
score: 99.16544596354167
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 437
score: 99.14541015625
patch: return $NUMBER$ . $NUMBER$ * x * x ;
rank: 438
score: 99.16517052283653
patch: return 0 . 0 * Math . max ( x ) ;
rank: 438
score: 99.1451924641927
patch: return 0 . $NUMBER$ * 0 * exp ( x ;
rank: 438
score: 99.1414043719952
patch: double 0 = 0 . $NUMBER$ * exp ( x ) ;
rank: 438
score: 99.13677978515625
patch: ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 438
score: 99.05564186789773
patch: x = 0 * exp ( - x ) ;
rank: 438
score: 99.04905007102273
patch: return 0 * exp ( x + $NUMBER$ ) ;
rank: 439
score: 99.13668823242188
patch: return Double . 1 * exp ( - x ) ;
rank: 439
score: 99.11342210036058
patch: return 0 . $NUMBER$ * ( ( - x ) ) ;
rank: 439
score: 99.07298694957386
patch: return 0 / exp ( x + x ) ;
rank: 439
score: 99.05526394314236
patch: return new double [ $NUMBER$ ] ; }
rank: 440
score: 99.2236557006836
patch: return 0 . $NUMBER$ * exp ( x + max ( x ) ) ;
rank: 440
score: 99.16468224158653
patch: return 0 . 0 * exp ( x ) + $STRING$ ;
rank: 440
score: 99.15210978190105
patch: return 0 . $NUMBER$ ; } return 0 . $NUMBER$ ;
rank: 441
score: 99.14462619357639
patch: return 0 . $NUMBER$ * exp 0 ;
rank: 441
score: 99.14054361979167
patch: return ( . $NUMBER$ * exp ( x ) ) ;
rank: 441
score: 99.112548828125
patch: return x . 0 * exp ( - x ) ;
rank: 441
score: 99.07176624644886
patch: return 0 / exp ( x - x ) ;
rank: 441
score: 99.0547383626302
patch: return $NUMBER$ * exp ( x , x ) ; }
rank: 441
score: 99.0487948330966
patch: return 0 . $NUMBER$ return exp ( x ) ;
rank: 442
score: 99.22320556640625
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) - $NUMBER$ ;
rank: 442
score: 99.164306640625
patch: return 1 . 0 * exp ( x ) ; }
rank: 442
score: 99.14396158854167
patch: return x . exp ( x ) ;
rank: 442
score: 99.13616473858173
patch: return 0 . $NUMBER$ * cosh * exp ( x ) ;
rank: 442
score: 99.07049560546875
patch: return $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 442
score: 99.05452473958333
patch: return 0 . $NUMBER$ * $NUMBER$ ( - x ) ;
rank: 442
score: 99.04869495738636
patch: return 0 . $NUMBER$ * exp ( x ) }
rank: 443
score: 99.16420491536458
patch: double return 0 . 0 * exp ( x ) ;
rank: 443
score: 99.15043131510417
patch: synchronized ( 0 ) { return 0 . $NUMBER$ ; }
rank: 443
score: 99.1359112079327
patch: return 0 . 1 * - exp ( - x ) ;
rank: 443
score: 99.11138446514423
patch: return 0 . $NUMBER$ * exp ( - x ) 1 ;
rank: 443
score: 99.0542704264323
patch: return $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 444
score: 99.22255161830357
patch: { return 0 . $NUMBER$ * exp ( x ) * x ;
rank: 444
score: 99.15006510416667
patch: return 0 . 0 ;
rank: 444
score: 99.14347330729167
patch: return 0 * $NUMBER$ * exp ( x ) ) ;
rank: 444
score: 99.06980387369792
patch: if ( x > 1 ) { return 0 ; }
rank: 444
score: 99.05321155894886
patch: return 0 . $NUMBER$ * exp ( x ; }
rank: 444
score: 99.04850630326705
patch: if ( exp ( x ) ; return 0 ;
rank: 445
score: 99.22254356971153
patch: return 0 . 0 * exp ( x ) ? 0 ;
rank: 445
score: 99.16385904947917
patch: return 1 . 0 * / exp ( x ) ;
rank: 445
score: 99.15004475911458
patch: return 0 . 0 ; } else {
rank: 445
score: 99.1400897686298
patch: return x > 0 . $NUMBER$ * exp ( x ) ;
rank: 445
score: 99.134765625
patch: . return 0 . 0 * exp ( - x ) ;
rank: 445
score: 99.05265299479167
patch: return $NUMBER$ * exp ( x - x ) ; }
rank: 445
score: 99.04784478081598
patch: return exp ( x ) . x ;
rank: 446
score: 99.22242024739583
patch: return 0 . $NUMBER$ * exp ( x ) ? $NUMBER$ * x ;
rank: 446
score: 99.16335824819711
patch: return 0 . 0 * exp ( x / 1 ) ;
rank: 446
score: 99.14993051382211
patch: return 0 . $NUMBER$ / exp ( x ) * x ;
rank: 446
score: 99.14228959517045
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ ;
rank: 446
score: 99.11031087239583
patch: return 0 . $NUMBER$ * exp ( int ) x ;
rank: 446
score: 99.06938340928819
patch: x = 0 . $NUMBER$ * x ;
rank: 446
score: 99.05241255326705
patch: return $NUMBER$ / exp ( - x ) ; }
rank: 446
score: 99.04782104492188
patch: return 0 . $NUMBER$ * this ;
rank: 447
score: 99.16312349759616
patch: return 0 . 0 * exp ( x ) << $NUMBER$ ;
rank: 447
score: 99.14990234375
patch: / * return 0 . 0 / exp ( x ) ;
rank: 447
score: 99.14152018229167
patch: return 0 . 0 * exp ( x , ) ;
rank: 447
score: 99.06846110026042
patch: return exp ( x , x , - x ) ;
rank: 447
score: 99.0473965731534
patch: return 0 = $NUMBER$ * exp ( x ) ;
rank: 448
score: 99.22145298549107
patch: return 0 + exp ( x ) . min ( x ) ;
rank: 448
score: 99.16309532752403
patch: return 0 . 0 * exp ( x ) % $NUMBER$ ;
rank: 448
score: 99.14986478365384
patch: final 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 448
score: 99.13980538504464
patch: return 0 . 1 * exp ( x ) ; } else {
rank: 448
score: 99.06770833333333
patch: if ( x > $NUMBER$ ) { return - x ;
rank: 448
score: 99.0470303622159
patch: return $NUMBER$ . $NUMBER$ - exp ( x ) ;
rank: 449
score: 99.14973958333333
patch: return Math . abs ( x ) ;
rank: 449
score: 99.1393798828125
patch: return - $NUMBER$ / exp ( x ) ;
rank: 449
score: 99.1329345703125
patch: return 0 * HEX _ $NUMBER$ * exp ( x ) ;
rank: 449
score: 99.10975060096153
patch: if ( x > 0 ) { return 0 ; } }
rank: 449
score: 99.0467196377841
patch: return 0 . $NUMBER$ * copy ( x ) ;
rank: 450
score: 99.16177368164062
patch: return 0 . $NUMBER$ * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 450
score: 99.1483623798077
patch: return 0 . $NUMBER$ * exp ( x ) ( x ;
rank: 450
score: 99.13881613991477
patch: return 0 . $NUMBER$ , exp ( x ) ;
rank: 450
score: 99.13594563802083
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; /
rank: 450
score: 99.13291579026442
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 450
score: 99.10957845052083
patch: return 0 . $NUMBER$ * ( x < $NUMBER$ ) ;
rank: 450
score: 99.04935709635417
patch: return 0 . * exp ( x , x ) ;
rank: 451
score: 99.14820445667614
patch: return 0 . 0 * / exp ( ) ;
rank: 451
score: 99.13876577524039
patch: return ( exp ( x ) + 0 . $NUMBER$ ) ;
rank: 451
score: 99.1358309659091
patch: return 0 * exp ( x ) ; / /
rank: 451
score: 99.04600941051136
patch: return 0 . 0 * get ( x ) ;
rank: 452
score: 99.14813701923077
patch: return 0 . $NUMBER$ * exp ( x ) * / /
rank: 452
score: 99.1320049579327
patch: return 0 / 1 . $NUMBER$ * exp ( x ) ;
rank: 452
score: 99.1094219501202
patch: return 0 . 0 * exp ( x ) : x ;
rank: 452
score: 99.0479227701823
patch: temp ( x , 0 . 0 , x ) ;
rank: 452
score: 99.04576526988636
patch: return 0 . $NUMBER$ * int ( x ) ;
rank: 453
score: 99.1599872295673
patch: return 0 . $NUMBER$ * this . x ( x ) ;
rank: 453
score: 99.1475078876202
patch: return 0 . 0 * exp ( exp ( ) ) ;
rank: 453
score: 99.13833618164062
patch: result = 0 . $NUMBER$ / exp ( x ) ;
rank: 453
score: 99.1343485514323
patch: return 0 . 0 * ( exp ( x ) ;
rank: 454
score: 99.14731069711539
patch: return 0 . 0 * exp ( ) ( x ) ;
rank: 454
score: 99.13825334821429
patch: double x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 454
score: 99.13146033653847
patch: return 0 . 0 . $NUMBER$ / exp ( x ) ;
rank: 454
score: 99.10851033528645
patch: return 0 . 0 * x ( - x ) ;
rank: 454
score: 99.065185546875
patch: return $NUMBER$ . $NUMBER$ * ( x + x ) ;
rank: 454
score: 99.04547119140625
patch: return 0 + x ;
rank: 455
score: 99.21875
patch: return 0 . $NUMBER$ * exp ( x ) / true ;
rank: 455
score: 99.15863506610577
patch: return $NUMBER$ . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 455
score: 99.1378643329327
patch: return 0 . $NUMBER$ * exp ( - ( ) ) ;
rank: 455
score: 99.0646260579427
patch: return 0 double . $NUMBER$ * exp ( x ) ;
rank: 455
score: 99.04532877604167
patch: return this . exp ( x ) ;
rank: 456
score: 99.21873256138393
patch: { return 0 . $NUMBER$ * exp ( x ) + x ;
rank: 456
score: 99.15813739483173
patch: return 0 . 0 * Math . min ( x ) ;
rank: 456
score: 99.13744178185097
patch: return 0 . $NUMBER$ . $NUMBER$ * x ( x ) ;
rank: 456
score: 99.0443448153409
patch: return 0 * exp ( $NUMBER$ + x ) ;
rank: 457
score: 99.13344319661458
patch: return 0 . 0 * x * x * x ;
rank: 457
score: 99.130615234375
patch: return Double . 1 * exp ( x ) ;
rank: 457
score: 99.04412286931819
patch: return ( exp ( x , x ) ) ;
rank: 458
score: 99.1575215657552
patch: return - 0 . 0 + exp ( x ) ;
rank: 458
score: 99.13662719726562
patch: return 0 . 0 * exp $NUMBER$ ( x ) ;
rank: 459
score: 99.21796417236328
patch: return 0 . 1 * exp ( x ) - exp ( x ) ;
rank: 459
score: 99.145263671875
patch: return 0 . 0 * exp ( x ) * / ;
rank: 459
score: 99.13047438401442
patch: { return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 459
score: 99.0441182454427
patch: return = 0 . $NUMBER$ * exp ( x ) ;
rank: 459
score: 99.0435458096591
patch: return 1 * exp ( x , x ) ;
rank: 460
score: 99.2177734375
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) - x ;
rank: 460
score: 99.15688069661458
patch: return 0 . $NUMBER$ * ( x ) + x ;
rank: 460
score: 99.13282267252605
patch: return 0 * $NUMBER$ * exp exp ( x ) ;
rank: 460
score: 99.04350142045455
patch: return 0 . $NUMBER$ + double ( x ) ;
rank: 461
score: 99.14476521809895
patch: return 0 . $NUMBER$ * / exp ( $NUMBER$ ) ;
rank: 461
score: 99.13028658353366
patch: return 1 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 462
score: 99.2164306640625
patch: return 0 . $NUMBER$ * exp ( x , length ) ;
rank: 462
score: 99.13027719350961
patch: return 0 . $NUMBER$ . 1 / exp ( x ) ;
rank: 462
score: 99.06156412760417
patch: x = 0 . $NUMBER$ * ( - x ) ;
rank: 462
score: 99.04224742542614
patch: return exp ( x + 0 . $NUMBER$ ) ;
rank: 463
score: 99.21635437011719
patch: return 0 * exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 463
score: 99.1557147686298
patch: return 0 . $NUMBER$ * Math . ceil ( x ) ;
rank: 463
score: 99.13587364783653
patch: return $NUMBER$ . $NUMBER$ * exp / exp ( x ) ;
rank: 463
score: 99.12942504882812
patch: return ( 0 . ) * exp ( x ) ;
rank: 463
score: 99.06032307942708
patch: return 0 * exp ( - x , x ) ;
rank: 463
score: 99.0433349609375
patch: return 0 * exp ( x , x ) ; }
rank: 464
score: 99.13585486778847
patch: set ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 464
score: 99.12896173650569
patch: return 0 * 0 . exp ( x ) ;
rank: 464
score: 99.05996704101562
patch: return $NUMBER$ * exp ( - x ) + x ;
rank: 464
score: 99.0430399576823
patch: x = $NUMBER$ * exp ( - x ) ; }
rank: 465
score: 99.21609061104911
patch: { return 0 . $NUMBER$ * exp ( x + x ) ;
rank: 465
score: 99.15364837646484
patch: return double CaMeL Value ( ) ;
rank: 465
score: 99.12879435221355
patch: return 0 . * 0 * exp ( x ) ;
rank: 465
score: 99.04243977864583
patch: return $NUMBER$ * exp ( x , 0 ) ; }
rank: 465
score: 99.04044966264205
patch: return 0 . $NUMBER$ * exp ( null ) ;
rank: 466
score: 99.21600341796875
patch: return 0 . $NUMBER$ * exp ( x ) return exp ( x ) ;
rank: 466
score: 99.1536153157552
patch: return - 1 . $NUMBER$ / exp ( x ) ;
rank: 466
score: 99.14330037434895
patch: return 0 . 0 ; } exp ( x ) ;
rank: 466
score: 99.13550743689903
patch: return 0 . $NUMBER$ * exp ( x ) ; else {
rank: 466
score: 99.1287333170573
patch: return 0 . $NUMBER$ * exp ( x , 1 ;
rank: 466
score: 99.0401611328125
patch: return exp ( x ) * 0 + x ;
rank: 467
score: 99.15354614257812
patch: return 0 . 0 * $NUMBER$ * $NUMBER$ ;
rank: 467
score: 99.1432393391927
patch: return - 0 . 0 / exp ( x ) ;
rank: 467
score: 99.13534780649039
patch: result = - 0 . $NUMBER$ * exp ( x ) ;
rank: 467
score: 99.1027119954427
patch: += 0 . 0 * exp ( - x ) ;
rank: 467
score: 99.039990234375
patch: return 0 . 0 * exp ( x )
rank: 468
score: 99.21484375
patch: return 0 . $NUMBER$ * exp ( x ) ? 1 ;
rank: 468
score: 99.12840687144886
patch: return $NUMBER$ * x * exp ( x ) ;
rank: 468
score: 99.04099343039773
patch: return exp ( - exp ( x ) ) ;
rank: 468
score: 99.0399502840909
patch: return x * $NUMBER$ * exp ( x ) ;
rank: 469
score: 99.14285043569711
patch: return 0 / 0 . 0 * exp ( x ) ;
rank: 469
score: 99.12793986002605
patch: return 0 . x * exp ( x ) ) ;
rank: 469
score: 99.05893776633523
patch: return $NUMBER$ / exp ( x , x ) ;
rank: 469
score: 99.0391357421875
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ;
rank: 470
score: 99.15314190204327
patch: double exp = 0 . 0 * exp ( x ) ;
rank: 470
score: 99.13453087439903
patch: return 0 . $NUMBER$ + exp ( - x ) ; }
rank: 470
score: 99.12777709960938
patch: return 0 . $NUMBER$ * x * x * 0 ;
rank: 470
score: 99.1015116373698
patch: return 0 . $NUMBER$ * exp ( x ) 1 ;
rank: 470
score: 99.03873443603516
patch: return 0 * exp ( ) ;
rank: 471
score: 99.21457143930289
patch: return 0 . $NUMBER$ * exp ( 0 . 1 ) ;
rank: 471
score: 99.12709397536058
patch: return 0 . $NUMBER$ * * exp ( x ) ; }
rank: 471
score: 99.1268310546875
patch: return 0 . $NUMBER$ * ( x ) * 0 ;
rank: 471
score: 99.03943888346355
patch: if ( x > $NUMBER$ ) return 0 . $NUMBER$ ;
rank: 472
score: 99.15208943684895
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 472
score: 99.13410295758929
patch: return 0 . $NUMBER$ * exp * exp ( - x ) ;
rank: 472
score: 99.12681070963542
patch: return 0 . 1 * exp ( - 1 ) ;
rank: 472
score: 99.03909301757812
patch: return 0 . * exp ( - x ) ; }
rank: 473
score: 99.21335274832589
patch: return 0 . $NUMBER$ * exp ( x - x ) ) ;
rank: 473
score: 99.15198771158855
patch: return 1 . 0 * exp ( x ) ; ;
rank: 473
score: 99.14154607599431
patch: return 0 . $NUMBER$ . $NUMBER$ ( x ) ;
rank: 473
score: 99.05702903053977
patch: if ( x < $NUMBER$ ) { return x ;
rank: 474
score: 99.2127456665039
patch: return 0 . $NUMBER$ * exp ( exp ( x - x ) ) ;
rank: 474
score: 99.1518085186298
patch: long CaMeL Value ( ) . double CaMeL Value ( ) ;
rank: 474
score: 99.14144897460938
patch: return 0 . $NUMBER$ * exp ( x ) / ;
rank: 474
score: 99.13369516225961
patch: return 0 . $NUMBER$ * exp ( x >> $NUMBER$ ) ;
rank: 474
score: 99.10025024414062
patch: return 0 . $NUMBER$ * start ( - x ) ;
rank: 474
score: 99.05640665690105
patch: result = 0 . 1 * exp ( x ) ;
rank: 474
score: 99.03694458007813
patch: return $NUMBER$ . $NUMBER$ * exp ( ) ;
rank: 475
score: 99.1512118252841
patch: return 0 . 0 * max ( x ) ;
rank: 475
score: 99.1336669921875
patch: return 0 . $NUMBER$ * exp [ 0 ] ;
rank: 475
score: 99.12643432617188
patch: return 0 . $NUMBER$ * ( 0 . 0 ) ;
rank: 475
score: 99.1255391438802
patch: return 0 . $NUMBER$ * exp ( x + x )
rank: 475
score: 99.0561767578125
patch: x = exp ( x , x ) ;
rank: 475
score: 99.03889604048295
patch: return 0 - $NUMBER$ * exp ( x ) ;
rank: 476
score: 99.13360595703125
patch: return ( x ) + exp ( - x ) ;
rank: 476
score: 99.12608924278847
patch: return 0 . 0 / $NUMBER$ * exp ( x ) ;
rank: 476
score: 99.10003107244319
patch: return 0 . 0 * exp ( $STRING$ ) ;
rank: 476
score: 99.05490944602273
patch: return 0 - exp ( x , x ) ;
rank: 476
score: 99.03655450994319
patch: return 0 = $NUMBER$ + exp ( x ) ;
rank: 477
score: 99.1508076985677
patch: return 0 . 0 * ( x / $NUMBER$ ) ;
rank: 477
score: 99.12607046274039
patch: return 0 . 1 * 0 / exp ( x ) ;
rank: 477
score: 99.099609375
patch: return 0 . $NUMBER$ * exp ( false ) ;
rank: 477
score: 99.05408935546875
patch: return - x ;
rank: 478
score: 99.14047475961539
patch: return 0 . $NUMBER$ / exp ( x * $NUMBER$ ) ;
rank: 478
score: 99.12572132457386
patch: return 0 . SIZE * exp ( x ) ;
rank: 478
score: 99.05381944444444
patch: return 0 . ( - x ) ;
rank: 478
score: 99.03667658025569
patch: return 0 . * exp ( x ) ; }
rank: 478
score: 99.03635864257812
patch: if ( 0 == x ) return 0 ;
rank: 479
score: 99.21186967329545
patch: return 0 . length * exp ( x ) ;
rank: 479
score: 99.1505839029948
patch: return 0 1 . 0 * exp ( x ) ;
rank: 479
score: 99.12569486177884
patch: { return 0 . 0 * exp ( x ) ; }
rank: 479
score: 99.03510076349431
patch: if ( 0 != x ) { return 0 ;
rank: 480
score: 99.211669921875
patch: return 0 * exp ( x ) / exp ( x ) ;
rank: 480
score: 99.1402118389423
patch: return Double . value CaMeL Of ( x ) . 0 ;
rank: 480
score: 99.12560017903645
patch: return 0 . $NUMBER$ * ( x - 1 ) ;
rank: 480
score: 99.12342325846355
patch: return 0 . $NUMBER$ * 0 * 0 . 0 ;
rank: 480
score: 99.03573947482639
patch: exp ( exp ( x ) ) ;
rank: 480
score: 99.0338467684659
patch: return $NUMBER$ + exp ( x + x ) ;
rank: 481
score: 99.13260904947917
patch: double 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 481
score: 99.1221923828125
patch: return 0 . $NUMBER$ * exp * 0 . $NUMBER$ ;
rank: 481
score: 99.0983174641927
patch: return 0 . $NUMBER$ * int ( - x ) ;
rank: 481
score: 99.05213512073864
patch: return 0 . $NUMBER$ * exp ( true ) ;
rank: 481
score: 99.0347567471591
patch: exp ( x , 0 . 0 ) ; }
rank: 482
score: 99.12528170072116
patch: return 0 . 1 * exp ( - $NUMBER$ ) ; }
rank: 482
score: 99.12129516601563
patch: return 0 * 0 . $NUMBER$ * x ;
rank: 482
score: 99.0340909090909
patch: if ( x > $NUMBER$ ) . return 0 ;
rank: 482
score: 99.03244850852273
patch: if ( exp ( x ) ; return x ;
rank: 483
score: 99.21073091947116
patch: return 0 . $NUMBER$ * exp ( x ) return 0 ;
rank: 483
score: 99.14832560221355
patch: return 1 . 0 * exp ( x ) ) ;
rank: 483
score: 99.12515024038461
patch: return 0 . size ( ) - exp ( x ) ;
rank: 483
score: 99.03241521661931
patch: if ( 0 == x ) { return 1 ;
rank: 484
score: 99.21010916573661
patch: return 0 + exp ( x ) * exp ( x ) ;
rank: 484
score: 99.14829323508523
patch: return 1 . $NUMBER$ * x ( x ) ;
rank: 484
score: 99.05009321732955
patch: return x . cosh ( x , x ) ;
rank: 485
score: 99.2100830078125
patch: return 0 . $NUMBER$ * exp ( x ) + min ( x ) ;
rank: 485
score: 99.14805094401042
patch: return - 0 . $NUMBER$ * x ( x ) ;
rank: 485
score: 99.13937612680289
patch: return 0 . $NUMBER$ * 0 * exp ( 1 ) ;
rank: 485
score: 99.12508451021634
patch: return 0 . $NUMBER$ * - ( x - x ) ;
rank: 485
score: 99.09720865885417
patch: return += 0 . $NUMBER$ * exp ( x ) ;
rank: 485
score: 99.04961603338069
patch: return 0 . $NUMBER$ * cosh [ x ] ;
rank: 485
score: 99.03255004882813
patch: exp ( exp ( - x ) ) ;
rank: 485
score: 99.0310946377841
patch: if ( x != 0 ) { return 0 ;
rank: 486
score: 99.21007361778847
patch: return 0 . $NUMBER$ * exp ( x ) . ) ;
rank: 486
score: 99.13926344651442
patch: return 0 . 0 / 0 * exp ( x ) ;
rank: 486
score: 99.11979166666667
patch: return 0 . 0 * exp ( x ) ; *
rank: 486
score: 99.0970458984375
patch: return 0 ; } exp ( - x ) ;
rank: 486
score: 99.04908752441406
patch: return ( x , x ) ;
rank: 486
score: 99.03092651367187
patch: return - $NUMBER$ + exp ( x ) ;
rank: 487
score: 99.1246807391827
patch: return 0 . $NUMBER$ * / exp ( - $NUMBER$ ) ;
rank: 487
score: 99.11932927911931
patch: return x . 0 * exp ( x ) ;
rank: 487
score: 99.04707475142045
patch: return 0 . $NUMBER$ ( x , x ) ;
rank: 487
score: 99.02976684570312
patch: return ( Double ) exp ( x ) ;
rank: 487
score: 99.0251131924716
patch: return 0 . $NUMBER$ * $NUMBER$ ( x ) ;
rank: 488
score: 99.13074340820313
patch: return exp ( x ) ; } else {
rank: 488
score: 99.1246337890625
patch: return ( x - x ) / $NUMBER$ . $NUMBER$ ;
rank: 488
score: 99.11869303385417
patch: return 0 . $NUMBER$ * $NUMBER$ exp ( x ) ;
rank: 488
score: 99.09681285511364
patch: return 0 . $NUMBER$ * Math ( x ) ;
rank: 488
score: 99.02861192491319
patch: return 1 + exp ( x ) ;
rank: 489
score: 99.20925467354911
patch: return 0 . $NUMBER$ * exp ( x ) 0 . $NUMBER$ ;
rank: 489
score: 99.1460469563802
patch: value = 0 . 0 * exp ( x ) ;
rank: 489
score: 99.13826810396634
patch: return 0 . 0 / exp ( x ) / $NUMBER$ ;
rank: 489
score: 99.13068181818181
patch: return x - $NUMBER$ / exp ( x ) ;
rank: 489
score: 99.11815388997395
patch: return 0 . $NUMBER$ * x * 0 . 0 ;
rank: 489
score: 99.04352361505681
patch: if ( x >= 0 ) { return x ;
rank: 489
score: 99.02838689630681
patch: return exp ( double ) exp ( x ) ;
rank: 489
score: 99.02236599392361
patch: return 0 . $NUMBER$ * x ; }
rank: 490
score: 99.20774841308594
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 0 ; }
rank: 490
score: 99.1299297626202
patch: result = 0 . $NUMBER$ + exp ( - x ) ;
rank: 490
score: 99.09619140625
patch: return 0 . 0 * ( x , x ) ;
rank: 490
score: 99.04059392755681
patch: return exp ( x , 0 . x ) ;
rank: 490
score: 99.02833140980114
patch: return exp ( exp $NUMBER$ ( x ) ) ;
rank: 490
score: 99.02179565429688
patch: return 0 / exp ( x ) ; }
rank: 491
score: 99.20735168457031
patch: return 0 . 0 * exp ( exp ( x ) , x ) ;
rank: 491
score: 99.12399291992188
patch: return ( x - $NUMBER$ ) / $NUMBER$ . $NUMBER$ ;
rank: 491
score: 99.02793190696023
patch: return Double . value CaMeL Of ( x ) .
rank: 491
score: 99.02179509943181
patch: = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 492
score: 99.12867320667614
patch: return 0 . $NUMBER$ * ( - $NUMBER$ ) ;
rank: 492
score: 99.12396240234375
patch: return 0 . 0 * ( x - $NUMBER$ ) ;
rank: 492
score: 99.11715698242188
patch: return 0 . 0 * x * 0 . $NUMBER$ ;
rank: 492
score: 99.02783203125
patch: } * * / return exp ( x ) ;
rank: 493
score: 99.20682525634766
patch: return exp ( x ) * 0 . 0 * exp ( x ) ;
rank: 493
score: 99.13706461588542
patch: return 0 . $NUMBER$ / exp ( x ) ) ;
rank: 493
score: 99.02717420789931
patch: return exp ( x ) - x ;
rank: 493
score: 99.02168412642045
patch: x = $NUMBER$ * exp ( x ) ; }
rank: 494
score: 99.1237080891927
patch: return 0 . 1 + exp ( - x ) ;
rank: 495
score: 99.20596749441964
patch: return 0 . $NUMBER$ * exp ( x ) 0 . 1 ;
rank: 495
score: 99.12765299479166
patch: return ( double ) 0 . $NUMBER$ * exp ( - x ) ;
rank: 495
score: 99.11636352539062
patch: return 0 . $NUMBER$ * exp ( x ) ; )
rank: 495
score: 99.02536843039773
patch: return 0 + exp ( x ) + x ;
rank: 496
score: 99.13531494140625
patch: return 0 . 0 * exp ( $NUMBER$ ) ; }
rank: 496
score: 99.093994140625
patch: z = 0 . 0 * exp ( x ) ;
rank: 496
score: 99.02536010742188
patch: return 0 . $NUMBER$ + $NUMBER$ . $NUMBER$ ;
rank: 497
score: 99.13323974609375
patch: return 0 . 0 * / exp ( 0 ) ;
rank: 497
score: 99.12750799005681
patch: double $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 497
score: 99.1217510516827
patch: return 0 * 1 . $NUMBER$ * exp ( x ) ;
rank: 497
score: 99.11544799804688
patch: return 0 . $NUMBER$ * 0 * x + x ;
rank: 497
score: 99.0938720703125
patch: return 0 . $NUMBER$ * long ( - x ) ;
rank: 497
score: 99.02532404119319
patch: return 0 * exp ( 0 . 0 ) ;
rank: 498
score: 99.12701416015625
patch: return 0 . $NUMBER$ * exp 1 * exp ( x ) ;
rank: 498
score: 99.12151630108173
patch: return x / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 498
score: 99.11536661783855
patch: return 0 . $NUMBER$ * exp ( ( x ) ;
rank: 498
score: 99.02529074928977
patch: return ( $NUMBER$ * exp ( x ) ) ;
rank: 498
score: 99.01625754616477
patch: return $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 499
score: 99.20400766225961
patch: return 0 . $NUMBER$ * exp ( x + length ) ;
rank: 499
score: 99.1312764485677
patch: return 0 . $NUMBER$ * exp ( x ) * /
rank: 499
score: 99.0931729403409
patch: return 0 . $NUMBER$ * ( x ) ; }
rank: 499
score: 99.02503551136364
patch: return exp ( x ) * $NUMBER$ + x ;
rank: 499
score: 99.01593017578125
patch: return $NUMBER$ + exp ( - x ) ;
rank: 500
score: 99.20396423339844
patch: return 0 * exp ( x ) . 0 / exp ( x ) ;
rank: 500
score: 99.13535563151042
patch: double 0 . $NUMBER$ * / exp ( x ) ;
rank: 500
score: 99.13023885091145
patch: return Double . value CaMeL Of ( x ) . ;
rank: 500
score: 99.11519368489583
patch: return 0 . $NUMBER$ * exp ( x ) ; :
rank: 500
score: 99.0929463704427
patch: return 0 . 0 * exp ( + x ) ;
rank: 500
score: 99.02493286132812
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 ;
rank: 500
score: 99.01451416015625
patch: return x - exp ( - x ) ;
rank: 501
score: 99.12571614583334
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ . 0 ;
rank: 501
score: 99.02444458007812
patch: return 0 . $NUMBER$ + exp ( ) ;
rank: 501
score: 99.01380004882813
patch: return $NUMBER$ - exp ( - x ) ;
rank: 502
score: 99.12911987304688
patch: return 0 . $NUMBER$ * / ( x ) ; }
rank: 502
score: 99.12007962740384
patch: return 0 . $NUMBER$ * $NUMBER$ - exp ( x ) ;
rank: 502
score: 99.1146748860677
patch: return 0 . $NUMBER$ * exp ( x ) . }
rank: 502
score: 99.0135498046875
patch: return $NUMBER$ . $NUMBER$ * exp ( $STRING$ ) ;
rank: 503
score: 99.20364145132211
patch: return 0 * exp ( x ) * 0 + x ;
rank: 503
score: 99.12906901041667
patch: return 0 . 0 $NUMBER$ * exp ( x ) ;
rank: 503
score: 99.125244140625
patch: return 0 . $NUMBER$ * format ( x ) ;
rank: 503
score: 99.11456298828125
patch: return 0 . $NUMBER$ * 0 * exp ( ) ;
rank: 503
score: 99.0237704190341
patch: return 0 * exp ( x ) + 0 ;
rank: 504
score: 99.12685139973958
patch: return $NUMBER$ . 0 * / exp ( x ) ;
rank: 504
score: 99.1194356282552
patch: return 0 . 1 - exp ( - x ) ;
rank: 504
score: 99.1141357421875
patch: return 0 . 0 * exp ( x ) ; else
rank: 504
score: 99.09210205078125
patch: tmp = 0 . $NUMBER$ * exp ( x ) ;
rank: 504
score: 99.02311567826705
patch: return exp ( x + 0 . 0 ) ;
rank: 505
score: 99.13353382457386
patch: = 1 . $NUMBER$ * exp ( x ) ;
rank: 505
score: 99.126708984375
patch: return ( 0 . 0 * exp ( ) ) ;
rank: 505
score: 99.09181722005208
patch: temp = 0 . 0 * exp ( x ) ;
rank: 505
score: 99.03264825994319
patch: x = x + exp ( - x ) ;
rank: 505
score: 99.0227279663086
patch: return 0 . 1 * x ;
rank: 506
score: 99.11775716145833
patch: return 0 . SIZE * exp ( - x ) ;
rank: 506
score: 99.09136962890625
patch: if ( x < 0 ) { return $NUMBER$ ; }
rank: 506
score: 99.02199485085227
patch: return $NUMBER$ . $NUMBER$ * double ( x ) ;
rank: 507
score: 99.1241963704427
patch: return 0 . $NUMBER$ < exp ( - x ) ;
rank: 507
score: 99.03203790838069
patch: return $NUMBER$ * exp ( x ) + x ;
rank: 507
score: 99.02161254882813
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ ;
rank: 508
score: 99.2026138305664
patch: return 0 . $NUMBER$ * exp ( x ) - max ( x ) ;
rank: 508
score: 99.12413441051136
patch: return 0 ; } else return 0 . 0 ;
rank: 508
score: 99.11318969726562
patch: return Double . 0 * exp exp ( x ) ;
rank: 508
score: 99.03142755681819
patch: if ( x >= $NUMBER$ ) { return x ;
rank: 508
score: 99.02086292613636
patch: return 0 + exp ( x ) . x ;
rank: 509
score: 99.11654663085938
patch: return $NUMBER$ . $NUMBER$ * exp ( - 1 ) ;
rank: 509
score: 99.11313205295139
patch: return 0 . abs ( x ) ;
rank: 509
score: 99.00490112304688
patch: x = 0 * exp ( x ) ;
rank: 510
score: 99.20189666748047
patch: return 1 . $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 510
score: 99.12379557291666
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + $NUMBER$ . $NUMBER$ ;
rank: 510
score: 99.12319946289062
patch: return 0 . 0 * exp ( 0 ) ; }
rank: 510
score: 99.11280406605114
patch: return 0 . exp ( x , x ) ;
rank: 510
score: 99.02915649414062
patch: return 1 * exp ( - x ) ;
rank: 511
score: 99.11251220703124
patch: return 0 . $NUMBER$ . ( x ) ;
rank: 511
score: 99.08843994140625
patch: cosh = 0 . $NUMBER$ * exp ( x ) ;
rank: 511
score: 99.0201416015625
patch: return 0 . 0 * value ( x ) ;
rank: 512
score: 99.20082092285156
patch: return 0 . 1 * exp ( x + exp ( x ) ) ;
rank: 512
score: 99.12991333007812
patch: return 0 . 0 * ( 0 . 0 ) ;
rank: 512
score: 99.0198974609375
patch: return 0 * exp ( x ) / x ;
rank: 512
score: 99.00264115767045
patch: return $NUMBER$ . 0 / exp ( x ) ;
rank: 513
score: 99.12186976841518
patch: return 0 . $NUMBER$ * exp 1 / exp ( x ) ;
rank: 513
score: 99.1209716796875
patch: if ( x < $NUMBER$ ) { return $NUMBER$ ; }
rank: 513
score: 99.11134847005208
patch: return 0 . $NUMBER$ * exp ( x ) ; $NUMBER$
rank: 513
score: 99.01908735795455
patch: return 0 * exp ( x + 0 ) ;
rank: 513
score: 99.00237482244319
patch: if ( x < $NUMBER$ ) . return 0 ;
rank: 514
score: 99.19827974759616
patch: return 0 . $NUMBER$ * exp ( x , start ) ;
rank: 514
score: 99.12945556640625
patch: double CaMeL Value ( ) ; return 0 . 0 ;
rank: 514
score: 99.1146240234375
patch: return 0 . $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 514
score: 99.11080932617188
patch: return 0 . $NUMBER$ * ( x ) * $NUMBER$ ;
rank: 514
score: 99.01826307508681
patch: return exp ( 0 . $NUMBER$ ) ;
rank: 514
score: 99.0021240234375
patch: return $NUMBER$ / exp ( x ) ; }
rank: 515
score: 99.11984252929688
patch: return - 0 . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 515
score: 99.08656819661458
patch: return 0 . Math * exp ( - x ) ;
rank: 515
score: 99.02771606445313
patch: return 0 . $NUMBER$ * x + x ;
rank: 516
score: 99.1143310546875
patch: return 0 * exp ( - $NUMBER$ ) ;
rank: 516
score: 99.10963270399306
patch: return 0 . $NUMBER$ * ( x ;
rank: 516
score: 99.08651733398438
patch: break 0 . $NUMBER$ * exp ( - x ) ;
rank: 516
score: 99.02696644176136
patch: return 0 . $NUMBER$ * $NUMBER$ * - x ;
rank: 516
score: 99.017822265625
patch: return 0 + exp ( x ) / $NUMBER$ ;
rank: 516
score: 99.00156471946023
patch: return / $NUMBER$ * exp ( - x ) ;
rank: 517
score: 99.12068684895833
patch: z return 0 . $NUMBER$ * exp ( x ) ;
rank: 517
score: 99.11953125
patch: return 0 ; } return 0 . 0 ;
rank: 517
score: 99.0267001065341
patch: x = exp ( - x + x ) ;
rank: 517
score: 99.01776677911931
patch: return false . $NUMBER$ * exp ( x ) ;
rank: 517
score: 99.00154252485795
patch: return $NUMBER$ / exp ( x , 0 ) ;
rank: 518
score: 99.12777709960938
patch: return 0 . 0 * $NUMBER$ * 0 . $NUMBER$ ;
rank: 518
score: 99.10898844401042
patch: return 0 . $NUMBER$ . $NUMBER$ * x * x ;
rank: 518
score: 99.0176114169034
patch: return 0 * exp ( x ) * 1 ;
rank: 518
score: 99.00112082741477
patch: exp ( x , 0 . $NUMBER$ ) ; }
rank: 519
score: 99.1202901204427
patch: return double $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 519
score: 99.11880493164062
patch: if ( x < $NUMBER$ ) { return 1 ; }
rank: 520
score: 99.1099141438802
patch: return 0 . $NUMBER$ * ( - - x ) ;
rank: 520
score: 99.025634765625
patch: return 0 . $NUMBER$ double ( - x ) ;
rank: 520
score: 99.01746715198864
patch: return 0 . $NUMBER$ * hash ( x ) ;
rank: 520
score: 99.00049438476563
patch: return ( 0 . $NUMBER$ , x ) ;
rank: 521
score: 99.12605794270833
patch: return 0 . 0 * Double . Na CaMeL N ;
rank: 521
score: 99.11994280133929
patch: return ( 0 . $NUMBER$ + exp ( - x ) ) ;
rank: 521
score: 99.11684163411458
patch: return x ; } else { return 0 . 0 ;
rank: 521
score: 99.02557927911931
patch: return $NUMBER$ . $NUMBER$ * exp ( 0 ) ;
rank: 521
score: 99.01720081676136
patch: return 0 . $NUMBER$ + value ( x ) ;
rank: 522
score: 99.19606370192308
patch: return 0 * x . $NUMBER$ * exp ( x ) ;
rank: 522
score: 99.12561907087054
patch: double CaMeL Value ( ) ;
rank: 522
score: 99.11613325639205
patch: return Double . Na CaMeL N ( x ) ;
rank: 522
score: 99.1087313565341
patch: return 0 . 1 - exp ( x ) ;
rank: 522
score: 99.10688018798828
patch: return 0 * 0 . $NUMBER$ ;
rank: 522
score: 99.08351643880208
patch: = 0 . 0 * exp ( - x ) ;
rank: 522
score: 99.02538384331598
patch: x += exp ( - x ) ;
rank: 522
score: 99.01702880859375
patch: return 0 . $NUMBER$ * x )
rank: 522
score: 99.0002108487216
patch: if ( x > 0 ) . return 0 ;
rank: 523
score: 99.1195068359375
patch: pos = 0 . $NUMBER$ * exp ( x ) ;
rank: 523
score: 99.10818481445312
patch: return 0 . $NUMBER$ * ( 1 . 0 ) ;
rank: 523
score: 99.10684204101562
patch: return exp ( x ) ; return 0 ;
rank: 523
score: 99.01589965820312
patch: return - 0 + exp ( x ) ;
rank: 524
score: 99.11913248697917
patch: return 0 . 0 * exp ( - x ) ; } else {
rank: 524
score: 99.11531575520833
patch: return 0 . $NUMBER$ ; } else { return x ;
rank: 524
score: 99.10692596435547
patch: return ( x - x ) ;
rank: 524
score: 99.1061279296875
patch: return Double . $NUMBER$ * ( x ) ;
rank: 524
score: 99.02449951171874
patch: x = exp ( x , 0 ) ;
rank: 524
score: 99.01487426757812
patch: if ( 0 == x ) return x ;
rank: 524
score: 98.99744762073864
patch: x = $NUMBER$ / exp ( - x ) ;
rank: 525
score: 99.12335759943181
patch: return 0 * exp ( x / $NUMBER$ ) ;
rank: 525
score: 99.11912434895834
patch: return 0 . $NUMBER$ * exp ( x ) = 0 . $NUMBER$ ;
rank: 525
score: 99.11505126953125
patch: return ( 0 . $NUMBER$ * exp ( ) ) ;
rank: 526
score: 99.19430106026786
patch: return $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 526
score: 99.12282307942708
patch: long return 0 . $NUMBER$ * exp ( x ) ;
rank: 526
score: 99.11888834635417
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - $NUMBER$ . $NUMBER$ ;
rank: 526
score: 99.11451305042614
patch: return 0 ; } else return 0 . $NUMBER$ ;
rank: 526
score: 99.08168538411458
patch: return 0 . $NUMBER$ * x double ( x ) ;
rank: 526
score: 99.02044122869319
patch: return ( 0 . 0 , - x ) ;
rank: 526
score: 99.0146484375
patch: return 0 = x * exp ( x ) ;
rank: 527
score: 99.19346266526442
patch: return 0 . $NUMBER$ * exp ( x ) + ) ;
rank: 527
score: 99.1224873860677
patch: return 0 . $NUMBER$ [ exp ( x ) ] ;
rank: 527
score: 99.11876331676136
patch: return ( double ) exp ( - x ) ;
rank: 527
score: 99.11424671519886
patch: return - 0 . $NUMBER$ * exp ( ) ;
rank: 527
score: 99.02041286892361
patch: return ( x , - x ) ;
rank: 527
score: 99.01429332386364
patch: if ( x == x ) { return x ;
rank: 527
score: 98.99475708007813
patch: if ( x > 0 ) return 0 ;
rank: 528
score: 99.12241821289062
patch: return 0 . 0 * 0 * x ;
rank: 528
score: 99.11873002485795
patch: return exp ( exp ( - $NUMBER$ ) ) ;
rank: 528
score: 99.1137186686198
patch: return 0 . 0 * exp ( ) / $NUMBER$ ;
rank: 528
score: 99.10538330078126
patch: return 0 . $NUMBER$ * exp ( x .
rank: 528
score: 99.01426188151042
patch: return 0 ; exp ( x ) ;
rank: 529
score: 99.19243915264423
patch: return 0 . $NUMBER$ * exp ( x ) return 1 ;
rank: 529
score: 99.11722819010417
patch: return 0 . 0 * exp ( exp ( - $NUMBER$ ) ) ;
rank: 529
score: 99.1051025390625
patch: return 0 . 0 * x exp ( x ) ;
rank: 529
score: 99.10469563802083
patch: return 0 . $NUMBER$ - exp ( x ) ; }
rank: 529
score: 99.0137051669034
patch: return $NUMBER$ * exp ( x ) - x ;
rank: 530
score: 99.11924235026042
patch: return ( x ) . double CaMeL Value ( ) ;
rank: 530
score: 99.10509033203125
patch: return 0 . $NUMBER$ * exp ( 0 ;
rank: 530
score: 99.08069957386364
patch: return 0 . Math * exp ( x ) ;
rank: 530
score: 99.0126620205966
patch: if ( x == 0 ) { return 1 ;
rank: 531
score: 99.11692457932692
patch: double cosh = 0 . $NUMBER$ * exp ( x ) ;
rank: 531
score: 99.10496937144886
patch: return 0 . $NUMBER$ ) exp ( x ) ;
rank: 531
score: 99.10245768229167
patch: return 0 . $NUMBER$ * ( x ) - x ;
rank: 531
score: 99.0802714029948
patch: return exp ( x , exp ( 0 ) ) ;
rank: 531
score: 99.01725630326705
patch: x = x . cosh ( - x ) ;
rank: 532
score: 99.11593288845486
patch: return ( ( double ) x ) ;
rank: 532
score: 99.102294921875
patch: return 1 . $NUMBER$ * ( x - x ) ;
rank: 532
score: 99.08006795247395
patch: return 0 . $NUMBER$ * Math ( - x ) ;
rank: 532
score: 99.01636352539063
patch: x = exp ( x + x ) ;
rank: 532
score: 99.0120516690341
patch: exp ( x + exp ( x ) ) ;
rank: 533
score: 99.10409884982639
patch: return $NUMBER$ . exp ( x ) ;
rank: 533
score: 99.01137966579861
patch: result = 0 . $NUMBER$ * x ;
rank: 534
score: 99.19109637920673
patch: return 0 . 0 * exp ( x , 1 ) ;
rank: 534
score: 99.10409545898438
patch: return 0 . $NUMBER$ * $NUMBER$ * x * x ;
rank: 534
score: 99.0796610514323
patch: return 0 > $NUMBER$ * exp ( - x ) ;
rank: 534
score: 99.01109730113636
patch: try { return 0 * exp ( x ) ;
rank: 535
score: 99.11623128255208
patch: return 0 . $NUMBER$ * ( ( x ) ) ;
rank: 535
score: 99.11423903245192
patch: return 0 . $NUMBER$ * ( x ) ; } else {
rank: 535
score: 99.10120239257813
patch: return 0 . 0 * HEX _ $NUMBER$ ;
rank: 535
score: 99.0143310546875
patch: return 0 . ( x , x ) ;
rank: 535
score: 99.01099742542614
patch: return exp ( x ) * 0 . 1 ;
rank: 536
score: 99.1112060546875
patch: return 0 . $NUMBER$ double * exp ( x ) ;
rank: 536
score: 99.10403442382812
patch: return ( 0 . $NUMBER$ * x ) * x ;
rank: 536
score: 99.01015625
patch: result = 0 * exp ( x ) ;
rank: 536
score: 98.98651123046875
patch: if ( x > $NUMBER$ ) return 0 ;
rank: 537
score: 99.11611938476562
patch: return - 1 * exp ( x ) ;
rank: 537
score: 99.1135009765625
patch: return 0 . $NUMBER$ * x - $NUMBER$ / exp ( x ) ;
rank: 537
score: 99.11110432942708
patch: return Double . value CaMeL Of ( x ) ; }
rank: 537
score: 99.10402425130208
patch: return 0 . 0 * 0 * 0 . $NUMBER$ ;
rank: 537
score: 99.01205444335938
patch: return ( x + x ) ;
rank: 537
score: 99.01009368896484
patch: return 0 . $NUMBER$ + $NUMBER$ ;
rank: 538
score: 99.1906026204427
patch: return 0 * exp ( x ) [ 0 ] ;
rank: 538
score: 99.1160176595052
patch: return 0 . $NUMBER$ * Double . MAX _ VALUE ;
rank: 538
score: 99.11333821614583
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ; } else
rank: 538
score: 99.09932454427083
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 ) ;
rank: 538
score: 99.009521484375
patch: return exp ( x ) * x * x ;
rank: 538
score: 98.98562282986111
patch: temp = new double [ $NUMBER$ ] ;
rank: 539
score: 99.1154276529948
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 539
score: 99.10277210582386
patch: return 0 . $NUMBER$ * exp ( x ) +
rank: 539
score: 99.0094327059659
patch: return 0 . $NUMBER$ * long ( x ) ;
rank: 540
score: 99.19048602764423
patch: return 0 = 0 . 0 * exp ( x ) ;
rank: 540
score: 99.11534534801136
patch: return 0 . 0 * float ( x ) ;
rank: 540
score: 99.10038618607955
patch: return 0 . $NUMBER$ ; return 0 . $NUMBER$ ;
rank: 540
score: 99.0106201171875
patch: return 0 . $NUMBER$ * exp [ x ] ;
rank: 540
score: 99.00926624644886
patch: return exp ( x ) * $NUMBER$ * x ;
rank: 541
score: 99.11488850911458
patch: double return 1 . $NUMBER$ * exp ( x ) ;
rank: 541
score: 99.11224772135417
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ; }
rank: 541
score: 99.10967462713069
patch: return 0 . 0 / x ( x ) ;
rank: 541
score: 99.0992764559659
patch: return 0 . 0 * exp ( x ) )
rank: 541
score: 99.0978291829427
patch: return double 0 . $NUMBER$ * exp ( x ) ;
rank: 541
score: 99.07607014973958
patch: return $NUMBER$ . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 541
score: 99.00858764648437
patch: return 0 . $NUMBER$ ? exp ( x )
rank: 542
score: 99.18990384615384
patch: return 0 + 0 . 1 * exp ( x ) ;
rank: 542
score: 99.09888805042614
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) .
rank: 542
score: 99.09654744466145
patch: { return 1 . $NUMBER$ * exp ( x ) ;
rank: 542
score: 98.98185591264205
patch: return cosh ( x , 0 . 0 ) ;
rank: 543
score: 99.18990384615384
patch: return 0 . $NUMBER$ * exp ( x ) . value ;
rank: 543
score: 99.11346435546875
patch: double CaMeL Value ( ) * exp ( x ) ;
rank: 543
score: 99.11026204427084
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; } else {
rank: 543
score: 99.10879516601562
patch: return 0 . $NUMBER$ * exp ( ) + 1 ;
rank: 543
score: 99.00869140625
patch: exp ( - x ) ; return 0 ;
rank: 544
score: 99.18929349459134
patch: return 0 . 0 * exp ( x ) >> $NUMBER$ ;
rank: 544
score: 99.09709028764205
patch: return 0 . Double * exp ( x ) ;
rank: 544
score: 99.0737813313802
patch: return 0 . $NUMBER$ * byte ( - x ) ;
rank: 544
score: 99.00767822265625
patch: return 0 * 0 . $NUMBER$ * $NUMBER$ ;
rank: 544
score: 98.97963256835938
patch: if ( x < 0 ) return 0 ;
rank: 545
score: 99.18865497295673
patch: return exp ( x ) * 0 . $NUMBER$ * x ;
rank: 545
score: 99.10908726283482
patch: return ( 1 . $NUMBER$ * exp ( - x ) ) ;
rank: 545
score: 99.10863240559895
patch: return 0 . 0 * / exp ( $NUMBER$ ) ;
rank: 545
score: 99.09302775065105
patch: return 0 . 0 * exp ( - 0 ) ;
rank: 545
score: 99.00734641335227
patch: return exp ( x , 0 + x ) ;
rank: 545
score: 98.97725053267045
patch: return 0 + exp ( - x ) ; }
rank: 546
score: 99.18856107271634
patch: return 0 return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 546
score: 99.10841471354166
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ / x ;
rank: 546
score: 99.09274291992188
patch: return - $NUMBER$ . 1 * exp ( x ) ;
rank: 546
score: 99.07220458984375
patch: return + 0 . $NUMBER$ * exp ( x ) ;
rank: 546
score: 99.00644753196023
patch: return Float . $NUMBER$ * exp ( x ) ;
rank: 546
score: 99.00623236762152
patch: return 0 * exp ( $NUMBER$ ) ;
rank: 547
score: 99.09373890269886
patch: return 0 . exp * exp ( x ) ;
rank: 547
score: 99.0925801595052
patch: return 1 . $NUMBER$ * - exp ( x ) ;
rank: 547
score: 99.0061922940341
patch: if ( x < x ) { return 0 ;
rank: 547
score: 98.97658469460227
patch: return 0 - exp ( - x ) ; }
rank: 548
score: 99.18651234019886
patch: return 0 = 0 * exp ( x ) ;
rank: 548
score: 99.1083984375
patch: synchronized ( 0 ) { return 0 . 0 ; }
rank: 548
score: 99.10746547154018
patch: return x - 0 . 0 * exp ( - x ) ;
rank: 549
score: 99.1862323467548
patch: return 0 . $NUMBER$ * exp ( x ) - ) ;
rank: 549
score: 99.11090698242188
patch: return 0 . $NUMBER$ + ( x ) ;
rank: 549
score: 99.10824584960938
patch: return 0 . $NUMBER$ ; * exp ( x ) ;
rank: 549
score: 99.10743001302083
patch: return 0 . $NUMBER$ * exp ( exp ( - 1 ) ) ;
rank: 549
score: 99.09134928385417
patch: return 0 . $NUMBER$ * exp ( - this ) ;
rank: 549
score: 99.09119762073864
patch: return 0 . 0 * exp ( x ) *
rank: 549
score: 99.00436740451389
patch: return Double . max ( x ) ;
rank: 550
score: 99.11033121744792
patch: return 0 . 0 ; x = 0 . 0 ;
rank: 550
score: 99.10735677083333
patch: return 0 . $NUMBER$ * exp ( - ( - $NUMBER$ ) ) ;
rank: 550
score: 99.1070556640625
patch: return 0 . 0 * exp ( x ) * ;
rank: 550
score: 99.07069905598958
patch: return ( x , exp ( - x ) ) ;
rank: 550
score: 99.00414428710937
patch: return 0 . $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 551
score: 99.11026000976562
patch: return 1 . $NUMBER$ * exp ( double ) x ;
rank: 551
score: 99.10703531901042
patch: return 0 . $NUMBER$ * Double . Na CaMeL N ;
rank: 551
score: 99.09017333984374
patch: return $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 551
score: 99.08986594460227
patch: return 0 . exp ( x ) * x ;
rank: 551
score: 99.07029215494792
patch: return 0 . 0 * new double [ x ] ;
rank: 551
score: 99.0043057528409
patch: return $NUMBER$ . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 551
score: 99.0038330078125
patch: return 0 . 0 + 0 . $NUMBER$ ;
rank: 551
score: 98.97374378551136
patch: return Integer . 1 * exp ( x ) ;
rank: 552
score: 99.10659790039062
patch: return x ; } else { return 0 . $NUMBER$ ;
rank: 552
score: 99.08925559303977
patch: return 0 * ( exp ( x ) ) ;
rank: 552
score: 99.003564453125
patch: return 0 . $NUMBER$ * $NUMBER$ . 1 ;
rank: 553
score: 99.10694986979166
patch: return 0 . $NUMBER$ * exp ( - ( double ) x ) ;
rank: 553
score: 99.08971150716145
patch: return 0 * exp ( - x ) - x ;
rank: 553
score: 99.0885009765625
patch: return 0 . $NUMBER$ * ( x ) ; ;
rank: 553
score: 99.0697530110677
patch: return 0 . $NUMBER$ * new Integer ( x ) ;
rank: 553
score: 99.00360662286931
patch: return 0 . ( x , - x ) ;
rank: 554
score: 99.08828125
patch: return 0 . 0 * 0 . $NUMBER$ ;
rank: 554
score: 99.00217692057292
patch: return 0 * value ( x ) ;
rank: 555
score: 99.10678536551339
patch: return x ; } if ( x > 0 . 0 ) {
rank: 555
score: 99.1059061686198
patch: if ( x ) { return 0 . $NUMBER$ ; }
rank: 555
score: 99.08811257102273
patch: return Double . x * exp ( x ) ;
rank: 556
score: 99.18409220377605
patch: return 0 . $NUMBER$ * exp ( x ) + ;
rank: 556
score: 99.10584513346355
patch: v = 0 . $NUMBER$ * exp ( x ) ;
rank: 556
score: 99.10500081380208
patch: if ( x ) { return 0 . 0 ; }
rank: 556
score: 99.08877563476562
patch: return $NUMBER$ . 1 * exp ( x ) ; }
rank: 556
score: 99.08750221946023
patch: return ( x ) . exp ( x ) ;
rank: 556
score: 99.00092163085938
patch: return 0 * exp ( double ) x ;
rank: 557
score: 99.18378155048077
patch: return 0 . $NUMBER$ * exp ( x ) return $NUMBER$ ;
rank: 557
score: 99.10414817116477
patch: return Integer . value CaMeL Of ( x ) ;
rank: 557
score: 99.00093383789063
patch: return exp ( - x ) + x ;
rank: 557
score: 99.00069754464286
patch: return 0 [ x ] ;
rank: 557
score: 98.97195773654514
patch: return x - exp ( x ) ;
rank: 558
score: 99.10888671875
patch: return 1 . 0 + exp ( x ) ;
rank: 558
score: 99.10553385416667
patch: return 0 . 0 . $NUMBER$ * exp ( - x ) ; }
rank: 558
score: 99.00067901611328
patch: } return exp ( x ) ;
rank: 558
score: 98.99819113991477
patch: x = exp ( x , - x ) ;
rank: 558
score: 98.97124689275569
patch: exp ( exp ( x , 0 ) ) ;
rank: 559
score: 99.18323692908653
patch: return 0 * 0 . $NUMBER$ / exp ( x ) ;
rank: 559
score: 99.10800170898438
patch: double CaMeL Value ( x , x ) ;
rank: 559
score: 99.10525948660714
patch: return $NUMBER$ * 0 . $NUMBER$ * exp ( - x ) ;
rank: 559
score: 99.1025390625
patch: return 0 . 0 * exp ( x * x ;
rank: 559
score: 99.08626708984374
patch: return $NUMBER$ * exp exp ( x ) ;
rank: 559
score: 99.08615112304688
patch: . return 0 . 1 * exp ( x ) ;
rank: 559
score: 99.0005126953125
patch: if ( x == 0 ) return $NUMBER$ ;
rank: 559
score: 98.9979248046875
patch: return ( 0 . $NUMBER$ , - x ) ;
rank: 560
score: 98.99772505326705
patch: return 0 . / exp ( - x ) ;
rank: 561
score: 99.1018575032552
patch: return 0 . $NUMBER$ * exp ( 1 ) ; }
rank: 561
score: 99.06526692708333
patch: return exp ( x , 0 . 0 , ) ;
rank: 561
score: 98.99705810546875
patch: return 0 . $NUMBER$ + 0 . 1 ;
rank: 561
score: 98.96842041015626
patch: return ( 0 . 0 , x ) ;
rank: 562
score: 99.10678100585938
patch: double CaMeL Value ( ) ; return 0 . $NUMBER$ ;
rank: 562
score: 99.10276692708334
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ / x ;
rank: 562
score: 99.08533824573864
patch: return 0 . $NUMBER$ * exp ( x , ;
rank: 562
score: 98.99691162109374
patch: return 0 . 0 . $NUMBER$ * x ;
rank: 562
score: 98.9964932528409
patch: return 0 + exp ( x , 0 ) ;
rank: 562
score: 98.96792602539062
patch: temp ( x , 0 . 0 ) ;
rank: 563
score: 99.18218122209821
patch: return 0 * exp ( exp ( x ) + x ) ;
rank: 563
score: 99.10624556107955
patch: return 1 . 0 * x ( x ) ;
rank: 563
score: 99.1027099609375
patch: return 0 . $NUMBER$ * exp ( exp ( - 0 ) ) ;
rank: 563
score: 99.08484996448864
patch: return 0 . $NUMBER$ * round ( x ) ;
rank: 563
score: 99.06470836292614
patch: return ( exp ( x , 0 ) ) ;
rank: 563
score: 98.99687364366319
patch: return exp ( 0 . 0 ) ;
rank: 563
score: 98.99443359375
patch: return 0 . $NUMBER$ double ( x ) ;
rank: 563
score: 98.96741333007813
patch: return 0 . $NUMBER$ * - x ; }
rank: 564
score: 99.10499064127605
patch: return 0 . 0 ; } else { return x ;
rank: 564
score: 99.10266985212054
patch: return 0 . $NUMBER$ + exp ( x ) ; } else {
rank: 564
score: 99.09998575846355
patch: return - 0 . $NUMBER$ * / ( x ) ;
rank: 564
score: 99.08432839133523
patch: return 0 . $NUMBER$ * exp 0 * x ;
rank: 564
score: 98.99563259548611
patch: return 0 == exp ( x ) ;
rank: 564
score: 98.99301979758523
patch: return exp ( x , x . x ) ;
rank: 564
score: 98.9631103515625
patch: if ( x < $NUMBER$ ) return 0 ;
rank: 565
score: 99.18100210336539
patch: return 0 . $NUMBER$ + exp ( x + $NUMBER$ ) ;
rank: 565
score: 99.10474853515625
patch: return 1 . 0 * ( x ) ;
rank: 565
score: 99.08240763346355
patch: return 0 . 0 / exp ( - $NUMBER$ ) ;
rank: 565
score: 98.99551391601562
patch: return 0 . $NUMBER$ . 1 * x ;
rank: 565
score: 98.99277954101562
patch: x = 0 . $NUMBER$ * - x ;
rank: 566
score: 99.18088003305289
patch: return 0 * exp ( x + x ) * x ;
rank: 566
score: 99.10443115234375
patch: return 0 . $NUMBER$ * x * x / x ;
rank: 566
score: 99.10222516741071
patch: return 0 , 0 . $NUMBER$ * exp ( - x ) ;
rank: 566
score: 99.0986661044034
patch: return Double . float CaMeL Value ( x ) ;
rank: 566
score: 99.08154296875
patch: return ( x , exp ( x ) ) ;
rank: 566
score: 98.99383544921875
patch: } else { return exp ( x ) ;
rank: 566
score: 98.99241333007812
patch: return x . exp ( - x ) ;
rank: 567
score: 99.10288307883523
patch: return - 1 . $NUMBER$ * ( x ) ;
rank: 567
score: 99.10215407151442
patch: return ( exp ( x ) ) / 0 . $NUMBER$ ;
rank: 567
score: 99.09776814778645
patch: return 0 . 0 * exp ( x ) / ;
rank: 567
score: 99.08158365885417
patch: return $NUMBER$ . $NUMBER$ * * exp ( x ) ;
rank: 567
score: 99.08133544921876
patch: return 0 * 0 . $NUMBER$ * 0 ;
rank: 567
score: 98.99361165364583
patch: return x + exp ( x ) ;
rank: 567
score: 98.95992024739583
patch: return - x ; }
rank: 568
score: 99.18015700120192
patch: return 0 . $NUMBER$ * exp ( x ) . length ;
rank: 568
score: 99.102099609375
patch: return ( x ) / 0 . $NUMBER$ * exp ( x ) ;
rank: 568
score: 98.99199829101562
patch: return 0 . $NUMBER$ * x . $NUMBER$ ;
rank: 568
score: 98.959375
patch: = $NUMBER$ * exp ( - x ) ;
rank: 569
score: 99.1019287109375
patch: return 0 . $NUMBER$ * exp / ( x ) ;
rank: 569
score: 99.10084228515625
patch: return 0 [ exp ( x ) ] ;
rank: 569
score: 99.0800448330966
patch: return 0 . exp ( x * x ) ;
rank: 569
score: 98.99127197265625
patch: } return 0 + exp ( x ) ;
rank: 569
score: 98.95823838975694
patch: return - exp ( - x ) ;
rank: 570
score: 99.10161481584821
patch: return - ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 570
score: 99.09740101207386
patch: return x . $NUMBER$ / exp ( x ) ;
rank: 570
score: 99.07640491832386
patch: return ( 0 . $NUMBER$ * x ) ) ;
rank: 570
score: 98.98866102430556
patch: return 0 . $NUMBER$ * x ; ;
rank: 571
score: 99.09719016335227
patch: return 0 . $NUMBER$ * / exp ( x ;
rank: 571
score: 99.07872517903645
patch: return Integer . 1 * exp ( - x ) ;
rank: 571
score: 99.07586115056819
patch: return 0 . $NUMBER$ * exp $NUMBER$ * x ;
rank: 571
score: 99.06029663085937
patch: return 0 . max ( - x ) ;
rank: 572
score: 99.09665749289773
patch: return 0 * 0 / exp ( x ) ;
rank: 572
score: 99.06029163707386
patch: += 0 . 0 * exp ( x ) ;
rank: 572
score: 98.95621066623264
patch: exp ( x , x ) ; }
rank: 573
score: 99.1004305752841
patch: return 0 . $NUMBER$ * exp ; } else {
rank: 573
score: 99.0962246981534
patch: return - 0 . 0 * ( x ) ;
rank: 573
score: 99.07757568359375
patch: return $NUMBER$ . $NUMBER$ * ( x - $NUMBER$ ) ;
rank: 573
score: 98.98964621803977
patch: if ( x > 1 ) { return 0 ;
rank: 573
score: 98.95203314887152
patch: return $NUMBER$ - exp ( x ) ;
rank: 574
score: 99.096142578125
patch: return x . long CaMeL Value ( ) ;
rank: 574
score: 99.09593616832386
patch: = 1 . 0 * exp ( x ) ;
rank: 574
score: 99.07725016276042
patch: return 0 . $NUMBER$ . - exp ( x ) ;
rank: 574
score: 99.07520141601563
patch: return 0 * exp ( x ) ; /
rank: 574
score: 99.05905983664773
patch: return 0 . $NUMBER$ * exp ( max ) ;
rank: 574
score: 98.98385281032986
patch: return exp ( x ) + x ;
rank: 574
score: 98.95111694335938
patch: return $NUMBER$ . $NUMBER$ * exp ( x ;
rank: 575
score: 99.17745267427884
patch: return 0 = 0 . 1 * exp ( x ) ;
rank: 575
score: 99.10033069957386
patch: return 0 . $NUMBER$ * x ; } else {
rank: 575
score: 99.09583629261364
patch: return Double . MIN _ VALUE ( x ) ;
rank: 575
score: 98.98369140625
patch: return $NUMBER$ . $NUMBER$ * exp ( x )
rank: 576
score: 99.17728365384616
patch: return 0 . $NUMBER$ * exp ( x + start ) ;
rank: 576
score: 99.09576416015625
patch: if ( x < x ) { return 0 ; }
rank: 576
score: 99.0736416903409
patch: return 0 . exp ( x + x ) ;
rank: 576
score: 98.9818359375
patch: return 0 . $NUMBER$ * x ( x )
rank: 577
score: 99.0751953125
patch: return Double . 0 * exp ( - x ) ;
rank: 577
score: 99.0564852627841
patch: return Math . 0 * exp ( x ) ;
rank: 577
score: 98.98114624023438
patch: return 0 . $NUMBER$ + exp ( x )
rank: 578
score: 99.09981863839286
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ) ; }
rank: 578
score: 99.0952657063802
patch: return 0 . $NUMBER$ . $NUMBER$ exp ( x ) ;
rank: 578
score: 99.0899991122159
patch: return 0 . $NUMBER$ x exp ( x ) ;
rank: 578
score: 98.98074340820312
patch: return 0 . $NUMBER$ : 1 . $NUMBER$ ;
rank: 578
score: 98.94053344726562
patch: if ( x <= 0 ) return 0 ;
rank: 579
score: 99.17604417067308
patch: return 0 . $NUMBER$ * min ( x , x ) ;
rank: 579
score: 99.0747578938802
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) ;
rank: 579
score: 98.98687065972223
patch: return ( - x - x ) ;
rank: 579
score: 98.98047485351563
patch: return 0 . $NUMBER$ * $NUMBER$ . 0 ;
rank: 580
score: 99.0941162109375
patch: return 0 ; } else { return 0 . 1 ;
rank: 580
score: 99.06946910511364
patch: return ( x . exp ( x ) ) ;
rank: 580
score: 99.05173561789773
patch: return 0 . $NUMBER$ * exp ( name ) ;
rank: 580
score: 98.98607381184895
patch: return 0 - x ;
rank: 580
score: 98.97982788085938
patch: return 0 . $NUMBER$ . $NUMBER$ * x )
rank: 580
score: 98.93702392578125
patch: return / $NUMBER$ * exp ( x ) ;
rank: 581
score: 99.09949747721355
patch: return - $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 581
score: 99.09407182173295
patch: return 0 . $NUMBER$ . 0 ( x ) ;
rank: 581
score: 99.06944691051136
patch: return 0 . $STRING$ * exp ( x ) ;
rank: 581
score: 98.98589533025569
patch: return 0 . ( exp ( x ) ) ;
rank: 581
score: 98.97979736328125
patch: return 0 ; return exp ( x ) ;
rank: 581
score: 98.936181640625
patch: x = $NUMBER$ / exp ( x ) ;
rank: 582
score: 99.09934303977273
patch: double 1 . $NUMBER$ * exp ( x ) ;
rank: 582
score: 99.09401448567708
patch: return 0 . 0 * exp ( x - x ;
rank: 582
score: 99.05150257457386
patch: return 0 . $NUMBER$ * x * - x ;
rank: 582
score: 98.97944471571181
patch: return Double . abs ( x ) ;
rank: 583
score: 99.17391263521634
patch: if ( x == 0 ) { return 0 . $NUMBER$ ;
rank: 583
score: 99.06799926757813
patch: return 0 . $NUMBER$ * exp * x ;
rank: 583
score: 98.985595703125
patch: return 0 . $NUMBER$ cosh ( x ) ;
rank: 583
score: 98.97905883789062
patch: return 0 . $NUMBER$ * x . 1 ;
rank: 584
score: 99.09886067708334
patch: return ( 0 . $NUMBER$ * exp ( x ) - $NUMBER$ ) ;
rank: 584
score: 99.09365844726562
patch: return 0 $NUMBER$ . 0 * exp ( x ) ;
rank: 584
score: 99.08762428977273
patch: return 0 . $NUMBER$ double CaMeL Value ( ) ;
rank: 584
score: 99.07204182942708
patch: return 0 . 1 * / exp ( x ) ;
rank: 584
score: 98.98430786132812
patch: return exp ( - x , 0 ) ;
rank: 584
score: 98.93355712890624
patch: return 0 - exp ( x ) ; }
rank: 585
score: 99.17344313401442
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , 0 ) ;
rank: 585
score: 99.09813435872395
patch: res = 0 . $NUMBER$ * exp ( x ) ;
rank: 585
score: 99.09325062144886
patch: return 0 . $NUMBER$ / exp ( 1 ) ;
rank: 585
score: 99.07203165690105
patch: return 0 . $NUMBER$ * / ( - x ) ;
rank: 585
score: 99.06470836292614
patch: return 0 * exp exp exp ( x ) ;
rank: 585
score: 99.0492831143466
patch: return 0 . $NUMBER$ * read ( x ) ;
rank: 585
score: 98.9765869140625
patch: return 0 . get CaMeL Value ( ) ;
rank: 585
score: 98.93311767578125
patch: return 0 . $NUMBER$ * exp ( x ,
rank: 586
score: 99.09266153971355
patch: return 0 . 0 / / exp ( x ) ;
rank: 586
score: 99.07171630859375
patch: return $NUMBER$ . $NUMBER$ - exp ( - x ) ;
rank: 586
score: 98.98189697265624
patch: return 0 . exp ( - x ) ;
rank: 586
score: 98.97620391845703
patch: result = exp ( x ) ;
rank: 586
score: 98.93230590820312
patch: x = - exp ( - x ) ;
rank: 587
score: 99.09801432291667
patch: return 0 . 1 * exp ( exp ( - x ) ) ;
rank: 587
score: 99.07033469460227
patch: return 0 . 1 * ( - x ) ;
rank: 587
score: 99.0486172762784
patch: return 0 . 0 * exp ( this ) ;
rank: 587
score: 98.97426147460938
patch: result = exp ( x , x ) ;
rank: 587
score: 98.93218383789062
patch: if ( x <= $NUMBER$ ) return 0 ;
rank: 588
score: 99.1724102313702
patch: return 0 . 0 * exp ( x ) >> 1 ;
rank: 588
score: 99.09764811197917
patch: if ( x < 0 . 0 ) { return 0 . $NUMBER$ ;
rank: 588
score: 99.06867218017578
patch: return new double [ 0 ] ;
rank: 588
score: 98.9807861328125
patch: x = x + exp ( x ) ;
rank: 588
score: 98.97373046875
patch: return 0 . $NUMBER$ * x ( x ;
rank: 588
score: 98.93064371744792
patch: exp ( x , 0 ) ; }
rank: 589
score: 99.0971346768466
patch: return - $NUMBER$ / exp ( - x ) ;
rank: 589
score: 99.09093221028645
patch: return 0 . $NUMBER$ * exp ( ) / x ;
rank: 589
score: 99.0835293856534
patch: return 0 * exp ( x * $NUMBER$ ) ;
rank: 589
score: 99.06109064275569
patch: return 0 . $NUMBER$ * x * ( x ;
rank: 589
score: 98.93007202148438
patch: return 0 . / exp ( x ) ;
rank: 590
score: 99.09702555338542
patch: return x ; } if ( x < 0 ) {
rank: 590
score: 99.0906005859375
patch: return 0 . 0 / exp ( ) ;
rank: 590
score: 99.0826748934659
patch: return $NUMBER$ . $NUMBER$ * x ( x ) ;
rank: 590
score: 99.0610580444336
patch: return $NUMBER$ . $NUMBER$ * 0 ;
rank: 590
score: 98.97265625
patch: return 0 * 0 ;
rank: 590
score: 98.9295166015625
patch: return 0 + exp ( x ) ; }
rank: 591
score: 99.16993204752605
patch: return 0 * exp ( x ) [ x ] ;
rank: 591
score: 99.09653145926339
patch: return 0 . $NUMBER$ + ( exp ( - x ) ) ;
rank: 591
score: 99.0655850497159
patch: return ( exp ( x ) ) / $NUMBER$ ;
rank: 591
score: 98.97205352783203
patch: return 1 . $NUMBER$ * x ;
rank: 591
score: 98.92945556640625
patch: / * / exp ( - x ) ;
rank: 592
score: 99.0882568359375
patch: return 0 . $NUMBER$ * / x ;
rank: 592
score: 99.0600918856534
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) )
rank: 592
score: 98.97136688232422
patch: return 0 . $NUMBER$ * ) ;
rank: 592
score: 98.9292236328125
patch: x = x - exp ( x ) ;
rank: 593
score: 99.0963846842448
patch: retval = 0 . $NUMBER$ * exp ( x ) ;
rank: 593
score: 99.0873514811198
patch: return 0 . $NUMBER$ * exp ( x - 1 ;
rank: 593
score: 99.08109907670455
patch: return - 0 . $NUMBER$ * this . x ;
rank: 593
score: 99.05951482599431
patch: return $NUMBER$ . $NUMBER$ * max ( x ) ;
rank: 593
score: 98.9704345703125
patch: return 0 . $NUMBER$ * $NUMBER$ * 0 ;
rank: 594
score: 99.04196999289773
patch: return 0 > $NUMBER$ * exp ( x ) ;
rank: 594
score: 98.96975708007812
patch: return 0 . $NUMBER$ * 0 * 1 ;
rank: 595
score: 99.16695149739583
patch: exp ( x ) ; return exp ( x ) ;
rank: 595
score: 99.096044921875
patch: return ( x ) - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 595
score: 99.08732466264205
patch: return 0 . $NUMBER$ * exp ( double ) ;
rank: 595
score: 99.05892333984374
patch: 0 . $NUMBER$ * exp ( x ) ;
rank: 595
score: 99.04182572798295
patch: return exp ( x , 1 . 0 ) ;
rank: 595
score: 98.96846923828124
patch: return 0 + 0 . $NUMBER$ * x ;
rank: 595
score: 98.92509765625
patch: return exp ( x - x ) ; }
rank: 596
score: 99.09601236979167
patch: return 1 . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 596
score: 99.0768155184659
patch: double CaMeL Value ( x ) ; return x ;
rank: 596
score: 99.05735473632812
patch: return 0 . ) * 0 . $NUMBER$ ;
rank: 596
score: 98.92461395263672
patch: return - exp ( x ) ;
rank: 597
score: 99.05864923650569
patch: return x * exp ( x - x ) ;
rank: 597
score: 99.05601917613636
patch: exp ( x ) ; exp ( x ) ;
rank: 597
score: 98.96755981445312
patch: return 0 * $NUMBER$ ;
rank: 598
score: 99.08671061197917
patch: return 0 . 0 * exp ( x , x ;
rank: 598
score: 99.03838556463069
patch: return 0 - exp ( x , 0 ) ;
rank: 598
score: 98.96748657226563
patch: return 0 * * exp ( x ) ;
rank: 598
score: 98.92322455512152
patch: / / exp ( - x ) ;
rank: 599
score: 99.05424669053819
patch: return 0 * exp ( x ) .
rank: 599
score: 99.03818581321023
patch: break 0 . $NUMBER$ * exp ( x ) ;
rank: 599
score: 98.96565755208333
patch: return 0 . 0 * x ) ;
rank: 599
score: 98.96085205078126
patch: x = x . cosh ( x ) ;
rank: 599
score: 98.922607421875
patch: return ( 0 . $NUMBER$ ) ; }
rank: 600
score: 99.09565080915179
patch: double x = 0 . 0 * exp ( - x ) ;
rank: 600
score: 99.08074396306819
patch: return 0 . 0 * / exp ( x ;
rank: 600
score: 99.05409934303977
patch: return 0 . $NUMBER$ * exp ( 0 . ;
rank: 600
score: 98.965478515625
patch: return 0 . $NUMBER$ ? x : x ;
rank: 600
score: 98.921875
patch: exp ( x , x , 0 ) ;
rank: 601
score: 99.09561593191964
patch: return 0 . 0 * x - exp ( - x ) ;
rank: 601
score: 99.0359219637784
patch: return exp ( x , 0 , 0 ) ;
rank: 601
score: 98.96522827148438
patch: if ( x == ) { return 0 ;
rank: 601
score: 98.95888671875
patch: x = exp ( x - x ) ;
rank: 601
score: 98.92169189453125
patch: temp ( x , 0 . $NUMBER$ ) ;
rank: 602
score: 99.09519740513393
patch: return $NUMBER$ . $NUMBER$ * x - exp ( - x ) ;
rank: 602
score: 99.07798073508523
patch: return Double . ZERO * exp ( x ) ;
rank: 602
score: 98.9647216796875
patch: return 0 . $NUMBER$ | 0 . $NUMBER$ ;
rank: 602
score: 98.9211669921875
patch: if ( x > 0 ) return x ;
rank: 603
score: 99.0944112141927
patch: ret = 0 . 0 * exp ( x ) ;
rank: 603
score: 99.07785866477273
patch: return 0 / 0 * exp ( x ) ;
rank: 603
score: 99.0692471590909
patch: return 0 . $NUMBER$ * ( double ) x ;
rank: 603
score: 98.96348571777344
patch: return exp ( x ) ; ;
rank: 603
score: 98.95802815755208
patch: exp ( x ) ; return 0 ;
rank: 604
score: 99.15880330403645
patch: return 0 . $NUMBER$ * exp ( x ) - ;
rank: 604
score: 99.0944091796875
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ / x ;
rank: 604
score: 99.07784016927083
patch: return 0 . 0 * / x ;
rank: 604
score: 99.0507479580966
patch: return 0 . null . exp ( x ) ;
rank: 604
score: 99.0487948330966
patch: return - 0 * exp ( - x ) ;
rank: 604
score: 98.96290283203125
patch: return 0 * exp ( ) + x ;
rank: 604
score: 98.9572998046875
patch: return 0 , exp ( - x ) ;
rank: 604
score: 98.92068481445312
patch: exp ( x - x ) ;
rank: 605
score: 99.09418131510417
patch: return 0 . $NUMBER$ * ( exp ( x ) + $NUMBER$ ) ;
rank: 605
score: 99.07749245383523
patch: return 0 . $NUMBER$ * exp ( ) ; }
rank: 605
score: 99.06858132102273
patch: return 0 . 0 * format ( x ) ;
rank: 605
score: 99.04534912109375
patch: return new double [ 1 ] ;
rank: 605
score: 98.9609375
patch: try { return exp ( x ) ;
rank: 605
score: 98.9572265625
patch: return exp ( - x ) - x ;
rank: 606
score: 99.09404645647321
patch: return 0 . $NUMBER$ * exp ( - x * x ) ;
rank: 606
score: 98.96028645833333
patch: return exp ( x ) * 1 ;
rank: 607
score: 99.093505859375
patch: return ( exp ( - 0 . 0 ) ) ;
rank: 607
score: 99.04487748579545
patch: return Long . $NUMBER$ * exp ( x ) ;
rank: 607
score: 98.95927124023437
patch: return 0 . 1 * exp ( ) ;
rank: 607
score: 98.95557996961806
patch: x = 0 . 0 * x ;
rank: 607
score: 98.91755981445313
patch: return exp ( - x ) ; } }
rank: 608
score: 99.06348765980114
patch: return 0 . 0 ( x , x ) ;
rank: 608
score: 99.04730779474431
patch: exp ( x ) * exp ( x ) ;
rank: 608
score: 99.03007368607955
patch: return exp ( x , 0 , x ) ;
rank: 608
score: 98.95812377929687
patch: return 0 * $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 608
score: 98.95144653320312
patch: x += exp ( x ) ;
rank: 608
score: 98.91678466796876
patch: return $NUMBER$ . * exp ( x ) ;
rank: 609
score: 98.95791286892361
patch: return 0 . $NUMBER$ * x $NUMBER$ ;
rank: 610
score: 99.09264322916667
patch: return exp ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 610
score: 99.04305419921874
patch: return 0 . 1 * HEX _ $NUMBER$ ;
rank: 610
score: 98.95772705078124
patch: return 0 . 0 * $NUMBER$ . $NUMBER$ ;
rank: 610
score: 98.91242065429688
patch: return x - exp ( x ) ; }
rank: 611
score: 99.06951349431819
patch: return Double . $NUMBER$ * / ( x ) ;
rank: 611
score: 99.05689348493304
patch: return - 1 . $NUMBER$ ;
rank: 611
score: 99.04527698863636
patch: return 0 * exp ( x ) . 0 ;
rank: 611
score: 98.95662231445313
patch: return 0 . $NUMBER$ * 0 . ) ;
rank: 611
score: 98.91089630126953
patch: return exp ( - 0 ) ;
rank: 612
score: 99.09182739257812
patch: return $NUMBER$ . 0 * exp ( - $NUMBER$ ) ;
rank: 612
score: 99.06834827769886
patch: return - . $NUMBER$ * exp ( x ) ;
rank: 612
score: 99.05344460227273
patch: return 1 . 0 / exp ( x ) ;
rank: 612
score: 99.04445578835227
patch: return 0 . 0 * abs ( x ) ;
rank: 612
score: 98.95501708984375
patch: return 0 . $NUMBER$ : $NUMBER$ ;
rank: 612
score: 98.948974609375
patch: return ( x + 0 . 0 ) ;
rank: 613
score: 98.94874572753906
patch: return ( x , 0 ) ;
rank: 614
score: 99.09131876627605
patch: return ( x ) * exp ( - x ) ;
rank: 614
score: 99.0523348721591
patch: return 0 . $NUMBER$ * ( ( x ) ;
rank: 614
score: 98.95364379882812
patch: return 0 . $NUMBER$ * x * $NUMBER$ ;
rank: 614
score: 98.90986938476563
patch: exp ( - exp ( x ) ) ;
rank: 615
score: 99.09079811789773
patch: return x + $NUMBER$ * exp ( x ) ;
rank: 615
score: 99.06620649857955
patch: return 0 . 0 / exp ( 0 ) ;
rank: 615
score: 99.05086669921874
patch: return 0 . $NUMBER$ * this * x ;
rank: 615
score: 98.95335693359375
patch: if ( x >= 0 ) return 0 ;
rank: 615
score: 98.9087158203125
patch: exp ( x , 0 . 1 ) ;
rank: 616
score: 99.09056803385417
patch: if ( x < 0 ) { return 0 . $NUMBER$ * x ;
rank: 616
score: 99.05072576349431
patch: return 1 . $NUMBER$ - exp ( x ) ;
rank: 616
score: 99.04331665039062
patch: return ( x ) * 0 . $NUMBER$ ;
rank: 616
score: 98.95331420898438
patch: return 0 + exp ( x ) ; ;
rank: 616
score: 98.94747924804688
patch: return 0 ( - x ) ;
rank: 616
score: 98.90828857421874
patch: exp ( x , x , x ) ;
rank: 617
score: 99.09052734375
patch: return 0 . $NUMBER$ * exp $NUMBER$ / exp ( - x ) ;
rank: 617
score: 98.94695434570312
patch: return 0 ; } else { return x ;
rank: 618
score: 99.0905029296875
patch: return exp ( - 0 . $NUMBER$ ) ;
rank: 618
score: 99.0347012606534
patch: return 0 * exp ( - - x ) ;
rank: 618
score: 98.95114135742188
patch: return 0 * exp ( x )
rank: 618
score: 98.90744018554688
patch: exp ( x , 0 + x ) ;
rank: 619
score: 99.15008544921875
patch: return 0 . $NUMBER$ * exp ( x ) break ;
rank: 619
score: 99.09000651041667
patch: return 0 . $NUMBER$ * exp $NUMBER$ * exp ( - x ) ;
rank: 619
score: 98.95067003038194
patch: } else { return 0 . $NUMBER$ ;
rank: 619
score: 98.90662231445313
patch: if ( x > $NUMBER$ ) return x ;
rank: 620
score: 99.0625732421875
patch: return 0 . $NUMBER$ / exp ( x ;
rank: 620
score: 99.04884033203125
patch: return 0 . $NUMBER$ x ( x ) ;
rank: 620
score: 99.04155939275569
patch: return 0 . $NUMBER$ * ( x x ) ;
rank: 620
score: 99.03448486328125
patch: return 0 . + exp ( x ) ;
rank: 620
score: 98.95050048828125
patch: return 0 . $NUMBER$ ? $NUMBER$ . $NUMBER$ ;
rank: 620
score: 98.90604654947917
patch: x = new double [ $NUMBER$ ] ;
rank: 621
score: 99.08773600260416
patch: return ( x + 0 . $NUMBER$ * exp ( x ) ) ;
rank: 621
score: 99.06163441051136
patch: return 0 . 0 / exp ( $NUMBER$ ) ;
rank: 621
score: 99.04881591796875
patch: return 0 . 0 * 0 * $NUMBER$ ;
rank: 621
score: 99.04144841974431
patch: return $NUMBER$ . x * exp ( x ) ;
rank: 621
score: 99.01880992542614
patch: return 0 ; } return exp ( x ) ;
rank: 621
score: 98.950390625
patch: if ( 0 == x ) return $NUMBER$ ;
rank: 621
score: 98.90596516927083
patch: return cosh ( x , x ) ;
rank: 622
score: 98.9498291015625
patch: return 0 * $NUMBER$ . $NUMBER$ * x ;
rank: 622
score: 98.9417724609375
patch: return 1 / exp ( - x ) ;
rank: 622
score: 98.90556504991319
patch: return 0 . $NUMBER$ * $NUMBER$ ; }
rank: 623
score: 99.08740234375
patch: return $NUMBER$ . $NUMBER$ * ( exp ( - x ) ) ;
rank: 623
score: 99.0593017578125
patch: return Math . abs ( x ) ; }
rank: 623
score: 99.0454434481534
patch: return 0 . 0 * ( double ) x ;
rank: 623
score: 99.04071655273438
patch: return 0 . $NUMBER$ * exp = x ;
rank: 623
score: 98.94841918945312
patch: return 1 . $NUMBER$ * exp ( ) ;
rank: 624
score: 99.04542759486607
patch: long CaMeL Value ( ) ;
rank: 624
score: 99.04071599786931
patch: return 0 return $NUMBER$ * exp ( x ) ;
rank: 624
score: 99.02873229980469
patch: return 0 * HEX _ $NUMBER$ ;
rank: 624
score: 98.94800415039063
patch: if ( x == $NUMBER$ ) return 0 ;
rank: 625
score: 99.14797141335227
patch: return exp ( x ) exp ( x ) ;
rank: 625
score: 99.08687918526786
patch: return 0 . $NUMBER$ * exp ( x * - x ) ;
rank: 625
score: 99.04454456676136
patch: return 0 . $NUMBER$ * Double ( x ) ;
rank: 625
score: 99.04042746803977
patch: return Double . $NUMBER$ * exp ( x ) .
rank: 625
score: 99.02825372869319
patch: return 0 . TRUE * exp ( x ) ;
rank: 625
score: 99.0155917080966
patch: return 0 . $NUMBER$ * in ( x ) ;
rank: 625
score: 98.94796752929688
patch: } return $NUMBER$ * exp ( x ) ;
rank: 625
score: 98.93581136067708
patch: return exp ( - - x ) ;
rank: 625
score: 98.903173828125
patch: return x ; } exp ( x ) ;
rank: 626
score: 99.05763938210227
patch: return Double . $NUMBER$ + exp ( x ) ;
rank: 626
score: 99.03946533203126
patch: return ( 0 . 0 * x ) ;
rank: 626
score: 99.01509232954545
patch: return 0 . $NUMBER$ exp ( x ) ; }
rank: 626
score: 98.9471435546875
patch: return 0 * exp ( ) * x ;
rank: 626
score: 98.93409423828125
patch: return ( x > $NUMBER$ ) / $NUMBER$ ;
rank: 626
score: 98.90262451171876
patch: final double x = exp ( x ) ;
rank: 627
score: 99.0552090731534
patch: return Double . $NUMBER$ * exp ( 0 ) ;
rank: 627
score: 99.0391512784091
patch: return 0 * exp ( x ) ; / ;
rank: 627
score: 99.02617853338069
patch: return x * $NUMBER$ / exp ( x ) ;
rank: 627
score: 98.94666290283203
patch: return 0 + 0 . $NUMBER$ ;
rank: 627
score: 98.9321044921875
patch: return 0 ( x , - x ) ;
rank: 627
score: 98.90158081054688
patch: exp ( x , x + x ) ;
rank: 628
score: 99.05446555397727
patch: return Double . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 628
score: 99.03820122612848
patch: return 0 . max ( x ) ;
rank: 628
score: 99.02610085227273
patch: return 0 . x + exp ( x ) ;
rank: 628
score: 98.94652099609375
patch: result = $NUMBER$ * exp ( x ) ;
rank: 628
score: 98.92879231770833
patch: return 0 ( x , x ) ;
rank: 629
score: 99.08560791015626
patch: return exp ( x , - $NUMBER$ ) ;
rank: 629
score: 99.05385520241477
patch: return 0 . 0 * exp ( ) ) ;
rank: 629
score: 99.03806374289773
patch: return 0 * exp ( x , $NUMBER$ ) ;
rank: 629
score: 99.02391221788194
patch: return cosh * exp ( x ) ;
rank: 629
score: 98.94622802734375
patch: return 0 * x * x ;
rank: 629
score: 98.92793579101563
patch: return new int [ ] { x } ;
rank: 630
score: 99.08544921875
patch: result return 0 . 0 * exp ( x ) ;
rank: 630
score: 98.9452392578125
patch: try { return 0 . $NUMBER$ * x ;
rank: 631
score: 99.08509928385416
patch: return 0 . $NUMBER$ ; } if ( x < 0 . 0 )
rank: 631
score: 99.04161487926136
patch: double CaMeL Value ( x ) ; return 0 ;
rank: 631
score: 99.0377197265625
patch: return 0 . false * exp ( x ) ;
rank: 631
score: 99.0125399502841
patch: return Integer . 0 * exp ( x ) ;
rank: 632
score: 99.08505684988839
patch: return $NUMBER$ / 0 . $NUMBER$ * exp ( - x ) ;
rank: 632
score: 99.0409927368164
patch: long CaMeL Value ( x ) ;
rank: 632
score: 98.94473266601562
patch: return 0 . $NUMBER$ : 0 . 0 ;
rank: 632
score: 98.897705078125
patch: exp ( x ) ; }
rank: 633
score: 99.0501376065341
patch: final 0 . $NUMBER$ * exp ( x ) ;
rank: 633
score: 99.0367431640625
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) *
rank: 633
score: 99.01975319602273
patch: return Long . 1 * exp ( x ) ;
rank: 633
score: 98.89710235595703
patch: return new int [ $NUMBER$ ] ;
rank: 634
score: 99.084423828125
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 634
score: 99.04929421164773
patch: return - 0 . 0 * exp ( ) ;
rank: 634
score: 99.04008345170455
patch: return 0 . $NUMBER$ + x ( x ) ;
rank: 634
score: 99.03614390980114
patch: exp ( x ) . exp ( x ) ;
rank: 634
score: 99.00799005681819
patch: x = 0 . $NUMBER$ exp ( x ) ;
rank: 634
score: 98.94323052300348
patch: return 0 . $NUMBER$ * * x ;
rank: 635
score: 99.14120483398438
patch: { return 0 . $NUMBER$ + exp ( x ) ;
rank: 635
score: 99.08434041341145
patch: return 0 . $NUMBER$ * exp ( - exp ) ;
rank: 635
score: 99.03997192382812
patch: return 0 ; } return 0 . $NUMBER$ ;
rank: 635
score: 99.03515625
patch: return 0 . 1 * x * x ;
rank: 635
score: 99.01880992542614
patch: return 0 . + exp ( - x ) ;
rank: 635
score: 99.00787908380681
patch: return x . cosh ( x , 0 ) ;
rank: 635
score: 98.94268798828125
patch: return 0 . $NUMBER$ * x * x )
rank: 635
score: 98.89528198242188
patch: x = 1 * exp ( x ) ;
rank: 636
score: 99.03816361860795
patch: return 0 . 0 ( 0 . 0 ) ;
rank: 636
score: 99.034619140625
patch: return 0 ) * exp ( x ) ;
rank: 636
score: 98.94256591796875
patch: return ( exp ( x ) ;
rank: 636
score: 98.9194091796875
patch: return ( x . [ x ] ) ;
rank: 637
score: 99.04679731889205
patch: return Double . MAX _ VALUE ( x ) ;
rank: 637
score: 99.03345336914063
patch: return ( 0 . $NUMBER$ ) * x ;
rank: 637
score: 99.00725763494319
patch: return 0 ( x , 0 . 0 ) ;
rank: 637
score: 98.9423095703125
patch: return 0 . $NUMBER$ * x . 0 ;
rank: 637
score: 98.91895751953125
patch: return exp ( x ) . return 0 ;
rank: 637
score: 98.89271763392857
patch: return 0 - x ; }
rank: 638
score: 99.08358561197916
patch: result = ( double ) 0 . $NUMBER$ * exp ( x ) ;
rank: 638
score: 99.03594098772321
patch: return - 1 . 0 ;
rank: 638
score: 99.02807006835937
patch: return 0 . exp ( x ) ) ;
rank: 638
score: 99.01524769176136
patch: return 0 . $NUMBER$ * for ( x ) ;
rank: 638
score: 98.91881713867187
patch: return ( x , x , x ) ;
rank: 638
score: 98.89268798828125
patch: return x ; }
rank: 639
score: 99.033251953125
patch: return 0 . 0 * x - x ;
rank: 639
score: 99.02657741970486
patch: return 0 . null ( x ) ;
rank: 639
score: 99.01520330255681
patch: return x * exp ( x - $NUMBER$ ) ;
rank: 639
score: 98.94156494140626
patch: return 0 . $NUMBER$ * exp ( 1 ;
rank: 639
score: 98.89133707682292
patch: x = - exp ( x ) ;
rank: 640
score: 99.13724772135417
patch: return 0 . $NUMBER$ * exp ( x ) ? ;
rank: 640
score: 99.08317057291667
patch: return 0 . $NUMBER$ * exp ( x T ) ;
rank: 640
score: 99.04489968039773
patch: return 0 . $NUMBER$ ( exp ( x ) ;
rank: 640
score: 99.02535400390624
patch: return $NUMBER$ . $NUMBER$ * 0 * x ;
rank: 640
score: 99.0055264559659
patch: return 0 . 0 double ( - x ) ;
rank: 640
score: 98.91776733398437
patch: return exp ( - x ) . x ;
rank: 640
score: 98.89124145507813
patch: return - x - exp ( x ) ;
rank: 641
score: 99.00432794744319
patch: return Math . 1 * exp ( x ) ;
rank: 641
score: 98.89102172851562
patch: return 0 . $NUMBER$ ; } / * /
rank: 642
score: 99.0302734375
patch: return - 0 . 0 ( x ) ;
rank: 642
score: 98.9168212890625
patch: return ( x , 0 . 1 ) ;
rank: 643
score: 99.08180930397727
patch: return ( 0 . $NUMBER$ * exp $NUMBER$ ) ;
rank: 643
score: 99.02935791015625
patch: return x . float CaMeL Value ( ) ;
rank: 643
score: 98.94063991970486
patch: return exp ( x , $NUMBER$ ) ;
rank: 643
score: 98.89033813476563
patch: if ( x < 0 ) return x ;
rank: 644
score: 99.13433837890625
patch: return 0 . 0 0 * exp ( x ) ;
rank: 644
score: 99.02793579101562
patch: return 0 . 0 * 0 + x ;
rank: 644
score: 99.01188520951705
patch: return 0 . - exp ( x ) ; }
rank: 644
score: 99.00150923295455
patch: return 0 . 0 * cosh ( x ) ;
rank: 644
score: 98.91536254882813
patch: return exp ( - x - $NUMBER$ ) ;
rank: 644
score: 98.88927612304687
patch: exp ( x , - x ) ; }
rank: 645
score: 99.04017223011364
patch: return Double . $NUMBER$ * x ( x ) ;
rank: 645
score: 99.01119995117188
patch: return ( x - $NUMBER$ ) ;
rank: 645
score: 98.91495186941964
patch: x = 0 . 0 ;
rank: 646
score: 99.13184611002605
patch: return exp ( x ) . max ( x ) ;
rank: 646
score: 99.08136541193181
patch: return 0 . $NUMBER$ * exp $NUMBER$ . $NUMBER$ ;
rank: 646
score: 99.02462768554688
patch: return - 0 . $NUMBER$ ( x ) ;
rank: 646
score: 99.01845092773438
patch: return 1 . $NUMBER$ * x * x ;
rank: 646
score: 98.9397705078125
patch: return 0 . ) + 0 . $NUMBER$ ;
rank: 646
score: 98.91487630208333
patch: return 0 . 0 * - x ;
rank: 646
score: 98.88427124023437
patch: exp ( exp ( x ) ) ; }
rank: 647
score: 99.08125813802083
patch: return x ; } if ( x < $NUMBER$ ) {
rank: 647
score: 99.02385118272569
patch: return - 0 . $NUMBER$ * x ;
rank: 647
score: 99.01400756835938
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ *
rank: 647
score: 98.99906782670455
patch: return 0 . max ( x , x ) ;
rank: 647
score: 98.93944440569196
patch: return 0 . $NUMBER$ ; ;
rank: 647
score: 98.91437530517578
patch: x = - x - x ;
rank: 648
score: 99.08056640625
patch: return 0 . $NUMBER$ * exp double ( x ) ;
rank: 648
score: 99.03936767578125
patch: return Double . Na CaMeL N ;
rank: 648
score: 99.0138916015625
patch: return $NUMBER$ * 0 . $NUMBER$ * x ;
rank: 648
score: 98.93925170898437
patch: return $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ ;
rank: 648
score: 98.91314697265625
patch: x = 0 . $NUMBER$ ;
rank: 648
score: 98.88359375
patch: double x = exp ( - x ) ;
rank: 649
score: 99.07954915364583
patch: double $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 649
score: 99.03925170898438
patch: return Double . double CaMeL Value ( ) ;
rank: 649
score: 99.02144165039063
patch: return 0 . 0 * $NUMBER$ + x ;
rank: 649
score: 99.00417258522727
patch: return x * 0 / exp ( x ) ;
rank: 649
score: 98.93882446289062
patch: return exp ( x , x ) ) ;
rank: 649
score: 98.88357543945312
patch: return new double [ x ] ;
rank: 650
score: 99.07920532226562
patch: return 0 . $NUMBER$ * exp / x ;
rank: 650
score: 99.01362915039063
patch: return 0 . exp exp ( x ) ;
rank: 650
score: 98.88265991210938
patch: if ( x >= $NUMBER$ ) return 0 ;
rank: 651
score: 99.03855202414773
patch: return 0 . $NUMBER$ ^ exp ( x ) ;
rank: 651
score: 99.01240844726563
patch: 0 return 0 * exp ( x ) ;
rank: 651
score: 99.00237482244319
patch: += $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 651
score: 98.93704833984376
patch: System . out . println ( $STRING$ ) ;
rank: 651
score: 98.9086181640625
patch: return ( x + 0 . $NUMBER$ ) ;
rank: 651
score: 98.88184271918402
patch: return ( 0 . 0 ) ; }
rank: 652
score: 99.0791015625
patch: return 0 . 0 * exp ( x ) ; case $NUMBER$ :
rank: 652
score: 99.03849487304687
patch: return 0 . 0 / ( x ) ;
rank: 652
score: 99.01571044921874
patch: return ( x * 0 . 0 ) ;
rank: 652
score: 99.01040649414062
patch: return 0 . $NUMBER$ * 0 + x ;
rank: 652
score: 99.00009987571023
patch: return 0 . $NUMBER$ { exp ( x ) ;
rank: 652
score: 98.99748091264205
patch: if ( x != $NUMBER$ ) { return 0 ;
rank: 653
score: 99.00810546875
patch: return 0 * x * x * x ;
rank: 653
score: 98.99687056107955
patch: return 0 . $NUMBER$ * byte ( x ) ;
rank: 653
score: 98.93565673828125
patch: return - 1 + exp ( x ) ;
rank: 653
score: 98.87449815538194
patch: = $NUMBER$ * exp ( x ) ;
rank: 654
score: 99.07807268415179
patch: return $NUMBER$ . 0 * exp ( x ) ; } else {
rank: 654
score: 99.01365152994792
patch: return float CaMeL Value ( x ) ;
rank: 654
score: 99.006884765625
patch: return exp ( x ) ; return x ;
rank: 655
score: 99.03290349786931
patch: return 0 . 0 ( exp ( x ) ;
rank: 655
score: 99.01231689453125
patch: return 0 . 0 * x + x ;
rank: 655
score: 98.933154296875
patch: return 0 * ( x + x ) ;
rank: 655
score: 98.90488891601562
patch: return * $NUMBER$ * exp ( x ) ;
rank: 655
score: 98.87244330512152
patch: exp ( - x - x ) ;
rank: 656
score: 99.07688395182292
patch: return 0 . $NUMBER$ * 0 . 0 * exp ;
rank: 656
score: 99.00302734375
patch: return Double . $NUMBER$ exp ( x ) ;
rank: 656
score: 98.9939852627841
patch: return 0 . $NUMBER$ * Float ( x ) ;
rank: 656
score: 98.93235778808594
patch: return 0 . 0 + x ;
rank: 656
score: 98.90462646484374
patch: return - x . cosh ( x ) ;
rank: 657
score: 99.076513671875
patch: return exp ( - ( x ) ) ;
rank: 657
score: 99.03122780539773
patch: return - 1 . $NUMBER$ * exp ( ) ;
rank: 657
score: 99.00284830729167
patch: return ( x ) ;
rank: 657
score: 98.99860174005681
patch: return $STRING$ . $NUMBER$ * exp ( x ) ;
rank: 657
score: 98.90459526909723
patch: return ( - x + x ) ;
rank: 657
score: 98.86835479736328
patch: exp ( - x ) ; }
rank: 658
score: 99.12470037286931
patch: return Math . min ( x , x ) ;
rank: 658
score: 98.99805797230114
patch: return 0 . $NUMBER$ * exp ( - x )
rank: 658
score: 98.99336381392045
patch: return 0 . $NUMBER$ * exp ( Math ) ;
rank: 658
score: 98.93094211154514
patch: } return 0 . $NUMBER$ * x ;
rank: 658
score: 98.86753845214844
patch: return 0 . $NUMBER$ * exp ;
rank: 659
score: 99.0018310546875
patch: return Double . 0 * ( x ) ;
rank: 659
score: 98.99827880859375
patch: return $NUMBER$ . 0 * ( x ) ;
rank: 659
score: 98.93059692382812
patch: return 0 . $NUMBER$ + 1 . $NUMBER$ ;
rank: 659
score: 98.86510552300348
patch: return exp ( x - $NUMBER$ ) ;
rank: 660
score: 99.00174560546876
patch: return 0 . 0 * x * 0 ;
rank: 660
score: 98.99765846946023
patch: return 0 . $NUMBER$ . ( - x ) ;
rank: 660
score: 98.92984619140626
patch: return $NUMBER$ . $NUMBER$ + 0 . $NUMBER$ ;
rank: 660
score: 98.89046223958333
patch: exp ( - x + x ) ;
rank: 661
score: 99.12215169270833
patch: return 0 * exp ( x ) ( x ) ;
rank: 661
score: 98.92910766601562
patch: return 0 . $NUMBER$ ? 0 ;
rank: 661
score: 98.88983154296875
patch: return ( x > $NUMBER$ ) ;
rank: 661
score: 98.86104583740234
patch: return 0 . $NUMBER$ * exp (
rank: 662
score: 99.0746182528409
patch: return ( x ) + exp ( x ) ;
rank: 662
score: 99.00123426649306
patch: return super . exp ( x ) ;
rank: 662
score: 98.99620971679687
patch: return ( x - $NUMBER$ ) / $NUMBER$ ;
rank: 662
score: 98.9933349609375
patch: return 0 . $NUMBER$ * $NUMBER$ + x ;
rank: 662
score: 98.92862955729167
patch: return exp . exp ( x ) ;
rank: 662
score: 98.88499755859375
patch: x = x ;
rank: 662
score: 98.86072540283203
patch: return 0 . $NUMBER$ ; } }
rank: 663
score: 99.0743916829427
patch: return 0 . $NUMBER$ * x - $NUMBER$ . $NUMBER$ ;
rank: 663
score: 98.85953097873264
patch: return 0 . $NUMBER$ . $NUMBER$ ; }
rank: 664
score: 99.02669852120536
patch: return 0 . $NUMBER$ ) ;
rank: 664
score: 98.99833984375
patch: return 0 . 1 * ( x ) ;
rank: 664
score: 98.99154663085938
patch: return - 0 . exp ( x ) ;
rank: 664
score: 98.85810682508681
patch: return exp ( x ) ; } }
rank: 665
score: 99.07395426432292
patch: return ( x * exp ( - x ) ) ;
rank: 665
score: 98.994189453125
patch: return 1 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 665
score: 98.99000379774306
patch: return value CaMeL Of ( x ) ;
rank: 665
score: 98.88064236111111
patch: result = exp ( - x ) ;
rank: 666
score: 99.07373046875
patch: return 0 . $NUMBER$ * - ( x ) ;
rank: 666
score: 99.0255459872159
patch: return - 0 . $NUMBER$ exp ( x ) ;
rank: 666
score: 98.87862820095486
patch: return 1 / exp ( x ) ;
rank: 667
score: 98.99488525390625
patch: return 0 * exp ( x , ) ;
rank: 667
score: 98.97852783203125
patch: return 0 . 0 * 0 / x ;
rank: 667
score: 98.92336697048611
patch: return exp ( exp ( x ) ;
rank: 667
score: 98.87433733258929
patch: return 0 + - x ;
rank: 668
score: 99.07294573102679
patch: return 0 . $NUMBER$ * exp ( - ( $NUMBER$ ) ) ;
rank: 668
score: 99.02520197088069
patch: return 0 . $NUMBER$ * 0 ( x ) ;
rank: 668
score: 98.9939208984375
patch: return 0 . 0 * 0 * 0 ;
rank: 668
score: 98.9775390625
patch: return 0 . 0 * this * x ;
rank: 668
score: 98.92250569661458
patch: return 0 + value ( x ) ;
rank: 668
score: 98.87339564732143
patch: x = x - x ;
rank: 669
score: 99.07236153738839
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ ) ; }
rank: 669
score: 98.9930419921875
patch: return Double . $NUMBER$ * 0 . $NUMBER$ ;
rank: 669
score: 98.99015502929687
patch: return 0 / exp ( - $NUMBER$ ) ;
rank: 669
score: 98.91679551866319
patch: break 0 * exp ( x ) ;
rank: 669
score: 98.86964246961806
patch: return 0 double ( - x ) ;
rank: 670
score: 98.98995971679688
patch: return ( x - x ) - x ;
rank: 670
score: 98.97519938151042
patch: return 0 . 0 ( 0 ) ;
rank: 670
score: 98.91400146484375
patch: return 0 * exp ( x ;
rank: 670
score: 98.85154893663194
patch: return cosh ( x , 0 ) ;
rank: 671
score: 99.07163492838542
patch: return 0 . $NUMBER$ * x - $NUMBER$ * x ;
rank: 671
score: 99.02363586425781
patch: / * return 0 . $NUMBER$ ;
rank: 671
score: 98.99203152126736
patch: return 0 . format ( x ) ;
rank: 671
score: 98.91262817382812
patch: return 0 . $NUMBER$ + 0 ;
rank: 671
score: 98.8680191040039
patch: return cosh ( - x ) ;
rank: 672
score: 99.11808268229167
patch: return 0 . $NUMBER$ * exp ( x , x )
rank: 672
score: 99.07157679966518
patch: return 1 . $NUMBER$ * exp ( - ( x ) ) ;
rank: 672
score: 99.02299360795455
patch: return $NUMBER$ . $NUMBER$ * / ( x ) ;
rank: 672
score: 98.99185180664062
patch: return 0 . $NUMBER$ * 0 . x ;
rank: 672
score: 98.96968078613281
patch: return 1 . $NUMBER$ * $NUMBER$ ;
rank: 672
score: 98.91000366210938
patch: return exp $NUMBER$ ( x ) ;
rank: 673
score: 99.07114083426339
patch: return 0 . $NUMBER$ * exp ( x ) ; } finally {
rank: 673
score: 99.02278275923295
patch: return 0 . $NUMBER$ * / ( $NUMBER$ ) ;
rank: 673
score: 98.99087185329861
patch: return 0 . start ( x ) ;
rank: 673
score: 98.98343505859376
patch: return 0 * ( x - x ) ;
rank: 673
score: 98.90898301866319
patch: return 0 . $NUMBER$ * 0 ; ;
rank: 673
score: 98.86587185329861
patch: return 0 , exp ( x ) ;
rank: 674
score: 99.0227383700284
patch: return Math . max ( x , x ) ;
rank: 674
score: 98.98941650390626
patch: return 0 * 0 * 0 . $NUMBER$ ;
rank: 674
score: 98.97357788085938
patch: return - exp ( x , 0 ) ;
rank: 674
score: 98.96752251519098
patch: return - 0 . $NUMBER$ * $NUMBER$ ;
rank: 674
score: 98.86369105747768
patch: x = x + x ;
rank: 675
score: 98.966455078125
patch: return x . int CaMeL Value ( ) ;
rank: 675
score: 98.90455627441406
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 675
score: 98.86334906684027
patch: return ( - x - $NUMBER$ ) ;
rank: 675
score: 98.84364149305556
patch: return 0 . $NUMBER$ * exp ( -
rank: 676
score: 98.98675537109375
patch: return 0 * exp ( x ) ; *
rank: 676
score: 98.90337371826172
patch: return 0 * $NUMBER$ . $NUMBER$ ;
rank: 676
score: 98.85983276367188
patch: return x - x ;
rank: 676
score: 98.84295654296875
patch: return - exp ( x ) ; }
rank: 677
score: 99.06838650173611
patch: double $NUMBER$ * exp ( x ) ;
rank: 677
score: 98.97211303710938
patch: return 0 . min ( - x ) ;
rank: 677
score: 98.90072292751736
patch: return 0 . x ( x ) ;
rank: 677
score: 98.8582763671875
patch: return $NUMBER$ . $NUMBER$ * - x ;
rank: 677
score: 98.84086778428819
patch: return 0 . $NUMBER$ * exp ; }
rank: 678
score: 99.11115056818181
patch: return 0 . $NUMBER$ * exp ( length ) ;
rank: 678
score: 99.06808471679688
patch: state = 0 . $NUMBER$ * exp ( x ) ;
rank: 678
score: 98.98543090820313
patch: return Double . $NUMBER$ * x * x ;
rank: 678
score: 98.90066189236111
patch: return 0 < exp ( x ) ;
rank: 678
score: 98.84010823567708
patch: return $STRING$ . cosh ( x ) ;
rank: 679
score: 98.96175537109374
patch: return 1 . 0 * $NUMBER$ * x ;
rank: 679
score: 98.90048556857639
patch: return $STRING$ * exp ( x ) ;
rank: 680
score: 99.01335144042969
patch: return 0 . $NUMBER$ * double ;
rank: 680
score: 98.982666015625
patch: return 0 . $NUMBER$ * exp ) ;
rank: 680
score: 98.85410563151042
patch: return new exp ( - x ) ;
rank: 680
score: 98.83811442057292
patch: return 0 . 0 * x ; }
rank: 681
score: 98.96782836914062
patch: return ( x - x ) / $NUMBER$ ;
rank: 681
score: 98.96007690429687
patch: return 0 . 0 + ( x ) ;
rank: 681
score: 98.89897918701172
patch: return 0 . $NUMBER$ ? $NUMBER$ ;
rank: 681
score: 98.83750406901042
patch: return new double [ x ] ; }
rank: 682
score: 98.97911987304687
patch: return x * exp ( x ) ) ;
rank: 682
score: 98.96770562065973
patch: return 0 ( x , 0 ) ;
rank: 682
score: 98.89797634548611
patch: return 0 & exp ( x ) ;
rank: 683
score: 99.06662819602273
patch: return 0 . ] * exp ( x ) ;
rank: 683
score: 98.97633666992188
patch: return 0 * 0 . ( x ) ;
rank: 683
score: 98.95963134765626
patch: return 0 . 0 ; } return x ;
rank: 683
score: 98.83662923177083
patch: x = exp ( x ) ; }
rank: 684
score: 99.06653849283855
patch: return 0 . $NUMBER$ * exp ( - / ) ;
rank: 684
score: 99.0085205078125
patch: return 0 . $NUMBER$ ( x ) ; }
rank: 684
score: 98.97584228515625
patch: return ( 0 . $NUMBER$ ) * $NUMBER$ ;
rank: 684
score: 98.9583740234375
patch: return 1 . 0 * $NUMBER$ ;
rank: 684
score: 98.89759657118056
patch: return 0 + exp ( $NUMBER$ ) ;
rank: 684
score: 98.83646647135417
patch: if ( x > 0 . 0 )
rank: 685
score: 99.06640625
patch: double 1 . $NUMBER$ * exp ( - x ) ;
rank: 685
score: 98.95782470703125
patch: return 1 . - exp ( x ) ;
rank: 685
score: 98.89737277560764
patch: return Double . min ( x ) ;
rank: 686
score: 98.95762329101562
patch: return 1 . $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 686
score: 98.89549424913194
patch: return 0 . $NUMBER$ * x x ;
rank: 686
score: 98.84330749511719
patch: x = - x + x ;
rank: 686
score: 98.836181640625
patch: return exp ( - 0 ) ; }
rank: 687
score: 98.97071533203125
patch: return 0 . x * 0 . $NUMBER$ ;
rank: 687
score: 98.84288872612848
patch: x = $NUMBER$ . $NUMBER$ * x ;
rank: 687
score: 98.83380889892578
patch: exp ( x + x ) ;
rank: 688
score: 99.06414794921875
patch: return 0 . $NUMBER$ * x - exp ( x ) ; }
rank: 688
score: 99.00612182617188
patch: return 0 . $NUMBER$ * Double . $NUMBER$ ;
rank: 688
score: 98.96119995117188
patch: return exp ( - 0 . 0 ) ;
rank: 688
score: 98.95626220703124
patch: return 0 . 0 * exp ( 0 ;
rank: 688
score: 98.84096950954861
patch: return ( - 0 . $NUMBER$ ) ;
rank: 688
score: 98.8318862915039
patch: return 0 ; } / * /
rank: 689
score: 99.00552978515626
patch: return 0 . $NUMBER$ ; } else { ;
rank: 689
score: 98.9692626953125
patch: return ( 0 . $NUMBER$ ) * 0 ;
rank: 689
score: 98.95496826171875
patch: return 1 . 0 * $NUMBER$ * $NUMBER$ ;
rank: 689
score: 98.89138454861111
patch: return 0 * exp ( x ) {
rank: 690
score: 98.83140345982143
patch: return 0 . 1 ; }
rank: 691
score: 99.00093587239583
patch: return 0 . $NUMBER$ * exp ( ;
rank: 691
score: 98.96739196777344
patch: return 0 * 0 * x ;
rank: 691
score: 98.95619710286458
patch: return - ( x - x ) ;
rank: 691
score: 98.95354546440973
patch: return - 0 . 0 * x ;
rank: 691
score: 98.88788604736328
patch: return 0 . $NUMBER$ * null ;
rank: 692
score: 98.95128173828125
patch: return ( 0 . $NUMBER$ * 0 ) ;
rank: 692
score: 98.88740370008681
patch: return exp ( x * x ) ;
rank: 692
score: 98.83047824435764
patch: return 0 . 1 . $NUMBER$ ; }
rank: 693
score: 99.06167166573661
patch: return 0 . $NUMBER$ ; } if ( x > $NUMBER$ ) {
rank: 693
score: 98.96630859375
patch: return Double . $NUMBER$ * x ;
rank: 693
score: 98.94992065429688
patch: return 0 . 0 double ( x ) ;
rank: 693
score: 98.83875868055556
patch: x = x + x + x ;
rank: 694
score: 99.09356134588069
patch: return 0 * exp ( x ) ? 0 ;
rank: 694
score: 99.06147904829545
patch: return ( x ) - exp ( x ) ;
rank: 694
score: 98.9965576171875
patch: return $NUMBER$ . 0 * exp ( ) ;
rank: 694
score: 98.96624145507812
patch: return $NUMBER$ . $NUMBER$ exp ( x ) ;
rank: 694
score: 98.94793090820312
patch: return ( 0 . $NUMBER$ * $NUMBER$ ) ;
rank: 694
score: 98.88509368896484
patch: try { return 0 . $NUMBER$ ;
rank: 694
score: 98.83846028645833
patch: exp ( - x , x ) ;
rank: 695
score: 99.09299538352273
patch: return Math . min ( 0 , x ) ;
rank: 695
score: 98.96583862304688
patch: return $NUMBER$ * 0 . $NUMBER$ * 0 ;
rank: 695
score: 98.95244750976562
patch: return cosh * exp ( - x ) ;
rank: 695
score: 98.9475341796875
patch: return 0 . 0 * $NUMBER$ * 0 ;
rank: 695
score: 98.82846408420139
patch: double x = exp ( x ) ;
rank: 696
score: 99.05838012695312
patch: return exp ( - exp ( - x ) ) ;
rank: 696
score: 98.947412109375
patch: return 1 . $NUMBER$ * $NUMBER$ * x ;
rank: 696
score: 98.88436550564236
patch: return false . exp ( x ) ;
rank: 697
score: 99.09290660511364
patch: return 0 * exp ( x / 0 ) ;
rank: 697
score: 99.05659623579545
patch: return ( exp ( x ) * $NUMBER$ ) ;
rank: 697
score: 98.94641723632813
patch: return 0 . $NUMBER$ float ( x ) ;
rank: 697
score: 98.88182237413194
patch: return 0 * exp ( 0 ) ;
rank: 697
score: 98.83639865451389
patch: return ( - x , x ) ;
rank: 697
score: 98.82727728949652
patch: return new double [ 0 ] ; }
rank: 698
score: 99.09275124289773
patch: return 0 * exp ( 0 , x ) ;
rank: 698
score: 99.05541381835937
patch: double 0 * exp ( - x ) ;
rank: 698
score: 98.9458251953125
patch: double CaMeL Value ( 0 . 0 ) ;
rank: 698
score: 98.88079155815973
patch: return exp ( x , 1 ) ;
rank: 698
score: 98.83303493923611
patch: return 0 * ( - x ) ;
rank: 699
score: 99.0553866299716
patch: return 0 . $NUMBER$ * exp 1 . $NUMBER$ ;
rank: 699
score: 98.94556884765625
patch: return x * exp ( x ) ; }
rank: 699
score: 98.88033718532986
patch: return Double . x ( x ) ;
rank: 700
score: 99.05445445667614
patch: return 0 . $NUMBER$ * x - - x ;
rank: 700
score: 98.94483032226563
patch: return x * exp ( - $NUMBER$ ) ;
rank: 700
score: 98.82624647352431
patch: return ( - x ) + x ;
rank: 701
score: 99.05423990885417
patch: return ( x ) - exp ( - x ) ;
rank: 701
score: 98.94345703125
patch: return ( 0 . 0 + x ) ;
rank: 701
score: 98.87724473741319
patch: return $STRING$ . exp ( x ) ;
rank: 701
score: 98.82607014973958
patch: return 0 . $NUMBER$ ; } * /
rank: 702
score: 99.0895108309659
patch: return 0 . $NUMBER$ exp 0 ( x ) ;
rank: 702
score: 98.87712860107422
patch: return 0 . $NUMBER$ - 0 ;
rank: 703
score: 98.94237060546875
patch: return ( x - x ) + x ;
rank: 704
score: 99.0872802734375
patch: return exp ( x , x ) - x ;
rank: 704
score: 99.05228271484376
patch: double $NUMBER$ * exp ( - x ) ;
rank: 704
score: 98.9753189086914
patch: return Double . MIN _ VALUE ;
rank: 704
score: 98.95764838324652
patch: return 0 . get ( x ) ;
rank: 704
score: 98.93927001953125
patch: return ( x * 0 . $NUMBER$ ) ;
rank: 704
score: 98.87437608506944
patch: return 0 * exp ( ) ) ;
rank: 704
score: 98.8210220336914
patch: return 0 double ( x ) ;
rank: 704
score: 98.82035997178819
patch: return new int [ $NUMBER$ ] ; }
rank: 705
score: 98.97506103515624
patch: return x $NUMBER$ * exp ( x ) ;
rank: 705
score: 98.93843994140624
patch: return 1 . $NUMBER$ * this . x ;
rank: 705
score: 98.87431335449219
patch: return 0 + exp ( ) ;
rank: 705
score: 98.82012261284723
patch: return ( x - x ) ; }
rank: 706
score: 98.9568115234375
patch: return $NUMBER$ * * exp ( x ) ;
rank: 706
score: 98.93661499023438
patch: return 1 . 0 * x ;
rank: 706
score: 98.87205674913194
patch: return null . exp ( x ) ;
rank: 707
score: 99.04912651909723
patch: double 0 * exp ( x ) ;
rank: 707
score: 98.9678466796875
patch: return new 0 . $NUMBER$ ( x ) ;
rank: 707
score: 98.95587158203125
patch: return 0 . $NUMBER$ * x ; else
rank: 707
score: 98.93512641059027
patch: return ( double ) 0 . 0 ;
rank: 707
score: 98.81621551513672
patch: return 0 . - x ; }
rank: 708
score: 98.96736450195313
patch: if ( x ) { return 0 ; }
rank: 708
score: 98.87082248263889
patch: return 0 . $NUMBER$ * $NUMBER$ ; ;
rank: 708
score: 98.81510416666667
patch: return 0 / ( - x ) ;
rank: 709
score: 98.93282063802083
patch: return - 0 . 0 * $NUMBER$ ;
rank: 709
score: 98.8707046508789
patch: return 0 * exp ( 0 ;
rank: 709
score: 98.81477186414931
patch: return ( - 0 . 0 ) ;
rank: 710
score: 99.08380681818181
patch: return exp ( x , x ) + x ;
rank: 710
score: 99.04795143821023
patch: return 0 . $NUMBER$ * exp $NUMBER$ - x ;
rank: 710
score: 98.96175537109374
patch: return 0 . $NUMBER$ ; } return 0 ;
rank: 710
score: 98.93270534939236
patch: return - 0 . $NUMBER$ * 0 ;
rank: 710
score: 98.93071746826172
patch: return x * HEX _ $NUMBER$ ;
rank: 710
score: 98.86893463134766
patch: return 0 * $NUMBER$ * $NUMBER$ ;
rank: 710
score: 98.81055450439453
patch: return 0 . 0 ; } }
rank: 711
score: 99.08271928267045
patch: exp ( x ) ; return 0 . $NUMBER$ ;
rank: 711
score: 99.04754638671875
patch: return $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 711
score: 98.96134643554687
patch: return 0 . 0 ; } else { ;
rank: 711
score: 98.81429714626736
patch: return 0 . cosh ( x ) ;
rank: 711
score: 98.81045532226562
patch: final double x = - x ;
rank: 712
score: 99.0456210049716
patch: return - ( exp ( - x ) ) ;
rank: 712
score: 98.959814453125
patch: return 0 . 0 / exp ( x ;
rank: 712
score: 98.86857604980469
patch: exp ( 0 . 0 ) ;
rank: 712
score: 98.81312391493056
patch: return * exp ( - x ) ;
rank: 712
score: 98.80961100260417
patch: temp = exp ( - x ) ;
rank: 713
score: 98.95970458984375
patch: return 0 . $NUMBER$ * / ( x ;
rank: 713
score: 98.95169067382812
patch: return $NUMBER$ . $NUMBER$ * 0 * 0 ;
rank: 713
score: 98.92286682128906
patch: double CaMeL Value ( 0 ) ;
rank: 713
score: 98.80849880642361
patch: return ( x , 0 ) ; }
rank: 714
score: 99.0784912109375
patch: return 0 0 * exp ( x ) ;
rank: 714
score: 98.95929565429688
patch: return 0 . 0 * / / x ;
rank: 714
score: 98.95121459960937
patch: return 0 . $NUMBER$ * exp . 0 ;
rank: 714
score: 98.86767578125
patch: return 0 . $NUMBER$ : x ;
rank: 714
score: 98.81196424696181
patch: return 0 ( x + x ) ;
rank: 714
score: 98.80770534939236
patch: ya ( exp ( x ) ) ;
rank: 715
score: 98.95855712890625
patch: return 1 . 0 * exp ( ) ;
rank: 715
score: 98.95088500976563
patch: 0 * 0 * exp ( x ) ;
rank: 715
score: 98.86710611979167
patch: return null * exp ( x ) ;
rank: 715
score: 98.80770111083984
patch: temp ( x , 0 ) ;
rank: 716
score: 98.9504150390625
patch: return 0 * 0 * exp ( x ;
rank: 716
score: 98.93165283203125
patch: return ( x > $NUMBER$ ) / 0 ;
rank: 716
score: 98.92449273003473
patch: return 0 * HEX _ $NUMBER$ ; }
rank: 716
score: 98.86602020263672
patch: return 0 . $NUMBER$ ? x ;
rank: 716
score: 98.80829535590277
patch: exp ( x ) . return 0 ;
rank: 716
score: 98.80734252929688
patch: return $NUMBER$ ; }
rank: 717
score: 98.95780181884766
patch: return 0 . $NUMBER$ / x ;
rank: 717
score: 98.94931369357639
patch: return ) * exp ( x ) ;
rank: 717
score: 98.93126678466797
patch: += exp ( - x ) ;
rank: 717
score: 98.9240478515625
patch: return ( x - 0 . $NUMBER$ ) ;
rank: 717
score: 98.86589898003473
patch: value = 0 . $NUMBER$ * x ;
rank: 717
score: 98.80765109592014
patch: x = x . [ x ] ;
rank: 717
score: 98.80550130208333
patch: if ( x < 0 . 0 )
rank: 718
score: 99.07607199928977
patch: return 0 * exp ( x ) - $NUMBER$ ;
rank: 718
score: 98.95688302176339
patch: return 0 . 0 ; ;
rank: 718
score: 98.94648742675781
patch: return 0 exp ( x ) ;
rank: 718
score: 98.9305908203125
patch: return 0 * new double [ $NUMBER$ ] ;
rank: 718
score: 98.91526963975694
patch: return - 1 . $NUMBER$ * x ;
rank: 718
score: 98.86277553013393
patch: } return 0 . $NUMBER$ ;
rank: 718
score: 98.8076400756836
patch: return new exp ( x ) ;
rank: 719
score: 98.85809326171875
patch: return exp ( x + $NUMBER$ ) ;
rank: 719
score: 98.80513218470982
patch: return $NUMBER$ . $NUMBER$ ; }
rank: 720
score: 99.0407381924716
patch: return ( exp ( - x ) ) ; }
rank: 720
score: 98.95587836371527
patch: return Double . Na CaMeL N ; }
rank: 720
score: 98.91360473632812
patch: return 1 . $NUMBER$ * 0 ;
rank: 720
score: 98.85730743408203
patch: return 0 . 1 * 0 ;
rank: 720
score: 98.8056640625
patch: return ( - x ) ; }
rank: 721
score: 98.92355346679688
patch: return - exp ( x , x ) ;
rank: 721
score: 98.85710313585069
patch: = 0 * exp ( x ) ;
rank: 721
score: 98.79913330078125
patch: exp ( 0 . $NUMBER$ ) ;
rank: 722
score: 98.94345431857639
patch: return 0 . $NUMBER$ * 0 ) ;
rank: 722
score: 98.90982394748264
patch: return 0 . 0 * x ; ;
rank: 722
score: 98.85610622829861
patch: return 0 . 0 * x $NUMBER$ ;
rank: 722
score: 98.80407036675348
patch: return exp ( x . x ) ;
rank: 722
score: 98.79735565185547
patch: temp ( x , x ) ;
rank: 723
score: 99.03797496448864
patch: return 0 . $NUMBER$ *= exp ( x ) ;
rank: 723
score: 98.94741482204861
patch: return Double . Na CaMeL N ) ;
rank: 723
score: 98.94296875
patch: return 0 . x * x * x ;
rank: 723
score: 98.918994140625
patch: return ( x - $NUMBER$ . $NUMBER$ ) ;
rank: 723
score: 98.90953826904297
patch: return new Double ( x ) ;
rank: 723
score: 98.85435485839844
patch: return 0 . $NUMBER$ * $STRING$ ;
rank: 723
score: 98.79674614800348
patch: return ( x , x ) ; }
rank: 724
score: 98.94132690429687
patch: return 0 * $NUMBER$ * 0 . $NUMBER$ ;
rank: 724
score: 98.91856079101562
patch: return 0 * exp ( - 0 ) ;
rank: 724
score: 98.85279676649306
patch: return 0 != exp ( x ) ;
rank: 724
score: 98.80176459418402
patch: return 0 exp ( - x ) ;
rank: 725
score: 99.0673495205966
patch: return 0 . 0 * exp ( x ) }
rank: 725
score: 99.0361328125
patch: return 0 . $NUMBER$ * cosh [ 0 ] ;
rank: 725
score: 98.94119601779514
patch: return 0 . 0 * exp 0 ;
rank: 725
score: 98.90888129340277
patch: return - 0 . 0 * 0 ;
rank: 725
score: 98.85214572482639
patch: return $NUMBER$ = exp ( x ) ;
rank: 726
score: 99.06691672585227
patch: return 0 return 0 * exp ( x ) ;
rank: 726
score: 98.9420394897461
patch: / * return 0 . 0 ;
rank: 726
score: 98.94059753417969
patch: return $NUMBER$ * 0 . $NUMBER$ ;
rank: 726
score: 98.90733506944444
patch: return 1 . 0 ( x ) ;
rank: 726
score: 98.85036214192708
patch: return exp ( $NUMBER$ + x ) ;
rank: 726
score: 98.80021158854167
patch: return $NUMBER$ . $NUMBER$ ( x ) ;
rank: 726
score: 98.79471842447917
patch: return 0 ; } / * * /
rank: 727
score: 99.0662841796875
patch: return 0 . $NUMBER$ * compute ( x ) ;
rank: 727
score: 98.9399658203125
patch: return $NUMBER$ * exp ( x ) ; ;
rank: 727
score: 98.90578884548611
patch: return Math . round ( x ) ;
rank: 727
score: 98.84840901692708
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 727
score: 98.79861111111111
patch: return 0 ( x - x ) ;
rank: 728
score: 99.03550026633523
patch: return ( ( double ) 0 . $NUMBER$ ) ;
rank: 728
score: 98.940966796875
patch: return 0 . 0 ( x ) ; }
rank: 728
score: 98.90118408203125
patch: return 0 . 0 * ( x ;
rank: 728
score: 98.84818267822266
patch: return 0 * 0 * $NUMBER$ ;
rank: 728
score: 98.79855007595486
patch: return $NUMBER$ * ( - x ) ;
rank: 728
score: 98.79327392578125
patch: / exp ( - x ) ;
rank: 729
score: 98.93417697482639
patch: return 0 . 0 * exp x ;
rank: 729
score: 98.91514892578125
patch: return exp ( x , - 0 ) ;
rank: 729
score: 98.90070258246527
patch: return - 1 . $NUMBER$ * $NUMBER$ ;
rank: 729
score: 98.79547119140625
patch: x = x + 0 . $NUMBER$ ;
rank: 729
score: 98.79278564453125
patch: * / exp ( - x ) ;
rank: 730
score: 99.03394775390625
patch: return ( exp ( x ) ) ; }
rank: 730
score: 98.93324279785156
patch: return 0 * 0 * 0 ;
rank: 730
score: 98.91292114257813
patch: return 0 * exp ( - 1 ) ;
rank: 730
score: 98.90059407552083
patch: return ( double ) 0 . $NUMBER$ ;
rank: 730
score: 98.84803771972656
patch: if ( exp ( x ) ;
rank: 730
score: 98.79480852399554
patch: return 0 ( x ) ;
rank: 730
score: 98.79236518012152
patch: return 0 . 0 . $NUMBER$ ; }
rank: 731
score: 99.03281471946023
patch: return 0 . $NUMBER$ * exp [ $NUMBER$ ] ;
rank: 731
score: 98.9324951171875
patch: return 0 . round ( x ) ;
rank: 731
score: 98.91426391601563
patch: return new exp ( x , 0 ) ;
rank: 731
score: 98.91161499023437
patch: return ( x - $NUMBER$ ) - x ;
rank: 731
score: 98.84633382161458
patch: return exp ( x ) - 0 ;
rank: 731
score: 98.79079861111111
patch: return 0 . min ( x ) ;
rank: 731
score: 98.78778076171875
patch: return - x - x ;
rank: 732
score: 98.93061659071181
patch: return ( 0 . $NUMBER$ ) ) ;
rank: 732
score: 98.90921630859376
patch: return 0 + exp ( - $NUMBER$ ) ;
rank: 732
score: 98.89838409423828
patch: return ( x / $NUMBER$ ) ;
rank: 732
score: 98.84623209635417
patch: return 0 + 0 ;
rank: 732
score: 98.78498840332031
patch: return x . [ x ] ;
rank: 733
score: 99.06377618963069
patch: return 0 + exp ( x + $NUMBER$ ) ;
rank: 733
score: 98.92987932477679
patch: return 0 . ( ) ;
rank: 733
score: 98.9099609375
patch: return new exp ( x , x ) ;
rank: 733
score: 98.90847778320312
patch: return 0 . size ( ) ;
rank: 733
score: 98.84562174479167
patch: return exp ( x ) + 0 ;
rank: 734
score: 98.9384033203125
patch: return 0 . 0 * / ( x ;
rank: 734
score: 98.92668321397569
patch: return $NUMBER$ * exp ( x ) .
rank: 734
score: 98.90778198242188
patch: return $STRING$ * exp ( - x ) ;
rank: 734
score: 98.78594207763672
patch: / / exp ( x ) ;
rank: 735
score: 98.90728149414062
patch: return $NUMBER$ . - exp ( x ) ;
rank: 735
score: 98.84397670200893
patch: if ( x == 0 )
rank: 735
score: 98.78587995256696
patch: x = - x ; }
rank: 735
score: 98.778076171875
patch: x = 0 ;
rank: 736
score: 98.93667263454861
patch: return 0 . 0 ; } * /
rank: 736
score: 98.92432996961806
patch: return 0 * max ( x ) ;
rank: 736
score: 98.89063178168402
patch: return 0 * x ( x ) ;
rank: 736
score: 98.84299045138889
patch: return 1 . exp ( x ) ;
rank: 736
score: 98.77782331194196
patch: return cosh ( x ) ;
rank: 737
score: 98.93637084960938
patch: return 0 . $NUMBER$ * value ;
rank: 737
score: 98.92264133029514
patch: return 0 . exp ( x ) .
rank: 737
score: 98.88956705729167
patch: return 1 . $NUMBER$ ( x ) ;
rank: 737
score: 98.84255642361111
patch: return 0 . $NUMBER$ * x ) /
rank: 737
score: 98.78407118055556
patch: if ( x <= 0 . 0 )
rank: 738
score: 98.93587917751736
patch: return 0 . $NUMBER$ ; } ) ;
rank: 738
score: 98.88943820529514
patch: return 0 . $NUMBER$ ( 0 ) ;
rank: 738
score: 98.78343200683594
patch: return 0 . $NUMBER$ ) ; }
rank: 739
score: 99.02894176136364
patch: return ( exp ( x ) > $NUMBER$ ) ;
rank: 739
score: 98.93587239583333
patch: return 0 . $NUMBER$ exp ( ) ;
rank: 739
score: 98.90053982204861
patch: return exp ( x ) : 0 ;
rank: 739
score: 98.88896348741319
patch: / * / return 0 . $NUMBER$ ;
rank: 739
score: 98.84109836154514
patch: return 0 * exp ( $STRING$ ) ;
rank: 739
score: 98.77937316894531
patch: temp = exp ( x ) ;
rank: 740
score: 99.02883078835227
patch: return ) . $NUMBER$ * exp ( x ) ;
rank: 740
score: 98.83977593315973
patch: return exp ( x ) & 0 ;
rank: 740
score: 98.77931043836806
patch: return 0 . $NUMBER$ * exp ( x
rank: 740
score: 98.7519302368164
patch: return double ( - x ) ;
rank: 741
score: 99.02752685546875
patch: return $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 741
score: 98.83732774522569
patch: } return 0 . $NUMBER$ * 0 ;
rank: 741
score: 98.77916802300348
patch: return / exp ( - x ) ;
rank: 742
score: 99.02605646306819
patch: return 0 . max * exp ( x ) ;
rank: 742
score: 98.93134765625
patch: throw new Runtime CaMeL Exception ( x ) ;
rank: 742
score: 98.91233995225694
patch: return exp ( x ) . 0 ;
rank: 742
score: 98.83723280164931
patch: return false * exp ( x ) ;
rank: 742
score: 98.77893744574652
patch: return exp ( x + 1 ) ;
rank: 742
score: 98.75138346354167
patch: return x + x ;
rank: 743
score: 99.02515758167614
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ ; }
rank: 743
score: 98.9296875
patch: return 0 . $NUMBER$ ; } else * /
rank: 743
score: 98.8840103149414
patch: return 1 . 0 * 0 ;
rank: 743
score: 98.77857123480902
patch: double cosh = exp ( x ) ;
rank: 744
score: 99.02512428977273
patch: return 0 . $NUMBER$ >= exp ( x ) ;
rank: 744
score: 98.89375305175781
patch: return ( 1 . $NUMBER$ ) ;
rank: 744
score: 98.88945176866319
patch: += exp ( x , 0 ) ;
rank: 744
score: 98.83448028564453
patch: return x * 0 . $NUMBER$ ;
rank: 744
score: 98.7470703125
patch: x = ( - x ) ;
rank: 745
score: 98.90902709960938
patch: return 0 * $NUMBER$ * x ;
rank: 745
score: 98.89351981026786
patch: += exp ( x ) ;
rank: 745
score: 98.77829996744792
patch: return 0 ; } }
rank: 745
score: 98.74491882324219
patch: cosh ( x , x ) ;
rank: 746
score: 98.92487250434027
patch: return 0 . $NUMBER$ * / 0 ;
rank: 746
score: 98.90797932942708
patch: return 0 . - 0 . $NUMBER$ ;
rank: 746
score: 98.87948947482639
patch: return Math . ceil ( x ) ;
rank: 746
score: 98.83265686035156
patch: throw ( 0 . 0 ) ;
rank: 746
score: 98.77684783935547
patch: if ( x <= $NUMBER$ ) {
rank: 746
score: 98.74125671386719
patch: return 0 ; } return 0 ;
rank: 747
score: 99.05498712713069
patch: return 0 * exp ( 0 + x ) ;
rank: 747
score: 99.0230712890625
patch: return ( exp ( - $NUMBER$ ) ) ; }
rank: 747
score: 98.87868245442708
patch: return exp ( x / $NUMBER$ ) ;
rank: 747
score: 98.73908342633929
patch: cosh ( - x ) ;
rank: 748
score: 99.02302856445313
patch: return ( $NUMBER$ . $NUMBER$ * x ) ;
rank: 748
score: 98.90294053819444
patch: return exp ( x ) ; ) ;
rank: 748
score: 98.88134087456598
patch: return cosh - exp ( x ) ;
rank: 748
score: 98.83059692382812
patch: return ( 1 . 0 ) ;
rank: 748
score: 98.76966203962054
patch: return 0 ; } else {
rank: 748
score: 98.73843383789062
patch: return x + x + x ;
rank: 749
score: 99.02197875976563
patch: return ( exp ( - 1 ) ) ;
rank: 749
score: 98.91914198133681
patch: return Double . MIN _ VALUE ; }
rank: 749
score: 98.8998031616211
patch: return 0 . ) * 0 ;
rank: 749
score: 98.88009304470486
patch: return cosh + exp ( x ) ;
rank: 749
score: 98.76961844308036
patch: return 0 . - x ;
rank: 749
score: 98.73723602294922
patch: return 0 + x + x ;
rank: 750
score: 99.02153986150569
patch: return ( double ) exp ( - $NUMBER$ ) ;
rank: 750
score: 98.87741427951389
patch: return - 1 . 0 * $NUMBER$ ;
rank: 750
score: 98.82379913330078
patch: return $NUMBER$ . $NUMBER$ + x ;
rank: 750
score: 98.76773834228516
patch: if ( x <= 0 ) {
rank: 751
score: 99.05305619673295
patch: return ( 0 ) * exp ( x ) ;
rank: 751
score: 98.89775254991319
patch: return new 0 exp ( x ) ;
rank: 751
score: 98.87603759765625
patch: return ( double ) ( x ) ;
rank: 751
score: 98.8231201171875
patch: return 0 . $NUMBER$ - $NUMBER$ ;
rank: 752
score: 99.05226828835227
patch: return 0 . $NUMBER$ * next ( x ) ;
rank: 752
score: 98.91733805338542
patch: return 0 . 0 * exp ( ;
rank: 752
score: 98.89650472005208
patch: return 0 * exp ( x ) *
rank: 752
score: 98.87346733940973
patch: return new double [ 1 ] ; }
rank: 752
score: 98.87261284722223
patch: return double CaMeL Value ( 0 ) ;
rank: 752
score: 98.82068888346355
patch: return 0 = x ;
rank: 752
score: 98.75837707519531
patch: exp ( x - $NUMBER$ ) ;
rank: 753
score: 99.0195645419034
patch: return exp ( - x ) ; } else {
rank: 753
score: 98.89619445800781
patch: return 0 . x * x ;
rank: 753
score: 98.87261284722223
patch: return exp ( x * $NUMBER$ ) ;
rank: 753
score: 98.81915283203125
patch: return value ( x ) ;
rank: 754
score: 99.052001953125
patch: return 0 * exp ( x ) return 0 ;
rank: 754
score: 98.87245686848958
patch: return 0 . $NUMBER$ [ $NUMBER$ ] ;
rank: 754
score: 98.87029351128473
patch: double CaMeL Value ( x ) ; ;
rank: 754
score: 98.8182601928711
patch: value = exp ( x ) ;
rank: 754
score: 98.75666046142578
patch: if ( x >= 0 ) {
rank: 754
score: 98.73065185546875
patch: return 0 / x ;
rank: 755
score: 98.89388275146484
patch: return $NUMBER$ . ( x ) ;
rank: 755
score: 98.86967637803819
patch: return Math . abs ( 0 ) ;
rank: 755
score: 98.8165054321289
patch: return 0 . $NUMBER$ : 0 ;
rank: 756
score: 99.01847700639205
patch: return ( exp ( x ) / $NUMBER$ ) ;
rank: 756
score: 98.89364963107639
patch: return 0 * abs ( x ) ;
rank: 756
score: 98.86911349826389
patch: / * / return 0 . 0 ;
rank: 756
score: 98.81591033935547
patch: return $NUMBER$ . 0 * x ;
rank: 757
score: 98.892578125
patch: return 0 * ( x ) ;
rank: 757
score: 98.86820475260417
patch: return 0 . - ( x ) ;
rank: 757
score: 98.86178249782986
patch: return - ( x - $NUMBER$ ) ;
rank: 757
score: 98.81373596191406
patch: return 0 . 1 * $NUMBER$ ;
rank: 757
score: 98.74952915736607
patch: return exp ( 0 ) ;
rank: 758
score: 99.01727294921875
patch: return 0 . $NUMBER$ * x - $NUMBER$ ;
rank: 758
score: 98.86785888671875
patch: return - 1 . 0 * x ;
rank: 758
score: 98.86128452845982
patch: return ( - $NUMBER$ ) ;
rank: 758
score: 98.8133544921875
patch: d ( x , x ) ;
rank: 758
score: 98.72383117675781
patch: return ( x * x ) ;
rank: 759
score: 98.90667046440973
patch: return 0 ; } else return 0 ;
rank: 759
score: 98.88903130425348
patch: return 0 . $NUMBER$ * x ; /
rank: 759
score: 98.80792236328125
patch: return 0 . $NUMBER$ * 1 ;
rank: 759
score: 98.74649810791016
patch: return - x ; } else {
rank: 759
score: 98.72351837158203
patch: result ( x , x ) ;
rank: 760
score: 99.01523659446023
patch: return 0 . 0 * exp ( - ) ;
rank: 760
score: 98.90557861328125
patch: return Double . $NUMBER$ ( x ) ;
rank: 760
score: 98.88866509331598
patch: return ) . exp ( x ) ;
rank: 760
score: 98.86078643798828
patch: return 0 / HEX _ $NUMBER$ ;
rank: 760
score: 98.80378723144531
patch: return 0 * x * 0 ;
rank: 761
score: 98.86452907986111
patch: return 0 . $NUMBER$ * $NUMBER$ ) ;
rank: 761
score: 98.86005995008681
patch: result = new double [ $NUMBER$ ] ;
rank: 761
score: 98.71995326450893
patch: return 0 ; } * /
rank: 762
score: 99.01286177201705
patch: return 0 . $NUMBER$ * x + - x ;
rank: 762
score: 98.90287780761719
patch: return 0 . $NUMBER$ ; } ;
rank: 762
score: 98.83321126302083
patch: return Math . cosh ( x ) ;
rank: 762
score: 98.80001831054688
patch: return 0 . $NUMBER$ ; * /
rank: 762
score: 98.71868896484375
patch: return ( x > 0 ) ;
rank: 763
score: 98.88753255208333
patch: return 0 . * 0 . $NUMBER$ ;
rank: 763
score: 98.8505859375
patch: return ( - $NUMBER$ . $NUMBER$ ) ;
rank: 763
score: 98.74144744873047
patch: if ( x >= $NUMBER$ ) {
rank: 763
score: 98.71697235107422
patch: return * exp ( x ) ;
rank: 764
score: 98.89912245008681
patch: return Double . format ( x ) ;
rank: 764
score: 98.74011993408203
patch: return 0 [ $NUMBER$ ] ; }
rank: 764
score: 98.71473693847656
patch: return x ( - x ) ;
rank: 765
score: 98.89870198567708
patch: return Double . round ( x ) ;
rank: 765
score: 98.88245307074652
patch: exp ( x ) ; return x ;
rank: 765
score: 98.73761749267578
patch: return new long [ $NUMBER$ ] ;
rank: 766
score: 99.01089477539062
patch: return double $NUMBER$ * exp ( x ) ;
rank: 766
score: 98.89451381138393
patch: return 0 . 0 ) ;
rank: 766
score: 98.84861246744792
patch: args = new double [ $NUMBER$ ] ;
rank: 766
score: 98.79499053955078
patch: return 0 . $NUMBER$ ; break ;
rank: 766
score: 98.73712158203125
patch: exp ( - 0 ) ;
rank: 767
score: 99.01088645241477
patch: return ( exp ( x , $NUMBER$ ) ) ;
rank: 767
score: 98.88132052951389
patch: return 0 exp exp ( x ) ;
rank: 767
score: 98.71102905273438
patch: return - ( - x ) ;
rank: 768
score: 98.88060760498047
patch: return Double . 0 * x ;
rank: 768
score: 98.855224609375
patch: return - ( 0 . 0 ) ;
rank: 768
score: 98.79169464111328
patch: return 0 . 1 + x ;
rank: 768
score: 98.73229217529297
patch: final exp ( - x ) ;
rank: 769
score: 99.01888275146484
patch: return 0 . length ( ) ;
rank: 769
score: 99.0106201171875
patch: double $NUMBER$ . 0 * exp ( x ) ;
rank: 769
score: 98.88734944661458
patch: return Double . ceil ( x ) ;
rank: 769
score: 98.87887234157986
patch: return 0 . $NUMBER$ * ( 0 ;
rank: 769
score: 98.79119873046875
patch: return return exp ( x ) ;
rank: 769
score: 98.70506286621094
patch: x = x + - x ;
rank: 770
score: 99.01016845703126
patch: return ( exp ( - 0 ) ) ;
rank: 770
score: 98.88439178466797
patch: return Double . POSITIVE _ INFINITY ;
rank: 770
score: 98.87814670138889
patch: return Math . exp ( x ) ;
rank: 770
score: 98.79017857142857
patch: result = 0 . $NUMBER$ ;
rank: 770
score: 98.72834777832031
patch: return new float [ $NUMBER$ ] ;
rank: 770
score: 98.70406341552734
patch: return 0 . $NUMBER$ * true ;
rank: 771
score: 99.01626586914062
patch: return 0 * exp ( x ) . ;
rank: 771
score: 99.00841175426136
patch: return - $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 771
score: 98.88325500488281
patch: * / return 0 . $NUMBER$ ;
rank: 771
score: 98.85169813368056
patch: return - 1 . $NUMBER$ * 0 ;
rank: 771
score: 98.78888702392578
patch: return exp exp ( x ) ;
rank: 771
score: 98.724853515625
patch: return ( 0 - x ) ;
rank: 771
score: 98.70088958740234
patch: return new int [ 0 ] ;
rank: 772
score: 99.0081454190341
patch: return 0 . start * exp ( x ) ;
rank: 772
score: 98.78797912597656
patch: return 0 . $NUMBER$ . $NUMBER$ ;
rank: 772
score: 98.72415924072266
patch: exp ( x , $NUMBER$ ) ;
rank: 772
score: 98.70024108886719
patch: return 0 ; } return x ;
rank: 773
score: 98.83656141493056
patch: return x * HEX _ $NUMBER$ ; }
rank: 774
score: 99.0062255859375
patch: return 0 . x - exp ( x ) ;
rank: 774
score: 98.87973361545139
patch: return 0 . 0 ; } ) ;
rank: 774
score: 98.8504638671875
patch: return 0 . 0 * 1 ;
rank: 774
score: 98.83498806423611
patch: return ( x - $NUMBER$ ) ; }
rank: 774
score: 98.81751844618056
patch: += exp ( x , x ) ;
rank: 774
score: 98.78314208984375
patch: return 0 . $NUMBER$ return 0 ;
rank: 774
score: 98.7205810546875
patch: return x - x ; }
rank: 774
score: 98.6985092163086
patch: return 0 . $NUMBER$ * false ;
rank: 775
score: 99.00587047230114
patch: return 0 . $NUMBER$ * x - x ) ;
rank: 775
score: 98.87875027126736
patch: assert 0 < exp ( x ) ;
rank: 775
score: 98.78182983398438
patch: return exp ( ) ;
rank: 775
score: 98.72030639648438
patch: return $NUMBER$ * exp ( x ;
rank: 775
score: 98.6983642578125
patch: break ( x , x ) ;
rank: 776
score: 98.8699951171875
patch: return $NUMBER$ exp ( x ) ;
rank: 776
score: 98.84192572699652
patch: return $NUMBER$ . 0 ( x ) ;
rank: 776
score: 98.83181423611111
patch: return 0 . $NUMBER$ * 0 ; }
rank: 776
score: 98.69779968261719
patch: return $NUMBER$ ( - x ) ;
rank: 777
score: 99.00626220703126
patch: { return 0 * exp ( x ) ;
rank: 777
score: 98.87818060980902
patch: return 0 . 0 exp ( ) ;
rank: 777
score: 98.86906602647569
patch: exp ( x ) ; return $NUMBER$ ;
rank: 777
score: 98.83088514539931
patch: return ( - x ) - x ;
rank: 777
score: 98.71493530273438
patch: z = exp ( x ) ;
rank: 777
score: 98.69729614257812
patch: return ( x . x ) ;
rank: 778
score: 99.00327370383523
patch: result = 0 . $NUMBER$ * ( x ) ;
rank: 778
score: 98.77993774414062
patch: return 0 . 0 - x ;
rank: 778
score: 98.69712829589844
patch: x = x . - x ;
rank: 779
score: 98.87491607666016
patch: return Double . MAX _ VALUE ;
rank: 779
score: 98.84089006696429
patch: return 0 . - 0 ;
rank: 779
score: 98.77983856201172
patch: return 0 * x + x ;
rank: 779
score: 98.70947265625
patch: exp ( 0 , x ) ;
rank: 779
score: 98.69646453857422
patch: return x . cosh ( ) ;
rank: 780
score: 98.77941131591797
patch: return $NUMBER$ * exp ( ) ;
rank: 780
score: 98.69583129882812
patch: return exp ( x , 0 .
rank: 781
score: 98.86599392361111
patch: return Double . Na CaMeL N ; ;
rank: 781
score: 98.8402099609375
patch: return 0 [ 0 ] ;
rank: 781
score: 98.77920532226562
patch: else { return 0 . $NUMBER$ ;
rank: 781
score: 98.70847865513393
patch: return $NUMBER$ . 0 ; }
rank: 781
score: 98.69402204241071
patch: return 0 [ $NUMBER$ ] ;
rank: 782
score: 98.86270904541016
patch: return $NUMBER$ * x * x ;
rank: 782
score: 98.840087890625
patch: return 0 . $NUMBER$ * Float ;
rank: 782
score: 98.70751953125
patch: exp ( x - 0 ) ;
rank: 782
score: 98.69283040364583
patch: cosh ( x ) ;
rank: 783
score: 98.83998616536458
patch: return - 0 . $NUMBER$ . 0 ;
rank: 783
score: 98.82057698567708
patch: return $NUMBER$ . ( - x ) ;
rank: 783
score: 98.77761840820312
patch: return 0 . 0 * this ;
rank: 783
score: 98.7033462524414
patch: exp ( x + 1 ) ;
rank: 784
score: 98.99857177734376
patch: return x + exp ( - $NUMBER$ ) ;
rank: 784
score: 98.86159939236111
patch: return 0 . $NUMBER$ ) * 0 ;
rank: 784
score: 98.86046006944444
patch: return 0 . $NUMBER$ ; } else ;
rank: 784
score: 98.83793131510417
patch: return 0 . 0 * 0 ) ;
rank: 784
score: 98.81611633300781
patch: return ( x - 0 ) ;
rank: 784
score: 98.70063999720982
patch: if ( x > $NUMBER$ )
rank: 785
score: 98.9954345703125
patch: if ( x < $NUMBER$ . 0 ) {
rank: 785
score: 98.80119493272569
patch: return new double [ - x ] ;
rank: 785
score: 98.70010375976562
patch: return exp ( 0 ) ; }
rank: 785
score: 98.69065638950893
patch: break ( - x ) ;
rank: 786
score: 98.86038970947266
patch: return Double . $NUMBER$ * 0 ;
rank: 786
score: 98.81214057074652
patch: return ( - $NUMBER$ ) / $NUMBER$ ;
rank: 786
score: 98.69993591308594
patch: return cosh ( x ) ; }
rank: 787
score: 98.99395141601562
patch: return ( x > 0 . 0 ) ;
rank: 787
score: 98.85635715060764
patch: return 0 * exp ( 1 ) ;
rank: 788
score: 98.992236328125
patch: if ( x < 0 . $NUMBER$ ) {
rank: 788
score: 98.85546196831598
patch: return exp ( x ) ; / /
rank: 788
score: 98.85500081380208
patch: assert 0 != exp ( x ) ;
rank: 788
score: 98.76837158203125
patch: = 0 . $NUMBER$ * x ;
rank: 788
score: 98.68966674804688
patch: return x . double ( ) ;
rank: 789
score: 98.83294677734375
patch: return 0 . 0 * exp ;
rank: 789
score: 98.80402289496527
patch: += 0 * exp ( x ) ;
rank: 789
score: 98.76832580566406
patch: return 0 . $NUMBER$ : 1 ;
rank: 789
score: 98.68961879185268
patch: x = 0 - x ;
rank: 790
score: 98.84898376464844
patch: return 0 . 0 * value ;
rank: 790
score: 98.76718575613839
patch: } return 0 . 0 ;
rank: 790
score: 98.69611358642578
patch: return / exp ( x ) ;
rank: 791
score: 98.986328125
patch: double 0 . $NUMBER$ * ( x ) ;
rank: 791
score: 98.82286241319444
patch: return Math . floor ( x ) ;
rank: 791
score: 98.80350494384766
patch: return $NUMBER$ * HEX _ $NUMBER$ ;
rank: 791
score: 98.76697540283203
patch: if ( x == 0 ) {
rank: 791
score: 98.69266183035714
patch: if ( x < $NUMBER$ )
rank: 791
score: 98.68647766113281
patch: x -= exp ( x ) ;
rank: 792
score: 98.8485107421875
patch: return 0 . copy ( x ) ;
rank: 792
score: 98.82221137152777
patch: double 0 : exp ( x ) ;
rank: 792
score: 98.69264221191406
patch: x = 0 . $NUMBER$ ; }
rank: 793
score: 98.98551635742187
patch: return 0 . $NUMBER$ * exp - x ;
rank: 793
score: 98.82162814670139
patch: return 0 . 0 * $NUMBER$ ) ;
rank: 793
score: 98.80038113064236
patch: return exp ( - $NUMBER$ ) ; }
rank: 793
score: 98.76343536376953
patch: return exp ( ) + x ;
rank: 793
score: 98.69187927246094
patch: exp ( x , 1 ) ;
rank: 793
score: 98.68301827566964
patch: return double ( x ) ;
rank: 794
score: 98.76287841796875
patch: return 0 . 0 * x )
rank: 794
score: 98.69028145926339
patch: if ( x > 0 )
rank: 794
score: 98.68252563476562
patch: * / x = - x ;
rank: 795
score: 98.98125
patch: return ( * exp ( x ) ) ;
rank: 795
score: 98.84688991970486
patch: return exp ( x ) ; / ;
rank: 796
score: 98.84351942274306
patch: return Double . MAX _ VALUE ; }
rank: 796
score: 98.8209228515625
patch: return 0 * 0 . 0 ;
rank: 796
score: 98.79849582248264
patch: buf = new double [ $NUMBER$ ] ;
rank: 796
score: 98.7615966796875
patch: return exp ( double ) x ;
rank: 796
score: 98.68801443917411
patch: if ( x < 0 )
rank: 796
score: 98.68173217773438
patch: return ( x * $NUMBER$ ) ;
rank: 797
score: 98.97422485351562
patch: return 0 . $NUMBER$ - 0 . $NUMBER$ ;
rank: 797
score: 98.97416381835937
patch: return 0 . $NUMBER$ * $NUMBER$ / x ;
rank: 797
score: 98.84217664930556
patch: return Math . min ( x ) ;
rank: 797
score: 98.81575012207031
patch: return 0 . 0 * Float ;
rank: 797
score: 98.76091003417969
patch: return 0 * 0 + x ;
rank: 797
score: 98.68777029854911
patch: return - x ; } }
rank: 798
score: 98.970849609375
patch: if ( x > 0 . $NUMBER$ ) {
rank: 798
score: 98.77032470703125
patch: return 0 . 0 * exp (
rank: 798
score: 98.68753051757812
patch: exp ( x - 1 ) ;
rank: 799
score: 98.84463161892361
patch: return 0 * 0 * x ) ;
rank: 799
score: 98.84026336669922
patch: return 0 . 0 ; } ;
rank: 799
score: 98.79551188151042
patch: return 0 . ( x ) ; }
rank: 799
score: 98.75955636160714
patch: return 0 . $NUMBER$ 0 ;
rank: 799
score: 98.6865743001302
patch: exp ( 0 ) ;
rank: 800
score: 98.9703125
patch: return 0 * 0 exp ( x ) ;
rank: 800
score: 98.84364149305556
patch: return 0 . $NUMBER$ * 0 ; else
rank: 800
score: 98.83990478515625
patch: return 0 . 0 * / 0 ;
rank: 800
score: 98.76766967773438
patch: return exp ( x , ) ;
rank: 800
score: 98.75709025065105
patch: return 0 + $NUMBER$ ;
rank: 800
score: 98.68626185825893
patch: return 0 . x ; }
rank: 801
score: 98.96997833251953
patch: return 0 = 0 . $NUMBER$ ;
rank: 801
score: 98.96610107421876
patch: if ( x >= 0 . 0 ) {
rank: 801
score: 98.84210205078125
patch: return 0 * $NUMBER$ * 0 ;
rank: 801
score: 98.75627899169922
patch: if ( 0 == x ) {
rank: 801
score: 98.68376922607422
patch: return ( x - 1 ) ;
rank: 801
score: 98.67674255371094
patch: x = - x . x ;
rank: 802
score: 98.965966796875
patch: double 0 * exp ( - $NUMBER$ ) ;
rank: 802
score: 98.83910369873047
patch: return 0 / 0 . $NUMBER$ ;
rank: 802
score: 98.79252624511719
patch: return 0 / $NUMBER$ . $NUMBER$ ;
rank: 802
score: 98.75536346435547
patch: return ( x ) * 0 ;
rank: 803
score: 98.967529296875
patch: return 0 . 1 exp ( x ) ;
rank: 803
score: 98.83821614583333
patch: return 0 . $NUMBER$ * ( ) ;
rank: 803
score: 98.8021240234375
patch: * / return 0 . 0 ;
rank: 803
score: 98.67535400390625
patch: return ( x + $NUMBER$ ) ;
rank: 804
score: 98.9652587890625
patch: return 0 == exp ( - x ) ;
rank: 804
score: 98.838134765625
patch: return new 0 ( x ) ;
rank: 804
score: 98.8017807006836
patch: value CaMeL Of ( x ) ;
rank: 804
score: 98.7513198852539
patch: return 0 * $NUMBER$ + x ;
rank: 804
score: 98.67381286621094
patch: return ( x + 0 ) ;
rank: 805
score: 98.9666748046875
patch: return ( x ) exp ( x ) ;
rank: 805
score: 98.83639865451389
patch: return Math . max ( x ) ;
rank: 805
score: 98.7981948852539
patch: return 0 . $NUMBER$ * Double ;
rank: 805
score: 98.7499008178711
patch: return 0 . ) * x ;
rank: 805
score: 98.67434692382812
patch: exp ( x ) ; } }
rank: 806
score: 98.83789740668402
patch: return return 0 . $NUMBER$ * x ;
rank: 806
score: 98.74970245361328
patch: throw ( 0 . $NUMBER$ ) ;
rank: 806
score: 98.67340087890625
patch: return new int [ x ] ;
rank: 806
score: 98.67332240513393
patch: return ( 0 ) ; }
rank: 807
score: 98.78935895647321
patch: return 0 . $NUMBER$ ] ;
rank: 807
score: 98.78218078613281
patch: return exp ( - 1 ) ;
rank: 807
score: 98.7496566772461
patch: return 0 . 0 * ) ;
rank: 807
score: 98.7397969563802
patch: return ( 0 ) ;
rank: 807
score: 98.67296600341797
patch: return 0 . 0 ) ; }
rank: 807
score: 98.66948590959821
patch: return 0 * - x ;
rank: 808
score: 98.96034545898438
patch: return x - exp ( - $NUMBER$ ) ;
rank: 808
score: 98.83714463975694
patch: return 0 ) exp ( x ) ;
rank: 808
score: 98.66648646763393
patch: return 0 / - x ;
rank: 809
score: 98.96376953125
patch: return 0 $NUMBER$ * exp ( x ) ;
rank: 809
score: 98.78694152832031
patch: return $NUMBER$ . 0 * $NUMBER$ ;
rank: 809
score: 98.74773406982422
patch: return 0 . ) * $NUMBER$ ;
rank: 809
score: 98.66622488839286
patch: return - x . x ;
rank: 810
score: 98.96282958984375
patch: return exp ( 0 , x ) ;
rank: 810
score: 98.95863647460938
patch: return $NUMBER$ . $NUMBER$ * x - x ;
rank: 810
score: 98.82627360026042
patch: return 0 . $NUMBER$ exp ( x ;
rank: 810
score: 98.7475814819336
patch: return 0 + $NUMBER$ . $NUMBER$ ;
rank: 810
score: 98.67147391183036
patch: return 0 . true ; }
rank: 810
score: 98.66507393973214
patch: return 0 - - x ;
rank: 811
score: 98.95771484375
patch: return exp ( x , - 1 ) ;
rank: 811
score: 98.74469757080078
patch: return exp ( x ) x ;
rank: 811
score: 98.71760864257813
patch: return - 0 ;
rank: 811
score: 98.67043631417411
patch: final double x = x ;
rank: 811
score: 98.66456821986607
patch: x = 0 + x ;
rank: 812
score: 98.959033203125
patch: return 0 . $NUMBER$ * 0 / x ;
rank: 812
score: 98.78490447998047
patch: return float CaMeL Value ( ) ;
rank: 812
score: 98.66885375976562
patch: division ( x , x ) ;
rank: 812
score: 98.66136823381696
patch: return - x + x ;
rank: 813
score: 98.95687866210938
patch: double $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 813
score: 98.82334899902344
patch: return 0 . $NUMBER$ * x *
rank: 813
score: 98.74259948730469
patch: return 0 . ) + x ;
rank: 814
score: 98.95673828125
patch: return ( ( double ) - x ) ;
rank: 814
score: 98.82071261935764
patch: return 0 . $NUMBER$ * double ) ;
rank: 814
score: 98.78096771240234
patch: return 0 . 0 * $STRING$ ;
rank: 814
score: 98.74240112304688
patch: return 0 + 0 . 0 ;
rank: 814
score: 98.66827392578125
patch: / exp ( x ) ;
rank: 814
score: 98.65640258789062
patch: return 0 ;
rank: 815
score: 98.956396484375
patch: return 0 . $NUMBER$ * exp $NUMBER$ ; }
rank: 815
score: 98.8208999633789
patch: return 0 . x * 0 ;
rank: 815
score: 98.7421875
patch: } else { return 0 ; }
rank: 815
score: 98.70885467529297
patch: break ( x , 0 ) ;
rank: 815
score: 98.66769409179688
patch: return - x - x ; }
rank: 815
score: 98.65249197823661
patch: x = 0 . x ;
rank: 816
score: 98.81977844238281
patch: return ( x ) * x ;
rank: 816
score: 98.81675889756944
patch: return 0 . 0 * / $NUMBER$ ;
rank: 816
score: 98.66747283935547
patch: x = cosh ( x ) ;
rank: 816
score: 98.63005719866071
patch: return 0 + x ; }
rank: 817
score: 98.95554809570312
patch: return ( ) * exp ( x ) ;
rank: 817
score: 98.93059624565973
patch: return 0 return exp ( x ) ;
rank: 817
score: 98.81675720214844
patch: return 0 . $NUMBER$ / 0 ;
rank: 817
score: 98.77847290039062
patch: return 0 . $NUMBER$ x $NUMBER$ ;
rank: 817
score: 98.62800816127232
patch: x = x . x ;
rank: 818
score: 98.95376247829861
patch: return ( x ) ; } else {
rank: 818
score: 98.81633843315973
patch: return Double . MIN _ VALUE ) ;
rank: 818
score: 98.77801513671875
patch: return 0 . $NUMBER$ * float ;
rank: 818
score: 98.73896789550781
patch: throw ( $STRING$ + x ) ;
rank: 818
score: 98.66288757324219
patch: double ( x , 0 ) ;
rank: 818
score: 98.62698364257812
patch: break ( x ) ;
rank: 819
score: 98.81613498263889
patch: return super . 0 ( x ) ;
rank: 819
score: 98.77166748046875
patch: / / return 0 . $NUMBER$ ;
rank: 819
score: 98.73854064941406
patch: return 0 + 0 * x ;
rank: 820
score: 98.95347290039062
patch: if ( x > $NUMBER$ . 0 ) {
rank: 820
score: 98.81515842013889
patch: return 0 . $NUMBER$ * / $NUMBER$ ;
rank: 820
score: 98.73728942871094
patch: return 0 . $NUMBER$ return $NUMBER$ ;
rank: 821
score: 98.95311279296875
patch: return ( 0 . $NUMBER$ * exp ) ;
rank: 821
score: 98.73409598214286
patch: return exp ( $NUMBER$ ) ;
rank: 821
score: 98.66146850585938
patch: x = ( double ) x ;
rank: 821
score: 98.62186976841518
patch: result = 0 . 0 ;
rank: 822
score: 98.95191192626953
patch: return ( exp ( ) ) ;
rank: 823
score: 98.95049438476562
patch: return exp ( - 1 . $NUMBER$ ) ;
rank: 823
score: 98.79747772216797
patch: return Double . 0 * 0 ;
rank: 823
score: 98.76218959263393
patch: return - $NUMBER$ . $NUMBER$ ;
rank: 823
score: 98.75017547607422
patch: { return exp ( x ) ;
rank: 823
score: 98.73149762834821
patch: return 0 ; return 0 ;
rank: 823
score: 98.7016372680664
patch: cosh ( x , 0 ) ;
rank: 823
score: 98.66016387939453
patch: double exp ( - x ) ;
rank: 823
score: 98.61945452008929
patch: return 0 . $NUMBER$ * ;
rank: 824
score: 98.95034790039062
patch: return 0 . $NUMBER$ * exp $NUMBER$ x ;
rank: 824
score: 98.91622924804688
patch: return exp 0 ( x ) ;
rank: 824
score: 98.81256103515625
patch: return 0 . 0 ; * /
rank: 824
score: 98.73101806640625
patch: return $NUMBER$ . $NUMBER$ * this ;
rank: 824
score: 98.65762765066964
patch: exp ( - $NUMBER$ ) ;
rank: 825
score: 98.80691092354911
patch: return Double . $NUMBER$ ; }
rank: 825
score: 98.76152692522321
patch: return ( 0 . $NUMBER$ ;
rank: 825
score: 98.74420166015625
patch: return 0 . clone ( ) ;
rank: 825
score: 98.72898864746094
patch: return 0 . $NUMBER$ + x )
rank: 825
score: 98.69097028459821
patch: return 0 ; } ) ;
rank: 825
score: 98.6570816040039
patch: return x ; } / * /
rank: 825
score: 98.61439732142857
patch: return 0 ) . $NUMBER$ ;
rank: 826
score: 98.9489990234375
patch: return 0 . $NUMBER$ * double ) x ;
rank: 826
score: 98.80116271972656
patch: return 0 . $NUMBER$ ( ) ;
rank: 826
score: 98.7613754272461
patch: return 0 . 0 ( ) ;
rank: 826
score: 98.72859191894531
patch: return 0 + x * x ;
rank: 826
score: 98.61064801897321
patch: overflow ( - x ) ;
rank: 827
score: 98.91588677300348
patch: { return 0 . $NUMBER$ * 0 ;
rank: 827
score: 98.78841400146484
patch: return 0 * 0 . $NUMBER$ *
rank: 827
score: 98.7603759765625
patch: return long CaMeL Value ( ) ;
rank: 827
score: 98.72838592529297
patch: return ( x ) * $NUMBER$ ;
rank: 827
score: 98.60568673270089
patch: x = 0 . 1 ;
rank: 828
score: 98.78676060267857
patch: return ( x ) ) ;
rank: 829
score: 98.94713134765625
patch: return x + 0 . $NUMBER$ * x ;
rank: 829
score: 98.78645324707031
patch: return $NUMBER$ * 0 * x ;
rank: 829
score: 98.72731018066406
patch: return 1 . $NUMBER$ + x ;
rank: 829
score: 98.72553253173828
patch: { return 0 . $NUMBER$ ; }
rank: 829
score: 98.60162353515625
patch: return ( - 0 ) ;
rank: 830
score: 98.94592895507813
patch: return x - 0 . $NUMBER$ * x ;
rank: 830
score: 98.77635955810547
patch: return 0 . $NUMBER$ * exp 0
rank: 830
score: 98.75398254394531
patch: return 0 . 0 * Double ;
rank: 830
score: 98.71979522705078
patch: return 0 . $NUMBER$ * for (
rank: 830
score: 98.64649309430804
patch: hi ( - x ) ;
rank: 830
score: 98.59969656808036
patch: return x + - x ;
rank: 831
score: 98.94428100585938
patch: return x - $NUMBER$ . $NUMBER$ * x ;
rank: 831
score: 98.77306365966797
patch: return x * x * x ;
rank: 831
score: 98.75386810302734
patch: return 0 . 0 - 0 ;
rank: 831
score: 98.64599609375
patch: temp ( - x ) ;
rank: 831
score: 98.59894670758929
patch: return x . - x ;
rank: 832
score: 98.79216003417969
patch: return - 0 . $NUMBER$ ; }
rank: 832
score: 98.74232482910156
patch: long CaMeL Value ( 0 ) ;
rank: 832
score: 98.72560119628906
patch: return 0 * x ( x ;
rank: 832
score: 98.68192291259766
patch: return max ( - x ) ;
rank: 832
score: 98.63868059430804
patch: if ( x <= $NUMBER$ )
rank: 833
score: 98.94241333007812
patch: return 0 < exp ( - x ) ;
rank: 833
score: 98.91034613715277
patch: return 0 . $NUMBER$ * exp 1 ;
rank: 833
score: 98.79053497314453
patch: return 0 . 0 * / ;
rank: 833
score: 98.72476196289062
patch: return 0 . 0 + $NUMBER$ ;
rank: 833
score: 98.63165283203125
patch: double x = - x ;
rank: 833
score: 98.59781494140626
patch: return 0 ) ;
rank: 834
score: 98.78815460205078
patch: return 0 . 0 / x ;
rank: 834
score: 98.73924255371094
patch: return ( x * 0 ) ;
rank: 834
score: 98.72396850585938
patch: return 0 * x * $NUMBER$ ;
rank: 834
score: 98.6770248413086
patch: return ( x < $NUMBER$ ) ;
rank: 834
score: 98.6309814453125
patch: return exp ( - x ;
rank: 835
score: 98.94038696289063
patch: return . $NUMBER$ * exp ( x ) ;
rank: 835
score: 98.76567077636719
patch: return $NUMBER$ * ( x ) ;
rank: 836
score: 98.7337646484375
patch: return - ( x ) ;
rank: 836
score: 98.72017669677734
patch: return $NUMBER$ . $NUMBER$ - x ;
rank: 836
score: 98.67225646972656
patch: return min ( - x ) ;
rank: 836
score: 98.62929861886161
patch: return 0 . false ; }
rank: 836
score: 98.59325154622395
patch: x += - x ;
rank: 837
score: 98.9390869140625
patch: return double 1 * exp ( x ) ;
rank: 837
score: 98.73184967041016
patch: return 0 . 0 + 0 ;
rank: 837
score: 98.71776326497395
patch: return 0 = 0 ;
rank: 837
score: 98.7061767578125
patch: return ( - $NUMBER$ ) ; }
rank: 837
score: 98.62764485677083
patch: x = x ; }
rank: 837
score: 98.59287806919643
patch: result ( - x ) ;
rank: 838
score: 98.937841796875
patch: return ( x > 0 . $NUMBER$ ) ;
rank: 838
score: 98.72994995117188
patch: return $NUMBER$ . 0 * 0 ;
rank: 838
score: 98.71710205078125
patch: ( exp ( x ) ) ;
rank: 838
score: 98.70352172851562
patch: throw new Exception ( $STRING$ ) ;
rank: 838
score: 98.62691824776786
patch: if ( x <= 0 )
rank: 838
score: 98.5900370279948
patch: return $NUMBER$ * x ;
rank: 839
score: 98.72872161865234
patch: double CaMeL Value ( $NUMBER$ ) ;
rank: 839
score: 98.71621704101562
patch: return 0 . $NUMBER$ + exp ;
rank: 839
score: 98.70063018798828
patch: return cosh * HEX _ $NUMBER$ ;
rank: 839
score: 98.66675567626953
patch: hi ( x , 0 ) ;
rank: 840
score: 98.93220350477431
patch: return ( x > $NUMBER$ ) ] ;
rank: 840
score: 98.88747151692708
patch: exp ( x ) ; return 1 ;
rank: 840
score: 98.72518920898438
patch: float CaMeL Value ( x ) ;
rank: 840
score: 98.71546936035156
patch: return 0 . $NUMBER$ / $NUMBER$ ;
rank: 840
score: 98.58693150111607
patch: x = - - x ;
rank: 841
score: 98.88720703125
patch: return 0 return 0 . $NUMBER$ ;
rank: 841
score: 98.76715850830078
patch: return - 0 . 0 ; }
rank: 841
score: 98.75177764892578
patch: return 0 . $NUMBER$ ; ) ;
rank: 841
score: 98.72201538085938
patch: throw new Error ( $STRING$ ) ;
rank: 841
score: 98.71314493815105
patch: d ( x ) ;
rank: 841
score: 98.66185760498047
patch: return + exp ( x ) ;
rank: 841
score: 98.62312534877232
patch: return x ; } else {
rank: 842
score: 98.88516235351562
patch: return 0 * 0 + 0 ;
rank: 842
score: 98.66110229492188
patch: += exp ( x ) ; }
rank: 842
score: 98.58602469308036
patch: return ( x > $NUMBER$ )
rank: 843
score: 98.76563262939453
patch: return 0 . 0 * double ;
rank: 843
score: 98.70314243861607
patch: return 0 . $NUMBER$ $NUMBER$ ;
rank: 843
score: 98.58342633928571
patch: return - x - $NUMBER$ ;
rank: 844
score: 98.92622680664063
patch: return exp ( ( double ) x ) ;
rank: 844
score: 98.7474136352539
patch: return $NUMBER$ * 0 * 0 ;
rank: 844
score: 98.71713692801339
patch: = exp ( x ) ;
rank: 844
score: 98.70267333984376
patch: return 0 ; ;
rank: 844
score: 98.61825125558036
patch: return - - x ; }
rank: 845
score: 98.70248849051339
patch: return start ( x ) ;
rank: 845
score: 98.617919921875
patch: return 0 ) ; }
rank: 845
score: 98.57071358816964
patch: return ( x ) ; }
rank: 846
score: 98.92542724609375
patch: return ( ( double ) x ) ; }
rank: 846
score: 98.70186941964286
patch: return 0 * x ) ;
rank: 846
score: 98.61771937779018
patch: x = x - 1 ;
rank: 846
score: 98.56959751674107
patch: x = x + 1 ;
rank: 847
score: 98.92413330078125
patch: return 0 , exp ( - $NUMBER$ ) ;
rank: 847
score: 98.68532889229911
patch: return 0 . $NUMBER$ x ;
rank: 847
score: 98.61090959821429
patch: final exp ( x ) ;
rank: 847
score: 98.56312052408855
patch: return $NUMBER$ - x ;
rank: 848
score: 98.73932647705078
patch: return 0 . $NUMBER$ * 0 *
rank: 848
score: 98.7092514038086
patch: double x = 0 . $NUMBER$ ;
rank: 848
score: 98.6883544921875
patch: } else { return 0 ;
rank: 848
score: 98.68332345145089
patch: return 0 . $NUMBER$ exp ;
rank: 848
score: 98.56043497721355
patch: return - - x ;
rank: 849
score: 98.6829605102539
patch: return ( exp ( x ) )
rank: 849
score: 98.55848039899554
patch: return x ( x ) ;
rank: 850
score: 98.73672485351562
patch: return ) * 0 . $NUMBER$ ;
rank: 850
score: 98.70843505859375
patch: return - $NUMBER$ . 0 ;
rank: 850
score: 98.67910766601562
patch: throw new Exception ( x ) ;
rank: 850
score: 98.60445731026786
patch: return $NUMBER$ - x ; }
rank: 851
score: 98.70756530761719
patch: return new double ( x ) ;
rank: 851
score: 98.67679595947266
patch: return cosh ( - $NUMBER$ ) ;
rank: 851
score: 98.55747767857143
patch: / ( - x ) ;
rank: 852
score: 98.9176513671875
patch: return $NUMBER$ * 0 . $NUMBER$ * exp ;
rank: 852
score: 98.60155378069196
patch: if ( x >= 0 )
rank: 853
score: 98.91731567382813
patch: return ( x - 0 . 0 ) ;
rank: 853
score: 98.73165893554688
patch: return 0 . null * x ;
rank: 853
score: 98.70248413085938
patch: double CaMeL Value ( 1 ) ;
rank: 853
score: 98.67411586216518
patch: { return 0 . $NUMBER$ ;
rank: 853
score: 98.60072544642857
patch: return x - 1 ; }
rank: 853
score: 98.55126953125
patch: return 0 / $NUMBER$ ;
rank: 854
score: 98.91686401367187
patch: if ( x <= 0 . 0 ) {
rank: 854
score: 98.86866590711806
patch: return exp ( x . length ) ;
rank: 854
score: 98.73289489746094
patch: assert 0 != 0 : $STRING$ ;
rank: 854
score: 98.73085239955357
patch: return ( 0 . ) ;
rank: 854
score: 98.67196219308036
patch: return $NUMBER$ [ x ] ;
rank: 854
score: 98.6005859375
patch: double ( - x ) ;
rank: 854
score: 98.55027553013393
patch: x += 0 . $NUMBER$ ;
rank: 855
score: 98.73211669921875
patch: return 0 . $NUMBER$ ( x ;
rank: 855
score: 98.7305908203125
patch: return 0 . $NUMBER$ * exp $NUMBER$
rank: 855
score: 98.69999694824219
patch: return - 0 . $NUMBER$ ; ;
rank: 855
score: 98.6718241373698
patch: return x * x ;
rank: 855
score: 98.58849225725446
patch: if ( x >= $NUMBER$ )
rank: 856
score: 98.91377766927083
patch: return $NUMBER$ . $NUMBER$ * exp $NUMBER$ ;
rank: 856
score: 98.73179408482143
patch: return 0 . $NUMBER$ double ;
rank: 856
score: 98.72742462158203
patch: return 0 . null * 0 ;
rank: 856
score: 98.66974748883929
patch: { exp ( x ) ;
rank: 856
score: 98.58643595377605
patch: hi ( x ) ;
rank: 856
score: 98.54799107142857
patch: return 0 ; } break ;
rank: 857
score: 98.73169708251953
patch: return 0 . $NUMBER$ . 0 ;
rank: 857
score: 98.66275460379464
patch: return 0 * x ; ;
rank: 857
score: 98.5782470703125
patch: return 1 . $NUMBER$ ; }
rank: 858
score: 98.72997174944196
patch: * return 0 . 0 ;
rank: 858
score: 98.69611358642578
patch: return new Double ( 0 ) ;
rank: 858
score: 98.60319301060268
patch: return 0 double [ ] ;
rank: 858
score: 98.57208251953125
patch: return HEX _ $NUMBER$ ; }
rank: 858
score: 98.54507010323661
patch: return $NUMBER$ ( x ) ;
rank: 859
score: 98.85997178819444
patch: return 0 * min ( x ) ;
rank: 859
score: 98.72783551897321
patch: * return 0 . $NUMBER$ ;
rank: 859
score: 98.72541155133929
patch: return 0 . null ) ;
rank: 859
score: 98.69451904296875
patch: double x = 0 . 0 ;
rank: 860
score: 98.72769927978516
patch: return 0 . $NUMBER$ * / ;
rank: 860
score: 98.64242117745536
patch: return exp ( $STRING$ ) ;
rank: 860
score: 98.54285539899554
patch: x = 1 . 0 ;
rank: 861
score: 98.69356536865234
patch: double CaMeL Value ( ) ; ;
rank: 861
score: 98.6336669921875
patch: return return 0 . $NUMBER$ ;
rank: 861
score: 98.56879534040179
patch: double exp ( x ) ;
rank: 861
score: 98.53907121930804
patch: b ( - x ) ;
rank: 862
score: 98.72520446777344
patch: return 0 / 0 . 0 ;
rank: 862
score: 98.69328308105469
patch: return 0 ; x = 0 ;
rank: 862
score: 98.65746198381696
patch: throw new Exception ( ) ;
rank: 862
score: 98.58984375
patch: return - 0 ; }
rank: 863
score: 98.7212905883789
patch: 0 * exp ( x ) ;
rank: 863
score: 98.56032017299107
patch: double cosh ( x ) ;
rank: 864
score: 98.71871948242188
patch: return x * 0 * 0 ;
rank: 864
score: 98.71513366699219
patch: return x - 0 . $NUMBER$ ;
rank: 864
score: 98.69287872314453
patch: return 0 / ( x ) ;
rank: 864
score: 98.64222935267857
patch: return get ( x ) ;
rank: 864
score: 98.55793980189732
patch: return 1 . 0 ; }
rank: 864
score: 98.53319440569196
patch: x = $NUMBER$ . $NUMBER$ ;
rank: 865
score: 98.71276092529297
patch: return 0 / exp ( ) ;
rank: 865
score: 98.69263458251953
patch: return 0 . 0 * float ;
rank: 865
score: 98.64048549107143
patch: return x * - x ;
rank: 865
score: 98.61989920479911
patch: return return 0 . 0 ;
rank: 865
score: 98.53122384207589
patch: return ( double ) x ;
rank: 866
score: 98.69195556640625
patch: return 0 + ( x ) ;
rank: 866
score: 98.61884416852679
patch: throw exp ( x ) ;
rank: 866
score: 98.55047607421875
patch: x = x - $NUMBER$ ;
rank: 866
score: 98.53070068359375
patch: x = $NUMBER$ . 0 ;
rank: 867
score: 98.63268171037946
patch: return ( double ) 0 ;
rank: 867
score: 98.61884416852679
patch: return 0 . $NUMBER$ ++ ;
rank: 867
score: 98.52967325846355
patch: return x - $NUMBER$ ;
rank: 868
score: 98.85102674696181
patch: { return 0 . $NUMBER$ * x ;
rank: 868
score: 98.71293640136719
patch: return 0 * exp ( x .
rank: 868
score: 98.6895751953125
patch: / / return 0 . 0 ;
rank: 868
score: 98.61416625976562
patch: result ( x ) ;
rank: 869
score: 98.85018581814236
patch: return 0 + exp ( 0 ) ;
rank: 869
score: 98.70364379882812
patch: return 0 . 0 / 0 ;
rank: 869
score: 98.61257498604911
patch: exp ( x ) ) ;
rank: 869
score: 98.5272928873698
patch: overflow ( x ) ;
rank: 870
score: 98.84996880425348
patch: return x . min ( x ) ;
rank: 870
score: 98.60892740885417
patch: return 0 = $NUMBER$ ;
rank: 870
score: 98.55702718098958
patch: / / return 0 ;
rank: 870
score: 98.5477803548177
patch: return x ; } }
rank: 871
score: 98.70974731445312
patch: return 0 * 0 . ) ;
rank: 871
score: 98.54193115234375
patch: double cosh = - x ;
rank: 872
score: 98.70669555664062
patch: return x * 0 * x ;
rank: 872
score: 98.6033223470052
patch: return x * $NUMBER$ ;
rank: 872
score: 98.5399881998698
patch: double ( x ) ;
rank: 872
score: 98.52653285435268
patch: return $NUMBER$ + - x ;
rank: 873
score: 98.88285997178819
patch: return ( x > 0 ) ] ;
rank: 873
score: 98.70588684082031
patch: return ( 0 . null ) ;
rank: 873
score: 98.52635846819196
patch: return x - - x ;
rank: 874
score: 98.60213797433036
patch: } * * * * /
rank: 874
score: 98.52396937779018
patch: f ( - x ) ;
rank: 875
score: 98.87915717230902
patch: return 0 . 0 * exp $NUMBER$ ;
rank: 875
score: 98.70524597167969
patch: throw 0 . $NUMBER$ * 0 ;
rank: 875
score: 98.60152180989583
patch: return $NUMBER$ + x ;
rank: 875
score: 98.52786690848214
patch: return cosh [ x ] ;
rank: 876
score: 98.70354461669922
patch: return 0 . exp ( ) ;
rank: 876
score: 98.66462053571429
patch: return ( 0 . 0 ;
rank: 877
score: 98.70259094238281
patch: return $NUMBER$ * $NUMBER$ * x ;
rank: 877
score: 98.68782043457031
patch: return 0 . 0 ( x ;
rank: 877
score: 98.65855916341145
patch: return 1 . $NUMBER$ ;
rank: 877
score: 98.59519740513393
patch: return 0 * 0 ; ;
rank: 877
score: 98.52517700195312
patch: temp = - x ;
rank: 877
score: 98.52333286830357
patch: set ( - x ) ;
rank: 878
score: 98.87559000651042
patch: return $NUMBER$ . $NUMBER$ * x ) ;
rank: 878
score: 98.6870346069336
patch: return 0 * double CaMeL Value ;
rank: 878
score: 98.65791538783482
patch: double 0 ( x ) ;
rank: 878
score: 98.52484130859375
patch: return 0 - 0 ; }
rank: 878
score: 98.52162388392857
patch: start ( - x ) ;
rank: 879
score: 98.87549506293402
patch: double 1 * exp ( x ) ;
rank: 879
score: 98.82320404052734
patch: return 0 * 0 . 1 ;
rank: 879
score: 98.69882202148438
patch: return 0 . exp * x ;
rank: 879
score: 98.68461608886719
patch: return x . $NUMBER$ * x ;
rank: 879
score: 98.64736502511161
patch: double return 0 . $NUMBER$ ;
rank: 879
score: 98.58650716145833
patch: return x * 0 ;
rank: 879
score: 98.58547537667411
patch: cosh ( - $NUMBER$ ) ;
rank: 879
score: 98.52439662388393
patch: return $NUMBER$ ; } else {
rank: 879
score: 98.51937430245536
patch: return 0 * x ; }
rank: 880
score: 98.69598388671875
patch: 0 return 0 . $NUMBER$ ;
rank: 880
score: 98.64295305524554
patch: return 0 . $NUMBER$ Double ;
rank: 880
score: 98.58551025390625
patch: } * * * /
rank: 880
score: 98.57042585100446
patch: return 0 [ 1 ] ;
rank: 880
score: 98.52098592122395
patch: x = - 0 ;
rank: 881
score: 98.64218139648438
patch: return 1 . 0 ;
rank: 881
score: 98.5845947265625
patch: return max ( x ) ;
rank: 881
score: 98.52371215820312
patch: x = 0 ; }
rank: 881
score: 98.51862444196429
patch: x = 0 / x ;
rank: 882
score: 98.69217681884766
patch: return $NUMBER$ . 1 * x ;
rank: 882
score: 98.64049421037946
patch: long 0 ( x ) ;
rank: 882
score: 98.58054896763393
patch: break exp ( x ) ;
rank: 882
score: 98.52364095052083
patch: return x - 1 ;
rank: 882
score: 98.51300920758929
patch: / / return 0 ; }
rank: 883
score: 98.80647277832031
patch: return ( 0 . 1 ) ;
rank: 883
score: 98.69054412841797
patch: return 0 . $NUMBER$ * Math ;
rank: 883
score: 98.56730143229167
patch: return 0 . 1 ;
rank: 884
score: 98.68848419189453
patch: return $NUMBER$ * 0 . 0 ;
rank: 884
score: 98.66695149739583
patch: return Double . $NUMBER$ ;
rank: 884
score: 98.62303815569196
patch: return - 0 . 1 ;
rank: 884
score: 98.57953752790179
patch: return 0 * $NUMBER$ ; ;
rank: 884
score: 98.51534598214286
patch: x = 1 . $NUMBER$ ;
rank: 885
score: 98.8047866821289
patch: return 0 = 0 . 0 ;
rank: 885
score: 98.57371303013393
patch: if ( 0 == x )
rank: 885
score: 98.56434849330357
patch: return new ( x ) ;
rank: 885
score: 98.50754801432292
patch: x = - $NUMBER$ ;
rank: 886
score: 98.85963270399306
patch: return - $NUMBER$ . $NUMBER$ * x ;
rank: 886
score: 98.64729527064732
patch: return 0 . 0 exp ;
rank: 886
score: 98.57326834542411
patch: return 0 + x ; ;
rank: 886
score: 98.51412527901786
patch: return x . return 0 ;
rank: 887
score: 98.8017578125
patch: return 0 . start ( ) ;
rank: 887
score: 98.60005405970982
patch: double return 0 . 0 ;
rank: 887
score: 98.51460484095982
patch: final double x = 0 ;
rank: 887
score: 98.51213727678571
patch: buf ( - x ) ;
rank: 888
score: 98.7996597290039
patch: return 0 + 0 + 0 ;
rank: 888
score: 98.5987548828125
patch: return 1 . $NUMBER$ ; ;
rank: 888
score: 98.51199776785714
patch: return $NUMBER$ * - x ;
rank: 889
score: 98.51076834542411
patch: if ( x & $NUMBER$ )
rank: 890
score: 98.56839425223214
patch: exp ( x ) ; ;
rank: 891
score: 98.85578070746527
patch: return exp ( x ) ; } else
rank: 891
score: 98.62206159319196
patch: return 0 . * x ;
rank: 891
score: 98.56614176432292
patch: return $NUMBER$ . $NUMBER$ ;
rank: 892
score: 98.77951049804688
patch: return 0 return 0 . 0 ;
rank: 892
score: 98.61716134207589
patch: return 0 . $NUMBER$ ; else
rank: 892
score: 98.55012730189732
patch: -- exp ( x ) ;
rank: 893
score: 98.85182189941406
patch: if ( x < 1 ) {
rank: 893
score: 98.61478097098214
patch: return 0 1 . 0 ;
rank: 893
score: 98.57801164899554
patch: return 0 1 . $NUMBER$ ;
rank: 893
score: 98.563232421875
patch: return 0 . * 0 ;
rank: 893
score: 98.50554547991071
patch: exp ( 0 ) ; }
rank: 893
score: 98.50178745814732
patch: return x = - x ;
rank: 894
score: 98.61280168805804
patch: return 0 . 0 $NUMBER$ ;
rank: 894
score: 98.57271030970982
patch: return float ( x ) ;
rank: 894
score: 98.56075613839286
patch: if ( x == $NUMBER$ )
rank: 894
score: 98.54513985770089
patch: add ( - x ) ;
rank: 894
score: 98.48503766741071
patch: else exp ( x ) ;
rank: 895
score: 98.54489571707589
patch: { x = - x ;
rank: 895
score: 98.50286865234375
patch: return x ; } * /
rank: 896
score: 98.84775119357639
patch: return - exp ( - $NUMBER$ ) ;
rank: 896
score: 98.60086495535714
patch: return min ( x ) ;
rank: 896
score: 98.56386021205357
patch: return 0 . 0 0 ;
rank: 896
score: 98.49903215680804
patch: return x . ( ) ;
rank: 896
score: 98.49640764508929
patch: x = ( 0 ) ;
rank: 897
score: 98.76669311523438
patch: return ( 0 ) * 0 ;
rank: 897
score: 98.60595703125
patch: return $NUMBER$ * 0 ;
rank: 897
score: 98.60068184988839
patch: return 0 ; . 0 ;
rank: 897
score: 98.55359758649554
patch: return 0 . 1 ; ;
rank: 897
score: 98.54161725725446
patch: return cosh [ 0 ] ;
rank: 897
score: 98.49502563476562
patch: x = $NUMBER$ ;
rank: 898
score: 98.84547932942708
patch: return exp ( x ) ; break ;
rank: 898
score: 98.59774344308036
patch: return Double . $NUMBER$ ) ;
rank: 898
score: 98.56236921037946
patch: and exp ( x ) ;
rank: 898
score: 98.54130336216518
patch: return - HEX _ $NUMBER$ ;
rank: 898
score: 98.4799092610677
patch: return $NUMBER$ * $NUMBER$ ;
rank: 899
score: 98.56206403459821
patch: return 1 . $NUMBER$ ) ;
rank: 899
score: 98.49399820963542
patch: z = - x ;
rank: 899
score: 98.47842843191964
patch: -= exp ( x ) ;
rank: 900
score: 98.84508599175348
patch: return ( - 1 . $NUMBER$ ) ;
rank: 900
score: 98.59552001953125
patch: return 0 * exp 0 ;
rank: 900
score: 98.54814801897321
patch: value = 0 . $NUMBER$ ;
rank: 900
score: 98.4749043782552
patch: return 0 - 0 ;
rank: 901
score: 98.84239196777344
patch: if ( x > 1 ) {
rank: 901
score: 98.59483991350446
patch: return 0 . x ) ;
rank: 901
score: 98.54774693080357
patch: } exp ( x ) ;
rank: 901
score: 98.49289376395089
patch: return x - $NUMBER$ ; }
rank: 901
score: 98.47821044921875
patch: return 0 . 0 * ;
rank: 902
score: 98.59128824869792
patch: return 0 ; } ;
rank: 903
score: 98.49144635881696
patch: return 0 / x ; }
rank: 903
score: 98.46583251953125
patch: x += x ;
rank: 904
score: 98.58415876116071
patch: return $NUMBER$ . $NUMBER$ ) ;
rank: 904
score: 98.53873697916667
patch: throw ( $STRING$ ) ;
rank: 904
score: 98.52886090959821
patch: { return 0 . 0 ;
rank: 905
score: 98.75100708007812
patch: return 0 + 0 + x ;
rank: 905
score: 98.57594517299107
patch: return 0 $NUMBER$ . 0 ;
rank: 905
score: 98.46689278738839
patch: return 0 . 0 cosh ;
rank: 906
score: 98.5298563639323
patch: return 0 . ) ;
rank: 906
score: 98.4868876139323
patch: ya ( x ) ;
rank: 907
score: 98.75010681152344
patch: return 0 = 0 . 1 ;
rank: 907
score: 98.55507405598958
patch: return 0 . $NUMBER$ *
rank: 907
score: 98.52878824869792
patch: return 0 * x )
rank: 907
score: 98.52147420247395
patch: add ( x ) ;
rank: 907
score: 98.4849853515625
patch: return $NUMBER$ ; } }
rank: 907
score: 98.46281215122768
patch: / * / return 0 ;
rank: 907
score: 98.4341328938802
patch: result = - x ;
rank: 908
score: 98.74537658691406
patch: return 0 = $NUMBER$ . $NUMBER$ ;
rank: 908
score: 98.54256766183036
patch: return 1 . - 0 ;
rank: 908
score: 98.45588030133929
patch: return abs ( x ) ;
rank: 908
score: 98.4509785970052
patch: temp ( x ) ;
rank: 908
score: 98.42323811848958
patch: return 0 / 0 ;
rank: 909
score: 98.7437973022461
patch: return 0 * 0 = 0 ;
rank: 909
score: 98.54892403738839
patch: return 0 * exp x ;
rank: 909
score: 98.5208028157552
patch: return 1 * x ;
rank: 909
score: 98.51591273716518
patch: return x + x ; }
rank: 909
score: 98.45029907226562
patch: temp = x ;
rank: 910
score: 98.54608154296875
patch: return 0 ) * 0 ;
rank: 910
score: 98.54029192243304
patch: return 1 . 0 ; ;
rank: 910
score: 98.44925944010417
patch: exp ( - x ;
rank: 911
score: 98.73920440673828
patch: return 0 . 0 return 0 ;
rank: 911
score: 98.501220703125
patch: return 0 * ) ;
rank: 911
score: 98.40865071614583
patch: f ( x ) ;
rank: 911
score: 98.39112345377605
patch: y = - x ;
rank: 912
score: 98.54105050223214
patch: return exp ( x ) .
rank: 912
score: 98.51137869698661
patch: return exp ( this ) ;
rank: 912
score: 98.43517049153645
patch: return exp ( x ;
rank: 912
score: 98.4059346516927
patch: ( - x ) ;
rank: 913
score: 98.82502746582031
patch: if ( x != 0 ) {
rank: 913
score: 98.54079764229911
patch: return * 0 . $NUMBER$ ;
rank: 913
score: 98.4123026529948
patch: double x = x ;
rank: 913
score: 98.3932393391927
patch: b ( x ) ;
rank: 914
score: 98.4080810546875
patch: return - $NUMBER$ ; }
rank: 915
score: 98.81822374131944
patch: return - 0 . $NUMBER$ * exp ;
rank: 915
score: 98.54103306361607
patch: return 0 $NUMBER$ . $NUMBER$ ;
rank: 915
score: 98.43885294596355
patch: return ( exp ) ;
rank: 915
score: 98.37802124023438
patch: return 0 ; break ;
rank: 916
score: 98.81761338975694
patch: double $NUMBER$ / exp ( x ) ;
rank: 916
score: 98.53724016462054
patch: return 0 * 0 ) ;
rank: 916
score: 98.53087506975446
patch: value = 0 . 0 ;
rank: 916
score: 98.50315348307292
patch: yb ( x ) ;
rank: 916
score: 98.37978108723958
patch: append ( x ) ;
rank: 916
score: 98.37772623697917
patch: x = 0 ) ;
rank: 917
score: 98.81666395399306
patch: return x / exp ( x ) ;
rank: 917
score: 98.53006417410714
patch: return - 0 * x ;
rank: 917
score: 98.43039957682292
patch: value ( x ) ;
rank: 918
score: 98.53118024553571
patch: return 0 . ) ) ;
rank: 918
score: 98.52580915178571
patch: return compute ( x ) ;
rank: 918
score: 98.3922831217448
patch: x = - 1 ;
rank: 919
score: 98.522216796875
patch: return 1 [ $NUMBER$ ] ;
rank: 919
score: 98.49944196428571
patch: ++ exp ( x ) ;
rank: 919
score: 98.41893513997395
patch: return 0 == x ;
rank: 919
score: 98.3724365234375
patch: return 0 - $NUMBER$ ;
rank: 920
score: 98.52278355189732
patch: return sum ( x ) ;
rank: 920
score: 98.49351283482143
patch: return ( - 1 ) ;
rank: 920
score: 98.41628011067708
patch: throw ( x ) ;
rank: 920
score: 98.37722778320312
patch: exp ( $NUMBER$ ) ;
rank: 921
score: 98.51592145647321
patch: return $NUMBER$ . $NUMBER$ ; ;
rank: 921
score: 98.49281529017857
patch: append ( - x ) ;
rank: 921
score: 98.40564982096355
patch: return $NUMBER$ + 0 ;
rank: 921
score: 98.37386067708333
patch: return return 0 ; }
rank: 922
score: 98.51494489397321
patch: return Double . 0 ; }
rank: 922
score: 98.49073137555804
patch: yb ( - x ) ;
rank: 922
score: 98.36067708333333
patch: * / return 0 ;
rank: 922
score: 98.3546651204427
patch: return - - 0 ;
rank: 923
score: 98.79911804199219
patch: return ( x ) - x ;
rank: 923
score: 98.50419398716518
patch: return 0 . $NUMBER$ else ;
rank: 923
score: 98.4037373860677
patch: return $NUMBER$ + $NUMBER$ ;
rank: 923
score: 98.35552978515625
patch: return 0 . x ;
rank: 924
score: 98.72606658935547
patch: return ( x . length ) ;
rank: 924
score: 98.51095581054688
patch: return $NUMBER$ . 0 ;
rank: 924
score: 98.4011942545573
patch: return 1 + x ;
rank: 925
score: 98.72569274902344
patch: return exp ( x ) . ;
rank: 925
score: 98.49955531529018
patch: * exp ( x ) ;
rank: 925
score: 98.46694946289062
patch: set ( x ) ;
rank: 925
score: 98.39308675130208
patch: return 0 + exp ;
rank: 925
score: 98.35007731119792
patch: x = $NUMBER$ ; }
rank: 926
score: 98.50926862444196
patch: return new 0 . 0 ;
rank: 926
score: 98.50660051618304
patch: 0 exp ( x ) ;
rank: 926
score: 98.49915422712054
patch: return 0 ( 0 ) ;
rank: 926
score: 98.38785807291667
patch: return 0 ; ) ;
rank: 926
score: 98.34320068359375
patch: result = 0 ;
rank: 926
score: 98.34276733398437
patch: / * * /
rank: 926
score: 98.32899169921875
patch: return - $NUMBER$ ;
rank: 927
score: 98.72328186035156
patch: return 0 = 0 + x ;
rank: 927
score: 98.50759451729911
patch: return Double . $NUMBER$ ; ;
rank: 927
score: 98.50437709263393
patch: return 0 . $NUMBER$ ; x
rank: 927
score: 98.49741036551339
patch: return 0 . 0 ] ;
rank: 927
score: 98.38697509765625
patch: } return 0 ;
rank: 927
score: 98.3380635579427
patch: buf ( x ) ;
rank: 928
score: 98.78520965576172
patch: return ( x > x ) ;
rank: 928
score: 98.72223663330078
patch: return 0 = 0 * x ;
rank: 928
score: 98.50298200334821
patch: return 0 0 . 0 ;
rank: 928
score: 98.50114222935268
patch: / return 0 . $NUMBER$ ;
rank: 928
score: 98.3789571126302
patch: if ( return ) ;
rank: 928
score: 98.3294677734375
patch: / / * * /
rank: 929
score: 98.78009033203125
patch: return $NUMBER$ / ( x ) ;
rank: 929
score: 98.37806193033855
patch: * * * * /
rank: 929
score: 98.33085123697917
patch: start ( x ) ;
rank: 930
score: 98.50002034505208
patch: apply ( x ) ;
rank: 930
score: 98.49659075055804
patch: return 0 . exp ) ;
rank: 930
score: 98.37516276041667
patch: return 0 < x ;
rank: 930
score: 98.31215413411458
patch: return 0 ; * /
rank: 931
score: 98.77567291259766
patch: return x - ( x ) ;
rank: 931
score: 98.71833801269531
patch: return ( $NUMBER$ . $NUMBER$ ) ;
rank: 931
score: 98.49360002790179
patch: / * / return x ;
rank: 931
score: 98.36517333984375
patch: return $NUMBER$ = x ;
rank: 931
score: 98.31496175130208
patch: double cosh = x ;
rank: 932
score: 98.77064514160156
patch: if ( x != $NUMBER$ ) {
rank: 932
score: 98.71603393554688
patch: return 0 . length * x ;
rank: 932
score: 98.35896809895833
patch: return 0 return 0 ;
rank: 932
score: 98.30855305989583
patch: return 0 ; ; }
rank: 933
score: 98.47012329101562
patch: return - 1 ;
rank: 933
score: 98.32420857747395
patch: return x / $NUMBER$ ;
rank: 933
score: 98.30447387695312
patch: comparison ( x ) ;
rank: 933
score: 98.28725179036458
patch: / * return 0 ;
rank: 934
score: 98.7606201171875
patch: return ( x ) + x ;
rank: 935
score: 98.41964721679688
patch: update ( x ) ;
rank: 935
score: 98.3125
patch: b = - x ;
rank: 935
score: 98.25809733072917
patch: x = x ) ;
rank: 937
score: 98.41808064778645
patch: / * return x ;
rank: 937
score: 98.35404459635417
patch: ret ( x ) ;
rank: 937
score: 98.28636678059895
patch: temp = x ; }
rank: 937
score: 98.25051879882812
patch: break ( 0 ) ;
rank: 938
score: 98.3529561360677
patch: } * * * ;
rank: 938
score: 98.3092529296875
patch: result = x ;
rank: 939
score: 98.73785400390625
patch: return ( x < 0 ) ;
rank: 939
score: 98.46895054408482
patch: ? return 0 . 0 ;
rank: 939
score: 98.35132853190105
patch: return 0 * this ;
rank: 939
score: 98.34499104817708
patch: return cosh - x ;
rank: 939
score: 98.30370330810547
patch: return x ;
rank: 939
score: 98.24684651692708
patch: return - 0 ) ;
rank: 940
score: 98.37954711914062
patch: double 0 = 0 ;
rank: 940
score: 98.303466796875
patch: p ( x ) ;
rank: 940
score: 98.27921142578126
patch: x = 1 ;
rank: 941
score: 98.72776794433594
patch: double exp ( - $NUMBER$ ) ;
rank: 941
score: 98.36439005533855
patch: long ( x ) ;
rank: 941
score: 98.3463134765625
patch: else { return 0 ;
rank: 941
score: 98.27691650390625
patch: exp ( $STRING$ ) ;
rank: 942
score: 98.7252197265625
patch: return x - $NUMBER$ * x ;
rank: 942
score: 98.34505208333333
patch: return ) * 0 ;
rank: 942
score: 98.32093302408855
patch: return cosh - $NUMBER$ ;
rank: 942
score: 98.24252319335938
patch: abs ( x ) ;
rank: 943
score: 98.34483846028645
patch: return 0 * exp ;
rank: 943
score: 98.33450317382812
patch: exp ( x ) .
rank: 943
score: 98.30141194661458
patch: sb ( x ) ;
rank: 944
score: 98.71515655517578
patch: if ( x < x ) {
rank: 944
score: 98.33348592122395
patch: return 0 == 0 ;
rank: 944
score: 98.3004862467448
patch: return - x ) ;
rank: 945
score: 98.71411895751953
patch: double $NUMBER$ * ( x ) ;
rank: 945
score: 98.35135904947917
patch: / * / * /
rank: 945
score: 98.23483276367188
patch: / / return x ;
rank: 946
score: 98.34447224934895
patch: * / return x ;
rank: 946
score: 98.32674153645833
patch: return 0 return x ;
rank: 946
score: 98.2985331217448
patch: copy ( x ) ;
rank: 946
score: 98.26731363932292
patch: / * * * /
rank: 947
score: 98.40592447916667
patch: log ( x ) ;
rank: 947
score: 98.26498413085938
patch: return ( - x ;
rank: 948
score: 98.32412719726562
patch: return 0 , x ;
rank: 948
score: 98.32266235351562
patch: return 0 + x )
rank: 948
score: 98.29095458984375
patch: return - - $NUMBER$ ;
rank: 948
score: 98.26099243164063
patch: return true ; }
rank: 949
score: 98.69811248779297
patch: return ( cosh - $NUMBER$ ) ;
rank: 949
score: 98.32203369140625
patch: } * * /
rank: 949
score: 98.29119873046875
patch: / ( x ) ;
rank: 950
score: 98.32201131184895
patch: } else * * /
rank: 950
score: 98.31793212890625
patch: double x = 0 ;
rank: 950
score: 98.29506429036458
patch: return 0 ) ) ;
rank: 950
score: 98.29013061523438
patch: return x - 0 ;
rank: 950
score: 98.25827026367188
patch: division ( x ) ;
rank: 951
score: 98.34475708007812
patch: return Double . 0 ;
rank: 951
score: 98.3204854329427
patch: return 0 * value ;
rank: 951
score: 98.31407674153645
patch: int 0 = 0 ;
rank: 951
score: 98.28994750976562
patch: x ( x ) ;
rank: 951
score: 98.2739766438802
patch: return double [ ] ;
rank: 951
score: 98.25751953125
patch: exp ( x ;
rank: 952
score: 98.31959025065105
patch: return 0 * null ;
rank: 952
score: 98.31139119466145
patch: double exp = x ;
rank: 952
score: 98.21129353841145
patch: / / return $NUMBER$ ;
rank: 953
score: 98.69247436523438
patch: if ( x > x ) {
rank: 953
score: 98.34226481119792
patch: fail ( $STRING$ ) ;
rank: 953
score: 98.31203206380208
patch: return 0 [ x ;
rank: 953
score: 98.2683614095052
patch: return x + $NUMBER$ ;
rank: 953
score: 98.2110087076823
patch: Extend ( x ) ;
rank: 954
score: 98.29130045572917
patch: int x = 0 ;
rank: 954
score: 98.2846923828125
patch: } * * *
rank: 954
score: 98.28190104166667
patch: int ( x ) ;
rank: 954
score: 98.26576741536458
patch: new ( x ) ;
rank: 954
score: 98.2522481282552
patch: return / $NUMBER$ ; }
rank: 955
score: 98.54197184244792
patch: { return 0 ; }
rank: 955
score: 98.27986653645833
patch: return x + 1 ;
rank: 955
score: 98.26771850585938
patch: return $NUMBER$ ) ;
rank: 955
score: 98.244580078125
patch: * * * /
rank: 955
score: 98.208642578125
patch: y = 0 ;
rank: 956
score: 98.68992614746094
patch: return ( $NUMBER$ * x ) ;
rank: 956
score: 98.2586669921875
patch: return x ) ;
rank: 956
score: 98.23546142578125
patch: return x ; ;
rank: 957
score: 98.68881225585938
patch: if ( x == $NUMBER$ ) {
rank: 957
score: 98.2811279296875
patch: return - 0 ; ;
rank: 957
score: 98.27487182617188
patch: return 0 : 0 ;
rank: 957
score: 98.2583516438802
patch: float ( x ) ;
rank: 957
score: 98.25565185546876
patch: exp ( ) ;
rank: 957
score: 98.24697875976562
patch: / / * /
rank: 957
score: 98.23375244140625
patch: return ( 0 ;
rank: 958
score: 98.31725056966145
patch: fail ( x ) ;
rank: 958
score: 98.23980712890625
patch: return 1 ; }
rank: 958
score: 98.23167114257812
patch: throw ( ) ;
rank: 959
score: 98.26556396484375
patch: exit ( x ) ;
rank: 959
score: 98.2528076171875
patch: return 0 ) ; ;
rank: 959
score: 98.22449340820313
patch: z = x ;
rank: 960
score: 98.24729410807292
patch: switch ( x ) {
rank: 960
score: 98.24652099609375
patch: return x + 0 ;
rank: 960
score: 98.21764526367187
patch: return false ; }
rank: 960
score: 98.17406005859375
patch: temp = 0 ;
rank: 961
score: 98.24119059244792
patch: return 0 . 0 *
rank: 961
score: 98.2023681640625
patch: } else * /
rank: 962
score: 98.2420654296875
patch: if ( x ) {
rank: 962
score: 98.23936971028645
patch: throw 0 * 0 ;
rank: 962
score: 98.19041748046875
patch: value = x ;
rank: 962
score: 98.1552734375
patch: z = 0 ;
rank: 963
score: 98.25856323242188
patch: if ( x ;
rank: 963
score: 98.1657470703125
patch: return $STRING$ ; }
rank: 963
score: 98.1464599609375
patch: cosh = 0 ;
rank: 964
score: 98.6810531616211
patch: return x * ( x ) ;
rank: 964
score: 98.4379374186198
patch: return 0 return $NUMBER$ ;
rank: 964
score: 98.2390645345052
patch: double ( 0 ) ;
rank: 964
score: 98.22519938151042
patch: return cosh + x ;
rank: 964
score: 98.17772216796875
patch: return $NUMBER$ ; ;
rank: 964
score: 98.14386596679688
patch: return ( x ;
rank: 965
score: 98.21495564778645
patch: return size ( ) ;
rank: 966
score: 98.23136393229167
patch: initialize ( x ) ;
rank: 966
score: 98.15880737304687
patch: return + x ;
rank: 967
score: 98.09144897460938
patch: flush ( ) ;
rank: 968
score: 98.3883565266927
patch: return ( 1 ) ;
rank: 968
score: 98.21906127929688
patch: 0 return 0 ;
rank: 968
score: 98.14028930664062
patch: ( x ) ;
rank: 968
score: 98.10972290039062
patch: } return x ;
rank: 968
score: 98.06961669921876
patch: y = x ;
rank: 968
score: 98.05458984375
patch: ya = 0 ;
rank: 969
score: 98.21994018554688
patch: load ( x ) ;
rank: 969
score: 98.05322265625
patch: hi ( ) ;
rank: 970
score: 98.09747314453125
patch: return exp x ;
rank: 970
score: 98.0508056640625
patch: return new double [
rank: 971
score: 98.20540364583333
patch: return Math . $NUMBER$ ;
rank: 971
score: 98.12290649414062
patch: return 0 0 ;
rank: 971
score: 98.09924926757813
patch: throw null ; }
rank: 971
score: 98.06129760742188
patch: return return 0 ;
rank: 971
score: 98.014990234375
patch: end = 0 ;
rank: 972
score: 98.20094807942708
patch: return Double . ZERO ;
rank: 972
score: 98.0572021484375
patch: += - x ;
rank: 972
score: 98.01226806640625
patch: else return 0 ;
rank: 973
score: 98.3651123046875
patch: return ( return ) ;
rank: 973
score: 98.07376708984376
patch: { return 0 ;
rank: 973
score: 98.05589599609375
patch: result ( ) ;
rank: 973
score: 98.005078125
patch: x += 0 ;
rank: 974
score: 98.19961547851562
patch: assert 0 < 0 ;
rank: 974
score: 98.06195678710938
patch: * * * ;
rank: 974
score: 98.0447998046875
patch: x -= x ;
rank: 974
score: 98.03945922851562
patch: / * / }
rank: 975
score: 98.0591064453125
patch: } * * ;
rank: 975
score: 98.04961547851562
patch: * / * /
rank: 975
score: 98.03623046875
patch: / * / ;
rank: 975
score: 98.03523559570313
patch: return / 0 ;
rank: 975
score: 98.02409057617187
patch: return null ; }
rank: 976
score: 98.05285034179687
patch: value = 0 ;
rank: 976
score: 98.01782836914063
patch: return double x ;
rank: 977
score: 98.19009399414062
patch: return value ( ) ;
rank: 977
score: 98.03281860351562
patch: exp = x ;
rank: 977
score: 98.0125732421875
patch: switch ( x )
rank: 977
score: 97.99957275390625
patch: return ) ) ;
rank: 978
score: 98.33937581380208
patch: return ( $NUMBER$ ) ;
rank: 978
score: 98.1844482421875
patch: validate ( x ) ;
rank: 978
score: 98.04850463867187
patch: } else * ;
rank: 978
score: 98.022119140625
patch: ( 0 ) ;
rank: 978
score: 98.00902099609375
patch: return / x ;
rank: 978
score: 97.96698608398438
patch: tmp = 0 ;
rank: 978
score: 97.94703369140625
patch: return $NUMBER$ x ;
rank: 979
score: 98.54473005022321
patch: return ( exp $NUMBER$ ) ;
rank: 979
score: 98.1834004720052
patch: this ( x ) ;
rank: 979
score: 98.04039306640625
patch: double ( ) ;
rank: 979
score: 98.01431884765626
patch: / / / ;
rank: 979
score: 97.99404907226562
patch: b = x ;
rank: 979
score: 97.96531982421875
patch: yb = 0 ;
rank: 980
score: 98.54198346819196
patch: double ( - $NUMBER$ ) ;
rank: 980
score: 98.03308715820313
patch: d ( ) ;
rank: 980
score: 98.01365966796875
patch: return / $NUMBER$ ;
rank: 980
score: 97.9886703491211
patch: return $NUMBER$ ;
rank: 980
score: 97.96469116210938
patch: start = 0 ;
rank: 981
score: 98.07576293945313
patch: if ( x )
rank: 981
score: 98.01015625
patch: temp ( ) ;
rank: 981
score: 98.0098876953125
patch: 0 = 0 ;
rank: 981
score: 97.984375
patch: = - x ;
rank: 982
score: 98.00841064453125
patch: result = $NUMBER$ ;
rank: 982
score: 97.98079223632813
patch: 0 * * /
rank: 982
score: 97.93416748046874
patch: cosh ( ) ;
rank: 982
score: 97.87658081054687
patch: return 0 ; else
rank: 983
score: 98.51633126395089
patch: return exp ( - ) ;
rank: 983
score: 97.93416748046874
patch: return new 0 ;
rank: 983
score: 97.9218017578125
patch: { return x ;
rank: 984
score: 97.990478515625
patch: return return x ;
rank: 984
score: 97.9892578125
patch: ] = 0 ;
rank: 984
score: 97.96975708007812
patch: return 0 double ;
rank: 984
score: 97.8508544921875
patch: return $NUMBER$ 0 ;
rank: 985
score: 98.50576346261161
patch: return - $NUMBER$ / x ;
rank: 985
score: 97.9810791015625
patch: * * * *
rank: 985
score: 97.96231689453126
patch: / * / /
rank: 985
score: 97.8496826171875
patch: return 1 ) ;
rank: 986
score: 98.058056640625
patch: throw new ) ;
rank: 986
score: 97.96964111328126
patch: } / * /
rank: 986
score: 97.96761474609374
patch: return x $NUMBER$ ;
rank: 986
score: 97.95741577148438
patch: return * $NUMBER$ ;
rank: 987
score: 98.04208374023438
patch: * return 0 ;
rank: 987
score: 97.90966796875
patch: return double 0 ;
rank: 987
score: 97.88988037109375
patch: cosh = x ;
rank: 987
score: 97.88496704101563
patch: return 0 value ;
rank: 987
score: 97.83301391601563
patch: 0 * 0 ;
rank: 988
score: 98.49614606584821
patch: return $NUMBER$ [ $NUMBER$ ] ;
rank: 988
score: 97.96314697265625
patch: if ( 0 ;
rank: 988
score: 97.87191162109374
patch: length = 0 ;
rank: 988
score: 97.83175659179688
patch: return exp 0 ;
rank: 989
score: 97.95208740234375
patch: exp ( x ,
rank: 989
score: 97.88168334960938
patch: clear ( ) ;
rank: 989
score: 97.87900390625
patch: log ( ) ;
rank: 990
score: 97.948828125
patch: return cosh ; }
rank: 990
score: 97.94532470703125
patch: return 0 ] ;
rank: 990
score: 97.94483032226563
patch: return 0 * ;
rank: 990
score: 97.869873046875
patch: fail ( ) ;
rank: 990
score: 97.86678466796874
patch: x return 0 ;
rank: 990
score: 97.8302490234375
patch: / return 0 ;
rank: 991
score: 97.9431396484375
patch: return ( $NUMBER$ ;
rank: 991
score: 97.864697265625
patch: start ( ) ;
rank: 991
score: 97.82807006835938
patch: 0 return x ;
rank: 992
score: 97.94573974609375
patch: { return $NUMBER$ ;
rank: 992
score: 97.94193115234376
patch: / / / }
rank: 992
score: 97.92962036132812
patch: return * 0 ;
rank: 992
score: 97.85929565429687
patch: break return 0 ;
rank: 992
score: 97.84491577148438
patch: return this ; }
rank: 992
score: 97.83563842773438
patch: return x 0 ;
rank: 992
score: 97.79808959960937
patch: assert ( x ;
rank: 993
score: 97.89953002929687
patch: return exp 1 ;
rank: 993
score: 97.8568115234375
patch: end ( ) ;
rank: 993
score: 97.62106323242188
patch: return x .
rank: 993
score: 97.48739624023438
patch: return false ;
rank: 994
score: 97.94056396484375
patch: return 1 ; ;
rank: 994
score: 97.8107666015625
patch: double 0 * /
rank: 994
score: 97.78837280273437
patch: return 0 1 ;
rank: 994
score: 97.6136474609375
patch: / * /
rank: 994
score: 97.28162384033203
patch: return ) ;
rank: 995
score: 97.89691772460938
patch: return ( ) ;
rank: 995
score: 97.851025390625
patch: max = 0 ;
rank: 995
score: 97.80728149414062
patch: double return x ;
rank: 995
score: 97.77682495117188
patch: return 0 $NUMBER$ ;
rank: 995
score: 97.50482177734375
patch: return 1 ;
rank: 995
score: 97.37184143066406
patch: return true ;
rank: 995
score: 94.1632080078125
patch: }
rank: 996
score: 97.87283935546876
patch: return 0 . $NUMBER$
rank: 996
score: 97.83717041015625
patch: tmp = x ;
rank: 996
score: 97.48690032958984
patch: return 0 .
rank: 996
score: 96.49704996744792
patch: / ;
rank: 996
score: 94.15520477294922
patch: 0
rank: 997
score: 97.36687469482422
patch: return null ;
rank: 997
score: 97.31744384765625
patch: throw null ;
rank: 997
score: 96.54920450846355
patch: * /
rank: 997
score: 94.14398193359375
patch: x
rank: 998
score: 97.25114440917969
patch: return $STRING$ ;
rank: 998
score: 96.54311116536458
patch: return ;
rank: 998
score: 94.43341064453125
patch: return
rank: 998
score: 93.68644714355469
patch: result
rank: 999
score: 96.5228780110677
patch: break ;
rank: 999
score: 93.66455078125
patch: try
rank: 1000
score: 97.13057708740234
patch: return value ;
rank: 1000
score: 94.19302368164062
patch: {
rank: 1000
score: 94.12840270996094
patch: double
rank: 1000
score: 93.66233825683594
patch: /
