rank: 1
score: 99.89265950520833
patch: return 0 . $NUMBER$ * exp ( - x ) ;
rank: 2
score: 99.7650146484375
patch: return 0 . 0 * exp ( - x ) ;
rank: 2
score: 99.75734641335227
patch: return 0 . $NUMBER$ * exp ( x ) ;
rank: 3
score: 99.73211669921875
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 3
score: 99.63121541341145
patch: return 0 . $NUMBER$ + exp ( - x ) ;
rank: 3
score: 99.55623685396634
patch: return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 3
score: 99.55374849759616
patch: return 0 . $NUMBER$ * exp ( x , x ) ;
rank: 4
score: 99.6321309407552
patch: return 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 4
score: 99.62699381510417
patch: return 1 . $NUMBER$ * exp ( - x ) ;
rank: 4
score: 99.61985085227273
patch: return 0 . 0 * exp ( x ) ;
rank: 4
score: 99.61693318684895
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 5
score: 99.62644653320312
patch: return 0 * exp ( - x ) ;
rank: 5
score: 99.61612374441964
patch: return 0 . $NUMBER$ * 0 * exp ( - x ) ;
rank: 5
score: 99.60872708834134
patch: return - 0 . $NUMBER$ * exp ( - x ) ;
rank: 5
score: 99.56511981670673
patch: return 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 6
score: 99.59565080915179
patch: return 0 . $NUMBER$ * exp ( - x ) * x ;
rank: 6
score: 99.58643595377605
patch: return 0 . $NUMBER$ / exp ( - x ) ;
rank: 6
score: 99.5597432454427
patch: return 0 . $NUMBER$ * exp ( x ) ; }
rank: 6
score: 99.53774007161458
patch: return 0 . 1 * exp ( - x ) ;
rank: 6
score: 99.51947893415179
patch: return 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 7
score: 99.59705699573864
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 7
score: 99.46067457932692
patch: x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 8
score: 99.5956561748798
patch: return 0 . $NUMBER$ * exp ( - - x ) ;
rank: 8
score: 99.56980678013393
patch: return 0 . $NUMBER$ * exp ( - x ) + x ;
rank: 8
score: 99.55397251674107
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 8
score: 99.51325334821429
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 8
score: 99.49634660993304
patch: return 0 . $NUMBER$ * exp ( x , - x ) ;
rank: 9
score: 99.51359340122768
patch: return 0 . $NUMBER$ * exp ( - ( x ) ) ;
rank: 9
score: 99.51292067307692
patch: return 0 . $NUMBER$ * exp ( x ) - x ;
rank: 10
score: 99.554931640625
patch: return 1 . 0 * exp ( - x ) ;
rank: 10
score: 99.54820963541667
patch: return 0 . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 10
score: 99.5384521484375
patch: return 0 . 0 * exp ( - 1 ) ;
rank: 10
score: 99.51106770833333
patch: return 0 . 0 + exp ( - x ) ;
rank: 10
score: 99.5028963955966
patch: return 0 . $NUMBER$ + exp ( x ) ;
rank: 10
score: 99.4791259765625
patch: return 0 . $NUMBER$ * exp ( - x - x ) ;
rank: 11
score: 99.54895958533653
patch: return - 1 . $NUMBER$ * exp ( - x ) ;
rank: 11
score: 99.53476969401042
patch: return 0 . $NUMBER$ * exp ( x ) ) ;
rank: 11
score: 99.53124128069196
patch: return 0 . $NUMBER$ * exp ( - x ) / x ;
rank: 11
score: 99.5100326538086
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . $NUMBER$ ;
rank: 11
score: 99.47960408528645
patch: return 0 . $NUMBER$ - exp ( - x ) ;
rank: 12
score: 99.53097330729166
patch: return 0 . $NUMBER$ * exp ( - x ) ; return x ;
rank: 12
score: 99.48922729492188
patch: return 0 . 0 / exp ( - x ) ;
rank: 12
score: 99.47892252604167
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ;
rank: 12
score: 99.45737526633523
patch: return 1 . $NUMBER$ * exp ( x ) ;
rank: 12
score: 99.43349045973558
patch: return 0 . $NUMBER$ * exp ( x - x ) ;
rank: 13
score: 99.52587890625
patch: return 0 . $NUMBER$ * exp ( ) ;
rank: 13
score: 99.4925067608173
patch: result = 0 . $NUMBER$ * exp ( - x ) ;
rank: 13
score: 99.48026216947116
patch: return 0 . 0 * exp ( - x ) ; }
rank: 14
score: 99.52509014423077
patch: return 0 . $NUMBER$ * exp ( x + x ) ;
rank: 14
score: 99.52090454101562
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ . $NUMBER$ ;
rank: 15
score: 99.5211669921875
patch: return $NUMBER$ * exp ( - x ) ;
rank: 15
score: 99.51386369977679
patch: return 0 . 0 * exp ( - x ) * x ;
rank: 15
score: 99.4939956665039
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . 0 ;
rank: 15
score: 99.44090924944196
patch: return 0 . $NUMBER$ * exp ( - x + x ) ;
rank: 16
score: 99.39504770132211
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 17
score: 99.51378455528847
patch: return - 0 . 0 * exp ( - x ) ;
rank: 17
score: 99.48008510044643
patch: return 0 . 0 . $NUMBER$ * exp ( - x ) ;
rank: 17
score: 99.4470547762784
patch: return 0 . $NUMBER$ / exp ( x ) ;
rank: 17
score: 99.4461669921875
patch: return 0 . 0 * exp ( - $NUMBER$ ) ;
rank: 18
score: 99.50885009765625
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ ;
rank: 18
score: 99.44411214192708
patch: result = 0 . $NUMBER$ * exp ( x ) ;
rank: 18
score: 99.44036395733173
patch: return 0 . 0 * exp ( x , x ) ;
rank: 18
score: 99.37837437220982
patch: return 0 . $NUMBER$ * exp ( - x ) ; } }
rank: 19
score: 99.50775146484375
patch: return 0 . 0 * exp ( - x ) + x ;
rank: 19
score: 99.47622445913461
patch: return 0 . $NUMBER$ * exp ( x ) + x ;
rank: 19
score: 99.45790452223558
patch: } return 0 . $NUMBER$ * exp ( - x ) ;
rank: 19
score: 99.43735758463542
patch: return 0 . 0 * exp ( x ) ; }
rank: 20
score: 99.502197265625
patch: return $NUMBER$ . 0 * exp ( - x ) ;
rank: 20
score: 99.4556133563702
patch: return 0 . $NUMBER$ + exp ( - x ) ) ;
rank: 20
score: 99.43682861328125
patch: return 0 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 21
score: 99.49217122395834
patch: return 0 . $NUMBER$ * exp ( - x ) + - x ;
rank: 21
score: 99.46501922607422
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * exp ( - x ) ;
rank: 21
score: 99.37047400841347
patch: return 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 22
score: 99.49778529575893
patch: return $NUMBER$ . $NUMBER$ * 0 * exp ( - x ) ;
rank: 22
score: 99.48148600260417
patch: return Double . $NUMBER$ * exp ( - x ) ;
rank: 22
score: 99.45843098958333
patch: return 0 . $NUMBER$ * exp ( 0 . 0 - x ) ;
rank: 22
score: 99.40839494977679
patch: return 0 . $NUMBER$ * exp ( - x , x ) ;
rank: 23
score: 99.49532645089286
patch: return $NUMBER$ * 0 . $NUMBER$ * exp ( - x ) ;
rank: 23
score: 99.48804582868304
patch: return 0 . 0 * exp ( - x ) - x ;
rank: 23
score: 99.48085239955357
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) ;
rank: 23
score: 99.45244891826923
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 23
score: 99.42510986328125
patch: return 0 . $NUMBER$ * exp ( x ) ; } else {
rank: 23
score: 99.4227803548177
patch: return - 0 . $NUMBER$ * exp ( x ) ;
rank: 23
score: 99.40207926432292
patch: x = 0 . $NUMBER$ * exp ( x ) ;
rank: 24
score: 99.4950420673077
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ;
rank: 24
score: 99.48063659667969
patch: return 0 . $NUMBER$ * exp ( - x ) * exp ( ) ;
rank: 24
score: 99.45399827223558
patch: return 0 . $NUMBER$ * exp ( 0 . 0 ) ;
rank: 24
score: 99.4245361328125
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else {
rank: 24
score: 99.40847342354911
patch: return 0 . 0 * exp ( x , - x ) ;
rank: 24
score: 99.35582557091347
patch: x = 0 . 0 * exp ( - x ) ;
rank: 25
score: 99.49439348493304
patch: return 0 . $NUMBER$ * exp ( - x ) ; / /
rank: 25
score: 99.42237267127403
patch: return - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 25
score: 99.39274379185268
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 26
score: 99.47593470982143
patch: return 0 . 0 * exp ( - x ) / $NUMBER$ ;
rank: 26
score: 99.44524591619319
patch: return 0 . 1 * exp ( x ) ;
rank: 26
score: 99.43550931490384
patch: return 0 . $NUMBER$ * exp ( x ) * x ;
rank: 26
score: 99.3519756610577
patch: x = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 27
score: 99.48289388020834
patch: return 0 . $NUMBER$ * exp ( - x , - x ) ;
rank: 27
score: 99.47098795572917
patch: return 0 * exp ( - x ) * x ;
rank: 27
score: 99.44966888427734
patch: return 0 . $NUMBER$ * exp ( - x ) / 1 . $NUMBER$ ;
rank: 27
score: 99.43504231770834
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ * exp ( x ) ;
rank: 27
score: 99.42122977120536
patch: return 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 28
score: 99.4889892578125
patch: return 0 . $NUMBER$ * exp ( - x ) ; return ) ;
rank: 28
score: 99.46981048583984
patch: return 0 . $NUMBER$ * exp ( - x ) * 0 . $NUMBER$ ;
rank: 28
score: 99.44805036272321
patch: return 0 = 0 . $NUMBER$ * exp ( - x ) ;
rank: 28
score: 99.42055935329861
patch: return $NUMBER$ * exp ( x ) ;
rank: 28
score: 99.34592110770089
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 29
score: 99.47645920973558
patch: return 0 . 0 * exp ( - - x ) ;
rank: 29
score: 99.46792602539062
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ . $NUMBER$ ;
rank: 29
score: 99.44618326822916
patch: } else { return 0 . $NUMBER$ * exp ( - x ) ;
rank: 29
score: 99.43797084263393
patch: return 0 . $NUMBER$ . 0 * exp ( - x ) ;
rank: 30
score: 99.48127964564732
patch: return ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 30
score: 99.463623046875
patch: return 0 . $NUMBER$ * exp ( - x ) / ( x ) ;
rank: 31
score: 99.46533203125
patch: return - 1 . 0 * exp ( - x ) ;
rank: 31
score: 99.46218872070312
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 31
score: 99.42207845052083
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 31
score: 99.39164515904018
patch: return 0 . $NUMBER$ * exp ( x , x ) ; }
rank: 32
score: 99.47625732421875
patch: return 0 . $NUMBER$ * max ( - x ) ;
rank: 32
score: 99.46390474759616
patch: return 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 32
score: 99.43263462611607
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 32
score: 99.39568219866071
patch: return x + 0 . $NUMBER$ * exp ( - x ) ;
rank: 32
score: 99.32870919363839
patch: return 0 . 1 . $NUMBER$ * exp ( - x ) ;
rank: 33
score: 99.46657017299107
patch: return 0 . $NUMBER$ * exp ( - - - x ) ;
rank: 33
score: 99.46061706542969
patch: return 0 . 0 * exp ( - x ) / $NUMBER$ . $NUMBER$ ;
rank: 33
score: 99.39251708984375
patch: return 0 . $NUMBER$ * exp ( - x - $NUMBER$ ) ;
rank: 34
score: 99.46407645089286
patch: return 0 . $NUMBER$ * this . exp ( - x ) ;
rank: 34
score: 99.45893205915179
patch: return 0 . 0 * exp ( - x ) / x ;
rank: 34
score: 99.38275146484375
patch: return 0 . 0 , exp ( - x ) ;
rank: 35
score: 99.45777239118304
patch: return 0 * 0 . $NUMBER$ * exp ( - x ) ;
rank: 35
score: 99.43201446533203
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 . $NUMBER$ ;
rank: 35
score: 99.41805326021634
patch: { return 0 . $NUMBER$ * exp ( - x ) ;
rank: 35
score: 99.39023844401042
patch: return $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 35
score: 99.38142903645833
patch: return 0 . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 35
score: 99.35627092633929
patch: return 0 - 0 . $NUMBER$ * exp ( - x ) ;
rank: 35
score: 99.31668795072116
patch: x = 1 . $NUMBER$ * exp ( - x ) ;
rank: 36
score: 99.45670259915866
patch: return 0 . $NUMBER$ * exp exp ( - x ) ;
rank: 36
score: 99.45431518554688
patch: return 0 . $NUMBER$ * exp ( - x ) * x * x ;
rank: 36
score: 99.45086200420673
patch: return 0 . $NUMBER$ * exp ( x * x ) ;
rank: 36
score: 99.42886352539062
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 . 0 ;
rank: 36
score: 99.40900336371527
patch: return 0 * exp ( x ) ;
rank: 36
score: 99.3153545673077
patch: temp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 37
score: 99.45516263521634
patch: return $NUMBER$ . $NUMBER$ * exp ( - - x ) ;
rank: 37
score: 99.426513671875
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( - x ) ;
rank: 37
score: 99.38430350167411
patch: return 0 . $NUMBER$ * exp ( - x ) ; break ;
rank: 37
score: 99.31534249441964
patch: return 0 . $NUMBER$ * exp ( x - x ) ; }
rank: 38
score: 99.45043182373047
patch: return 0 . $NUMBER$ * exp ( ) * exp ( - x ) ;
rank: 38
score: 99.42637416294643
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 38
score: 99.41190011160714
patch: return 0 . 0 * exp ( - x + x ) ;
rank: 38
score: 99.4056884765625
patch: return 0 . $NUMBER$ + exp ( x ) * 0 . $NUMBER$ ;
rank: 38
score: 99.38096266526442
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 38
score: 99.37322528545673
patch: return 0 . $NUMBER$ * exp ( x , 0 ) ;
rank: 38
score: 99.34799429086539
patch: return exp ( x , 0 . 0 , x ) ;
rank: 39
score: 99.44672037760417
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 39
score: 99.34746704101562
patch: return 0 / exp ( - x ) ;
rank: 40
score: 99.4091796875
patch: return 0 . 1 / exp ( - x ) ;
rank: 40
score: 99.34658377511161
patch: return exp ( x , 0 . 0 , - x ) ;
rank: 40
score: 99.30963134765625
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 41
score: 99.42533874511719
patch: return 0 . 0 * exp ( - x ) / 0 . $NUMBER$ ;
rank: 41
score: 99.40909517728366
patch: return 0 . 0 * exp ( x - x ) ;
rank: 41
score: 99.39734825721153
patch: return 0 . 0 * exp ( - x ) ) ;
rank: 42
score: 99.4424057006836
patch: return 0 . $NUMBER$ * exp ( - ( x - x ) ) ;
rank: 42
score: 99.37844613882211
patch: return 0 . $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 42
score: 99.35804966517857
patch: return 0 . $NUMBER$ * exp ( - x ) : 0 ;
rank: 43
score: 99.44080403645833
patch: return 0 . $NUMBER$ * exp ( - x ) ; / ) ;
rank: 43
score: 99.42420959472656
patch: return 0 . $NUMBER$ * exp ( - x ) * 0 . 0 ;
rank: 43
score: 99.37824358258929
patch: return x - 0 . $NUMBER$ * exp ( - x ) ;
rank: 43
score: 99.33355712890625
patch: return 0 . $NUMBER$ * exp ( - x ) . 0 ;
rank: 43
score: 99.30766950334821
patch: x = 0 . $NUMBER$ * exp ( - x ) ; }
rank: 44
score: 99.44237467447917
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . $NUMBER$ ;
rank: 44
score: 99.43947190504808
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ) ;
rank: 44
score: 99.42261505126953
patch: return 0 . $NUMBER$ * exp ( x ) + exp ( x ) ;
rank: 44
score: 99.3962910970052
patch: return 0 . $NUMBER$ * exp ( * x ) ;
rank: 44
score: 99.35152762276786
patch: return 0 . 0 * exp ( - x - x ) ;
rank: 44
score: 99.33332170758929
patch: return 0 + 0 . $NUMBER$ * exp ( - x ) ;
rank: 44
score: 99.3074951171875
patch: return 1 . $NUMBER$ * exp ( - x ) ; }
rank: 45
score: 99.43959045410156
patch: return 0 . $NUMBER$ * exp ( - x ) / exp ( ) ;
rank: 46
score: 99.438720703125
patch: return 0 . $NUMBER$ * exp ( 0 ) ;
rank: 46
score: 99.3464022549716
patch: return 0 . $NUMBER$ * ( - x ) ;
rank: 46
score: 99.3001200358073
patch: return $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 47
score: 99.3431865985577
patch: return 0 . $NUMBER$ / exp ( - x ) ; }
rank: 48
score: 99.43806966145833
patch: return 0 . $NUMBER$ * exp ( - x ) * - x ;
rank: 48
score: 99.43746744791666
patch: return 0 . $NUMBER$ * exp ( - exp ( x ) ) ;
rank: 48
score: 99.41862487792969
patch: return 0 . $NUMBER$ * exp ( * exp ( - x ) ) ;
rank: 48
score: 99.36168561662946
patch: return 0 . 0 * exp ( - ( x ) ) ;
rank: 49
score: 99.43764822823661
patch: return 0 . $NUMBER$ * exp ( - 1 ) * x ;
rank: 49
score: 99.41567993164062
patch: return 0 . $NUMBER$ * exp ( - exp ( - x ) ) ;
rank: 49
score: 99.39459228515625
patch: return 0 . $NUMBER$ * exp ( - x + $NUMBER$ ) ;
rank: 49
score: 99.3392803485577
patch: return 0 . $NUMBER$ * * exp ( - x ) ;
rank: 50
score: 99.41536712646484
patch: return 0 . $NUMBER$ * exp ( - x ) / 1 . 0 ;
rank: 50
score: 99.39383370535714
patch: return 0 . 0 . 0 * exp ( - x ) ;
rank: 50
score: 99.38076782226562
patch: return 0 . $NUMBER$ | exp ( - x ) ;
rank: 50
score: 99.36027018229167
patch: return 0 . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 50
score: 99.32650052584134
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 51
score: 99.43488311767578
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ . 0 ;
rank: 51
score: 99.42991536458334
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ * x ) ;
rank: 51
score: 99.42904459635416
patch: return 0 . 0 * exp ( - x ) + - x ;
rank: 51
score: 99.41493225097656
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . 1 ;
rank: 51
score: 99.33701578776042
patch: return 0 . $NUMBER$ , exp ( - x ) ;
rank: 51
score: 99.29433030348558
patch: return 0 . $NUMBER$ * exp ( x ) ; } }
rank: 52
score: 99.42946213942308
patch: return 0 . $NUMBER$ * exp ( - x ) ; /
rank: 52
score: 99.42612711588542
patch: = 0 . $NUMBER$ * exp ( - x ) ;
rank: 52
score: 99.41324556790866
patch: return 0 . 0 * exp ( x ) - x ;
rank: 52
score: 99.33685772235577
patch: return 0 . $NUMBER$ / exp ( x , x ) ;
rank: 53
score: 99.43392181396484
patch: return 0 . $NUMBER$ * exp ( - x ) + 0 . $NUMBER$ ;
rank: 53
score: 99.42836216517857
patch: return x * 0 . $NUMBER$ * exp ( - x ) ;
rank: 53
score: 99.42534993489583
patch: return 0 . 0 * exp ( - x , - x ) ;
rank: 53
score: 99.41175079345703
patch: return 0 . $NUMBER$ * exp ( x ) - exp ( x ) ;
rank: 53
score: 99.37775065104167
patch: return 0 . $NUMBER$ * exp ( - x ) - x ) ;
rank: 53
score: 99.35109456380208
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 53
score: 99.32433143028847
patch: return 1 . $NUMBER$ * exp ( x , x ) ;
rank: 54
score: 99.38797701322116
patch: return 0 . $NUMBER$ * - exp ( - x ) ;
rank: 54
score: 99.34961876502403
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; }
rank: 54
score: 99.32419840494792
patch: x = 0 . 0 * exp ( x ) ;
rank: 55
score: 99.42870483398437
patch: return 0 * exp ( - 1 ) ;
rank: 55
score: 99.42755998883929
patch: return 0 . $NUMBER$ * exp ( 0 . - x ) ;
rank: 55
score: 99.422607421875
patch: return 0 . $NUMBER$ * exp ( - x * x ) ;
rank: 55
score: 99.4095126065341
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 55
score: 99.38640802556819
patch: return 0 . 0 / exp ( x ) ;
rank: 55
score: 99.3750732421875
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ ;
rank: 56
score: 99.42835344587054
patch: return 0 . 0 * exp ( - x ) * $NUMBER$ ;
rank: 56
score: 99.42613728841145
patch: return 0 . $NUMBER$ * exp exp ( x ) ;
rank: 56
score: 99.41778094951923
patch: return 0 . 0 * exp ( x + x ) ;
rank: 56
score: 99.37460763113839
patch: return 0 . $NUMBER$ : $NUMBER$ * exp ( - x ) ;
rank: 56
score: 99.34814453125
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else
rank: 57
score: 99.42745535714286
patch: return 0 . $NUMBER$ * exp ( - 1 ) + x ;
rank: 57
score: 99.42577253069196
patch: return 0 . $NUMBER$ * exp ( - x ) ; / ;
rank: 57
score: 99.40766457950367
patch: return 0 . $NUMBER$ * exp ( 0 . size ( ) - x ) ;
rank: 57
score: 99.3807842548077
patch: return 0 . 0 . $NUMBER$ * exp ( x ) ;
rank: 57
score: 99.3739346590909
patch: return 0 . $NUMBER$ - exp ( x ) ;
rank: 57
score: 99.34809221540179
patch: return $NUMBER$ / 0 . $NUMBER$ * exp ( - x ) ;
rank: 57
score: 99.31588040865384
patch: return $NUMBER$ . $NUMBER$ * exp ( x , x ) ;
rank: 58
score: 99.426025390625
patch: return 0 . $NUMBER$ * exp ( - 1 ) / $NUMBER$ ;
rank: 58
score: 99.4076260653409
patch: return 0 . $NUMBER$ exp ( - x ) ;
rank: 58
score: 99.32344970703124
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 58
score: 99.27602713448661
patch: return x - 1 . $NUMBER$ * exp ( - x ) ;
rank: 59
score: 99.42302594866071
patch: return 0 . $NUMBER$ * exp ( x + - x ) ;
rank: 59
score: 99.3720703125
patch: return $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 59
score: 99.31406075613839
patch: return x - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 60
score: 99.4227294921875
patch: return $NUMBER$ . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 60
score: 99.41295447716347
patch: return 0 . $NUMBER$ * exp ( double ) - x ;
rank: 60
score: 99.406982421875
patch: return 0 . 0 * exp ( - x ) / 0 . 0 ;
rank: 60
score: 99.37001255580357
patch: return 0 * exp ( x ) * exp ( x ) ;
rank: 60
score: 99.31360802283653
patch: return 0 - 0 . $NUMBER$ * exp ( x ) ;
rank: 60
score: 99.27516526442308
patch: return 0 . $NUMBER$ * exp ( x - 1 ) ;
rank: 61
score: 99.42036655970982
patch: return 0 . 0 * 0 * exp ( - x ) ;
rank: 61
score: 99.41989571707589
patch: / * return 0 . $NUMBER$ * exp ( - x ) ;
rank: 61
score: 99.410400390625
patch: return 0 . 0 * exp ( x ) + x ;
rank: 61
score: 99.40687471277573
patch: return 0 . $NUMBER$ * exp ( 0 . length ( ) - x ) ;
rank: 61
score: 99.36984049479166
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ - x ) ;
rank: 61
score: 99.34253801618304
patch: return 0 . $NUMBER$ * exp ( - x ) + $NUMBER$ ;
rank: 61
score: 99.31916155133929
patch: return 0 . $NUMBER$ / exp ( x , - x ) ;
rank: 61
score: 99.27105243389423
patch: return $NUMBER$ . $NUMBER$ * exp ( x - x ) ;
rank: 62
score: 99.42035784040179
patch: return 0 . $NUMBER$ * exp ( - 1 . x ) ;
rank: 62
score: 99.41839599609375
patch: return 0 . $NUMBER$ * exp ( - x ) * ( x ) ;
rank: 62
score: 99.40926920572916
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . $NUMBER$ ;
rank: 62
score: 99.40473284040179
patch: return 0 . $NUMBER$ * exp ( - x ) . 1 ;
rank: 62
score: 99.31765747070312
patch: return 0 . $NUMBER$ * exp ( , x ) ;
rank: 63
score: 99.42005333533653
patch: return 0 . $NUMBER$ * exp ( - x ) ; else
rank: 63
score: 99.41681671142578
patch: return 0 ; } return 0 . $NUMBER$ * exp ( - x ) ;
rank: 63
score: 99.36915079752605
patch: return 1 . $NUMBER$ + exp ( - x ) ;
rank: 63
score: 99.34152221679688
patch: return 1 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 64
score: 99.41805013020833
patch: return 0 . $NUMBER$ * exp ( - x ) - - x ;
rank: 64
score: 99.41647338867188
patch: return 0 . $NUMBER$ * exp ( - x ) * / - x ;
rank: 64
score: 99.40136108398437
patch: return 0 + exp ( - x ) ;
rank: 64
score: 99.36689976283482
patch: return 0 . $NUMBER$ + exp ( - x ) - x ;
rank: 64
score: 99.3402099609375
patch: return $NUMBER$ + 0 . $NUMBER$ * exp ( - x ) ;
rank: 64
score: 99.31382242838542
patch: return 0 . $NUMBER$ * exp ( + x ) ;
rank: 65
score: 99.41551920572917
patch: return 0 . $NUMBER$ * exp ( - 1 . - x ) ;
rank: 65
score: 99.41383579799107
patch: return 0 . $NUMBER$ * exp ( - x ) + 1 ;
rank: 65
score: 99.40050455729167
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . 0 ;
rank: 65
score: 99.36928147536058
patch: return 0 . 1 * exp ( - x ) ; }
rank: 65
score: 99.36565755208333
patch: return 0 . $NUMBER$ + exp ( exp ( - x ) ) ;
rank: 65
score: 99.33802208533653
patch: result = 0 . 0 * exp ( - x ) ;
rank: 66
score: 99.41514369419643
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) - x ;
rank: 66
score: 99.40022277832031
patch: return 0 . $NUMBER$ * exp ( exp ( x ) - x ) ;
rank: 66
score: 99.36454264322917
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . $NUMBER$ ;
rank: 66
score: 99.31308218149039
patch: return 0 . $NUMBER$ * exp ( , - x ) ;
rank: 67
score: 99.4128646850586
patch: return 0 ; } return 0 . 0 * exp ( - x ) ;
rank: 67
score: 99.39999389648438
patch: return 0 . $NUMBER$ * exp ( - x ) + 0 . 0 ;
rank: 67
score: 99.369140625
patch: return 0 . 0 - exp ( - x ) ;
rank: 67
score: 99.33393205915179
patch: return $NUMBER$ . $NUMBER$ * exp ( - ( x ) ) ;
rank: 67
score: 99.31271798270089
patch: return - 0 . $NUMBER$ * exp ( - x ) ; }
rank: 67
score: 99.28451102120536
patch: return 1 . $NUMBER$ * exp ( x , - x ) ;
rank: 67
score: 99.26442173549107
patch: double x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 68
score: 99.41280924479166
patch: return 0 . $NUMBER$ * exp ( - x ) / - x ;
rank: 68
score: 99.39994303385417
patch: return 0 . $NUMBER$ * exp ( 0 . length - x ) ;
rank: 68
score: 99.39989295372597
patch: return 0 . 0 * exp ( - x ) ; ;
rank: 68
score: 99.284423828125
patch: return x + 0 . $NUMBER$ * exp ( x ) ;
rank: 68
score: 99.26286969866071
patch: return $NUMBER$ . $NUMBER$ * exp ( - x - x ) ;
rank: 69
score: 99.41141357421876
patch: return 0 . 0 * exp ( ) ;
rank: 69
score: 99.41001674107143
patch: return 0 . $NUMBER$ * exp ( - x ) ; ) ;
rank: 69
score: 99.39914175180289
patch: return 0 . 0 * exp ( x * x ) ;
rank: 69
score: 99.36699567522321
patch: return 0 . 0 * exp ( - 0 . 0 ) ;
rank: 69
score: 99.3322245279948
patch: return 0 . $NUMBER$ + exp ( - $NUMBER$ ) ;
rank: 69
score: 99.28339092548077
patch: if ( x > $NUMBER$ ) { x = - x ;
rank: 70
score: 99.40970552884616
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 70
score: 99.35748697916667
patch: return 0 . $NUMBER$ | 0 . $NUMBER$ * exp ( x ) ;
rank: 70
score: 99.33067103794643
patch: return 0 . $NUMBER$ ; } if ( x < 0 ) {
rank: 70
score: 99.30919300426136
patch: return 1 . 0 * exp ( x ) ;
rank: 71
score: 99.3982162475586
patch: return 0 . $NUMBER$ * exp ( - x ) - 1 . $NUMBER$ ;
rank: 71
score: 99.35627092633929
patch: return 0 . $NUMBER$ * exp ( - x ) - $NUMBER$ ;
rank: 71
score: 99.32973807198661
patch: return 0 . $NUMBER$ ; } if ( x < $NUMBER$ ) {
rank: 71
score: 99.25648850661058
patch: x = $NUMBER$ . 0 * exp ( - x ) ;
rank: 72
score: 99.4081802368164
patch: return 0 . 0 * exp ( - x ) * exp ( ) ;
rank: 72
score: 99.40633138020833
patch: return 0 . $NUMBER$ * exp ( - x ) * x ) ;
rank: 72
score: 99.39654134114583
patch: return 0 . $NUMBER$ * exp ( 0 . 0 + x ) ;
rank: 72
score: 99.3559326171875
patch: } else { return 0 . $NUMBER$ + exp ( - x ) ;
rank: 72
score: 99.2820575420673
patch: return 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 72
score: 99.25474330357143
patch: x = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 73
score: 99.406494140625
patch: return 0 / 0 . $NUMBER$ * exp ( - x ) ;
rank: 73
score: 99.40628255208334
patch: return 0 . $NUMBER$ * exp ( - x ) ; return $NUMBER$ ;
rank: 73
score: 99.35124860491071
patch: return 0 . $NUMBER$ * exp ( - x / x ) ;
rank: 73
score: 99.30534224076705
patch: return 0 . 0 , exp ( x ) ;
rank: 73
score: 99.28181675502232
patch: return 0 . $NUMBER$ * exp ( x , - $NUMBER$ ) ;
rank: 73
score: 99.25450788225446
patch: return 0 . $NUMBER$ * exp ( - x ) . x ;
rank: 74
score: 99.35008021763393
patch: return 0 . $NUMBER$ + exp ( - x ) + x ;
rank: 75
score: 99.40550944010417
patch: return 0 . $NUMBER$ * exp ( x + x + x ) ;
rank: 75
score: 99.3947998046875
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . 0 ;
rank: 75
score: 99.3477783203125
patch: return 0 . $NUMBER$ : 0 * exp ( - x ) ;
rank: 76
score: 99.40400390625
patch: return 0 . $NUMBER$ * exp ( ( x - x ) ) ;
rank: 76
score: 99.40315246582031
patch: return 0 . 0 * exp ( - x ) * 0 . $NUMBER$ ;
rank: 76
score: 99.39467947823661
patch: return 0 . $NUMBER$ * exp ( - 1 . 0 ) ;
rank: 76
score: 99.34722137451172
patch: return exp ( - x ) ;
rank: 76
score: 99.29872639973958
patch: return 0 . $NUMBER$ * Math ( - x ) ;
rank: 77
score: 99.39945475260417
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; return x ;
rank: 77
score: 99.39304762620192
patch: return 0 . $NUMBER$ 0 * exp ( - x ) ;
rank: 77
score: 99.35199846540179
patch: return 0 / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 77
score: 99.34696138822116
patch: return 0 . $NUMBER$ ] * exp ( - x ) ;
rank: 77
score: 99.29645647321429
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ * HEX _ $NUMBER$ ;
rank: 77
score: 99.27893938337054
patch: return $NUMBER$ . $NUMBER$ * exp ( x , - x ) ;
rank: 78
score: 99.40204729352679
patch: return 0 . $NUMBER$ * exp ( - 1 ) - x ;
rank: 78
score: 99.39807942708333
patch: return 0 . $NUMBER$ * 0 * exp ( x + x ) ;
rank: 78
score: 99.351318359375
patch: return 0 . 0 * exp ( x - $NUMBER$ ) ;
rank: 78
score: 99.34520612444196
patch: return 0 . $NUMBER$ . 1 * exp ( - x ) ;
rank: 78
score: 99.32150704520089
patch: return 0 . $NUMBER$ * exp ( - ( $NUMBER$ ) ) ;
rank: 78
score: 99.24935477120536
patch: return 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ; }
rank: 79
score: 99.40196228027344
patch: return 0 . $NUMBER$ * exp ( - 1 ) / $NUMBER$ . $NUMBER$ ;
rank: 79
score: 99.3917236328125
patch: return 0 . 0 * exp ( exp ( - x ) ) ;
rank: 79
score: 99.38135637555804
patch: return 0 . 0 * exp ( - x * x ) ;
rank: 79
score: 99.3435809795673
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ) ;
rank: 79
score: 99.32071627103366
patch: result = 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 79
score: 99.24912672776442
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 80
score: 99.39955139160156
patch: return 0 . 0 * exp ( - x ) / $NUMBER$ . 0 ;
rank: 80
score: 99.39170619419643
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , - x ) ;
rank: 80
score: 99.38086809430804
patch: return 1 . $NUMBER$ * exp ( - x ) + x ;
rank: 80
score: 99.34967912946429
patch: return 0 . $NUMBER$ * exp ( - - x ) ; }
rank: 80
score: 99.32071358816964
patch: return x - 0 . 0 * exp ( - x ) ;
rank: 80
score: 99.29405866350446
patch: return 0 . 0 * exp ( x , x ) ; }
rank: 81
score: 99.39833068847656
patch: return 0 . $NUMBER$ * exp ( x ) / exp ( x ) ;
rank: 81
score: 99.3968505859375
patch: return 0 . $NUMBER$ * exp ( - x ) ; -- x ;
rank: 81
score: 99.39167336856617
patch: return 0 . $NUMBER$ * exp ( x ) + exp ( - x ) ;
rank: 81
score: 99.37962995256696
patch: return 0 . 0 * exp ( - x , x ) ;
rank: 81
score: 99.3430887858073
patch: return 0 . $NUMBER$ : exp ( - x ) ;
rank: 81
score: 99.31984456380208
patch: return 0 . $NUMBER$ * exp ( - 0 ) ;
rank: 81
score: 99.29349459134616
patch: return new 0 . $NUMBER$ * exp ( - x ) ;
rank: 82
score: 99.39566243489584
patch: return 0 . $NUMBER$ * exp ( x ) * x * x ;
rank: 82
score: 99.39051818847656
patch: return 0 . $NUMBER$ * exp ( exp ( x ) + x ) ;
rank: 82
score: 99.34926932198661
patch: return 0 . 0 . $NUMBER$ / exp ( - x ) ;
rank: 82
score: 99.342919921875
patch: return 0 . $NUMBER$ : 1 . $NUMBER$ * exp ( x ) ;
rank: 82
score: 99.31433977399554
patch: return 0 . $NUMBER$ * x - exp ( - x ) ;
rank: 83
score: 99.38857852711396
patch: return 0 . $NUMBER$ * exp ( exp ( - x ) - x ) ;
rank: 83
score: 99.2882080078125
patch: return 0 . 0 * $NUMBER$ * exp ( - x ) ;
rank: 83
score: 99.24828229631696
patch: return 1 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 84
score: 99.3968276977539
patch: return 0 . 0 * exp ( - x ) / ( x ) ;
rank: 84
score: 99.39143589564732
patch: return 0 . $NUMBER$ * exp ( x - - x ) ;
rank: 84
score: 99.38819795496323
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ * exp ( - x ) ;
rank: 84
score: 99.34229532877605
patch: } return 0 . $NUMBER$ * exp ( x ) ;
rank: 84
score: 99.31136067708333
patch: double 0 . $NUMBER$ * exp ( - x ) ;
rank: 84
score: 99.27381388346355
patch: exp ( x , 0 . 0 , x ) ;
rank: 84
score: 99.24818004261364
patch: x = $NUMBER$ * exp ( - x ) ;
rank: 85
score: 99.38762664794922
patch: return 0 . $NUMBER$ * exp ( 0 . 0 + - x ) ;
rank: 85
score: 99.37516276041667
patch: return - 1 . $NUMBER$ * exp ( x ) ;
rank: 85
score: 99.34190266927084
patch: return 0 . 0 * exp ( x ) * 0 . $NUMBER$ ;
rank: 85
score: 99.31072126116071
patch: return ( 0 . $NUMBER$ - exp ( - x ) ) ;
rank: 85
score: 99.28793334960938
patch: return - 0 . 0 * exp ( x ) ;
rank: 85
score: 99.27327183314732
patch: return 0 - x . $NUMBER$ * exp ( - x ) ;
rank: 85
score: 99.2468731219952
patch: x = 1 . 0 * exp ( - x ) ;
rank: 86
score: 99.37354532877605
patch: = 0 . 0 * exp ( - x ) ;
rank: 86
score: 99.34156087239583
patch: return 0 . $NUMBER$ * exp ( x ) - x + x ;
rank: 86
score: 99.24685434194711
patch: . return 0 . $NUMBER$ * exp ( - x ) ;
rank: 87
score: 99.39555140904018
patch: return 0 . $NUMBER$ * exp ( - 1 ) / x ;
rank: 87
score: 99.38838704427083
patch: return 0 . x * exp ( - x ) ;
rank: 87
score: 99.34127371651786
patch: return 0 . $NUMBER$ + 0 * exp ( - x ) ;
rank: 87
score: 99.30669759114583
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 87
score: 99.28732299804688
patch: return 0 . $NUMBER$ * min ( - x ) ;
rank: 88
score: 99.39402770996094
patch: return 0 . 0 * exp ( - x ) * x * x ;
rank: 88
score: 99.37002563476562
patch: return 0 . $NUMBER$ * exp ( double ) x ;
rank: 88
score: 99.33759416852679
patch: return 0 . $NUMBER$ . 0 / exp ( - x ) ;
rank: 88
score: 99.30654672475961
patch: ret = 0 . $NUMBER$ * exp ( - x ) ;
rank: 88
score: 99.28707449776786
patch: return 0 . $NUMBER$ * exp ( - x ) : $NUMBER$ ;
rank: 88
score: 99.27129255022321
patch: return 1 . $NUMBER$ * exp ( - x - x ) ;
rank: 89
score: 99.39366912841797
patch: return 0 . 0 * exp ( - x ) * $NUMBER$ . $NUMBER$ ;
rank: 89
score: 99.33693284254808
patch: return 0 . $NUMBER$ . 0 * exp ( x ) ;
rank: 90
score: 99.39309692382812
patch: return 0 . $NUMBER$ * exp ( - x ) * x - x ;
rank: 90
score: 99.38493129185268
patch: return 0 . $NUMBER$ * exp ( - - x ) ) ;
rank: 90
score: 99.3813247680664
patch: return 0 . $NUMBER$ * exp ( 0 . 0 - - x ) ;
rank: 90
score: 99.36778041294643
patch: return 0 . 0 * this . exp ( - x ) ;
rank: 90
score: 99.33919270833333
patch: return 0 . $NUMBER$ + exp ( x ) ) ;
rank: 90
score: 99.33689662388393
patch: return 0 . $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 90
score: 99.30257474459134
patch: return x - 0 . $NUMBER$ * exp ( x ) ;
rank: 90
score: 99.28414481026786
patch: return 0 . $NUMBER$ * $NUMBER$ / exp ( - x ) ;
rank: 90
score: 99.26874248798077
patch: exp ( x , 0 . 0 , - x ) ;
rank: 90
score: 99.23928833007812
patch: return 0 . $NUMBER$ * this ( - x ) ;
rank: 91
score: 99.3924560546875
patch: return 0 * exp ( - x ) / $NUMBER$ ;
rank: 91
score: 99.38412911551339
patch: return 0 . $NUMBER$ * x * exp ( - x ) ;
rank: 91
score: 99.33896484375
patch: return 0 . $NUMBER$ * exp ( - x ) + x ) ;
rank: 92
score: 99.38307698567708
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 92
score: 99.36723109654018
patch: return 0 . $NUMBER$ * exp ( double ) 0 . $NUMBER$ ;
rank: 92
score: 99.33549281529018
patch: return 0 . 0 * exp ( - x + $NUMBER$ ) ;
rank: 92
score: 99.3017245205966
patch: return $NUMBER$ . 0 * exp ( x ) ;
rank: 93
score: 99.36439005533855
patch: return 1 . $NUMBER$ / exp ( - x ) ;
rank: 93
score: 99.28293081430289
patch: return 0 . $NUMBER$ * exp ( x ) ; break ;
rank: 93
score: 99.26804024832589
patch: return x + 1 . $NUMBER$ * exp ( - x ) ;
rank: 94
score: 99.37875545726104
patch: return 0 . $NUMBER$ * exp ( - x ) * exp ( x ) ;
rank: 94
score: 99.36371721540179
patch: return 1 . $NUMBER$ * exp ( - x ) - x ;
rank: 94
score: 99.3345947265625
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 94
score: 99.2822265625
patch: return 0 . $NUMBER$ * exp ( x , $NUMBER$ ) ;
rank: 95
score: 99.38074669471153
patch: return 0 . $NUMBER$ * exp ( x ) ; / /
rank: 95
score: 99.37858581542969
patch: return 0 . $NUMBER$ + 0 . 0 * exp ( - x ) ;
rank: 95
score: 99.3373272235577
patch: } return 0 . $NUMBER$ + exp ( - x ) ;
rank: 95
score: 99.28138224283855
patch: return 0 . $NUMBER$ * double ( - x ) ;
rank: 95
score: 99.23508998325893
patch: return 0 . $NUMBER$ * exp ( x + x ) ; }
rank: 96
score: 99.38051350911458
patch: return 0 . $NUMBER$ * - exp ( x ) ;
rank: 96
score: 99.37623596191406
patch: return 0 . 0 + 0 . $NUMBER$ * exp ( - x ) ;
rank: 96
score: 99.36256626674107
patch: return 0 . $NUMBER$ * exp ( x ) + - x ;
rank: 96
score: 99.29908040364583
patch: return 0 . 0 * exp ( - x ) ; } else {
rank: 97
score: 99.38046061197916
patch: return 0 . $NUMBER$ * 0 * exp ( x - x ) ;
rank: 97
score: 99.37594604492188
patch: return 0 . 1 + exp ( - x ) ;
rank: 97
score: 99.3622295673077
patch: return - 0 . $NUMBER$ / exp ( - x ) ;
rank: 97
score: 99.33565266927083
patch: return 0 . $NUMBER$ * exp ( * exp ( x ) ) ;
rank: 97
score: 99.23227163461539
patch: return return 0 . $NUMBER$ * exp ( - x ) ;
rank: 98
score: 99.36048302283653
patch: return 0 . 0 * exp ( double ) - x ;
rank: 98
score: 99.33564976283482
patch: try { return 0 . $NUMBER$ * exp ( - x ) ;
rank: 98
score: 99.2973388671875
patch: return 0 . $NUMBER$ * exp ( exp ( - $NUMBER$ ) ) ;
rank: 98
score: 99.26311786358173
patch: return 0 . 1 * exp ( x , x ) ;
rank: 99
score: 99.37569427490234
patch: return 0 . $NUMBER$ * exp ( - x ) - 1 . 0 ;
rank: 99
score: 99.33365572415866
patch: return 0 . $NUMBER$ * exp ( x / x ) ;
rank: 100
score: 99.3860855102539
patch: return 0 . 0 * exp ( x ) * exp ( x ) ;
rank: 100
score: 99.37875366210938
patch: return 0 . exp ( - x ) ;
rank: 100
score: 99.37423885569854
patch: return 0 . $NUMBER$ * exp ( x ) - exp ( - x ) ;
rank: 100
score: 99.33364432198661
patch: return 0 . $NUMBER$ - 0 * exp ( - x ) ;
rank: 100
score: 99.32814243861607
patch: return 0 . 1 * exp ( - x ) - x ;
rank: 100
score: 99.26031494140625
patch: if ( x > $NUMBER$ ) { x = - x ; }
rank: 101
score: 99.38321358816964
patch: return 0 . 0 * exp ( - 1 . $NUMBER$ ) ;
rank: 101
score: 99.37809244791667
patch: return 0 . $NUMBER$ * 0 * exp ( - - x ) ;
rank: 101
score: 99.33358999399039
patch: return 0 . $NUMBER$ + exp ( x ) - x ;
rank: 101
score: 99.27578500600961
patch: return 0 . 0 * exp ( x , 0 ) ;
rank: 102
score: 99.38262176513672
patch: return 0 . $NUMBER$ * exp ( ) / exp ( - x ) ;
rank: 102
score: 99.333203125
patch: return 0 . $NUMBER$ * exp ( x + x ) + x ;
rank: 102
score: 99.32346598307292
patch: return $NUMBER$ . 1 * exp ( - x ) ;
rank: 102
score: 99.29471261160714
patch: return x + 0 . 0 * exp ( - x ) ;
rank: 102
score: 99.27545635516827
patch: return 0 . $NUMBER$ * / exp ( - x ) ;
rank: 102
score: 99.2300516764323
patch: x = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 103
score: 99.37599400111607
patch: return $NUMBER$ . $NUMBER$ * exp ( - x + x ) ;
rank: 103
score: 99.37289864676339
patch: return 0 return 0 . $NUMBER$ * exp ( - x ) ;
rank: 103
score: 99.25877162388393
patch: return 0 . $NUMBER$ * exp ( - x ) / 1 ;
rank: 104
score: 99.35665189302884
patch: return 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 105
score: 99.38221740722656
patch: return 0 . 0 * exp ( ) * exp ( - x ) ;
rank: 105
score: 99.33234049479167
patch: return exp ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 105
score: 99.29110717773438
patch: return $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 105
score: 99.27338115985577
patch: return 0 . $NUMBER$ * exp ( x ) : 0 ;
rank: 105
score: 99.22903006417411
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; } }
rank: 106
score: 99.3816909790039
patch: return 0 . $NUMBER$ * exp ( - x ) / ( $NUMBER$ ) ;
rank: 106
score: 99.37428385416666
patch: return 0 . $NUMBER$ * exp ( - x + - x ) ;
rank: 106
score: 99.37181091308594
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . ) ;
rank: 106
score: 99.35259540264423
patch: return - 0 . 1 * exp ( - x ) ;
rank: 106
score: 99.32994791666667
patch: return 0 . $NUMBER$ * 0 * exp ( - x ) ) ;
rank: 106
score: 99.32125854492188
patch: return 0 . 0 / exp ( - $NUMBER$ ) ;
rank: 106
score: 99.27297141335227
patch: return exp ( x , 0 . 0 ) ;
rank: 106
score: 99.25814115084134
patch: return x - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 107
score: 99.35232309194711
patch: return 0 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 107
score: 99.28896658761161
patch: return 0 . $NUMBER$ * exp ( - HEX _ $NUMBER$ ) ;
rank: 107
score: 99.25813802083333
patch: return 0 / exp ( x ) ;
rank: 107
score: 99.22713529146634
patch: return 0 . 1 . $NUMBER$ * exp ( x ) ;
rank: 108
score: 99.37934112548828
patch: return 0 . $NUMBER$ * exp ( - x ) + ( x ) ;
rank: 108
score: 99.36869049072266
patch: return 0 . $NUMBER$ + exp ( - x ) / 0 . 0 ;
rank: 108
score: 99.35227748325893
patch: return 0 . $NUMBER$ * exp ( - x * $NUMBER$ ) ;
rank: 108
score: 99.2264873798077
patch: return $NUMBER$ . 0 * exp ( - x ) ; }
rank: 109
score: 99.36866048177083
patch: return 0 . 0 * exp ( 0 . 0 - x ) ;
rank: 109
score: 99.3242696126302
patch: return 0 . $NUMBER$ ] * exp ( x ) ;
rank: 109
score: 99.27158610026042
patch: return 0 . $NUMBER$ * * exp ( x ) ;
rank: 109
score: 99.25543682391827
patch: if ( x > 0 ) { x = - x ;
rank: 109
score: 99.22617013113839
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 110
score: 99.37843831380208
patch: return 0 * exp ( - x ) / x ;
rank: 110
score: 99.37240397135416
patch: return 0 . - 0 . $NUMBER$ * exp ( - x ) ;
rank: 110
score: 99.36757249098558
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , x ) ;
rank: 110
score: 99.32359619140625
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ ;
rank: 110
score: 99.31520298549107
patch: return 0 . $NUMBER$ / exp ( - x + x ) ;
rank: 110
score: 99.28809465680804
patch: return 0 . $NUMBER$ * exp ( x ) ; case $NUMBER$ :
rank: 110
score: 99.27138264973958
patch: return 0 . $NUMBER$ * value ( - x ) ;
rank: 111
score: 99.37748718261719
patch: return 0 ; } else { return 0 . $NUMBER$ * exp ( ) ;
rank: 111
score: 99.34810965401786
patch: return - 0 . $NUMBER$ * exp ( - - x ) ;
rank: 111
score: 99.2880859375
patch: return 0 . $NUMBER$ * exp ( - ( - x ) ) ;
rank: 111
score: 99.2706298828125
patch: return 0 . $NUMBER$ * exp ( - x ) + 0 ;
rank: 111
score: 99.25449044363839
patch: return 0 . $NUMBER$ * 1 * exp ( - x ) ;
rank: 111
score: 99.22133963448661
patch: return 0 . 0 * exp ( - x ) ; } }
rank: 112
score: 99.37223597935268
patch: return 0 . $NUMBER$ * exp ( - x ) ) ) ;
rank: 112
score: 99.3663101196289
patch: return 0 . $NUMBER$ * exp ( exp ( 0 ) - x ) ;
rank: 112
score: 99.34746844951923
patch: return - $NUMBER$ . 0 * exp ( - x ) ;
rank: 112
score: 99.31388033353366
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ ;
rank: 112
score: 99.28744070870536
patch: return 0 . 0 * exp ( x ) ; } else {
rank: 112
score: 99.25408063616071
patch: return 0 . $NUMBER$ * exp ( - x ) . $NUMBER$ ;
rank: 112
score: 99.22026715959821
patch: x = 0 . $NUMBER$ * exp ( x - x ) ;
rank: 113
score: 99.37666829427083
patch: return 0 * exp ( - x ) + x ;
rank: 113
score: 99.37127685546875
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) * x ;
rank: 113
score: 99.36587524414062
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 . 1 ;
rank: 113
score: 99.32161771334134
patch: return 1 . $NUMBER$ * exp ( - x ) ) ;
rank: 113
score: 99.28726196289062
patch: if ( x < 0 . 0 ) {
rank: 113
score: 99.25333658854167
patch: return exp ( x , x ) ;
rank: 114
score: 99.37664794921875
patch: return 0 . $NUMBER$ * exp ( - 1 ) + 0 . $NUMBER$ ;
rank: 114
score: 99.32138671875
patch: return 0 . $NUMBER$ * exp ( x ) * x + x ;
rank: 114
score: 99.31357247488839
patch: { return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 114
score: 99.28601946149554
patch: return 1 . $NUMBER$ * exp ( - ( x ) ) ;
rank: 115
score: 99.37603352864583
patch: return 0 . $NUMBER$ * exp ( - x ) / x ) ;
rank: 115
score: 99.32119954427084
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ) ;
rank: 115
score: 99.28586989182692
patch: result return 0 . $NUMBER$ * exp ( - x ) ;
rank: 115
score: 99.25067138671875
patch: return 0 . $NUMBER$ * x ;
rank: 116
score: 99.36265563964844
patch: return 0 . 0 * exp ( - x ) / 1 . $NUMBER$ ;
rank: 116
score: 99.34166541466347
patch: return 1 . $NUMBER$ * exp ( - - x ) ;
rank: 116
score: 99.31222098214286
patch: return 0 . 1 . 0 * exp ( - x ) ;
rank: 116
score: 99.28324068509616
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ ) ;
rank: 116
score: 99.26784104567308
patch: return - 0 . $NUMBER$ * exp ( x ) ; }
rank: 116
score: 99.24945537860577
patch: return 0 . $NUMBER$ * exp ( x ) / x ;
rank: 116
score: 99.21814836774554
patch: return 0 - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 117
score: 99.37489670973558
patch: return - 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 117
score: 99.36490572415866
patch: return $NUMBER$ . $NUMBER$ * exp ( x + x ) ;
rank: 117
score: 99.36211286272321
patch: return 0 . $NUMBER$ * exp ( exp ( 0 ) ) ;
rank: 117
score: 99.34164864676339
patch: return 0 . $NUMBER$ * exp ( x * - x ) ;
rank: 117
score: 99.32114955357143
patch: return 0 . $NUMBER$ / 0 * exp ( - x ) ;
rank: 117
score: 99.21723284040179
patch: return 0 . $NUMBER$ * exp ( x . - x ) ;
rank: 118
score: 99.36356295072116
patch: return $NUMBER$ . $NUMBER$ * 0 * exp ( x ) ;
rank: 118
score: 99.33811442057292
patch: double CaMeL Value ( - x ) ;
rank: 118
score: 99.32052408854166
patch: return 0 . $NUMBER$ * exp ( 1 . $NUMBER$ - x ) ;
rank: 118
score: 99.26484818892045
patch: return 0 . $NUMBER$ * Math ( x ) ;
rank: 119
score: 99.37397003173828
patch: return 0 * exp ( - x ) . double CaMeL Value ( ) ;
rank: 119
score: 99.32039097377232
patch: else { return 0 . $NUMBER$ * exp ( - x ) ;
rank: 119
score: 99.26479666573661
patch: return - 0 . $NUMBER$ * exp ( x , x ) ;
rank: 119
score: 99.21556599934895
patch: return 1 . $NUMBER$ * exp ( x ) ; }
rank: 120
score: 99.37317657470703
patch: return 0 . 0 * exp ( - x ) / exp ( ) ;
rank: 120
score: 99.36139787946429
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) + x ;
rank: 120
score: 99.35906219482422
patch: return 0 . $NUMBER$ * exp ( - x ) / 1 . 1 ;
rank: 120
score: 99.31984049479166
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 0 ;
rank: 120
score: 99.2821044921875
patch: return 0 . $NUMBER$ * exp ( - ( 1 ) ) ;
rank: 120
score: 99.2466708096591
patch: return 0 * exp ( x , x ) ;
rank: 121
score: 99.36005859375
patch: return 0 . $NUMBER$ * exp ( - x ) ; / / /
rank: 121
score: 99.31167166573661
patch: return 0 . 0 / $NUMBER$ * exp ( - x ) ;
rank: 121
score: 99.28108723958333
patch: return 0 . $NUMBER$ + 0 . 0 * exp ( x ) ;
rank: 121
score: 99.24613131009616
patch: if ( x < $NUMBER$ ) { x = - x ;
rank: 122
score: 99.37228190104166
patch: return 0 . 0 * exp ( - x ) * - x ;
rank: 122
score: 99.35982259114583
patch: return 0 . $NUMBER$ * abs ( - x ) ;
rank: 122
score: 99.33416748046875
patch: return 0 . $NUMBER$ * exp ( double ) ( x ) ;
rank: 122
score: 99.31924641927084
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ + x ) ;
rank: 122
score: 99.26368297230114
patch: return 0 . $NUMBER$ * value ( x ) ;
rank: 122
score: 99.21412876674107
patch: x = 0 . 0 * exp ( - x ) ; }
rank: 123
score: 99.37215482271634
patch: return 0 . $NUMBER$ * exp ( - 1 ) ; }
rank: 123
score: 99.35785675048828
patch: return 0 . $NUMBER$ + exp ( - x ) / 0 . $NUMBER$ ;
rank: 123
score: 99.3333740234375
patch: return 0 . 0 * exp ( double ) x ;
rank: 123
score: 99.31905364990234
patch: return 0 . $NUMBER$ * 0 ;
rank: 123
score: 99.31125313895089
patch: return 0 . $NUMBER$ * exp ( - x + 1 ) ;
rank: 123
score: 99.27973284040179
patch: return 0 . $NUMBER$ + ( exp ( - x ) ) ;
rank: 124
score: 99.37119547526042
patch: return 0 * 0 * exp ( - x ) ;
rank: 124
score: 99.3580078125
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; return ) ;
rank: 124
score: 99.3577880859375
patch: return 0 . $NUMBER$ * exp ( - start ) ;
rank: 124
score: 99.33278982979911
patch: return - - 0 . $NUMBER$ * exp ( - x ) ;
rank: 124
score: 99.31903545673077
patch: return 0 . $NUMBER$ + exp ( x + x ) ;
rank: 124
score: 99.27915852864584
patch: return 0 . $NUMBER$ * exp ( - x ) ; case $NUMBER$ :
rank: 124
score: 99.26268659319196
patch: return 0 . $NUMBER$ * exp ( - x ) : x ;
rank: 124
score: 99.24469866071429
patch: return exp ( x , 0 . $NUMBER$ , - x ) ;
rank: 124
score: 99.21124267578125
patch: temp = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 125
score: 99.37083435058594
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ . 0 ;
rank: 125
score: 99.35554722377232
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; / /
rank: 125
score: 99.33236929086539
patch: return 0 . $NUMBER$ / exp ( - - x ) ;
rank: 125
score: 99.31861223493304
patch: return 0 . $NUMBER$ * exp ( - x ) ; * /
rank: 125
score: 99.27906145368304
patch: return 0 . $NUMBER$ * ( exp ( - x ) ) ;
rank: 125
score: 99.20979527064732
patch: exp ( x , 0 . 0 , 0 . 0 ) ;
rank: 126
score: 99.37081909179688
patch: return 0 . $NUMBER$ * exp ( - 1 ) * 0 . $NUMBER$ ;
rank: 126
score: 99.35711669921875
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * exp ( - x ) ;
rank: 126
score: 99.35450962611607
patch: return 0 . $NUMBER$ * exp ( - x ) ; / *
rank: 126
score: 99.3171895345052
patch: return 0 . $NUMBER$ ? exp ( - x ) ;
rank: 126
score: 99.27873011997768
patch: return x ; } if ( x < 0 . 0 ) {
rank: 127
score: 99.35445149739583
patch: return 0 . $NUMBER$ * exp ( - x ) ; ++ x ;
rank: 127
score: 99.33079310825893
patch: return 1 . $NUMBER$ * exp ( - x ) * x ;
rank: 127
score: 99.27777099609375
patch: return 0 , 0 . $NUMBER$ * exp ( - x ) ;
rank: 127
score: 99.26109822591145
patch: return 0 . 0 * new double [ $NUMBER$ ] ;
rank: 127
score: 99.24110630580357
patch: if ( x > 0 ) { x = - x ; }
rank: 128
score: 99.37033081054688
patch: return 0 . $NUMBER$ * exp ( - 1 ) * exp ( ) ;
rank: 128
score: 99.31644381009616
patch: return 0 . $NUMBER$ * exp ( - x $NUMBER$ ) ;
rank: 128
score: 99.30970177283653
patch: return 0 . 0 / exp ( - x ) ; }
rank: 128
score: 99.27743094308036
patch: return 0 . $NUMBER$ * exp ( - x - 1 ) ;
rank: 128
score: 99.26083608774039
patch: return 0 . $NUMBER$ * x double ( - x ) ;
rank: 129
score: 99.36998748779297
patch: return 0 . $NUMBER$ * Double . $NUMBER$ * exp ( - x ) ;
rank: 129
score: 99.35640716552734
patch: return 0 . $NUMBER$ * exp ( x ) exp ( - x ) ;
rank: 129
score: 99.31598307291667
patch: return 0 . $NUMBER$ * exp ( int ) exp ( x ) ;
rank: 129
score: 99.30928178267045
patch: return 0 . 0 + exp ( x ) ;
rank: 129
score: 99.27643291766827
patch: result = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 129
score: 99.2608133951823
patch: return 0 . $NUMBER$ * int ( - x ) ;
rank: 129
score: 99.20389498197116
patch: return $NUMBER$ . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 130
score: 99.36907196044922
patch: return 0 . 0 * exp ( - ( x - x ) ) ;
rank: 130
score: 99.35105387369792
patch: return Double . 0 * exp ( - x ) ;
rank: 130
score: 99.32530866350446
patch: return 0 . $NUMBER$ * exp ( - x ) << $NUMBER$ ;
rank: 130
score: 99.30859375
patch: return 0 . $NUMBER$ * exp ( - x ) = x ;
rank: 130
score: 99.2760986328125
patch: return $NUMBER$ / exp ( - x ) ;
rank: 130
score: 99.2388916015625
patch: return 0 . $NUMBER$ * exp ( x , x x ) ;
rank: 130
score: 99.2036884014423
patch: y = 0 . $NUMBER$ * exp ( - x ) ;
rank: 131
score: 99.3559211282169
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 - x ) ;
rank: 131
score: 99.35098470052084
patch: return 0 . $NUMBER$ * exp ( - x ) ) * x ;
rank: 131
score: 99.30802699497768
patch: return 0 . 1 * exp ( - x + x ) ;
rank: 131
score: 99.25935581752232
patch: return 0 . $NUMBER$ / exp ( - x - x ) ;
rank: 131
score: 99.23885404146634
patch: if ( x < 0 ) { x = - x ;
rank: 132
score: 99.36636555989584
patch: return 0 . $NUMBER$ * exp ( - x ) ( x ) ;
rank: 132
score: 99.35023600260416
patch: return 0 . $NUMBER$ * exp ( - x ) . - x ;
rank: 132
score: 99.30771309988839
patch: return 0 . 0 * exp ( - x - $NUMBER$ ) ;
rank: 132
score: 99.27396937779018
patch: return 0 . 0 * exp ( - 0 . $NUMBER$ ) ;
rank: 132
score: 99.23855154854911
patch: return - x - 0 . $NUMBER$ * exp ( x ) ;
rank: 133
score: 99.36636352539062
patch: return 0 . 0 * exp ( - x ) * / - x ;
rank: 133
score: 99.35443878173828
patch: return 0 . $NUMBER$ * exp ( - x ) : 0 . $NUMBER$ ;
rank: 133
score: 99.34881998697917
patch: return 0 . 0 * exp ( - x ) ; return x ;
rank: 133
score: 99.25880940755208
patch: return 0 . $NUMBER$ / exp ( x ) ; }
rank: 133
score: 99.23820277622768
patch: x = 0 . $NUMBER$ * exp ( x , x ) ;
rank: 134
score: 99.32376534598214
patch: return 0 . 0 - 0 * exp ( - x ) ;
rank: 134
score: 99.2586200420673
patch: return exp ( x , exp ( - x ) ) ;
rank: 134
score: 99.23701695033482
patch: return - x - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 134
score: 99.20068359375
patch: x = 0 . $NUMBER$ * exp ( x ) ; }
rank: 135
score: 99.348583984375
patch: return 0 . $NUMBER$ * exp 0 * exp ( - x ) ;
rank: 135
score: 99.32274451622597
patch: return - 0 . $NUMBER$ + exp ( - x ) ;
rank: 135
score: 99.30705043247768
patch: return 0 . $NUMBER$ * - exp ( x - x ) ;
rank: 135
score: 99.27208658854167
patch: return 0 . $NUMBER$ * exp ( - - 0 . 0 ) ;
rank: 135
score: 99.25845336914062
patch: return 0 . $NUMBER$ * get ( - x ) ;
rank: 136
score: 99.36449432373047
patch: return 0 . $NUMBER$ * exp ( - 1 ) / 0 . $NUMBER$ ;
rank: 136
score: 99.35253143310547
patch: return 0 . $NUMBER$ * exp ( 0 . 0 , - x ) ;
rank: 136
score: 99.3485595703125
patch: return 0 . $NUMBER$ * exp ( - x ) ) + x ;
rank: 136
score: 99.32237659801136
patch: return 0 . $NUMBER$ * exp ( - x )
rank: 136
score: 99.31097005208333
patch: return 0 . $NUMBER$ * exp ( - x + x ) ) ;
rank: 136
score: 99.30690511067708
patch: { return 0 . $NUMBER$ * exp ( x ) ;
rank: 136
score: 99.20024762834821
patch: return 0 . $NUMBER$ * exp ( x ) ; } ) ;
rank: 137
score: 99.36436157226562
patch: return 0 * exp ( - $NUMBER$ ) ;
rank: 137
score: 99.32229178292411
patch: return 0 . 0 * exp ( - x ) + 1 ;
rank: 137
score: 99.23528180803571
patch: return 0 - 0 . 0 * exp ( - x ) ;
rank: 137
score: 99.19950648716518
patch: x = $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 138
score: 99.35170491536458
patch: return 0 . $NUMBER$ + exp ( - 1 ) ;
rank: 138
score: 99.34525844029018
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ) ;
rank: 138
score: 99.32211739676339
patch: return 0 . $NUMBER$ * exp ( - x / $NUMBER$ ) ;
rank: 138
score: 99.27187875600961
patch: return - $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 138
score: 99.25590376420455
patch: return 0 . $NUMBER$ , exp ( x ) ;
rank: 138
score: 99.19827974759616
patch: return / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 139
score: 99.36331176757812
patch: return 0 . $NUMBER$ * exp ( - 1 ) / ( x ) ;
rank: 139
score: 99.35012582632211
patch: return 0 . $NUMBER$ * exp ( 0 . length ) ;
rank: 139
score: 99.3446044921875
patch: return 0 . $NUMBER$ * exp ( - x ) .
rank: 139
score: 99.30470784505208
patch: return 0 . $NUMBER$ * ( x - x ) ;
rank: 140
score: 99.34978889016544
patch: return 0 . $NUMBER$ ; return 0 . $NUMBER$ * exp ( - x ) ;
rank: 140
score: 99.32053920200893
patch: return 1 . 0 * exp ( - x ) + x ;
rank: 140
score: 99.3043964092548
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ ;
rank: 140
score: 99.2703125
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; } else {
rank: 140
score: 99.25520833333333
patch: += 0 . $NUMBER$ * exp ( - x ) ;
rank: 141
score: 99.3628921508789
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ * x ;
rank: 141
score: 99.30403355189732
patch: return 0 . 1 . $NUMBER$ / exp ( - x ) ;
rank: 142
score: 99.36252267020089
patch: return 0 . 0 * exp ( - 1 ) * x ;
rank: 142
score: 99.30909946986607
patch: return 0 . $NUMBER$ * exp ( x + x ) ) ;
rank: 142
score: 99.3033916766827
patch: { return 0 . 0 * exp ( - x ) ;
rank: 142
score: 99.26986929086539
patch: return - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 142
score: 99.23262241908482
patch: return exp ( x ) ;
rank: 143
score: 99.30885416666666
patch: } else { return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 143
score: 99.30215018136161
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 143
score: 99.26970880681819
patch: return 0 . $NUMBER$ * double ( x ) ;
rank: 143
score: 99.23206583658855
patch: return HEX _ $NUMBER$ * exp ( - x ) ;
rank: 143
score: 99.19629845252403
patch: return / 0 . $NUMBER$ * exp ( - x ) ;
rank: 144
score: 99.342041015625
patch: return 0 . $NUMBER$ * exp ( - x ) ; / ) .
rank: 144
score: 99.31733921595982
patch: return - 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 144
score: 99.30831473214286
patch: } else { return 0 . $NUMBER$ * exp ( x ) ;
rank: 144
score: 99.23204694475446
patch: return ( x > $NUMBER$ ) * exp ( - x ) ;
rank: 145
score: 99.36122349330357
patch: return 0 * 0 . 0 * exp ( - x ) ;
rank: 145
score: 99.341552734375
patch: return 0 . $NUMBER$ * 0 + exp ( - x ) ;
rank: 145
score: 99.26953125
patch: return ( exp ( x ) ) ;
rank: 145
score: 99.23184814453126
patch: return exp ( x , - x ) ;
rank: 145
score: 99.1960918719952
patch: return 0 . $NUMBER$ * exp ( . - x ) ;
rank: 146
score: 99.36089680989583
patch: return 0 . $NUMBER$ * exp ( - x ) ; } * /
rank: 146
score: 99.34603881835938
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ . 1 ;
rank: 146
score: 99.34052734375
patch: return 0 . $NUMBER$ * exp ( ( x / x ) ) ;
rank: 146
score: 99.30714768629808
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ ;
rank: 146
score: 99.2691650390625
patch: return x - $NUMBER$ * exp ( - x ) ;
rank: 146
score: 99.25090680803571
patch: return 0 . 0 * exp ( - x ) : 0 ;
rank: 146
score: 99.23150634765625
patch: return 0 . $NUMBER$ * cosh ( - x ) ;
rank: 147
score: 99.3607177734375
patch: return 0 ; } else return 0 . $NUMBER$ * exp ( x ) ;
rank: 147
score: 99.34562174479167
patch: return 0 . $NUMBER$ * exp ( exp ( - 1 ) ) ;
rank: 147
score: 99.34039713541667
patch: return 0 . $NUMBER$ * exp ( x , x + x ) ;
rank: 147
score: 99.3148193359375
patch: return 0 . 1 * exp ( - x ) + x ;
rank: 147
score: 99.268701171875
patch: return 0 . $NUMBER$ * exp ( - ( - $NUMBER$ ) ) ;
rank: 147
score: 99.23147348257211
patch: return - x . $NUMBER$ * exp ( - x ) ;
rank: 147
score: 99.19568743024554
patch: return $NUMBER$ - 0 . $NUMBER$ * exp ( - x ) ;
rank: 148
score: 99.36040704900569
patch: return Double . $NUMBER$ * exp ( x ) ;
rank: 148
score: 99.34519330193015
patch: return 0 . $NUMBER$ * exp ( - x ) - exp ( x ) ;
rank: 148
score: 99.34005033052884
patch: return 0 . $NUMBER$ * exp ( - x ) x ;
rank: 148
score: 99.3056640625
patch: return $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 148
score: 99.26861572265625
patch: return 0 . 1 * exp ( - $NUMBER$ ) ;
rank: 149
score: 99.34471130371094
patch: return 0 . 0 * exp ( - x ) - 0 . $NUMBER$ ;
rank: 149
score: 99.33998209635416
patch: return 0 . $NUMBER$ * exp ( 0 . 0 * x ) ;
rank: 149
score: 99.31202043805804
patch: this . return 0 . $NUMBER$ * exp ( - x ) ;
rank: 149
score: 99.30545247395834
patch: return 0 . $NUMBER$ * exp ( x + x ) - x ;
rank: 149
score: 99.23127964564732
patch: if ( x < 0 ) { x = - x ; }
rank: 149
score: 99.19404820033482
patch: return 0 - 1 . $NUMBER$ * exp ( - x ) ;
rank: 150
score: 99.3597900390625
patch: return - 0 . $NUMBER$ * exp ( - x ) * x ;
rank: 150
score: 99.34461212158203
patch: return 0 . $NUMBER$ * exp ( - x + 0 . 0 ) ;
rank: 150
score: 99.31195940290179
patch: return 0 . 0 * exp ( double ) 0 . $NUMBER$ ;
rank: 150
score: 99.30514761117789
patch: value = 0 . $NUMBER$ * exp ( - x ) ;
rank: 150
score: 99.26732526506696
patch: return ( double ) 0 . $NUMBER$ * exp ( x ) ;
rank: 150
score: 99.24966866629464
patch: / / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 151
score: 99.35968889508929
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) * x ;
rank: 151
score: 99.34415435791016
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . length ;
rank: 151
score: 99.33925955636161
patch: return $NUMBER$ . $NUMBER$ * exp ( - - - x ) ;
rank: 151
score: 99.3051288311298
patch: return 0 . $NUMBER$ + exp ( x ) * x ;
rank: 151
score: 99.29566446940105
patch: return 1 . 1 * exp ( - x ) ;
rank: 151
score: 99.248779296875
patch: return 0 . $NUMBER$ * start ( - x ) ;
rank: 152
score: 99.35923767089844
patch: return 0 . $NUMBER$ * exp ( - x ) * exp ( x ;
rank: 152
score: 99.29564557756696
patch: return 0 . 0 * exp ( - x ) + $NUMBER$ ;
rank: 152
score: 99.23025948660714
patch: return 1 . $NUMBER$ * exp ( - x + x ) ;
rank: 153
score: 99.35909598214286
patch: return 0 . $NUMBER$ * exp ( - 1 - x ) ;
rank: 153
score: 99.34341430664062
patch: return 0 * exp ( - x ) - x ;
rank: 153
score: 99.30853271484375
patch: return 1 . 0 * exp ( - x ) - x ;
rank: 153
score: 99.26653583233173
patch: return $NUMBER$ / 0 . $NUMBER$ * exp ( x ) ;
rank: 153
score: 99.24799053485577
patch: return 0 . $NUMBER$ * exp ( x ) . 0 ;
rank: 153
score: 99.19214806189903
patch: return 0 . $NUMBER$ * exp ( - x ) . ;
rank: 154
score: 99.34268188476562
patch: return 0 . $NUMBER$ + exp ( - x ) / 1 . $NUMBER$ ;
rank: 154
score: 99.338037109375
patch: return ( 0 . $NUMBER$ * exp ( - x ) ) ) ;
rank: 154
score: 99.29537527901786
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 154
score: 99.26647135416667
patch: return 0 . $NUMBER$ * 0 . 0 * exp ( x ) ;
rank: 154
score: 99.23002406529018
patch: if ( x < $NUMBER$ ) { x = - x ; }
rank: 154
score: 99.19174194335938
patch: return 0 . $NUMBER$ * exp ( x x ) ;
rank: 155
score: 99.35861206054688
patch: return 0 . 0 * exp ( - x ) + 0 . $NUMBER$ ;
rank: 155
score: 99.33761160714286
patch: return 0 . $NUMBER$ * exp ( x ) ; return x ;
rank: 155
score: 99.30357869466145
patch: return 0 . $NUMBER$ << exp ( - x ) ;
rank: 155
score: 99.24773700420673
patch: return 0 . $NUMBER$ * exp ( - x x ) ;
rank: 155
score: 99.19070434570312
patch: return $NUMBER$ . $NUMBER$ - exp ( - x ) ;
rank: 156
score: 99.35819868607955
patch: return 0 . 0 * exp ( 0 ) ;
rank: 156
score: 99.3414306640625
patch: return 0 . 0 * exp ( - x ) - 0 . 0 ;
rank: 156
score: 99.3079364483173
patch: return 0 . 0 * exp ( x ) * x ;
rank: 156
score: 99.30323079427083
patch: return 0 . $NUMBER$ + exp ( x ) + 0 . $NUMBER$ ;
rank: 156
score: 99.19041951497395
patch: x = 1 . $NUMBER$ * exp ( x ) ;
rank: 157
score: 99.18988506610577
patch: temp = 0 . 0 * exp ( - x ) ;
rank: 158
score: 99.3569580078125
patch: return 0 * exp ( - x ) * exp ( x ) ;
rank: 158
score: 99.34043884277344
patch: return 0 . $NUMBER$ * exp ( - x ) - 1 . 1 ;
rank: 158
score: 99.33517020089286
patch: return 0 . $NUMBER$ * exp 0 * exp ( x ) ;
rank: 158
score: 99.30739048549107
patch: int x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 158
score: 99.30133526141827
patch: return 0 * exp ( exp ( - x ) ) ;
rank: 158
score: 99.26315307617188
patch: result = 0 . 0 * exp ( x ) ;
rank: 158
score: 99.2468770345052
patch: return 0 . $NUMBER$ * long ( - x ) ;
rank: 159
score: 99.35574544270834
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ) ;
rank: 159
score: 99.3399658203125
patch: return 0 . 0 * exp ( x ) * exp ( - x ) ;
rank: 159
score: 99.3344970703125
patch: return 0 . $NUMBER$ * exp ( x + x - x ) ;
rank: 159
score: 99.30728585379464
patch: return 0 . $NUMBER$ * exp ( - x ) % $NUMBER$ ;
rank: 160
score: 99.33426106770834
patch: return 0 . $NUMBER$ * exp ( ( x * x ) ) ;
rank: 160
score: 99.300390625
patch: return $NUMBER$ + exp ( - x ) ;
rank: 160
score: 99.29327947443181
patch: return 0 . 1 / exp ( x ) ;
rank: 160
score: 99.26180594308036
patch: return ( 0 . $NUMBER$ * exp ( - $NUMBER$ ) ) ;
rank: 161
score: 99.35527692522321
patch: return 0 * exp ( - x ) * x * x ;
rank: 161
score: 99.2930157001202
patch: return 0 . 1 * exp ( - - x ) ;
rank: 161
score: 99.2449951171875
patch: return 0 . 0 / exp ( x , x ) ;
rank: 162
score: 99.35430145263672
patch: return 0 . $NUMBER$ * exp ( - x ) + 1 . $NUMBER$ ;
rank: 162
score: 99.30614217122395
patch: return 1 . 0 / exp ( - x ) ;
rank: 162
score: 99.29825846354167
patch: return 0 . $NUMBER$ * exp ( x ) + x + x ;
rank: 162
score: 99.29142543247768
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) - x ;
rank: 163
score: 99.35428873697917
patch: return 0 . 0 * exp ( - exp ( x ) ) ;
rank: 163
score: 99.303466796875
patch: return 0 . $NUMBER$ * exp ( x ) ; ;
rank: 163
score: 99.2978515625
patch: return 0 . $NUMBER$ * exp ( - x 1 ) ;
rank: 163
score: 99.29139927455357
patch: return $NUMBER$ . $NUMBER$ . 0 * exp ( - x ) ;
rank: 163
score: 99.25888497488839
patch: return ( 0 . $NUMBER$ + exp ( - x ) ) ;
rank: 163
score: 99.24458530970982
patch: return 0 . $NUMBER$ * ( x < 0 . 0 ) ;
rank: 164
score: 99.3383560180664
patch: return 0 . 0 * exp ( - x ) * 0 . 0 ;
rank: 164
score: 99.332763671875
patch: return 0 . $NUMBER$ * exp ( 0 . ) ;
rank: 164
score: 99.30330113002232
patch: / * return 0 . 0 * exp ( - x ) ;
rank: 164
score: 99.29771071213942
patch: return 0 . $NUMBER$ $NUMBER$ * exp ( - x ) ;
rank: 164
score: 99.29119001116071
patch: return 0 . 0 * exp ( - 1 . 0 ) ;
rank: 164
score: 99.2586669921875
patch: result = 0 . $NUMBER$ + exp ( - x ) ;
rank: 164
score: 99.18674142020089
patch: return $NUMBER$ . 1 . $NUMBER$ * exp ( - x ) ;
rank: 165
score: 99.30320387620192
patch: return 0 . $NUMBER$ ) * exp ( - x ) ;
rank: 165
score: 99.297216796875
patch: return 0 . $NUMBER$ * exp ( 1 . $NUMBER$ * x ) ;
rank: 165
score: 99.25746506911058
patch: return 0 . $NUMBER$ + exp ( - x ) ; }
rank: 165
score: 99.18661063058036
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ - x ) ;
rank: 166
score: 99.352392578125
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( ) ;
rank: 166
score: 99.33252766927083
patch: return 0 . $NUMBER$ * exp ( - x ) ; return 0 ;
rank: 166
score: 99.24298565204327
patch: return 0 . $NUMBER$ * new exp ( - x ) ;
rank: 167
score: 99.352099609375
patch: return 0 . 0 * exp ( - x ) / - x ;
rank: 167
score: 99.33712332589286
patch: return ( 0 . 0 * exp ( - x ) ) ;
rank: 167
score: 99.28989083426339
patch: return 0 . $NUMBER$ / $NUMBER$ * exp ( - x ) ;
rank: 167
score: 99.25675746372768
patch: return ( $NUMBER$ . $NUMBER$ * exp ( - x ) ) ;
rank: 167
score: 99.18538992745536
patch: return $NUMBER$ . 0 . $NUMBER$ * exp ( - x ) ;
rank: 168
score: 99.33130821814903
patch: return $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 168
score: 99.29646809895833
patch: return 0 . $NUMBER$ + exp ( x ) - 0 . $NUMBER$ ;
rank: 168
score: 99.25589693509616
patch: result = 0 . $NUMBER$ / exp ( - x ) ;
rank: 168
score: 99.22606482872597
patch: return exp ( x , 0 . $NUMBER$ , x ) ;
rank: 169
score: 99.33672736672794
patch: return 0 . $NUMBER$ * exp ( - x ) / exp ( x ) ;
rank: 169
score: 99.30147007533482
patch: double x = 0 . 0 * exp ( - x ) ;
rank: 169
score: 99.29584209735577
patch: } return 0 . 0 * exp ( - x ) ;
rank: 169
score: 99.28865872896634
patch: return 0 . 0 . 0 * exp ( x ) ;
rank: 169
score: 99.24066162109375
patch: return 0 . $NUMBER$ * ( x ) ;
rank: 170
score: 99.34982299804688
patch: return 0 * 0 . $NUMBER$ * exp ( - x ) * x ;
rank: 170
score: 99.33658854166667
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . $NUMBER$ ;
rank: 170
score: 99.30056527944711
patch: return 0 . 0 * exp ( x / $NUMBER$ ) ;
rank: 170
score: 99.295556640625
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ + exp ( x ) ;
rank: 170
score: 99.28855678013393
patch: return 0 . 1 * exp ( - x - x ) ;
rank: 170
score: 99.25396118164062
patch: return x * exp ( - x ) ;
rank: 170
score: 99.18426513671875
patch: return 0 . $NUMBER$ * exp ( x ) + x ; }
rank: 171
score: 99.34954833984375
patch: return 0 . 0 * exp ( - 1 ) / $NUMBER$ ;
rank: 171
score: 99.29449055989583
patch: return 0 . $NUMBER$ * x ) * exp ( - x ) ;
rank: 171
score: 99.28849574497768
patch: return 0 . $NUMBER$ / exp ( - x ) - x ;
rank: 171
score: 99.22538539341518
patch: return 0 . 1 * exp ( x , - x ) ;
rank: 171
score: 99.18346150716145
patch: temp = 0 . $NUMBER$ * exp ( x ) ;
rank: 172
score: 99.34923444475446
patch: return 0 * exp ( - x ) / $NUMBER$ . $NUMBER$ ;
rank: 172
score: 99.33545860877403
patch: return 0 . $NUMBER$ * exp ( - - 1 ) ;
rank: 172
score: 99.33019205729167
patch: return 0 . $NUMBER$ * exp ( - x ) ) - x ;
rank: 172
score: 99.25384990985577
patch: return 0 . $NUMBER$ * exp ( x ) ; } else
rank: 173
score: 99.34874877929687
patch: return 0 . $NUMBER$ * exp ( x ;
rank: 173
score: 99.33019205729167
patch: return 0 . $NUMBER$ * 0 * exp ( x , x ) ;
rank: 173
score: 99.2939453125
patch: return 0 . $NUMBER$ | exp ( x ) ;
rank: 173
score: 99.2876485188802
patch: return $NUMBER$ . 0 / exp ( - x ) ;
rank: 173
score: 99.22481595552884
patch: return 0 - x . $NUMBER$ * exp ( x ) ;
rank: 174
score: 99.34842681884766
patch: return 0 . $NUMBER$ * 0 * exp ( - x ) * x ;
rank: 174
score: 99.33517456054688
patch: return 0 . $NUMBER$ * exp ( - x ) * 0 . 1 ;
rank: 174
score: 99.329345703125
patch: return 0 . $NUMBER$ * exp ( 0 . x - x ) ;
rank: 174
score: 99.29929024832589
patch: return 0 . 0 * exp ( - x * $NUMBER$ ) ;
rank: 174
score: 99.29393310546875
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ ;
rank: 174
score: 99.25314767020089
patch: return 0 . $NUMBER$ * exp ( x , - 1 ) ;
rank: 174
score: 99.18277681790866
patch: x = 0 . $NUMBER$ / exp ( - x ) ;
rank: 175
score: 99.32797677176339
patch: return 0 . $NUMBER$ * exp ( x ) * x ) ;
rank: 175
score: 99.29377964564732
patch: return 0 . $NUMBER$ ? $NUMBER$ * exp ( - x ) ;
rank: 176
score: 99.34715924944196
patch: * / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 176
score: 99.33504486083984
patch: return 0 . $NUMBER$ + exp ( - x ) / 1 . 0 ;
rank: 176
score: 99.29574819711539
patch: return 1 . $NUMBER$ * exp ( x ) + x ;
rank: 176
score: 99.29337565104167
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * exp ( x ) ;
rank: 176
score: 99.28439767020089
patch: return 0 . $NUMBER$ * exp ( x ) = - x ;
rank: 176
score: 99.25269426618304
patch: return 0 . $NUMBER$ / exp ( - ( x ) ) ;
rank: 176
score: 99.23776479867789
patch: return 0 . $NUMBER$ * exp ( x ) + 1 ;
rank: 176
score: 99.22269112723214
patch: return 0 + 0 . 0 * exp ( - x ) ;
rank: 177
score: 99.3468017578125
patch: return 0 * exp ( - x ) * exp ( - x ) ;
rank: 177
score: 99.3272235576923
patch: return 0 . $NUMBER$ * exp ( - 1 . ) ;
rank: 177
score: 99.29547588641827
patch: return 0 . 0 * exp ( x ) / $NUMBER$ ;
rank: 177
score: 99.28438023158482
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . $NUMBER$ ) ;
rank: 177
score: 99.25266676682692
patch: return 0 . $NUMBER$ * exp ( - ( ) ) ;
rank: 177
score: 99.23754010881696
patch: return 0 . 0 * exp ( - x ) ; break ;
rank: 178
score: 99.34663899739583
patch: return 0 . $NUMBER$ * exp ( - x ) * x ; }
rank: 178
score: 99.29503455528847
patch: return 0 . 0 * exp ( x * $NUMBER$ ) ;
rank: 178
score: 99.2837626139323
patch: return 0 . 1 * exp ( x ) ; }
rank: 178
score: 99.25266520182292
patch: return ( x ) * exp ( - x ) ;
rank: 178
score: 99.23685396634616
patch: return 0 . 0 * $NUMBER$ * exp ( x ) ;
rank: 178
score: 99.22189565805289
patch: return x - 1 . $NUMBER$ * exp ( x ) ;
rank: 179
score: 99.3465576171875
patch: return 0 . $NUMBER$ / exp ( - 1 ) ;
rank: 179
score: 99.33407827524039
patch: return 0 . 0 * exp ( 0 . 0 ) ;
rank: 179
score: 99.29391479492188
patch: return 0 . $NUMBER$ * sum ( - x ) ;
rank: 179
score: 99.22113506610577
patch: if ( x >= 0 ) { x = - x ;
rank: 179
score: 99.1810772235577
patch: return 0 . $NUMBER$ * exp ( - x ] ) ;
rank: 180
score: 99.33310546875
patch: return 0 . $NUMBER$ * exp ( 0 . 0 , x ) ;
rank: 180
score: 99.29324776785714
patch: return 0 . 0 / 0 * exp ( - x ) ;
rank: 180
score: 99.25172526041666
patch: return $NUMBER$ . $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 180
score: 99.23541259765625
patch: return 0 . $NUMBER$ * exp ( x ) : - x ;
rank: 180
score: 99.18018517127403
patch: return 1 . $NUMBER$ * exp ( x - x ) ;
rank: 181
score: 99.34543863932292
patch: return 0 * exp ( - x ) * $NUMBER$ ;
rank: 181
score: 99.28970772879464
patch: return 0 . $NUMBER$ : 1 * exp ( - x ) ;
rank: 181
score: 99.28330775669643
patch: return 0 . $NUMBER$ / exp ( - 0 . 0 ) ;
rank: 181
score: 99.23494175502232
patch: return 0 . $NUMBER$ * exp ( - x ) : 1 ;
rank: 182
score: 99.33245086669922
patch: return 0 . $NUMBER$ * exp ( - x ) ? 0 . $NUMBER$ ;
rank: 182
score: 99.28317495492789
patch: return 0 . 1 * exp ( x - x ) ;
rank: 183
score: 99.34517669677734
patch: return 0 ; } else { return 0 . 0 * exp ( ) ;
rank: 183
score: 99.33210305606617
patch: return 0 . $NUMBER$ * exp ( 0 . 0 , 0 . 0 ) ;
rank: 183
score: 99.28281075613839
patch: return 0 . 0 . 1 * exp ( - x ) ;
rank: 183
score: 99.25076293945312
patch: return ( x ) + exp ( - x ) ;
rank: 183
score: 99.2342998798077
patch: return 0 . $NUMBER$ * exp ( [ x ] ) ;
rank: 184
score: 99.32508138020833
patch: return 0 . $NUMBER$ * exp ( - x - - x ) ;
rank: 184
score: 99.2914569561298
patch: return - 0 . 0 / exp ( - x ) ;
rank: 184
score: 99.28889973958333
patch: return 0 . $NUMBER$ * exp ( / x ) ;
rank: 184
score: 99.25064791165866
patch: return 0 . $NUMBER$ * x - exp ( x ) ;
rank: 185
score: 99.34449005126953
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) * x ;
rank: 185
score: 99.3232421875
patch: return $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 185
score: 99.29117257254464
patch: return 0 . $NUMBER$ * exp ( double ) 0 . 0 ;
rank: 185
score: 99.28863932291667
patch: return 0 . 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 185
score: 99.24930419921876
patch: return ( exp ( - $NUMBER$ ) ) ;
rank: 186
score: 99.34440612792969
patch: return 0 . $NUMBER$ * exp ( - x ) / ( 1 ) ;
rank: 186
score: 99.28111049107143
patch: return 0 . $NUMBER$ * exp ( x ) - x ; }
rank: 186
score: 99.2490234375
patch: if ( x > 0 . 0 ) {
rank: 186
score: 99.23128836495536
patch: return 0 . 0 / exp ( x , - x ) ;
rank: 186
score: 99.17683628627232
patch: return 0 . $NUMBER$ * exp ( x ) ; } * /
rank: 187
score: 99.29044283353366
patch: return 1 . $NUMBER$ * exp ( x + x ) ;
rank: 187
score: 99.28795572916667
patch: return 0 * exp ( x ) * exp ( - x ) ;
rank: 187
score: 99.22918701171875
patch: return 0 . $NUMBER$ * Math ( x , - x ) ;
rank: 187
score: 99.21559361049107
patch: x = 0 . $NUMBER$ * exp ( x + x ) ;
rank: 188
score: 99.3307373046875
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . 0 ;
rank: 188
score: 99.29020472935268
patch: return 1 . $NUMBER$ . 0 * exp ( - x ) ;
rank: 188
score: 99.28685651506696
patch: return 0 . $NUMBER$ + this . exp ( - x ) ;
rank: 188
score: 99.24809047154018
patch: return $NUMBER$ ; } if ( x < 0 . 0 ) {
rank: 188
score: 99.22855318509616
patch: return 0 . $NUMBER$ * 0 double ( - x ) ;
rank: 188
score: 99.21550958806819
patch: return 0 / exp ( x , x ) ;
rank: 189
score: 99.34202575683594
patch: return 0 . $NUMBER$ * exp ( - 1 ) / exp ( ) ;
rank: 189
score: 99.3306884765625
patch: return 0 . 0 * exp ( 0 . size ( ) - x ) ;
rank: 189
score: 99.31982421875
patch: throw 0 . $NUMBER$ * exp ( - x ) ;
rank: 189
score: 99.29001089242789
patch: return - 1 . $NUMBER$ / exp ( - x ) ;
rank: 189
score: 99.28681291852679
patch: return 0 . $NUMBER$ * exp ( - x ) + $STRING$ ;
rank: 190
score: 99.34161376953125
patch: return 0 . $NUMBER$ * exp ( - 1 ) / $NUMBER$ . 0 ;
rank: 190
score: 99.33015441894531
patch: return 0 . 0 * exp ( - x ) / 1 . 0 ;
rank: 190
score: 99.3192138671875
patch: return $NUMBER$ . $NUMBER$ * max ( - x ) ;
rank: 190
score: 99.28977614182692
patch: return - 1 . 1 * exp ( - x ) ;
rank: 190
score: 99.28675188337054
patch: return 0 . $NUMBER$ ? 0 * exp ( - x ) ;
rank: 190
score: 99.21512545072116
patch: return 0 / 0 . $NUMBER$ * exp ( x ) ;
rank: 191
score: 99.34120396205357
patch: return 0 . 0 * exp ( - 1 ) + x ;
rank: 191
score: 99.31910051618304
patch: return 0 . $NUMBER$ * exp ( - x ) ; * ;
rank: 191
score: 99.24650355747768
patch: return exp ( x , 0 . 0 , - $NUMBER$ ) ;
rank: 192
score: 99.34114074707031
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ * x ) ;
rank: 192
score: 99.31902204241071
patch: return 0 . $NUMBER$ * exp ( x / - x ) ;
rank: 192
score: 99.2866455078125
patch: return 1 * exp ( - x ) ;
rank: 192
score: 99.27691650390625
patch: return - $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 192
score: 99.24635667067308
patch: return 0 . $NUMBER$ * exp ( - / $NUMBER$ ) ;
rank: 193
score: 99.31824602399554
patch: return 0 . $NUMBER$ * exp exp ( - - x ) ;
rank: 193
score: 99.28617640904018
patch: return 0 * exp ( - x ) * 0 . $NUMBER$ ;
rank: 193
score: 99.2454364483173
patch: return 0 . $NUMBER$ * exp ( - / x ) ;
rank: 194
score: 99.34007263183594
patch: return 0 . $NUMBER$ * exp ( ) * exp ( - $NUMBER$ ) ;
rank: 194
score: 99.32898888221153
patch: return 0 . $NUMBER$ ( exp ( - x ) ) ;
rank: 194
score: 99.31791469029018
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 194
score: 99.28832135881696
patch: return 0 . 0 * exp ( double ) ( x ) ;
rank: 194
score: 99.21285574776786
patch: return x , 0 . $NUMBER$ * exp ( - x ) ;
rank: 195
score: 99.33965301513672
patch: return 0 . 0 * exp ( - x ) * ( x ) ;
rank: 195
score: 99.32865142822266
patch: return 0 . $NUMBER$ * exp ( 0 . 0 * - x ) ;
rank: 195
score: 99.3175518329327
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) * x ;
rank: 195
score: 99.28732735770089
patch: return 0 . 0 * exp ( x ) + - x ;
rank: 195
score: 99.28564453125
patch: return 0 . $NUMBER$ * exp ( x - x ) + x ;
rank: 195
score: 99.27524820963542
patch: return 0 . 1 - exp ( - x ) ;
rank: 196
score: 99.33964538574219
patch: return 0 . $NUMBER$ * exp ( x ) / ( - x ) ;
rank: 196
score: 99.31725202287946
patch: return $NUMBER$ . $NUMBER$ * this . exp ( - x ) ;
rank: 196
score: 99.28675188337054
patch: return - 1 . $NUMBER$ * exp ( - - x ) ;
rank: 196
score: 99.27473667689732
patch: return 0 / $NUMBER$ . 0 * exp ( - x ) ;
rank: 196
score: 99.24486432756696
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ + x ) ;
rank: 196
score: 99.22412109375
patch: return 0 . $NUMBER$ * max ( x ) ;
rank: 196
score: 99.21253380408653
patch: x = 0 . 1 * exp ( - x ) ;
rank: 197
score: 99.33956909179688
patch: return 0 . 0 * exp ( - 1 ) / $NUMBER$ . $NUMBER$ ;
rank: 197
score: 99.32846069335938
patch: return 0 . 0 * exp ( x ) - exp ( x ) ;
rank: 197
score: 99.31708984375
patch: return 0 . $NUMBER$ * 0 * exp ( - x ) ; /
rank: 197
score: 99.28551374162946
patch: return 0 . 0 * exp ( x * - x ) ;
rank: 197
score: 99.28533935546875
patch: return 0 . $NUMBER$ + $NUMBER$ * exp ( - x ) ;
rank: 197
score: 99.27434430803571
patch: return 0 . $NUMBER$ . $NUMBER$ - exp ( - x ) ;
rank: 197
score: 99.22406005859375
patch: return 0 . $NUMBER$ * exp ( x , 0 ) ; }
rank: 197
score: 99.211669921875
patch: return 0 . $NUMBER$ * exp ( - x . x ) ;
rank: 198
score: 99.3393310546875
patch: return - 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 198
score: 99.32843780517578
patch: return 0 . $NUMBER$ * exp ( - x ) . 0 - x ;
rank: 198
score: 99.316943359375
patch: return 0 . $NUMBER$ * exp ( - - x ) * x ;
rank: 198
score: 99.28536551339286
patch: return 0 . $NUMBER$ / exp ( - x ) + x ;
rank: 198
score: 99.17363630022321
patch: return 0 . $NUMBER$ * exp ( - x ) ; } ;
rank: 199
score: 99.33831787109375
patch: return 0 . $NUMBER$ * exp ( - x ) ; } return 0 ;
rank: 199
score: 99.32831573486328
patch: return 0 . 0 * exp ( * exp ( - x ) ) ;
rank: 199
score: 99.28514753069196
patch: return 0 . $NUMBER$ * exp ( - x ) & 0 ;
rank: 199
score: 99.27304311899039
patch: return 0 . $NUMBER$ / exp ( x - x ) ;
rank: 199
score: 99.22281901041667
patch: return exp ( x , exp ( x ) ) ;
rank: 199
score: 99.21056256975446
patch: return x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 200
score: 99.33805084228516
patch: return 0 . $NUMBER$ * exp ( - x - x ) * x ;
rank: 200
score: 99.24314528245192
patch: return ( 0 . $NUMBER$ - exp ( x ) ) ;
rank: 201
score: 99.3274169921875
patch: return 0 . $NUMBER$ * exp ( 0 . 1 - x ) ;
rank: 201
score: 99.24283272879464
patch: return x - $NUMBER$ . 0 * exp ( - x ) ;
rank: 201
score: 99.22231820913461
patch: return 0 . 0 * * exp ( - x ) ;
rank: 201
score: 99.21012056790866
patch: if ( x >= $NUMBER$ ) { x = - x ;
rank: 201
score: 99.1727294921875
patch: return 0 . $NUMBER$ * exp ( - x ;
rank: 202
score: 99.3373553936298
patch: return 0 . $NUMBER$ * exp ( - x ) * ;
rank: 203
score: 99.31586100260417
patch: return 0 . $NUMBER$ * exp ( - x ) ; * ) ;
rank: 203
score: 99.28384164663461
patch: return 0 . 0 + exp ( - x ) ) ;
rank: 203
score: 99.2419903094952
patch: return x - 0 . 0 * exp ( x ) ;
rank: 203
score: 99.21853637695312
patch: return 0 . $NUMBER$ * exp ( x , ) ;
rank: 203
score: 99.20698765345982
patch: if ( x >= 0 ) { x = - x ; }
rank: 203
score: 99.1710205078125
patch: x = 1 . $NUMBER$ * exp ( - x ) ; }
rank: 204
score: 99.326904296875
patch: return 0 . $NUMBER$ * exp ( - x ) / null ;
rank: 204
score: 99.31554158528645
patch: return 0 . ) * exp ( - x ) ;
rank: 204
score: 99.28372896634616
patch: return 0 . $NUMBER$ + exp ( x ) + x ;
rank: 204
score: 99.28145926339286
patch: return - 0 . $NUMBER$ * exp ( x + x ) ;
rank: 204
score: 99.27141462053571
patch: return 0 . 0 . 0 / exp ( - x ) ;
rank: 204
score: 99.24152483258929
patch: return 0 . $NUMBER$ * x + exp ( - x ) ;
rank: 204
score: 99.2180645282452
patch: return 0 . $NUMBER$ * $NUMBER$ / exp ( x ) ;
rank: 204
score: 99.16974346454327
patch: return 0 . $NUMBER$ - exp ( - x ) ; }
rank: 205
score: 99.33611297607422
patch: return 0 . $NUMBER$ * exp ( - x ) - ( x ) ;
rank: 205
score: 99.32674407958984
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . x ;
rank: 205
score: 99.31553141276042
patch: return 0 . 0 * exp ( x ) ) ;
rank: 205
score: 99.28367396763393
patch: return 0 . $NUMBER$ - $NUMBER$ * exp ( - x ) ;
rank: 205
score: 99.20631626674107
patch: x = 0 . $NUMBER$ * exp ( x ) + x ;
rank: 205
score: 99.16930042613636
patch: return 0 . * exp ( - x ) ;
rank: 206
score: 99.33604431152344
patch: return 0 . $NUMBER$ * exp ( - x ) / x - x ;
rank: 206
score: 99.31482805524554
patch: return $NUMBER$ = 0 . $NUMBER$ * exp ( - x ) ;
rank: 206
score: 99.28084622896634
patch: return 0 . $NUMBER$ * exp ( - x ) ] ;
rank: 206
score: 99.23868815104167
patch: return ( double ) 0 . $NUMBER$ * exp ( - x ) ;
rank: 206
score: 99.21798706054688
patch: return 0 . $NUMBER$ * byte ( - x ) ;
rank: 206
score: 99.2061767578125
patch: exp ( x , 0 . 0 , x - $NUMBER$ ) ;
rank: 207
score: 99.33600260416667
patch: return 0 . $NUMBER$ * exp ( - 1 ) ; } else {
rank: 207
score: 99.31455078125
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; / ) ;
rank: 207
score: 99.28336879185268
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 ;
rank: 207
score: 99.26948765345982
patch: return 0 . 0 * exp ( - x ) - $NUMBER$ ;
rank: 207
score: 99.23860386439732
patch: return $NUMBER$ / 0 . 0 * exp ( - x ) ;
rank: 207
score: 99.16898890904018
patch: x = - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 208
score: 99.325341796875
patch: return 0 . $NUMBER$ - exp ( exp ( - x ) ) ;
rank: 208
score: 99.28270670572917
patch: return 0 . $NUMBER$ * exp ( - x - x ) ) ;
rank: 208
score: 99.26938302176339
patch: return 0 . 1 * exp ( - 0 . 0 ) ;
rank: 208
score: 99.237841796875
patch: return 0 . $NUMBER$ * exp ( - ( double ) x ) ;
rank: 208
score: 99.2174823467548
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ - x ) ;
rank: 208
score: 99.20565359933036
patch: return - x + 0 . $NUMBER$ * exp ( x ) ;
rank: 208
score: 99.16825648716518
patch: return 0 . 0 * exp ( x - x ) ; }
rank: 209
score: 99.32508850097656
patch: return 0 . $NUMBER$ * exp ( - x ) + 0 . 1 ;
rank: 209
score: 99.26856340680804
patch: return 0 . 0 / exp ( - x + x ) ;
rank: 209
score: 99.21703162560097
patch: return 0 . $NUMBER$ * exp ( x ) + 0 ;
rank: 209
score: 99.20564778645833
patch: return ( x , 0 . 0 , x ) ;
rank: 210
score: 99.32501220703125
patch: return 0 * exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 210
score: 99.3131854717548
patch: return 0 . $NUMBER$ * exp ( - x ) ; *
rank: 210
score: 99.27959333147321
patch: return - 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 210
score: 99.21685791015625
patch: return 0 . $NUMBER$ * 0 / exp ( - x ) ;
rank: 210
score: 99.20545450846355
patch: return 0 * exp ( x , - x ) ;
rank: 211
score: 99.33463832310268
patch: return 0 . $NUMBER$ * exp ( - x ) - 1 ;
rank: 211
score: 99.27943638392857
patch: return 0 . 0 * exp ( double ) 0 . 0 ;
rank: 211
score: 99.23714773995536
patch: return 0 . $NUMBER$ + exp ( - ( x ) ) ;
rank: 211
score: 99.21668419471153
patch: return 0 = 0 . $NUMBER$ * exp ( x ) ;
rank: 211
score: 99.16807972301136
patch: return $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 212
score: 99.33444649832589
patch: return 0 . $NUMBER$ * exp ( - 1 ) + 1 ;
rank: 212
score: 99.31112234933036
patch: return 0 . $NUMBER$ * - exp ( x + x ) ;
rank: 212
score: 99.27923114483173
patch: return 0 . 0 * exp ( - x $NUMBER$ ) ;
rank: 212
score: 99.23644205729167
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; } else {
rank: 212
score: 99.21666541466347
patch: return 0 . $NUMBER$ * Math ( x , x ) ;
rank: 212
score: 99.2039794921875
patch: return 0 / exp ( x , 0 . 0 ) ;
rank: 213
score: 99.33390045166016
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( $NUMBER$ ) ;
rank: 213
score: 99.31033090444711
patch: return $NUMBER$ . $NUMBER$ * exp exp ( - x ) ;
rank: 213
score: 99.2816162109375
patch: return 0 . $NUMBER$ * exp ( - x ) $NUMBER$ ;
rank: 213
score: 99.23622349330357
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 213
score: 99.20386759440105
patch: return 0 . $NUMBER$ * ( x + x ) ;
rank: 214
score: 99.33354187011719
patch: return 0 * exp ( - x ) . exp ( - x ) ;
rank: 214
score: 99.32432204026442
patch: * return 0 . $NUMBER$ * exp ( - x ) ;
rank: 214
score: 99.31023763020833
patch: return $NUMBER$ . $NUMBER$ * exp ( - exp ( x ) ) ;
rank: 214
score: 99.28109537760416
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ;
rank: 214
score: 99.27710832868304
patch: return 1 . 0 * exp ( - x ) * x ;
rank: 214
score: 99.23594447544643
patch: return ( 1 . $NUMBER$ * exp ( - x ) ) ;
rank: 214
score: 99.21536690848214
patch: return 0 . $NUMBER$ * exp ( x ) . return 0 ;
rank: 214
score: 99.2038104717548
patch: return x + 1 . $NUMBER$ * exp ( x ) ;
rank: 214
score: 99.16658935546874
patch: exp ( x , 0 . 0 ) ;
rank: 215
score: 99.32421156939338
patch: return 0 . $NUMBER$ * exp ( - x ) ; return 0 . $NUMBER$ ;
rank: 215
score: 99.30991908482143
patch: return $NUMBER$ . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 215
score: 99.27700369698661
patch: return - - 1 . $NUMBER$ * exp ( - x ) ;
rank: 216
score: 99.32408949908088
patch: return 0 . $NUMBER$ * exp ( - x ) ) / 0 . $NUMBER$ ;
rank: 216
score: 99.30972726004464
patch: return 0 . $NUMBER$ * super . exp ( - x ) ;
rank: 216
score: 99.26698996803977
patch: return 0 . 0 - exp ( x ) ;
rank: 216
score: 99.21441650390625
patch: return new 0 . $NUMBER$ * exp ( x ) ;
rank: 216
score: 99.16592843191964
patch: return 0 = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 217
score: 99.33308628627232
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) + x ;
rank: 217
score: 99.32388305664062
patch: return 0 . $NUMBER$ * exp ( - x ) ? 0 . 0 ;
rank: 217
score: 99.3095703125
patch: return 0 . $NUMBER$ * exp ( ( x ) - x ) ;
rank: 217
score: 99.27654157366071
patch: return 0 . 0 * exp ( - x / $NUMBER$ ) ;
rank: 217
score: 99.16586739676339
patch: double cosh = 0 . $NUMBER$ * exp ( - x ) ;
rank: 218
score: 99.33293914794922
patch: return 0 . $NUMBER$ * exp ( - x ) * x + x ;
rank: 218
score: 99.32363891601562
patch: return 0 . 0 * exp ( exp ( x ) - x ) ;
rank: 218
score: 99.28019496372768
patch: exp ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 218
score: 99.27633901742789
patch: return 1 . 0 * exp ( - - x ) ;
rank: 218
score: 99.23480224609375
patch: result return 0 . $NUMBER$ * exp ( x ) ;
rank: 218
score: 99.16579026442308
patch: ] = 0 . $NUMBER$ * exp ( - x ) ;
rank: 219
score: 99.33286830357143
patch: return 0 . $NUMBER$ * exp ( - 1 , x ) ;
rank: 219
score: 99.32344055175781
patch: return 0 . 0 * exp ( - x ) / 0 . 1 ;
rank: 219
score: 99.30936373197116
patch: return 0 . $NUMBER$ * exp ( 0 . x ) ;
rank: 219
score: 99.23468017578125
patch: return $NUMBER$ / exp ( x ) ;
rank: 219
score: 99.21356670673077
patch: return 1 . 0 * exp ( - x ) ; }
rank: 220
score: 99.32341918945312
patch: return 0 . $NUMBER$ exp ( x ) ;
rank: 220
score: 99.30800955636161
patch: return 0 . $NUMBER$ * this * exp ( - x ) ;
rank: 220
score: 99.27952223557692
patch: return 0 . $NUMBER$ - exp ( - x ) ) ;
rank: 220
score: 99.21275111607143
patch: return 0 . $NUMBER$ * 1 / exp ( - x ) ;
rank: 220
score: 99.20120675223214
patch: x = x + 0 . $NUMBER$ * exp ( x ) ;
rank: 220
score: 99.16476004464286
patch: return 0 . $NUMBER$ * exp ( x - 1 ) ; }
rank: 221
score: 99.32217227711396
patch: return 0 . $NUMBER$ * exp ( 0 . length - 0 . 0 ) ;
rank: 221
score: 99.2757568359375
patch: return - 1 . 0 * exp ( x ) ;
rank: 221
score: 99.23436889648437
patch: return ( exp ( - x ) ) ;
rank: 221
score: 99.20107797475961
patch: return ( x , 0 . 0 , - x ) ;
rank: 222
score: 99.33211844308036
patch: return 0 * exp ( - x ) * exp ( ) ;
rank: 222
score: 99.3076171875
patch: return 0 . $NUMBER$ * exp ( - x ) )
rank: 222
score: 99.27927809495192
patch: } return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 222
score: 99.26560756138393
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . 0 ) ;
rank: 222
score: 99.2343417080966
patch: return 0 . $NUMBER$ * exp ( - ) ;
rank: 222
score: 99.20094517299107
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 ;
rank: 222
score: 99.16444614955357
patch: return 0 . $NUMBER$ * . $NUMBER$ * exp ( x ) ;
rank: 223
score: 99.33168029785156
patch: return 0 . 0 * exp ( x ) / exp ( x ) ;
rank: 223
score: 99.3214470358456
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , 0 . 0 - x ) ;
rank: 223
score: 99.2791748046875
patch: return 0 * exp ( exp ( x ) - x ) ;
rank: 223
score: 99.27497209821429
patch: return 0 . 0 * exp ( - x ) << $NUMBER$ ;
rank: 223
score: 99.21094689002403
patch: return 0 . $NUMBER$ * exp ( x ) . x ;
rank: 223
score: 99.16411481584821
patch: double return = 0 . $NUMBER$ * exp ( - x ) ;
rank: 224
score: 99.32124597886029
patch: return 0 * exp ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 224
score: 99.30743001302083
patch: return 0 . $NUMBER$ * exp ( x , x - x ) ;
rank: 224
score: 99.27886962890625
patch: return 0 . $NUMBER$ + exp ( - x ) * x ;
rank: 224
score: 99.27457682291667
patch: return 0 . $NUMBER$ * format ( - x ) ;
rank: 224
score: 99.26466721754808
patch: return 0 . $NUMBER$ + exp ( x - x ) ;
rank: 224
score: 99.23343098958334
patch: return 0 . $NUMBER$ * exp ( x < 0 . 0 ) ;
rank: 225
score: 99.33145577566964
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) / $NUMBER$ ;
rank: 225
score: 99.32108851841518
patch: return 0 = 0 . 0 * exp ( - x ) ;
rank: 225
score: 99.27854567307692
patch: return 0 . $NUMBER$ + exp ( - - x ) ;
rank: 225
score: 99.21047738882211
patch: return 0 . $NUMBER$ * new double [ $NUMBER$ ] ; }
rank: 225
score: 99.16359165736607
patch: return x - 1 . 0 * exp ( - x ) ;
rank: 226
score: 99.32081604003906
patch: return 0 . $NUMBER$ * exp ( - x + x ) - x ;
rank: 226
score: 99.27814127604167
patch: return 0 . $NUMBER$ - exp ( x ) * 0 . $NUMBER$ ;
rank: 226
score: 99.23247821514423
patch: return $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 227
score: 99.33120492788461
patch: return 0 * 0 . $NUMBER$ * exp ( x ) ;
rank: 227
score: 99.23233235677084
patch: return 0 . 0 * 0 . $NUMBER$ * exp ( x ) ;
rank: 227
score: 99.2097919170673
patch: return 0 . $NUMBER$ * exp ( x ) : $NUMBER$ ;
rank: 228
score: 99.33100237165179
patch: return 0 . $NUMBER$ * exp ( - 1 ) * $NUMBER$ ;
rank: 228
score: 99.31951904296875
patch: return 0 . 0 * exp ( x ) + exp ( x ) ;
rank: 228
score: 99.27356896033653
patch: return 0 . 0 / exp ( - - x ) ;
rank: 228
score: 99.26375906808036
patch: return 0 . 0 * exp ( - - x ) ; }
rank: 228
score: 99.2319805438702
patch: return 0 . $NUMBER$ + - exp ( - x ) ;
rank: 228
score: 99.20870267427884
patch: return 0 . 0 , exp ( - x ) ; }
rank: 228
score: 99.19923753004808
patch: x += 0 . $NUMBER$ * exp ( - x ) ;
rank: 229
score: 99.31917724609374
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 229
score: 99.2764892578125
patch: return 0 . $NUMBER$ * exp ( - x ) & $NUMBER$ ;
rank: 229
score: 99.26314871651786
patch: return 0 . $NUMBER$ * exp ( x ) - - x ;
rank: 229
score: 99.23167317708334
patch: return exp ( x , 0 . 0 , 0 . 0 ) ;
rank: 229
score: 99.19876802884616
patch: return 0 . $NUMBER$ - exp ( x , x ) ;
rank: 230
score: 99.33050944010417
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ ) ;
rank: 230
score: 99.31901999080883
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . - x ;
rank: 230
score: 99.30541178385417
patch: return 0 . 0 * exp ( - x ) ; return ) ;
rank: 230
score: 99.27328725961539
patch: return 0 . 0 * exp ( x / x ) ;
rank: 230
score: 99.23053850446429
patch: return 0 . $NUMBER$ * ( exp ( - $NUMBER$ ) ) ;
rank: 230
score: 99.20668538411458
patch: return 0 . 0 * max ( - x ) ;
rank: 230
score: 99.19835553850446
patch: return 0 / x . $NUMBER$ * exp ( - x ) ;
rank: 231
score: 99.318603515625
patch: return 0 . $NUMBER$ * exp ( - x ) + exp ( x ) ;
rank: 231
score: 99.30533854166667
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . - x ) ;
rank: 231
score: 99.27593122209821
patch: return 0 . $NUMBER$ + exp ( exp ( x ) ) ;
rank: 231
score: 99.2625399502841
patch: return 0 * exp ( x - x ) ;
rank: 231
score: 99.23030090332031
patch: return exp ( - $NUMBER$ ) ;
rank: 231
score: 99.20620727539062
patch: return 0 . $NUMBER$ * new double [ x ] ;
rank: 231
score: 99.16026960100446
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } else {
rank: 232
score: 99.27241734095982
patch: return 0 . 0 * exp ( - - - x ) ;
rank: 232
score: 99.20607212611607
patch: return exp ( x , 0 . 0 , x ) ; }
rank: 232
score: 99.19768817608173
patch: return 0 * exp ( x , 0 . 0 ) ;
rank: 232
score: 99.15998186383929
patch: x = - 0 . 0 * exp ( - x ) ;
rank: 233
score: 99.32987758091518
patch: return Double . $NUMBER$ * exp ( - x ) * x ;
rank: 233
score: 99.30480143229167
patch: return 0 . $NUMBER$ * exp ( - x ) ; / / ;
rank: 233
score: 99.27223557692308
patch: return 1 . $NUMBER$ * exp ( - x ) ; ;
rank: 233
score: 99.26218087332589
patch: return 0 . $NUMBER$ . 1 / exp ( - x ) ;
rank: 233
score: 99.22987467447916
patch: return 0 . $NUMBER$ * exp ( - x ) ; break ; }
rank: 233
score: 99.15944998604911
patch: double x = 1 . $NUMBER$ * exp ( - x ) ;
rank: 234
score: 99.32942962646484
patch: return 0 . 0 * exp ( - x ) * x - x ;
rank: 234
score: 99.30411202566964
patch: return 0 . $NUMBER$ * exp ( ( - x ) ) ;
rank: 234
score: 99.22892252604167
patch: return $NUMBER$ * exp ( - ( x ) ) ;
rank: 234
score: 99.2054443359375
patch: return 0 . $NUMBER$ * ( x , x ) ;
rank: 235
score: 99.27451985677084
patch: return 1 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ;
rank: 235
score: 99.2714092548077
patch: return 0 . 0 * exp ( x ) / x ;
rank: 235
score: 99.22891671316964
patch: return 0 . $NUMBER$ * exp ( - ( 0 ) ) ;
rank: 235
score: 99.19580950055804
patch: if ( x > $NUMBER$ ) { exp ( - x ) ;
rank: 235
score: 99.1591796875
patch: return $NUMBER$ . $NUMBER$ * exp ( x - x ) ; }
rank: 236
score: 99.32933698381696
patch: return 0 . 0 * exp ( - 1 ) - x ;
rank: 236
score: 99.30311686197916
patch: return ( 0 . $NUMBER$ * exp ( x ) - x ) ;
rank: 236
score: 99.22869001116071
patch: return 0 . $NUMBER$ * exp ( x ) ; break ; }
rank: 236
score: 99.15866921164773
patch: return 0 . $NUMBER$ * exp ( $STRING$ ) ;
rank: 237
score: 99.32865905761719
patch: return 0 . 0 * exp ( - x ) * $NUMBER$ . 0 ;
rank: 237
score: 99.31700897216797
patch: return 0 . 1 * exp ( - x ) / 0 . $NUMBER$ ;
rank: 237
score: 99.30288260323661
patch: return 0 . 0 * exp ( - x ) ; / /
rank: 237
score: 99.2031962076823
patch: return 0 . $NUMBER$ * read ( - x ) ;
rank: 237
score: 99.1586444561298
patch: return $NUMBER$ . $NUMBER$ / exp ( - x ) ; }
rank: 238
score: 99.27230631510416
patch: return 0 . $NUMBER$ * exp ( value ( - x ) ) ;
rank: 238
score: 99.20285866477273
patch: return 0 . $NUMBER$ * this ( x ) ;
rank: 238
score: 99.15748948317308
patch: return 0 . $NUMBER$ * exp ( x . x ) ;
rank: 239
score: 99.32811628069196
patch: return 0 * exp ( - x ) / ( x ) ;
rank: 239
score: 99.31680297851562
patch: return 0 . $NUMBER$ * exp ( - x , 0 . 0 ) ;
rank: 239
score: 99.27213134765626
patch: return 0 . $NUMBER$ * exp ( x )
rank: 239
score: 99.2275390625
patch: result = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 239
score: 99.19401332310268
patch: return 1 . $NUMBER$ * exp ( - x , x ) ;
rank: 240
score: 99.32801920572916
patch: return 0 ; } return 0 . $NUMBER$ * exp ( x ) ;
rank: 240
score: 99.31561279296875
patch: return 0 . 0 * exp ( - exp ( - x ) ) ;
rank: 240
score: 99.20232684795673
patch: return 0 . 0 * exp ( , - x ) ;
rank: 240
score: 99.15609305245536
patch: x = - 1 . $NUMBER$ * exp ( - x ) ;
rank: 241
score: 99.27142333984375
patch: return 0 . $NUMBER$ * exp ( int ) x ;
rank: 241
score: 99.26799665178571
patch: return 0 . 0 * exp ( - x ) . 0 ;
rank: 241
score: 99.25897686298077
patch: return - $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 241
score: 99.1558086688702
patch: z = 0 . $NUMBER$ * exp ( - x ) ;
rank: 242
score: 99.3276596069336
patch: return 0 . $NUMBER$ * exp ( 0 ) * exp ( x ) ;
rank: 242
score: 99.31462860107422
patch: return 0 . $NUMBER$ * exp ( - x ) : 0 . 0 ;
rank: 242
score: 99.30224609375
patch: return 0 . $NUMBER$ * exp ( x ) ; ) ;
rank: 242
score: 99.26656400240384
patch: double CaMeL Value ( ) . double CaMeL Value ( ) ;
rank: 242
score: 99.20201619466145
patch: return 0 . $NUMBER$ * x ( - x ) ;
rank: 242
score: 99.15573952414773
patch: return $NUMBER$ * exp ( - x ) ; }
rank: 243
score: 99.26576450892857
patch: double 0 return 0 . $NUMBER$ * exp ( - x ) ;
rank: 243
score: 99.25816999162946
patch: return 0 . $NUMBER$ * - exp ( x - $NUMBER$ ) ;
rank: 243
score: 99.2268778483073
patch: ret = 0 . $NUMBER$ * exp ( x ) ;
rank: 243
score: 99.201904296875
patch: return 0 . 0 * ( - x ) ;
rank: 243
score: 99.19246128627232
patch: return x - x . $NUMBER$ * exp ( - x ) ;
rank: 243
score: 99.15512319711539
patch: if ( x <= 0 ) { x = - x ;
rank: 244
score: 99.31415153952206
patch: return 0 . $NUMBER$ * exp ( 0 . 0 + 0 . 0 ) ;
rank: 244
score: 99.30155123197116
patch: return * 0 . $NUMBER$ * exp ( - x ) ;
rank: 244
score: 99.26541573660714
patch: int x = 0 . 0 * exp ( - x ) ;
rank: 244
score: 99.25809420072116
patch: return 0 . $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 244
score: 99.20171649639423
patch: return += 0 . $NUMBER$ * exp ( - x ) ;
rank: 245
score: 99.32672991071429
patch: return 0 . $NUMBER$ * exp ( - x ) / ) ;
rank: 245
score: 99.31402946920956
patch: return 0 . $NUMBER$ * exp ( 0 . 0 - 0 . 0 ) ;
rank: 245
score: 99.27081298828125
patch: } return 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 245
score: 99.26484026227679
patch: return 1 . $NUMBER$ * exp ( - x ) / x ;
rank: 245
score: 99.22591458834134
patch: return 0 . 0 * exp ( - - $NUMBER$ ) ;
rank: 246
score: 99.32644653320312
patch: return 0 . $NUMBER$ * exp ( ) * exp ( - 1 ) ;
rank: 246
score: 99.31396484375
patch: return 0 . 0 * exp ( exp ( x ) ) ;
rank: 246
score: 99.27030436197917
patch: return 0 ; return 0 . $NUMBER$ * exp ( - x ) ;
rank: 246
score: 99.26444789341518
patch: return - 0 . $NUMBER$ * exp ( x - x ) ;
rank: 246
score: 99.19961547851562
patch: return 0 . $NUMBER$ * new ( - x ) ;
rank: 247
score: 99.31372942243304
patch: return 0 . $NUMBER$ * exp ( - x ) / true ;
rank: 247
score: 99.26976725260417
patch: return 0 . $NUMBER$ * exp ( 1 . $NUMBER$ + x ) ;
rank: 247
score: 99.26438685825893
patch: return 0 . $NUMBER$ * exp ( x ) + x ; ;
rank: 247
score: 99.2574932391827
patch: return 0 . 0 * exp ( - $NUMBER$ ) ; }
rank: 247
score: 99.22423444475446
patch: return 0 . $NUMBER$ ; } if ( x > $NUMBER$ ) {
rank: 248
score: 99.31356608072916
patch: return exp ( 0 . 0 * exp ( - x ) ) ;
rank: 248
score: 99.29839215959821
patch: return 0 . - 0 . $NUMBER$ * exp ( x ) ;
rank: 248
score: 99.26963454026442
patch: return 0 . $NUMBER$ : $NUMBER$ * exp ( x ) ;
rank: 248
score: 99.26360212053571
patch: return 1 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 249
score: 99.31349400111607
patch: return 0 . $NUMBER$ return 0 * exp ( - x ) ;
rank: 249
score: 99.26951497395834
patch: return 0 . $NUMBER$ + exp ( - x , - x ) ;
rank: 249
score: 99.2636006673177
patch: return x . 0 * exp ( - x ) ;
rank: 250
score: 99.3119255514706
patch: return 0 . 0 * exp ( 0 . length ( ) - x ) ;
rank: 250
score: 99.29755510602679
patch: return 0 . $NUMBER$ * exp ( x ) ; / ) ;
rank: 250
score: 99.25692313058036
patch: return 0 / 1 . $NUMBER$ * exp ( - x ) ;
rank: 250
score: 99.22384207589286
patch: return x + 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 251
score: 99.32534993489584
patch: return 0 . $NUMBER$ * exp ( ) * exp ( x ) ;
rank: 251
score: 99.26898193359375
patch: return exp ( - x ) * exp ( - x ) ;
rank: 251
score: 99.25658307756696
patch: return 1 . 0 . $NUMBER$ * exp ( - x ) ;
rank: 251
score: 99.22359793526786
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ , x ) ;
rank: 251
score: 99.1951904296875
patch: return 0 . 0 * exp ( , x ) ;
rank: 252
score: 99.32526397705078
patch: return 0 . $NUMBER$ * exp ( - x ) ( - x ) ;
rank: 252
score: 99.29712785993304
patch: return $NUMBER$ . 0 * 0 * exp ( - x ) ;
rank: 252
score: 99.2682861328125
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . $NUMBER$ - x ) ;
rank: 252
score: 99.22334507533482
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) . $NUMBER$ ;
rank: 253
score: 99.31143951416016
patch: return 0 . $NUMBER$ * exp ( - x ) return 0 . $NUMBER$ ;
rank: 253
score: 99.29657854352679
patch: return 0 . $NUMBER$ * exp ( - 1 * x ) ;
rank: 253
score: 99.26761300223214
patch: return 0 . $NUMBER$ + exp ( - x + x ) ;
rank: 253
score: 99.2632168856534
patch: = 0 . $NUMBER$ * exp ( x ) ;
rank: 253
score: 99.19434611002605
patch: return 0 . $NUMBER$ * x double ( x ) ;
rank: 253
score: 99.15191180889423
patch: if ( x <= $NUMBER$ ) { x = - x ;
rank: 254
score: 99.26734212239583
patch: return 0 . $NUMBER$ * exp ( double ) exp ( x ) ;
rank: 254
score: 99.26310511997768
patch: return $NUMBER$ . 0 * exp ( - x ) + x ;
rank: 254
score: 99.25527121803977
patch: return 0 . - exp ( - x ) ;
rank: 254
score: 99.22186279296875
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 254
score: 99.19430541992188
patch: return 0 . $NUMBER$ * new double [ 1 ] ;
rank: 255
score: 99.29594203404018
patch: return $NUMBER$ . $NUMBER$ * exp ( 0 . - x ) ;
rank: 255
score: 99.2667236328125
patch: } else = 0 . $NUMBER$ * exp ( - x ) ;
rank: 255
score: 99.19331868489583
patch: return 0 . $NUMBER$ * new int [ $NUMBER$ ] ;
rank: 255
score: 99.18858991350446
patch: x = 0 . 0 * exp ( x , x ) ;
rank: 256
score: 99.310791015625
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . 0 ;
rank: 256
score: 99.2939922626202
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - x ;
rank: 256
score: 99.26286969866071
patch: return - 1 . $NUMBER$ * exp ( - x ) ) ;
rank: 256
score: 99.25514439174107
patch: return x * $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 256
score: 99.19212849934895
patch: return 0 . 0 * exp ( + x ) ;
rank: 256
score: 99.18825857979911
patch: if ( x >= $NUMBER$ ) { x = - x ; }
rank: 257
score: 99.32405853271484
patch: return 0 . $NUMBER$ * exp ( - Double . MAX _ VALUE ) ;
rank: 257
score: 99.29130336216518
patch: return 0 . $NUMBER$ * exp ( x ) ; -- x ;
rank: 257
score: 99.22043863932292
patch: result = 0 . $NUMBER$ / exp ( x ) ;
rank: 257
score: 99.19118088942308
patch: return 0 . $NUMBER$ * exp ( x ) ; * /
rank: 257
score: 99.1878995028409
patch: return $NUMBER$ * exp ( x , x ) ;
rank: 257
score: 99.15140206473214
patch: temp = 0 . $NUMBER$ * exp ( - x ) ; }
rank: 258
score: 99.32399088541666
patch: return 0 . $NUMBER$ * exp ( x ) / exp ( ) ;
rank: 258
score: 99.29091971261161
patch: return 0 . $NUMBER$ * exp ( - 0 . x ) ;
rank: 258
score: 99.21959510216347
patch: return 0 . x $NUMBER$ * exp ( - x ) ;
rank: 258
score: 99.19077555338542
patch: return 0 . $NUMBER$ * Float ( - x ) ;
rank: 258
score: 99.15134974888393
patch: return 0 . $NUMBER$ * exp ( - x ) + exp ;
rank: 259
score: 99.32354736328125
patch: return 0 . 0 * exp ( - 1 ) / x ;
rank: 259
score: 99.31020220588235
patch: return 0 . 0 * exp ( exp ( - x ) - x ) ;
rank: 259
score: 99.26167515345982
patch: return - 0 . 0 * exp ( - - x ) ;
rank: 259
score: 99.21896597055289
patch: result = 1 . $NUMBER$ * exp ( - x ) ;
rank: 259
score: 99.18728637695312
patch: return 0 / exp ( x , - x ) ;
rank: 259
score: 99.15072195870536
patch: return 0 . $NUMBER$ * * exp ( - x ) ; }
rank: 260
score: 99.31008013556985
patch: return 0 . $NUMBER$ * exp ( - x ) ) / 1 . $NUMBER$ ;
rank: 260
score: 99.29025503305289
patch: 0 return 0 . $NUMBER$ * exp ( - x ) ;
rank: 260
score: 99.26532451923077
patch: return 0 * exp ( x ) * 0 . $NUMBER$ ;
rank: 260
score: 99.26152692522321
patch: return - 0 . $NUMBER$ * exp ( x ) + x ;
rank: 260
score: 99.25388009207589
patch: return 0 . 0 / exp ( - x - x ) ;
rank: 260
score: 99.19027005709134
patch: return 0 . $NUMBER$ * ( x , - x ) ;
rank: 261
score: 99.32298278808594
patch: return 0 . $NUMBER$ * exp ( - x ) / x * x ;
rank: 261
score: 99.31005859375
patch: return 0 . $NUMBER$ * exp ( - x , x ) - x ;
rank: 261
score: 99.26479085286458
patch: return 0 . $NUMBER$ || exp ( - x ) ;
rank: 261
score: 99.26097693810097
patch: return - 1 . $NUMBER$ + exp ( - x ) ;
rank: 262
score: 99.32293701171875
patch: return 0 . $NUMBER$ * exp ( - ( x - $NUMBER$ ) ) ;
rank: 262
score: 99.26475172776442
patch: return 0 . $NUMBER$ * exp ( 1 . $NUMBER$ ) ;
rank: 262
score: 99.26089913504464
patch: return 0 . 0 - $NUMBER$ * exp ( - x ) ;
rank: 262
score: 99.14959716796875
patch: return $NUMBER$ . $NUMBER$ * exp ( x , x ) ; }
rank: 263
score: 99.32290649414062
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else { ;
rank: 263
score: 99.28953334263393
patch: return $NUMBER$ * 0 . 0 * exp ( - x ) ;
rank: 263
score: 99.21809605189732
patch: return exp ( x , 0 . 0 , - 1 ) ;
rank: 264
score: 99.32278006417411
patch: return 0 . $NUMBER$ * 0 * exp ( - 1 ) ;
rank: 264
score: 99.30939190204327
patch: / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 264
score: 99.28893171037946
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; / ;
rank: 264
score: 99.26318359375
patch: return 0 . $NUMBER$ * exp ( - x ) ) / $NUMBER$ ;
rank: 264
score: 99.26014122596153
patch: return 1 . $NUMBER$ * exp ( x * x ) ;
rank: 264
score: 99.25196184430804
patch: return 0 . 0 * exp ( - x + 1 ) ;
rank: 264
score: 99.21793910435268
patch: return 0 . $NUMBER$ * exp ( - 0 . 1 ) ;
rank: 264
score: 99.1859130859375
patch: x = - 0 . $NUMBER$ * exp ( x ) ;
rank: 265
score: 99.32266438802084
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ . $NUMBER$ ;
rank: 265
score: 99.30924987792969
patch: return 0 . $NUMBER$ * exp ( - x ) - x + x ;
rank: 265
score: 99.2888916015625
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 265
score: 99.25179349459134
patch: return 0 . 0 * - exp ( - x ) ;
rank: 265
score: 99.185791015625
patch: return $NUMBER$ . $NUMBER$ * exp ( - x , x ) ;
rank: 266
score: 99.262158203125
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ / x ) ;
rank: 267
score: 99.30923665364584
patch: return 0 . $NUMBER$ * exp ( 0 . size ( ) ) ;
rank: 267
score: 99.26197916666666
patch: return 0 . 0 + exp ( x ) * 0 . $NUMBER$ ;
rank: 267
score: 99.25133405412946
patch: return x * 0 . 0 * exp ( - x ) ;
rank: 267
score: 99.21609933035714
patch: return $NUMBER$ + 0 . 0 * exp ( - x ) ;
rank: 267
score: 99.14738246372768
patch: return 1 . $NUMBER$ * exp ( - x ) ; } }
rank: 268
score: 99.3221435546875
patch: return $NUMBER$ . $NUMBER$ * exp ( - 1 ) ;
rank: 268
score: 99.30921128216912
patch: return 0 . $NUMBER$ * exp ( - x ) * exp ( $NUMBER$ ) ;
rank: 268
score: 99.28744070870536
patch: return 0 . $NUMBER$ * exp ( x - x ) ) ;
rank: 269
score: 99.32213483537946
patch: return 0 . $NUMBER$ * exp ( - 1 ) + $NUMBER$ ;
rank: 269
score: 99.30892181396484
patch: return 0 . $NUMBER$ + exp ( - x ) * 0 . $NUMBER$ ;
rank: 269
score: 99.28719075520833
patch: return 0 . $NUMBER$ * exp ( x ) ; /
rank: 269
score: 99.25096784319196
patch: return 0 . $NUMBER$ * exp ( x ) - x ) ;
rank: 269
score: 99.2156231219952
patch: return 0 . $NUMBER$ * - exp ( - $NUMBER$ ) ;
rank: 269
score: 99.18660481770833
patch: return 0 . $NUMBER$ * new double [ 0 ] ;
rank: 269
score: 99.18515249399039
patch: return - x . 0 * exp ( - x ) ;
rank: 270
score: 99.30890655517578
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ + - x ) ;
rank: 270
score: 99.28665597098214
patch: return 0 . $NUMBER$ * exp $NUMBER$ * exp ( x ) ;
rank: 270
score: 99.25652606670673
patch: return 0 . $NUMBER$ / exp ( - x ) ) ;
rank: 270
score: 99.21555873325893
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; break ;
rank: 270
score: 99.18503042367789
patch: if ( x > $NUMBER$ ) { exp ( x ) ;
rank: 271
score: 99.32005310058594
patch: return 0 . $NUMBER$ * exp ( - 1 ) - 0 . $NUMBER$ ;
rank: 271
score: 99.14619663783482
patch: return 0 . $NUMBER$ * exp ( - x ) ; ; }
rank: 272
score: 99.31983947753906
patch: return 0 . $NUMBER$ * exp ( - x ) * 1 . $NUMBER$ ;
rank: 272
score: 99.30877685546875
patch: return 0 . $NUMBER$ * exp ( 0 . 0 / - x ) ;
rank: 272
score: 99.26046048677884
patch: return 0 . 1 * exp ( - x ) ) ;
rank: 272
score: 99.25625375600961
patch: return 0 . $NUMBER$ * this . exp ( x ) ;
rank: 272
score: 99.24922398158482
patch: return 0 . 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 272
score: 99.21538434709821
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ * x ) ;
rank: 273
score: 99.31964874267578
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) / $NUMBER$ . $NUMBER$ ;
rank: 273
score: 99.25625174386161
patch: return 0 . 1 * exp ( - x ) * x ;
rank: 273
score: 99.21504720052083
patch: return $NUMBER$ . 0 * exp ( - $NUMBER$ ) ;
rank: 273
score: 99.1455829326923
patch: return 1 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 274
score: 99.31963348388672
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( 0 ) ;
rank: 274
score: 99.28407505580357
patch: return 0 . $NUMBER$ * exp ( x ) . - x ;
rank: 274
score: 99.2602294921875
patch: return 0 . $NUMBER$ * exp ( x ) return 0 . $NUMBER$ ;
rank: 274
score: 99.24749755859375
patch: return 0 . 0 . $NUMBER$ * exp ( x ) ; }
rank: 274
score: 99.14483642578125
patch: double x = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 275
score: 99.31932067871094
patch: return 0 . 0 * exp ( ) / exp ( - x ) ;
rank: 275
score: 99.28379469651442
patch: return 0 . $NUMBER$ * exp ( - x ) ; .
rank: 275
score: 99.254638671875
patch: return 0 . $NUMBER$ * double CaMeL Value ( - x ) ;
rank: 275
score: 99.21464320591518
patch: return 0 . 1 * exp ( - ( x ) ) ;
rank: 275
score: 99.18429129464286
patch: return 0 . $NUMBER$ * exp ( x ) / - x ;
rank: 275
score: 99.18243408203125
patch: return Math . $NUMBER$ * exp ( - x ) ;
rank: 276
score: 99.31918334960938
patch: return 1 . $NUMBER$ * exp ( - 1 ) ;
rank: 276
score: 99.30712890625
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , 0 . 0 ) ;
rank: 276
score: 99.28282819475446
patch: return ) * 0 . $NUMBER$ * exp ( - x ) ;
rank: 276
score: 99.18141682942708
patch: return 0 . $NUMBER$ * ( - x ) ; }
rank: 276
score: 99.14385986328125
patch: return 0 . $NUMBER$ * exp ( x ) ; } break ;
rank: 277
score: 99.31902313232422
patch: return 0 . $NUMBER$ / exp ( - x ) / $NUMBER$ . $NUMBER$ ;
rank: 277
score: 99.25980922154018
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * exp ( x )
rank: 277
score: 99.2542724609375
patch: return 0 . 0 + exp ( - x ) + x ;
rank: 277
score: 99.24677385602679
patch: return 0 . $NUMBER$ / exp ( - x + $NUMBER$ ) ;
rank: 277
score: 99.21449497767857
patch: return 0 . $NUMBER$ + ( exp ( - $NUMBER$ ) ) ;
rank: 277
score: 99.18115234375
patch: return 0 . $NUMBER$ * in ( - x ) ;
rank: 278
score: 99.31870814732143
patch: return 0 * 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 278
score: 99.24675641741071
patch: return 0 . 0 / exp ( - 0 . 0 ) ;
rank: 278
score: 99.1819317157452
patch: return 0 - 0 . 0 * exp ( x ) ;
rank: 279
score: 99.3186767578125
patch: return 0 . $NUMBER$ * exp ( x - x ) * x ;
rank: 279
score: 99.28124060997597
patch: return 0 . 0 * 0 * exp ( x ) ;
rank: 279
score: 99.25277005709134
patch: return 0 . - 0 * exp ( - x ) ;
rank: 279
score: 99.21370152064732
patch: return x - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 280
score: 99.3066875751202
patch: { return 0 . $NUMBER$ + exp ( - x ) ;
rank: 280
score: 99.28115609975961
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; ;
rank: 280
score: 99.213623046875
patch: return $NUMBER$ / 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 281
score: 99.30663248697917
patch: return 0 . 0 * exp ( 0 . length - x ) ;
rank: 281
score: 99.25821940104167
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x + x ) ;
rank: 281
score: 99.24529157366071
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 281
score: 99.17888934795673
patch: return 0 . $NUMBER$ * exp ( x , 1 ) ;
rank: 281
score: 99.14174107142857
patch: if ( x <= 0 ) { x = - x ; }
rank: 282
score: 99.31727701822916
patch: return 0 . $NUMBER$ * exp ( x ) / ( x ) ;
rank: 282
score: 99.30613708496094
patch: return 0 . 0 * exp ( - x ) - 1 . $NUMBER$ ;
rank: 282
score: 99.27945650540866
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; /
rank: 282
score: 99.25817057291667
patch: return 0 . $NUMBER$ * exp ( - x ) - x ; ;
rank: 282
score: 99.24524864783653
patch: return 0 . 1 * exp ( x ) - x ;
rank: 282
score: 99.21346028645833
patch: return 0 . $NUMBER$ - exp ( - $NUMBER$ ) ;
rank: 283
score: 99.31714630126953
patch: / * return 0 . $NUMBER$ * exp ( - x ) * x ;
rank: 283
score: 99.30612362132354
patch: return 0 . $NUMBER$ * exp ( - x ) . exp ( x ) ;
rank: 283
score: 99.27939278738839
patch: return 0 . $NUMBER$ * exp ( x ) ) - x ;
rank: 283
score: 99.25752766927083
patch: return 0 . $NUMBER$ + exp ( * x ) ;
rank: 283
score: 99.21337890625
patch: return - $NUMBER$ / exp ( - x ) ;
rank: 283
score: 99.17898995535714
patch: return ( - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 284
score: 99.3164774576823
patch: return Double . $NUMBER$ * exp ( - 1 ) ;
rank: 284
score: 99.27899169921875
patch: return $NUMBER$ . $NUMBER$ * exp ( x + - x ) ;
rank: 284
score: 99.25672496448864
patch: return 0 * exp ( - x ) ) ;
rank: 284
score: 99.21334402901786
patch: return 0 . 0 * exp ( - x ) ; } else
rank: 284
score: 99.14134870256696
patch: x = 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 285
score: 99.30580240885416
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . 0 ;
rank: 285
score: 99.27893938337054
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; break ;
rank: 285
score: 99.25652606670673
patch: return 0 . $NUMBER$ ++ * exp ( - x ) ;
rank: 285
score: 99.25104631696429
patch: return 0 . 0 * exp ( - x ) % $NUMBER$ ;
rank: 285
score: 99.24485426682692
patch: return 0 . 0 * exp ( x + $NUMBER$ ) ;
rank: 285
score: 99.1757303873698
patch: return 0 . $NUMBER$ * 0 double ( x ) ;
rank: 286
score: 99.31561279296875
patch: return 0 . 0 * exp ( - x ) / ( $NUMBER$ ) ;
rank: 286
score: 99.27833775111607
patch: return 0 . $NUMBER$ * exp * exp ( - x ) ;
rank: 286
score: 99.21180071149554
patch: return 0 . 0 ; } if ( x < 0 ) {
rank: 286
score: 99.1787841796875
patch: return 0 - exp ( - x ) ;
rank: 286
score: 99.17486102764423
patch: return 0 . 0 * exp ( x , $NUMBER$ ) ;
rank: 287
score: 99.31543731689453
patch: return 0 . $NUMBER$ * exp ( - x ) + x - x ;
rank: 287
score: 99.30558013916016
patch: return 0 . 0 * exp ( - x ) + 0 . 0 ;
rank: 287
score: 99.27763227982955
patch: return 0 . $NUMBER$ * exp ( x ) .
rank: 287
score: 99.254638671875
patch: return 0 . $NUMBER$ + exp ( 0 . $NUMBER$ ) ;
rank: 287
score: 99.25076729910714
patch: return - 0 . $NUMBER$ * exp ( x * x ) ;
rank: 287
score: 99.1744893391927
patch: return Integer . $NUMBER$ * exp ( - x ) ;
rank: 288
score: 99.27715192522321
patch: return 0 . $NUMBER$ * exp ( - x ) ; / )
rank: 288
score: 99.24404672475961
patch: return 0 . 0 . $NUMBER$ / exp ( x ) ;
rank: 288
score: 99.17404174804688
patch: return 0 . $NUMBER$ * / exp ( x ) ;
rank: 289
score: 99.31500244140625
patch: return 0 ; } else { return 0 . $NUMBER$ * exp ( x ;
rank: 289
score: 99.27662004743304
patch: return 0 . $NUMBER$ * exp ( x ) * - x ;
rank: 289
score: 99.24893624441964
patch: return 0 . 1 * exp ( - x ) / $NUMBER$ ;
rank: 289
score: 99.17856270926339
patch: return 0 . $NUMBER$ - exp ( x , - x ) ;
rank: 290
score: 99.2763671875
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; ) ;
rank: 290
score: 99.24245042067308
patch: return 0 / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 290
score: 99.21072823660714
patch: result = 0 . $NUMBER$ * exp ( - x ) ; }
rank: 290
score: 99.17790876116071
patch: if ( x > 0 ) { exp ( - x ) ;
rank: 290
score: 99.17364501953125
patch: return 0 . 0 * HEX _ $NUMBER$ ;
rank: 291
score: 99.3043964092548
patch: return 0 . $NUMBER$ * exp ( x ) . 1 ;
rank: 291
score: 99.27532087053571
patch: return 1 . $NUMBER$ * 0 * exp ( - x ) ;
rank: 291
score: 99.24856567382812
patch: = 1 . $NUMBER$ * exp ( - x ) ;
rank: 291
score: 99.13813127790179
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 292
score: 99.31424967447917
patch: return - 0 . $NUMBER$ * exp ( - x ) / x ;
rank: 292
score: 99.30396943933823
patch: return 0 . $NUMBER$ * exp ( - x ) ) / 0 . 1 ;
rank: 292
score: 99.2518310546875
patch: return 0 . $NUMBER$ + exp ( - x ) ; ;
rank: 292
score: 99.2477557842548
patch: double return 0 . $NUMBER$ * exp ( - x ) ;
rank: 292
score: 99.24072265625
patch: return 0 . $NUMBER$ / - exp ( - x ) ;
rank: 292
score: 99.21040562220982
patch: return 0 . $NUMBER$ * x - exp ( - $NUMBER$ ) ;
rank: 292
score: 99.17660757211539
patch: return 0 . $NUMBER$ * 1 * exp ( x ) ;
rank: 292
score: 99.17239145132211
patch: / / return 0 . $NUMBER$ * exp ( x ) ;
rank: 293
score: 99.31385803222656
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ * x ;
rank: 293
score: 99.3032455444336
patch: return 0 . $NUMBER$ + exp ( - x ) * 0 . 0 ;
rank: 293
score: 99.25176130022321
patch: return 0 . $NUMBER$ + exp ( - x - x ) ;
rank: 293
score: 99.1718241373698
patch: return 0 . $NUMBER$ * default ( - x ) ;
rank: 294
score: 99.31324768066406
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) / $NUMBER$ . $NUMBER$ ;
rank: 294
score: 99.27333420973558
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ * x ) ;
rank: 294
score: 99.25129917689732
patch: throw ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 294
score: 99.20670259915866
patch: return ( $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 294
score: 99.13723520132211
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + x ;
rank: 295
score: 99.3124771118164
patch: return 0 . $NUMBER$ * exp ( x ) . exp ( x ) ;
rank: 295
score: 99.2732684795673
patch: return x * 0 . $NUMBER$ * exp ( x ) ;
rank: 295
score: 99.24688720703125
patch: return 0 . 0 * exp ( - x / x ) ;
rank: 295
score: 99.17134602864583
patch: return 0 . $NUMBER$ * new exp ( x ) ;
rank: 296
score: 99.31214904785156
patch: return 0 . $NUMBER$ * exp ( - ( x * x ) ) ;
rank: 296
score: 99.30279541015625
patch: return 0 . $NUMBER$ * exp ( - x ) / false ;
rank: 296
score: 99.2729961688702
patch: return $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 296
score: 99.25016276041667
patch: return 0 . $NUMBER$ $NUMBER$ * exp ( x ) ;
rank: 297
score: 99.3106219951923
patch: return 0 . $NUMBER$ * exp ( - 1 ) ) ;
rank: 297
score: 99.30258178710938
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ - - x ) ;
rank: 297
score: 99.24979073660714
patch: result = 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 297
score: 99.20522635323661
patch: return 0 . $NUMBER$ * exp ( ( double ) x ) ;
rank: 297
score: 99.13699106069711
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } }
rank: 298
score: 99.31056315104166
patch: return 0 ; } return 0 . 0 * exp ( x ) ;
rank: 298
score: 99.20506795247395
patch: double 0 . 0 * exp ( - x ) ;
rank: 298
score: 99.175537109375
patch: return - x - $NUMBER$ * exp ( - x ) ;
rank: 298
score: 99.17116135817308
patch: else return 0 . $NUMBER$ * exp ( - x ) ;
rank: 299
score: 99.3101806640625
patch: return 0 . 0 * exp ( x ) / $NUMBER$ . $NUMBER$ ;
rank: 299
score: 99.30118560791016
patch: return 0 . $NUMBER$ * exp ( - x ) != 0 . $NUMBER$ ;
rank: 299
score: 99.27205984933036
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . - x ) ;
rank: 299
score: 99.24529157366071
patch: return 0 . $NUMBER$ / exp ( - x , x ) ;
rank: 299
score: 99.23609924316406
patch: return new double [ $NUMBER$ ] ;
rank: 299
score: 99.17514474051339
patch: x = exp ( x , 0 . 0 , x ) ;
rank: 299
score: 99.13655911959134
patch: double x = 0 . $NUMBER$ * exp ( x ) ;
rank: 300
score: 99.3096923828125
patch: return 0 . $NUMBER$ * exp ( - x ) / ;
rank: 300
score: 99.24810791015625
patch: return 0 . $NUMBER$ * exp ( - x ) * 0 ;
rank: 300
score: 99.24483816964286
patch: return $NUMBER$ . 0 * exp ( - x ) - x ;
rank: 300
score: 99.20347377232143
patch: return 0 . $NUMBER$ + exp ( - 0 . 0 ) ;
rank: 300
score: 99.13645717075893
patch: return $NUMBER$ - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 301
score: 99.30038452148438
patch: return 0 . $NUMBER$ * exp ( - x ) return 0 . 0 ;
rank: 301
score: 99.27167619977679
patch: return 0 . $NUMBER$ * exp ( x ) ; return ) ;
rank: 301
score: 99.24472045898438
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 302
score: 99.30948311941964
patch: return 0 . $NUMBER$ * exp ( - 1 ) - 1 ;
rank: 302
score: 99.30022430419922
patch: return 0 . $NUMBER$ + exp ( - x ) - 0 . 0 ;
rank: 302
score: 99.27161754261364
patch: return 0 . $NUMBER$ * exp ( x ) )
rank: 302
score: 99.24752103365384
patch: return 0 . $NUMBER$ : 0 * exp ( x ) ;
rank: 302
score: 99.24471341646634
patch: double CaMeL Value ( ) * exp ( - x ) ;
rank: 302
score: 99.23440317007211
patch: return 0 . 1 / exp ( - x ) ; }
rank: 302
score: 99.20327758789062
patch: return x + $NUMBER$ * exp ( - x ) ;
rank: 302
score: 99.17082075639205
patch: return 0 . $NUMBER$ * int ( x ) ;
rank: 303
score: 99.30819498697916
patch: return 0 . $NUMBER$ * exp ( - x ) * ( x ;
rank: 303
score: 99.27085658482143
patch: return 0 . $NUMBER$ * exp ( x ) ) + x ;
rank: 303
score: 99.2471923828125
patch: return 0 . $NUMBER$ : $NUMBER$ + exp ( - x ) ;
rank: 303
score: 99.24415001502403
patch: return 0 . $NUMBER$ / exp ( - x ) ; ;
rank: 303
score: 99.20294189453125
patch: return 0 . 0 ; } if ( x < $NUMBER$ ) {
rank: 303
score: 99.17453438895089
patch: x = 0 . 0 * exp ( x + x ) ;
rank: 303
score: 99.13579450334821
patch: x = 0 . 0 * exp ( x - x ) ;
rank: 304
score: 99.29962158203125
patch: return 0 * exp ( - x ) / 0 . $NUMBER$ ;
rank: 304
score: 99.24412318638393
patch: return 0 . 0 * exp ( x + - x ) ;
rank: 304
score: 99.23223407451923
patch: return 0 . $NUMBER$ . 0 / exp ( x ) ;
rank: 305
score: 99.30626569475446
patch: return 0 * exp ( - x ) * / - x ;
rank: 305
score: 99.29921875
patch: return 0 . $NUMBER$ * exp ( 0 . 1 + x ) ;
rank: 305
score: 99.26944673978366
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; else
rank: 305
score: 99.24650355747768
patch: return 0 . $NUMBER$ + exp ( - x ) . 1 ;
rank: 305
score: 99.23008034446023
patch: return $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 305
score: 99.17406287560097
patch: x = 0 . 0 / exp ( - x ) ;
rank: 305
score: 99.17003455528847
patch: return 0 . $NUMBER$ * max ( - x ) ; }
rank: 306
score: 99.26878865559895
patch: return 0 . $NUMBER$ * exp ( - x ) *
rank: 306
score: 99.22988059303977
patch: return 0 . 1 + exp ( x ) ;
rank: 306
score: 99.20110212053571
patch: return ( 0 . $NUMBER$ / exp ( - x ) ) ;
rank: 306
score: 99.16879507211539
patch: return 0 . 0 * exp ( x ) ; break ;
rank: 306
score: 99.13518415178571
patch: if ( x <= $NUMBER$ ) { x = - x ; }
rank: 307
score: 99.29861653645834
patch: return 0 . 0 * exp ( x ) - 0 . 0 ;
rank: 307
score: 99.26850237165179
patch: return 0 . $NUMBER$ * 0 - exp ( - x ) ;
rank: 307
score: 99.24623616536458
patch: return 0 . $NUMBER$ * exp ( - x ) {
rank: 307
score: 99.243896484375
patch: return 0 . $NUMBER$ * exp ( - x ) * $STRING$ ;
rank: 308
score: 99.30427689985795
patch: return 0 * exp ( - x ) ; }
rank: 308
score: 99.29859834558823
patch: return 0 . $NUMBER$ * exp ( 0 . 0 - x - x ) ;
rank: 308
score: 99.16801313920455
patch: return 0 . $NUMBER$ * min ( x ) ;
rank: 308
score: 99.13427734375
patch: return 0 . $NUMBER$ * exp ( . x ) ;
rank: 309
score: 99.24373081752232
patch: throw new Runtime CaMeL Exception ( $STRING$ + x + $STRING$ ) ;
rank: 309
score: 99.2274639423077
patch: return 0 . 0 + exp ( - x ) ; }
rank: 309
score: 99.16781850961539
patch: return 0 . $NUMBER$ * exp ( x ) : x ;
rank: 309
score: 99.1341552734375
patch: return 0 . $NUMBER$ * exp ( x + 1 ) ;
rank: 310
score: 99.30340169270833
patch: return 0 . $NUMBER$ * exp ( - 1 , - x ) ;
rank: 310
score: 99.2983039407169
patch: return 0 . $NUMBER$ * exp ( x ) / exp ( - x ) ;
rank: 310
score: 99.24172973632812
patch: return 0 . $NUMBER$ ( - x ) ;
rank: 310
score: 99.19898399939903
patch: return 0 0 . $NUMBER$ * exp ( - x ) ;
rank: 311
score: 99.29825592041016
patch: return ( 0 . $NUMBER$ * exp ( - x ) - x ) ;
rank: 311
score: 99.26779610770089
patch: return 0 . $NUMBER$ * exp ( ( x - x ) ;
rank: 311
score: 99.2414794921875
patch: return 0 . 0 ( - x ) ;
rank: 311
score: 99.13314383370536
patch: double exp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 312
score: 99.30322265625
patch: return 0 . $NUMBER$ * exp ( - x ) * - 1 ;
rank: 312
score: 99.29765768612133
patch: return 0 . $NUMBER$ * exp ( - x ) ) / 0 . 0 ;
rank: 312
score: 99.26691545758929
patch: return $NUMBER$ . $NUMBER$ * exp ( - 1 . x ) ;
rank: 312
score: 99.2270038311298
patch: return 0 . 0 / exp ( x - x ) ;
rank: 312
score: 99.13280310997597
patch: return 0 ) . $NUMBER$ * exp ( - x ) ;
rank: 313
score: 99.30281575520833
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ; }
rank: 313
score: 99.29756927490234
patch: return 0 . $NUMBER$ * exp ( exp ( 0 ) + x ) ;
rank: 313
score: 99.24492536272321
patch: return 0 . $NUMBER$ + exp ( - x ) . x ;
rank: 313
score: 99.24092320033482
patch: return 0 . $NUMBER$ * exp ( - x , 0 ) ;
rank: 313
score: 99.2262714092548
patch: return 0 . 0 * exp ( x ) - $NUMBER$ ;
rank: 313
score: 99.19854181463069
patch: return x - $NUMBER$ * exp ( x ) ;
rank: 313
score: 99.16611735026042
patch: return 0 . $NUMBER$ + exp ( x ) ; }
rank: 313
score: 99.1316387469952
patch: return 0 . $NUMBER$ * exp ( + x ) ; }
rank: 314
score: 99.26673235212054
patch: return $NUMBER$ return 0 . $NUMBER$ * exp ( - x ) ;
rank: 314
score: 99.2396240234375
patch: return - 0 . 0 + exp ( - x ) ;
rank: 314
score: 99.16579026442308
patch: return 1 . 0 * exp ( x , x ) ;
rank: 314
score: 99.13147844587054
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 315
score: 99.3021484375
patch: return 0 . $NUMBER$ * exp ( - x ) ; / * /
rank: 315
score: 99.29726275275735
patch: return 0 . 0 * exp ( x ) + exp ( - x ) ;
rank: 315
score: 99.2439716045673
patch: return 0 . $NUMBER$ . 1 * exp ( x ) ;
rank: 315
score: 99.22598031850961
patch: { return 0 . $NUMBER$ * exp ( x ) ; }
rank: 315
score: 99.17136793870192
patch: return 0 - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 315
score: 99.13116455078125
patch: if ( x < 0 ) { return 0 . $NUMBER$ ; }
rank: 316
score: 99.30128696986607
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) / x ;
rank: 316
score: 99.29706887637867
patch: return 0 . 0 * exp ( x ) - exp ( - x ) ;
rank: 316
score: 99.23934500558036
patch: return 0 . $NUMBER$ * exp ( - x ) * 1 ;
rank: 316
score: 99.19622802734375
patch: return 1 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 316
score: 99.16408469460227
patch: += 0 . $NUMBER$ * exp ( x ) ;
rank: 316
score: 99.13111223493304
patch: return 0 . $NUMBER$ * exp ( . x , x ) ;
rank: 317
score: 99.30126139322917
patch: return 0 . 0 * exp ( - x ) ( x ) ;
rank: 317
score: 99.29689025878906
patch: return 0 . $NUMBER$ + exp ( - x ) - 0 . $NUMBER$ ;
rank: 317
score: 99.26522391183036
patch: return 0 . $NUMBER$ * 0 . exp ( - x ) ;
rank: 317
score: 99.24382672991071
patch: return 0 . $NUMBER$ * exp ( exp ( - x ) ;
rank: 317
score: 99.23914446149554
patch: return - 1 . $NUMBER$ * exp ( - x ) ; }
rank: 317
score: 99.22560471754808
patch: return 0 . 0 $NUMBER$ * exp ( - x ) ;
rank: 317
score: 99.19552176339286
patch: return x - $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 317
score: 99.16318581321023
patch: return 1 . $NUMBER$ / exp ( x ) ;
rank: 318
score: 99.2967529296875
patch: return 0 = 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 318
score: 99.24299621582031
patch: return 0 . $NUMBER$ + x ;
rank: 318
score: 99.23911539713542
patch: throw new Runtime CaMeL Exception ( $STRING$ + x ) ;
rank: 318
score: 99.22451782226562
patch: return 0 . 0 / exp ( x ) ; }
rank: 318
score: 99.17102922712054
patch: return 0 ; } exp ( x , 0 . 0 ) ;
rank: 318
score: 99.16254131610577
patch: return 0 . $NUMBER$ , exp ( - x ) ; }
rank: 319
score: 99.29670933314732
patch: return 0 return 0 . 0 * exp ( - x ) ;
rank: 319
score: 99.2645733173077
patch: return 0 . $NUMBER$ * exp ( x ) ) ) ;
rank: 319
score: 99.24251883370536
patch: return 0 . $NUMBER$ * x ) * exp ( x ) ;
rank: 319
score: 99.23828996930804
patch: = 0 . $NUMBER$ * exp ( - x ) + x ;
rank: 319
score: 99.22434645432692
patch: . return 0 . 0 * exp ( - x ) ;
rank: 319
score: 99.19383021763393
patch: return $NUMBER$ . $NUMBER$ * exp ( - x - $NUMBER$ ) ;
rank: 319
score: 99.13016451322116
patch: return 0 . $NUMBER$ * exp ( x ) + exp ;
rank: 320
score: 99.29663899739583
patch: return 0 . $NUMBER$ * exp ( 1 . 0 - x ) ;
rank: 320
score: 99.23805454799107
patch: return 0 . $NUMBER$ / exp ( - x ) * x ;
rank: 320
score: 99.17037527901786
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 ;
rank: 321
score: 99.29660213694854
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . $NUMBER$ ) ;
rank: 321
score: 99.22414143880208
patch: return 0 . 1 / exp ( - $NUMBER$ ) ;
rank: 321
score: 99.17015584309895
patch: return 0 / exp ( - x - x ) ;
rank: 321
score: 99.16028941761364
patch: return exp ( x , 0 . $NUMBER$ ) ;
rank: 322
score: 99.29825846354167
patch: return 0 . 0 * exp ( - x ) / x ) ;
rank: 322
score: 99.29652315027573
patch: return 0 . $NUMBER$ * exp ( - x ) / ( - x ) ;
rank: 322
score: 99.23749651227679
patch: return 0 . $NUMBER$ * exp ( - x ) >> $NUMBER$ ;
rank: 322
score: 99.19349888392857
patch: result . return 0 . $NUMBER$ * exp ( - x ) ;
rank: 322
score: 99.17013985770089
patch: if ( x < $NUMBER$ ) { exp ( - x ) ;
rank: 322
score: 99.15932053786058
patch: return 0 . 0 * exp ( x ) : 0 ;
rank: 323
score: 99.29644775390625
patch: return 0 . $NUMBER$ * exp ( 0 . 0 ;
rank: 323
score: 99.24044363839286
patch: return 0 . $NUMBER$ * exp ( - x ) ) ; }
rank: 323
score: 99.22386756310097
patch: return $NUMBER$ . $NUMBER$ * - exp ( - x ) ;
rank: 323
score: 99.16981724330357
patch: if ( x < 0 ) { exp ( - x ) ;
rank: 323
score: 99.15891520182292
patch: return exp ( x , 0 . 0 ) ; }
rank: 323
score: 99.12917654854911
patch: return 0 . $NUMBER$ / exp ( - x ) ; } }
rank: 324
score: 99.29746791294643
patch: return 0 / 0 . 0 * exp ( - x ) ;
rank: 324
score: 99.29644775390625
patch: return 0 . $NUMBER$ * exp ( - x ) + 1 . 0 ;
rank: 324
score: 99.22336989182692
patch: return 0 . $NUMBER$ / exp ( x - $NUMBER$ ) ;
rank: 324
score: 99.19328169389205
patch: double 0 . $NUMBER$ * exp ( x ) ;
rank: 324
score: 99.16979108537946
patch: return x + $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 325
score: 99.29617309570312
patch: return 0 . $NUMBER$ * exp ( / exp ( - x ) ) ;
rank: 325
score: 99.19319974459134
patch: return ( exp ( x , 0 . 0 ) ) ;
rank: 325
score: 99.1585693359375
patch: return - - 0 . $NUMBER$ * exp ( x ) ;
rank: 325
score: 99.12833949497768
patch: if ( x < 0 . 0 ) { x = $NUMBER$ ;
rank: 326
score: 99.29706682477679
patch: return 0 . $NUMBER$ * 0 * exp ( - $NUMBER$ ) ;
rank: 326
score: 99.296142578125
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . 0 ) ;
rank: 326
score: 99.26271565755208
patch: return $NUMBER$ . $NUMBER$ * exp exp ( x ) ;
rank: 326
score: 99.22269381009616
patch: return 0 . $NUMBER$ + exp ( x - $NUMBER$ ) ;
rank: 327
score: 99.297021484375
patch: return 0 . $NUMBER$ * exp ( - x ) * exp ( ;
rank: 327
score: 99.29607684795673
patch: return 0 . $NUMBER$ + exp ( 0 . 0 ) ;
rank: 327
score: 99.23956298828125
patch: return 0 . $NUMBER$ ? $NUMBER$ + exp ( - x ) ;
rank: 327
score: 99.23611886160714
patch: return 0 . 0 / exp ( - x ) + x ;
rank: 327
score: 99.22196138822116
patch: return 0 . 0 * exp ( x - 1 ) ;
rank: 327
score: 99.19236537388393
patch: return ( 0 . 0 - exp ( - x ) ) ;
rank: 327
score: 99.15852864583333
patch: return 0 . $NUMBER$ * case ( - x ) ;
rank: 328
score: 99.29688313802083
patch: return 0 . $NUMBER$ * exp ( - x ) ) * $NUMBER$ ;
rank: 328
score: 99.26190185546875
patch: / ; return 0 . $NUMBER$ * exp ( - x ) ;
rank: 328
score: 99.23606654575893
patch: return 0 . 0 + 0 * exp ( - x ) ;
rank: 328
score: 99.22053666548295
patch: return 0 * exp ( x - $NUMBER$ ) ;
rank: 328
score: 99.1584981282552
patch: return 0 . $NUMBER$ * char ( - x ) ;
rank: 329
score: 99.29547119140625
patch: return 0 * 0 * exp ( - x ) * x ;
rank: 329
score: 99.29503676470588
patch: return 0 . $NUMBER$ * exp ( - x ) ) / $NUMBER$ . $NUMBER$ ;
rank: 329
score: 99.26162283761161
patch: return 0 . $NUMBER$ * exp ( x ) ; ++ x ;
rank: 329
score: 99.23883928571429
patch: return 0 * exp ( exp ( x ) + x ) ;
rank: 329
score: 99.23565673828125
patch: return - 0 . $NUMBER$ * exp ( double ) - x ;
rank: 329
score: 99.2201678936298
patch: return 0 . 1 * exp ( x - $NUMBER$ ) ;
rank: 329
score: 99.1582743326823
patch: return 0 . 0 * min ( - x ) ;
rank: 329
score: 99.12723214285714
patch: if ( x < 0 . 0 ) { return 0 ; }
rank: 330
score: 99.29476165771484
patch: return 0 * exp ( 0 . 0 * exp ( x ) ) ;
rank: 330
score: 99.29469651442308
patch: return - 0 . 0 * exp ( - 1 ) ;
rank: 330
score: 99.23549107142857
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + x ) ;
rank: 330
score: 99.1918194110577
patch: val = 0 . $NUMBER$ * exp ( - x ) ;
rank: 331
score: 99.26012073863636
patch: return $NUMBER$ * exp ( - - x ) ;
rank: 331
score: 99.23778424944196
patch: return ( exp ( x ) * exp ( x ) ) ;
rank: 331
score: 99.21791428786058
patch: return 0 . 0 * exp ( x ) + $NUMBER$ ;
rank: 331
score: 99.15760294596355
patch: return 0 . $NUMBER$ * $NUMBER$ ( - x ) ;
rank: 332
score: 99.293701171875
patch: return 0 . $NUMBER$ * exp ( x ) ( x ) ;
rank: 332
score: 99.19095284598214
patch: return 0 . $NUMBER$ * exp ( - x ) ; else {
rank: 332
score: 99.12660435267857
patch: x = 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 333
score: 99.29466247558594
patch: return 0 . $NUMBER$ * exp ( exp ( x ) , x ) ;
rank: 333
score: 99.23732212611607
patch: return 0 . $NUMBER$ || exp ( - x ) - x ;
rank: 333
score: 99.23499407087054
patch: return - - 0 . 0 * exp ( - x ) ;
rank: 333
score: 99.19061279296875
patch: result = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 333
score: 99.1574237530048
patch: return 0 . 0 * exp ( x ) . 0 ;
rank: 334
score: 99.29460144042969
patch: return 0 . 0 * exp ( exp ( x ) + x ) ;
rank: 334
score: 99.29302978515625
patch: return 0 . 0 * exp ( - 0 ) ;
rank: 334
score: 99.25894165039062
patch: return 0 . $NUMBER$ exp ( - - x ) ;
rank: 334
score: 99.19015502929688
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ ;
rank: 334
score: 99.16588338216145
patch: return 0 * exp ( - x - x ) ;
rank: 335
score: 99.29448385799633
patch: return 0 . $NUMBER$ * exp ( - x ) exp ( - x ) ;
rank: 335
score: 99.2366943359375
patch: return 0 . $NUMBER$ + exp ( - x ) + $NUMBER$ ;
rank: 335
score: 99.234619140625
patch: return 0 . $NUMBER$ * exp ( float ) - x ;
rank: 335
score: 99.19014115767045
patch: return - $NUMBER$ * exp ( - x ) ;
rank: 335
score: 99.16261643629808
patch: if ( x > 0 ) { exp ( x ) ;
rank: 335
score: 99.1567852313702
patch: result += 0 . $NUMBER$ * exp ( - x ) ;
rank: 335
score: 99.12633338341347
patch: return $NUMBER$ . $NUMBER$ * * exp ( - x ) ;
rank: 336
score: 99.29435460707721
patch: return 0 . 0 * exp ( - x ) * exp ( x ) ;
rank: 336
score: 99.29205791766827
patch: return 0 * exp ( - x ) * - x ;
rank: 336
score: 99.214599609375
patch: return 1 . $NUMBER$ * exp ( x ) - x ;
rank: 336
score: 99.15548706054688
patch: return 0 . $NUMBER$ * float ( - x ) ;
rank: 337
score: 99.294189453125
patch: return 0 . $NUMBER$ * exp ( x ) ) / 0 . $NUMBER$ ;
rank: 337
score: 99.25863882211539
patch: return 0 . 0 * exp exp ( - x ) ;
rank: 337
score: 99.23643275669643
patch: return 0 . $NUMBER$ + exp ( - x ) . 0 ;
rank: 337
score: 99.21444936899039
patch: { return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 337
score: 99.16228778545673
patch: exp ( x , 0 . $NUMBER$ , - x ) ;
rank: 338
score: 99.29396275111607
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - 1 ) ;
rank: 338
score: 99.2918701171875
patch: return 0 . $NUMBER$ * exp ( Double . MAX _ VALUE ) ;
rank: 338
score: 99.25773315429687
patch: return x . exp ( - x ) ;
rank: 338
score: 99.23631873497597
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ + x ) ;
rank: 338
score: 99.2330830891927
patch: return 0 . 0 * sum ( - x ) ;
rank: 338
score: 99.21414888822116
patch: y = 0 . 0 * exp ( - x ) ;
rank: 338
score: 99.18954702524039
patch: result = 0 . 0 / exp ( - x ) ;
rank: 338
score: 99.15492600661058
patch: return 0 . 0 * exp ( - x x ) ;
rank: 339
score: 99.29390171595982
patch: return 0 . 0 * exp ( - x ) . 1 ;
rank: 339
score: 99.29171549479166
patch: return 0 . 0 * exp ( - x ) * x ) ;
rank: 339
score: 99.23301478794643
patch: return 1 . $NUMBER$ * exp ( - x * x ) ;
rank: 339
score: 99.15472881610577
patch: return 0 . $NUMBER$ * exp ( , x ) ; }
rank: 340
score: 99.29376690204327
patch: return 0 . 0 0 * exp ( - x ) ;
rank: 340
score: 99.29122220552884
patch: / * return 0 . $NUMBER$ * exp ( x ) ;
rank: 340
score: 99.23597130408653
patch: } return 1 . $NUMBER$ * exp ( - x ) ;
rank: 340
score: 99.15450345552884
patch: tmp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 340
score: 99.12343343098958
patch: return 0 . $NUMBER$ * ( x - $NUMBER$ ) ;
rank: 341
score: 99.29111328125
patch: return 0 . $NUMBER$ * exp ( - x ) ; / * ;
rank: 341
score: 99.18845040457589
patch: return 0 . $NUMBER$ * double $NUMBER$ * exp ( x ) ;
rank: 341
score: 99.1616680438702
patch: return 0 + 0 . 0 * exp ( x ) ;
rank: 341
score: 99.15442833533653
patch: return 0 . 0 * / exp ( - x ) ;
rank: 341
score: 99.12253243582589
patch: return 0 . $NUMBER$ * exp ( x ) ; } } }
rank: 342
score: 99.29363654641544
patch: return 0 . $NUMBER$ * exp ( 0 . 0 * exp ( ) ) ;
rank: 342
score: 99.29049917367789
patch: return 0 . 0 * exp ( - 1 ) ; }
rank: 342
score: 99.18801443917411
patch: return 0 , 0 . 0 * exp ( - x ) ;
rank: 342
score: 99.16148963341347
patch: return x + 0 . 0 * exp ( x ) ;
rank: 342
score: 99.15439675071023
patch: return 0 . $NUMBER$ * long ( x ) ;
rank: 342
score: 99.12245530348558
patch: return 1 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 343
score: 99.21190467247597
patch: return 0 . 0 + exp ( x - x ) ;
rank: 343
score: 99.18761189778645
patch: return 0 . $NUMBER$ * x - ( x ) ;
rank: 343
score: 99.12241908482143
patch: exp ( x , 0 . 0 , 0 . $NUMBER$ ) ;
rank: 344
score: 99.29324161305146
patch: return 0 * exp ( 0 . 0 * exp ( - x ) ) ;
rank: 344
score: 99.28939115084134
patch: return 0 * exp ( - x ) ; } else {
rank: 344
score: 99.25638253348214
patch: return $NUMBER$ . $NUMBER$ * exp ( x - - x ) ;
rank: 344
score: 99.18751743861607
patch: return 0 . $NUMBER$ + exp ( x ) ; } else {
rank: 344
score: 99.15378981370192
patch: return 0 . $NUMBER$ * Math ( - x ) ; }
rank: 345
score: 99.29322814941406
patch: return 0 . 1 * exp ( - x ) / 0 . 0 ;
rank: 345
score: 99.28904622395834
patch: return - 0 . $NUMBER$ * exp ( - x ) + x ;
rank: 345
score: 99.25612095424107
patch: return 0 . $NUMBER$ * Math . exp ( - x ) ;
rank: 345
score: 99.23416573660714
patch: return 0 . $NUMBER$ - x * exp ( - x ) ;
rank: 345
score: 99.23145403180804
patch: return 1 . $NUMBER$ * this . exp ( - x ) ;
rank: 345
score: 99.20968627929688
patch: . return 0 . $NUMBER$ * exp ( x ) ;
rank: 345
score: 99.12200458233173
patch: return 0 . $NUMBER$ * exp ( - x ) 1 ;
rank: 346
score: 99.28839518229167
patch: return - 0 . 0 * exp ( - x ) * x ;
rank: 346
score: 99.187255859375
patch: return 0 . $NUMBER$ * x * exp ( x ) ;
rank: 347
score: 99.29258728027344
patch: return 0 . $NUMBER$ * exp ( * exp ( - 1 ) ) ;
rank: 347
score: 99.2882568359375
patch: return 0 . 0 * exp ( - x ) + x ) ;
rank: 347
score: 99.22984900841347
patch: return 1 . 0 * exp ( x + x ) ;
rank: 347
score: 99.2083740234375
patch: return 0 . $NUMBER$ - exp ( x - x ) ;
rank: 348
score: 99.2919921875
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . $NUMBER$ ;
rank: 348
score: 99.2881368001302
patch: return $NUMBER$ * exp ( - x ) * x ;
rank: 349
score: 99.291943359375
patch: return 0 . 0 * exp ( 0 . 0 + x ) ;
rank: 349
score: 99.28805541992188
patch: return 0 * exp ( - 1 ) * x ;
rank: 349
score: 99.2293231670673
patch: return - 1 . 0 / exp ( - x ) ;
rank: 349
score: 99.15133901742789
patch: return 0 . $NUMBER$ * ~ exp ( - x ) ;
rank: 350
score: 99.29167938232422
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) - x ;
rank: 350
score: 99.28761985085227
patch: return 0 . 0 * exp ( $NUMBER$ ) ;
rank: 350
score: 99.1575176532452
patch: return ( x > $NUMBER$ ) * exp ( x ) ;
rank: 350
score: 99.12054443359375
patch: return 0 . $NUMBER$ * exp ( - 0 - x ) ;
rank: 351
score: 99.28761393229166
patch: return 0 . 0 * exp ( - x ) - x ) ;
rank: 351
score: 99.25434221540179
patch: return $NUMBER$ . $NUMBER$ * x * exp ( - x ) ;
rank: 351
score: 99.23184908353366
patch: return 0 . $NUMBER$ + 0 * exp ( x ) ;
rank: 351
score: 99.18545096261161
patch: return 0 . $NUMBER$ ; } if ( x > 0 ) {
rank: 352
score: 99.29112243652344
patch: return 0 . $NUMBER$ + exp ( - x ) / 0 . 1 ;
rank: 352
score: 99.2281494140625
patch: return 0 . 0 * exp ( - x )
rank: 352
score: 99.18480573381696
patch: return 1 . $NUMBER$ * exp ( x ) ; } else {
rank: 352
score: 99.14970259232955
patch: return 0 . $NUMBER$ * Float ( x ) ;
rank: 353
score: 99.2910888671875
patch: } else { return 0 . 0 * exp ( - x ) ;
rank: 353
score: 99.25420270647321
patch: return 0 . ) . $NUMBER$ * exp ( - x ) ;
rank: 353
score: 99.2313701923077
patch: return 0 . $NUMBER$ * exp ( x ) . $NUMBER$ ;
rank: 353
score: 99.22783551897321
patch: return - 1 . $NUMBER$ * exp ( x + x ) ;
rank: 353
score: 99.18463689630681
patch: return ( exp ( x ) - $NUMBER$ ) ;
rank: 354
score: 99.2540283203125
patch: return $NUMBER$ . $NUMBER$ * exp ( - - x ) ) ;
rank: 354
score: 99.155517578125
patch: return 0 . $NUMBER$ * cosh ( x ) ;
rank: 354
score: 99.11916097005208
patch: x = $NUMBER$ . 0 * exp ( x ) ;
rank: 355
score: 99.28680013020833
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . 0 ;
rank: 355
score: 99.25222342354911
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . x ) ;
rank: 355
score: 99.23110525948661
patch: } * return 0 . $NUMBER$ * exp ( - x ) ;
rank: 355
score: 99.22711181640625
patch: return - 1 . $NUMBER$ * exp ( - x ) ; ;
rank: 355
score: 99.18443885216347
patch: return ( 0 . 0 * exp ( x ) ) ;
rank: 355
score: 99.14869103064903
patch: return 0 . 0 , exp ( x , x ) ;
rank: 355
score: 99.118896484375
patch: return $NUMBER$ . 0 * exp ( x ) ; }
rank: 356
score: 99.29020690917969
patch: return 0 . $NUMBER$ + exp ( x ) + exp ( x ) ;
rank: 356
score: 99.28624674479167
patch: return 0 . $NUMBER$ * exp ( - x ) + x ; }
rank: 356
score: 99.25221604567308
patch: return 0 . $NUMBER$ * exp ( x ) ; / ;
rank: 356
score: 99.23077392578125
patch: } else { return 0 . $NUMBER$ + exp ( x ) ;
rank: 356
score: 99.18382045200893
patch: return 0 . 0 * exp ( - ( $NUMBER$ ) ) ;
rank: 356
score: 99.14830525716145
patch: return 1 . 0 * exp ( x ) ; }
rank: 356
score: 99.1187274639423
patch: return 0 . 0 * exp ( x ) ; } }
rank: 357
score: 99.28594970703125
patch: return 0 * exp ( - ( x - x ) ) ;
rank: 357
score: 99.2515869140625
patch: return 0 . x * 0 * exp ( - x ) ;
rank: 357
score: 99.23047746930804
patch: return 0 . $NUMBER$ * exp ( int ) 0 . $NUMBER$ ;
rank: 357
score: 99.22691932091347
patch: return ( - x ) * exp ( - x ) ;
rank: 357
score: 99.18337576729911
patch: return x ; } if ( x > 0 . 0 ) {
rank: 358
score: 99.28976236979166
patch: return 0 . $NUMBER$ * exp ( - x ) [ 0 ] ;
rank: 358
score: 99.28581019810268
patch: return 0 * exp ( - x ) * ( x ) ;
rank: 358
score: 99.23032052176339
patch: return 0 . $NUMBER$ ? 0 + exp ( - x ) ;
rank: 358
score: 99.22649274553571
patch: return 0 . $NUMBER$ * exp ( - - x ) ; ;
rank: 358
score: 99.20379638671875
patch: return $NUMBER$ . 0 + exp ( - x ) ;
rank: 358
score: 99.11837332589286
patch: . return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 359
score: 99.28966413225446
patch: return 0 = 0 . $NUMBER$ + exp ( - x ) ;
rank: 359
score: 99.25139508928571
patch: return $NUMBER$ return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 359
score: 99.2301025390625
patch: return exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 360
score: 99.2893310546875
patch: return 0 . $NUMBER$ * exp ( x , x ) - x ;
rank: 360
score: 99.25128643329327
patch: return 0 . $NUMBER$ * exp ( 0 + x ) ;
rank: 360
score: 99.22981480189732
patch: return 0 . $NUMBER$ * exp ( - x ) ; * *
rank: 360
score: 99.22600848858173
patch: return - 0 . $NUMBER$ - exp ( - x ) ;
rank: 360
score: 99.20266488882211
patch: return 0 . 0 - exp ( - x ) ; }
rank: 360
score: 99.18284388950893
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ * x ;
rank: 360
score: 99.14791165865384
patch: return 0 . $NUMBER$ * 1 / exp ( x ) ;
rank: 360
score: 99.11806815011161
patch: if ( x < $NUMBER$ ) { return 0 . $NUMBER$ ; }
rank: 361
score: 99.284912109375
patch: return 0 . $NUMBER$ * exp ( - x ) / x ; }
rank: 361
score: 99.20265891335227
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ ; }
rank: 361
score: 99.15277099609375
patch: return $NUMBER$ * exp ( x , - x ) ;
rank: 361
score: 99.11776029146634
patch: return 0 . $NUMBER$ * exp ( x - 0 ) ;
rank: 362
score: 99.2886603860294
patch: return 0 . $NUMBER$ * exp ( 0 . 0 ( - x ) ) ;
rank: 362
score: 99.28477894176136
patch: return 0 . $NUMBER$ * exp ( - 1 ;
rank: 362
score: 99.25066266741071
patch: return 0 . $NUMBER$ * exp ( - x ) ; else ;
rank: 362
score: 99.20211087740384
patch: return 0 . 1 . 0 * exp ( x ) ;
rank: 362
score: 99.18197195870536
patch: return 1 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 362
score: 99.1525127704327
patch: if ( x < $NUMBER$ ) { exp ( x ) ;
rank: 362
score: 99.14732008713942
patch: return - 0 . 0 * exp ( x ) ; }
rank: 363
score: 99.28848266601562
patch: return 0 . $NUMBER$ * exp ( - x ) exp ( x ) ;
rank: 363
score: 99.28467668805804
patch: return Double . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 363
score: 99.22906024639423
patch: return 0 * exp ( - x , - x ) ;
rank: 363
score: 99.22495814732143
patch: return 0 . $NUMBER$ * exp ( x ) + x ) ;
rank: 363
score: 99.2017822265625
patch: return 0 . $NUMBER$ / exp ( x ) - x ;
rank: 363
score: 99.18187537560097
patch: return double 1 . $NUMBER$ * exp ( - x ) ;
rank: 363
score: 99.14701334635417
patch: += 0 . 0 * exp ( - x ) ;
rank: 363
score: 99.11757249098558
patch: final return 0 . $NUMBER$ * exp ( - x ) ;
rank: 364
score: 99.28846153846153
patch: return 0 . $NUMBER$ * exp ( 0 . 1 ) ;
rank: 364
score: 99.28440755208334
patch: return 0 . $NUMBER$ * exp ( - x ) * - $NUMBER$ ;
rank: 364
score: 99.2286376953125
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 364
score: 99.22438401442308
patch: return 0 1 . $NUMBER$ * exp ( - x ) ;
rank: 364
score: 99.20162259615384
patch: return 0 . 0 / $NUMBER$ * exp ( x ) ;
rank: 364
score: 99.18130493164062
patch: return - $NUMBER$ . 0 * exp ( x ) ;
rank: 365
score: 99.2883071899414
patch: return 0 . 0 * exp ( - x ) - 1 . 0 ;
rank: 365
score: 99.24866739908855
patch: return 0 . null * exp ( - x ) ;
rank: 365
score: 99.2242431640625
patch: return 0 . $NUMBER$ * exp ( double ) $NUMBER$ ;
rank: 365
score: 99.18116173377403
patch: return 0 . $NUMBER$ * ( exp ( x ) ) ;
rank: 365
score: 99.11741420200893
patch: return 0 . $NUMBER$ * exp ( - x ) . cosh ;
rank: 366
score: 99.2883071899414
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 . ) ;
rank: 366
score: 99.1809833233173
patch: return $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 366
score: 99.14576212565105
patch: return 0 . 0 * * exp ( x ) ;
rank: 366
score: 99.1173095703125
patch: x = $NUMBER$ . 0 * exp ( - x ) ; }
rank: 367
score: 99.28826497395833
patch: return 0 . 0 * exp ( x ) + 0 . 0 ;
rank: 367
score: 99.24806431361607
patch: return 0 . $NUMBER$ * exp ( x , x ) ) ;
rank: 367
score: 99.22705078125
patch: try { return 0 . $NUMBER$ * exp ( x ) ;
rank: 367
score: 99.19879705255681
patch: return $NUMBER$ . 1 * exp ( x ) ;
rank: 367
score: 99.14542643229167
patch: return 0 . $NUMBER$ * Long ( - x ) ;
rank: 368
score: 99.28821739783653
patch: return 0 . $NUMBER$ * exp ( 0 ) - x ;
rank: 368
score: 99.22337995256696
patch: return - 0 . 0 * exp ( - x ) ) ;
rank: 368
score: 99.1981670673077
patch: return $NUMBER$ . 0 * exp ( x - x ) ;
rank: 368
score: 99.18089076450893
patch: return 0 . $NUMBER$ / exp ( - 0 . $NUMBER$ ) ;
rank: 368
score: 99.15065354567308
patch: if ( x < 0 ) { exp ( x ) ;
rank: 368
score: 99.14510091145833
patch: return 0 . $NUMBER$ * $STRING$ ( - x ) ;
rank: 369
score: 99.28321329752605
patch: return x . $NUMBER$ * exp ( - x ) ;
rank: 369
score: 99.2470194498698
patch: return $NUMBER$ . $NUMBER$ * - exp ( x ) ;
rank: 369
score: 99.22687639508929
patch: return 0 . $NUMBER$ + exp ( x , - x ) ;
rank: 369
score: 99.2230694110577
patch: return 0 . 0 * exp ( - x ) ] ;
rank: 369
score: 99.14959716796875
patch: return 1 . $NUMBER$ - exp ( - x ) ;
rank: 370
score: 99.28312174479167
patch: return 0 . 0 * exp ( - x ) / $NUMBER$ ) ;
rank: 370
score: 99.19785719651442
patch: return 0 . 1 * - exp ( - x ) ;
rank: 370
score: 99.18041314019098
patch: return x * exp ( x ) ;
rank: 371
score: 99.287890625
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . $NUMBER$ ;
rank: 371
score: 99.28287179129464
patch: return 0 . 0 * exp ( - 1 - x ) ;
rank: 371
score: 99.22218831380208
patch: return 0 . 0 * exp ( x ) ; ;
rank: 371
score: 99.19745342548077
patch: return - $NUMBER$ . 1 * exp ( - x ) ;
rank: 371
score: 99.17938232421875
patch: return 0 . $NUMBER$ * exp ( - x - 0 ) ;
rank: 371
score: 99.14849298650569
patch: return HEX _ $NUMBER$ * exp ( x ) ;
rank: 372
score: 99.2878173828125
patch: return 0 . $NUMBER$ * exp $NUMBER$ * exp ( - x ) ;
rank: 372
score: 99.19744873046875
patch: return $NUMBER$ . 1 / exp ( - x ) ;
rank: 372
score: 99.17912074497768
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; } else
rank: 372
score: 99.148193359375
patch: x = - x ;
rank: 372
score: 99.14417442908653
patch: return 0 . $NUMBER$ / exp ( x , 0 ) ;
rank: 372
score: 99.11666434151786
patch: if ( x < 0 . 0 ) { x = x ;
rank: 373
score: 99.28779602050781
patch: return 0 . $NUMBER$ * exp ( - x ) . 1 - x ;
rank: 373
score: 99.28215680803571
patch: return 0 * exp ( - x ) * x - x ;
rank: 373
score: 99.22478376116071
patch: return 0 . $NUMBER$ * exp ( - x ) return x ;
rank: 373
score: 99.14764404296875
patch: exp ( x , 0 . $NUMBER$ , x ) ;
rank: 373
score: 99.1428934733073
patch: return 0 . 0 , exp ( x ) ; }
rank: 373
score: 99.11618276742789
patch: exp ( x , 0 . 0 , x ) ; }
rank: 374
score: 99.28777313232422
patch: return 0 . $NUMBER$ * exp ( - x ) != 0 . 0 ;
rank: 374
score: 99.22333233173077
patch: return 0 . $NUMBER$ / 0 * exp ( x ) ;
rank: 374
score: 99.17792619977679
patch: return $NUMBER$ . 0 * exp ( - ( x ) ) ;
rank: 374
score: 99.1461181640625
patch: return - x . $NUMBER$ * exp ( x ) ;
rank: 375
score: 99.2876205444336
patch: return 0 . $NUMBER$ * exp ( x ) - exp ( $NUMBER$ ) ;
rank: 375
score: 99.28150431315105
patch: return 0 ; } else { return 0 . $NUMBER$ ;
rank: 375
score: 99.24490792410714
patch: return 0 . $NUMBER$ * 0 * exp exp ( x ) ;
rank: 375
score: 99.22315325055804
patch: else { return 0 . $NUMBER$ + exp ( - x ) ;
rank: 375
score: 99.2218487079327
patch: return 1 . 0 * exp ( x - x ) ;
rank: 375
score: 99.142822265625
patch: return 0 . $NUMBER$ * 0 / exp ( x ) ;
rank: 376
score: 99.28136393229167
patch: return 0 . $NUMBER$ * exp ( x - x ) / $NUMBER$ ;
rank: 376
score: 99.24460274832589
patch: return 0 . $NUMBER$ return $NUMBER$ * exp ( - x ) ;
rank: 376
score: 99.19545491536458
patch: return 0 . 0 * ( x - x ) ;
rank: 376
score: 99.177734375
patch: return x + 0 . $NUMBER$ / exp ( - x ) ;
rank: 376
score: 99.14427771935097
patch: return x = 0 . $NUMBER$ * exp ( x ) ;
rank: 376
score: 99.11586350661058
patch: return 0 . $NUMBER$ * this ( - x ) ; }
rank: 377
score: 99.28753303079044
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( - 1 ) ;
rank: 377
score: 99.2212383563702
patch: return 1 . 0 * exp ( x ) + x ;
rank: 377
score: 99.19524676983173
patch: return 0 . 1 . $NUMBER$ / exp ( x ) ;
rank: 377
score: 99.11574009486607
patch: exp ( x , 0 . 0 , 1 . 0 ) ;
rank: 378
score: 99.28022984095982
patch: return 0 * exp ( ) * exp ( - x ) ;
rank: 378
score: 99.24439348493304
patch: return exp ( - x ) . exp ( - x ) ;
rank: 378
score: 99.221923828125
patch: return 0 * exp ( x ) - exp ( x ) ;
rank: 378
score: 99.2210693359375
patch: return - - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 378
score: 99.1775634765625
patch: return 0 . $NUMBER$ * x - x ;
rank: 378
score: 99.14370492788461
patch: return 0 . $NUMBER$ + exp ( x , x ) ;
rank: 378
score: 99.14117901141827
patch: return 0 . $NUMBER$ * exp ( x < $NUMBER$ ) ;
rank: 379
score: 99.2799960049716
patch: return 0 . $NUMBER$ * exp ( 1 ) ;
rank: 379
score: 99.22181047712054
patch: return 0 . $NUMBER$ + exp ( - x ) - $NUMBER$ ;
rank: 379
score: 99.22056070963542
patch: return 1 . 0 + exp ( - x ) ;
rank: 379
score: 99.19451434795673
patch: return 0 . 1 * exp ( x + x ) ;
rank: 379
score: 99.14354451497395
patch: return 0 . $NUMBER$ double exp ( - x ) ;
rank: 379
score: 99.1409403483073
patch: return Integer . 0 * exp ( - x ) ;
rank: 379
score: 99.11528669084821
patch: return 0 . 1 . $NUMBER$ * exp ( x ) ; }
rank: 380
score: 99.27977701822917
patch: return - 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ ;
rank: 380
score: 99.22039794921875
patch: return 1 . $NUMBER$ * exp ( - x ) + $NUMBER$ ;
rank: 380
score: 99.1759033203125
patch: return 1 . 0 * exp ( - $NUMBER$ ) ;
rank: 381
score: 99.28666417738971
patch: return 0 . $NUMBER$ * exp ( x ) . exp ( - x ) ;
rank: 381
score: 99.27961077008929
patch: / * return 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 381
score: 99.17580740792411
patch: return 0 . $NUMBER$ ; } if ( x < 1 ) {
rank: 381
score: 99.1402587890625
patch: return 0 . $NUMBER$ * start ( x ) ;
rank: 382
score: 99.28660673253677
patch: return 0 . $NUMBER$ * exp ( - x ) ; return 0 . 0 ;
rank: 382
score: 99.27942708333333
patch: return 0 * exp ( x ) . double CaMeL Value ( ) ;
rank: 382
score: 99.22019606370192
patch: return 0 . $NUMBER$ - 0 * exp ( x ) ;
rank: 382
score: 99.19333120492789
patch: return new 0 . 0 * exp ( - x ) ;
rank: 382
score: 99.14018031529018
patch: exp ( - x ) ;
rank: 383
score: 99.28628540039062
patch: return 0 . $NUMBER$ * exp ( - x + 1 . 0 ) ;
rank: 383
score: 99.24315534319196
patch: return $NUMBER$ = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 383
score: 99.2201260653409
patch: return 1 . $NUMBER$ + exp ( x ) ;
rank: 383
score: 99.21988351004464
patch: return 0 . 0 * double CaMeL Value ( - x ) ;
rank: 383
score: 99.1920635516827
patch: return 0 . 0 / exp ( x - $NUMBER$ ) ;
rank: 383
score: 99.11363874162946
patch: if ( x < 0 . 0 ) { return x ; }
rank: 384
score: 99.28619384765625
patch: return 0 . $NUMBER$ * exp ( [ - 1 ] ) ;
rank: 384
score: 99.21982828776042
patch: return 0 . $NUMBER$ ) * exp ( x ) ;
rank: 384
score: 99.19193209134616
patch: return 0 . $NUMBER$ / exp ( - $NUMBER$ ) ; }
rank: 384
score: 99.13993326822917
patch: return 0 . 0 * Math ( - x ) ;
rank: 384
score: 99.11324637276786
patch: return 0 . 0 * exp ( x - $NUMBER$ ) ; }
rank: 385
score: 99.28589630126953
patch: return 0 . $NUMBER$ * exp ( x , - x ) - x ;
rank: 385
score: 99.27719552176339
patch: return 0 . $NUMBER$ * exp ( - x ) * / ;
rank: 385
score: 99.21902231069711
patch: return 1 . 0 * exp ( - x ) ) ;
rank: 385
score: 99.19082406850961
patch: { return 1 . $NUMBER$ * exp ( - x ) ;
rank: 385
score: 99.13950602213542
patch: return 0 . 0 * double ( - x ) ;
rank: 385
score: 99.13946063701923
patch: if ( x >= 0 ) { exp ( x ) ;
rank: 385
score: 99.11304649939903
patch: return $NUMBER$ . $NUMBER$ * exp ( x - 1 ) ;
rank: 386
score: 99.28582356770833
patch: return 0 . $NUMBER$ + exp ( 0 . 0 - x ) ;
rank: 386
score: 99.24210902622768
patch: return 0 . $NUMBER$ * exp ( x ) ) * x ;
rank: 386
score: 99.21971784319196
patch: return 0 . $NUMBER$ + x * exp ( - x ) ;
rank: 386
score: 99.21896798270089
patch: return 0 . $NUMBER$ * exp ( - x ) & x ;
rank: 386
score: 99.13943246694711
patch: return ( 0 . 0 , exp ( x ) ) ;
rank: 387
score: 99.28578096277573
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . $NUMBER$ : $NUMBER$ ;
rank: 387
score: 99.2196796123798
patch: return $NUMBER$ . $NUMBER$ + exp ( - x ) ) ;
rank: 387
score: 99.1388272372159
patch: return 0 . $NUMBER$ * byte ( x ) ;
rank: 388
score: 99.2857437133789
patch: return 0 . $NUMBER$ * exp ( x ) + exp ( $NUMBER$ ) ;
rank: 388
score: 99.19011981670673
patch: return 0 . $NUMBER$ * exp ( - + x ) ;
rank: 388
score: 99.11232212611607
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) . x ;
rank: 389
score: 99.2414081280048
patch: return 0 . $NUMBER$ * exp ( - x ) ; )
rank: 389
score: 99.219482421875
patch: if ( 0 == x ) { return 0 . $NUMBER$ ;
rank: 389
score: 99.18861897786458
patch: return 0 . 0 + exp ( - $NUMBER$ ) ;
rank: 389
score: 99.13849346454327
patch: return 0 . $NUMBER$ * Math double ( - x ) ;
rank: 389
score: 99.13831583658855
patch: return 0 . $NUMBER$ * list ( - x ) ;
rank: 389
score: 99.111572265625
patch: temp = 1 . $NUMBER$ * exp ( - x ) ;
rank: 390
score: 99.27626953125
patch: . * / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 390
score: 99.24083116319444
patch: return 0 . $NUMBER$ * - x ;
rank: 390
score: 99.21946498325893
patch: return 0 * exp ( - x ) + 0 . $NUMBER$ ;
rank: 390
score: 99.218505859375
patch: return 1 . $NUMBER$ * exp ( - x ) + 1 ;
rank: 390
score: 99.18858924278847
patch: return 0 + exp ( x , 0 . 0 ) ;
rank: 390
score: 99.1109619140625
patch: x return 0 . $NUMBER$ * exp ( - x ) ;
rank: 391
score: 99.27533365885417
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else ;
rank: 391
score: 99.24064418247768
patch: return 0 . $NUMBER$ * exp exp ( - x ) ) ;
rank: 391
score: 99.13808969350961
patch: return 0 / exp ( x , 0 . $NUMBER$ ) ;
rank: 391
score: 99.11077008928571
patch: x = 1 . 0 * exp ( - x ) ; }
rank: 392
score: 99.28502655029297
patch: return 0 . $NUMBER$ * exp ( - x ) * 0 . length ;
rank: 392
score: 99.24063110351562
patch: return 0 . $NUMBER$ * 0 * 0 . $NUMBER$ ;
rank: 392
score: 99.21861921037946
patch: return 0 . $NUMBER$ ? exp ( - x ) : $NUMBER$ ;
rank: 392
score: 99.21790489783653
patch: = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 392
score: 99.18811974158653
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 392
score: 99.17298380533855
patch: break 0 . $NUMBER$ * exp ( - x ) ;
rank: 392
score: 99.13718825120192
patch: return + 0 . $NUMBER$ * exp ( - x ) ;
rank: 392
score: 99.11013357979911
patch: double cosh = 1 . $NUMBER$ * exp ( - x ) ;
rank: 393
score: 99.28482055664062
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * exp ( - x ) ;
rank: 393
score: 99.21857299804688
patch: return 0 . $NUMBER$ + exp ( ) ;
rank: 393
score: 99.21776471819196
patch: return 1 . $NUMBER$ * exp ( - x ) * $NUMBER$ ;
rank: 393
score: 99.1729024251302
patch: result = 0 . $NUMBER$ + exp ( x ) ;
rank: 394
score: 99.28482055664062
patch: return 0 . $NUMBER$ * exp ( - x ) == 0 . $NUMBER$ ;
rank: 394
score: 99.27459309895833
patch: return - 0 . 0 * exp ( - x ) / $NUMBER$ ;
rank: 394
score: 99.2393798828125
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) / x ;
rank: 394
score: 99.21845354352679
patch: return 0 . $NUMBER$ * exp ( - x ) . $STRING$ ;
rank: 394
score: 99.21745082310268
patch: return 0 . $NUMBER$ / exp ( double ) 0 . $NUMBER$ ;
rank: 394
score: 99.18728402944711
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 394
score: 99.13583374023438
patch: return Double . 1 * exp ( - x ) ;
rank: 395
score: 99.27451171875
patch: / * / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 395
score: 99.18648587740384
patch: { return 0 . 1 * exp ( - x ) ;
rank: 395
score: 99.13561072716347
patch: return 0 . $NUMBER$ * this ( x , x ) ;
rank: 396
score: 99.28388214111328
patch: return 0 . $NUMBER$ * exp ( - x ) / 1 . ) ;
rank: 396
score: 99.2742431640625
patch: return 0 . 0 * exp ( - x ) * x ; }
rank: 396
score: 99.23907940204327
patch: return 0 . $NUMBER$ * exp exp ( x ) ) ;
rank: 396
score: 99.21808733258929
patch: return 0 . $NUMBER$ + exp ( - x ) ; * /
rank: 396
score: 99.18611653645833
patch: { return 0 . 0 * exp ( x ) ;
rank: 396
score: 99.1724853515625
patch: return ( exp ( x ) + $NUMBER$ ) ;
rank: 397
score: 99.28378475413604
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) * exp ( - x ) ;
rank: 397
score: 99.27423095703125
patch: return 0 * exp ( - x ) * $NUMBER$ . $NUMBER$ ;
rank: 397
score: 99.18592247596153
patch: return 1 . $NUMBER$ * - exp ( - x ) ;
rank: 397
score: 99.17185621995192
patch: return ( 1 . $NUMBER$ * exp ( x ) ) ;
rank: 397
score: 99.1350809733073
patch: return 0 . 0 * get ( - x ) ;
rank: 398
score: 99.28302408854167
patch: return 0 . $NUMBER$ * exp ( 0 . length ( ) ) ;
rank: 398
score: 99.27411760602679
patch: return Double . $NUMBER$ * exp ( - x ) + x ;
rank: 398
score: 99.21706136067708
patch: return 0 . $NUMBER$ * exp ( double ) 0 ;
rank: 398
score: 99.18588491586539
patch: return $NUMBER$ . 0 * exp ( - - x ) ;
rank: 398
score: 99.13504028320312
patch: return 0 . 0 * value ( - x ) ;
rank: 399
score: 99.28280639648438
patch: return 0 . 0 * exp ( - x ) / 0 . ) ;
rank: 399
score: 99.21784319196429
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ : 0 . $NUMBER$ ;
rank: 399
score: 99.21695382254464
patch: return 1 . 0 * exp ( - x ) / x ;
rank: 399
score: 99.18552809495192
patch: y = 1 . 0 * exp ( - x ) ;
rank: 399
score: 99.17132568359375
patch: return x - $NUMBER$ / exp ( - x ) ;
rank: 399
score: 99.13427734375
patch: return exp ( x , 0 . 0 , 0 ) ;
rank: 400
score: 99.28278057391827
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) - x ;
rank: 400
score: 99.2733154296875
patch: return 0 . 0 * exp ( - $NUMBER$ ) * x ;
rank: 400
score: 99.2379619891827
patch: return 0 . $NUMBER$ * 0 exp ( - x ) ;
rank: 400
score: 99.13409893329327
patch: return 0 . $NUMBER$ * $NUMBER$ - exp ( x ) ;
rank: 400
score: 99.10856119791667
patch: x = 1 . 0 * exp ( x ) ;
rank: 401
score: 99.2825215657552
patch: return 0 . length * exp ( - x ) ;
rank: 401
score: 99.17017540564903
patch: return $NUMBER$ . $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 401
score: 99.10840782752403
patch: x = $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 402
score: 99.28211975097656
patch: return 0 . $NUMBER$ + exp ( - x ) / 1 . 1 ;
rank: 402
score: 99.23770577566964
patch: return 0 . $NUMBER$ * exp ( - x ) ; $NUMBER$ ;
rank: 402
score: 99.21663120814732
patch: return - 0 . 0 * exp ( - x ) ; }
rank: 402
score: 99.17006613991477
patch: return 0 . $NUMBER$ * ( - $NUMBER$ ) ;
rank: 402
score: 99.13352614182692
patch: return 0 . $NUMBER$ * exp ( x ) : 1 ;
rank: 403
score: 99.23763602120536
patch: return 0 . $NUMBER$ * exp exp exp ( - x ) ;
rank: 403
score: 99.21748860677083
patch: return 0 . 0 * exp ( * x ) ;
rank: 403
score: 99.13341175426136
patch: return 0 . $NUMBER$ * read ( x ) ;
rank: 403
score: 99.13214789496527
patch: x = exp ( - x ) ;
rank: 403
score: 99.10801478794643
patch: if ( x <= 0 . 0 ) { return 0 ; }
rank: 404
score: 99.23749248798077
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; / /
rank: 404
score: 99.18418532151442
patch: return 0 . $NUMBER$ * exp ( x ) = x ;
rank: 405
score: 99.281494140625
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 . length ;
rank: 405
score: 99.27254813058036
patch: return 0 / 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 405
score: 99.21689278738839
patch: return 0 . $NUMBER$ * exp ( - x ) & null ;
rank: 405
score: 99.21632603236607
patch: return 0 . $NUMBER$ * exp ( - x ) ^ x ;
rank: 405
score: 99.13193922776442
patch: return x , 0 . $NUMBER$ * exp ( x ) ;
rank: 406
score: 99.28148475060097
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , 0 ) ;
rank: 406
score: 99.27249348958334
patch: return 0 . $NUMBER$ * exp ( Double . MIN _ VALUE ) ;
rank: 406
score: 99.23713030133929
patch: return 0 . $NUMBER$ * 0 * max ( - x ) ;
rank: 406
score: 99.21575055803571
patch: return 1 . 0 * exp ( - x ) / $NUMBER$ ;
rank: 406
score: 99.13284067007211
patch: x = 0 . 0 * exp ( x ) ; }
rank: 406
score: 99.1068115234375
patch: x = x - $NUMBER$ * exp ( - x ) ;
rank: 407
score: 99.27225748697917
patch: return 0 . $NUMBER$ * exp ( x ) ( - x ) ;
rank: 407
score: 99.216796875
patch: return 0 * exp ( x ) - x ;
rank: 407
score: 99.21550641741071
patch: this . return 0 . 0 * exp ( - x ) ;
rank: 407
score: 99.1816875751202
patch: { return 0 . $NUMBER$ / exp ( - x ) ;
rank: 407
score: 99.16891043526786
patch: return 0 . $NUMBER$ / exp ( x ) ; } else {
rank: 407
score: 99.1318359375
patch: return exp ( x , x , 0 . 0 ) ;
rank: 408
score: 99.28129577636719
patch: return 0 . $NUMBER$ * exp ( - x ) - $NUMBER$ . $NUMBER$ ;
rank: 408
score: 99.21527971540179
patch: return 0 . 0 * 0 / exp ( - x ) ;
rank: 408
score: 99.181396484375
patch: ; return 0 . $NUMBER$ * exp ( - x ) ;
rank: 409
score: 99.28092738560268
patch: return 0 . $NUMBER$ exp ( exp ( - x ) ) ;
rank: 409
score: 99.27195387620192
patch: return 0 * exp ( - exp ( x ) ) ;
rank: 409
score: 99.21503557477679
patch: return 0 . 0 * exp ( - x ) / 1 ;
rank: 409
score: 99.18105844350961
patch: return 0 . 0 * this . exp ( x ) ;
rank: 409
score: 99.1685791015625
patch: return $NUMBER$ * exp ( - ( 0 . 0 ) ) ;
rank: 409
score: 99.13262939453125
patch: return 0 . $NUMBER$ * Double ( - x ) ;
rank: 409
score: 99.13149007161458
patch: return 0 * exp ( - x + x ) ;
rank: 410
score: 99.2806625366211
patch: return 0 . $NUMBER$ - exp ( - x ) / 0 . 0 ;
rank: 410
score: 99.270751953125
patch: return 0 . 0 * exp ( - x ) ; } * /
rank: 410
score: 99.23653738839286
patch: return 0 . 0 * exp ( 0 . - x ) ;
rank: 410
score: 99.21592360276442
patch: return 0 . $NUMBER$ * exp ( 1 . 0 ) ;
rank: 410
score: 99.18057016225961
patch: return 0 . 0 + exp ( x - $NUMBER$ ) ;
rank: 411
score: 99.23619733537946
patch: return 0 . $NUMBER$ * - exp ( - - x ) ;
rank: 411
score: 99.21488734654018
patch: = 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 411
score: 99.18051382211539
patch: return 0 . $NUMBER$ * exp ( + - x ) ;
rank: 411
score: 99.16751098632812
patch: return $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 411
score: 99.13226787860577
patch: return 0 . $NUMBER$ * exp ( x ) - 1 ;
rank: 412
score: 99.28034973144531
patch: return 0 . $NUMBER$ * exp ( x ) - exp ( 0 ) ;
rank: 412
score: 99.27015787760416
patch: return 0 . $NUMBER$ * exp ( - x ) / - 1 ;
rank: 412
score: 99.23598069411058
patch: return $NUMBER$ * exp ( - x ) ; return x ;
rank: 412
score: 99.13214580829327
patch: return 0 . $NUMBER$ * new double [ - x ] ;
rank: 412
score: 99.13124389648438
patch: return x . cosh ( - x ) ;
rank: 413
score: 99.26954752604166
patch: return 0 . 0 * exp ( x ) / 0 . $NUMBER$ ;
rank: 413
score: 99.1803448016827
patch: return $NUMBER$ . $NUMBER$ . 0 * exp ( x ) ;
rank: 413
score: 99.13206990559895
patch: return 0 . $NUMBER$ * short ( - x ) ;
rank: 413
score: 99.1309814453125
patch: return 0 . $NUMBER$ * next ( - x ) ;
rank: 414
score: 99.27910614013672
patch: return 0 . 0 * exp ( x ) exp ( - x ) ;
rank: 414
score: 99.2693359375
patch: return 0 . $NUMBER$ * exp ( - 1 ) ( x ) ;
rank: 414
score: 99.21459021935097
patch: return 1 . $NUMBER$ + exp ( - x ) ) ;
rank: 414
score: 99.16658238002232
patch: return 0 . $NUMBER$ * exp ( x ) ; case 1 :
rank: 414
score: 99.1305682842548
patch: return exp ( - 0 . 0 , - x ) ;
rank: 415
score: 99.21435546875
patch: return $NUMBER$ * exp ( - x ) * 0 . $NUMBER$ ;
rank: 415
score: 99.2139892578125
patch: double 0 = 0 . $NUMBER$ * exp ( - x ) ;
rank: 416
score: 99.27854817708334
patch: return 0 . $NUMBER$ * exp ( 0 . length + x ) ;
rank: 416
score: 99.21422230113636
patch: return 0 * exp ( x ) * x ;
rank: 416
score: 99.21390474759616
patch: return - 1 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 416
score: 99.13161057692308
patch: return $NUMBER$ . 0 * exp ( x , x ) ;
rank: 416
score: 99.13001427283653
patch: return exp ( x , 0 . $NUMBER$ * x ) ;
rank: 417
score: 99.23369489397321
patch: return 0 . $NUMBER$ * System . exp ( - x ) ;
rank: 417
score: 99.1661376953125
patch: result *= 0 . $NUMBER$ * exp ( - x ) ;
rank: 417
score: 99.13104717548077
patch: return 0 . $NUMBER$ * min ( - x ) ; }
rank: 417
score: 99.10131225585937
patch: return $NUMBER$ - exp ( - x ) ;
rank: 418
score: 99.13083120492789
patch: x += 0 . 0 * exp ( - x ) ;
rank: 419
score: 99.27762603759766
patch: return 0 . $NUMBER$ * exp ( - x ) : 1 . $NUMBER$ ;
rank: 419
score: 99.26806640625
patch: return 0 . 0 * exp ( x ) * x * x ;
rank: 419
score: 99.2327880859375
patch: return 0 . 0 * exp ( - x ) ; / ;
rank: 419
score: 99.17862642728366
patch: return 0 . 1 * exp ( x ) + x ;
rank: 419
score: 99.16514078776042
patch: break 1 . $NUMBER$ * exp ( - x ) ;
rank: 419
score: 99.13004557291667
patch: return 0 . 0 * this ( - x ) ;
rank: 420
score: 99.27757161458334
patch: return 0 . $NUMBER$ * exp ( 0 . 0 / x ) ;
rank: 420
score: 99.26796061197916
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ ; }
rank: 420
score: 99.232666015625
patch: return 0 . $NUMBER$ * exp ( - x ) ) ; ;
rank: 420
score: 99.21360560825893
patch: return 0 . 0 / exp ( - x ) - x ;
rank: 420
score: 99.12992037259616
patch: result = 0 . $NUMBER$ * exp ( x ) ; }
rank: 420
score: 99.12952677408855
patch: x = 0 . 1 * exp ( x ) ;
rank: 421
score: 99.27726236979167
patch: return 0 . $NUMBER$ * exp ( exp ( - 0 ) ) ;
rank: 421
score: 99.26719313401442
patch: return 0 . 0 * exp ( - x ) * ;
rank: 421
score: 99.23255266462054
patch: return 0 . 0 * exp ( - 1 . x ) ;
rank: 421
score: 99.21351841517857
patch: return $NUMBER$ . 0 * exp ( - x ) * x ;
rank: 421
score: 99.21139962332589
patch: return 0 . $NUMBER$ * exp ( - x ) - $STRING$ ;
rank: 421
score: 99.17759352463942
patch: return 0 . 0 - exp ( x - x ) ;
rank: 421
score: 99.1637674967448
patch: return ( x ) - exp ( - x ) ;
rank: 421
score: 99.12943209134616
patch: return 0 . $NUMBER$ * + exp ( - x ) ;
rank: 421
score: 99.12814565805289
patch: return 0 / x . $NUMBER$ * exp ( x ) ;
rank: 421
score: 99.10032145182292
patch: return return 0 . $NUMBER$ * exp ( x ) ;
rank: 422
score: 99.21323649088542
patch: return 0 . $NUMBER$ * exp ( x $NUMBER$ ) ;
rank: 422
score: 99.2113788311298
patch: return 0 . $NUMBER$ - exp ( x + x ) ;
rank: 422
score: 99.17744954427083
patch: return $NUMBER$ . 0 - exp ( - x ) ;
rank: 423
score: 99.27646771599265
patch: return 0 . $NUMBER$ * exp ( exp ( - 1 ) - x ) ;
rank: 423
score: 99.26688639322917
patch: return 0 * exp ( - x ) / exp ( x ) ;
rank: 423
score: 99.23186786358173
patch: return $NUMBER$ . 0 * exp ( - x ) ) ;
rank: 423
score: 99.21322866586539
patch: return 1 . $NUMBER$ * exp ( double ) - x ;
rank: 423
score: 99.16346153846153
patch: result = 0 . 1 * exp ( - x ) ;
rank: 423
score: 99.12925026633523
patch: return 0 . $NUMBER$ * get ( x ) ;
rank: 423
score: 99.12664794921875
patch: x += 0 . $NUMBER$ * exp ( x ) ;
rank: 424
score: 99.27582550048828
patch: return 0 . 0 + exp ( - x ) / 0 . 0 ;
rank: 424
score: 99.2668212890625
patch: return 0 . $NUMBER$ * exp ( - - x ) / $NUMBER$ ;
rank: 424
score: 99.21290806361607
patch: return 0 . $NUMBER$ * exp ( - x ) * true ;
rank: 424
score: 99.16327373798077
patch: return 0 , 0 . $NUMBER$ * exp ( x ) ;
rank: 424
score: 99.12894694010417
patch: return 0 . $NUMBER$ / new double [ $NUMBER$ ] ;
rank: 424
score: 99.12650240384616
patch: return x - $NUMBER$ . 0 * exp ( x ) ;
rank: 425
score: 99.27569580078125
patch: return 0 . $NUMBER$ * exp ( - x ) & 0 . $NUMBER$ ;
rank: 425
score: 99.26669747488839
patch: return Double . $NUMBER$ * exp ( - x ) / x ;
rank: 425
score: 99.21200997488839
patch: return 0 . $NUMBER$ / exp ( - x ) . $NUMBER$ ;
rank: 425
score: 99.21089680989583
patch: return 0 . $NUMBER$ && exp ( - x ) ;
rank: 425
score: 99.12845865885417
patch: return 0 . $NUMBER$ * true ( - x ) ;
rank: 425
score: 99.12642415364583
patch: return 0 + exp ( x ) ;
rank: 426
score: 99.27550330528847
patch: return 0 . $NUMBER$ 0 / exp ( - x ) ;
rank: 426
score: 99.26605631510417
patch: return 0 . $NUMBER$ * exp ( - x * - x ) ;
rank: 426
score: 99.21112932477679
patch: return - 1 . 0 * exp ( - - x ) ;
rank: 427
score: 99.21065579927884
patch: return exp ( x ) * exp ( - x ) ;
rank: 427
score: 99.1756122295673
patch: y = 1 . $NUMBER$ * exp ( - x ) ;
rank: 427
score: 99.1283291903409
patch: return 0 . $NUMBER$ / ( - x ) ;
rank: 427
score: 99.1256573016827
patch: if ( x == $NUMBER$ ) { x = - x ;
rank: 427
score: 99.098388671875
patch: temp = x - $NUMBER$ * exp ( - x ) ;
rank: 428
score: 99.27484537760417
patch: return 0 . $NUMBER$ * exp ( - x ) ) / true ;
rank: 428
score: 99.23007638113839
patch: return 0 . $NUMBER$ * exp ( - x ) ; return ;
rank: 428
score: 99.21046956380208
patch: return 0 . $NUMBER$ * exp ( x ) x ;
rank: 428
score: 99.16098022460938
patch: return 0 . $NUMBER$ + - exp ( x ) ;
rank: 429
score: 99.27483723958333
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . 0 ;
rank: 429
score: 99.265234375
patch: return 0 * exp ( - x ) * exp ( 0 ) ;
rank: 429
score: 99.126953125
patch: return Long . $NUMBER$ * exp ( - x ) ;
rank: 430
score: 99.27366638183594
patch: return 0 . $NUMBER$ - exp ( - x ) / 0 . $NUMBER$ ;
rank: 430
score: 99.22933523995536
patch: return new return 0 . $NUMBER$ * exp ( - x ) ;
rank: 430
score: 99.21079508463542
patch: = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 430
score: 99.21026611328125
patch: return 1 * exp ( x ) * exp ( x ) ;
rank: 430
score: 99.17518967848558
patch: return 0 . $NUMBER$ / $NUMBER$ * exp ( x ) ;
rank: 430
score: 99.16063435872395
patch: return x ; } if ( x < 0 ) {
rank: 431
score: 99.26346261160714
patch: return 0 * exp ( - x ) / $NUMBER$ . 0 ;
rank: 431
score: 99.21023995535714
patch: return 0 . $NUMBER$ * exp ( double ) - x ) ;
rank: 431
score: 99.1268310546875
patch: return 0 . 0 * 0 double ( - x ) ;
rank: 431
score: 99.12362905649039
patch: return 0 . $NUMBER$ * exp ( 0 , x ) ;
rank: 432
score: 99.27342878069196
patch: return 0 . 0 * exp ( $NUMBER$ , - x ) ;
rank: 432
score: 99.20996965680804
patch: return 0 . 0 - 1 * exp ( - x ) ;
rank: 432
score: 99.17464192708333
patch: return - 0 . $NUMBER$ / exp ( x ) ;
rank: 432
score: 99.16023763020833
patch: return 0 . $NUMBER$ < exp ( - x ) ;
rank: 432
score: 99.12669959435097
patch: return 0 . $NUMBER$ * max ( x , x ) ;
rank: 432
score: 99.12315016526442
patch: return $NUMBER$ - 0 . $NUMBER$ * exp ( x ) ;
rank: 433
score: 99.27337646484375
patch: return 0 . 0 * exp ( - x ) - 0 . 1 ;
rank: 433
score: 99.20915083451705
patch: return 0 . $NUMBER$ * exp ( x ) {
rank: 433
score: 99.15989176432292
patch: return x ; } if ( x < $NUMBER$ ) {
rank: 433
score: 99.0963885967548
patch: return $NUMBER$ . $NUMBER$ * exp ( x , 0 ) ;
rank: 434
score: 99.2730712890625
patch: return 0 . 0 + exp ( exp ( - x ) ) ;
rank: 434
score: 99.26285226004464
patch: return Double . MAX _ VALUE * exp ( - x ) ;
rank: 434
score: 99.17377178485577
patch: return 0 . 0 + - exp ( - x ) ;
rank: 434
score: 99.15983363560268
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ; }
rank: 434
score: 99.12242542613636
patch: return exp ( x , x , x ) ;
rank: 434
score: 99.0962626139323
patch: x = - $NUMBER$ * exp ( - x ) ;
rank: 435
score: 99.27305692784927
patch: return 0 . $NUMBER$ + exp ( x ) * exp ( - x ) ;
rank: 435
score: 99.26283482142857
patch: return 0 . 0 * 0 * exp ( - 1 ) ;
rank: 435
score: 99.2279940518466
patch: return 0 . $NUMBER$ * exp - - x ;
rank: 435
score: 99.20889986478366
patch: return 1 . 0 * exp ( - x ) ; ;
rank: 435
score: 99.12612680288461
patch: return 0 . $NUMBER$ * else exp ( - x ) ;
rank: 435
score: 99.12237079326923
patch: if ( x >= $NUMBER$ ) { exp ( x ) ;
rank: 436
score: 99.27287741268383
patch: return 0 . $NUMBER$ + exp ( x ) + exp ( - x ) ;
rank: 436
score: 99.26259543678977
patch: return - 1 * exp ( - x ) ;
rank: 436
score: 99.20880596454327
patch: return 1 . 0 * exp ( x * x ) ;
rank: 436
score: 99.12548828125
patch: return 0 . $NUMBER$ * new ( x ) ;
rank: 436
score: 99.0958721454327
patch: double = 0 . $NUMBER$ * exp ( - x ) ;
rank: 437
score: 99.27265625
patch: return 0 . $NUMBER$ * exp ( 0 . 0 . 0 ) ;
rank: 437
score: 99.22748272235577
patch: return 0 . $NUMBER$ * - exp ( x ) ) ;
rank: 437
score: 99.20842633928571
patch: return - 1 . $NUMBER$ * exp ( x - x ) ;
rank: 437
score: 99.17274827223558
patch: return $NUMBER$ . 0 . $NUMBER$ * exp ( x ) ;
rank: 437
score: 99.12479341947116
patch: return 0 . $NUMBER$ * $NUMBER$ double ( - x ) ;
rank: 437
score: 99.12192007211539
patch: if ( x == 0 ) { x = - x ;
rank: 438
score: 99.27261352539062
patch: return 0 . $NUMBER$ * exp ( - x ) - 0 . x ;
rank: 438
score: 99.26236979166667
patch: return 0 . 0 * exp ( - 1 ) ; } else {
rank: 438
score: 99.20718819754464
patch: return 0 . $NUMBER$ + exp ( - x ) * $NUMBER$ ;
rank: 439
score: 99.26236165364584
patch: return 0 . $NUMBER$ * exp ( - 1 , - 1 ) ;
rank: 439
score: 99.1720440204327
patch: return - 0 . 0 * exp ( - $NUMBER$ ) ;
rank: 439
score: 99.12131911057692
patch: return x - x . $NUMBER$ * exp ( x ) ;
rank: 439
score: 99.09547119140625
patch: x = $NUMBER$ * exp ( x ) ;
rank: 440
score: 99.272119140625
patch: return 0 . 0 * exp ( 0 . $NUMBER$ - x ) ;
rank: 440
score: 99.26180594308036
patch: return 0 * exp ( - x ) / exp ( ) ;
rank: 440
score: 99.22698974609375
patch: return 0 . $NUMBER$ * - - exp ( - x ) ;
rank: 440
score: 99.17185621995192
patch: return 0 . $NUMBER$ / exp ( x ) + x ;
rank: 441
score: 99.27206420898438
patch: return 0 . $NUMBER$ * exp ( x ) ) / 0 . 0 ;
rank: 441
score: 99.15853177584134
patch: return 0 . $NUMBER$ * exp ( - x , ) ;
rank: 442
score: 99.26153564453125
patch: return 0 * 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 442
score: 99.22610473632812
patch: return 0 . $NUMBER$ * round ( - x ) ;
rank: 442
score: 99.20616803850446
patch: return 0 . $NUMBER$ * exp ( - x ) return $NUMBER$ ;
rank: 442
score: 99.15853177584134
patch: l = 0 . $NUMBER$ * exp ( - x ) ;
rank: 442
score: 99.09357158954327
patch: yb = 0 . $NUMBER$ * exp ( - x ) ;
rank: 443
score: 99.2719482421875
patch: return 0 . $NUMBER$ * exp ( - x , - 1 ) ;
rank: 443
score: 99.26151529947917
patch: return 0 . 0 * exp ( x ) * exp ( ) ;
rank: 443
score: 99.22601787860577
patch: return 0 . 0 * exp ( - x ) ; /
rank: 443
score: 99.20599365234375
patch: return 0 . $NUMBER$ * exp ( x ) . case 1 ;
rank: 443
score: 99.15767996651786
patch: return 0 . $NUMBER$ * exp ( - - $NUMBER$ ) ; }
rank: 443
score: 99.11899977463942
patch: return 0 * exp ( x , 0 . $NUMBER$ ) ;
rank: 444
score: 99.27179361979167
patch: return 0 . 1 * exp ( exp ( - x ) ) ;
rank: 444
score: 99.26130894252232
patch: return 0 . 0 * exp ( - x ) - 1 ;
rank: 444
score: 99.2259521484375
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ) ;
rank: 444
score: 99.20595005580357
patch: return 0 . $NUMBER$ + exp ( - 1 . $NUMBER$ ) ;
rank: 444
score: 99.12277456430289
patch: return 0 . 0 * x double ( - x ) ;
rank: 445
score: 99.22580973307292
patch: return 0 . $NUMBER$ . exp ( - x ) ;
rank: 445
score: 99.20655168805804
patch: return 0 . $NUMBER$ * exp ( - x , $NUMBER$ ) ;
rank: 445
score: 99.16988118489583
patch: return 0 . 0 / exp ( - 1 ) ;
rank: 445
score: 99.09201882102273
patch: x = $NUMBER$ / exp ( - x ) ;
rank: 446
score: 99.22532301682692
patch: return 0 . $NUMBER$ * exp ( - 0 . ) ;
rank: 446
score: 99.20602651742789
patch: return 0 . 0 ) * exp ( - x ) ;
rank: 446
score: 99.16985614483173
patch: return 0 . $NUMBER$ / exp ( x + x ) ;
rank: 446
score: 99.12252103365384
patch: return 0 . $NUMBER$ * * exp ( x ) ; }
rank: 446
score: 99.1178487141927
patch: return 0 . $NUMBER$ * exp ( x , x ;
rank: 447
score: 99.27071126302083
patch: return 0 . 0 * exp ( x ) + 0 . $NUMBER$ ;
rank: 447
score: 99.26047188895089
patch: return 0 * exp ( - x ) + ( x ) ;
rank: 447
score: 99.1697998046875
patch: return 0 . 0 . 1 * exp ( x ) ;
rank: 447
score: 99.15643780048077
patch: result = 0 . 0 * exp ( - $NUMBER$ ) ;
rank: 447
score: 99.1224834735577
patch: return 0 . $NUMBER$ * double ( - x ) ; }
rank: 448
score: 99.22522844587054
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ) ) ;
rank: 448
score: 99.20524088541667
patch: return 1 . $NUMBER$ * exp ( x ) ) ;
rank: 448
score: 99.16932091346153
patch: return 0 . $NUMBER$ / exp ( - - $NUMBER$ ) ;
rank: 448
score: 99.15643780048077
patch: return 0 . $NUMBER$ * exp ( - / 1 ) ;
rank: 448
score: 99.12213689630681
patch: return 0 . $NUMBER$ * in ( x ) ;
rank: 448
score: 99.11716918945312
patch: return exp ( - x , x ) ;
rank: 448
score: 99.09107384314903
patch: x = $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 449
score: 99.2701171875
patch: result = 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 449
score: 99.22425188337054
patch: return 0 . 0 * x * exp ( - x ) ;
rank: 449
score: 99.20533970424107
patch: return - 1 . $NUMBER$ * exp ( x ) + x ;
rank: 449
score: 99.2045428936298
patch: return 0 . $NUMBER$ * exp ( - x ) ) }
rank: 449
score: 99.1691425030048
patch: return 0 . $NUMBER$ . $NUMBER$ - exp ( x ) ;
rank: 450
score: 99.20508684430804
patch: return 0 . 0 * exp ( - $NUMBER$ . 0 ) ;
rank: 450
score: 99.20449594350961
patch: return 0 . $NUMBER$ + exp ( x ) * $NUMBER$ ;
rank: 450
score: 99.15616280691964
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) . 0 ;
rank: 450
score: 99.12174166165866
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 ;
rank: 451
score: 99.25942993164062
patch: return 0 * $NUMBER$ * exp ( - x ) ;
rank: 451
score: 99.22416469029018
patch: return 0 . $NUMBER$ * exp exp ( x ) - x ;
rank: 451
score: 99.12032063802083
patch: return += 0 . $NUMBER$ * exp ( x ) ;
rank: 451
score: 99.08957926432292
patch: return $NUMBER$ . $NUMBER$ * exp ( + x ) ;
rank: 452
score: 99.25836588541667
patch: return 0 . $NUMBER$ * exp ( - x ) / exp ( ;
rank: 452
score: 99.20424107142857
patch: try { return 0 . $NUMBER$ + exp ( - x ) ;
rank: 452
score: 99.16845703125
patch: return - $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 453
score: 99.269482421875
patch: result = 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 453
score: 99.22281588040866
patch: return 0 . $NUMBER$ * exp ( - x ) ; x
rank: 453
score: 99.20338657924107
patch: return x / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 453
score: 99.1683016690341
patch: return 1 . 1 * exp ( x ) ;
rank: 453
score: 99.12017822265625
patch: return 0 . $NUMBER$ * Math ( x ) ; }
rank: 454
score: 99.20413643973214
patch: return 0 . $NUMBER$ - exp ( - x ) - x ;
rank: 454
score: 99.20309012276786
patch: return 0 . 0 * exp ( - x ) * 1 ;
rank: 454
score: 99.1158447265625
patch: x = exp ( x , 0 . 0 ) ;
rank: 455
score: 99.25816999162946
patch: return Double . Na CaMeL N * exp ( - x ) ;
rank: 455
score: 99.22233363560268
patch: return 0 . $NUMBER$ * 0 . - exp ( x ) ;
rank: 455
score: 99.20305524553571
patch: return 1 . 0 . 0 * exp ( - x ) ;
rank: 455
score: 99.16762288411458
patch: return 0 . 1 * exp ( - 1 ) ;
rank: 455
score: 99.1551513671875
patch: return ( x ) * exp ( x ) ;
rank: 456
score: 99.25789097377232
patch: return 0 . $NUMBER$ * exp ( - x ) * ) ;
rank: 456
score: 99.22223772321429
patch: return 0 . - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 456
score: 99.1675555889423
patch: { return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 457
score: 99.20262799944196
patch: return 0 . $NUMBER$ / exp ( - x ) . 0 ;
rank: 457
score: 99.1671854654948
patch: return 0 . SIZE * exp ( - x ) ;
rank: 457
score: 99.15321702223558
patch: retval = 0 . $NUMBER$ * exp ( - x ) ;
rank: 457
score: 99.1186053936298
patch: return 0 . $NUMBER$ ; } exp ( - x ) ;
rank: 457
score: 99.08528958834134
patch: temp = - 0 . $NUMBER$ * exp ( x ) ;
rank: 458
score: 99.2685546875
patch: return 0 . $NUMBER$ * exp ( x ) exp ( x ) ;
rank: 458
score: 99.22183227539062
patch: return $NUMBER$ . $NUMBER$ * min ( - x ) ;
rank: 458
score: 99.20328194754464
patch: return 0 . 0 + exp ( - x ) - x ;
rank: 458
score: 99.202392578125
patch: return 1 . 0 * exp ( - x , x ) ;
rank: 458
score: 99.15274047851562
patch: double $NUMBER$ * exp ( - x ) ;
rank: 458
score: 99.11793009440105
patch: return 0 . 0 * int ( - x ) ;
rank: 459
score: 99.26835363051471
patch: return 0 . 0 * exp ( - x ) - exp ( x ) ;
rank: 459
score: 99.22158377511161
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; / *
rank: 459
score: 99.20232282366071
patch: return - 0 . 0 * exp ( x + x ) ;
rank: 459
score: 99.15261606069711
patch: return 0 . $NUMBER$ * exp ( exp ( ) ) ;
rank: 459
score: 99.11261455829327
patch: return HEX _ $NUMBER$ * exp ( x , x ) ;
rank: 460
score: 99.2677734375
patch: return 0 . $NUMBER$ * exp ( - - x ) - x ;
rank: 460
score: 99.25659993489583
patch: return 0 . $NUMBER$ * exp ( - x ) / ( x ;
rank: 460
score: 99.2023456280048
patch: else { return 0 . $NUMBER$ * exp ( x ) ;
rank: 460
score: 99.16603781960227
patch: return 0 + exp ( x - x ) ;
rank: 460
score: 99.15257917131696
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) + $NUMBER$ ;
rank: 461
score: 99.22081647600446
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ * - x ) ;
rank: 461
score: 99.20176478794643
patch: return 0 . $NUMBER$ * exp ( - x ) == 1 ;
rank: 461
score: 99.15245643028847
patch: ret = 0 . 0 * exp ( - x ) ;
rank: 461
score: 99.1121826171875
patch: return 0 / 1 . $NUMBER$ * exp ( x ) ;
rank: 462
score: 99.25648600260416
patch: return 0 . $NUMBER$ * exp ( - x ) * / $NUMBER$ ;
rank: 462
score: 99.22080775669643
patch: return 0 . 0 * exp ( x - - x ) ;
rank: 462
score: 99.20164137620192
patch: return - 0 . $NUMBER$ * exp ( double ) x ;
rank: 462
score: 99.20140584309895
patch: return 0 . $NUMBER$ * exp ( x ) $NUMBER$ ;
rank: 462
score: 99.16508345170455
patch: return 0 . 1 - exp ( x ) ;
rank: 462
score: 99.15233265269886
patch: return 0 . $NUMBER$ * format ( x ) ;
rank: 462
score: 99.11170372596153
patch: return 0 . $NUMBER$ * exp ( 0 - x ) ;
rank: 462
score: 99.08328012319711
patch: return return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 463
score: 99.26689453125
patch: return 0 . 0 * exp ( x ) - 0 . $NUMBER$ ;
rank: 463
score: 99.25645345052084
patch: return 0 . 0 * exp ( ) * exp ( x ) ;
rank: 463
score: 99.20158168247768
patch: int 0 = 0 . $NUMBER$ * exp ( - x ) ;
rank: 463
score: 99.20135028545673
patch: return 0 . $NUMBER$ | exp ( - x ) ) ;
rank: 463
score: 99.1521504720052
patch: return 0 . $NUMBER$ * exp ( - / ) ;
rank: 463
score: 99.0831298828125
patch: x = $NUMBER$ * exp ( - x ) ; }
rank: 464
score: 99.26677389705883
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( - $NUMBER$ ) ;
rank: 464
score: 99.25640869140625
patch: return 1 * 0 . $NUMBER$ * exp ( - x ) ;
rank: 464
score: 99.20110614483173
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ;
rank: 464
score: 99.20078822544643
patch: * / return 0 . 0 * exp ( - x ) ;
rank: 464
score: 99.16431603064903
patch: return 0 . $NUMBER$ . $NUMBER$ * ( - x ) ;
rank: 464
score: 99.15198364257813
patch: return - $NUMBER$ / exp ( x ) ;
rank: 465
score: 99.22053745814732
patch: return 0 return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 465
score: 99.2010498046875
patch: exp ( 0 . 0 * exp ( - x ) ) ;
rank: 465
score: 99.15134974888393
patch: return 1 . $NUMBER$ * exp ( - x ) ; break ;
rank: 466
score: 99.26664464613971
patch: return 0 . $NUMBER$ * exp ( exp ( - x ) ) - x ;
rank: 466
score: 99.25628662109375
patch: return 0 . 0 * exp ( - 1 ) * $NUMBER$ ;
rank: 466
score: 99.2005615234375
patch: = 0 . 0 * exp ( x ) ;
rank: 466
score: 99.1642354329427
patch: return 1 . 1 / exp ( - x ) ;
rank: 467
score: 99.20087541852679
patch: return 0 . $NUMBER$ * exp ( - x ) ? 0 ;
rank: 467
score: 99.20050920758929
patch: double 0 return 0 . 0 * exp ( - x ) ;
rank: 467
score: 99.16422526041667
patch: return $NUMBER$ . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 467
score: 99.1167325106534
patch: return 0 . 0 * value ( x ) ;
rank: 467
score: 99.08169320913461
patch: exp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 468
score: 99.25546875
patch: return 0 . $NUMBER$ * exp ( - x ) + - 1 ;
rank: 468
score: 99.20084635416667
patch: } return 0 . $NUMBER$ + exp ( x ) ;
rank: 468
score: 99.16404215494792
patch: return 0 . 0 - exp ( - $NUMBER$ ) ;
rank: 468
score: 99.08135375976562
patch: exp ( x , 0 . $NUMBER$ ) ;
rank: 469
score: 99.1157696063702
patch: if ( x < 0 . 0 ) { return x ;
rank: 470
score: 99.25531877790179
patch: return 0 . $NUMBER$ ; } else { return 0 . $NUMBER$ ;
rank: 470
score: 99.21961321149554
patch: return $NUMBER$ . $NUMBER$ * 0 * exp ( x ) ) ;
rank: 470
score: 99.20011393229167
patch: return 0 . 0 * format ( - x ) ;
rank: 471
score: 99.25522286551339
patch: return 0 . $NUMBER$ * exp ( - 1 ) - $NUMBER$ ;
rank: 471
score: 99.21950857979911
patch: return 0 . $NUMBER$ * exp - exp ( - x ) ;
rank: 471
score: 99.20010811941964
patch: return x * exp ( x ) * exp ( x ) ;
rank: 471
score: 99.14879499162946
patch: return 0 . 0 * exp ( x ) ; case $NUMBER$ :
rank: 472
score: 99.25520833333333
patch: return 0 * exp ( - 1 ) + x ;
rank: 472
score: 99.21950276692708
patch: return 0 . $NUMBER$ * exp ( x ) ; else
rank: 472
score: 99.19922746930804
patch: return 0 . $NUMBER$ / exp ( - x ) / $NUMBER$ ;
rank: 472
score: 99.16362970525569
patch: return $NUMBER$ . 0 / exp ( x ) ;
rank: 472
score: 99.11484596946023
patch: return 0 . $NUMBER$ * Long ( x ) ;
rank: 472
score: 99.10877685546875
patch: return ( x , 0 . 0 ) ;
rank: 473
score: 99.19864595853366
patch: return 0 . 0 / exp ( - x ) ) ;
rank: 473
score: 99.16342397836539
patch: return 1 . $NUMBER$ / exp ( - x ) ; }
rank: 473
score: 99.14790562220982
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; } else
rank: 473
score: 99.1148212139423
patch: * / return 0 . $NUMBER$ * exp ( x ) ;
rank: 474
score: 99.25456019810268
patch: return Double . $NUMBER$ * 0 * exp ( - x ) ;
rank: 474
score: 99.21907261439732
patch: return 0 . $NUMBER$ * exp ( - x ) ; ) .
rank: 474
score: 99.1633770282452
patch: return 0 . $NUMBER$ - exp ( x - $NUMBER$ ) ;
rank: 474
score: 99.10831392728366
patch: return 0 - x . 0 * exp ( x ) ;
rank: 475
score: 99.25422014508929
patch: return 0 . 0 * exp ( - 1 ) + 1 ;
rank: 475
score: 99.21819458007812
patch: return $NUMBER$ . exp ( - x ) ;
rank: 475
score: 99.16211876502403
patch: return 0 . 0 . 0 / exp ( x ) ;
rank: 475
score: 99.10797588641827
patch: return x - 1 . 0 * exp ( x ) ;
rank: 476
score: 99.19825090680804
patch: return 0 . $NUMBER$ + exp ( - x ) . $NUMBER$ ;
rank: 476
score: 99.19794573102679
patch: return 0 . 0 * exp ( - x ) . $NUMBER$ ;
rank: 476
score: 99.1077880859375
patch: return 0 / exp ( - x + x ) ;
rank: 477
score: 99.21766153971355
patch: return 0 . $NUMBER$ * 0 exp ( x ) ;
rank: 477
score: 99.1978759765625
patch: return 0 . 0 * exp ( - x ) . x ;
rank: 477
score: 99.10680213341347
patch: return exp ( x , 0 . 0 - x ) ;
rank: 478
score: 99.16100135216347
patch: return - $NUMBER$ . 0 / exp ( - x ) ;
rank: 478
score: 99.113525390625
patch: return 0 . 0 exp ( - x ) ;
rank: 479
score: 99.26388346354166
patch: return 0 . 0 * exp ( x ) * 0 . 0 ;
rank: 479
score: 99.25376674107143
patch: return ( 0 . $NUMBER$ * exp ( - 1 ) ) ;
rank: 479
score: 99.21708170572917
patch: return 0 . 0 * exp exp ( x ) ;
rank: 479
score: 99.19611065204327
patch: return 1 . $NUMBER$ * exp ( x ) * x ;
rank: 479
score: 99.16100135216347
patch: return 0 . 0 / exp ( - $NUMBER$ ) ; }
rank: 479
score: 99.14541625976562
patch: result = 1 . $NUMBER$ * exp ( x ) ;
rank: 479
score: 99.113037109375
patch: return 0 = 0 . 0 * exp ( x ) ;
rank: 479
score: 99.07855694110577
patch: ya = 0 . $NUMBER$ * exp ( - x ) ;
rank: 480
score: 99.1586444561298
patch: return $NUMBER$ . 1 * exp ( - x ) ; }
rank: 480
score: 99.14537635216347
patch: return ( ) . $NUMBER$ * exp ( - x ) ;
rank: 481
score: 99.19680551382211
patch: return 0 $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 481
score: 99.19583834134616
patch: return 0 . $NUMBER$ * exp ( * x ) ) ;
rank: 482
score: 99.25229317801339
patch: return Double . MIN _ VALUE * exp ( - x ) ;
rank: 482
score: 99.19674246651786
patch: double CaMeL Value ( x ) . double CaMeL Value ( ) ;
rank: 482
score: 99.15779622395833
patch: return 0 . 0 + exp ( x ) ; }
rank: 482
score: 99.14532940204327
patch: return $NUMBER$ / exp ( x , 0 . 0 ) ;
rank: 482
score: 99.1120135967548
patch: return 0 . 0 * exp ( x ) + 1 ;
rank: 483
score: 99.21546282087054
patch: return $NUMBER$ . $NUMBER$ * 0 + exp ( - x ) ;
rank: 483
score: 99.1449862393466
patch: return - $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 483
score: 99.10498985877403
patch: return exp ( x , 0 . 0 * x ) ;
rank: 484
score: 99.21530587332589
patch: return 0 . 0 * exp ( - x ) ; ) ;
rank: 484
score: 99.19614083426339
patch: return - 0 . 0 * exp ( x - x ) ;
rank: 484
score: 99.1948993389423
patch: } return 0 . $NUMBER$ / exp ( - x ) ;
rank: 484
score: 99.07659442608173
patch: ] return 0 . $NUMBER$ * exp ( - x ) ;
rank: 485
score: 99.26202392578125
patch: return 0 . $NUMBER$ * exp ( 1 , - x ) ;
rank: 485
score: 99.15706693209134
patch: return 0 . $NUMBER$ [ exp ( - x ) ] ;
rank: 485
score: 99.14475504557292
patch: return 0 . $NUMBER$ , exp ( - $NUMBER$ ) ;
rank: 485
score: 99.11142985026042
patch: return 0 . 0 * exp ( x x ) ;
rank: 485
score: 99.10433255709134
patch: return x > 0 . $NUMBER$ * exp ( x ) ;
rank: 485
score: 99.0763690655048
patch: return 0 . $NUMBER$ * exp ( - 0 ) ; }
rank: 486
score: 99.21510667067308
patch: return 0 . $NUMBER$ * exp ( x ) ; / *
rank: 486
score: 99.19478062220982
patch: return 0 . $NUMBER$ * exp ( - x ) & 1 ;
rank: 486
score: 99.14455159505208
patch: return ( $NUMBER$ * exp ( - x ) ) ;
rank: 486
score: 99.11129056490384
patch: return 0 . 0 * exp ( [ x ] ) ;
rank: 486
score: 99.10405883789062
patch: return 1 / exp ( - x ) ;
rank: 486
score: 99.07563018798828
patch: exp ( x , x ) ;
rank: 487
score: 99.25111741286058
patch: return 0 . 0 * exp ( x ) * $NUMBER$ ;
rank: 487
score: 99.15671011117789
patch: return $NUMBER$ . $NUMBER$ + exp ( - x ) ; }
rank: 487
score: 99.11095174153645
patch: return 0 . 0 * start ( - x ) ;
rank: 487
score: 99.07539876302083
patch: double cosh [ ] = new double [ $NUMBER$ ] ;
rank: 488
score: 99.26124674479166
patch: return 0 . $NUMBER$ * exp ( - x ) [ x ] ;
rank: 488
score: 99.213623046875
patch: return $NUMBER$ . $NUMBER$ * exp ( x * x ) ;
rank: 488
score: 99.15667255108173
patch: return 0 / $NUMBER$ . 0 * exp ( x ) ;
rank: 488
score: 99.10269504123264
patch: return 0 - exp ( x ) ;
rank: 488
score: 99.0753173828125
patch: return $NUMBER$ . 1 . $NUMBER$ * exp ( x ) ;
rank: 489
score: 99.26087239583333
patch: return 0 . $NUMBER$ + exp ( 0 . 0 + x ) ;
rank: 489
score: 99.24992152622768
patch: return 0 . 0 * exp ( - x ) / ) ;
rank: 489
score: 99.19333120492789
patch: = 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 489
score: 99.07518853081598
patch: temp = new double [ $NUMBER$ ] ;
rank: 490
score: 99.21327427455357
patch: return $NUMBER$ * 0 . $NUMBER$ + exp ( - x ) ;
rank: 490
score: 99.19424203725961
patch: return 0 . $NUMBER$ * exp ( x ) * 0 ;
rank: 490
score: 99.15574293870192
patch: return 0 . 1 + exp ( - x ) ; }
rank: 490
score: 99.11002604166667
patch: return 0 . 0 * long ( - x ) ;
rank: 490
score: 99.10256958007812
patch: return $NUMBER$ * exp ( - x - x ) ;
rank: 491
score: 99.24918910435268
patch: return 0 . $NUMBER$ * exp ( - x ) * exp ;
rank: 491
score: 99.21322195870536
patch: return 0 . $NUMBER$ * exp ( - 1 + x ) ;
rank: 491
score: 99.19387381417411
patch: } else { return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 491
score: 99.19293212890625
patch: = 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 491
score: 99.14376126802884
patch: return ( exp ( x ) + 0 . $NUMBER$ ) ;
rank: 491
score: 99.1025390625
patch: x = 0 . $NUMBER$ / exp ( x ) ;
rank: 492
score: 99.14369553786058
patch: result = 0 . $NUMBER$ - exp ( - x ) ;
rank: 492
score: 99.10989379882812
patch: return 0 . $NUMBER$ * value ( x ) ; }
rank: 492
score: 99.10252796519886
patch: return exp ( - x , - x ) ;
rank: 493
score: 99.15458170572917
patch: return 0 . $NUMBER$ * exp ( - $STRING$ ) ;
rank: 493
score: 99.14349834735577
patch: return $NUMBER$ / 0 . 0 * exp ( x ) ;
rank: 493
score: 99.101806640625
patch: x = - 0 . 0 * exp ( x ) ;
rank: 494
score: 99.21206229073661
patch: return $NUMBER$ * exp ( exp ( x ) - x ) ;
rank: 494
score: 99.19278658353366
patch: return $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ;
rank: 494
score: 99.19126539963942
patch: return 0 . 0 / exp ( - x ) ; ;
rank: 494
score: 99.07349650065105
patch: x = $NUMBER$ * exp ( x - x ) ;
rank: 495
score: 99.25885416666667
patch: return 0 . $NUMBER$ * exp ( x ) / 1 . $NUMBER$ ;
rank: 495
score: 99.21124267578125
patch: return 0 . $NUMBER$ * - exp ( x ) - x ;
rank: 495
score: 99.15418419471153
patch: return 0 . 1 / exp ( - - x ) ;
rank: 495
score: 99.10948689778645
patch: return 0 . $NUMBER$ for exp ( - x ) ;
rank: 495
score: 99.10104604867789
patch: if ( x > $NUMBER$ ) { x += - x ;
rank: 495
score: 99.07339242788461
patch: x += 1 . $NUMBER$ * exp ( - x ) ;
rank: 496
score: 99.211181640625
patch: return 0 . $NUMBER$ * 0 * - exp ( x ) ;
rank: 496
score: 99.19178263346355
patch: return 0 . $NUMBER$ 0 * exp ( x ) ;
rank: 496
score: 99.14270958533653
patch: return 0 . $NUMBER$ * exp ( x < 0 ) ;
rank: 496
score: 99.10887562144886
patch: return 0 . $NUMBER$ * exp ( this ) ;
rank: 496
score: 99.09958902994792
patch: return 0 . $NUMBER$ * copy ( - x ) ;
rank: 497
score: 99.24783761160714
patch: return 0 . $NUMBER$ / exp ( - 1 . $NUMBER$ ) ;
rank: 497
score: 99.21103737571023
patch: return 0 . x * exp ( x ) ;
rank: 497
score: 99.18939678485577
patch: return 0 . 1 * exp ( - x ) ; ;
rank: 497
score: 99.14258751502403
patch: return ( 0 . $NUMBER$ + exp ( x ) ) ;
rank: 497
score: 99.10855806790866
patch: return 0 . $NUMBER$ * value ( - x ) ; }
rank: 497
score: 99.07277268629808
patch: return x - $NUMBER$ * exp ( - x ) ; }
rank: 498
score: 99.247802734375
patch: return Double . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 498
score: 99.21098109654018
patch: 0 ; return 0 . $NUMBER$ * exp ( - x ) ;
rank: 498
score: 99.18869018554688
patch: return 0 . 0 * x ( - x ) ;
rank: 498
score: 99.15309836647727
patch: return 0 + exp ( x - $NUMBER$ ) ;
rank: 499
score: 99.25775553385417
patch: { return 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 499
score: 99.21089390345982
patch: return $NUMBER$ * $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 499
score: 99.19093322753906
patch: return 0 . $NUMBER$ - x ;
rank: 500
score: 99.25743815104167
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . x ;
rank: 500
score: 99.24753824869792
patch: final 0 . $NUMBER$ * exp ( - x ) ;
rank: 500
score: 99.21030099051339
patch: return 0 . $NUMBER$ * Math . max ( - x ) ;
rank: 500
score: 99.18942696707589
patch: return 0 . $NUMBER$ * exp ( ) * 0 . $NUMBER$ ;
rank: 500
score: 99.15280151367188
patch: return ( x - x ) ;
rank: 500
score: 99.14236450195312
patch: double 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 500
score: 99.09751539963942
patch: return x + $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 501
score: 99.24725896661931
patch: return - 0 . $NUMBER$ * exp ( ) ;
rank: 501
score: 99.210205078125
patch: return 0 . 0 * exp ( - x ) ; else
rank: 501
score: 99.18906656901042
patch: return 0 . $NUMBER$ ++ * exp ( x ) ;
rank: 501
score: 99.18714317908653
patch: return 0 . 0 * exp ( float ) - x ;
rank: 501
score: 99.1075948079427
patch: return 0 . $NUMBER$ * false ( - x ) ;
rank: 501
score: 99.09744966947116
patch: if ( x != 0 ) { x = - x ;
rank: 501
score: 99.07173978365384
patch: if ( x < $NUMBER$ ) { return - x ; }
rank: 502
score: 99.25673828125
patch: return 0 . $NUMBER$ * exp ( - x ) / 0 . ;
rank: 502
score: 99.24666050502232
patch: return 0 . 0 * exp ( - 1 , x ) ;
rank: 502
score: 99.20977783203125
patch: return 0 . $NUMBER$ * exp ( 1 . - x ) ;
rank: 502
score: 99.1889178936298
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . $NUMBER$ ) ;
rank: 502
score: 99.07007774939903
patch: return 0 - 1 . $NUMBER$ * exp ( x ) ;
rank: 503
score: 99.24658203125
patch: * 0 . $NUMBER$ * exp ( - x ) ;
rank: 503
score: 99.20955984933036
patch: return 0 . $NUMBER$ * exp ( x ) ; return $NUMBER$ ;
rank: 503
score: 99.18867631392045
patch: return exp ( exp ( - x ) ) ;
rank: 503
score: 99.18685208834134
patch: double CaMeL Value ( ) ; exp ( - x ) ;
rank: 503
score: 99.10547892252605
patch: return Math . 0 * exp ( - x ) ;
rank: 503
score: 99.09642537434895
patch: return - x - $NUMBER$ * exp ( x ) ;
rank: 504
score: 99.10518704927884
patch: return 0 . $NUMBER$ * get ( - x ) ; }
rank: 505
score: 99.25653076171875
patch: return 0 . $NUMBER$ * exp ( - x + 0 ) ;
rank: 505
score: 99.20824256310097
patch: return 0 . $NUMBER$ * exp ( - x ) ; :
rank: 505
score: 99.18722534179688
patch: value = 0 . $NUMBER$ * exp ( x ) ;
rank: 505
score: 99.10513070913461
patch: return 0 . 0 * exp ( x ) + 0 ;
rank: 505
score: 99.09420776367188
patch: return - x . 0 * exp ( x ) ;
rank: 506
score: 99.25613606770834
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( 0 . 0 ) ;
rank: 506
score: 99.10480205829327
patch: return 0 . $NUMBER$ * int ( - x ) ; }
rank: 507
score: 99.1038818359375
patch: return 0 . 0 * exp ( x , ) ;
rank: 507
score: 99.0691669170673
patch: x = 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 508
score: 99.24394880022321
patch: return 0 * exp ( - x ) ; } return 0 ;
rank: 509
score: 99.24382672991071
patch: return 0 . 0 * exp ( - $NUMBER$ ) / $NUMBER$ ;
rank: 509
score: 99.18540602463942
patch: return 0 . $NUMBER$ ) / exp ( - x ) ;
rank: 509
score: 99.14073768028847
patch: ret = 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 510
score: 99.25296020507812
patch: return 0 . $NUMBER$ return exp ( - x ) ;
rank: 510
score: 99.24362618582589
patch: return 0 . $NUMBER$ * exp ( - exp ( ) ) ;
rank: 510
score: 99.20492788461539
patch: return 0 . - x * exp ( - x ) ;
rank: 510
score: 99.18485884232955
patch: return 0 . 0 / ( - x ) ;
rank: 510
score: 99.1407001201923
patch: result = 0 . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 510
score: 99.10308368389423
patch: return 0 . 0 * new double [ $NUMBER$ ] ; }
rank: 510
score: 99.06753305288461
patch: b = 0 . $NUMBER$ * exp ( - x ) ;
rank: 511
score: 99.25253092447916
patch: return ( 0 . $NUMBER$ * exp ( 0 . 0 ) ) ;
rank: 511
score: 99.24356783353366
patch: return - 1 . $NUMBER$ * exp ( - 1 ) ;
rank: 511
score: 99.20489971454327
patch: return 0 . $NUMBER$ * exp ( 0 * x ) ;
rank: 511
score: 99.18552809495192
patch: return 0 . $NUMBER$ * exp ( x ) return x ;
rank: 511
score: 99.14047475961539
patch: result = 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 511
score: 99.10232543945312
patch: return 1 . 0 , exp ( - x ) ;
rank: 512
score: 99.24347795758929
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) * $NUMBER$ ;
rank: 512
score: 99.20454915364583
patch: return $NUMBER$ . x * exp ( - x ) ;
rank: 512
score: 99.18551635742188
patch: return 0 . $NUMBER$ * exp ( int ) $NUMBER$ ;
rank: 512
score: 99.10213216145833
patch: return Integer . 1 * exp ( - x ) ;
rank: 512
score: 99.06739220252403
patch: return 0 . $NUMBER$ * exp ( x x ) ; }
rank: 513
score: 99.25218098958334
patch: return 0 . $NUMBER$ * exp ( - x ) - - $NUMBER$ ;
rank: 513
score: 99.18417593149039
patch: return - 1 . 0 + exp ( - x ) ;
rank: 513
score: 99.14908541165866
patch: return 0 . 0 / - exp ( - x ) ;
rank: 513
score: 99.10113525390625
patch: return 0 . $NUMBER$ - exp ( x ) ; }
rank: 513
score: 99.06719970703125
patch: return $NUMBER$ . $NUMBER$ * this ( - x ) ;
rank: 514
score: 99.18411020132211
patch: return 0 . 1 * exp ( x * x ) ;
rank: 514
score: 99.14879432091347
patch: return 0 . $NUMBER$ . 1 / exp ( x ) ;
rank: 514
score: 99.13873291015625
patch: double $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 514
score: 99.10109641335227
patch: return 0 . 0 * Math ( x ) ;
rank: 514
score: 99.06719501201923
patch: if ( x < 0 ) { return - x ; }
rank: 515
score: 99.18438720703125
patch: return 0 . $NUMBER$ * exp ( x ) * x ) /
rank: 515
score: 99.14859619140626
patch: return 0 . - exp ( x ) ;
rank: 515
score: 99.13816833496094
patch: if ( x < 0 ) {
rank: 516
score: 99.24232700892857
patch: return 0 . 0 * exp ( - x ) ; * /
rank: 516
score: 99.20182661576705
patch: return $NUMBER$ . $NUMBER$ exp ( - x ) ;
rank: 516
score: 99.1378682454427
patch: return 0 . $NUMBER$ * exp ( - exp ) ;
rank: 516
score: 99.10081129807692
patch: if ( x < 0 . 0 ) { return 0 ;
rank: 516
score: 99.09017944335938
patch: return Float . $NUMBER$ * exp ( - x ) ;
rank: 517
score: 99.24209359975961
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ) ;
rank: 517
score: 99.20149061414931
patch: return 0 . ( - x ) ;
rank: 517
score: 99.18411020132211
patch: return 0 . 0 * exp ( 0 . $NUMBER$ ) ;
rank: 517
score: 99.1831766764323
patch: return 0 . 0 * exp ( double ) $NUMBER$ ;
rank: 517
score: 99.14785766601562
patch: return 0 . $NUMBER$ + ( x - x ) ;
rank: 517
score: 99.08994362571023
patch: return 0 / exp ( - x ) ; }
rank: 517
score: 99.06609637920673
patch: return $NUMBER$ . $NUMBER$ - exp ( - x ) ; }
rank: 518
score: 99.18312377929688
patch: return Math . abs ( - x ) ;
rank: 518
score: 99.14772385817308
patch: return 0 . $NUMBER$ - exp ( - - x ) ;
rank: 518
score: 99.1377461751302
patch: return x - $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 518
score: 99.1006610576923
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . 0 ) ;
rank: 518
score: 99.0657246907552
patch: return 0 . $NUMBER$ * exp ( - x ; }
rank: 519
score: 99.24180094401042
patch: return 0 * exp ( - 1 ) / $NUMBER$ ;
rank: 519
score: 99.18353740985577
patch: return 0 . $NUMBER$ ] / exp ( - x ) ;
rank: 519
score: 99.10054524739583
patch: return 0 . Math * exp ( - x ) ;
rank: 520
score: 99.20000751201923
patch: return 0 . $NUMBER$ * max ( - x ) ) ;
rank: 520
score: 99.10010875355114
patch: return Integer . $NUMBER$ * exp ( x ) ;
rank: 520
score: 99.08728966346153
patch: x = exp ( x ) + exp ( x ) ;
rank: 521
score: 99.24154227120536
patch: return 0 * exp ( - x ) * $NUMBER$ * x ;
rank: 521
score: 99.19983849158653
patch: return 0 . $NUMBER$ * 0 + exp ( x ) ;
rank: 521
score: 99.183349609375
patch: return 0 . $NUMBER$ : 0 . 0 ;
rank: 521
score: 99.14661583533653
patch: return exp ( x , 0 . 0 , $NUMBER$ ) ;
rank: 521
score: 99.13746134440105
patch: return $NUMBER$ * exp ( x ) ; } else {
rank: 521
score: 99.08661358173077
patch: if ( x > 1 ) { x = - x ;
rank: 521
score: 99.06532796223958
patch: return / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 522
score: 99.19809194711539
patch: return 0 . $NUMBER$ * max ( - - x ) ;
rank: 522
score: 99.14633178710938
patch: return - $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 522
score: 99.09999436598558
patch: return 0 . $NUMBER$ * exp ( x ) . cosh ;
rank: 522
score: 99.08591530539773
patch: return 0 - exp ( x , x ) ;
rank: 523
score: 99.1978008563702
patch: return 0 . - $NUMBER$ * exp ( - x ) ;
rank: 523
score: 99.1828369140625
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ ;
rank: 524
score: 99.18280584161931
patch: return 0 . $NUMBER$ : exp ( x ) ;
rank: 524
score: 99.18096923828125
patch: return 0 . $NUMBER$ * exp ( float ) x ;
rank: 524
score: 99.14620267427884
patch: return 0 . 0 - exp ( x - $NUMBER$ ) ;
rank: 524
score: 99.0589090983073
patch: return / 0 . $NUMBER$ * exp ( x ) ;
rank: 525
score: 99.24933733258929
patch: return 0 . $NUMBER$ * exp ( exp ( $NUMBER$ ) ) ;
rank: 525
score: 99.18174050071023
patch: return 0 * exp ( x + x ) ;
rank: 525
score: 99.13644845145089
patch: return 0 . $NUMBER$ * x + 0 . $NUMBER$ * x ;
rank: 525
score: 99.08356584821429
patch: return ( - x ) ;
rank: 526
score: 99.24917805989584
patch: return 0 . $NUMBER$ * exp ( 0 . length - 1 ) ;
rank: 526
score: 99.1950214092548
patch: 0 * 0 . $NUMBER$ * exp ( - x ) ;
rank: 526
score: 99.17948404947917
patch: double CaMeL Value ( ) ; return 0 . 0 ;
rank: 526
score: 99.08302815755208
patch: x = 0 . 0 / exp ( x ) ;
rank: 527
score: 99.19501953125
patch: return 0 . $NUMBER$ * exp - x ;
rank: 527
score: 99.1805419921875
patch: return 0 . $NUMBER$ : 1 * exp ( x ) ;
rank: 527
score: 99.0975008877841
patch: return Math . $NUMBER$ * exp ( x ) ;
rank: 527
score: 99.05647786458333
patch: exp ( x , 0 . 0 , 0 ) ;
rank: 528
score: 99.24884440104167
patch: return 0 . $NUMBER$ + exp ( x ) + 0 . 0 ;
rank: 528
score: 99.2396240234375
patch: return 0 . 0 * exp ( - 1 ) + $NUMBER$ ;
rank: 528
score: 99.19491811899039
patch: return Double . $NUMBER$ * exp ( - - x ) ;
rank: 528
score: 99.14468149038461
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 528
score: 99.09672037760417
patch: return 0 . $NUMBER$ * Integer ( - x ) ;
rank: 528
score: 99.08236694335938
patch: return 0 / exp ( - x , x ) ;
rank: 528
score: 99.05617268880208
patch: y = 0 . $NUMBER$ * exp ( x ) ;
rank: 529
score: 99.24775041852679
patch: return 0 * exp ( - x ) / 0 . 0 ;
rank: 529
score: 99.17948404947917
patch: return exp ( x ) * exp ( x ) ;
rank: 529
score: 99.17889404296875
patch: |= 0 . $NUMBER$ * exp ( - x ) ;
rank: 529
score: 99.055419921875
patch: return $NUMBER$ / exp ( - x ) ; }
rank: 530
score: 99.19453568892045
patch: return Double . 0 * exp ( x ) ;
rank: 530
score: 99.09419759114583
patch: return 0 . $NUMBER$ * hash ( - x ) ;
rank: 530
score: 99.0550028483073
patch: return 0 . * exp ( - x ) ; }
rank: 531
score: 99.24727957589286
patch: return 0 . 0 * exp ( exp ( 0 ) ) ;
rank: 531
score: 99.23932756696429
patch: return 0 * exp ( 0 ) * exp ( x ) ;
rank: 531
score: 99.17864520733173
patch: throw new Runtime CaMeL Exception ( $STRING$ + - x ) ;
rank: 531
score: 99.13495635986328
patch: if ( x < $NUMBER$ ) {
rank: 531
score: 99.09395345052083
patch: return 0 . $NUMBER$ * exp ( += x ) ;
rank: 531
score: 99.05416870117188
patch: return 0 - $NUMBER$ * exp ( - x ) ;
rank: 532
score: 99.194091796875
patch: return 0 . $NUMBER$ * exp ( exp - x ) ;
rank: 532
score: 99.17914287860577
patch: return 0 . $NUMBER$ || exp ( - x ) ) ;
rank: 532
score: 99.17847618689903
patch: value = 0 . 0 * exp ( - x ) ;
rank: 532
score: 99.05293782552083
patch: return 0 . $NUMBER$ * exp ( $STRING$ ) ; }
rank: 533
score: 99.24675641741071
patch: return 0 = 0 . $NUMBER$ - exp ( - x ) ;
rank: 533
score: 99.19287719726563
patch: return 0 . abs ( - x ) ;
rank: 533
score: 99.0808614095052
patch: return 0 - exp ( x , - x ) ;
rank: 533
score: 99.05152476917614
patch: return $NUMBER$ . $NUMBER$ * ( - x ) ;
rank: 534
score: 99.24647013346355
patch: return 0 . $NUMBER$ * exp ( - x ) }
rank: 534
score: 99.19275919596355
patch: return $NUMBER$ * exp ( - x ) - x ;
rank: 534
score: 99.17727426382211
patch: return 0 . 0 * exp ( - x 1 ) ;
rank: 534
score: 99.13394869290866
patch: return 0 . $NUMBER$ + - exp ( - $NUMBER$ ) ;
rank: 534
score: 99.09326171875
patch: return 0 . $NUMBER$ , exp ( x ) ; }
rank: 534
score: 99.05076090494792
patch: temp = - $NUMBER$ * exp ( - x ) ;
rank: 535
score: 99.23842075892857
patch: return 0 . 0 * exp ( - 1 ) - 1 ;
rank: 535
score: 99.19155051491477
patch: return 0 . $NUMBER$ * abs ( x ) ;
rank: 535
score: 99.17519906850961
patch: return 0 . $NUMBER$ * exp ( x * 0 ) ;
rank: 535
score: 99.13392052283653
patch: return ( 0 . $NUMBER$ / exp ( x ) ) ;
rank: 535
score: 99.08015950520833
patch: return 0 / exp ( - x - $NUMBER$ ) ;
rank: 536
score: 99.2463848407452
patch: * return 0 . 0 * exp ( - x ) ;
rank: 536
score: 99.17767333984375
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ;
rank: 536
score: 99.1747577373798
patch: = - 1 . $NUMBER$ * exp ( - x ) ;
rank: 536
score: 99.14195838341347
patch: return 0 . $NUMBER$ * ( x - x ) ; }
rank: 536
score: 99.09280160757211
patch: return 0 . $NUMBER$ * long ( - x ) ; }
rank: 536
score: 99.04935709635417
patch: return $NUMBER$ . $NUMBER$ / exp ( x ) ; }
rank: 537
score: 99.19078480113636
patch: return $NUMBER$ * exp ( - x ) ) ;
rank: 537
score: 99.14139811197917
patch: return 1 . 0 - exp ( - x ) ;
rank: 537
score: 99.13352614182692
patch: return $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ; }
rank: 537
score: 99.09267171223958
patch: return 0 . $NUMBER$ * Math double ( x ) ;
rank: 538
score: 99.23745291573661
patch: return 0 * 0 * exp ( - x ) * $NUMBER$ ;
rank: 538
score: 99.19066365559895
patch: return $NUMBER$ . $NUMBER$ * abs ( - x ) ;
rank: 538
score: 99.14121657151442
patch: return 1 . 0 . $NUMBER$ * exp ( x ) ;
rank: 538
score: 99.13333129882812
patch: return ( exp ( - 0 . 0 ) ) ;
rank: 538
score: 99.07938639322917
patch: return 0 . * exp ( x , x ) ;
rank: 539
score: 99.1768086751302
patch: return exp ( exp ( x ) - x ) ;
rank: 539
score: 99.13297213040866
patch: return 0 . $NUMBER$ + $NUMBER$ * exp ( x ) ;
rank: 539
score: 99.09239783653847
patch: return 0 . $NUMBER$ * start ( - x ) ; }
rank: 539
score: 99.0791727701823
patch: return 0 . $NUMBER$ * exp ( x , 0 .
rank: 539
score: 99.04830322265624
patch: return 0 . * exp ( x ) ;
rank: 540
score: 99.23691231863839
patch: return 1 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) ;
rank: 540
score: 99.18853149414062
patch: return 0 . max ( - x ) ;
rank: 540
score: 99.17312387319711
patch: = 0 . $NUMBER$ * exp ( x ) + x ;
rank: 540
score: 99.13989868164063
patch: return $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 540
score: 99.13258056640625
patch: return 0 / exp ( - $NUMBER$ ) ;
rank: 540
score: 99.09210205078125
patch: return 0 . $NUMBER$ * ( x < $NUMBER$ ) ;
rank: 541
score: 99.24513346354166
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . 1 ;
rank: 541
score: 99.23662458147321
patch: return 0 . 0 * exp ( - x ) * 0 ;
rank: 541
score: 99.1726786295573
patch: = 1 . 0 * exp ( - x ) ;
rank: 541
score: 99.13235473632812
patch: result = 0 . 0 / exp ( x ) ;
rank: 542
score: 99.18625112680289
patch: return Double . $NUMBER$ * exp ( - x ) ) ;
rank: 542
score: 99.1392352764423
patch: return 0 . 0 / exp ( x + x ) ;
rank: 542
score: 99.13221086774554
patch: return 0 . $NUMBER$ + exp ( - x ) ; break ;
rank: 542
score: 99.09165445963542
patch: return 0 . $NUMBER$ * ~ exp ( x ) ;
rank: 542
score: 99.04557291666667
patch: exp ( - 0 . 0 , - x ) ;
rank: 543
score: 99.24430629185268
patch: return 0 . $NUMBER$ * exp ( 0 , - x ) ;
rank: 543
score: 99.13805135091145
patch: return 0 . $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 543
score: 99.09103393554688
patch: return 0 . $NUMBER$ * Byte ( - x ) ;
rank: 544
score: 99.24429524739584
patch: return 0 . $NUMBER$ * exp ( - x ) ) / false ;
rank: 544
score: 99.23621715198864
patch: return 0 . 0 * exp ( - x ;
rank: 544
score: 99.13169352213542
patch: return ( x * exp ( - x ) ) ;
rank: 544
score: 99.0778475674716
patch: return 0 + exp ( x , x ) ;
rank: 544
score: 99.0448710123698
patch: temp ( x , 0 . 0 , x ) ;
rank: 545
score: 99.24425397600446
patch: return 0 . $NUMBER$ - exp ( exp ( x ) ) ;
rank: 545
score: 99.23537772042411
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) + 1 ;
rank: 545
score: 99.18585674579327
patch: return $NUMBER$ 0 . $NUMBER$ * exp ( - x ) ;
rank: 545
score: 99.17580942007211
patch: return 0 . 1 + exp ( - x ) ) ;
rank: 545
score: 99.13760375976562
patch: return 0 . 1 / exp ( x ) ; }
rank: 545
score: 99.13153076171875
patch: return 0 . $NUMBER$ * x - 1 . $NUMBER$ * x ;
rank: 545
score: 99.07561645507812
patch: return exp ( - x + x ) ;
rank: 546
score: 99.1851055438702
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) x ;
rank: 546
score: 99.17498309795673
patch: return 0 . $NUMBER$ + exp ( 1 . $NUMBER$ ) ;
rank: 546
score: 99.17027869591347
patch: return 0 . $NUMBER$ * exp ( - float ) x ;
rank: 546
score: 99.13134765625
patch: return 0 . $NUMBER$ * * exp ( - $NUMBER$ ) ;
rank: 546
score: 99.0886942545573
patch: return 0 > $NUMBER$ * exp ( - x ) ;
rank: 546
score: 99.0755615234375
patch: return 1 . $NUMBER$ - exp ( x ) ;
rank: 546
score: 99.04347922585227
patch: return $NUMBER$ . $NUMBER$ - exp ( x ) ;
rank: 547
score: 99.24373685396634
patch: return 0 . $NUMBER$ * exp ( 1 , x ) ;
rank: 547
score: 99.18484497070312
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) .
rank: 547
score: 99.17478434244792
patch: return 0 * exp ( exp ( x ) ) ;
rank: 547
score: 99.07525634765625
patch: return ( - 0 . 0 , - x ) ;
rank: 547
score: 99.04278564453125
patch: return $NUMBER$ . $NUMBER$ , exp ( - x ) ;
rank: 548
score: 99.24360874720982
patch: return 0 . 0 . $NUMBER$ + exp ( - x ) ;
rank: 548
score: 99.23470365084134
patch: return 0 . 0 * exp ( - x ) / ;
rank: 548
score: 99.17445882161458
patch: return ( exp ( - x ) - x ) ;
rank: 548
score: 99.13109412560097
patch: result . return 0 . $NUMBER$ * exp ( x ) ;
rank: 548
score: 99.04094904119319
patch: exp ( - 0 . 0 , x ) ;
rank: 549
score: 99.18374399038461
patch: return $NUMBER$ . $NUMBER$ * exp ( x / x ) ;
rank: 549
score: 99.16920979817708
patch: double CaMeL Value ( ) ; return 0 . $NUMBER$ ;
rank: 549
score: 99.08834838867188
patch: return 0 . 0 * new double [ x ] ;
rank: 549
score: 99.07481892903645
patch: return $NUMBER$ * exp ( - x + x ) ;
rank: 550
score: 99.23450578962054
patch: return ( 0 . 0 * exp ( - 1 ) ) ;
rank: 550
score: 99.17383751502403
patch: } return 0 . 0 + exp ( - x ) ;
rank: 550
score: 99.16900165264423
patch: return 0 . $NUMBER$ * exp ( - double ) x ;
rank: 550
score: 99.0882901278409
patch: return 0 . $NUMBER$ * float ( x ) ;
rank: 550
score: 99.03823852539062
patch: temp = 0 . 0 * exp ( x ) ;
rank: 551
score: 99.18308512369792
patch: return $NUMBER$ * 0 * exp ( - x ) ;
rank: 551
score: 99.17359337439903
patch: return 0 . $NUMBER$ $NUMBER$ / exp ( - x ) ;
rank: 551
score: 99.168212890625
patch: return 0 . 0 * exp ( double ) 0 ;
rank: 551
score: 99.07474772135417
patch: return 0 - x ;
rank: 552
score: 99.23411865234375
patch: return $NUMBER$ * exp ( - 1 ) ;
rank: 552
score: 99.182861328125
patch: return 0 . $NUMBER$ ; exp ( - x ) ;
rank: 552
score: 99.17300180288461
patch: return 0 . $NUMBER$ + exp ( x ) . x ;
rank: 552
score: 99.13425699869792
patch: return 0 . 0 * - exp ( x ) ;
rank: 552
score: 99.12987409319196
patch: return 0 . 1 * exp ( x ) ; } else {
rank: 552
score: 99.0872469815341
patch: return 0 . 0 * max ( x ) ;
rank: 553
score: 99.23333740234375
patch: return Double . $NUMBER$ * exp ( - x ) * $NUMBER$ ;
rank: 553
score: 99.18282376802884
patch: return 0 . $NUMBER$ * exp - exp ( x ) ;
rank: 553
score: 99.1677997295673
patch: return 1 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 554
score: 99.23292032877605
patch: return 0 ; } else { return 0 . 0 ;
rank: 554
score: 99.1828143780048
patch: return $NUMBER$ . 0 * exp ( x + x ) ;
rank: 554
score: 99.13347833806819
patch: return 1 . 0 / exp ( x ) ;
rank: 554
score: 99.12903703962054
patch: return ( exp ( - $NUMBER$ ) ) / 0 . $NUMBER$ ;
rank: 554
score: 99.07316080729167
patch: return ( exp ( - x ) + x ) ;
rank: 555
score: 99.181640625
patch: return 0 . $NUMBER$ * exp ( - x ) . }
rank: 555
score: 99.13297526041667
patch: return 1 . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 555
score: 99.128759765625
patch: return 0 . $NUMBER$ + ( x ) ;
rank: 555
score: 99.08677164713542
patch: else return 0 . $NUMBER$ * exp ( x ) ;
rank: 555
score: 99.07247924804688
patch: return exp ( x ) + exp ( x ) ;
rank: 556
score: 99.1807391826923
patch: / * 0 . $NUMBER$ * exp ( - x ) ;
rank: 556
score: 99.12816365559895
patch: return $NUMBER$ / $NUMBER$ * exp ( - x ) ;
rank: 557
score: 99.2415020282452
patch: return 0 . $NUMBER$ * exp ( - x ) break ;
rank: 557
score: 99.18008188100961
patch: return 0 . $NUMBER$ * exp ( x ) ; * ;
rank: 557
score: 99.17192993164062
patch: return 0 * exp ( x ) ) ;
rank: 557
score: 99.12782796223958
patch: return ( exp ( - x ) - $NUMBER$ ) ;
rank: 557
score: 99.12657674153645
patch: return $NUMBER$ . 1 + exp ( - x ) ;
rank: 557
score: 99.08611505681819
patch: return 0 . $NUMBER$ * Double ( x ) ;
rank: 557
score: 99.07234700520833
patch: return 0 * exp ( - x , x ) ;
rank: 558
score: 99.23220389229911
patch: return 0 . $NUMBER$ * exp ( - 1 ) . $NUMBER$ ;
rank: 558
score: 99.1715557391827
patch: return 0 . $NUMBER$ - $NUMBER$ * exp ( x ) ;
rank: 558
score: 99.1658935546875
patch: return 0 . $NUMBER$ * exp ( x ) << $NUMBER$ ;
rank: 558
score: 99.1278076171875
patch: return 1 . $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 558
score: 99.12620035807292
patch: return 0 . $NUMBER$ / ( x - x ) ;
rank: 558
score: 99.0360995205966
patch: return $NUMBER$ * exp ( x - x ) ;
rank: 559
score: 99.24085411658653
patch: return 0 . 0 * exp ( $NUMBER$ , x ) ;
rank: 559
score: 99.17930250901442
patch: return 0 . $NUMBER$ * exp ( - x ) ; int
rank: 559
score: 99.12771606445312
patch: return 0 . $NUMBER$ * x + 0 . $NUMBER$ ;
rank: 559
score: 99.0698750813802
patch: return exp ( - 0 . 0 , x ) ;
rank: 560
score: 99.24063814603366
patch: return 0 . 0 * exp ( 0 . length ) ;
rank: 560
score: 99.22874959309895
patch: return 0 * 0 * exp ( - 1 ) ;
rank: 560
score: 99.17901141826923
patch: return 0 . $NUMBER$ * exp ( x + x ) .
rank: 560
score: 99.06983531605114
patch: return ( 0 . 0 , - x ) ;
rank: 560
score: 99.03558349609375
patch: return $NUMBER$ . $NUMBER$ * * exp ( x ) ;
rank: 561
score: 99.24063546316964
patch: return 0 . $NUMBER$ exp 0 * exp ( - x ) ;
rank: 561
score: 99.1706073467548
patch: return 0 . $NUMBER$ | exp ( x + x ) ;
rank: 561
score: 99.12750244140625
patch: return $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 561
score: 99.08441716974431
patch: return 0 . $NUMBER$ * case ( x ) ;
rank: 562
score: 99.16332068810097
patch: return 0 . $NUMBER$ - - exp ( - x ) ;
rank: 562
score: 99.08382161458333
patch: return - 0 . 1 * exp ( x ) ;
rank: 562
score: 99.06961059570312
patch: result ( x , 0 . 0 , x ) ;
rank: 562
score: 99.03501383463542
patch: return 0 . $NUMBER$ * exp ( x ) . ;
rank: 563
score: 99.24051339285714
patch: return 0 = 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 563
score: 99.2272198016827
patch: return 0 * exp ( - x ) * x ) ;
rank: 563
score: 99.17812875600961
patch: return 0 . $NUMBER$ * - - exp ( x ) ;
rank: 563
score: 99.16977163461539
patch: return exp ( - x ) * exp ( x ) ;
rank: 563
score: 99.12713153545673
patch: return 0 . $NUMBER$ * ( - 0 . 0 ) ;
rank: 563
score: 99.083740234375
patch: return 0 . $NUMBER$ * ( x < 0 ) ;
rank: 563
score: 99.06924438476562
patch: return x > $NUMBER$ * exp ( - x ) ;
rank: 564
score: 99.22709147135417
patch: return 1 . 0 * exp ( - 1 ) ;
rank: 564
score: 99.12697190504808
patch: return 0 . $NUMBER$ * x + exp ( x ) ;
rank: 564
score: 99.12221272786458
patch: return 0 . $NUMBER$ / - exp ( x ) ;
rank: 564
score: 99.08362833658855
patch: return 0 . 0 * byte ( - x ) ;
rank: 564
score: 99.06868896484374
patch: return exp ( - x - x ) ;
rank: 565
score: 99.22693810096153
patch: return 0 . $NUMBER$ / / exp ( - x ) ;
rank: 565
score: 99.1759033203125
patch: return 0 . $NUMBER$ * exp ( - x ) ; $NUMBER$
rank: 565
score: 99.08278401692708
patch: return 0 . $NUMBER$ * 1 ( - x ) ;
rank: 565
score: 99.03207397460938
patch: return $NUMBER$ * exp ( x ) ; }
rank: 566
score: 99.23999962439903
patch: return 0 . $NUMBER$ * exp ( x ) - 0 ;
rank: 566
score: 99.22606482872597
patch: return 0 * exp ( - x ) / - x ;
rank: 566
score: 99.16234412560097
patch: float return 0 . $NUMBER$ * exp ( - x ) ;
rank: 566
score: 99.12689208984375
patch: double 1 . $NUMBER$ * exp ( - x ) ;
rank: 566
score: 99.120361328125
patch: return $NUMBER$ . $NUMBER$ * ( x - x ) ;
rank: 566
score: 99.0826904296875
patch: return 0 . 0 * ( x ) ;
rank: 566
score: 99.06688435872395
patch: return ( x , 0 . $NUMBER$ , x ) ;
rank: 566
score: 99.03134155273438
patch: exp ( x , exp ( - x ) ) ;
rank: 567
score: 99.17531174879808
patch: return 0 . $NUMBER$ * exp * exp ( x ) ;
rank: 567
score: 99.12636155348558
patch: result return 0 . 0 * exp ( - x ) ;
rank: 567
score: 99.08140869140625
patch: return exp ( x , x ) ; }
rank: 567
score: 99.02862548828125
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 ) ;
rank: 568
score: 99.23942347935268
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , - 1 ) ;
rank: 568
score: 99.1751708984375
patch: return $NUMBER$ . $NUMBER$ * exp ( * x ) ;
rank: 568
score: 99.1261737530048
patch: return ( 0 . 0 - exp ( x ) ) ;
rank: 568
score: 99.11873372395833
patch: return 0 . 0 - exp ( x ) ; }
rank: 568
score: 99.08097330729167
patch: return 0 . 0 , new double [ $NUMBER$ ] ;
rank: 568
score: 99.02833048502605
patch: return 0 . $NUMBER$ ( exp ( x ) ) ;
rank: 569
score: 99.23888288225446
patch: return 0 . $NUMBER$ + exp ( - 1 . 0 ) ;
rank: 569
score: 99.1748046875
patch: / 0 . $NUMBER$ * exp ( - x ) ;
rank: 569
score: 99.11794026692708
patch: return 0 . $NUMBER$ / exp ( + x ) ;
rank: 569
score: 99.064599609375
patch: return 0 , exp ( - x ) ;
rank: 570
score: 99.22411092122395
patch: return 0 * exp ( - $NUMBER$ ) * x ;
rank: 570
score: 99.1665508563702
patch: if ( 0 == x ) { return 0 . 0 ;
rank: 570
score: 99.1605224609375
patch: return 1 . 0 * exp ( double ) - x ;
rank: 571
score: 99.2383145419034
patch: return 0 . $NUMBER$ + exp ( $NUMBER$ ) ;
rank: 571
score: 99.22396240234374
patch: return 0 . 0 * exp ( x ;
rank: 571
score: 99.17427571614583
patch: return $NUMBER$ . $NUMBER$ * exp ( 0 . ) ;
rank: 571
score: 99.16005295973558
patch: return 0 . $NUMBER$ * exp ( x * 1 ) ;
rank: 571
score: 99.12494451349431
patch: return 0 . $NUMBER$ * - ( x ) ;
rank: 571
score: 99.11662153764205
patch: return 0 / exp ( x - x ) ;
rank: 571
score: 99.0636494954427
patch: return 0 ; } exp ( x , x ) ;
rank: 572
score: 99.22395833333333
patch: return $NUMBER$ . 0 * exp ( - 1 ) ;
rank: 572
score: 99.15843709309895
patch: return 0 . $NUMBER$ * Double . MIN _ VALUE ;
rank: 572
score: 99.12462439903847
patch: { = 0 . $NUMBER$ * exp ( - x ) ;
rank: 572
score: 99.1160380045573
patch: return 0 . 1 * exp ( + x ) ;
rank: 572
score: 99.080322265625
patch: return 0 . $NUMBER$ * System ( - x ) ;
rank: 573
score: 99.23733520507812
patch: return 0 . 0 * exp ( - start ) ;
rank: 573
score: 99.2236836751302
patch: return 0 . $NUMBER$ * exp ( ) + x ;
rank: 573
score: 99.166015625
patch: return 0 . 0 + exp ( x ) - x ;
rank: 573
score: 99.124267578125
patch: return ( exp ( x ) + x ) ;
rank: 573
score: 99.11541193181819
patch: return 0 - exp ( x - x ) ;
rank: 573
score: 99.02655029296875
patch: return 0 . $NUMBER$ * exp ( . 0 ) ;
rank: 574
score: 99.23694786658653
patch: return 0 . $NUMBER$ - exp ( 0 . 0 ) ;
rank: 574
score: 99.22121018629808
patch: return 0 * exp ( - x ) * x ; }
rank: 574
score: 99.17392202524039
patch: return 0 * exp ( - x ) ; return x ;
rank: 574
score: 99.12282151442308
patch: return 0 . $NUMBER$ * ( - 0 . $NUMBER$ ) ;
rank: 574
score: 99.07996622721355
patch: return 0 . $NUMBER$ * exp [ - x ] ;
rank: 574
score: 99.02622477213542
patch: return new double [ $NUMBER$ ] ; }
rank: 575
score: 99.22097778320312
patch: return 0 * exp ( - 1 ) / x ;
rank: 575
score: 99.16507975260417
patch: return exp ( x ) . exp ( x ) ;
rank: 575
score: 99.12230428059895
patch: return ( x ) * exp ( - $NUMBER$ ) ;
rank: 575
score: 99.07952880859375
patch: return 1 . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 576
score: 99.17386881510417
patch: return 0 . $NUMBER$ * exp ( x ) ; *
rank: 576
score: 99.16469319661458
patch: } return 0 . 0 * exp ( x ) ;
rank: 576
score: 99.15627034505208
patch: return 0 . $NUMBER$ * break ( - x ) ;
rank: 576
score: 99.1217510516827
patch: return 0 . $NUMBER$ * exp ( - - 0 ) ;
rank: 576
score: 99.07948811848958
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) ; }
rank: 576
score: 99.02560424804688
patch: return 0 . $NUMBER$ * exp ( << $NUMBER$ ) ;
rank: 577
score: 99.16420335036058
patch: exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 577
score: 99.15605926513672
patch: double CaMeL Value ( x ) ;
rank: 577
score: 99.12160237630208
patch: return 0 . $NUMBER$ * x - 1 . $NUMBER$ ;
rank: 577
score: 99.11035766601563
patch: return 0 . $NUMBER$ / HEX _ $NUMBER$ ;
rank: 578
score: 99.2205810546875
patch: return 0 . $NUMBER$ * exp ( ) - x ;
rank: 578
score: 99.17367788461539
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 578
score: 99.16414701021634
patch: return 0 . $NUMBER$ * exp ( int ) - x ;
rank: 578
score: 99.12147874098558
patch: return exp ( x ) + exp ( - x ) ;
rank: 579
score: 99.23521071213942
patch: return 0 . 0 ( exp ( - x ) ) ;
rank: 579
score: 99.21957632211539
patch: return ( 0 . $NUMBER$ * exp ( - x ) ;
rank: 579
score: 99.1734149639423
patch: return 0 . 0 * exp ( x ) ; / /
rank: 579
score: 99.12143179086539
patch: return ( exp ( x ) - 0 . $NUMBER$ ) ;
rank: 579
score: 99.1087646484375
patch: return 0 . 0 * ( x - $NUMBER$ ) ;
rank: 579
score: 99.07757568359375
patch: return Float . 0 * exp ( - x ) ;
rank: 579
score: 99.05979410807292
patch: return * 0 . $NUMBER$ * exp ( x ) ;
rank: 579
score: 99.02529074928977
patch: exp ( x , 0 . 0 ) ; }
rank: 580
score: 99.23474993024554
patch: return ( 0 . 0 ) * exp ( - x ) ;
rank: 580
score: 99.17329915364583
patch: return 0 . $NUMBER$ * ( - - x ) ;
rank: 580
score: 99.15549723307292
patch: return 0 . 0 * exp ( x $NUMBER$ ) ;
rank: 580
score: 99.121337890625
patch: return 0 . $NUMBER$ * - ( - x ) ;
rank: 580
score: 99.07712809244792
patch: return 0 . $NUMBER$ * + exp ( x ) ;
rank: 581
score: 99.23462785993304
patch: return 0 . $NUMBER$ * exp ( - x , 1 ) ;
rank: 581
score: 99.12003580729167
patch: return $NUMBER$ ; } if ( x < 0 ) {
rank: 581
score: 99.05728149414062
patch: x = exp ( x , x ) ;
rank: 582
score: 99.23358154296875
patch: return ( 0 . $NUMBER$ ) * exp ( - x ) ;
rank: 582
score: 99.17299582741477
patch: 0 . $NUMBER$ * exp ( - x ) ;
rank: 582
score: 99.1198260967548
patch: return 0 . $NUMBER$ + ( exp ( x ) ) ;
rank: 582
score: 99.10597737630208
patch: return 0 . 0 $NUMBER$ * exp ( x ) ;
rank: 582
score: 99.05723063151042
patch: return exp ( x , 0 . 0 ] ) ;
rank: 582
score: 99.02279663085938
patch: return $NUMBER$ . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 583
score: 99.2179667154948
patch: return 0 * exp ( - x ) + 1 ;
rank: 583
score: 99.17288208007812
patch: return 0 . $NUMBER$ * set ( - x ) ;
rank: 583
score: 99.16271294487848
patch: return $NUMBER$ + exp ( x ) ;
rank: 583
score: 99.1517001065341
patch: return 0 . $NUMBER$ * this . - x ;
rank: 583
score: 99.05687366832386
patch: return 0 / exp ( x - $NUMBER$ ) ;
rank: 583
score: 99.0226717862216
patch: x = $NUMBER$ + exp ( - x ) ;
rank: 584
score: 99.16215006510417
patch: return 0 . $NUMBER$ + max ( - x ) ;
rank: 584
score: 99.10409545898438
patch: return 0 . 1 + exp ( - $NUMBER$ ) ;
rank: 585
score: 99.17257925180289
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . ) ;
rank: 585
score: 99.16182767427884
patch: return 0 . 0 + exp ( x + x ) ;
rank: 585
score: 99.1508076985677
patch: return 1 . $NUMBER$ * exp ( double ) x ;
rank: 585
score: 99.103759765625
patch: return 0 * exp ( - 0 . 0 ) ;
rank: 585
score: 99.07578531901042
patch: return 0 . 0 * new double [ 1 ] ;
rank: 585
score: 99.05537109375
patch: return 0 . $NUMBER$ * x + x ;
rank: 586
score: 99.2142842610677
patch: return 0 . 0 * exp ( / x ) ;
rank: 586
score: 99.17213792067308
patch: return 0 . $NUMBER$ * exp ( / - x ) ;
rank: 586
score: 99.16165161132812
patch: return 0 . $NUMBER$ >> exp ( - x ) ;
rank: 586
score: 99.14989217122395
patch: return 0 . 0 * exp ( float ) x ;
rank: 586
score: 99.11807250976562
patch: return $NUMBER$ ; } if ( x < $NUMBER$ ) {
rank: 586
score: 99.05391438802083
patch: return exp ( - x , 0 . 0 ) ;
rank: 587
score: 99.23166329520089
patch: return 0 . $NUMBER$ * exp ( x ) [ 0 ] ;
rank: 587
score: 99.2142803485577
patch: return 0 . $NUMBER$ * exp ( - 1 ) ; ;
rank: 587
score: 99.17184682992789
patch: return $NUMBER$ * exp ( - x ) ; return ) ;
rank: 587
score: 99.1609598795573
patch: return 0 . $NUMBER$ + value ( - x ) ;
rank: 587
score: 99.11758188100961
patch: result = $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 587
score: 99.05243474786931
patch: return 0 . $NUMBER$ double exp ( x ) ;
rank: 588
score: 99.17184682992789
patch: return 0 . $NUMBER$ * exp ( - - x ) .
rank: 588
score: 99.15928955078125
patch: return 0 . $NUMBER$ : 1 . $NUMBER$ ;
rank: 588
score: 99.14739990234375
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 588
score: 99.11751302083333
patch: return $NUMBER$ / exp ( x , - x ) ;
rank: 588
score: 99.0196533203125
patch: return $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 589
score: 99.22965785435268
patch: return 0 . $NUMBER$ + exp ( exp ( 0 ) ) ;
rank: 589
score: 99.21279907226562
patch: return 0 / $NUMBER$ * exp ( - x ) ;
rank: 589
score: 99.15884399414062
patch: } return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 589
score: 99.14596557617188
patch: = 0 . $NUMBER$ / exp ( - x ) ;
rank: 589
score: 99.11660766601562
patch: return ( x ) + exp ( - $NUMBER$ ) ;
rank: 589
score: 99.10206095377605
patch: return 0 . - exp ( - x ) ; }
rank: 590
score: 99.2296142578125
patch: return 0 . $NUMBER$ * exp ( x ) >> $NUMBER$ ;
rank: 590
score: 99.17174353966347
patch: return 0 . $NUMBER$ * exp ( - * x ) ;
rank: 590
score: 99.10196940104167
patch: . return 0 . 0 * exp ( x ) ;
rank: 591
score: 99.14547729492188
patch: return 0 . 0 << exp ( - x ) ;
rank: 591
score: 99.11585411658653
patch: return 0 . $NUMBER$ * x - $NUMBER$ / - x ;
rank: 591
score: 99.10130726207386
patch: return $NUMBER$ . 0 + exp ( x ) ;
rank: 591
score: 99.07387288411458
patch: return 0 . $NUMBER$ * new double ( x ) ;
rank: 591
score: 99.0487569173177
patch: return 0 - x * exp ( - x ) ;
rank: 592
score: 99.21195162259616
patch: return 0 * exp ( - x ) / x ) ;
rank: 592
score: 99.17097981770833
patch: return 0 . $NUMBER$ * ( x * x ) ;
rank: 592
score: 99.15755208333333
patch: return 0 . $NUMBER$ ] / exp ( x ) ;
rank: 592
score: 99.07359822591145
patch: return Math . 1 * exp ( - x ) ;
rank: 592
score: 99.01840209960938
patch: return $NUMBER$ . $NUMBER$ * exp ( x x ) ;
rank: 593
score: 99.2117919921875
patch: return 0 * 0 . 0 * exp ( x ) ;
rank: 593
score: 99.17063551682692
patch: return $NUMBER$ . $NUMBER$ * exp ( 0 . $NUMBER$ ) ;
rank: 593
score: 99.0732930501302
patch: return 0 . $NUMBER$ * exp ( x ) 1 ;
rank: 593
score: 99.04749552408855
patch: x = 0 . $NUMBER$ * ( - x ) ;
rank: 594
score: 99.21177164713542
patch: return 0 * exp ( - x ) + $NUMBER$ ;
rank: 594
score: 99.17056978665866
patch: return 0 . $NUMBER$ * exp ( ( x ) ) ;
rank: 594
score: 99.1130704012784
patch: return 0 . $NUMBER$ + ( - x ) ;
rank: 594
score: 99.01752387152777
patch: exp ( x , - x ) ;
rank: 595
score: 99.21168009440105
patch: return 0 / 0 * exp ( - x ) ;
rank: 595
score: 99.1696307842548
patch: return 0 . x * exp ( - x ) ) ;
rank: 595
score: 99.15699259440105
patch: return 0 . $NUMBER$ - exp ( x ) ) ;
rank: 595
score: 99.11288452148438
patch: return - $NUMBER$ * exp ( x ) ;
rank: 595
score: 99.04671223958333
patch: return 0 / exp ( - x ) - x ;
rank: 595
score: 99.01737467447917
patch: exp ( - 0 . $NUMBER$ , - x ) ;
rank: 596
score: 99.16933969350961
patch: return $NUMBER$ . $NUMBER$ * exp ( 0 . x ) ;
rank: 596
score: 99.1569315592448
patch: return 0 . $NUMBER$ + double ( - x ) ;
rank: 596
score: 99.11276479867789
patch: res = 0 . $NUMBER$ * exp ( - x ) ;
rank: 597
score: 99.21157836914062
patch: return 0 * 0 * exp ( - $NUMBER$ ) ;
rank: 597
score: 99.16921762319711
patch: return ( 0 . ) * exp ( - x ) ;
rank: 597
score: 99.1568374633789
patch: return 0 . $NUMBER$ : $NUMBER$ ;
rank: 597
score: 99.1122295673077
patch: return ( exp ( x ) - 0 . 0 ) ;
rank: 597
score: 99.04613148082386
patch: return 0 . $NUMBER$ * list ( x ) ;
rank: 597
score: 99.01566569010417
patch: return 0 . $NUMBER$ * exp ( [ x ) ;
rank: 598
score: 99.22740827287946
patch: return 0 * exp ( - x ) - 0 . $NUMBER$ ;
rank: 598
score: 99.16881385216347
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ * x ;
rank: 598
score: 99.1566162109375
patch: return 0 . $NUMBER$ * exp ( int ) 1 ;
rank: 598
score: 99.1404520670573
patch: return 0 . 0 * double CaMeL Value ( ) ;
rank: 598
score: 99.04597611860795
patch: return x . 0 * exp ( x ) ;
rank: 599
score: 99.071533203125
patch: result += 0 . $NUMBER$ * exp ( x ) ;
rank: 600
score: 99.2106464092548
patch: return 0 . 0 * exp ( - 1 ) ) ;
rank: 600
score: 99.11046752929687
patch: double 0 * exp ( - x ) ;
rank: 601
score: 99.22660319010417
patch: return 0 . $NUMBER$ + exp ( - 0 ) ;
rank: 601
score: 99.15432739257812
patch: return 0 . 0 + exp ( x ) ) ;
rank: 601
score: 99.11027018229167
patch: return 0 . x $NUMBER$ * exp ( x ) ;
rank: 601
score: 99.0970458984375
patch: return 0 - exp ( x - $NUMBER$ ) ;
rank: 601
score: 99.07132975260417
patch: return 0 . $NUMBER$ * max ( x ) ; }
rank: 602
score: 99.20956420898438
patch: return 0 * exp ( ) ;
rank: 602
score: 99.16754619891827
patch: return $NUMBER$ * exp ( - x ) ; return $NUMBER$ ;
rank: 602
score: 99.15366617838542
patch: return 0 . $NUMBER$ * exp ( int ) 0 ;
rank: 602
score: 99.13795979817708
patch: return - 0 . $NUMBER$ + exp ( x ) ;
rank: 602
score: 99.07090250651042
patch: return 0 . $NUMBER$ * $NUMBER$ double ( x ) ;
rank: 603
score: 99.20912522536058
patch: return Double . Na CaMeL N * exp ( x ) ;
rank: 603
score: 99.15341525607639
patch: return 1 * exp ( x ) ;
rank: 603
score: 99.10933061079545
patch: return 0 . $NUMBER$ * x - - x ;
rank: 603
score: 99.09665934244792
patch: return $NUMBER$ . 0 / exp ( - $NUMBER$ ) ;
rank: 603
score: 99.07089233398438
patch: return 0 . 0 * ( x , x ) ;
rank: 604
score: 99.20806415264423
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ;
rank: 604
score: 99.16483561197917
patch: return 0 . $NUMBER$ ) exp ( - x ) ;
rank: 604
score: 99.10826619466145
patch: return ( exp ( - $NUMBER$ ) - $NUMBER$ ) ;
rank: 604
score: 99.0697530110677
patch: return 0 . 0 * read ( - x ) ;
rank: 604
score: 99.01204057173295
patch: exp ( - 0 . $NUMBER$ , x ) ;
rank: 605
score: 99.20797729492188
patch: return 0 . $NUMBER$ * exp ( ) * x ;
rank: 605
score: 99.16389973958333
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * 0 ;
rank: 605
score: 99.1527099609375
patch: return 0 . 0 | exp ( - x ) ;
rank: 605
score: 99.13641357421875
patch: return 0 . $NUMBER$ * double CaMeL Value ( ) ;
rank: 605
score: 99.10765491832386
patch: return ( exp ( x ) - x ) ;
rank: 605
score: 99.06968180338542
patch: return 0 . $NUMBER$ * double ( x ) ; }
rank: 605
score: 99.04173583984375
patch: return x + exp ( - x ) ;
rank: 606
score: 99.15251922607422
patch: return 0 . $NUMBER$ - 0 ;
rank: 606
score: 99.10751342773438
patch: return 0 . $NUMBER$ * x - $NUMBER$ ;
rank: 606
score: 99.00797895951705
patch: x = $NUMBER$ - exp ( - x ) ;
rank: 607
score: 99.22470092773438
patch: return 0 . 0 + exp ( - 1 ) ;
rank: 607
score: 99.20676676432292
patch: return $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 607
score: 99.16375177556819
patch: return 0 . $NUMBER$ * - 0 . $NUMBER$ ;
rank: 607
score: 99.15228271484375
patch: return exp ( - x ) * 0 . $NUMBER$ ;
rank: 607
score: 99.10680135091145
patch: return 0 . $NUMBER$ * x - 0 . 0 ;
rank: 607
score: 99.09450276692708
patch: return 0 . 0 + ( x - x ) ;
rank: 608
score: 99.20658052884616
patch: return 0 * exp ( - x ) ; } * /
rank: 608
score: 99.1630859375
patch: return 0 * exp ( - - x ) ;
rank: 608
score: 99.15207143930289
patch: return 0 . $NUMBER$ * exp ( x ) * x )
rank: 609
score: 99.20631760817308
patch: return 0 * exp ( - x ) ( x ) ;
rank: 609
score: 99.16297403971355
patch: return $NUMBER$ . 0 * exp ( x ) ) ;
rank: 609
score: 99.1513338955966
patch: return 0 . $NUMBER$ << exp ( x ) ;
rank: 609
score: 99.09166463216145
patch: { return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 609
score: 99.06863403320312
patch: return 0 . 0 * new double [ 0 ] ;
rank: 609
score: 99.03694291548295
patch: return 0 . $NUMBER$ * exp [ x ] ;
rank: 610
score: 99.22238595145089
patch: return 0 . $NUMBER$ + exp ( - x ) / $NUMBER$ ;
rank: 610
score: 99.20595481178977
patch: return 0 . 0 * exp ( 1 ) ;
rank: 610
score: 99.13352457682292
patch: return $NUMBER$ * exp ( - x ) + x ;
rank: 610
score: 99.10557861328125
patch: return x * exp ( - $NUMBER$ ) ;
rank: 610
score: 99.09063720703125
patch: return - 0 . 0 / exp ( x ) ;
rank: 610
score: 99.06858132102273
patch: return 0 . $NUMBER$ * $NUMBER$ ( x ) ;
rank: 610
score: 98.99672629616477
patch: return 0 . $NUMBER$ * exp ( x ; }
rank: 611
score: 99.22222900390625
patch: return 0 = 0 . 1 * exp ( - x ) ;
rank: 611
score: 99.20587768554688
patch: return 0 . $NUMBER$ / exp ( ) ;
rank: 611
score: 99.14998372395833
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ : $NUMBER$ ;
rank: 611
score: 99.09033203125
patch: return 0 . 1 * ( x - x ) ;
rank: 611
score: 99.0662841796875
patch: return $NUMBER$ . 0 , exp ( - x ) ;
rank: 611
score: 99.035888671875
patch: return - x . exp ( - x ) ;
rank: 612
score: 99.1493896484375
patch: return 0 . $NUMBER$ + 0 . 0 ;
rank: 612
score: 99.12961832682292
patch: return - 0 . $NUMBER$ * exp ( - x )
rank: 612
score: 99.09023030598958
patch: return 0 * exp ( x - x ) ; }
rank: 612
score: 99.06575150923295
patch: return 0 . $NUMBER$ * char ( x ) ;
rank: 612
score: 99.03557794744319
patch: return exp ( x , x + x ) ;
rank: 612
score: 98.9933837890625
patch: if ( x <= 0 . 0 ) {
rank: 613
score: 99.20574951171875
patch: return 0 * exp ( - 1 ) - x ;
rank: 613
score: 99.16121419270833
patch: return $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 613
score: 99.10477388822116
patch: return 0 . 0 * exp ( x ) ; } else
rank: 613
score: 99.06519775390625
patch: return ( 0 . 0 , x ) ;
rank: 614
score: 99.16086832682292
patch: return $NUMBER$ . ) * exp ( - x ) ;
rank: 614
score: 99.14886474609375
patch: return 0 . $NUMBER$ ^ exp ( - x ) ;
rank: 614
score: 99.12872314453125
patch: return 0 . 0 * exp ( - x ) *
rank: 614
score: 99.10392252604167
patch: return 0 . ] * exp ( - x ) ;
rank: 615
score: 99.20535278320312
patch: return 1 * exp ( - x ) * x ;
rank: 615
score: 99.16074625651042
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; ;
rank: 615
score: 99.1028060913086
patch: if ( x > $NUMBER$ ) {
rank: 615
score: 98.9879150390625
patch: exp ( x ) ;
rank: 616
score: 99.22105189732143
patch: return 0 . $NUMBER$ * exp ( - x ) . length ;
rank: 616
score: 99.12696329752605
patch: |= 0 . 0 * exp ( - x ) ;
rank: 616
score: 99.0888671875
patch: return 0 . 0 / ( x - x ) ;
rank: 616
score: 99.0638936360677
patch: return 0 . 0 * ( x + x ) ;
rank: 616
score: 98.9878817471591
patch: return $NUMBER$ - exp ( - x ) ; }
rank: 617
score: 99.20525653545673
patch: return 0 . $NUMBER$ * exp ( 0 ) / $NUMBER$ ;
rank: 617
score: 99.15765935724431
patch: return ( 0 . $NUMBER$ * - x ) ;
rank: 617
score: 99.0880459872159
patch: return 0 + exp ( - x ) ; }
rank: 617
score: 99.06328790838069
patch: return Integer . 0 * exp ( x ) ;
rank: 617
score: 99.029541015625
patch: x = 0 / exp ( - x ) ;
rank: 618
score: 99.22043282645089
patch: return 0 . $NUMBER$ * exp ( x ) + - $NUMBER$ ;
rank: 618
score: 99.15666060014205
patch: return 0 . $NUMBER$ * exp 0 * x ;
rank: 618
score: 99.0628153483073
patch: if ( x < 0 ) { return 0 ; }
rank: 618
score: 99.02885298295455
patch: return $NUMBER$ / exp ( x , x ) ;
rank: 619
score: 99.1566162109375
patch: return false . $NUMBER$ * exp ( - x ) ;
rank: 619
score: 99.10025024414062
patch: return 0 . $NUMBER$ * x - $NUMBER$ / x ;
rank: 619
score: 99.0624667080966
patch: return 0 . 0 * double ( x ) ;
rank: 619
score: 98.98407660590277
patch: return exp ( - x ) ; }
rank: 620
score: 99.2036465731534
patch: return 0 ) * exp ( - x ) ;
rank: 620
score: 99.15615844726562
patch: return 0 . $NUMBER$ * exp - - x ) ;
rank: 620
score: 99.10020862926136
patch: return x + $NUMBER$ * exp ( x ) ;
rank: 620
score: 99.06229654947917
patch: return 0 . 0 * new int [ $NUMBER$ ] ;
rank: 621
score: 99.20311560997597
patch: return 0 * exp ( - x ) + x ) ;
rank: 621
score: 99.15603637695312
patch: return 0 . $NUMBER$ * ( x / x ) ;
rank: 621
score: 99.1419169108073
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * x ;
rank: 621
score: 99.09974254261364
patch: return x - $NUMBER$ / exp ( x ) ;
rank: 621
score: 99.08092041015625
patch: return 0 * exp ( x ) ; }
rank: 621
score: 99.02534623579545
patch: return 0 . / exp ( - x ) ;
rank: 622
score: 99.20280317826705
patch: return Double . value CaMeL Of ( x ) ;
rank: 622
score: 99.09962815504808
patch: return $NUMBER$ * exp ( - x ) ; } else {
rank: 622
score: 99.06128946940105
patch: return 0 . $NUMBER$ * new Integer ( x ) ;
rank: 622
score: 98.9825772372159
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ;
rank: 623
score: 99.21937779017857
patch: return exp ( - x ) - exp ( - x ) ;
rank: 623
score: 99.2025146484375
patch: return 0 * exp ( 0 ) ;
rank: 623
score: 99.15404256184895
patch: return 0 . 0 * abs ( - x ) ;
rank: 623
score: 99.07828521728516
patch: return new double [ 0 ] ;
rank: 623
score: 99.06119791666667
patch: tmp = 0 . $NUMBER$ * exp ( x ) ;
rank: 623
score: 99.02167302911931
patch: return 0 . $NUMBER$ * exp ( true ) ;
rank: 623
score: 98.98105690696023
patch: x = 0 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 624
score: 99.21930486505681
patch: return 0 . $NUMBER$ + exp ( 0 ) ;
rank: 624
score: 99.12452189127605
patch: return 0 . $NUMBER$ * exp ( double ) 1 ;
rank: 624
score: 99.06084650213069
patch: return 0 . $NUMBER$ * Integer ( x ) ;
rank: 625
score: 99.15164184570312
patch: return 0 . $NUMBER$ * exp ( < x ) ;
rank: 625
score: 99.12300618489583
patch: return 0 . 0 * Double . MIN _ VALUE ;
rank: 625
score: 99.07752685546875
patch: return 1 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 626
score: 99.19993286132812
patch: return 0 . $NUMBER$ * exp ( 0 ;
rank: 626
score: 99.1499911221591
patch: return 0 . $NUMBER$ * 0 * - x ;
rank: 626
score: 99.13821411132812
patch: return 0 . $NUMBER$ + exp ( / x ) ;
rank: 626
score: 99.12282307942708
patch: return 0 . $NUMBER$ / exp ( double ) x ;
rank: 626
score: 99.09839884440105
patch: return 0 [ 0 ] * exp ( x ) ;
rank: 626
score: 99.05930582682292
patch: return 1 . $NUMBER$ , exp ( - x ) ;
rank: 626
score: 99.0191421508789
patch: return 0 . 0 * x ;
rank: 627
score: 99.1997539813702
patch: this . return 0 . $NUMBER$ * exp ( x ) ;
rank: 627
score: 99.12204996744792
patch: = 0 . 1 * exp ( - x ) ;
rank: 627
score: 99.09778442382813
patch: return exp ( - ( x ) ) ;
rank: 627
score: 99.07235107421874
patch: return 0 . 1 * HEX _ $NUMBER$ ;
rank: 627
score: 99.05912272135417
patch: return 0 . 0 * 0 double ( x ) ;
rank: 627
score: 99.01759033203125
patch: return 0 . ( x , x ) ;
rank: 627
score: 98.97487571022727
patch: return $NUMBER$ . * exp ( - x ) ;
rank: 628
score: 99.19969685872395
patch: return 0 * 0 . $NUMBER$ * exp ( ) ;
rank: 628
score: 99.14830433238636
patch: return 0 . $NUMBER$ . ( - x ) ;
rank: 628
score: 99.09768676757812
patch: return 0 0 . $NUMBER$ * exp ( x ) ;
rank: 628
score: 99.01750183105469
patch: return ( x , x ) ;
rank: 629
score: 99.07047895951705
patch: return x * exp ( x - x ) ;
rank: 629
score: 99.0155917080966
patch: return x . cosh ( x , x ) ;
rank: 629
score: 98.97459827769886
patch: return $NUMBER$ . $NUMBER$ * exp ( $STRING$ ) ;
rank: 630
score: 99.1173095703125
patch: return 0 . 0 < exp ( - x ) ;
rank: 630
score: 99.0969571200284
patch: return 0 . $NUMBER$ + ( - $NUMBER$ ) ;
rank: 630
score: 99.01439666748047
patch: x = - x - x ;
rank: 631
score: 99.19921875
patch: return ( 0 . 0 * exp ( - x ) ;
rank: 631
score: 99.14666748046875
patch: return 0 . get ( - x ) ;
rank: 631
score: 99.013916015625
patch: return 1 . $NUMBER$ * ( - x ) ;
rank: 632
score: 99.19759427584134
patch: return 0 . $NUMBER$ * exp ( 0 ) * x ;
rank: 632
score: 99.13318888346355
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ * x ;
rank: 632
score: 99.09658813476562
patch: return $NUMBER$ * exp ( x , - $NUMBER$ ) ;
rank: 632
score: 99.01316139914773
patch: return 0 * exp ( x ) + x ;
rank: 633
score: 99.21661846454327
patch: return exp 0 . $NUMBER$ * exp ( - x ) ;
rank: 633
score: 99.1465731534091
patch: return 0 . $NUMBER$ * exp = - x ;
rank: 633
score: 99.06410910866477
patch: return 0 . + exp ( - x ) ;
rank: 633
score: 99.05706232244319
patch: return 0 . $NUMBER$ * hash ( x ) ;
rank: 633
score: 99.0131503018466
patch: return 0 . $NUMBER$ * short ( x ) ;
rank: 634
score: 99.21636962890625
patch: if ( - x > 0 ) { return 0 . $NUMBER$ ;
rank: 634
score: 99.1967022235577
patch: return 0 . 0 * exp ( 0 - x ) ;
rank: 634
score: 99.13270060221355
patch: return 0 . 1 * exp ( x ) ) ;
rank: 634
score: 99.11388142903645
patch: = $NUMBER$ . 0 * exp ( - x ) ;
rank: 634
score: 99.06306762695313
patch: return 0 . $NUMBER$ / ( x ) ;
rank: 634
score: 99.05701700846355
patch: return 0 . 0 * ( - x ) ; }
rank: 635
score: 99.0948486328125
patch: return $NUMBER$ . $NUMBER$ + exp ( - $NUMBER$ ) ;
rank: 635
score: 99.05655924479167
patch: return 0 . $NUMBER$ * 1 double ( x ) ;
rank: 636
score: 99.21546349158653
patch: return 0 . $NUMBER$ * exp ( * - x ) ;
rank: 636
score: 99.06281072443181
patch: return $NUMBER$ . 1 / exp ( x ) ;
rank: 637
score: 99.19529371995192
patch: return Double . $NUMBER$ * exp ( - x ) ; }
rank: 637
score: 99.14354451497395
patch: return 0 = $NUMBER$ * exp ( - x ) ;
rank: 637
score: 99.13046875
patch: return 0 . 0 + 0 . $NUMBER$ ;
rank: 637
score: 99.09315999348958
patch: return x - $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 637
score: 98.96766246448864
patch: exp ( x , exp ( x ) ) ;
rank: 638
score: 99.11192830403645
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 638
score: 99.09193929036458
patch: float 0 . $NUMBER$ * exp ( - x ) ;
rank: 638
score: 99.06084650213069
patch: return 0 . 0 * HEX _ $NUMBER$ ; }
rank: 638
score: 99.05596368963069
patch: return 0 . $NUMBER$ * Byte ( x ) ;
rank: 638
score: 99.01019287109375
patch: return $NUMBER$ - exp ( x ) ;
rank: 639
score: 99.19310584435097
patch: return Double . $NUMBER$ * exp ( x ) * x ;
rank: 639
score: 99.12986246744792
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ * 0 ;
rank: 639
score: 99.11175537109375
patch: return 1 . 0 * exp ( double ) x ;
rank: 639
score: 99.0919189453125
patch: return exp ( - exp ( - x ) ) ;
rank: 639
score: 99.0558749112216
patch: return exp ( x , - x ) ; }
rank: 639
score: 99.0096435546875
patch: return 0 . ( x , - x ) ;
rank: 640
score: 99.21405498798077
patch: / return 0 . 0 * exp ( - x ) ;
rank: 640
score: 99.19281475360577
patch: return Double . MAX _ VALUE * exp ( x ) ;
rank: 640
score: 99.05564186789773
patch: return 0 . $NUMBER$ * x ( x ) ;
rank: 640
score: 99.00910780164931
patch: x += exp ( - x ) ;
rank: 641
score: 99.13995361328125
patch: return 0 . $NUMBER$ * exp ( - x ) &&
rank: 641
score: 99.12804158528645
patch: return - 1 . $NUMBER$ + exp ( x ) ;
rank: 641
score: 99.09033203125
patch: return 0 . $NUMBER$ * double ( - $NUMBER$ ) ;
rank: 641
score: 99.0555419921875
patch: return 0 . 0 * in ( - x ) ;
rank: 641
score: 99.00876193576389
patch: return x . cosh ( x ) ;
rank: 642
score: 99.21273099459134
patch: return 0 . 0 * exp ( - - 1 ) ;
rank: 642
score: 99.19251505533855
patch: return Double . $NUMBER$ / exp ( - x ) ;
rank: 642
score: 99.13941446940105
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) )
rank: 642
score: 99.12657470703125
patch: return 1 + exp ( - x ) ;
rank: 642
score: 99.11014811197917
patch: *= 0 . $NUMBER$ * exp ( - x ) ;
rank: 642
score: 99.05779474431819
patch: return 1 . 0 + exp ( x ) ;
rank: 642
score: 99.05540882457386
patch: return 0 . 0 * exp ( $STRING$ ) ;
rank: 642
score: 99.008544921875
patch: return 0 / exp ( x + x ) ;
rank: 643
score: 99.13858032226562
patch: return $NUMBER$ * exp ( exp ( x ) ) ;
rank: 643
score: 99.11012776692708
patch: return 0 . 0 ; exp ( - x ) ;
rank: 643
score: 99.08924357096355
patch: return 0 [ $NUMBER$ ] * exp ( x ) ;
rank: 643
score: 99.05474853515625
patch: return 0 . $NUMBER$ * this ( x ) ; }
rank: 643
score: 99.0078125
patch: x = exp ( x , - x ) ;
rank: 644
score: 99.1920498934659
patch: return 0 . 0 * exp ( - 1 ;
rank: 644
score: 99.1377685546875
patch: return ( 0 . $NUMBER$ * x ) ;
rank: 644
score: 99.1247049967448
patch: return 0 . $NUMBER$ + exp ( int ) x ;
rank: 644
score: 99.10706583658855
patch: &= 0 . 0 * exp ( - x ) ;
rank: 644
score: 99.05410766601562
patch: return 0 . max ( x , - x ) ;
rank: 644
score: 99.00773481889205
patch: return - x * exp ( - x ) ;
rank: 644
score: 98.96088324652777
patch: exp ( - x - x ) ;
rank: 645
score: 99.08875528971355
patch: return $NUMBER$ / exp ( - ( x ) ) ;
rank: 645
score: 99.05625221946023
patch: return $NUMBER$ . - exp ( - x ) ;
rank: 645
score: 99.0536397298177
patch: return 0 . $NUMBER$ / exp ( , x ) ;
rank: 645
score: 99.00641424005681
patch: return 0 . $NUMBER$ * exp ( false ) ;
rank: 646
score: 99.19105021158855
patch: return $NUMBER$ * exp ( - x ) / x ;
rank: 646
score: 99.0886942545573
patch: return ( exp ( x ) ) ; } else {
rank: 646
score: 99.05344645182292
patch: return 0 . $NUMBER$ * new int [ 1 ] ;
rank: 646
score: 99.00605604383681
patch: return ( x , - x ) ;
rank: 647
score: 99.20936279296875
patch: break 0 * exp ( - x ) ;
rank: 647
score: 99.13458806818181
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) .
rank: 648
score: 99.2091815655048
patch: * return 1 . $NUMBER$ * exp ( - x ) ;
rank: 648
score: 99.190673828125
patch: return 0 . $NUMBER$ * exp ( 0 ) + x ;
rank: 648
score: 99.1341552734375
patch: return $NUMBER$ . $NUMBER$ * max ( x ) ;
rank: 648
score: 99.12253824869792
patch: return 1 . $NUMBER$ * exp ( * x ) ;
rank: 648
score: 99.0942715731534
patch: return 1 . $NUMBER$ * exp ( - x )
rank: 648
score: 99.0878397623698
patch: return x double $NUMBER$ * exp ( - x ) ;
rank: 648
score: 98.9595947265625
patch: return $NUMBER$ + exp ( - x ) ; }
rank: 649
score: 99.20815022786458
patch: return 0 . $NUMBER$ * exp ( 0 . length ;
rank: 649
score: 99.19054158528645
patch: return 0 * exp ( - x * x ) ;
rank: 649
score: 99.13289388020833
patch: return $NUMBER$ * exp ( - - - x ) ;
rank: 649
score: 99.09400523792614
patch: return - 0 * exp ( - x ) ;
rank: 649
score: 99.05289713541667
patch: return 0 . $NUMBER$ * x - x - $NUMBER$ ;
rank: 649
score: 99.05255681818181
patch: return $NUMBER$ . 0 - exp ( x ) ;
rank: 649
score: 99.00356223366477
patch: return x . $NUMBER$ * exp ( x ) ;
rank: 650
score: 99.13262939453125
patch: return 0 . $NUMBER$ * compute ( - x ) ;
rank: 650
score: 99.12174479166667
patch: return 0 . $NUMBER$ $NUMBER$ / exp ( x ) ;
rank: 650
score: 99.05240885416667
patch: return 0 . $NUMBER$ * ( x < x ) ;
rank: 650
score: 99.05142822265626
patch: return ( x - 0 . 0 ) ;
rank: 650
score: 99.00258567116477
patch: x = exp ( - x + x ) ;
rank: 651
score: 99.08995472301136
patch: return 0 . 0 double CaMeL Value ( ) ;
rank: 651
score: 99.0517578125
patch: return 0 . $NUMBER$ * += exp ( x ) ;
rank: 651
score: 99.00241921164773
patch: return ( - 0 . 0 , x ) ;
rank: 651
score: 98.95750122070312
patch: return x - exp ( - x ) ;
rank: 652
score: 99.19029822716347
patch: return 0 . $NUMBER$ * exp ( ) ; } else {
rank: 652
score: 99.13163618607955
patch: return 0 . $NUMBER$ * exp 0 - x ;
rank: 652
score: 99.11965942382812
patch: return 0 . $NUMBER$ + exp ( x ) ; ;
rank: 652
score: 99.05157470703125
patch: * return 0 . $NUMBER$ * exp ( x ) ;
rank: 652
score: 99.04954833984375
patch: return 0 . 0 / HEX _ $NUMBER$ ;
rank: 653
score: 99.20654296875
patch: return 0 . 1 * exp ( 0 . 0 ) ;
rank: 653
score: 99.13092595880681
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ ;
rank: 653
score: 99.08486938476562
patch: return $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 653
score: 99.08295232599431
patch: return 0 . 0 * this . - x ;
rank: 653
score: 99.05120294744319
patch: return 0 . $NUMBER$ * default ( x ) ;
rank: 653
score: 99.04866943359374
patch: return 0 + exp ( - $NUMBER$ ) ;
rank: 653
score: 99.00060424804687
patch: return ( x , 0 . $NUMBER$ ) ;
rank: 653
score: 98.95656516335227
patch: return ( 0 . $NUMBER$ , - x ) ;
rank: 654
score: 99.20630821814903
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) + x ;
rank: 654
score: 99.08477783203125
patch: ++ 0 . $NUMBER$ * exp ( - x ) ;
rank: 654
score: 99.05014038085938
patch: return 0 . $NUMBER$ * else exp ( x ) ;
rank: 654
score: 99.04856178977273
patch: return 0 - exp ( - x ) ; }
rank: 655
score: 99.12979125976562
patch: return $NUMBER$ . $NUMBER$ * start ( - x ) ;
rank: 655
score: 99.08042214133523
patch: return - 0 . $NUMBER$ ( - x ) ;
rank: 655
score: 99.0484952059659
patch: return 0 . SIZE * exp ( x ) ;
rank: 655
score: 99.04796253551136
patch: return 0 . $NUMBER$ * exp ( value ) ;
rank: 655
score: 98.95541381835938
patch: temp ( x , 0 . 0 ) ;
rank: 656
score: 99.12899780273438
patch: return Double . $NUMBER$ * exp ( x ) ) ;
rank: 656
score: 99.0841573079427
patch: return ) . $NUMBER$ * exp ( - x ) ;
rank: 656
score: 99.08001154119319
patch: return 0 [ exp ( - x ) ] ;
rank: 656
score: 98.99897904829545
patch: return exp ( x , 0 . x ) ;
rank: 657
score: 99.12850952148438
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; /
rank: 657
score: 99.08383178710938
patch: -- 0 . $NUMBER$ * exp ( - x ) ;
rank: 657
score: 99.07893510298295
patch: return Math . abs ( - - x ) ;
rank: 657
score: 99.04592063210227
patch: return 0 . $NUMBER$ * true ( x ) ;
rank: 657
score: 98.99749200994319
patch: return $NUMBER$ * exp ( x + x ) ;
rank: 658
score: 99.20461801382211
patch: return 0 . $NUMBER$ * exp ( x ) >> 1 ;
rank: 658
score: 99.18359375
patch: return 0 . $NUMBER$ * exp ( ) / $NUMBER$ ;
rank: 658
score: 99.12845865885417
patch: return $NUMBER$ * exp ( - x ) ; / /
rank: 658
score: 99.11805216471355
patch: return 1 . $NUMBER$ | exp ( - x ) ;
rank: 658
score: 99.04522150213069
patch: return Double . 1 * exp ( x ) ;
rank: 658
score: 98.99735514322917
patch: return 1 / exp ( x ) ;
rank: 659
score: 99.18333851207386
patch: return 0 * exp ( - x ) * ;
rank: 659
score: 99.04456922743056
patch: return exp ( x - x ) ;
rank: 659
score: 99.04316850142045
patch: return Long . $NUMBER$ * exp ( x ) ;
rank: 660
score: 99.18221028645833
patch: return 0 * exp ( - 1 . $NUMBER$ ) ;
rank: 660
score: 99.11643473307292
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * 0 ;
rank: 660
score: 99.07187721946023
patch: = 1 . $NUMBER$ * exp ( x ) ;
rank: 660
score: 99.04424285888672
patch: return ( x - $NUMBER$ ) ;
rank: 660
score: 98.99610484730114
patch: return Float . $NUMBER$ * exp ( x ) ;
rank: 660
score: 98.95121626420455
patch: return 0 . $NUMBER$ double ( - x ) ;
rank: 661
score: 99.04311301491477
patch: return x * exp ( x - $NUMBER$ ) ;
rank: 661
score: 99.04262473366477
patch: += 0 . 0 * exp ( x ) ;
rank: 661
score: 98.94922553168402
patch: return 0 . $NUMBER$ * x ; }
rank: 662
score: 99.2035381610577
patch: return 0 . $NUMBER$ * exp ( 1 ) - x ;
rank: 662
score: 99.1143086751302
patch: return 0 . ) + exp ( - x ) ;
rank: 662
score: 99.08276977539063
patch: return exp ( x , - $NUMBER$ ) ;
rank: 662
score: 98.94815063476562
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ ;
rank: 663
score: 99.12567138671875
patch: return 0 . $NUMBER$ * exp 0 ;
rank: 663
score: 99.08226521809895
patch: return 0 . $NUMBER$ + new double [ $NUMBER$ ] ;
rank: 663
score: 99.06535200639205
patch: return 0 . $NUMBER$ * exp ( double ) ;
rank: 663
score: 99.0409823330966
patch: return 0 . 0 * this ( x ) ;
rank: 663
score: 98.99501731178977
patch: return $NUMBER$ - exp ( x , x ) ;
rank: 664
score: 99.1130879720052
patch: return 0 . $NUMBER$ += exp ( - x ) ;
rank: 664
score: 98.94659978693181
patch: x = $NUMBER$ * exp ( x ) ; }
rank: 665
score: 99.1784159342448
patch: return 0 * exp ( - 1 - x ) ;
rank: 665
score: 99.1238021850586
patch: return $NUMBER$ . $NUMBER$ * 0 ;
rank: 665
score: 99.1129659016927
patch: return 0 . 0 ? exp ( - x ) ;
rank: 665
score: 99.081201171875
patch: return exp ( - 0 . 0 ) ;
rank: 665
score: 98.99262152777777
patch: return * exp ( - x ) ;
rank: 666
score: 99.11248779296875
patch: return 0 . get CaMeL Value ( ) ;
rank: 666
score: 99.0388516512784
patch: return 0 . $NUMBER$ * ( x ) ; }
rank: 667
score: 99.11194957386364
patch: return 0 . $NUMBER$ * exp ( ) ) ;
rank: 667
score: 99.08014470880681
patch: double 0 . 0 * exp ( x ) ;
rank: 667
score: 99.03767533735795
patch: return 0 . $NUMBER$ / ( - $NUMBER$ ) ;
rank: 667
score: 98.99160427517361
patch: x = 0 . $NUMBER$ * x ;
rank: 667
score: 98.94606711647727
patch: x = 0 * exp ( - x ) ;
rank: 668
score: 99.17451782226563
patch: return 0 / exp ( - 1 ) ;
rank: 668
score: 99.08013916015625
patch: return 0 . $NUMBER$ * exp ( x ) ] ;
rank: 668
score: 99.06219482421875
patch: return double CaMeL Value ( - x ) ;
rank: 668
score: 98.94382546164773
patch: return 0 . * exp ( x ) ; }
rank: 669
score: 99.1090087890625
patch: return 0 . $NUMBER$ : 0 . 1 ;
rank: 669
score: 99.07974243164062
patch: double 1 . 0 * exp ( - x ) ;
rank: 669
score: 99.03709827769886
patch: return 0 * exp ( x - 1 ) ;
rank: 669
score: 98.94293767755681
patch: exp ( x , 0 . $NUMBER$ ) ; }
rank: 670
score: 99.17329545454545
patch: return 0 $NUMBER$ * exp ( - x ) ;
rank: 670
score: 99.12209065755208
patch: return $NUMBER$ . $NUMBER$ exp ( - - x ) ;
rank: 670
score: 99.10809881036931
patch: return $NUMBER$ * exp ( x ) * x ;
rank: 670
score: 98.94288330078125
patch: if ( x >= 0 . 0 ) {
rank: 671
score: 99.10791015625
patch: return 0 . $NUMBER$ || exp ( x ) ;
rank: 671
score: 99.07882690429688
patch: return ( x , exp ( - x ) ) ;
rank: 671
score: 99.0611905184659
patch: return 0 . $NUMBER$ / exp ( - x )
rank: 672
score: 99.1068115234375
patch: return 0 . $NUMBER$ | 0 . $NUMBER$ ;
rank: 672
score: 99.07874552408855
patch: return 0 . $NUMBER$ / exp ( - 0 ) ;
rank: 672
score: 99.06080211292614
patch: return 0 . $NUMBER$ ( - - x ) ;
rank: 672
score: 99.03171793619792
patch: return - ( x - x ) ;
rank: 672
score: 98.94103240966797
patch: return 0 . $NUMBER$ * exp ;
rank: 673
score: 99.12005060369319
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) )
rank: 673
score: 99.10566850142045
patch: return 0 . $NUMBER$ ? exp ( x ) ;
rank: 673
score: 99.07846901633523
patch: return - ( exp ( - x ) ) ;
rank: 673
score: 99.05823364257813
patch: double CaMeL Value ( - - x ) ;
rank: 673
score: 99.0302734375
patch: return 0 . $NUMBER$ / exp ( - x ;
rank: 673
score: 98.93972778320312
patch: return ( 0 . $NUMBER$ , x ) ;
rank: 674
score: 99.17218572443181
patch: return 0 * exp ( - 1 ) ; }
rank: 674
score: 99.1198397549716
patch: return 0 . exp ( - - x ) ;
rank: 674
score: 99.10475852272727
patch: return $NUMBER$ * exp ( x ) - x ;
rank: 674
score: 99.07843017578125
patch: val = 0 . $NUMBER$ * exp ( x ) ;
rank: 674
score: 99.031494140625
patch: return 0 . 0 * min ( x ) ;
rank: 674
score: 99.02984064275569
patch: return $NUMBER$ + exp ( x - x ) ;
rank: 675
score: 99.19695575420673
patch: return 0 . $NUMBER$ + exp ( - - 1 ) ;
rank: 675
score: 99.17183837890624
patch: return 1 . $NUMBER$ * exp ( ) ;
rank: 675
score: 99.1193339029948
patch: return 0 . $NUMBER$ * exp ( x ) ; )
rank: 675
score: 99.0297518643466
patch: return 0 . 1 * ( - x ) ;
rank: 675
score: 98.98655870225694
patch: return 0 double ( - x ) ;
rank: 675
score: 98.93855285644531
patch: exp ( x , 0 ) ;
rank: 676
score: 99.1015625
patch: return - $NUMBER$ + exp ( - x ) ;
rank: 676
score: 99.02956321022727
patch: return 0 . $NUMBER$ * $STRING$ ( x ) ;
rank: 677
score: 99.16888982599431
patch: return 0 . $NUMBER$ * exp ( ) ; }
rank: 677
score: 99.11887613932292
patch: return 0 . $NUMBER$ * exp ( - x ) /
rank: 677
score: 99.10092163085938
patch: return 0 . 0 * 0 ;
rank: 677
score: 99.02647816051136
patch: return 0 . $NUMBER$ * exp ( start ) ;
rank: 678
score: 99.19579467773437
patch: return 0 = exp ( - x ) ;
rank: 678
score: 99.16710408528645
patch: return 0 . $NUMBER$ * exp ( 0 ) ; }
rank: 678
score: 99.1184814453125
patch: return 0 . null ( - x ) ;
rank: 678
score: 99.09795532226562
patch: return exp ( exp ( x ) ) ;
rank: 678
score: 99.07664998372395
patch: return 0 . max * exp ( - x ) ;
rank: 678
score: 99.0515469637784
patch: return 0 . 0 ( - - x ) ;
rank: 678
score: 99.02858664772727
patch: return 1 . 1 / exp ( x ) ;
rank: 678
score: 98.98398659446023
patch: return 1 / exp ( x , x ) ;
rank: 678
score: 98.93214246961806
patch: if ( x < 0 . 0 )
rank: 679
score: 99.16536458333333
patch: return 0 * exp ( - $NUMBER$ ) + x ;
rank: 679
score: 99.11843872070312
patch: return 0 . 0 * exp ( - x ) .
rank: 679
score: 99.09789428710937
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ;
rank: 679
score: 99.07651774088542
patch: result *= 0 . $NUMBER$ * exp ( x ) ;
rank: 679
score: 99.02803178267045
patch: return $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ; }
rank: 679
score: 98.98394220525569
patch: return 1 * exp ( x , x ) ;
rank: 679
score: 98.93054809570313
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 680
score: 99.11800130208333
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . ) ;
rank: 680
score: 99.076416015625
patch: if ( x > 0 ) {
rank: 680
score: 99.04998224431819
patch: return - 0 . 0 ( - x ) ;
rank: 680
score: 99.02754350142045
patch: return - 0 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 680
score: 99.02132568359374
patch: return 0 . 0 exp ( x ) ;
rank: 680
score: 98.93051147460938
patch: exp ( 0 . 0 , x ) ;
rank: 681
score: 99.11783854166667
patch: return $NUMBER$ . $NUMBER$ * exp ( / x ) ;
rank: 681
score: 99.09681285511364
patch: if ( exp ( - x ) == 0 )
rank: 681
score: 99.04899458451705
patch: return 0 * exp ( - x ) ; ;
rank: 681
score: 98.92600504557292
patch: x = new double [ $NUMBER$ ] ;
rank: 682
score: 99.19383826622597
patch: return 0 . 0 + exp ( x ) + x ;
rank: 682
score: 99.11667702414773
patch: return 0 . $NUMBER$ * exp ( x ) *
rank: 682
score: 99.02509155273438
patch: return ( x - x ) - x ;
rank: 682
score: 99.0201083096591
patch: return Integer . 1 * exp ( x ) ;
rank: 682
score: 98.98219992897727
patch: return 0 . $NUMBER$ * exp ( x , ;
rank: 683
score: 99.16278754340277
patch: return 0 * exp ( $NUMBER$ ) ;
rank: 683
score: 99.09539184570312
patch: return 0 . $NUMBER$ : 0 . ) ;
rank: 683
score: 99.02457275390626
patch: return 0 . 0 / ( x ) ;
rank: 683
score: 99.01943137428977
patch: return 0 . $NUMBER$ * false ( x ) ;
rank: 683
score: 98.92341918945313
patch: return $NUMBER$ / exp ( x ) ; }
rank: 684
score: 99.19338754507211
patch: * return 0 . $NUMBER$ + exp ( - x ) ;
rank: 684
score: 99.16175333658855
patch: return - 0 . $NUMBER$ * exp ( 0 ) ;
rank: 684
score: 99.07337443033855
patch: return 0 . $NUMBER$ * x - $NUMBER$ . $NUMBER$ ;
rank: 684
score: 99.02445845170455
patch: return 0 . - exp ( - $NUMBER$ ) ;
rank: 684
score: 98.98183371803977
patch: return exp ( x , x , 0 ) ;
rank: 684
score: 98.92161865234375
patch: exp ( 0 . $NUMBER$ , x ) ;
rank: 685
score: 99.1617431640625
patch: return 0 . $NUMBER$ / exp ( 0 ) ;
rank: 685
score: 99.1155497233073
patch: return 0 . $NUMBER$ * floor ( - x ) ;
rank: 685
score: 99.04542236328125
patch: double CaMeL Value ( - x ) ; ;
rank: 685
score: 99.01908735795455
patch: return 0 . 0 , x = - x ;
rank: 685
score: 98.92032470703126
patch: x = $NUMBER$ / exp ( x ) ;
rank: 686
score: 99.16075642903645
patch: return Double . double CaMeL Value ( - x ) ;
rank: 686
score: 99.11549886067708
patch: return 0 . $NUMBER$ * 0 . ( x ) ;
rank: 687
score: 99.07191975911458
patch: result = 0 . 1 * exp ( x ) ;
rank: 687
score: 98.98018022017045
patch: x = x . cosh ( - x ) ;
rank: 687
score: 98.91100311279297
patch: exp ( - x ) ; }
rank: 688
score: 99.16026814778645
patch: return $NUMBER$ * exp ( - x ) * $NUMBER$ ;
rank: 688
score: 99.07185502485795
patch: return ( double ) exp ( - x ) ;
rank: 688
score: 99.02104048295455
patch: return $NUMBER$ . 1 + exp ( x ) ;
rank: 688
score: 98.9795809659091
patch: return exp ( x , x - $NUMBER$ ) ;
rank: 689
score: 99.19220440204327
patch: return 0 . 0 + exp ( 0 . 0 ) ;
rank: 689
score: 99.16004435221355
patch: assert 0 . $NUMBER$ * exp ( - x ) ;
rank: 689
score: 99.07152210582386
patch: return - $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 689
score: 99.03605513139205
patch: return $NUMBER$ . $NUMBER$ * exp ( - x )
rank: 689
score: 99.01685680042614
patch: return 0 . 0 * int ( x ) ;
rank: 689
score: 98.90733506944444
patch: / / exp ( - x ) ;
rank: 690
score: 99.1593526204427
patch: return 0 * exp ( - $NUMBER$ ) / $NUMBER$ ;
rank: 690
score: 99.11205037434895
patch: return 0 . $NUMBER$ . ( - - x ) ;
rank: 690
score: 99.08705832741477
patch: if ( 0 == x ) { return x ;
rank: 690
score: 99.07144165039062
patch: return 0 . start * exp ( - x ) ;
rank: 690
score: 99.03466186523437
patch: return 0 . $NUMBER$ * Na CaMeL N ;
rank: 690
score: 98.97857111150569
patch: x = exp ( - x - x ) ;
rank: 690
score: 98.9049301147461
patch: return 0 [ $NUMBER$ ] ; }
rank: 691
score: 99.0186767578125
patch: return 0 . 0 / ( - $NUMBER$ ) ;
rank: 691
score: 98.97593994140625
patch: return exp ( - x ) - x ;
rank: 691
score: 98.90393938337054
patch: return 0 [ $NUMBER$ ] ;
rank: 692
score: 99.15855102539062
patch: return $NUMBER$ . $NUMBER$ * exp ( ) ;
rank: 692
score: 99.07095336914062
patch: result = 0 . $NUMBER$ - exp ( x ) ;
rank: 692
score: 99.0311612215909
patch: double CaMeL Value ( ) ( - x ) ;
rank: 692
score: 99.0183438387784
patch: return - $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 692
score: 98.97551812065973
patch: return ( - x - x ) ;
rank: 692
score: 98.90380181206598
patch: if ( x <= 0 . 0 )
rank: 693
score: 99.02961869673295
patch: = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 693
score: 99.01828835227273
patch: return 1 . 0 - exp ( x ) ;
rank: 693
score: 99.01621315696023
patch: return 0 . max ( x , x ) ;
rank: 693
score: 98.97054290771484
patch: x = exp ( x ) ;
rank: 693
score: 98.90370178222656
patch: return 0 . $NUMBER$ * $NUMBER$ ;
rank: 694
score: 99.15830300071023
patch: return 0 * 0 * exp ( x ) ;
rank: 694
score: 99.11042616102431
patch: return 0 . exp ( x ) ;
rank: 694
score: 99.08560791015626
patch: return $NUMBER$ * exp ( x ) ) ;
rank: 694
score: 98.96925659179688
patch: return 0 / exp ( x ) ; }
rank: 695
score: 99.15775553385417
patch: return 0 * exp ( - x ) * 0 ;
rank: 695
score: 99.11020729758523
patch: return 0 . ) * exp ( x ) ;
rank: 695
score: 99.08473899147727
patch: return exp ( x ) * 0 . $NUMBER$ ;
rank: 695
score: 99.06884765625
patch: n 1 . $NUMBER$ * exp ( - x ) ;
rank: 695
score: 99.01500701904297
patch: return new double [ 1 ] ;
rank: 695
score: 99.01432661576705
patch: return 0 . $NUMBER$ * exp ( null ) ;
rank: 695
score: 98.96766967773438
patch: return exp ( - x ) + x ;
rank: 695
score: 98.89911499023438
patch: return 0 . $NUMBER$ double ( x ) ;
rank: 696
score: 99.15771484375
patch: return 0 * exp ( - 0 ) ;
rank: 696
score: 99.11018880208333
patch: return 0 . 0 * exp ( 0 . ) ;
rank: 696
score: 99.08317427201705
patch: return $NUMBER$ + exp ( - x ) ) ;
rank: 696
score: 99.06881713867188
patch: return exp ( - ( 0 . 0 ) ) ;
rank: 696
score: 99.0249911221591
patch: return 0 * exp ( x * x ) ;
rank: 696
score: 98.96396484375
patch: exp ( - x ) ; return 0 ;
rank: 696
score: 98.896630859375
patch: return 0 . $NUMBER$ * this . x ;
rank: 697
score: 99.10963948567708
patch: return 0 . $NUMBER$ * switch ( - x ) ;
rank: 697
score: 99.0687764485677
patch: return exp ( - ( x - $NUMBER$ ) ) ;
rank: 697
score: 99.02453002929687
patch: double CaMeL Value ( ) ; return x ;
rank: 697
score: 98.961962890625
patch: return 0 . $NUMBER$ * [ x ] ;
rank: 698
score: 99.06825764973958
patch: return double 1 . $NUMBER$ * exp ( x ) ;
rank: 698
score: 99.00643920898438
patch: return cosh * exp ( - x ) ;
rank: 698
score: 98.89448547363281
patch: return exp ( x ) ; }
rank: 699
score: 99.07945667613636
patch: } return 0 * exp ( - x ) ;
rank: 700
score: 99.18862915039062
patch: return 0 . 0 * exp ( 0 . 0 ;
rank: 700
score: 99.10706676136364
patch: throw 0 . $NUMBER$ * exp ( x ) ;
rank: 700
score: 99.079345703125
patch: return 0 + exp ( - x ) ) ;
rank: 700
score: 99.06657270951705
patch: return 0 . $NUMBER$ , x = - x ;
rank: 700
score: 99.0229159268466
patch: return 0 . $NUMBER$ float ( - x ) ;
rank: 700
score: 99.00314331054688
patch: return 0 * HEX _ $NUMBER$ ;
rank: 700
score: 98.96087646484375
patch: return 1 - exp ( - x ) ;
rank: 701
score: 99.15491739908855
patch: return 0 . $NUMBER$ * exp ( 0 ) ) ;
rank: 701
score: 99.10664506392045
patch: return 0 . $NUMBER$ * x * - x ;
rank: 701
score: 99.0663553873698
patch: return 0 * exp ( - ( x ) ) ;
rank: 701
score: 99.001123046875
patch: return 0 + exp ( x ) ; }
rank: 701
score: 98.95994567871094
patch: x = - x + x ;
rank: 701
score: 98.89154052734375
patch: return 0 . min ( - x ) ;
rank: 702
score: 99.1875751201923
patch: { return 0 . $NUMBER$ - exp ( - x ) ;
rank: 702
score: 99.10525512695312
patch: return 0 . ( - - x ) ;
rank: 702
score: 99.0770492553711
patch: return 0 . $NUMBER$ : 0 ;
rank: 702
score: 99.06632856889205
patch: break 0 . $NUMBER$ * exp ( x ) ;
rank: 702
score: 99.0097323330966
patch: return 0 . $NUMBER$ * exp ( name ) ;
rank: 702
score: 99.00108337402344
patch: return ( 0 . 0 ) ;
rank: 702
score: 98.95716688368056
patch: return 0 . $NUMBER$ + - x ;
rank: 702
score: 98.88972778320313
patch: x = $NUMBER$ + exp ( x ) ;
rank: 703
score: 99.15396118164062
patch: return 0 . $NUMBER$ * 0 * exp ( ) ;
rank: 703
score: 99.07563920454545
patch: exp ( x ) . exp ( x ) ;
rank: 703
score: 99.06615193684895
patch: return 0 / exp ( - ( x ) ) ;
rank: 703
score: 98.95545043945313
patch: return - x . exp ( x ) ;
rank: 703
score: 98.88929578993056
patch: exp ( x , x ) ; }
rank: 704
score: 99.15313720703125
patch: return Double . value CaMeL Of ( - x ) ;
rank: 704
score: 99.07513427734375
patch: return 0 . $NUMBER$ + 0 . 1 ;
rank: 704
score: 99.06608072916667
patch: return exp ( - exp ( - $NUMBER$ ) ) ;
rank: 704
score: 99.02030029296876
patch: double CaMeL Value ( 0 . 0 ) ;
rank: 704
score: 99.00951038707386
patch: return Math . 0 * exp ( x ) ;
rank: 705
score: 99.18673706054688
patch: return 0 . $NUMBER$ + exp ( - start ) ;
rank: 705
score: 99.06559244791667
patch: return 0 . $NUMBER$ * exp ( - x , ;
rank: 705
score: 98.9544189453125
patch: return 0 double ( x , x ) ;
rank: 706
score: 99.18619791666667
patch: return 0 . $NUMBER$ - exp ( - 1 ) ;
rank: 706
score: 99.10181274414063
patch: return $NUMBER$ . $NUMBER$ exp ( x ) ;
rank: 706
score: 99.0194091796875
patch: return 0 . 0 * - x ;
rank: 706
score: 99.00583718039773
patch: return 0 > $NUMBER$ * exp ( x ) ;
rank: 706
score: 98.95412190755208
patch: return 0 + x ;
rank: 706
score: 98.88905164930556
patch: return 0 . $NUMBER$ * exp ; }
rank: 707
score: 99.0653076171875
patch: return $NUMBER$ / exp ( x , - $NUMBER$ ) ;
rank: 707
score: 99.00523792613636
patch: return 0 . $NUMBER$ * exp ( max ) ;
rank: 707
score: 98.9978515625
patch: return ( x - $NUMBER$ . 0 ) ;
rank: 707
score: 98.95358615451389
patch: return x . exp ( x ) ;
rank: 707
score: 98.88882785373264
patch: if ( x > 0 . 0 )
rank: 708
score: 99.14943440755208
patch: - 0 . $NUMBER$ * exp ( - x ) ;
rank: 708
score: 99.09975363991477
patch: return $NUMBER$ * exp exp ( - x ) ;
rank: 708
score: 99.06995849609375
patch: return 0 . $NUMBER$ + exp ( x )
rank: 708
score: 99.06519571940105
patch: double $NUMBER$ . 0 * exp ( - x ) ;
rank: 708
score: 99.01763916015625
patch: return x . double CaMeL Value ( ) ;
rank: 708
score: 99.00474964488636
patch: return 0 . 0 * long ( x ) ;
rank: 708
score: 98.99742431640625
patch: return 0 - exp ( - $NUMBER$ ) ;
rank: 708
score: 98.88828125
patch: return $NUMBER$ . $NUMBER$ * exp ( x ;
rank: 709
score: 99.14794921875
patch: return 0 * 0 / exp ( - x ) ;
rank: 709
score: 99.09938742897727
patch: return 0 . $NUMBER$ * 0 . - x ;
rank: 709
score: 99.06961669921876
patch: return 0 . 0 * exp ( x )
rank: 709
score: 99.01732788085937
patch: double 0 / exp ( - x ) ;
rank: 709
score: 99.00286310369319
patch: return 0 . 0 double ( - x ) ;
rank: 709
score: 98.94982299804687
patch: return 0 . $NUMBER$ * size ( ) ;
rank: 709
score: 98.88277587890624
patch: double x = exp ( - x ) ;
rank: 710
score: 99.09814453125
patch: return 0 . $NUMBER$ * 0 . 0 ;
rank: 710
score: 99.06271362304688
patch: return 0 . $NUMBER$ * exp ( x ] ) ;
rank: 710
score: 99.00175337357955
patch: return 0 . $NUMBER$ * - x - x ;
rank: 710
score: 98.9944091796875
patch: return 0 . $NUMBER$ + HEX _ $NUMBER$ ;
rank: 710
score: 98.94842529296875
patch: x = exp ( x + x ) ;
rank: 711
score: 99.09792258522727
patch: return exp ( - x ) ; return x ;
rank: 711
score: 99.06907653808594
patch: return 0 . $NUMBER$ ? 0 ;
rank: 711
score: 99.06261189778645
patch: return 0 . $NUMBER$ * x - HEX _ $NUMBER$ ;
rank: 711
score: 98.99328002929687
patch: return ( x - 0 . $NUMBER$ ) ;
rank: 711
score: 98.94825575086806
patch: return x + exp ( x ) ;
rank: 711
score: 98.88092651367188
patch: / * / exp ( - x ) ;
rank: 712
score: 99.09615071614583
patch: return 0 . $NUMBER$ * x ) ;
rank: 712
score: 98.88048638237848
patch: return 0 . $NUMBER$ * $NUMBER$ ; }
rank: 713
score: 99.1466397372159
patch: return Double . parse CaMeL Double ( x ) ;
rank: 713
score: 99.09489302201705
patch: return 0 . $NUMBER$ * exp $NUMBER$ * x ;
rank: 713
score: 99.06626198508523
patch: exp ( exp ( x ) - x ) ;
rank: 713
score: 99.06167602539062
patch: return $NUMBER$ * exp ( - x ) + $NUMBER$ ;
rank: 713
score: 98.98750610351563
patch: return 0 . size ( ) - x ;
rank: 714
score: 99.1462735262784
patch: return - 0 . 0 * exp ( ) ;
rank: 714
score: 99.09489135742187
patch: return 0 . $NUMBER$ * x * x ;
rank: 714
score: 99.0613505045573
patch: return 1 . $NUMBER$ * exp ( - 0 ) ;
rank: 714
score: 98.8798828125
patch: if ( x < 0 . $NUMBER$ ) {
rank: 715
score: 99.09293823242187
patch: return $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ ;
rank: 715
score: 99.00941297743056
patch: return ( - 0 . 0 ) ;
rank: 715
score: 98.94197591145833
patch: x = 0 . 0 * x ;
rank: 715
score: 98.87960815429688
patch: return - x ; }
rank: 716
score: 99.1708475748698
patch: return 0 + exp ( - x ) - x ;
rank: 716
score: 99.14603678385417
patch: return 0 . $NUMBER$ * exp ( ) + 1 ;
rank: 716
score: 99.09231567382812
patch: return 0 . $NUMBER$ * 0 . ) ;
rank: 716
score: 99.06104532877605
patch: n $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 716
score: 99.00784912109376
patch: return Math . round ( - x ) ;
rank: 716
score: 98.98261176215277
patch: return - exp ( - x ) ;
rank: 716
score: 98.93585205078125
patch: return 0 + - x ;
rank: 717
score: 99.16888427734375
patch: return 0 . $NUMBER$ * exp ( 0 . 1 ;
rank: 717
score: 99.14529418945312
patch: / * return 0 . $NUMBER$ * exp ( ) ;
rank: 717
score: 99.06017456054687
patch: return 0 . $NUMBER$ ? 1 . $NUMBER$ ;
rank: 717
score: 99.00001109730114
patch: return 0 . Math * exp ( x ) ;
rank: 717
score: 98.98076171875
patch: return 0 + ( x - x ) ;
rank: 717
score: 98.93350219726562
patch: return 0 . $NUMBER$ * this ;
rank: 718
score: 99.1430155436198
patch: return 0 . $NUMBER$ * max ( - 1 ) ;
rank: 718
score: 99.08832465277777
patch: return 0 . $NUMBER$ * exp x ;
rank: 718
score: 99.0594482421875
patch: return ( exp ( x , x ) ) ;
rank: 718
score: 99.00381469726562
patch: return 0 . 0 - 0 ;
rank: 718
score: 98.97980346679688
patch: return ( x - $NUMBER$ . $NUMBER$ ) ;
rank: 718
score: 98.93289794921876
patch: return * exp ( x , x ) ;
rank: 719
score: 99.14296468098958
patch: return 0 / 0 . $NUMBER$ * exp ( ) ;
rank: 719
score: 99.05850219726562
patch: return 0 . $NUMBER$ + 0 ;
rank: 719
score: 99.05755060369319
patch: return double $NUMBER$ * exp ( - x ) ;
rank: 719
score: 99.00349934895833
patch: return ( - 0 . $NUMBER$ ) ;
rank: 719
score: 98.999267578125
patch: return 1 . 0 , exp ( x ) ;
rank: 719
score: 98.93257446289063
patch: return 0 . $NUMBER$ * x . $NUMBER$ ;
rank: 720
score: 99.00154418945313
patch: return float CaMeL Value ( - x ) ;
rank: 720
score: 98.87360975477431
patch: return exp ( x , 0 ) ;
rank: 721
score: 99.13968912760417
patch: return x . $NUMBER$ * exp ( - 1 ) ;
rank: 721
score: 99.07761840820312
patch: return super . exp ( - x ) ;
rank: 721
score: 99.05555308948864
patch: return 0 . $NUMBER$ + double ( x ) ;
rank: 721
score: 98.93144395616319
patch: return ( - x - $NUMBER$ ) ;
rank: 722
score: 99.1613057454427
patch: * 0 . 0 * exp ( - x ) ;
rank: 722
score: 99.13927205403645
patch: return 0 . $NUMBER$ * exp ( x - x ;
rank: 722
score: 99.07757568359375
patch: return exp ( - - x ) ;
rank: 722
score: 99.05399946732955
patch: return exp ( exp ( - $NUMBER$ ) ) ;
rank: 722
score: 98.99736192491319
patch: return 0 . $NUMBER$ ; } else {
rank: 722
score: 98.96923149956598
patch: return exp ( x - $NUMBER$ ) ;
rank: 723
score: 99.13855997721355
patch: return 0 * exp ( - 1 ) + 1 ;
rank: 723
score: 99.0552978515625
patch: return 0 . $NUMBER$ * 0 . 1 ;
rank: 723
score: 99.05344460227273
patch: return $NUMBER$ . $NUMBER$ * double ( x ) ;
rank: 723
score: 98.96919080946181
patch: return ( x - x ) ; }
rank: 723
score: 98.8694091796875
patch: return 0 . $NUMBER$ * - x ; }
rank: 724
score: 99.05178000710227
patch: return double 1 * exp ( - x ) ;
rank: 724
score: 98.994677734375
patch: return Math . ceil ( - x ) ;
rank: 724
score: 98.96910858154297
patch: return 0 / HEX _ $NUMBER$ ;
rank: 725
score: 99.13702392578125
patch: return 0 . 0 * exp ( ) - x ;
rank: 725
score: 99.07569469105114
patch: return 0 . $NUMBER$ * - $NUMBER$ . $NUMBER$ ;
rank: 725
score: 99.05174560546875
patch: double 1 * exp ( - x ) ;
rank: 725
score: 98.99425159801136
patch: return 0 * exp ( x , 0 ) ;
rank: 725
score: 98.99269409179688
patch: = $NUMBER$ * exp ( - x ) ;
rank: 725
score: 98.96845703125
patch: return ( x - x ) + x ;
rank: 725
score: 98.93065534319196
patch: return - x - x ;
rank: 725
score: 98.86651000976562
patch: x = - exp ( - x ) ;
rank: 726
score: 99.13700358072917
patch: assert 0 . 0 * exp ( - x ) ;
rank: 726
score: 98.99201117621527
patch: return 0 . 0 ; } else {
rank: 726
score: 98.866015625
patch: temp ( x , 0 . $NUMBER$ ) ;
rank: 727
score: 99.05108087713069
patch: return 1 * exp ( - x ) ) ;
rank: 727
score: 98.99303089488636
patch: return 0 . 0 * byte ( x ) ;
rank: 727
score: 98.97897338867188
patch: return 1 . $NUMBER$ ( - x ) ;
rank: 727
score: 98.92925415039062
patch: exp ( - x , - x ) ;
rank: 727
score: 98.86319308810764
patch: return - ( x - $NUMBER$ ) ;
rank: 728
score: 99.13667805989583
patch: return ( 0 . $NUMBER$ * exp ( ) ) ;
rank: 728
score: 99.07213745117187
patch: return Double . exp ( - x ) ;
rank: 728
score: 99.0505038174716
patch: return 0 . $NUMBER$ && exp ( x ) ;
rank: 728
score: 98.9287338256836
patch: return ( x + x ) ;
rank: 729
score: 99.13653564453125
patch: return 0 * exp ( - x - $NUMBER$ ) ;
rank: 729
score: 99.04849853515626
patch: return ( 0 . $NUMBER$ - x ) ;
rank: 729
score: 98.99269797585227
patch: return 0 . $NUMBER$ for exp ( x ) ;
rank: 729
score: 98.97525634765626
patch: double CaMeL Value ( 0 . $NUMBER$ ) ;
rank: 730
score: 99.15268961588542
patch: return 0 * exp ( - x ) . 0 ;
rank: 730
score: 99.13653564453125
patch: return 0 . $NUMBER$ * exp ( x ) * ;
rank: 730
score: 99.0704345703125
patch: return $NUMBER$ . $NUMBER$ * x ;
rank: 730
score: 99.0479403409091
patch: return 0 . $NUMBER$ < exp ( x ) ;
rank: 730
score: 98.92848510742188
patch: result ( x , 0 . 0 ) ;
rank: 731
score: 98.97069091796875
patch: return 1 . 0 ( - x ) ;
rank: 731
score: 98.96196899414062
patch: return ( x - 1 . 0 ) ;
rank: 731
score: 98.86100463867187
patch: return $NUMBER$ - exp ( x ) ; }
rank: 732
score: 99.134326171875
patch: return 0 * exp ( / x ) ;
rank: 732
score: 99.06878662109375
patch: return $NUMBER$ . ( - x ) ;
rank: 732
score: 99.04763793945312
patch: return 0 . $NUMBER$ : 1 . 0 ;
rank: 732
score: 99.04717462713069
patch: break 1 . $NUMBER$ * exp ( x ) ;
rank: 732
score: 98.96195220947266
patch: return x * HEX _ $NUMBER$ ;
rank: 732
score: 98.85565185546875
patch: exp ( x , - x ) ; }
rank: 733
score: 99.13360595703125
patch: return 0 * exp ( - $NUMBER$ ) / x ;
rank: 733
score: 99.06760475852273
patch: return x * exp ( - - x ) ;
rank: 733
score: 98.99076704545455
patch: return 0 . 0 * get ( x ) ;
rank: 733
score: 98.96977403428819
patch: return 0 . 0 + - x ;
rank: 734
score: 99.1482645670573
patch: return 0 . $NUMBER$ + min ( - x ) ;
rank: 734
score: 99.13348388671875
patch: return 0 * exp ( - x ) - 1 ;
rank: 734
score: 99.04679731889205
patch: return 0 . 0 * exp ( - ) ;
rank: 734
score: 98.98993474786931
patch: return 0 . 0 * start ( x ) ;
rank: 734
score: 98.96719360351562
patch: return double CaMeL Value ( ) ;
rank: 734
score: 98.92232937282986
patch: return 0 , exp ( x ) ;
rank: 735
score: 99.13251287286931
patch: return Integer . parse CaMeL Int ( x ) ;
rank: 735
score: 99.04619806463069
patch: return 0 * exp ( 0 . $NUMBER$ ) ;
rank: 735
score: 98.92131212022569
patch: exp ( - x , x ) ;
rank: 735
score: 98.84775797526042
patch: if ( x >= 0 . 0 )
rank: 736
score: 99.1319580078125
patch: return 0 . $NUMBER$ * exp ( / $NUMBER$ ) ;
rank: 736
score: 99.06463623046875
patch: return $NUMBER$ . $NUMBER$ * - x ;
rank: 736
score: 99.0467041015625
patch: return ( exp ( - 1 ) ) ;
rank: 736
score: 99.04451127485795
patch: if ( 0 == x ) { return $NUMBER$ ;
rank: 736
score: 98.84751892089844
patch: return 0 [ 0 ] ; }
rank: 737
score: 99.14539591471355
patch: throw 0 . $NUMBER$ + exp ( - x ) ;
rank: 737
score: 99.1316650390625
patch: return 1 * exp ( - 1 ) ;
rank: 737
score: 99.04628684303977
patch: return ( $NUMBER$ * exp ( x ) ) ;
rank: 737
score: 98.8465805053711
patch: return new double [ x ] ;
rank: 738
score: 99.13163248697917
patch: return 0 * exp ( - x ) - $NUMBER$ ;
rank: 738
score: 98.98903586647727
patch: return 0 . 0 * read ( x ) ;
rank: 738
score: 98.95588514539931
patch: float CaMeL Value ( - x ) ;
rank: 738
score: 98.91820271809895
patch: return x - x ;
rank: 738
score: 98.83985900878906
patch: double exp ( - x ) ;
rank: 739
score: 99.1439208984375
patch: return 0 . $NUMBER$ * exp ( x ) - ;
rank: 739
score: 99.04329833984374
patch: return exp ( - 0 . $NUMBER$ ) ;
rank: 739
score: 98.98875843394886
patch: return 0 . $NUMBER$ * System ( x ) ;
rank: 739
score: 98.95216064453125
patch: return Math . floor ( - x ) ;
rank: 739
score: 98.83694797092014
patch: return 0 . $NUMBER$ ( x ) ;
rank: 740
score: 99.05986328125
patch: return 0 . $NUMBER$ * - x ) ;
rank: 740
score: 99.04249877929688
patch: double $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 740
score: 98.98771528764205
patch: return ( x , 0 . 0 ) ; }
rank: 740
score: 98.95377197265626
patch: return 0 . + exp ( x ) ;
rank: 740
score: 98.951416015625
patch: return 0 . 0 * Na CaMeL N ;
rank: 740
score: 98.83502875434027
patch: return new double [ 0 ] ; }
rank: 741
score: 99.14152018229167
patch: return 0 . $NUMBER$ * exp ( x ) + ;
rank: 741
score: 99.12730712890625
patch: return 0 . 0 * exp ( 0 ;
rank: 741
score: 99.04157049005681
patch: return $NUMBER$ / $NUMBER$ * exp ( x ) ;
rank: 741
score: 98.9537353515625
patch: return ( x - x - x ) ;
rank: 741
score: 98.91381225585937
patch: return ( x , x , x ) ;
rank: 742
score: 99.05719549005681
patch: return 0 . $NUMBER$ * round ( x ) ;
rank: 742
score: 99.0411376953125
patch: double $NUMBER$ * exp ( x ) ;
rank: 742
score: 98.98643909801136
patch: return Float . 0 * exp ( x ) ;
rank: 742
score: 98.94755249023437
patch: return 0 * exp ( double ) x ;
rank: 742
score: 98.91190185546876
patch: return 0 ; } exp ( x ) ;
rank: 742
score: 98.83430989583333
patch: x = $NUMBER$ * HEX _ $NUMBER$ ;
rank: 743
score: 99.1400146484375
patch: return 0 0 * exp ( - x ) ;
rank: 743
score: 99.05719549005681
patch: return $NUMBER$ * exp ( - x ) ; ;
rank: 743
score: 99.0410489169034
patch: return ( x ) + exp ( x ) ;
rank: 743
score: 99.04026100852273
patch: } return 0 . $NUMBER$ * exp ( ) ;
rank: 743
score: 98.986328125
patch: return ( x , exp ( x ) ) ;
rank: 743
score: 98.8332290649414
patch: return - ( - x ) ;
rank: 744
score: 99.03977457682292
patch: return ( ( double ) x ) ;
rank: 744
score: 98.91115112304688
patch: break $NUMBER$ * exp ( - x ) ;
rank: 745
score: 99.05619673295455
patch: return $NUMBER$ . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 745
score: 99.03978729248047
patch: return 0 . $NUMBER$ : 1 ;
rank: 745
score: 99.03672096946023
patch: return 0 . $NUMBER$ * x + - x ;
rank: 745
score: 98.94748263888889
patch: return 0 . $NUMBER$ [ $NUMBER$ ] ;
rank: 745
score: 98.94417317708333
patch: long CaMeL Value ( - x ) ;
rank: 745
score: 98.90770263671875
patch: exp ( x , x , x ) ;
rank: 745
score: 98.83118438720703
patch: exp ( x - x ) ;
rank: 746
score: 99.03703002929687
patch: return 0 . $NUMBER$ * exp ( 1 ;
rank: 746
score: 98.94304809570312
patch: double CaMeL Value ( x , x ) ;
rank: 746
score: 98.90758514404297
patch: x = - x - $NUMBER$ ;
rank: 746
score: 98.82989501953125
patch: return 0 . $NUMBER$ * exp (
rank: 747
score: 99.12447509765624
patch: return 0 ; } else { return 0 ;
rank: 747
score: 99.0537997159091
patch: return 0 . $NUMBER$ ; return 0 . $NUMBER$ ;
rank: 747
score: 98.9832763671875
patch: return 0 . 0 * in ( x ) ;
rank: 747
score: 98.90738525390626
patch: exp ( - x ) ; return x ;
rank: 748
score: 99.13777669270833
patch: return 0 . $NUMBER$ exp exp ( - x ) ;
rank: 748
score: 99.0531494140625
patch: return 0 . start ( - x ) ;
rank: 748
score: 98.9828768643466
patch: return 0 . $NUMBER$ * 1 ( x ) ;
rank: 748
score: 98.94595336914062
patch: return ( x > 0 . 0 ) ;
rank: 748
score: 98.90544976128473
patch: return exp ( x + x ) ;
rank: 749
score: 99.03558959960938
patch: return 0 . $NUMBER$ ? $NUMBER$ . $NUMBER$ ;
rank: 749
score: 99.03443492542614
patch: return ( x ) - exp ( x ) ;
rank: 749
score: 98.94478759765624
patch: return 0 - exp ( x ) ; }
rank: 749
score: 98.9356201171875
patch: return 0 . 0 * this . x ;
rank: 749
score: 98.90531158447266
patch: return 0 double ( x ) ;
rank: 749
score: 98.824951171875
patch: return x - exp ( x ) ;
rank: 750
score: 99.117919921875
patch: return - 1 . $NUMBER$ * exp ( ) ;
rank: 750
score: 99.0511474609375
patch: return 0 . null * exp ( x ) ;
rank: 750
score: 99.03394664417614
patch: return ( exp ( - $NUMBER$ ) ) ; }
rank: 750
score: 99.03269958496094
patch: return 0 . $NUMBER$ : x ;
rank: 750
score: 98.9353515625
patch: return 0 . 0 * x - x ;
rank: 750
score: 98.90513916015625
patch: return 0 . $NUMBER$ * exp ( x ,
rank: 750
score: 98.82198079427083
patch: exp ( - x + x ) ;
rank: 751
score: 99.03255004882813
patch: return 0 . $NUMBER$ + 0 . ) ;
rank: 751
score: 98.93994140625
patch: += exp ( - x ) ;
rank: 752
score: 99.11512340198864
patch: return 0 * exp ( - $NUMBER$ ) ; }
rank: 752
score: 99.03091430664062
patch: return $NUMBER$ . $NUMBER$ + 0 . $NUMBER$ ;
rank: 752
score: 98.9394287109375
patch: return ( x - x + x ) ;
rank: 753
score: 99.13636271158855
patch: return 0 return $NUMBER$ * exp ( - x ) ;
rank: 753
score: 99.11321466619319
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ;
rank: 753
score: 99.0330477627841
patch: return ( exp ( x , 0 ) ) ;
rank: 753
score: 99.02736206054688
patch: return 0 == exp ( - x ) ;
rank: 753
score: 98.93941650390624
patch: return ( x - $NUMBER$ ) - x ;
rank: 753
score: 98.81902204241071
patch: double ( - x ) ;
rank: 754
score: 99.04534301757812
patch: return 0 . $NUMBER$ * 0 * x ;
rank: 754
score: 99.02613661024306
patch: } else { return 0 . $NUMBER$ ;
rank: 754
score: 98.93901231553819
patch: return 1 + exp ( x ) ;
rank: 754
score: 98.9302734375
patch: return 0 ; exp ( - x ) ;
rank: 755
score: 99.10637872869319
patch: return 0 . $NUMBER$ * exp ( - 0 ;
rank: 755
score: 99.02965198863636
patch: return ( x * exp ( x ) ) ;
rank: 755
score: 98.89893798828125
patch: x = exp ( x , 0 ) ;
rank: 755
score: 98.816650390625
patch: return new int [ $NUMBER$ ] ;
rank: 756
score: 99.10380415482955
patch: return 0 ; } else { return 0 ; }
rank: 756
score: 99.02946333451705
patch: return 0 . $NUMBER$ * x ; } else {
rank: 756
score: 99.02428588867187
patch: exp ( exp ( - x ) ) ;
rank: 756
score: 98.93246459960938
patch: return 0 . $NUMBER$ . $NUMBER$ + x ;
rank: 756
score: 98.92864379882812
patch: return $NUMBER$ . $NUMBER$ ( - x ) ;
rank: 756
score: 98.89736502511161
patch: x = x - x ;
rank: 757
score: 99.10169566761364
patch: return 0 * * exp ( - x ) ;
rank: 757
score: 99.04248046875
patch: return 0 . $NUMBER$ * 0 * 0 ;
rank: 757
score: 99.02310180664062
patch: return 0 . $NUMBER$ : $NUMBER$ . $NUMBER$ ;
rank: 757
score: 98.93225860595703
patch: return ( 1 . 0 ) ;
rank: 757
score: 98.9264628092448
patch: return 0 . $NUMBER$ ;
rank: 757
score: 98.81402587890625
patch: return 0 - x ; }
rank: 758
score: 99.1283291903409
patch: return 0 . $NUMBER$ - exp ( $NUMBER$ ) ;
rank: 758
score: 99.1000643643466
patch: $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 758
score: 99.03945090553977
patch: return 0 . exp ( - x ) ) ;
rank: 758
score: 98.93223266601562
patch: return $NUMBER$ . 0 * HEX _ $NUMBER$ ;
rank: 758
score: 98.92542182074652
patch: return 0 . $NUMBER$ * exp $NUMBER$ ;
rank: 758
score: 98.89657592773438
patch: x = exp ( x - x ) ;
rank: 759
score: 99.12787420099431
patch: return 0 . 1 * exp ( $NUMBER$ ) ;
rank: 759
score: 99.02149963378906
patch: return 0 . 0 + x ;
rank: 759
score: 98.92456665039063
patch: return $NUMBER$ . 0 ( - x ) ;
rank: 759
score: 98.81196424696181
patch: temp = exp ( - x ) ;
rank: 760
score: 99.1276522549716
patch: return 0 . $NUMBER$ - exp ( 0 ) ;
rank: 760
score: 99.09919877485795
patch: return Double . $NUMBER$ * exp ( 0 ) ;
rank: 760
score: 99.03838500976562
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 ;
rank: 760
score: 99.0278653231534
patch: return $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 760
score: 99.02025146484375
patch: return $STRING$ * exp ( - x ) ;
rank: 760
score: 98.89399549696181
patch: return exp ( x ) + x ;
rank: 761
score: 99.02020263671875
patch: return Double . max ( - x ) ;
rank: 761
score: 98.95755004882812
patch: return 0 . $NUMBER$ * 1 . 0 ;
rank: 761
score: 98.9306640625
patch: return ( x < 0 . 0 ) ;
rank: 761
score: 98.92403564453124
patch: return 0 . 1 ( - x ) ;
rank: 762
score: 99.12590997869319
patch: return 0 . $NUMBER$ + exp ( 1 ) ;
rank: 762
score: 99.0260009765625
patch: return 0 . $NUMBER$ * ( - 1 ) ;
rank: 762
score: 99.01942138671875
patch: return this . exp ( - x ) ;
rank: 762
score: 98.9306396484375
patch: return $NUMBER$ . - exp ( x ) ;
rank: 762
score: 98.81021457248264
patch: return new double [ x ] ; }
rank: 763
score: 99.09883256392045
patch: return 0 * exp ( - x ) / ;
rank: 763
score: 99.0175537109375
patch: return 0 . $NUMBER$ ? 0 . 0 ;
rank: 763
score: 98.92958374023438
patch: return ( x - 1 . $NUMBER$ ) ;
rank: 763
score: 98.91964111328124
patch: double CaMeL Value ( ) ; } else {
rank: 763
score: 98.89190673828125
patch: return - x * exp ( x ) ;
rank: 763
score: 98.81016540527344
patch: return $NUMBER$ * HEX _ $NUMBER$ ;
rank: 764
score: 99.09810014204545
patch: return 0 * exp ( x ) / $NUMBER$ ;
rank: 764
score: 99.03073952414773
patch: return x * exp ( - x ) ) ;
rank: 764
score: 99.02391468394886
patch: return - ( exp ( - $NUMBER$ ) ) ;
rank: 765
score: 99.03043989701705
patch: return 0 . $NUMBER$ * exp ( 0 . ;
rank: 765
score: 99.01334838867187
patch: return 1 . $NUMBER$ + 0 . $NUMBER$ ;
rank: 765
score: 98.94547119140626
patch: return 0 += exp ( - x ) ;
rank: 765
score: 98.91861572265626
patch: return x . long CaMeL Value ( ) ;
rank: 765
score: 98.80636257595486
patch: temp = new double [ x ] ;
rank: 766
score: 99.09682395241477
patch: return 0 * exp ( x ) * $NUMBER$ ;
rank: 766
score: 99.03017356178977
patch: return $NUMBER$ . $NUMBER$ * exp - - x ;
rank: 766
score: 98.94381374782986
patch: return 0 . max ( x ) ;
rank: 766
score: 98.91484375
patch: return Math . exp ( - x ) ;
rank: 766
score: 98.88604736328125
patch: cosh ( x , 0 . 0 ) ;
rank: 767
score: 98.92772827148437
patch: return 0 . $NUMBER$ . $NUMBER$ * x ;
rank: 767
score: 98.91384887695312
patch: return 0 << exp ( - x ) ;
rank: 768
score: 99.0951815518466
patch: return - 1 * exp ( - 1 ) ;
rank: 768
score: 99.02844848632813
patch: return $NUMBER$ . $NUMBER$ * ( x ) ;
rank: 768
score: 98.99992065429687
patch: return 0 . 0 : 0 . $NUMBER$ ;
rank: 768
score: 98.92752075195312
patch: return 0 . 1 / HEX _ $NUMBER$ ;
rank: 768
score: 98.9110595703125
patch: return Math . max ( - x ) ;
rank: 768
score: 98.87818145751953
patch: return 1 . $NUMBER$ * x ;
rank: 769
score: 99.09400523792614
patch: return 0 . $NUMBER$ * exp ( - 1 )
rank: 769
score: 99.02794799804687
patch: return 0 . 0 * 0 . $NUMBER$ ;
rank: 769
score: 98.92633056640625
patch: return 0 . x ( - x ) ;
rank: 769
score: 98.90941162109375
patch: return 0 % exp ( - x ) ;
rank: 769
score: 98.87765842013889
patch: return ( - x + x ) ;
rank: 770
score: 99.01689009232955
patch: return exp ( - x ) ; } else {
rank: 770
score: 98.92491149902344
patch: return 0 . ( x ) ;
rank: 770
score: 98.79904174804688
patch: temp ( x , x ) ;
rank: 771
score: 99.0916748046875
patch: return $NUMBER$ . $NUMBER$ * exp ( 0 ) ;
rank: 771
score: 99.02631170099431
patch: return 0 . 0 * exp ( x ) )
rank: 771
score: 98.99911499023438
patch: return 0 . $NUMBER$ - $NUMBER$ ;
rank: 771
score: 98.91917588975694
patch: return 0 . 0 [ $NUMBER$ ] ;
rank: 771
score: 98.8760986328125
patch: return 0 / ( - x ) ;
rank: 771
score: 98.79362657335069
patch: return 0 . $NUMBER$ * this ; }
rank: 772
score: 99.01588745117188
patch: return ( double ) exp ( x ) ;
rank: 772
score: 98.99893188476562
patch: return 0 . $NUMBER$ + $NUMBER$ ;
rank: 772
score: 98.91863335503473
patch: return ( - x ) - x ;
rank: 772
score: 98.79176330566406
patch: if ( x <= $NUMBER$ ) {
rank: 773
score: 99.10955810546875
patch: return 0 . $NUMBER$ * exp ( ;
rank: 773
score: 99.02491344105114
patch: / 0 . $NUMBER$ * exp ( x ) ;
rank: 773
score: 99.01584694602273
patch: result = $NUMBER$ * exp ( - x ) ;
rank: 773
score: 98.99757215711806
patch: return exp ( - x ) ) ;
rank: 773
score: 98.79002162388393
patch: x = - x ; }
rank: 774
score: 99.08726917613636
patch: return 1 . $NUMBER$ * exp ( 0 ) ;
rank: 774
score: 99.02358176491477
patch: return 0 . $NUMBER$ * this * - x ;
rank: 774
score: 99.01531982421875
patch: if ( x < $NUMBER$ . 0 ) {
rank: 774
score: 98.91620744977679
patch: return ( - $NUMBER$ ) ;
rank: 775
score: 99.10814319957386
patch: return 0 . 1 exp ( - x ) ;
rank: 775
score: 99.0234375
patch: return $NUMBER$ . x * exp ( x ) ;
rank: 775
score: 99.01469282670455
patch: return 0 . $NUMBER$ * exp $NUMBER$ / x ;
rank: 775
score: 98.99190063476563
patch: return 0 . 0 + exp ( ) ;
rank: 775
score: 98.91099717881944
patch: return exp ( x ) - x ;
rank: 775
score: 98.90061950683594
patch: return 0 . 0 - x ;
rank: 775
score: 98.86734008789062
patch: x += exp ( x ) ;
rank: 775
score: 98.78792898995536
patch: return 0 [ 0 ] ;
rank: 776
score: 99.10671164772727
patch: return 0 . 0 + exp ( $NUMBER$ ) ;
rank: 776
score: 99.08511013454861
patch: return 0 * exp ( - x ;
rank: 776
score: 99.02232666015625
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ *
rank: 776
score: 99.01161887428977
patch: double [ ] = new double [ $NUMBER$ ] ;
rank: 776
score: 98.99093017578124
patch: return $NUMBER$ . $NUMBER$ : 0 . $NUMBER$ ;
rank: 776
score: 98.86705864800348
patch: return ( - x , x ) ;
rank: 776
score: 98.78375922309027
patch: exp ( - 0 . $NUMBER$ ) ;
rank: 777
score: 99.08482055664062
patch: return 0 . 0 / exp ( ) ;
rank: 777
score: 99.0220614346591
patch: return 0 . $NUMBER$ * exp $NUMBER$ - x ;
rank: 777
score: 99.01091974431819
patch: double $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 777
score: 98.90846082899306
patch: return cosh * exp ( x ) ;
rank: 777
score: 98.88796997070312
patch: return 0 . 0 ;
rank: 777
score: 98.86539035373264
patch: 0 * exp ( - x ) ;
rank: 778
score: 99.0220614346591
patch: return 0 . $NUMBER$ * - 0 . ) ;
rank: 778
score: 98.90795220269098
patch: return 0 * HEX _ $NUMBER$ ; }
rank: 778
score: 98.88651529947917
patch: return 0 . 0 - - x ;
rank: 778
score: 98.86470540364583
patch: return 1 - exp ( x ) ;
rank: 778
score: 98.783203125
patch: return 0 . $NUMBER$ * exp ( -
rank: 779
score: 99.08369584517045
patch: . return 0 * exp ( - x ) ;
rank: 779
score: 99.0216064453125
patch: 0 . 0 * exp ( - x ) ;
rank: 779
score: 99.0084561434659
patch: return $NUMBER$ * exp ( - $NUMBER$ ) ; }
rank: 779
score: 98.98822631835938
patch: return 0 . $NUMBER$ - exp ( ) ;
rank: 779
score: 98.90706634521484
patch: return ( 0 . $NUMBER$ ) ;
rank: 779
score: 98.88443756103516
patch: return - 0 . $NUMBER$ ) ;
rank: 779
score: 98.86197335379464
patch: x = x + x ;
rank: 780
score: 99.08042214133523
patch: return 0 . $NUMBER$ / exp ( $NUMBER$ ) ;
rank: 780
score: 99.00774536132812
patch: return ( exp ( - 0 ) ) ;
rank: 780
score: 98.98570421006944
patch: exp ( exp ( x ) ) ;
rank: 780
score: 98.90696207682292
patch: return ( - $NUMBER$ . $NUMBER$ ) ;
rank: 780
score: 98.88163248697917
patch: double CaMeL Value ( ) + x ;
rank: 780
score: 98.86032443576389
patch: return - ( x + x ) ;
rank: 780
score: 98.78157261439732
patch: exp ( x ) ; }
rank: 781
score: 99.01528591579861
patch: return 0 . $NUMBER$ * 0 ) ;
rank: 781
score: 99.00584411621094
patch: throw new Exception ( $STRING$ ) ;
rank: 781
score: 98.98486938476563
patch: return 0 . $NUMBER$ : 1 . 1 ;
rank: 782
score: 99.07667125355114
patch: return 0 . 0 / exp ( 0 ) ;
rank: 782
score: 99.0058260830966
patch: return ( exp ( - x ) ) ; }
rank: 782
score: 98.84781901041667
patch: return - 0 . $NUMBER$ * x ;
rank: 782
score: 98.77972412109375
patch: return new exp ( - x ) ;
rank: 783
score: 99.0075439453125
patch: return $NUMBER$ * max ( - x ) ;
rank: 783
score: 99.00514914772727
patch: return ( ( double ) 0 . $NUMBER$ ) ;
rank: 784
score: 99.0946044921875
patch: return 0 . 1 * exp ( 0 ) ;
rank: 784
score: 99.00438343394886
patch: return 0 . ] * exp ( x ) ;
rank: 784
score: 98.98259887695312
patch: return 1 . $NUMBER$ : 0 . $NUMBER$ ;
rank: 784
score: 98.89584011501736
patch: return ( - $NUMBER$ . 0 ) ;
rank: 784
score: 98.84666612413194
patch: x = - ( - x ) ;
rank: 784
score: 98.777587890625
patch: double x = exp ( x ) ;
rank: 785
score: 99.00389515269886
patch: return ( ( double ) 0 . 0 ) ;
rank: 785
score: 98.98109741210938
patch: return 0 * exp ( * x ) ;
rank: 785
score: 98.92486572265625
patch: return 0 . $NUMBER$ * this - x ;
rank: 785
score: 98.8934097290039
patch: return 0 . size ( ) ;
rank: 786
score: 99.07064819335938
patch: return 1 . 0 * exp ( ) ;
rank: 786
score: 99.00388405539773
patch: return ( double ) exp ( - $NUMBER$ ) ;
rank: 786
score: 98.9805679321289
patch: return 0 . $NUMBER$ ? $NUMBER$ ;
rank: 786
score: 98.84630584716797
patch: return ( x > $NUMBER$ ) ;
rank: 786
score: 98.77389526367188
patch: return 0 . - x ; }
rank: 787
score: 99.06864790482955
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 787
score: 98.979736328125
patch: return - $NUMBER$ + exp ( x ) ;
rank: 787
score: 98.89262390136719
patch: return - exp ( x ) ;
rank: 787
score: 98.87448459201389
patch: return 0 . $NUMBER$ , - x ;
rank: 787
score: 98.77205403645833
patch: exp ( x , 0 ) ; }
rank: 788
score: 99.06737670898437
patch: return 1 * exp ( - $NUMBER$ ) ;
rank: 788
score: 99.00304066051136
patch: return 0 / $NUMBER$ * exp ( x ) ;
rank: 788
score: 99.00260009765626
patch: return 0 . round ( - x ) ;
rank: 788
score: 98.84093560112848
patch: return 0 - ( - x ) ;
rank: 788
score: 98.77191925048828
patch: exp ( x - $NUMBER$ ) ;
rank: 789
score: 99.06635076349431
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 789
score: 99.00243030894886
patch: return exp ( - $NUMBER$ ) ; } else {
rank: 789
score: 98.97753295898437
patch: return 0 . ) + 0 . $NUMBER$ ;
rank: 789
score: 98.87013753255208
patch: return 0 . 0 ( x ) ;
rank: 790
score: 98.9770736694336
patch: return 0 . $NUMBER$ / 0 ;
rank: 790
score: 98.86747741699219
patch: return ( - - x ) ;
rank: 790
score: 98.83771514892578
patch: return 0 + x - $NUMBER$ ;
rank: 790
score: 98.77152506510417
patch: temp ( x , - x ) ;
rank: 791
score: 98.99992065429687
patch: double 0 * exp ( - $NUMBER$ ) ;
rank: 791
score: 98.998779296875
patch: return 0 . $NUMBER$ * - - x ;
rank: 791
score: 98.83696746826172
patch: return 0 + x + x ;
rank: 791
score: 98.77136993408203
patch: return 0 . $NUMBER$ ; } }
rank: 792
score: 98.99602661132812
patch: return $NUMBER$ . $NUMBER$ * exp - x ;
rank: 792
score: 98.9768310546875
patch: return exp ( - x ) * x ;
rank: 792
score: 98.86245388454861
patch: return Math . abs ( x ) ;
rank: 792
score: 98.83513047960069
patch: return - x - x - x ;
rank: 793
score: 99.0845458984375
patch: return 0 + exp ( - 1 ) ;
rank: 793
score: 98.99810236150569
patch: return ( exp ( x - $NUMBER$ ) ) ;
rank: 793
score: 98.97614881727431
patch: break 0 * exp ( x ) ;
rank: 793
score: 98.91336669921876
patch: return 0 . 0 double ( x ) ;
rank: 793
score: 98.83504909939236
patch: x = x + x + x ;
rank: 793
score: 98.77015686035156
patch: if ( x <= 0 ) {
rank: 794
score: 99.08339621803977
patch: return 0 . 0 + exp ( 0 ) ;
rank: 794
score: 98.991259765625
patch: return $NUMBER$ . ( - - x ) ;
rank: 794
score: 98.97576226128473
patch: return Double . exp ( x ) ;
rank: 794
score: 98.88093397352431
patch: return new double [ 1 ] ; }
rank: 794
score: 98.85902235243056
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 794
score: 98.76929473876953
patch: return - x - x ; }
rank: 795
score: 98.9912353515625
patch: return $NUMBER$ . abs ( - x ) ;
rank: 795
score: 98.85801188151042
patch: return 0 . 0 * exp $NUMBER$ ;
rank: 795
score: 98.76860215928819
patch: exp ( - x - $NUMBER$ ) ;
rank: 796
score: 99.06061345880681
patch: return Double . value CaMeL Of ( 0 ) ;
rank: 796
score: 98.99658203125
patch: return ( exp ( x , $NUMBER$ ) ) ;
rank: 796
score: 98.99107055664062
patch: 0 . $NUMBER$ * exp ( x ) ;
rank: 796
score: 98.97551812065973
patch: return 0 . $NUMBER$ - - x ;
rank: 796
score: 98.76708984375
patch: if ( x < 0 . $NUMBER$ )
rank: 797
score: 98.99629350142045
patch: return $NUMBER$ * exp ( x ) + $NUMBER$ ;
rank: 797
score: 98.9752197265625
patch: return $NUMBER$ . $NUMBER$ * exp ( x )
rank: 797
score: 98.87783474392361
patch: return ( x - $NUMBER$ ) ; }
rank: 797
score: 98.85283551897321
patch: double CaMeL Value ( ) ;
rank: 797
score: 98.82865397135417
patch: return - x - x + x ;
rank: 797
score: 98.76673126220703
patch: return ( - x ) ; }
rank: 798
score: 99.0816983309659
patch: return 0 . $NUMBER$ * exp ( length ) ;
rank: 798
score: 99.05843505859374
patch: return $NUMBER$ . 0 * exp ( ) ;
rank: 798
score: 98.9857666015625
patch: return $NUMBER$ . max ( - x ) ;
rank: 798
score: 98.87725151909723
patch: result = new double [ $NUMBER$ ] ;
rank: 798
score: 98.76588270399306
patch: return 0 . $NUMBER$ * true ; }
rank: 799
score: 98.99546120383523
patch: return 0 . $NUMBER$ + - ( x ) ;
rank: 799
score: 98.9838623046875
patch: return 0 . format ( - x ) ;
rank: 799
score: 98.97239990234375
patch: return 0 . $NUMBER$ ? exp ( x )
rank: 799
score: 98.87080383300781
patch: return double ( - x ) ;
rank: 799
score: 98.82769775390625
patch: return 0 ( - x ) ;
rank: 799
score: 98.76559787326389
patch: return - ( - x ) ; }
rank: 800
score: 98.9950838955966
patch: return ( exp ( x ) * $NUMBER$ ) ;
rank: 800
score: 98.98231201171875
patch: return $NUMBER$ . get ( - x ) ;
rank: 800
score: 98.97178344726562
patch: return 0 . 1 * exp ( ) ;
rank: 800
score: 98.86945936414931
patch: return 0 . $NUMBER$ [ 0 ] ;
rank: 800
score: 98.84663391113281
patch: * exp ( - x ) ;
rank: 801
score: 99.0567959872159
patch: return 0 . 0 * exp ( ) ; }
rank: 801
score: 98.99395197088069
patch: return $NUMBER$ * exp ( x + $NUMBER$ ) ;
rank: 802
score: 99.07660466974431
patch: return 0 . $NUMBER$ exp ( - $NUMBER$ ) ;
rank: 802
score: 99.05478737571023
patch: return 0 * exp ( x ) / x ;
rank: 802
score: 98.99347478693181
patch: return x double $NUMBER$ * exp ( x ) ;
rank: 802
score: 98.8259506225586
patch: return 0 . 1 * x ;
rank: 802
score: 98.76127115885417
patch: return 0 . 0 * x ; }
rank: 803
score: 99.07563920454545
patch: return 0 * exp ( 0 . 0 ) ;
rank: 803
score: 99.0535555752841
patch: return 0 * exp ( 0 ) * x ;
rank: 803
score: 98.86811659071181
patch: return x * HEX _ $NUMBER$ ; }
rank: 803
score: 98.84358045789931
patch: double CaMeL Value ( ) - x ;
rank: 803
score: 98.82590060763889
patch: return ( - x ) + x ;
rank: 803
score: 98.76069471571181
patch: temp = new int [ $NUMBER$ ] ;
rank: 804
score: 99.07529518821023
patch: return 0 * exp ( x ) . 0 ;
rank: 804
score: 99.0533114346591
patch: return 0 * exp ( - 1 ) ) ;
rank: 804
score: 98.97789916992187
patch: return 0 . ( - x ) ) ;
rank: 804
score: 98.96671142578126
patch: return 1 . $NUMBER$ * exp ( x )
rank: 804
score: 98.9017822265625
patch: return - exp ( x , x ) ;
rank: 804
score: 98.86494276258681
patch: return 0 / HEX _ $NUMBER$ ; }
rank: 804
score: 98.84341769748264
patch: double CaMeL Value ( ) * x ;
rank: 805
score: 99.07379705255681
patch: return 0 . $NUMBER$ return exp ( x ) ;
rank: 805
score: 98.9895263671875
patch: return ( exp ( x ) ) ; }
rank: 805
score: 98.86114501953125
patch: return 0 . $NUMBER$ / - x ;
rank: 806
score: 98.98918999565973
patch: double 0 * exp ( x ) ;
rank: 806
score: 98.97420654296874
patch: return 0 . $NUMBER$ * exp - $NUMBER$ ;
rank: 806
score: 98.96584743923611
patch: } return exp ( - x ) ;
rank: 806
score: 98.82482147216797
patch: return 0 . $NUMBER$ * false ;
rank: 806
score: 98.75687662760417
patch: return ( x , x ) ; }
rank: 807
score: 99.04590521918402
patch: return 0 * exp ( 1 ) ;
rank: 807
score: 98.97379760742187
patch: return 0 . ) * 0 . $NUMBER$ ;
rank: 807
score: 98.96480102539063
patch: return 0 . 0 + 0 . 0 ;
rank: 807
score: 98.84123399522569
patch: return ( double ) 0 . $NUMBER$ ;
rank: 808
score: 98.98447265625
patch: if ( x > 0 . $NUMBER$ ) {
rank: 808
score: 98.96419677734374
patch: return 0 . 1 + 0 . $NUMBER$ ;
rank: 808
score: 98.81842803955078
patch: return x + x + x ;
rank: 809
score: 98.83894178602431
patch: return ( double ) 0 . 0 ;
rank: 809
score: 98.81818389892578
patch: return 0 . $NUMBER$ * 1 ;
rank: 809
score: 98.7520751953125
patch: return $NUMBER$ * HEX _ $NUMBER$ ; }
rank: 810
score: 99.038037109375
patch: return 0 ) * exp ( x ) ;
rank: 810
score: 98.97944946289063
patch: result = $NUMBER$ * exp ( x ) ;
rank: 810
score: 98.96341552734376
patch: return $NUMBER$ + exp ( x ) ) ;
rank: 810
score: 98.8536376953125
patch: return ( 1 . $NUMBER$ ) ;
rank: 810
score: 98.81684875488281
patch: return 0 - x - x ;
rank: 811
score: 98.9786865234375
patch: return exp ( x ) ; } else {
rank: 811
score: 98.96328735351562
patch: return 0 . value ( - x ) ;
rank: 811
score: 98.85358344184027
patch: return exp ( 0 . 0 ) ;
rank: 811
score: 98.83857557508681
patch: / * exp ( - x ) ;
rank: 812
score: 99.03055419921876
patch: assert $NUMBER$ * exp ( - x ) ;
rank: 812
score: 98.96611328125
patch: return 0 . copy ( - x ) ;
rank: 812
score: 98.85261366102431
patch: return 0 . 0 * x $NUMBER$ ;
rank: 812
score: 98.81591796875
patch: return 0 . $NUMBER$ * true ;
rank: 813
score: 98.96599731445312
patch: return $NUMBER$ . $NUMBER$ * x * x ;
rank: 813
score: 98.96237521701389
patch: return Double . max ( x ) ;
rank: 813
score: 98.89403076171875
patch: return Math . cosh ( - x ) ;
rank: 813
score: 98.8525619506836
patch: return 0 . $NUMBER$ / x ;
rank: 813
score: 98.83228302001953
patch: double CaMeL Value ( ) ; ;
rank: 813
score: 98.815185546875
patch: return 0 + ( - x ) ;
rank: 813
score: 98.74972195095486
patch: return ( 0 . 0 ) ; }
rank: 814
score: 99.06752707741477
patch: return 0 . $NUMBER$ * exp ( x ) }
rank: 814
score: 98.96195678710937
patch: return 0 . $NUMBER$ / 0 . $NUMBER$ ;
rank: 814
score: 98.82954237196181
patch: return 0 . 0 / - x ;
rank: 814
score: 98.74946594238281
patch: / exp ( - x ) ;
rank: 815
score: 99.0671719637784
patch: return 0 . length * exp ( x ) ;
rank: 815
score: 98.97445068359374
patch: return ( x ) + 0 . $NUMBER$ ;
rank: 815
score: 98.85117594401042
patch: return 0 [ $NUMBER$ ] + x ;
rank: 815
score: 98.82951524522569
patch: return double CaMeL Value ( x ) ;
rank: 815
score: 98.81192779541016
patch: return cosh ( - x ) ;
rank: 815
score: 98.74772135416667
patch: exp ( - 0 . 0 ) ;
rank: 816
score: 98.96189575195312
patch: return 0 . $NUMBER$ * this . 0 ;
rank: 816
score: 98.84612358940973
patch: return exp ( - $NUMBER$ ) ; }
rank: 816
score: 98.82884385850694
patch: * / exp ( - x ) ;
rank: 817
score: 99.05945502387152
patch: return 0 exp ( - x ) ;
rank: 817
score: 99.01367797851563
patch: return 0 . $NUMBER$ * exp ( - ;
rank: 817
score: 98.97203979492187
patch: throw new Exception ( $STRING$ , x ) ;
rank: 817
score: 98.96054077148438
patch: return 0 . $NUMBER$ : 1 . ) ;
rank: 817
score: 98.8265151977539
patch: / * return 0 . $NUMBER$ ;
rank: 817
score: 98.8109130859375
patch: exp ( - x ) + x ;
rank: 818
score: 99.01256103515625
patch: return - 1 * exp ( x ) ;
rank: 818
score: 98.970654296875
patch: return 0 . $NUMBER$ + x - x ;
rank: 818
score: 98.95990753173828
patch: return 0 . $NUMBER$ ; * ;
rank: 818
score: 98.95878092447917
patch: return $NUMBER$ exp ( - x ) ;
rank: 818
score: 98.88789198133681
patch: return 0 += exp ( x ) ;
rank: 818
score: 98.74336751302083
patch: return cosh ( x , x ) ;
rank: 819
score: 99.01136610243056
patch: return 0 * exp ( - 1 ;
rank: 819
score: 98.95989379882812
patch: return 0 + exp ( x ) ) ;
rank: 820
score: 99.05503540039062
patch: throw new Runtime CaMeL Exception ( x ) ;
rank: 820
score: 99.00908813476562
patch: return 0 * exp ( 0 ) ; }
rank: 820
score: 98.9687255859375
patch: return ( ( double ) - x ) ;
rank: 820
score: 98.95388454861111
patch: return 0 . $NUMBER$ * exp ) ;
rank: 820
score: 98.84010823567708
patch: return 0 . $NUMBER$ [ x ] ;
rank: 820
score: 98.82009548611111
patch: super . exp ( - x ) ;
rank: 820
score: 98.80670844184027
patch: return 0 ( x , x ) ;
rank: 821
score: 98.95902709960937
patch: return 0 . 0 ? 0 . $NUMBER$ ;
rank: 821
score: 98.83954535590277
patch: return ( x - - x ) ;
rank: 821
score: 98.80651177300348
patch: exp ( - x ) ; break ;
rank: 822
score: 98.9650650024414
patch: throw new Exception ( x ) ;
rank: 822
score: 98.95767822265626
patch: return 0 . $NUMBER$ - ( x ) ;
rank: 822
score: 98.81540256076389
patch: return 0 . $NUMBER$ * exp 1 ;
rank: 822
score: 98.80648040771484
patch: return 0 - x + x ;
rank: 822
score: 98.73285784040179
patch: temp ( - x ) ;
rank: 823
score: 98.81360541449652
patch: double CaMeL Value ( ) ; * /
rank: 823
score: 98.73229217529297
patch: return 0 . 0 * exp ;
rank: 824
score: 99.0447006225586
patch: return 0 = 0 . $NUMBER$ ;
rank: 824
score: 98.96384887695312
patch: return x + exp ( - $NUMBER$ ) ;
rank: 824
score: 98.95574273003473
patch: return 0 . $NUMBER$ ; * * *
rank: 824
score: 98.95267062717014
patch: return 0 . $NUMBER$ ; return x ;
rank: 824
score: 98.811279296875
patch: return new Double ( - x ) ;
rank: 824
score: 98.80330657958984
patch: return * exp ( x ) ;
rank: 824
score: 98.73011125837054
patch: double x = - x ;
rank: 825
score: 99.00421142578125
patch: return 1 . $NUMBER$ * exp ( x ;
rank: 825
score: 98.95382690429688
patch: return 0 . $NUMBER$ ? x : x ;
rank: 825
score: 98.95215454101563
patch: return 0 . 0 * exp - x ;
rank: 825
score: 98.83189561631944
patch: return 0 . $NUMBER$ * x $NUMBER$ ;
rank: 825
score: 98.80196707589286
patch: return - x + x ;
rank: 825
score: 98.72956848144531
patch: if ( x >= 0 ) {
rank: 826
score: 99.04310302734375
patch: return 0 * min ( - x ) ;
rank: 826
score: 98.98890380859375
patch: return 0 * exp ( $NUMBER$ ) ; }
rank: 826
score: 98.96046142578125
patch: if ( x > $NUMBER$ . 0 ) {
rank: 826
score: 98.95331420898438
patch: return 0 . $NUMBER$ | 0 . 0 ;
rank: 826
score: 98.95200805664062
patch: return $NUMBER$ * 0 . $NUMBER$ * 0 ;
rank: 826
score: 98.8079605102539
patch: double CaMeL Value ( 0 ) ;
rank: 826
score: 98.80154854910714
patch: return - x - $NUMBER$ ;
rank: 827
score: 98.9830322265625
patch: return 0 * 0 * exp ( ) ;
rank: 827
score: 98.95236206054688
patch: return 0 * exp ( x ) ; ;
rank: 827
score: 98.86984592013889
patch: return 0 == exp ( x ) ;
rank: 827
score: 98.80746799045139
patch: return 0 . 0 , - x ;
rank: 827
score: 98.72799682617188
patch: if ( x >= $NUMBER$ ) {
rank: 828
score: 98.9818359375
patch: return 0 * max ( - x ) ;
rank: 829
score: 98.95706176757812
patch: return exp ( x , - 1 ) ;
rank: 829
score: 98.82560899522569
patch: return 0 . 0 / x $NUMBER$ ;
rank: 829
score: 98.8011474609375
patch: return x + x ;
rank: 829
score: 98.72395324707031
patch: return 0 . 0 ; } }
rank: 830
score: 98.98088989257812
patch: return 0 * exp ( + x ) ;
rank: 830
score: 98.80227322048611
patch: return ( - x ) * x ;
rank: 830
score: 98.79930962456598
patch: exp ( x ) ; return 0 ;
rank: 830
score: 98.72333526611328
patch: double cosh ( - x ) ;
rank: 831
score: 98.93743896484375
patch: return 0 . $NUMBER$ ; * /
rank: 831
score: 98.82360076904297
patch: return 0 . 0 / $NUMBER$ ;
rank: 831
score: 98.79634094238281
patch: return 0 . 0 / 0 ;
rank: 831
score: 98.72286987304688
patch: double ( x , x ) ;
rank: 832
score: 98.94945678710937
patch: return ( ( double ) - $NUMBER$ ) ;
rank: 832
score: 98.94727783203125
patch: return ) * exp ( - x ) ;
rank: 832
score: 98.82261657714844
patch: return 0 + HEX _ $NUMBER$ ;
rank: 832
score: 98.79827202690973
patch: result = exp ( - x ) ;
rank: 832
score: 98.71945190429688
patch: temp = exp ( x ) ;
rank: 833
score: 98.97906494140625
patch: return 0 $NUMBER$ * exp ( x ) ;
rank: 833
score: 98.9493896484375
patch: return 0 . $NUMBER$ + x - $NUMBER$ ;
rank: 833
score: 98.82261149088542
patch: return ( - 1 . 0 ) ;
rank: 833
score: 98.79604085286458
patch: double CaMeL Value ( x ) ; ;
rank: 834
score: 98.9422119140625
patch: return false * exp ( - x ) ;
rank: 834
score: 98.79571533203125
patch: return x ( - x ) ;
rank: 834
score: 98.7944844563802
patch: return 0 / x ;
rank: 834
score: 98.71786499023438
patch: return ( x , 0 ) ;
rank: 835
score: 99.02749633789062
patch: throw new Runtime CaMeL Exception ( 0 ) ;
rank: 835
score: 98.97556762695312
patch: return Double . $NUMBER$ * exp ( ) ;
rank: 835
score: 98.94657592773437
patch: return double $NUMBER$ * exp ( x ) ;
rank: 835
score: 98.91720581054688
patch: return 0 . $NUMBER$ ? x ;
rank: 835
score: 98.82130940755208
patch: return double ( x - x ) ;
rank: 835
score: 98.79266357421875
patch: return - - 0 . $NUMBER$ ;
rank: 836
score: 98.94642944335938
patch: return $NUMBER$ * exp ( - 0 ) ;
rank: 836
score: 98.93992919921875
patch: return 0 . $NUMBER$ * double - x ;
rank: 836
score: 98.91691589355469
patch: return 1 . $NUMBER$ * 0 ;
rank: 836
score: 98.84843614366319
patch: return exp ( x , $NUMBER$ ) ;
rank: 836
score: 98.78825378417969
patch: return x - x - x ;
rank: 837
score: 98.93983764648438
patch: return $NUMBER$ * exp exp ( x ) ;
rank: 837
score: 98.78636338975694
patch: return - x + x + x ;
rank: 837
score: 98.70194498697917
patch: temp = - x ;
rank: 838
score: 99.018505859375
patch: return 0 != exp ( - x ) ;
rank: 838
score: 98.97151489257813
patch: return 0 * exp ( / $NUMBER$ ) ;
rank: 838
score: 98.944921875
patch: return ( 0 . 0 - x ) ;
rank: 838
score: 98.81898328993056
patch: return - $NUMBER$ * HEX _ $NUMBER$ ;
rank: 838
score: 98.78578694661458
patch: break $NUMBER$ * exp ( x ) ;
rank: 838
score: 98.69607543945312
patch: double ( x ) ;
rank: 839
score: 98.93499145507812
patch: return 0 . $NUMBER$ * exp 0 ) ;
rank: 839
score: 98.8427734375
patch: return 0 . min ( x ) ;
rank: 839
score: 98.69338989257812
patch: x = ( - x ) ;
rank: 840
score: 99.01380004882813
patch: return 0 * exp ( - start ) ;
rank: 840
score: 98.93150634765625
patch: return ( 0 . 0 * x ) ;
rank: 840
score: 98.91077338324652
patch: return exp ( x ) * x ;
rank: 840
score: 98.78236897786458
patch: x = x - x - x ;
rank: 841
score: 98.96883138020833
patch: return 0 . 0 * exp ( ;
rank: 841
score: 98.81395806206598
patch: return ( - 1 . $NUMBER$ ) ;
rank: 841
score: 98.78167724609375
patch: cosh ( - x ) ;
rank: 841
score: 98.68605259486607
patch: return x - x ; }
rank: 842
score: 98.92835828993056
patch: return $NUMBER$ . exp ( x ) ;
rank: 842
score: 98.90211317274306
patch: return 0 . $NUMBER$ ] * x ;
rank: 842
score: 98.78826904296875
patch: throw new Error ( $STRING$ ) ;
rank: 842
score: 98.77802385602679
patch: ya ( - x ) ;
rank: 843
score: 99.00707397460937
patch: continue 0 * exp ( - x ) ;
rank: 843
score: 98.96412963867188
patch: return Double . $NUMBER$ * exp ( x ;
rank: 843
score: 98.82845730251736
patch: return 0 . $NUMBER$ * false ; }
rank: 843
score: 98.78470865885417
patch: return 0 * exp ( - x )
rank: 843
score: 98.68424987792969
patch: ya ( x , x ) ;
rank: 844
score: 99.00184326171875
patch: return 0 return exp ( - x ) ;
rank: 844
score: 98.9275146484375
patch: return ( x - x ) * x ;
rank: 844
score: 98.81050872802734
patch: return ( x - 1 ) ;
rank: 844
score: 98.78073459201389
patch: return ( - x ) / $NUMBER$ ;
rank: 845
score: 98.9988021850586
patch: return 0 . $NUMBER$ return 0 ;
rank: 845
score: 98.96358235677083
patch: return $NUMBER$ * exp ( 0 ) ;
rank: 845
score: 98.93756713867188
patch: return ( - $NUMBER$ ) ; } else {
rank: 845
score: 98.89653184678819
patch: return 0 . 0 * x ) ;
rank: 845
score: 98.81012834821429
patch: += exp ( x ) ;
rank: 845
score: 98.68379211425781
patch: return - x ; } else {
rank: 846
score: 98.99603271484375
patch: return 0 . $NUMBER$ + 0 . length ;
rank: 846
score: 98.95980834960938
patch: return $NUMBER$ * exp ( ) ;
rank: 846
score: 98.896240234375
patch: return 0 . $NUMBER$ * 0 ; ;
rank: 846
score: 98.81863742404514
patch: return 0 . $NUMBER$ * 0 ; }
rank: 846
score: 98.77863905164931
patch: return 1 . $NUMBER$ * - x ;
rank: 847
score: 98.99591064453125
patch: return 0 . 1 exp ( x ) ;
rank: 847
score: 98.95847574869792
patch: return 0 * exp ( $STRING$ ) ;
rank: 847
score: 98.93419189453125
patch: return 0 . $NUMBER$ * $NUMBER$ / x ;
rank: 847
score: 98.80579376220703
patch: return 0 . $NUMBER$ / $NUMBER$ ;
rank: 847
score: 98.68178013392857
patch: hi ( - x ) ;
rank: 848
score: 98.99574584960938
patch: return 0 . $NUMBER$ - 0 . $NUMBER$ ;
rank: 848
score: 98.95636596679688
patch: return 0 . $NUMBER$ * Double . $NUMBER$ ;
rank: 848
score: 98.9335205078125
patch: return $NUMBER$ / exp ( - 1 ) ;
rank: 848
score: 98.92484130859376
patch: return 0 . - ( - x ) ;
rank: 848
score: 98.67817905970982
patch: x = x - $NUMBER$ ;
rank: 849
score: 98.92398071289062
patch: return $NUMBER$ * exp ( - x ) .
rank: 849
score: 98.77506256103516
patch: return 0 . 0 * this ;
rank: 849
score: 98.67799377441406
patch: exp ( 0 . $NUMBER$ ) ;
rank: 850
score: 98.93186645507812
patch: if ( x != 0 . 0 ) {
rank: 850
score: 98.92307739257812
patch: return null . exp ( - x ) ;
rank: 850
score: 98.79803466796875
patch: return 0 / $NUMBER$ . $NUMBER$ ;
rank: 850
score: 98.77046966552734
patch: return ( x / $NUMBER$ ) ;
rank: 850
score: 98.76249476841518
patch: return 0 - - x ;
rank: 851
score: 98.9316162109375
patch: return ( x ) - 0 . $NUMBER$ ;
rank: 851
score: 98.92184448242188
patch: return $NUMBER$ * 0 . $NUMBER$ ;
rank: 851
score: 98.88822428385417
patch: } return 0 . $NUMBER$ * 0 ;
rank: 851
score: 98.79585484095982
patch: exp ( - $NUMBER$ ) ;
rank: 851
score: 98.76844787597656
patch: return - 0 . 0 ) ;
rank: 851
score: 98.75662994384766
patch: return x - x + x ;
rank: 851
score: 98.67204284667969
patch: return 0 . $NUMBER$ ) ; }
rank: 852
score: 98.98982069227431
patch: return 0 . 0 * exp 0 ;
rank: 852
score: 98.88434600830078
patch: return 0 * 0 . $NUMBER$ ;
rank: 852
score: 98.80439758300781
patch: return 0 . 0 * $NUMBER$ ;
rank: 852
score: 98.76561737060547
patch: return - 1 . $NUMBER$ ) ;
rank: 852
score: 98.7532730102539
patch: return 0 + x - x ;
rank: 853
score: 98.94860229492187
patch: return 0 * abs ( - x ) ;
rank: 853
score: 98.92929077148438
patch: return exp ( - 1 . 0 ) ;
rank: 853
score: 98.91636827256944
patch: return x . ( - x ) ;
rank: 853
score: 98.79239654541016
patch: return cosh * HEX _ $NUMBER$ ;
rank: 854
score: 98.94727172851563
patch: return 0 . 0 * exp ( $NUMBER$ ;
rank: 854
score: 98.9290283203125
patch: double 1 * exp ( - $NUMBER$ ) ;
rank: 854
score: 98.91597290039063
patch: return $NUMBER$ = exp ( - x ) ;
rank: 854
score: 98.87890625
patch: return 0 . $NUMBER$ ; break ;
rank: 854
score: 98.80354817708333
patch: return 0 >= exp ( x ) ;
rank: 854
score: 98.75443812779018
patch: return - 0 . $NUMBER$ ;
rank: 854
score: 98.66886901855469
patch: double ( x , 0 ) ;
rank: 855
score: 98.92754516601562
patch: return $NUMBER$ . $NUMBER$ * x - x ;
rank: 855
score: 98.78727722167969
patch: return 0 . 1 + x ;
rank: 855
score: 98.74566650390625
patch: return ( x ) ;
rank: 855
score: 98.66792297363281
patch: / / exp ( x ) ;
rank: 856
score: 98.94630940755208
patch: $NUMBER$ * exp ( - x ) ;
rank: 856
score: 98.87683868408203
patch: throw exp ( - x ) ;
rank: 856
score: 98.78446197509766
patch: { exp ( - x ) ;
rank: 856
score: 98.74946594238281
patch: double x = 0 . $NUMBER$ ;
rank: 856
score: 98.66486358642578
patch: x = 0 . $NUMBER$ ; }
rank: 857
score: 98.77876281738281
patch: return new exp ( x ) ;
rank: 857
score: 98.74898529052734
patch: return 0 . 0 - $NUMBER$ ;
rank: 857
score: 98.7409896850586
patch: return x - x - $NUMBER$ ;
rank: 857
score: 98.6648178100586
patch: return $NUMBER$ . $NUMBER$ * exp ;
rank: 858
score: 98.978076171875
patch: return 0 < exp ( - x ) ;
rank: 858
score: 98.92584228515625
patch: return 0 , exp ( - $NUMBER$ ) ;
rank: 858
score: 98.87259250217014
patch: return Double . abs ( x ) ;
rank: 858
score: 98.74693298339844
patch: double CaMeL Value ( $NUMBER$ ) ;
rank: 858
score: 98.66462707519531
patch: temp ( x , 0 ) ;
rank: 859
score: 98.97747802734375
patch: return 0 . length ( ) ;
rank: 859
score: 98.79616970486111
patch: return 0 . abs ( x ) ;
rank: 859
score: 98.76509094238281
patch: return $NUMBER$ . $NUMBER$ + x ;
rank: 859
score: 98.74609375
patch: f ( - x ) ;
rank: 859
score: 98.7402572631836
patch: x = - x - 1 ;
rank: 859
score: 98.66168212890625
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 860
score: 98.97437744140625
patch: * * * exp ( - x ) ;
rank: 860
score: 98.92503662109375
patch: return $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 860
score: 98.79615614149306
patch: return Math . cosh ( x ) ;
rank: 860
score: 98.74354553222656
patch: return 0 . $NUMBER$ * break ;
rank: 860
score: 98.73756408691406
patch: x = x . - x ;
rank: 860
score: 98.66117858886719
patch: exp ( x + x ) ;
rank: 861
score: 98.94412667410714
patch: return 0 ; } * /
rank: 861
score: 98.86368815104167
patch: return $STRING$ * exp ( x ) ;
rank: 861
score: 98.65715680803571
patch: double cosh = - x ;
rank: 862
score: 98.97277221679687
patch: return 0 >= exp ( - x ) ;
rank: 862
score: 98.9244155883789
patch: return ( exp ( ) ) ;
rank: 862
score: 98.86302354600694
patch: result = 0 . $NUMBER$ * x ;
rank: 862
score: 98.74250030517578
patch: double CaMeL Value ( ) ; }
rank: 862
score: 98.73265838623047
patch: return 0 - 0 . $NUMBER$ ;
rank: 862
score: 98.65552520751953
patch: temp = - x - x ;
rank: 863
score: 98.97095336914063
patch: return 0 . $NUMBER$ + exp - x ;
rank: 863
score: 98.93889024522569
patch: return 0 / exp ( 0 ) ;
rank: 863
score: 98.923681640625
patch: n $NUMBER$ * exp ( - x ) ;
rank: 863
score: 98.74168395996094
patch: float CaMeL Value ( x ) ;
rank: 863
score: 98.731689453125
patch: x = x + - x ;
rank: 864
score: 98.96997748480902
patch: return 0 + exp ( 0 ) ;
rank: 864
score: 98.93141004774306
patch: return $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 864
score: 98.9233154296875
patch: if ( x < 1 . 0 ) {
rank: 864
score: 98.8600082397461
patch: return value ( - x ) ;
rank: 864
score: 98.73454284667969
patch: if ( x == 0 ) {
rank: 864
score: 98.73091888427734
patch: return 0 - x - $NUMBER$ ;
rank: 864
score: 98.65414428710938
patch: double return ( - x ) ;
rank: 865
score: 98.92252807617187
patch: if ( x < 0 . 1 ) {
rank: 865
score: 98.89029947916667
patch: return $NUMBER$ . $NUMBER$ * exp 0 ;
rank: 865
score: 98.85917663574219
patch: return 0 . 0 + 0 ;
rank: 865
score: 98.73098754882812
patch: return ( x * x ) ;
rank: 865
score: 98.73036193847656
patch: return x + x - $NUMBER$ ;
rank: 865
score: 98.64967346191406
patch: final double x = - x ;
rank: 866
score: 98.85888671875
patch: return 0 * exp ( x ) .
rank: 866
score: 98.78782145182292
patch: return Math . exp ( x ) ;
rank: 866
score: 98.74880981445312
patch: return $NUMBER$ / HEX _ $NUMBER$ ;
rank: 866
score: 98.73006439208984
patch: return 0 + 0 . $NUMBER$ ;
rank: 866
score: 98.6482442220052
patch: ya ( x ) ;
rank: 867
score: 98.92039184570312
patch: return 0 . $NUMBER$ * x + $NUMBER$ ;
rank: 867
score: 98.90879821777344
patch: return 0 * exp ( x ;
rank: 867
score: 98.88785807291667
patch: return ( 0 . - x ) ;
rank: 867
score: 98.85807291666667
patch: } return 0 . $NUMBER$ * x ;
rank: 867
score: 98.78693983289931
patch: return 0 . $NUMBER$ * 1 ; }
rank: 867
score: 98.74580383300781
patch: return exp ( - 1 ) ;
rank: 867
score: 98.72720336914062
patch: x = - x + 1 ;
rank: 867
score: 98.64299011230469
patch: x = 0 . 0 ; }
rank: 868
score: 98.96669921875
patch: return 0 * exp ( 0 . $NUMBER$ ;
rank: 868
score: 98.92011108398438
patch: throw new Exception ( $STRING$ + x ) ;
rank: 868
score: 98.72760009765625
patch: return 0 . 0 ( ) ;
rank: 868
score: 98.64014434814453
patch: double ( x - x ) ;
rank: 869
score: 98.91969604492188
patch: return double 1 * exp ( x ) ;
rank: 869
score: 98.90638950892857
patch: return 0 ; } else {
rank: 869
score: 98.72540283203125
patch: return 0 . $NUMBER$ * Float ;
rank: 869
score: 98.72325897216797
patch: return new int [ 0 ] ;
rank: 870
score: 98.86842854817708
patch: return exp ( - x ) ; ;
rank: 870
score: 98.8546371459961
patch: return 0 . $NUMBER$ ? 1 ;
rank: 870
score: 98.7238540649414
patch: double x = 0 . 0 ;
rank: 870
score: 98.6377182006836
patch: x = x - x ; }
rank: 871
score: 98.96416473388672
patch: return 0 exp ( x ) ;
rank: 871
score: 98.91944580078125
patch: return 0 . $NUMBER$ * exp / x ;
rank: 871
score: 98.86277940538194
patch: return $NUMBER$ . $NUMBER$ * x ) ;
rank: 871
score: 98.85367160373264
patch: return exp ( 0 . $NUMBER$ ) ;
rank: 871
score: 98.78076171875
patch: return 0 cosh ( - x ) ;
rank: 871
score: 98.72335815429688
patch: return 0 [ - 1 ] ;
rank: 871
score: 98.6371841430664
patch: exp ( x - 1 ) ;
rank: 872
score: 98.91809760199652
patch: return ( x ) ; } else {
rank: 872
score: 98.89616394042969
patch: return Double . Na CaMeL N ;
rank: 872
score: 98.86074829101562
patch: return 0 . - x ) ;
rank: 872
score: 98.74028015136719
patch: return $NUMBER$ . ( x ) ;
rank: 872
score: 98.72228240966797
patch: return max ( - x ) ;
rank: 872
score: 98.72157287597656
patch: x = - x . x ;
rank: 872
score: 98.63521575927734
patch: return new long [ $NUMBER$ ] ;
rank: 873
score: 98.88670349121094
patch: return 0 / 0 . $NUMBER$ ;
rank: 873
score: 98.85820176866319
patch: return 0 . $NUMBER$ * - $NUMBER$ ;
rank: 873
score: 98.77734375
patch: return $STRING$ . exp ( x ) ;
rank: 873
score: 98.74006652832031
patch: return ( - $NUMBER$ ) ; }
rank: 874
score: 98.88636779785156
patch: return 0 / exp ( ) ;
rank: 874
score: 98.85128784179688
patch: return 1 . $NUMBER$ + x ;
rank: 874
score: 98.72023010253906
patch: return x , 0 . $NUMBER$ ;
rank: 874
score: 98.71894836425781
patch: return 1 . 0 * x ;
rank: 875
score: 98.95098198784723
patch: return 0 = exp ( x ) ;
rank: 875
score: 98.91638793945313
patch: return 0 . $NUMBER$ * double ) x ;
rank: 875
score: 98.85123019748264
patch: return $NUMBER$ . $NUMBER$ * exp x ;
rank: 875
score: 98.77596706814236
patch: return - ( x , x ) ;
rank: 875
score: 98.73822021484375
patch: return 0 . 0 / x ;
rank: 875
score: 98.71337890625
patch: double CaMeL Value ( 1 ) ;
rank: 876
score: 98.91600206163194
patch: double 1 * exp ( x ) ;
rank: 876
score: 98.87825520833333
patch: return 0 / exp ( $NUMBER$ ) ;
rank: 876
score: 98.8462142944336
patch: return 0 . $NUMBER$ ; / ;
rank: 876
score: 98.73312377929688
patch: return 0 . $NUMBER$ . $NUMBER$ ;
rank: 876
score: 98.71092878069196
patch: update ( - x ) ;
rank: 876
score: 98.71035766601562
patch: return - x . - x ;
rank: 876
score: 98.62979561941964
patch: return - x ; } }
rank: 877
score: 98.84903717041016
patch: return x * 0 . $NUMBER$ ;
rank: 877
score: 98.7099609375
patch: return 0 . $NUMBER$ * Double ;
rank: 877
score: 98.70770263671875
patch: return $NUMBER$ - x ;
rank: 877
score: 98.62754821777344
patch: return new float [ $NUMBER$ ] ;
rank: 878
score: 98.83973911830357
patch: if ( x == 0 )
rank: 878
score: 98.76856231689453
patch: return min ( - x ) ;
rank: 878
score: 98.70890045166016
patch: return 0 . 0 - 1 ;
rank: 878
score: 98.70443289620536
patch: return 0 [ x ] ;
rank: 878
score: 98.62619454520089
patch: if ( x < $NUMBER$ )
rank: 879
score: 98.91301879882812
patch: return $NUMBER$ . $NUMBER$ + ( x ) ;
rank: 879
score: 98.85611724853516
patch: return 1 * exp ( ) ;
rank: 879
score: 98.83917914496527
patch: return $NUMBER$ * exp ( x ) .
rank: 879
score: 98.83518981933594
patch: return 0 . 1 * 0 ;
rank: 879
score: 98.72808837890625
patch: return 0 . $NUMBER$ * ) ;
rank: 879
score: 98.70654296875
patch: r ( - x ) ;
rank: 879
score: 98.70441436767578
patch: return 0 double [ $NUMBER$ ] ;
rank: 880
score: 98.911767578125
patch: return $NUMBER$ / ( 0 . $NUMBER$ ) ;
rank: 880
score: 98.83425903320312
patch: return 0 . $NUMBER$ ] ; ;
rank: 880
score: 98.72568184988839
patch: { exp ( x ) ;
rank: 880
score: 98.70285034179688
patch: return 0 . $NUMBER$ * $STRING$ ;
rank: 880
score: 98.70217459542411
patch: x = 0 - x ;
rank: 881
score: 98.94294738769531
patch: return 0 return 0 . $NUMBER$ ;
rank: 881
score: 98.84595404730902
patch: return 1 * exp ( 0 ) ;
rank: 881
score: 98.83281707763672
patch: return exp ( x ) ) ;
rank: 881
score: 98.8313980102539
patch: return ( - x ) ) ;
rank: 881
score: 98.72500610351562
patch: return 0 / $NUMBER$ . 0 ;
rank: 881
score: 98.70028686523438
patch: return float CaMeL Value ( ) ;
rank: 881
score: 98.62289864676339
patch: temp = x - x ;
rank: 882
score: 98.8438720703125
patch: return 0 * exp ( - $NUMBER$ ;
rank: 882
score: 98.83065795898438
patch: return 0 . $NUMBER$ * 0 *
rank: 882
score: 98.74266052246094
patch: return 0 . 0 * exp (
rank: 882
score: 98.69979095458984
patch: return x . [ x ] ;
rank: 883
score: 98.90748426649306
patch: return - exp ( - $NUMBER$ ) ;
rank: 883
score: 98.83936903211806
patch: return 0 . $NUMBER$ ; } * /
rank: 883
score: 98.83209228515625
patch: throw ( 0 . 0 ) ;
rank: 883
score: 98.722900390625
patch: return 0 . $NUMBER$ * Math ;
rank: 883
score: 98.69837188720703
patch: return 0 . 0 * break ;
rank: 884
score: 98.72472381591797
patch: return 1 * HEX _ $NUMBER$ ;
rank: 884
score: 98.71456146240234
patch: return 0 . 0 * false ;
rank: 884
score: 98.69744110107422
patch: return - 0 . $NUMBER$ ; ;
rank: 884
score: 98.61823381696429
patch: if ( x < 0 )
rank: 885
score: 98.906298828125
patch: return ( x ) + ( x ) ;
rank: 885
score: 98.83417426215277
patch: return $NUMBER$ * exp ( - x ;
rank: 885
score: 98.8231201171875
patch: return start ( - x ) ;
rank: 885
score: 98.82307264539931
patch: return ( x - x ) ) ;
rank: 885
score: 98.72383117675781
patch: return new ( - x ) ;
rank: 885
score: 98.6976547241211
patch: return 0 + x . x ;
rank: 885
score: 98.69524383544922
patch: / * return 0 . 0 ;
rank: 885
score: 98.6173324584961
patch: return - x - $NUMBER$ ; }
rank: 886
score: 98.83130645751953
patch: return 0 ; } return 0 ;
rank: 886
score: 98.82130262586806
patch: return - 0 . $NUMBER$ * 0 ;
rank: 886
score: 98.82041931152344
patch: try { return 0 . $NUMBER$ ;
rank: 886
score: 98.72177124023438
patch: += ( x - x ) ;
rank: 886
score: 98.71251678466797
patch: return 0 . 0 * 1 ;
rank: 886
score: 98.6963882446289
patch: return 0 - 0 . 0 ;
rank: 886
score: 98.6926040649414
patch: return - - 1 . $NUMBER$ ;
rank: 887
score: 98.93480088975694
patch: return 0 + exp ( $NUMBER$ ) ;
rank: 887
score: 98.82712131076389
patch: return Math . abs ( 0 ) ;
rank: 887
score: 98.82084825303819
patch: return 0 . 0 * exp x ;
rank: 887
score: 98.7117919921875
patch: return abs ( - x ) ;
rank: 887
score: 98.69251251220703
patch: return long CaMeL Value ( ) ;
rank: 887
score: 98.69231414794922
patch: return x - $NUMBER$ - x ;
rank: 887
score: 98.61705017089844
patch: exp ( x , $NUMBER$ ) ;
rank: 888
score: 98.90452880859375
patch: return ( 0 . $NUMBER$ - exp ) ;
rank: 888
score: 98.82589382595486
patch: return 0 ; } else return 0 ;
rank: 888
score: 98.81896209716797
patch: return 0 . $NUMBER$ ; * *
rank: 888
score: 98.71611676897321
patch: return double ( x ) ;
rank: 888
score: 98.6922836303711
patch: return 0 + 0 . 0 ;
rank: 888
score: 98.68882751464844
patch: return x + 0 . $NUMBER$ ;
rank: 888
score: 98.61592864990234
patch: x = 0 [ 0 ] ;
rank: 889
score: 98.90315551757813
patch: float $NUMBER$ * exp ( - x ) ;
rank: 889
score: 98.82379828559027
patch: return $NUMBER$ * exp ( 1 ) ;
rank: 889
score: 98.81590924944196
patch: d ( - x ) ;
rank: 889
score: 98.68816266741071
patch: break ( - x ) ;
rank: 889
score: 98.6157455444336
patch: if ( x == $NUMBER$ ) {
rank: 890
score: 98.90300835503473
patch: return ( x , - $NUMBER$ ) ;
rank: 890
score: 98.82071261935764
patch: return 0 * exp ( ) ; }
rank: 890
score: 98.81904432508681
patch: return ( - x ) ; / /
rank: 890
score: 98.81349182128906
patch: return 0 . $NUMBER$ * x )
rank: 890
score: 98.70771026611328
patch: return 0 . 0 ) ; }
rank: 890
score: 98.69160461425781
patch: long CaMeL Value ( x ) ;
rank: 890
score: 98.61546107700893
patch: return 0 . $NUMBER$ ; }
rank: 891
score: 98.81910705566406
patch: return 0 * exp ( 0 ;
rank: 891
score: 98.81849500868056
patch: return ( 0 . $NUMBER$ ) ) ;
rank: 891
score: 98.7103500366211
patch: return 0 . $NUMBER$ / 1 ;
rank: 891
score: 98.61294555664062
patch: return exp ( - 0 ) ;
rank: 892
score: 98.81609429253473
patch: return 1 * exp ( $NUMBER$ ) ;
rank: 892
score: 98.80877685546875
patch: } return exp ( x ) ;
rank: 892
score: 98.70818328857422
patch: return $NUMBER$ + HEX _ $NUMBER$ ;
rank: 892
score: 98.69113595145089
patch: set ( - x ) ;
rank: 892
score: 98.61105346679688
patch: return 0 [ x ] ; }
rank: 893
score: 98.81405978732639
patch: return $NUMBER$ . $NUMBER$ * 0 ) ;
rank: 893
score: 98.80828857421875
patch: result = exp ( x ) ;
rank: 893
score: 98.68826293945312
patch: return - - 0 . 0 ;
rank: 893
score: 98.6851577758789
patch: result ( x , x ) ;
rank: 893
score: 98.60956573486328
patch: return 0 . $NUMBER$ / exp ;
rank: 894
score: 98.81265597873264
patch: return ( - x ) ; / ;
rank: 894
score: 98.8078384399414
patch: return 0 . 0 ? 0 ;
rank: 894
score: 98.60780552455357
patch: x = x - 1 ;
rank: 895
score: 98.89169650607639
patch: return $NUMBER$ / ( - $NUMBER$ ) ;
rank: 895
score: 98.81095377604167
patch: return 0 . - ( x ) ;
rank: 895
score: 98.69983673095703
patch: exp ( - - x ) ;
rank: 895
score: 98.68299865722656
patch: return 0 . $NUMBER$ ( ) ;
rank: 895
score: 98.60706438337054
patch: double exp ( x ) ;
rank: 896
score: 98.90228271484375
patch: return 0 . $NUMBER$ + exp 0 ;
rank: 896
score: 98.81045871310764
patch: return 0 . $NUMBER$ * ( x ;
rank: 896
score: 98.80574798583984
patch: return 1 . $NUMBER$ - x ;
rank: 896
score: 98.69798278808594
patch: = exp ( - x ) ;
rank: 896
score: 98.66954803466797
patch: int x = 0 . 0 ;
rank: 896
score: 98.59595598493304
patch: return - ( x ) ;
rank: 897
score: 98.80998992919922
patch: return 0 . $NUMBER$ * double ;
rank: 897
score: 98.6815185546875
patch: return 0 / - x ;
rank: 897
score: 98.6671371459961
patch: return 0 . $NUMBER$ / this ;
rank: 898
score: 98.80392456054688
patch: return Double . MIN _ VALUE ;
rank: 898
score: 98.80301920572917
patch: System . exp ( - x ) ;
rank: 898
score: 98.79977416992188
patch: return $NUMBER$ . $NUMBER$ - x ;
rank: 898
score: 98.69625091552734
patch: return 0 . clone ( ) ;
rank: 898
score: 98.67466735839844
patch: break ( x , x ) ;
rank: 898
score: 98.66634368896484
patch: return 0 . 0 * Float ;
rank: 899
score: 98.87059020996094
patch: return $NUMBER$ / ( x ) ;
rank: 899
score: 98.80014377170139
patch: return 0 . - x * x ;
rank: 899
score: 98.79828643798828
patch: else { return 0 . $NUMBER$ ;
rank: 899
score: 98.69562530517578
patch: return - 0 . $NUMBER$ ; }
rank: 899
score: 98.68992614746094
patch: return 0 . 0 * true ;
rank: 899
score: 98.67311096191406
patch: return x - $NUMBER$ + x ;
rank: 899
score: 98.583251953125
patch: return $NUMBER$ - x ; }
rank: 900
score: 98.86773681640625
patch: return ( x ) - x ;
rank: 900
score: 98.68663024902344
patch: return exp ( x , ) ;
rank: 900
score: 98.67240905761719
patch: cosh ( x , x ) ;
rank: 900
score: 98.66021728515625
patch: return - 0 . 0 ;
rank: 900
score: 98.57977294921875
patch: x = - $NUMBER$ ;
rank: 901
score: 98.782470703125
patch: return Double . MAX _ VALUE ;
rank: 901
score: 98.68952178955078
patch: return ( x - 0 ) ;
rank: 901
score: 98.67146519252232
patch: return x + - x ;
rank: 901
score: 98.65833282470703
patch: return 1 . 0 - 0 ;
rank: 901
score: 98.57693045479911
patch: temp = x - $NUMBER$ ;
rank: 902
score: 98.79541015625
patch: return 0 . $NUMBER$ ] ;
rank: 902
score: 98.79190826416016
patch: return 0 . - - x ;
rank: 902
score: 98.67143249511719
patch: return 0 + - x ; }
rank: 902
score: 98.57046944754464
patch: return x - $NUMBER$ ; }
rank: 903
score: 98.88193088107639
patch: return 0 . $NUMBER$ + exp ( ;
rank: 903
score: 98.85624694824219
patch: return ( x + $NUMBER$ ) ;
rank: 903
score: 98.79095458984375
patch: return 0 . $NUMBER$ ; ) ;
rank: 903
score: 98.68208312988281
patch: break 0 * HEX _ $NUMBER$ ;
rank: 903
score: 98.65424346923828
patch: and exp ( - x ) ;
rank: 903
score: 98.56889997209821
patch: if ( x <= $NUMBER$ )
rank: 904
score: 98.7850341796875
patch: return $NUMBER$ . 0 * 0 ;
rank: 904
score: 98.77241516113281
patch: return Double . POSITIVE _ INFINITY ;
rank: 904
score: 98.55900355747768
patch: x = $NUMBER$ - x ;
rank: 905
score: 98.78430938720703
patch: return ( exp ( x ) ;
rank: 905
score: 98.6835708618164
patch: return 1 / HEX _ $NUMBER$ ;
rank: 905
score: 98.6534652709961
patch: double CaMeL Value ( ) ) ;
rank: 905
score: 98.55850655691964
patch: exp ( - 0 ) ;
rank: 906
score: 98.87967681884766
patch: return 0 = 0 . 0 ;
rank: 906
score: 98.7815933227539
patch: throw ( 0 . $NUMBER$ ) ;
rank: 906
score: 98.76634979248047
patch: return 0 . $NUMBER$ * exp 0
rank: 906
score: 98.68083844866071
patch: return 0 [ 1 ] ;
rank: 906
score: 98.65318298339844
patch: return - 1 . 0 ) ;
rank: 906
score: 98.55837576729911
patch: return 0 . 0 ; }
rank: 907
score: 98.8782958984375
patch: return ( exp ( - x ) ;
rank: 907
score: 98.83553738064236
patch: return ( - ( x ) ) ;
rank: 907
score: 98.6802978515625
patch: return 0 . $NUMBER$ * value ;
rank: 907
score: 98.66876983642578
patch: return 0 double [ 0 ] ;
rank: 907
score: 98.55576869419643
patch: x = - - x ;
rank: 908
score: 98.77730560302734
patch: return 0 . $NUMBER$ + x )
rank: 908
score: 98.76441192626953
patch: return x * x * x ;
rank: 908
score: 98.67936706542969
patch: return 0 - HEX _ $NUMBER$ ;
rank: 908
score: 98.66787719726562
patch: 0 * exp ( x ) ;
rank: 908
score: 98.55543736049107
patch: if ( x <= 0 )
rank: 909
score: 98.83297729492188
patch: if ( x < 1 ) {
rank: 909
score: 98.76387023925781
patch: return $NUMBER$ exp ( x ) ;
rank: 909
score: 98.72916412353516
patch: return 0 * 0 . 0 ;
rank: 909
score: 98.66883850097656
patch: return new double ( x ) ;
rank: 909
score: 98.64781188964844
patch: double 0 ( - x ) ;
rank: 910
score: 98.83196343315973
patch: return exp ( - - $NUMBER$ ) ;
rank: 910
score: 98.72601318359375
patch: return 0 * exp ( ;
rank: 910
score: 98.6658935546875
patch: return x - $NUMBER$ ;
rank: 910
score: 98.55122593470982
patch: return - - x ; }
rank: 911
score: 98.87179226345486
patch: * * exp ( - x ) ;
rank: 911
score: 98.77360534667969
patch: return 0 . $NUMBER$ - 1 ;
rank: 911
score: 98.75961303710938
patch: return 0 . $NUMBER$ ; / /
rank: 911
score: 98.67214965820312
patch: return - ( - $NUMBER$ ) ;
rank: 911
score: 98.66490173339844
patch: return x - 0 . $NUMBER$ ;
rank: 912
score: 98.7734146118164
patch: return 1 . $NUMBER$ - 0 ;
rank: 912
score: 98.66478729248047
patch: return x , 0 . 0 ;
rank: 912
score: 98.64498901367188
patch: return 0 . 0 * $STRING$ ;
rank: 912
score: 98.5457763671875
patch: if ( x > $NUMBER$ )
rank: 913
score: 98.77178955078125
patch: return 0 . $NUMBER$ + this ;
rank: 913
score: 98.71072387695312
patch: return 0 / 0 . 0 ;
rank: 913
score: 98.663818359375
patch: return x + x - x ;
rank: 913
score: 98.5447998046875
patch: double exp = - x ;
rank: 914
score: 98.77072143554688
patch: return $NUMBER$ . $NUMBER$ - 0 ;
rank: 914
score: 98.73033905029297
patch: return $NUMBER$ ( - x ) ;
rank: 914
score: 98.64042663574219
patch: return 0 . $NUMBER$ * ONE ;
rank: 914
score: 98.54072788783482
patch: / ( - x ) ;
rank: 915
score: 98.76782989501953
patch: return 0 . 0 : $NUMBER$ ;
rank: 915
score: 98.73023986816406
patch: throw 0 . $NUMBER$ * 0 ;
rank: 915
score: 98.70143636067708
patch: return 0 * 0 ;
rank: 915
score: 98.66670227050781
patch: return 0 . x - x ;
rank: 915
score: 98.66309356689453
patch: return x double ( x ) ;
rank: 915
score: 98.53369140625
patch: temp = - x ; }
rank: 916
score: 98.86009385850694
patch: { return exp ( - x ) ;
rank: 916
score: 98.82303195529514
patch: n $NUMBER$ * exp ( x ) ;
rank: 916
score: 98.72794342041016
patch: return sum ( - x ) ;
rank: 916
score: 98.66015625
patch: return 0 * x ;
rank: 916
score: 98.63978576660156
patch: return ( x * $NUMBER$ ) ;
rank: 916
score: 98.51722208658855
patch: exp ( - x ;
rank: 917
score: 98.7662353515625
patch: return 0 . $NUMBER$ >> $NUMBER$ ;
rank: 917
score: 98.72734832763672
patch: return $NUMBER$ . 0 * x ;
rank: 917
score: 98.65623256138393
patch: return x * - x ;
rank: 917
score: 98.65601457868304
patch: return $NUMBER$ + - x ;
rank: 917
score: 98.63892364501953
patch: int x = 0 . $NUMBER$ ;
rank: 917
score: 98.51419503348214
patch: if ( x > 0 )
rank: 918
score: 98.85752868652344
patch: return 0 return 0 . 0 ;
rank: 918
score: 98.80928548177083
patch: return ( x > $NUMBER$ ) ] ;
rank: 918
score: 98.76549530029297
patch: return $NUMBER$ + 0 . $NUMBER$ ;
rank: 918
score: 98.69921875
patch: return 0 ; } else { ;
rank: 918
score: 98.64779663085938
patch: x += - x ;
rank: 918
score: 98.51413399832589
patch: return exp ( - x ;
rank: 919
score: 98.8570556640625
patch: break exp ( - x ) ;
rank: 919
score: 98.80877685546875
patch: return ( x ) + x ;
rank: 919
score: 98.72357940673828
patch: return exp ( - x ) .
rank: 919
score: 98.64290618896484
patch: return ( x < $NUMBER$ ) ;
rank: 919
score: 98.63866315569196
patch: return - 1 . $NUMBER$ ;
rank: 920
score: 98.85151672363281
patch: return 0 . 0 return 0 ;
rank: 920
score: 98.80824110243056
patch: return $NUMBER$ * ( - $NUMBER$ ) ;
rank: 920
score: 98.75959123883929
patch: result ( - x ) ;
rank: 920
score: 98.68587493896484
patch: return 0 * exp ( $NUMBER$ ;
rank: 920
score: 98.6405258178711
patch: return int ( - x ) ;
rank: 920
score: 98.63755798339844
patch: set ( 0 . 0 ) ;
rank: 920
score: 98.51044573102679
patch: exp ( - 1 ) ;
rank: 921
score: 98.75938415527344
patch: return exp ( x ) ; ;
rank: 921
score: 98.71996307373047
patch: return new Double ( x ) ;
rank: 921
score: 98.64801897321429
patch: throw new Exception ( ) ;
rank: 921
score: 98.63566589355469
patch: * / return 0 . $NUMBER$ ;
rank: 922
score: 98.80644395616319
patch: return - $NUMBER$ / ( x ) ;
rank: 922
score: 98.75919342041016
patch: return 1 . $NUMBER$ : $NUMBER$ ;
rank: 922
score: 98.63556780133929
patch: return 0 + x ; }
rank: 923
score: 98.84142303466797
patch: return 0 . $NUMBER$ + exp ;
rank: 923
score: 98.80337524414062
patch: throw ( $STRING$ + x ) ;
rank: 923
score: 98.75759887695312
patch: return 0 . 0 + $NUMBER$ ;
rank: 923
score: 98.63550676618304
patch: x = x + 1 ;
rank: 923
score: 98.50171915690105
patch: x = x ; }
rank: 924
score: 98.75696563720703
patch: return 0 . $NUMBER$ ? $STRING$ ;
rank: 924
score: 98.63240814208984
patch: / / return 0 . $NUMBER$ ;
rank: 924
score: 98.62685721261161
patch: { x = - x ;
rank: 925
score: 98.80130343967014
patch: throw new Exception ( $STRING$ ) ; }
rank: 925
score: 98.75651550292969
patch: return $NUMBER$ . $NUMBER$ : $NUMBER$ ;
rank: 925
score: 98.49903361002605
patch: hi ( x ) ;
rank: 926
score: 98.67198181152344
patch: return $NUMBER$ * exp ( x ;
rank: 926
score: 98.61992536272321
patch: return x - - x ;
rank: 926
score: 98.49891880580357
patch: double cosh ( x ) ;
rank: 927
score: 98.80057101779514
patch: return 0 / ( - $NUMBER$ ) ;
rank: 927
score: 98.61210123697917
patch: return - - x ;
rank: 928
score: 98.79808807373047
patch: if ( x > 1 ) {
rank: 928
score: 98.74762725830078
patch: return 0 . 0 : 0 ;
rank: 928
score: 98.6285171508789
patch: return 0 [ - 0 ] ;
rank: 928
score: 98.60708182198661
patch: yb ( - x ) ;
rank: 928
score: 98.60441371372768
patch: overflow ( - x ) ;
rank: 928
score: 98.49695696149554
patch: if ( x >= 0 )
rank: 929
score: 98.79555257161458
patch: return ( ( double ) $NUMBER$ ) ;
rank: 929
score: 98.7475814819336
patch: if ( 0 == x ) {
rank: 929
score: 98.62530517578125
patch: return float ( - x ) ;
rank: 929
score: 98.59502301897321
patch: add ( - x ) ;
rank: 929
score: 98.49469866071429
patch: return ( x ) ; }
rank: 930
score: 98.81608581542969
patch: return 0 . $NUMBER$ return $NUMBER$ ;
rank: 930
score: 98.79316541883681
patch: if ( x > - $NUMBER$ ) {
rank: 930
score: 98.74623107910156
patch: return $NUMBER$ + exp ( ) ;
rank: 930
score: 98.6983871459961
patch: return ( 0 . null ) ;
rank: 930
score: 98.66232299804688
patch: return 0 ; } * * /
rank: 930
score: 98.62274169921875
patch: return 0 . $NUMBER$ ) ;
rank: 931
score: 98.81379699707031
patch: return 0 . $NUMBER$ exp 0 ;
rank: 931
score: 98.59122140066964
patch: yb ( - $NUMBER$ ) ;
rank: 931
score: 98.57071358816964
patch: return x = - x ;
rank: 931
score: 98.49233572823661
patch: ya ( x ) ; }
rank: 932
score: 98.79111056857639
patch: return ( double ) ( x ) ;
rank: 932
score: 98.69535827636719
patch: return $NUMBER$ * 0 . $NUMBER$ *
rank: 932
score: 98.60630580357143
patch: cmp ( - x ) ;
rank: 932
score: 98.57024274553571
patch: return cosh ( x ) ;
rank: 932
score: 98.49094063895089
patch: / exp ( x ) ;
rank: 933
score: 98.78854709201389
patch: float $NUMBER$ * exp ( x ) ;
rank: 933
score: 98.74310302734375
patch: return 0 . $NUMBER$ - x )
rank: 933
score: 98.58088030133929
patch: scale ( - x ) ;
rank: 933
score: 98.56076485770089
patch: x = 0 / x ;
rank: 933
score: 98.52859061104911
patch: return abs ( x ) ;
rank: 933
score: 98.49037388392857
patch: return - x - 1 ;
rank: 934
score: 98.78738064236111
patch: result = exp ( - $NUMBER$ ) ;
rank: 934
score: 98.74247741699219
patch: return 0 . $NUMBER$ : $STRING$ ;
rank: 934
score: 98.68869018554688
patch: return 0 . $NUMBER$ ) ) ;
rank: 934
score: 98.64600372314453
patch: return 0 / ( x ) ;
rank: 934
score: 98.56657191685268
patch: return new ( x ) ;
rank: 934
score: 98.5605977376302
patch: return $NUMBER$ + x ;
rank: 934
score: 98.4899190266927
patch: return 0 ) ; }
rank: 935
score: 98.79368591308594
patch: return 0 = $NUMBER$ . $NUMBER$ ;
rank: 935
score: 98.73977661132812
patch: return 0 + exp ( ) ;
rank: 935
score: 98.68692016601562
patch: return 0 . x * x ;
rank: 935
score: 98.5755615234375
patch: return 1 [ $NUMBER$ ] ;
rank: 935
score: 98.56576538085938
patch: yb ( x ) ;
rank: 935
score: 98.55882045200893
patch: x += x - x ;
rank: 935
score: 98.48936244419643
patch: if ( x >= $NUMBER$ )
rank: 936
score: 98.77821350097656
patch: return $NUMBER$ * ( x ) ;
rank: 936
score: 98.5654296875
patch: return x * x ;
rank: 936
score: 98.55618722098214
patch: return 0 ( x ) ;
rank: 937
score: 98.7343521118164
patch: throw ( 1 . 0 ) ;
rank: 937
score: 98.68062591552734
patch: return copy ( - x ) ;
rank: 937
score: 98.64102172851562
patch: return 0 ;
rank: 937
score: 98.56344168526786
patch: cosh ( - $NUMBER$ ) ;
rank: 937
score: 98.55602155412946
patch: return - 1 . 0 ;
rank: 938
score: 98.78890991210938
patch: return 0 [ - x ] ;
rank: 938
score: 98.73416900634766
patch: return $NUMBER$ . $NUMBER$ : 0 ;
rank: 938
score: 98.67778778076172
patch: return 0 . ) * x ;
rank: 938
score: 98.56320626395089
patch: append ( - x ) ;
rank: 938
score: 98.53999546595982
patch: b ( - x ) ;
rank: 939
score: 98.76680755615234
patch: double exp ( - $NUMBER$ ) ;
rank: 940
score: 98.66992950439453
patch: return 0 . $NUMBER$ * ; /
rank: 940
score: 98.61676025390625
patch: return 0 ; } ) ;
rank: 940
score: 98.5557149251302
patch: return 0 . 1 ;
rank: 940
score: 98.54860142299107
patch: repaint ( - x ) ;
rank: 940
score: 98.53937639508929
patch: x = $NUMBER$ + x ;
rank: 940
score: 98.51396833147321
patch: return float ( x ) ;
rank: 940
score: 98.47245570591518
patch: double return = - x ;
rank: 941
score: 98.77716936383929
patch: return exp ( 0 ) ;
rank: 941
score: 98.76637268066406
patch: throw ( $STRING$ , x ) ;
rank: 941
score: 98.5546875
patch: = exp ( x ) ;
rank: 941
score: 98.5447998046875
patch: translate ( - x ) ;
rank: 941
score: 98.53476388113839
patch: return x + x ; }
rank: 941
score: 98.47123500279018
patch: temp = x - 1 ;
rank: 942
score: 98.7641830444336
patch: return x - ( x ) ;
rank: 942
score: 98.72674560546875
patch: return 0 . 0 ; * ;
rank: 942
score: 98.58004760742188
patch: return 0 ; } ;
rank: 942
score: 98.53899274553571
patch: start ( - x ) ;
rank: 943
score: 98.7750015258789
patch: return 0 . length - x ;
rank: 943
score: 98.55182756696429
patch: new ( - x ) ;
rank: 943
score: 98.53646850585938
patch: set ( x ) ;
rank: 943
score: 98.53288922991071
patch: x = 0 + x ;
rank: 944
score: 98.72509765625
patch: return 0 . $NUMBER$ + $STRING$ ;
rank: 944
score: 98.55149623325893
patch: -- exp ( x ) ;
rank: 945
score: 98.76309967041016
patch: return 0 . $NUMBER$ return 1 ;
rank: 945
score: 98.53339494977679
patch: initialize ( - x ) ;
rank: 945
score: 98.4620361328125
patch: x = - $NUMBER$ ; }
rank: 946
score: 98.52524239676339
patch: long CaMeL Value ( ) ;
rank: 946
score: 98.5247090657552
patch: cosh ( x ) ;
rank: 946
score: 98.51197160993304
patch: return 0 ; } * ;
rank: 946
score: 98.46040562220982
patch: return x - 1 ; }
rank: 947
score: 98.74861363002232
patch: return 0 = - x ;
rank: 947
score: 98.7236557006836
patch: return 0 . 1 - x ;
rank: 947
score: 98.65760803222656
patch: return 0 . ) * 0 ;
rank: 947
score: 98.53812081473214
patch: return 0 * - x ;
rank: 947
score: 98.48067801339286
patch: p ( - x ) ;
rank: 947
score: 98.46013532366071
patch: temp ( - $NUMBER$ ) ;
rank: 948
score: 98.74459838867188
patch: if ( x != 0 ) {
rank: 948
score: 98.74273681640625
patch: return 0 . $NUMBER$ exp ( ;
rank: 948
score: 98.53605143229167
patch: y = - x ;
rank: 948
score: 98.52133614676339
patch: return ( x > $NUMBER$ )
rank: 948
score: 98.50987897600446
patch: return ( double ) x ;
rank: 948
score: 98.48911830357143
patch: log ( - x ) ;
rank: 949
score: 98.74263000488281
patch: return 0 . 0 exp 0 ;
rank: 949
score: 98.72257995605469
patch: return 0 . $NUMBER$ << x ;
rank: 949
score: 98.65641021728516
patch: return ( 0 . x ) ;
rank: 949
score: 98.5048828125
patch: show ( - x ) ;
rank: 949
score: 98.45918491908482
patch: return x ; } else {
rank: 950
score: 98.72251892089844
patch: return 0 . $NUMBER$ : ) ;
rank: 950
score: 98.47379847935268
patch: * exp ( x ) ;
rank: 950
score: 98.47073800223214
patch: temp = x + x ;
rank: 951
score: 98.72005462646484
patch: return 0 * exp ( x )
rank: 951
score: 98.71614837646484
patch: return ( x ) - $NUMBER$ ;
rank: 951
score: 98.51555524553571
patch: return 0 double - x ;
rank: 951
score: 98.49884905133929
patch: float ( - x ) ;
rank: 951
score: 98.471923828125
patch: return 0 ; } else ;
rank: 951
score: 98.45482526506696
patch: double ( x ) ; }
rank: 952
score: 98.71412658691406
patch: if ( x < x ) {
rank: 952
score: 98.6512680053711
patch: return $NUMBER$ * x * x ;
rank: 952
score: 98.51529366629464
patch: return 0 / x ; }
rank: 952
score: 98.49696568080357
patch: long ( - x ) ;
rank: 952
score: 98.466552734375
patch: return long ( x ) ;
rank: 953
score: 98.71187591552734
patch: return x - $NUMBER$ / x ;
rank: 953
score: 98.67073567708333
patch: return exp ( ) ;
rank: 953
score: 98.51068987165179
patch: return - x * x ;
rank: 953
score: 98.49557059151786
patch: return 0 . 0 ) ;
rank: 953
score: 98.44823201497395
patch: return 0 ; } }
rank: 954
score: 98.72746276855469
patch: return 0 == 0 . $NUMBER$ ;
rank: 954
score: 98.70054626464844
patch: return ( cosh - $NUMBER$ ) ;
rank: 954
score: 98.49425252278645
patch: return 1 . $NUMBER$ ;
rank: 954
score: 98.46100725446429
patch: return int ( x ) ;
rank: 954
score: 98.46098981584821
patch: return 0 * exp $NUMBER$ ;
rank: 955
score: 98.69947814941406
patch: return ( - - $NUMBER$ ) ;
rank: 955
score: 98.66007486979167
patch: d ( x ) ;
rank: 955
score: 98.64710998535156
patch: return 0 . x * 0 ;
rank: 955
score: 98.51132638113839
patch: x += x - $NUMBER$ ;
rank: 955
score: 98.50117710658482
patch: return ( - 1 ) ;
rank: 955
score: 98.45198567708333
patch: apply ( x ) ;
rank: 955
score: 98.44041224888393
patch: double ( - $NUMBER$ ) ;
rank: 956
score: 98.72222137451172
patch: return 0 return $NUMBER$ . $NUMBER$ ;
rank: 956
score: 98.6971664428711
patch: return ( x ) + $NUMBER$ ;
rank: 956
score: 98.65849086216518
patch: return exp ( $NUMBER$ ) ;
rank: 956
score: 98.61865234375
patch: int ( - x ) ;
rank: 956
score: 98.50654820033482
patch: buf ( - x ) ;
rank: 956
score: 98.49106852213542
patch: add ( x ) ;
rank: 956
score: 98.44886997767857
patch: apply ( - x ) ;
rank: 957
score: 98.69702911376953
patch: return x - $NUMBER$ * x ;
rank: 957
score: 98.65781947544643
patch: if ( 0 == 0 )
rank: 957
score: 98.45346505301339
patch: return 0 double [ ] ;
rank: 957
score: 98.43312581380208
patch: temp ( x ) ;
rank: 958
score: 98.6955337524414
patch: return $NUMBER$ / ( $NUMBER$ ) ;
rank: 958
score: 98.6513671875
patch: throw exp ( x ) ;
rank: 958
score: 98.59950474330357
patch: return 0 . - x ;
rank: 958
score: 98.47531127929688
patch: append ( x ) ;
rank: 958
score: 98.41290283203125
patch: x = - 1 ;
rank: 959
score: 98.69377136230469
patch: if ( x != $NUMBER$ ) {
rank: 959
score: 98.50204467773438
patch: break ( x ) ;
rank: 959
score: 98.46732875279018
patch: return 0 . $NUMBER$ ; ;
rank: 959
score: 98.4033711751302
patch: double x = x ;
rank: 960
score: 98.71308135986328
patch: return 0 = 0 . 1 ;
rank: 960
score: 98.63974434988839
patch: exp ( x ) ; ;
rank: 960
score: 98.59388224283855
patch: return 0 . $NUMBER$ *
rank: 960
score: 98.46601213727679
patch: int x = - x ;
rank: 960
score: 98.45291137695312
patch: return $NUMBER$ . $NUMBER$ ;
rank: 960
score: 98.40716552734375
patch: return 0 ; * /
rank: 960
score: 98.39273071289062
patch: return x ; } }
rank: 961
score: 98.62025960286458
patch: throw ( $STRING$ ) ;
rank: 961
score: 98.57520403180804
patch: return ( x ) ) ;
rank: 961
score: 98.46430315290179
patch: return 0 , - x ;
rank: 961
score: 98.46407063802083
patch: return 1 - x ;
rank: 961
score: 98.44039916992188
patch: return - x ) ;
rank: 961
score: 98.39174397786458
patch: return 0 ; ; }
rank: 962
score: 98.70694732666016
patch: return 0 = 0 . length ;
rank: 962
score: 98.57086181640625
patch: switch ( - x ) {
rank: 962
score: 98.45621337890626
patch: return - x ;
rank: 962
score: 98.39059448242188
patch: return 0 / $NUMBER$ ;
rank: 962
score: 98.37502034505208
patch: x = $NUMBER$ ; }
rank: 963
score: 98.70590209960938
patch: return 0 . $NUMBER$ - exp ;
rank: 963
score: 98.462890625
patch: r ( x ) ;
rank: 963
score: 98.45423380533855
patch: return $NUMBER$ * x ;
rank: 963
score: 98.38780721028645
patch: return 0 * exp ;
rank: 964
score: 98.70520782470703
patch: return 0 . 0 + exp ;
rank: 964
score: 98.59149169921875
patch: exp ( x ) ) ;
rank: 964
score: 98.55449567522321
patch: return $NUMBER$ * - x ;
rank: 964
score: 98.447265625
patch: return 0 == x ;
rank: 964
score: 98.36304728190105
patch: return $NUMBER$ ; } }
rank: 965
score: 98.68115234375
patch: return ( $NUMBER$ * x ) ;
rank: 965
score: 98.4586181640625
patch: validate ( - x ) ;
rank: 965
score: 98.38106282552083
patch: return 0 * $NUMBER$ ;
rank: 965
score: 98.36208089192708
patch: return x - 1 ;
rank: 966
score: 98.67576599121094
patch: if ( x > x ) {
rank: 966
score: 98.45444161551339
patch: return - $NUMBER$ . $NUMBER$ ;
rank: 966
score: 98.40953572591145
patch: return - - $NUMBER$ ;
rank: 966
score: 98.37844848632812
patch: return ( 0 ) ;
rank: 966
score: 98.34208170572917
patch: exp ( 0 ) ;
rank: 967
score: 98.37310791015625
patch: return 0 / 0 ;
rank: 968
score: 98.66876220703125
patch: return $NUMBER$ * x - x ;
rank: 968
score: 98.57346888950893
patch: return max ( x ) ;
rank: 968
score: 98.45008196149554
patch: return x ( x ) ;
rank: 968
score: 98.36953735351562
patch: log ( x ) ;
rank: 969
score: 98.66575622558594
patch: return ( x ) * x ;
rank: 969
score: 98.57198660714286
patch: value ( - x ) ;
rank: 969
score: 98.44906180245536
patch: push ( - x ) ;
rank: 969
score: 98.38458251953125
patch: ( - x ) ;
rank: 969
score: 98.35282389322917
patch: return Double . $NUMBER$ ;
rank: 969
score: 98.3256327311198
patch: temp = - $NUMBER$ ;
rank: 970
score: 98.67121233258929
patch: return 0 * exp 0 ;
rank: 970
score: 98.44900948660714
patch: if ( - x ) {
rank: 971
score: 98.55792236328125
patch: } * * * * /
rank: 971
score: 98.37921142578125
patch: return x + $NUMBER$ ;
rank: 971
score: 98.37186686197917
patch: return 1 + x ;
rank: 971
score: 98.3383280436198
patch: fail ( $STRING$ ) ;
rank: 971
score: 98.30892944335938
patch: temp = x ; }
rank: 972
score: 98.55774797712054
patch: return value ( x ) ;
rank: 972
score: 98.3681640625
patch: result = - x ;
rank: 972
score: 98.33826700846355
patch: apply ( 0 ) ;
rank: 972
score: 98.2867431640625
patch: double = - x ;
rank: 973
score: 98.56936209542411
patch: break exp ( x ) ;
rank: 973
score: 98.55281284877232
patch: if ( x != 0 )
rank: 973
score: 98.2842305501302
patch: return - $NUMBER$ ; }
rank: 974
score: 98.54931640625
patch: } * * * /
rank: 974
score: 98.44475446428571
patch: complete ( - x ) ;
rank: 974
score: 98.34967041015625
patch: overflow ( x ) ;
rank: 974
score: 98.34611002604167
patch: new ( x ) ;
rank: 974
score: 98.3236796061198
patch: fail ( 0 ) ;
rank: 975
score: 98.4425557454427
patch: return 1 . 0 ;
rank: 975
score: 98.3451639811198
patch: return 0 double x ;
rank: 975
score: 98.2969970703125
patch: return 0 += x ;
rank: 975
score: 98.27254231770833
patch: z = - x ;
rank: 976
score: 98.54499162946429
patch: } else { return x ;
rank: 976
score: 98.33976236979167
patch: result ( x ) ;
rank: 976
score: 98.30701700846355
patch: return 0 * ; }
rank: 976
score: 98.27105712890625
patch: return ( - x ;
rank: 977
score: 98.54096330915179
patch: return ( exp $NUMBER$ ) ;
rank: 977
score: 98.33699544270833
patch: return HEX _ $NUMBER$ ;
rank: 977
score: 98.23119099934895
patch: return - 1 ; }
rank: 978
score: 98.368896484375
patch: f ( x ) ;
rank: 978
score: 98.31886800130208
patch: return $NUMBER$ . 0 ;
rank: 978
score: 98.25309244791667
patch: return - ( x ;
rank: 978
score: 98.22512817382812
patch: return 0 return 0 ;
rank: 979
score: 98.53326416015625
patch: ret ( - x ) ;
rank: 979
score: 98.48065185546875
patch: return 0 = x ;
rank: 979
score: 98.35284423828125
patch: return 0 . x ;
rank: 979
score: 98.25228881835938
patch: x = - 0 ;
rank: 980
score: 98.32740275065105
patch: return x + 1 ;
rank: 980
score: 98.30447387695312
patch: copy ( x ) ;
rank: 980
score: 98.2503153483073
patch: return - 0 ) ;
rank: 980
score: 98.21234130859375
patch: / * return 0 ;
rank: 981
score: 98.46302286783855
patch: return 0 . ) ;
rank: 981
score: 98.30110677083333
patch: return x * $NUMBER$ ;
rank: 981
score: 98.24627685546875
patch: abs ( x ) ;
rank: 981
score: 98.20745849609375
patch: return 0 + 0 ;
rank: 982
score: 98.50668770926339
patch: result = 0 . $NUMBER$ ;
rank: 982
score: 98.32530721028645
patch: x = 0 ; }
rank: 982
score: 98.31593831380208
patch: / * return x ;
rank: 982
score: 98.23471069335938
patch: Extend ( x ) ;
rank: 982
score: 98.20472208658855
patch: return - 0 ; }
rank: 983
score: 98.30325317382812
patch: switch ( - x )
rank: 983
score: 98.1898905436198
patch: return 0 + $NUMBER$ ;
rank: 984
score: 98.30718994140625
patch: x += x ; }
rank: 984
score: 98.30296834309895
patch: update ( x ) ;
rank: 984
score: 98.21065266927083
patch: double cosh = x ;
rank: 985
score: 98.42293294270833
patch: return 0 = $NUMBER$ ;
rank: 985
score: 98.29852294921875
patch: return 0 / exp ;
rank: 985
score: 98.26771036783855
patch: return $NUMBER$ . $NUMBER$ *
rank: 985
score: 98.26283772786458
patch: return double [ ] ;
rank: 985
score: 98.1734110514323
patch: return $NUMBER$ * 0 ;
rank: 986
score: 98.426513671875
patch: return 0 = 0 ;
rank: 986
score: 98.29723103841145
patch: return 0 - $NUMBER$ ;
rank: 986
score: 98.2886454264323
patch: return - x ; ;
rank: 986
score: 98.21303304036458
patch: p ( x ) ;
rank: 987
score: 98.39614868164062
patch: if ( return ) ;
rank: 987
score: 98.2807108561198
patch: cosh = - x ;
rank: 987
score: 98.25511678059895
patch: return cosh - $NUMBER$ ;
rank: 987
score: 98.2111307779948
patch: start ( x ) ;
rank: 987
score: 98.16907755533855
patch: return 0 - 0 ;
rank: 987
score: 98.07786865234375
patch: x = x ;
rank: 988
score: 98.38492838541667
patch: } * * * ;
rank: 988
score: 98.2758280436198
patch: b ( x ) ;
rank: 988
score: 98.2525634765625
patch: recip ( x ) ;
rank: 988
score: 98.2107645670573
patch: x = 0 ) ;
rank: 988
score: 98.168701171875
patch: cmp ( x ) ;
rank: 988
score: 98.06346435546875
patch: return 0 ; }
rank: 989
score: 98.37992350260417
patch: exp ( $NUMBER$ ) ;
rank: 989
score: 98.03138427734375
patch: return x ; }
rank: 990
score: 98.37701416015625
patch: return ( exp ) ;
rank: 990
score: 98.2431131998698
patch: return $NUMBER$ / x ;
rank: 990
score: 97.978076171875
patch: return $NUMBER$ ; }
rank: 991
score: 98.2852274576823
patch: return 0 return $NUMBER$ ;
rank: 991
score: 98.1859130859375
patch: return 0 . 0 *
rank: 991
score: 98.15623982747395
patch: initialize ( x ) ;
rank: 991
score: 97.90194091796874
patch: x = $NUMBER$ ;
rank: 992
score: 98.34217325846355
patch: throw exp ( ) ;
rank: 992
score: 98.16913604736328
patch: return x ;
rank: 992
score: 98.15318806966145
patch: return 0 ; ) ;
rank: 992
score: 97.87066040039062
patch: temp = x ;
rank: 992
score: 97.8654541015625
patch: return - $NUMBER$ ;
rank: 993
score: 98.02254638671874
patch: return 0 . $NUMBER$
rank: 994
score: 98.31941731770833
patch: return 0 == 0 ;
rank: 994
score: 97.91622924804688
patch: x += x ;
rank: 994
score: 97.90618896484375
patch: return 0 ) ;
rank: 994
score: 97.7406005859375
patch: return $NUMBER$ ;
rank: 995
score: 98.31648763020833
patch: return 1 * x ;
rank: 995
score: 97.85493774414063
patch: return 0 ; ;
rank: 995
score: 97.39673614501953
patch: return false ;
rank: 996
score: 97.8223388671875
patch: return - 1 ;
rank: 996
score: 97.36450958251953
patch: return 1 ;
rank: 996
score: 97.32650756835938
patch: / * /
rank: 997
score: 97.48052978515625
patch: return x .
rank: 997
score: 97.27711486816406
patch: return true ;
rank: 997
score: 97.25123596191406
patch: return null ;
rank: 997
score: 96.25834147135417
patch: / ;
rank: 998
score: 97.36099243164062
patch: return 0 .
rank: 998
score: 97.27052307128906
patch: throw null ;
rank: 998
score: 96.3006591796875
patch: result ;
rank: 998
score: 94.068359375
patch: double
rank: 999
score: 97.73807373046876
patch: return - 0 ;
rank: 999
score: 97.10356903076172
patch: return ) ;
rank: 999
score: 96.52292887369792
patch: return ;
rank: 999
score: 96.18973795572917
patch: * ;
rank: 999
score: 94.54216003417969
patch: return
rank: 1000
score: 96.31756591796875
patch: break ;
rank: 1000
score: 96.21994018554688
patch: * /
rank: 1000
score: 94.64976501464844
patch: }
rank: 1000
score: 94.26826477050781
patch: {
