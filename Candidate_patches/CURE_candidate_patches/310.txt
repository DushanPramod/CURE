rank: 1
score: 99.8373135653409
patch: return 0 . $NUMBER$ * exp ( x ) ;
rank: 1
score: 99.61199481670673
patch: return - 0 . $NUMBER$ * exp ( - x ) ;
rank: 2
score: 99.72475363991477
patch: return 0 . 0 * exp ( x ) ;
rank: 2
score: 99.67446899414062
patch: return - 0 . $NUMBER$ * exp ( x ) ;
rank: 2
score: 99.64467366536458
patch: return 0 . $NUMBER$ * exp ( - x ) ;
rank: 2
score: 99.59676106770833
patch: return 0 * exp ( x ) ;
rank: 3
score: 99.60716834435097
patch: return 0 . $NUMBER$ * exp ( x + x ) ;
rank: 3
score: 99.60146658761161
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 3
score: 99.52955211292614
patch: return 0 . $NUMBER$ / exp ( x ) ;
rank: 4
score: 99.59236966646634
patch: return 0 . $NUMBER$ * exp ( x , x ) ;
rank: 4
score: 99.56216866629464
patch: return exp ( x ) ;
rank: 4
score: 99.55073686079545
patch: return 1 . $NUMBER$ * exp ( x ) ;
rank: 4
score: 99.49125162760417
patch: return 0 . $NUMBER$ * exp ( x ) ; }
rank: 5
score: 99.52792593149039
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 5
score: 99.51422588641827
patch: return 0 . 0 * $NUMBER$ * exp ( x ) ;
rank: 5
score: 99.440673828125
patch: return - 0 . $NUMBER$ * exp ( x , x ) ;
rank: 5
score: 99.341796875
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 6
score: 99.5725985440341
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 6
score: 99.53380475725446
patch: return 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 6
score: 99.51055438701923
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 6
score: 99.49607340494792
patch: return 0 . 0 * exp ( - x ) ;
rank: 6
score: 99.46241106305804
patch: return 0 . $NUMBER$ ; } else { return 0 . $NUMBER$ ;
rank: 7
score: 99.57173978365384
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ;
rank: 7
score: 99.50982196514423
patch: return 0 . $NUMBER$ * exp ( x * x ) ;
rank: 7
score: 99.4618252840909
patch: return Double . $NUMBER$ * exp ( x ) ;
rank: 7
score: 99.44945475260417
patch: return 0 . $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 7
score: 99.31520432692308
patch: return - 0 . $NUMBER$ * exp ( x ) ; }
rank: 8
score: 99.51392540564903
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 8
score: 99.49368990384616
patch: return 0 . $NUMBER$ * exp ( x - x ) ;
rank: 8
score: 99.49179077148438
patch: return - 0 . 0 * exp ( x ) ;
rank: 8
score: 99.48614971454327
patch: return 0 . $NUMBER$ * this . exp ( x ) ;
rank: 8
score: 99.46121215820312
patch: return 0 . $NUMBER$ * / exp ( x ) ;
rank: 8
score: 99.30977689302884
patch: return - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 9
score: 99.5269775390625
patch: return 0 . $NUMBER$ * exp exp ( x ) ;
rank: 9
score: 99.4942157451923
patch: return x - 0 . $NUMBER$ * exp ( x ) ;
rank: 9
score: 99.45656040736607
patch: return 0 . $NUMBER$ ; } else { return 0 . 0 ;
rank: 9
score: 99.43948800223214
patch: return - - 0 . $NUMBER$ * exp ( - x ) ;
rank: 9
score: 99.4393780048077
patch: return - 0 . 0 * exp ( - x ) ;
rank: 9
score: 99.40059116908482
patch: return - 0 . $NUMBER$ ;
rank: 10
score: 99.5128173828125
patch: return 0 . $NUMBER$ * exp ( x ) ) ;
rank: 10
score: 99.49090021306819
patch: return 1 . 0 * exp ( x ) ;
rank: 10
score: 99.47856794084821
patch: return 0 . 0 * exp ( exp ( x ) ) ;
rank: 10
score: 99.43903459821429
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 10
score: 99.39732142857143
patch: return - 0 . $NUMBER$ * exp ( x - x ) ;
rank: 11
score: 99.48914591471355
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 11
score: 99.48579915364583
patch: return - 1 . $NUMBER$ * exp ( x ) ;
rank: 11
score: 99.47247869318181
patch: return 0 . 1 * exp ( x ) ;
rank: 11
score: 99.45564408735795
patch: return 0 . $NUMBER$ + exp ( x ) ;
rank: 11
score: 99.44593224158653
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 11
score: 99.40732247488839
patch: return 0 . $NUMBER$ * exp ( x , - x ) ;
rank: 11
score: 99.3839580829327
patch: result = 0 . $NUMBER$ * exp ( - x ) ;
rank: 11
score: 99.30453725961539
patch: return - 1 . $NUMBER$ * exp ( - x ) ;
rank: 12
score: 99.50538987379808
patch: return 0 . $NUMBER$ * x * exp ( x ) ;
rank: 12
score: 99.48304966517857
patch: return 0 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 12
score: 99.4678203876202
patch: return 0 . $NUMBER$ * exp ( x ) - x ;
rank: 12
score: 99.44263509114583
patch: return 0 . $NUMBER$ ; } else { return exp ( x ) ;
rank: 12
score: 99.3965313251202
patch: return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 13
score: 99.45995330810547
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( x ) ;
rank: 13
score: 99.29717548076923
patch: x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 14
score: 99.48001802884616
patch: return 0 . 0 * exp ( x * x ) ;
rank: 14
score: 99.46486002604166
patch: return - 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 14
score: 99.4559795673077
patch: return 0 . $NUMBER$ * exp ( x ) * x ;
rank: 14
score: 99.41044108072917
patch: result = 0 . $NUMBER$ * exp ( x ) ;
rank: 14
score: 99.37070138113839
patch: return x + 0 . $NUMBER$ * exp ( - x ) ;
rank: 15
score: 99.49315643310547
patch: return 0 . $NUMBER$ * x ;
rank: 15
score: 99.40559525923295
patch: return 0 * exp ( x + x ) ;
rank: 16
score: 99.47170785757211
patch: return 0 . 0 * 0 * exp ( x ) ;
rank: 16
score: 99.45677839006696
patch: return 0 . $NUMBER$ * exp ( x ) ; } else {
rank: 16
score: 99.42518107096355
patch: return 0 . 0 * / exp ( x ) ;
rank: 16
score: 99.40529378255208
patch: return exp ( x , x ) ;
rank: 16
score: 99.36500767299107
patch: result = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 17
score: 99.44478352864583
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . $NUMBER$ ;
rank: 17
score: 99.42227877103366
patch: return ( 0 . 0 * exp ( x ) ) ;
rank: 17
score: 99.38156563895089
patch: return - 0 . $NUMBER$ * exp ( - x ) ; }
rank: 17
score: 99.25661214192708
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 18
score: 99.47833721454327
patch: return 0 * 0 . $NUMBER$ * exp ( x ) ;
rank: 18
score: 99.46529447115384
patch: return 0 . $NUMBER$ * exp ( x ) + x ;
rank: 18
score: 99.41341145833333
patch: return 0 . 1 * exp ( - x ) ;
rank: 18
score: 99.39934833233173
patch: return 0 . 0 * exp ( x + x ) ;
rank: 18
score: 99.37972318209134
patch: return - - 0 . $NUMBER$ * exp ( x ) ;
rank: 19
score: 99.4635479266827
patch: return 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 19
score: 99.44169921875
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . 0 ;
rank: 19
score: 99.42112513950893
patch: return 0 . 0 ; } else { return 0 . 0 ;
rank: 19
score: 99.394287109375
patch: return 0 + exp ( x ) ;
rank: 20
score: 99.4407470703125
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ ;
rank: 20
score: 99.37445068359375
patch: return 0 . $NUMBER$ * exp ( - x - x ) ;
rank: 20
score: 99.34788295200893
patch: return ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 21
score: 99.44837364783653
patch: return 0 . 0 * exp ( x - x ) ;
rank: 21
score: 99.44423828125
patch: return 0 . $NUMBER$ * ( x ) ;
rank: 21
score: 99.43966471354166
patch: return 0 . $NUMBER$ * exp ( x + 0 . 0 ) ;
rank: 21
score: 99.37319711538461
patch: return 0 . $NUMBER$ . 1 * exp ( x ) ;
rank: 22
score: 99.41349283854167
patch: return 0 . 0 * exp ( x ) ; }
rank: 22
score: 99.40435321514423
patch: return 0 . $NUMBER$ * exp ( - - x ) ;
rank: 22
score: 99.37203979492188
patch: return exp ( x ) * exp ( x ) ;
rank: 22
score: 99.34580775669643
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 23
score: 99.43852996826172
patch: return 0 . $NUMBER$ * exp ( x ) . exp ( x ) ;
rank: 23
score: 99.41256510416666
patch: return 0 . $NUMBER$ ; } else { return 0 . $NUMBER$ ; }
rank: 23
score: 99.36592240767045
patch: return 0 * exp ( x , x ) ;
rank: 24
score: 99.43706868489583
patch: return 0 . $NUMBER$ * exp ( x ) exp ( x ) ;
rank: 24
score: 99.42575307992789
patch: return - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 25
score: 99.42510579427083
patch: return 0 . $NUMBER$ * exp ( x + 0 . $NUMBER$ ) ;
rank: 25
score: 99.41175944010416
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . $NUMBER$ ;
rank: 25
score: 99.33627755301339
patch: return - 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 25
score: 99.23929537259616
patch: return - 0 . $NUMBER$ / exp ( - x ) ;
rank: 26
score: 99.43304912860577
patch: return 0 . 0 * exp ( x , x ) ;
rank: 26
score: 99.4249267578125
patch: return - 0 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 26
score: 99.41092354910714
patch: return 0 . 0 ; } else { return 0 . $NUMBER$ ;
rank: 26
score: 99.39394705636161
patch: return 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 26
score: 99.35870830829327
patch: return 0 . 0 . $NUMBER$ * exp ( x ) ;
rank: 26
score: 99.23912635216347
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 27
score: 99.43140587439903
patch: return 0 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 27
score: 99.42784016927084
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 0 ;
rank: 27
score: 99.40955403645833
patch: return 0 . 0 ; } else { return exp ( x ) ;
rank: 27
score: 99.38942057291666
patch: return 0 . $NUMBER$ * exp ( - exp ( x ) ) ;
rank: 27
score: 99.3576190655048
patch: return 0 . $NUMBER$ * x ( x + x ) ;
rank: 27
score: 99.23429361979167
patch: if ( x > 0 ) { return x ; }
rank: 28
score: 99.42588454026442
patch: return 0 . 0 * exp ( x * $NUMBER$ ) ;
rank: 28
score: 99.42384338378906
patch: return 0 . $NUMBER$ * exp ( x + exp ( x ) ) ;
rank: 28
score: 99.42293607271634
patch: return 0 . $NUMBER$ * ( exp ( x ) ) ;
rank: 28
score: 99.40578391335227
patch: return 0 . 0 / exp ( x ) ;
rank: 28
score: 99.35178629557292
patch: return $NUMBER$ * exp ( x ) ;
rank: 28
score: 99.22992412860577
patch: return 0 . 1 . $NUMBER$ * exp ( x ) ;
rank: 29
score: 99.34115600585938
patch: x = 0 . $NUMBER$ * exp ( x ) ;
rank: 29
score: 99.3279278094952
patch: return x + 0 . $NUMBER$ * exp ( x ) ;
rank: 29
score: 99.229248046875
patch: return 1 . $NUMBER$ * exp ( - x ) ;
rank: 30
score: 99.41310337611607
patch: return 0 * exp ( x ) . exp ( x ) ;
rank: 30
score: 99.40576985677083
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 30
score: 99.40291341145833
patch: return 0 . exp ( x ) ;
rank: 30
score: 99.399169921875
patch: return 0 . $NUMBER$ * exp ( x ) / ( x ) ;
rank: 30
score: 99.34783935546875
patch: return 0 * exp ( exp ( x ) ) ;
rank: 30
score: 99.33779471261161
patch: return - 0 . $NUMBER$ * exp ( x + x ) ;
rank: 30
score: 99.2289151278409
patch: return exp ( x , 0 . $NUMBER$ ) ;
rank: 31
score: 99.41790301983173
patch: return 0 . 0 * exp ( x ) + x ;
rank: 31
score: 99.40560913085938
patch: return 0 . $NUMBER$ * exp ( x ) - exp ( x ) ;
rank: 31
score: 99.39954723011364
patch: return Double . 0 * exp ( x ) ;
rank: 31
score: 99.3478252704327
patch: return 0 . $NUMBER$ * exp ( x / x ) ;
rank: 31
score: 99.32285853794643
patch: return - 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 31
score: 99.2285625751202
patch: return * 0 . $NUMBER$ * exp ( - x ) ;
rank: 32
score: 99.41746012369792
patch: return - 1 . 0 * exp ( x ) ;
rank: 32
score: 99.40042114257812
patch: return 0 . $NUMBER$ * exp ( x ) . min ( x ) ;
rank: 32
score: 99.39432525634766
patch: return 0 . $NUMBER$ * 0 ;
rank: 32
score: 99.38361467633929
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) ;
rank: 32
score: 99.37989220252403
patch: return - 0 . $NUMBER$ + exp ( - x ) ;
rank: 32
score: 99.34449259440105
patch: } return 0 . $NUMBER$ * exp ( x ) ;
rank: 32
score: 99.3157958984375
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 32
score: 99.2273700420673
patch: return 0 . $NUMBER$ * exp ( x , 0 ) ;
rank: 33
score: 99.397265625
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . 0 ;
rank: 33
score: 99.39667154947917
patch: return 0 . $NUMBER$ ; } else { return 0 . 0 ; }
rank: 33
score: 99.3909912109375
patch: return $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 33
score: 99.3413837139423
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ;
rank: 33
score: 99.31422776442308
patch: result = - 0 . $NUMBER$ * exp ( x ) ;
rank: 34
score: 99.40822531960227
patch: return $NUMBER$ . 0 * exp ( x ) ;
rank: 34
score: 99.39663461538461
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ ;
rank: 34
score: 99.38932495117187
patch: return 0 . $NUMBER$ * exp ( ) ;
rank: 34
score: 99.38175455729167
patch: return 0 . $NUMBER$ * exp ( x - 0 . 0 ) ;
rank: 34
score: 99.37733968098958
patch: return - 0 . $NUMBER$ + exp ( x ) ;
rank: 34
score: 99.33760892427884
patch: return $NUMBER$ . $NUMBER$ * exp ( x + x ) ;
rank: 34
score: 99.31307547433036
patch: return - 0 . $NUMBER$ * exp ( x ) + x ;
rank: 34
score: 99.21828391335227
patch: return exp ( x , 0 . 0 ) ;
rank: 35
score: 99.39645182291666
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 35
score: 99.389990234375
patch: return 0 . $NUMBER$ * x * x ;
rank: 35
score: 99.38845825195312
patch: return 0 ; } else { return 0 . $NUMBER$ ;
rank: 35
score: 99.37643229166666
patch: return - 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 36
score: 99.40208082932692
patch: return 0 . 0 * exp ( x / $NUMBER$ ) ;
rank: 36
score: 99.21485392252605
patch: return 0 . $NUMBER$ / exp ( - x ) ;
rank: 37
score: 99.39596792367789
patch: return 0 . $NUMBER$ * exp ( x ) . 0 ;
rank: 37
score: 99.38243689903847
patch: return 0 . $NUMBER$ * exp ( x ) ; / /
rank: 37
score: 99.37310321514423
patch: return 0 . $NUMBER$ * exp ( x ) ; } else
rank: 37
score: 99.32681039663461
patch: return - 0 . 1 * exp ( - x ) ;
rank: 38
score: 99.3977762858073
patch: return 0 . $NUMBER$ * exp ( x ) ; ;
rank: 38
score: 99.38611857096355
patch: return 0 ; } else { return 0 . 0 ;
rank: 38
score: 99.37949044363839
patch: return 0 . $NUMBER$ * exp ( x ) ; -- x ;
rank: 38
score: 99.374560546875
patch: return 0 . $NUMBER$ * exp ( x ) ; negate = true ;
rank: 38
score: 99.21239217122395
patch: if ( x < 0 ) { return x ; }
rank: 39
score: 99.39539513221153
patch: return 0 = 0 . $NUMBER$ * exp ( x ) ;
rank: 39
score: 99.38406575520834
patch: return 0 . $NUMBER$ * exp ( ) * exp ( x ) ;
rank: 39
score: 99.37598528180804
patch: return $NUMBER$ . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 39
score: 99.32737379807692
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ) ;
rank: 39
score: 99.32609049479167
patch: return - 0 . 1 * exp ( x ) ;
rank: 40
score: 99.3959491436298
patch: return 0 . $NUMBER$ . 0 * exp ( x ) ;
rank: 40
score: 99.39501953125
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . $NUMBER$ ;
rank: 40
score: 99.38263408954327
patch: return 0 . 0 * exp ( x ) / $NUMBER$ ;
rank: 40
score: 99.36971609933036
patch: return 0 . 0 * exp ( - 0 . $NUMBER$ ) ;
rank: 40
score: 99.29507211538461
patch: return $NUMBER$ . $NUMBER$ * exp ( x , x ) ;
rank: 40
score: 99.21077786959134
patch: x = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 41
score: 99.3916015625
patch: return 0 . $NUMBER$ * exp ( x ) . 1 ;
rank: 41
score: 99.37984212239583
patch: return 0 . 0 * exp ( x ) / $NUMBER$ . $NUMBER$ ;
rank: 41
score: 99.36939493815105
patch: return 0 . $NUMBER$ + exp ( - x ) ;
rank: 41
score: 99.21070353190105
patch: if ( x > 0 ) { return 0 ; }
rank: 42
score: 99.38840895432692
patch: return 0 . 0 * exp ( x ) * x ;
rank: 42
score: 99.36868990384616
patch: return 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 42
score: 99.3685811360677
patch: return 0 . $NUMBER$ * ( x + x ) ;
rank: 42
score: 99.3206787109375
patch: return return 0 . $NUMBER$ * exp ( x ) ;
rank: 43
score: 99.36579241071429
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ) ;
rank: 43
score: 99.36251627604166
patch: return x - 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 43
score: 99.31993519176136
patch: return 0 . $NUMBER$ - exp ( x ) ;
rank: 43
score: 99.205078125
patch: if ( x < 0 ) { return 0 ; }
rank: 44
score: 99.38447265625
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . $NUMBER$ ;
rank: 44
score: 99.36379568917411
patch: return 0 . $NUMBER$ * exp ( x ) ; return x ;
rank: 44
score: 99.36112467447917
patch: return 0 . $NUMBER$ * exp ( x - 0 . $NUMBER$ ) ;
rank: 44
score: 99.31693209134616
patch: return 0 . 0 * this . exp ( x ) ;
rank: 45
score: 99.38245391845703
patch: return 0 . $NUMBER$ * exp ( x ) + exp ( x ) ;
rank: 45
score: 99.36601039341518
patch: return 0 . $NUMBER$ * exp ( - x + x ) ;
rank: 45
score: 99.36083045372597
patch: return $NUMBER$ . $NUMBER$ * 0 * exp ( x ) ;
rank: 45
score: 99.35960693359375
patch: return 0 . 0 * ( x ) ;
rank: 45
score: 99.28689139229911
patch: return 0 + 0 . $NUMBER$ * exp ( - x ) ;
rank: 45
score: 99.19893704927884
patch: if ( x > 0 ) { return - x ; }
rank: 46
score: 99.38101632254464
patch: return 0 . $NUMBER$ * exp ( x ) [ 0 ] ;
rank: 46
score: 99.37326284555289
patch: return 0 . $NUMBER$ * exp ( x ) + 1 ;
rank: 46
score: 99.35791015625
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ ) ;
rank: 46
score: 99.3161376953125
patch: return exp ( exp ( x ) ) ;
rank: 46
score: 99.29724993024554
patch: return 0 . $NUMBER$ * exp ( - x ) + x ;
rank: 46
score: 99.19512469951923
patch: if ( x > 0 ) { return - 0 ; }
rank: 47
score: 99.19248610276442
patch: return * $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 48
score: 99.37898254394531
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 48
score: 99.3682110126202
patch: / * return 0 . $NUMBER$ * exp ( x ) ;
rank: 48
score: 99.3576327237216
patch: return 0 * 0 * exp ( x ) ;
rank: 48
score: 99.35641714242789
patch: return x - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 48
score: 99.35494559151786
patch: return ( double ) 0 . $NUMBER$ * exp ( x ) ;
rank: 48
score: 99.1910400390625
patch: return new 0 . $NUMBER$ * exp ( - x ) ;
rank: 49
score: 99.36810709635417
patch: return 0 . $NUMBER$ * Double . $NUMBER$ * exp ( x ) ;
rank: 49
score: 99.36325509207589
patch: return - 0 . $NUMBER$ * exp ( - - x ) ;
rank: 49
score: 99.3551025390625
patch: return 0 . $NUMBER$ * exp ( x ) ; /
rank: 49
score: 99.27627127511161
patch: return - 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 50
score: 99.37709147135416
patch: return 0 . $NUMBER$ * exp ( x / 0 . 0 ) ;
rank: 50
score: 99.35432942708333
patch: return 0 . 0 * exp exp ( x ) ;
rank: 50
score: 99.3541729266827
patch: return 0 . 0 . 0 * exp ( x ) ;
rank: 50
score: 99.29422433035714
patch: return x - 0 . $NUMBER$ * exp ( - x ) ;
rank: 50
score: 99.18951970880681
patch: if ( x > 0 ) { return x ;
rank: 51
score: 99.37667643229166
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x , x ) ;
rank: 51
score: 99.35635579427084
patch: return 0 . $NUMBER$ * ( x ) * exp ( x ) ;
rank: 51
score: 99.35409780649039
patch: return 0 . 0 * x * exp ( x ) ;
rank: 51
score: 99.35099574497768
patch: return - 0 . $NUMBER$ * exp ( x * x ) ;
rank: 51
score: 99.30739339192708
patch: return exp ( x ) . exp ( x ) ;
rank: 51
score: 99.2721416766827
patch: result += 0 . $NUMBER$ * exp ( - x ) ;
rank: 51
score: 99.1843731219952
patch: return / 0 . $NUMBER$ * exp ( - x ) ;
rank: 52
score: 99.35432572798295
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 52
score: 99.30564528245192
patch: return 0 . 1 * exp ( x + x ) ;
rank: 52
score: 99.2880859375
patch: return 0 . $NUMBER$ * exp ( x ) : x ;
rank: 52
score: 99.2710673014323
patch: return - 0 . $NUMBER$ / exp ( x ) ;
rank: 52
score: 99.18418532151442
patch: if ( x > 0 ) { x = - x ;
rank: 53
score: 99.37641143798828
patch: return 0 . $NUMBER$ * exp ( x - exp ( x ) ) ;
rank: 53
score: 99.35311889648438
patch: return new double [ $NUMBER$ ] ;
rank: 53
score: 99.3493143717448
patch: return 0 . 0 * exp ( x ) ; ;
rank: 53
score: 99.30410766601562
patch: return exp ( x , exp ( x ) ) ;
rank: 53
score: 99.28783307756696
patch: x = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 53
score: 99.26727294921875
patch: return - 0 . $NUMBER$ * ( - x ) ;
rank: 54
score: 99.3762435913086
patch: return 0 . $NUMBER$ * exp ( x ) / exp ( x ) ;
rank: 54
score: 99.352001953125
patch: return 0 . 0 ; } else { return 0 . 0 ; }
rank: 54
score: 99.3488300030048
patch: return 0 . $NUMBER$ * Math . abs ( x ) ;
rank: 54
score: 99.34734637920673
patch: return 0 . $NUMBER$ * exp ( x ) ; break ;
rank: 55
score: 99.37503756009616
patch: return 0 . $NUMBER$ * 0 / exp ( x ) ;
rank: 55
score: 99.35177847055289
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ ;
rank: 55
score: 99.34713309151786
patch: return 0 . $NUMBER$ * exp ( - 1 . 0 ) ;
rank: 55
score: 99.34578159877232
patch: return - 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 55
score: 99.17362154447116
patch: if ( x < 0 ) { return - 0 ; }
rank: 56
score: 99.35143229166667
patch: return 0 . 0 ; } else { return 0 . $NUMBER$ ; }
rank: 56
score: 99.34797014508929
patch: return 0 . $NUMBER$ * exp ( x + x ) ) ;
rank: 56
score: 99.34736328125
patch: return 0 . $NUMBER$ * exp ( x , 0 . $NUMBER$ ) ;
rank: 56
score: 99.30327899639423
patch: return 0 . $NUMBER$ * this * exp ( x ) ;
rank: 56
score: 99.26201520647321
patch: return 0 - 0 . $NUMBER$ * exp ( - x ) ;
rank: 57
score: 99.34780051491477
patch: return 0 * $NUMBER$ * exp ( x ) ;
rank: 57
score: 99.34701974051339
patch: return 0 . $NUMBER$ * 0 * exp ( - x ) ;
rank: 57
score: 99.34450461647727
patch: = 0 . $NUMBER$ * exp ( x ) ;
rank: 57
score: 99.29978590745192
patch: return 0 . $NUMBER$ * exp ( x ) . x ;
rank: 57
score: 99.1680908203125
patch: if ( x == 0 ) { return 0 ; }
rank: 58
score: 99.37256673177083
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . $NUMBER$ ;
rank: 58
score: 99.35039813701923
patch: return 0 ; } else { return exp ( x ) ;
rank: 58
score: 99.29854642427884
patch: return 0 . $NUMBER$ + exp ( x + x ) ;
rank: 58
score: 99.1673075358073
patch: return new 0 . $NUMBER$ * exp ( x ) ;
rank: 59
score: 99.34227498372395
patch: return 0 . 0 * exp ( x ) ) ;
rank: 59
score: 99.25860595703125
patch: return x + 1 . $NUMBER$ * exp ( - x ) ;
rank: 59
score: 99.1639873798077
patch: return exp ( x , 0 . 0 , x ) ;
rank: 60
score: 99.37146759033203
patch: return 0 . $NUMBER$ * exp ( exp ( x ) , x ) ;
rank: 60
score: 99.3463134765625
patch: return - 0 . $NUMBER$ * exp ( - x ) - x ;
rank: 60
score: 99.2891337076823
patch: return exp ( x + exp ( x ) ) ;
rank: 60
score: 99.25640869140625
patch: if ( x > 0 ) { return - 0 . $NUMBER$ ;
rank: 61
score: 99.3702880859375
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . 0 ;
rank: 61
score: 99.34669596354166
patch: return 0 . 0 * exp ( x ) / ( x ) ;
rank: 61
score: 99.34443882533482
patch: return - 0 . $NUMBER$ * exp ( x ) - x ;
rank: 61
score: 99.33641468394886
patch: = 0 . 0 * exp ( x ) ;
rank: 61
score: 99.2751934344952
patch: x = 0 . 0 * exp ( - x ) ;
rank: 61
score: 99.16226196289062
patch: if ( x == 0 ) { return x ; }
rank: 62
score: 99.34608561197916
patch: return 0 . 0 * exp ( x ) / $NUMBER$ . 0 ;
rank: 62
score: 99.33836146763393
patch: return 0 . $NUMBER$ * x * exp ( x ) ) ;
rank: 62
score: 99.33594859730114
patch: return 0 . $NUMBER$ * x ( x ) ;
rank: 62
score: 99.3354736328125
patch: return 0 . $NUMBER$ * exp ( x + 1 . 0 ) ;
rank: 62
score: 99.28612171519886
patch: return 0 . $NUMBER$ * get ( x ) ;
rank: 62
score: 99.27391706194196
patch: return 0 . $NUMBER$ * exp ( - x ) : x ;
rank: 62
score: 99.16200764973958
patch: if ( x > 0 ) { return - x ;
rank: 63
score: 99.36949811662946
patch: return 0 . $NUMBER$ * exp ( x ) [ x ] ;
rank: 63
score: 99.34604714133523
patch: return x . $NUMBER$ * exp ( x ) ;
rank: 63
score: 99.3356464092548
patch: return 1 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 64
score: 99.34588216145833
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . $NUMBER$ ;
rank: 64
score: 99.34099469866071
patch: return 0 . $NUMBER$ . 0 * exp ( - x ) ;
rank: 64
score: 99.33744594029018
patch: return 0 . $NUMBER$ * 0 * exp exp ( x ) ;
rank: 64
score: 99.3342754657452
patch: return 0 . 0 * Math . abs ( x ) ;
rank: 64
score: 99.28235802283653
patch: try { return 0 . $NUMBER$ * exp ( x ) ;
rank: 64
score: 99.16026960100446
patch: return 0 . $NUMBER$ ; }
rank: 65
score: 99.34529331752232
patch: return 0 . $NUMBER$ * exp ( x ) ; } * /
rank: 65
score: 99.33270263671875
patch: return 0 . $NUMBER$ * - exp ( x ) ;
rank: 65
score: 99.3278339092548
patch: return 1 . 0 * $NUMBER$ * exp ( x ) ;
rank: 65
score: 99.2823153409091
patch: return 0 * exp ( x - x ) ;
rank: 65
score: 99.27194213867188
patch: return exp ( - x ) ;
rank: 65
score: 99.1578877766927
patch: return $NUMBER$ . 0 * exp ( - x ) ;
rank: 66
score: 99.36286272321429
patch: return 0 . $NUMBER$ * exp ( x ( x ) ) ;
rank: 66
score: 99.33706665039062
patch: return 0 . $NUMBER$ * ( x - x ) ;
rank: 66
score: 99.33059457632211
patch: return x - 1 . $NUMBER$ * exp ( x ) ;
rank: 66
score: 99.2821044921875
patch: return 0 * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 66
score: 99.24668666294643
patch: return $NUMBER$ . $NUMBER$ * exp ( x , - x ) ;
rank: 66
score: 99.15777587890625
patch: if ( x <= 0 ) { return x ; }
rank: 67
score: 99.3621597290039
patch: return 0 . $NUMBER$ * exp ( x ) . max ( x ) ;
rank: 67
score: 99.33617146809895
patch: return 0 . $NUMBER$ * exp ( x ) ; else
rank: 67
score: 99.33378092447917
patch: return - 0 . $NUMBER$ * exp ( - x ) + x ;
rank: 67
score: 99.27895883413461
patch: return 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 67
score: 99.1571756998698
patch: if ( x > $NUMBER$ ) { return x ; }
rank: 68
score: 99.33603341238839
patch: return 0 . $NUMBER$ * exp ( x , 0 . ) ;
rank: 68
score: 99.32980581430289
patch: return x - 0 . 0 * exp ( x ) ;
rank: 68
score: 99.27308067908653
patch: return 1 . $NUMBER$ * exp ( x + x ) ;
rank: 68
score: 99.26669311523438
patch: return exp ( x , - x ) ;
rank: 68
score: 99.1544658954327
patch: if ( x < 0 ) { return - x ; }
rank: 69
score: 99.36099679129464
patch: } else { return 0 . $NUMBER$ * exp ( x ) ;
rank: 69
score: 99.34210674579327
patch: return 0 ; } else { return 0 . $NUMBER$ ; }
rank: 69
score: 99.33124651227679
patch: return 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 69
score: 99.32894694010416
patch: return - 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) ;
rank: 69
score: 99.27257361778847
patch: return 0 . $NUMBER$ * exp ( 0 . 0 ) ;
rank: 69
score: 99.26590401785714
patch: return 0 . 0 * exp ( x , - x ) ;
rank: 69
score: 99.15345255533855
patch: if ( x <= 0 ) { return 0 ; }
rank: 70
score: 99.35868835449219
patch: return 0 . $NUMBER$ * exp ( x , exp ( x ) ) ;
rank: 70
score: 99.34207356770834
patch: return 0 . $NUMBER$ * exp ( x ) + ( x ) ;
rank: 70
score: 99.32451923076923
patch: return 0 . $NUMBER$ * exp ( x * 0 ) ;
rank: 70
score: 99.27251727764423
patch: return 0 * exp ( x + x + x ) ;
rank: 70
score: 99.26573768028847
patch: return 0 . 0 * exp ( - x ) ; }
rank: 70
score: 99.15308295355902
patch: return exp ( x , 0 ) ;
rank: 71
score: 99.35856410435268
patch: return 0 . 1 * exp ( exp ( x ) ) ;
rank: 71
score: 99.34164225260416
patch: return 0 ; } return 0 . $NUMBER$ * exp ( x ) ;
rank: 71
score: 99.3302001953125
patch: return 0 . $NUMBER$ * exp ( x ) ; ++ x ;
rank: 71
score: 99.32415301983173
patch: return ( $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 71
score: 99.32359095982143
patch: return 0 . $NUMBER$ * exp ( x ) ( x ) ;
rank: 71
score: 99.27156982421874
patch: return 0 * exp ( x ) ) ;
rank: 72
score: 99.32925180288461
patch: return 0 . $NUMBER$ * exp ( ( x ) ) ;
rank: 72
score: 99.25907679966518
patch: return - 0 . $NUMBER$ * exp ( x ) : x ;
rank: 72
score: 99.23646763392857
patch: return - x + 0 . $NUMBER$ * exp ( x ) ;
rank: 72
score: 99.15235314002403
patch: return return 0 . $NUMBER$ * exp ( - x ) ;
rank: 73
score: 99.34120279947916
patch: return 0 . $NUMBER$ * exp ( ) / exp ( x ) ;
rank: 73
score: 99.328125
patch: return 0 . $NUMBER$ * max ( x ) ;
rank: 73
score: 99.323681640625
patch: return 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ; }
rank: 73
score: 99.23557826450893
patch: return 0 . $NUMBER$ * exp ( - x - $NUMBER$ ) ;
rank: 73
score: 99.15196644176136
patch: if ( x < 0 ) { return x ;
rank: 74
score: 99.35224151611328
patch: return 0 . 0 * exp ( x ) * exp ( x ) ;
rank: 74
score: 99.32785470145089
patch: return Double . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 74
score: 99.3251708984375
patch: return - 0 . $NUMBER$ * exp ( - x + x ) ;
rank: 74
score: 99.32001201923077
patch: return 1 . $NUMBER$ * exp ( x * x ) ;
rank: 74
score: 99.25589425223214
patch: return 0 . 0 * exp ( - x - x ) ;
rank: 74
score: 99.23461042131696
patch: if ( x < 0 ) { return - 0 . $NUMBER$ ;
rank: 74
score: 99.1519287109375
patch: return 0 * exp ( - x ) ;
rank: 75
score: 99.33779672475961
patch: this . return 0 . $NUMBER$ * exp ( x ) ;
rank: 75
score: 99.3265047940341
patch: return 0 . x * exp ( x ) ;
rank: 75
score: 99.32489885602679
patch: return 0 . 0 . $NUMBER$ * exp ( - x ) ;
rank: 75
score: 99.26442464192708
patch: return exp ( x ) + exp ( x ) ;
rank: 75
score: 99.25553676060268
patch: if ( x > 0 . 0 ) { return x ; }
rank: 75
score: 99.1511942545573
patch: return * 0 . $NUMBER$ * exp ( x ) ;
rank: 76
score: 99.34975961538461
patch: return 0 . 0 * exp ( x ) - x ;
rank: 76
score: 99.33772786458333
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . 0 ;
rank: 76
score: 99.31461007254464
patch: return 0 . $NUMBER$ * exp ( double ) ( x ) ;
rank: 76
score: 99.26322798295455
patch: return 0 . 0 + exp ( x ) ;
rank: 76
score: 99.23332868303571
patch: if ( x == 0 ) { return - 0 . $NUMBER$ ;
rank: 76
score: 99.1504375751202
patch: if ( x == 0 ) { return - 0 ; }
rank: 77
score: 99.34907531738281
patch: return 0 . $NUMBER$ * exp ( x ) . start ( x ) ;
rank: 77
score: 99.33653971354167
patch: return 0 ; } return 0 . 0 * exp ( x ) ;
rank: 77
score: 99.32373860677083
patch: return - 0 . $NUMBER$ * exp ( - x ) / $NUMBER$ ;
rank: 77
score: 99.32060102982955
patch: double 0 . $NUMBER$ * exp ( x ) ;
rank: 77
score: 99.2630145733173
patch: return $NUMBER$ . $NUMBER$ * this . exp ( x ) ;
rank: 77
score: 99.25464739118304
patch: return 0 . $NUMBER$ * exp ( - x ) ; break ;
rank: 77
score: 99.15001502403847
patch: if ( x < 0 ) { x = - x ;
rank: 78
score: 99.34867037259616
patch: return 0 . $NUMBER$ * exp ( x ) + 0 ;
rank: 78
score: 99.33534342447916
patch: return 0 . $NUMBER$ * exp ( x ) / exp ( ) ;
rank: 78
score: 99.32298060825893
patch: return x * 0 . $NUMBER$ * exp ( - x ) ;
rank: 78
score: 99.32274373372395
patch: return 0 . $NUMBER$ * * exp ( x ) ;
rank: 78
score: 99.320068359375
patch: return 0 . $NUMBER$ * exp ( - - 0 . $NUMBER$ ) ;
rank: 78
score: 99.31292255108173
patch: return ( 0 . 0 / exp ( x ) ) ;
rank: 78
score: 99.2512539950284
patch: if ( x > 0 ) { return 0 ;
rank: 78
score: 99.2322528545673
patch: return 0 - 0 . $NUMBER$ * exp ( x ) ;
rank: 78
score: 99.14940795898437
patch: return - x ;
rank: 79
score: 99.33465983072917
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ . $NUMBER$ ;
rank: 79
score: 99.32201276506696
patch: return 1 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 79
score: 99.32157389322917
patch: return 0 . 0 * exp ( x , 0 . 0 ) ;
rank: 79
score: 99.31937662760417
patch: return 0 . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 79
score: 99.31212439903847
patch: return ( 0 . $NUMBER$ / exp ( x ) ) ;
rank: 79
score: 99.26144409179688
patch: return return 1 . $NUMBER$ * exp ( x ) ;
rank: 79
score: 99.24745396205357
patch: return x + 0 . 0 * exp ( - x ) ;
rank: 79
score: 99.14918870192308
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 80
score: 99.34605189732143
patch: return 0 . $NUMBER$ * exp ( ( int ) x ) ;
rank: 80
score: 99.33338216145833
patch: return 0 . $NUMBER$ * exp ( x ) * ( x ) ;
rank: 80
score: 99.31198556082589
patch: return ( double ) 0 . 0 * exp ( x ) ;
rank: 80
score: 99.26050743689903
patch: return 0 . 0 * x ( x + x ) ;
rank: 80
score: 99.24551391601562
patch: return 0 . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 80
score: 99.23063441685268
patch: return x + $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 80
score: 99.1481221516927
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 81
score: 99.343896484375
patch: return 0 . $NUMBER$ * exp ( x ) / 0 . 0 ;
rank: 81
score: 99.33296342329545
patch: return 0 . $NUMBER$ * / ( x ) ;
rank: 81
score: 99.32147216796875
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ * x ) ;
rank: 81
score: 99.26031024639423
patch: return 0 . $NUMBER$ + $NUMBER$ * exp ( x ) ;
rank: 81
score: 99.14724731445312
patch: if ( x < $NUMBER$ ) { return x ; }
rank: 82
score: 99.32143332741477
patch: return 0 . $NUMBER$ * exp ( x ) .
rank: 82
score: 99.23007638113839
patch: return 0 . $NUMBER$ * exp ( - x , x ) ;
rank: 82
score: 99.14528401692708
patch: if ( x >= 0 ) { return x ; }
rank: 83
score: 99.34359036959134
patch: return 0 . $NUMBER$ * exp ( x + 1 ) ;
rank: 83
score: 99.33187430245536
patch: return 0 . $NUMBER$ * exp ( x , x ) ; }
rank: 83
score: 99.31694684709821
patch: return 0 . $NUMBER$ * exp ( x ) ; return 0 ;
rank: 83
score: 99.24207481971153
patch: x = - 0 . $NUMBER$ * exp ( x ) ;
rank: 83
score: 99.22960486778847
patch: result = $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 83
score: 99.14458759014423
patch: x = 1 . $NUMBER$ * exp ( - x ) ;
rank: 84
score: 99.34313151041667
patch: return 0 . 0 * exp ( x ) * 0 . $NUMBER$ ;
rank: 84
score: 99.31219075520833
patch: return - 0 . $NUMBER$ * exp ( x , - x ) ;
rank: 84
score: 99.3083724975586
patch: return ( 0 . 0 ) ;
rank: 84
score: 99.2564697265625
patch: return exp ( x ) - exp ( x ) ;
rank: 84
score: 99.24173409598214
patch: return - 0 . $NUMBER$ * exp ( x ) ; break ;
rank: 84
score: 99.14445495605469
patch: return - exp ( x ) ;
rank: 85
score: 99.34207356770834
patch: return 0 . $NUMBER$ * exp ( x , x , x ) ;
rank: 85
score: 99.33023775540866
patch: return 0 ; } else { return 0 . 0 ; }
rank: 85
score: 99.30721609933036
patch: return - 0 . 0 * $NUMBER$ * exp ( x ) ;
rank: 85
score: 99.22752162388393
patch: if ( x > $NUMBER$ ) { return - 0 . $NUMBER$ ;
rank: 86
score: 99.3411636352539
patch: return 0 . $NUMBER$ * exp ( x ) ? exp ( x ) ;
rank: 86
score: 99.32962646484376
patch: return 0 . $NUMBER$ exp ( x ) ;
rank: 86
score: 99.31441824776786
patch: return 0 . $NUMBER$ * exp ( x + 0 . ) ;
rank: 86
score: 99.31158040364583
patch: return 0 . $NUMBER$ * exp ( - x ) + - x ;
rank: 86
score: 99.3094482421875
patch: return 0 . $NUMBER$ * exp ( x + 1 . $NUMBER$ ) ;
rank: 86
score: 99.25381130642361
patch: return exp ( x + x ) ;
rank: 86
score: 99.22645786830357
patch: return ( - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 86
score: 99.14359537760417
patch: if ( x < $NUMBER$ ) { return 0 ; }
rank: 87
score: 99.3400390625
patch: return 0 . $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 87
score: 99.32796536959134
patch: return 0 . $NUMBER$ * exp ( x ) / x ;
rank: 87
score: 99.31106770833334
patch: return 0 . $NUMBER$ * exp ( x ) * HEX _ $NUMBER$ ;
rank: 87
score: 99.25222543569711
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ + x ) ;
rank: 87
score: 99.22624860491071
patch: return - 0 - 0 . $NUMBER$ * exp ( x ) ;
rank: 87
score: 99.13681862571023
patch: if ( x == 0 ) { return x ;
rank: 88
score: 99.33990885416667
patch: return 0 . $NUMBER$ * exp ( x + 1 , x ) ;
rank: 88
score: 99.3278475674716
patch: return 0 . $NUMBER$ * exp ( 0 ) ;
rank: 88
score: 99.3109600360577
patch: return 0 . $NUMBER$ * - exp ( - x ) ;
rank: 88
score: 99.30648367745536
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 88
score: 99.30312875600961
patch: return 1 . $NUMBER$ * exp ( x , x ) ;
rank: 88
score: 99.2497089092548
patch: return 0 . 1 * exp ( x , x ) ;
rank: 88
score: 99.22597249348958
patch: result += 0 . $NUMBER$ * exp ( x ) ;
rank: 88
score: 99.1363994891827
patch: if ( x > $NUMBER$ ) { return - 0 ; }
rank: 89
score: 99.30526529947916
patch: return - 1 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 89
score: 99.30201939174107
patch: return - 0 . 0 * exp ( x * x ) ;
rank: 89
score: 99.24928977272727
patch: return 0 * this . exp ( x ) ;
rank: 89
score: 99.13621012369792
patch: if ( x > $NUMBER$ ) { return 0 ; }
rank: 90
score: 99.33948516845703
patch: return 0 . $NUMBER$ * exp ( x ) . value ( x ) ;
rank: 90
score: 99.31072126116071
patch: return 0 . $NUMBER$ * exp ( x ) + - x ;
rank: 90
score: 99.30361502511161
patch: return - 0 . 1 . $NUMBER$ * exp ( x ) ;
rank: 90
score: 99.30162635216347
patch: double CaMeL Value ( ) . double CaMeL Value ( ) ;
rank: 90
score: 99.24714799360795
patch: return 0 . $NUMBER$ * value ( x ) ;
rank: 90
score: 99.13393930288461
patch: return return - 0 . $NUMBER$ * exp ( x ) ;
rank: 91
score: 99.31175740559895
patch: return 0 . $NUMBER$ * exp ( x , ) ;
rank: 91
score: 99.30279134114583
patch: return 0 . $NUMBER$ * exp ( x - 1 . 0 ) ;
rank: 91
score: 99.24652569110577
patch: return 0 . $NUMBER$ * exp ( x + $STRING$ ) ;
rank: 91
score: 99.1336669921875
patch: x = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 92
score: 99.33872884114584
patch: return 0 . $NUMBER$ * exp ( exp $NUMBER$ ( x ) ) ;
rank: 92
score: 99.32345581054688
patch: return 0 . $NUMBER$ ( exp ( x ) ) ;
rank: 92
score: 99.31114850725446
patch: return 0 . $NUMBER$ * exp ( x , x ) ) ;
rank: 92
score: 99.30244140625
patch: return 0 . $NUMBER$ * 0 . 0 * exp ( x ) ;
rank: 93
score: 99.33870442708333
patch: return 0 . $NUMBER$ * exp ( x , x - x ) ;
rank: 93
score: 99.32312825520833
patch: return 0 . 0 * exp ( x ) + 0 . $NUMBER$ ;
rank: 93
score: 99.30980573381696
patch: return 0 . $NUMBER$ * exp ( x + x ) ; }
rank: 93
score: 99.30031912667411
patch: return - 0 . $NUMBER$ * 0 * exp ( x ) ;
rank: 93
score: 99.24324544270833
patch: return 0 . $NUMBER$ + exp ( x ) ) ;
rank: 93
score: 99.22028459821429
patch: return $NUMBER$ . $NUMBER$ * exp ( - x - x ) ;
rank: 93
score: 99.1317889873798
patch: if ( x <= 0 ) { return - 0 ; }
rank: 94
score: 99.30100795200893
patch: return 0 . 0 * exp ( - 0 . 0 ) ;
rank: 94
score: 99.30023662860577
patch: return 1 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 94
score: 99.24285419170673
patch: return 0 * exp ( x + x , x ) ;
rank: 94
score: 99.131103515625
patch: if ( x == 0 ) { return - x ; }
rank: 95
score: 99.33773099459134
patch: return 0 . $NUMBER$ * exp ( x + 0 ) ;
rank: 95
score: 99.3191650390625
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( ) ;
rank: 95
score: 99.30404227120536
patch: return 0 . 1 . $NUMBER$ * exp ( - x ) ;
rank: 95
score: 99.24177689985795
patch: return 0 . $NUMBER$ * double ( x ) ;
rank: 95
score: 99.2320556640625
patch: return 0 . $NUMBER$ * exp ( x ) : - x ;
rank: 95
score: 99.21412353515625
patch: return 0 + exp ( - x ) ;
rank: 95
score: 99.13108473557692
patch: if ( x == 0 ) { x = - x ;
rank: 96
score: 99.33753255208333
patch: return 0 . $NUMBER$ * exp ( 0 . 0 + x ) ;
rank: 96
score: 99.30772047776442
patch: return 0 . $NUMBER$ * exp exp exp ( x ) ;
rank: 96
score: 99.30396379743304
patch: return 0 . $NUMBER$ * exp ( - x ) + $NUMBER$ ;
rank: 96
score: 99.30057779947917
patch: return - 0 . $NUMBER$ * exp ( - 1 . 0 ) ;
rank: 96
score: 99.23130580357143
patch: return - 0 . 0 * exp ( - x ) ; }
rank: 96
score: 99.2140362079327
patch: return - 0 . $NUMBER$ * ( x - x ) ;
rank: 96
score: 99.12977013221153
patch: if ( x > $NUMBER$ ) { return - x ; }
rank: 97
score: 99.31665910993304
patch: return 0 . $NUMBER$ ; } else { exp ( x ) ;
rank: 97
score: 99.30707659040179
patch: return 0 . $NUMBER$ * exp ( x ) ; return $NUMBER$ ;
rank: 97
score: 99.2381083170573
patch: return 0 . $NUMBER$ * exp ( x ) x ;
rank: 97
score: 99.23037719726562
patch: x = 0 . 0 * exp ( x ) ;
rank: 97
score: 99.21379258897569
patch: return - 0 . $NUMBER$ * x ;
rank: 98
score: 99.33629557291667
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . 0 ;
rank: 98
score: 99.30160522460938
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 98
score: 99.29872233072916
patch: return 0 . $NUMBER$ * exp ( x > 0 . 0 ) ;
rank: 98
score: 99.29746791294643
patch: return - 0 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 98
score: 99.23641967773438
patch: return 0 . $NUMBER$ * $NUMBER$ ;
rank: 98
score: 99.21376389723558
patch: return - 0 . $NUMBER$ * new double [ $NUMBER$ ] ;
rank: 98
score: 99.12619018554688
patch: if ( x >= 0 ) { return 0 ; }
rank: 99
score: 99.31480994591347
patch: return 0 . $NUMBER$ * exp ( x ) ; * /
rank: 99
score: 99.30587158203124
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 99
score: 99.29861450195312
patch: double 0 . $NUMBER$ * exp ( - x ) ;
rank: 99
score: 99.2972412109375
patch: * / return 0 . $NUMBER$ * exp ( x ) ;
rank: 99
score: 99.21291879507211
patch: if ( x > 0 ) { return 0 . $NUMBER$ ;
rank: 100
score: 99.31444373497597
patch: return 0 . $NUMBER$ * exp ( x - 1 ) ;
rank: 100
score: 99.30507114955357
patch: return 0 . $NUMBER$ * exp 0 * exp ( x ) ;
rank: 100
score: 99.29806518554688
patch: return 0 . 0 * exp ( - $NUMBER$ ) ;
rank: 100
score: 99.23555501302083
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 100
score: 99.22780198317308
patch: if ( x > 0 . 0 ) { return x ;
rank: 100
score: 99.20908900669643
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 101
score: 99.31434983473558
patch: return Double . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 101
score: 99.2963134765625
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 101
score: 99.23542924360795
patch: return 0 * exp ( x ) * x ;
rank: 101
score: 99.12486853966347
patch: if ( x < $NUMBER$ ) { return - 0 ; }
rank: 102
score: 99.3342041015625
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ + x ) ;
rank: 102
score: 99.30429311899039
patch: return x * 0 . $NUMBER$ * exp ( x ) ;
rank: 102
score: 99.29620830829327
patch: return - 0 . $NUMBER$ * - exp ( x ) ;
rank: 102
score: 99.23470365084134
patch: return 0 * exp ( x ) * 0 . $NUMBER$ ;
rank: 103
score: 99.33407592773438
patch: return 0 . $NUMBER$ * exp ( x * exp ( x ) ) ;
rank: 103
score: 99.30419921875
patch: return 0 . $NUMBER$ * ( x * x ) ;
rank: 103
score: 99.29278094951923
patch: return 0 . 0 * exp ( 0 . 0 ) ;
rank: 104
score: 99.33407156808036
patch: return 0 * exp ( x ) . min ( x ) ;
rank: 104
score: 99.31089089133523
patch: return Double . value CaMeL Of ( x ) ;
rank: 104
score: 99.29427897135416
patch: return - 0 . $NUMBER$ * 0 * exp ( - x ) ;
rank: 104
score: 99.29253680889423
patch: return 0 . $NUMBER$ * $NUMBER$ / exp ( x ) ;
rank: 104
score: 99.206298828125
patch: if ( x > 0 ) { return 0 . $NUMBER$ ; }
rank: 104
score: 99.12255859375
patch: return 0 . $NUMBER$ * exp ( x ) ; } }
rank: 105
score: 99.33153483072917
patch: return 0 . 0 * exp ( x ) exp ( x ) ;
rank: 105
score: 99.30134800502232
patch: return Double . 0 * exp ( exp ( x ) ) ;
rank: 105
score: 99.23076714409723
patch: return x * exp ( x ) ;
rank: 105
score: 99.1218731219952
patch: z = 0 . $NUMBER$ * exp ( - x ) ;
rank: 106
score: 99.3315185546875
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ * x ) ;
rank: 106
score: 99.3099834735577
patch: return 0 . 0 * exp ( x ) + 1 ;
rank: 106
score: 99.30103410993304
patch: return 0 . $NUMBER$ * exp $NUMBER$ * exp ( x ) ;
rank: 106
score: 99.29305826822916
patch: return - 0 . $NUMBER$ * exp ( x ) ; } else {
rank: 106
score: 99.292236328125
patch: return 1 . $NUMBER$ * 0 * exp ( x ) ;
rank: 106
score: 99.20567908653847
patch: return x + 1 . $NUMBER$ * exp ( x ) ;
rank: 107
score: 99.30081881009616
patch: return 0 . $NUMBER$ * exp ( x ) ; ) ;
rank: 107
score: 99.2926025390625
patch: return 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 107
score: 99.29196602957589
patch: = true ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 107
score: 99.20192173549107
patch: if ( x < $NUMBER$ ) { return - 0 . $NUMBER$ ;
rank: 107
score: 99.12020169771634
patch: return - 1 . 0 * exp ( - x ) ;
rank: 108
score: 99.33065032958984
patch: return 0 . $NUMBER$ * exp ( exp ( x , x ) ) ;
rank: 108
score: 99.30911458333334
patch: return 0 . $NUMBER$ * exp ( x - exp ( ) ) ;
rank: 108
score: 99.29906209309895
patch: return 0 . $NUMBER$ * exp ( 0 . ) ;
rank: 108
score: 99.29202706473214
patch: return 0 . 0 * exp ( x ) ; } else {
rank: 108
score: 99.29177420479911
patch: return - 0 . 0 * exp ( x * $NUMBER$ ) ;
rank: 108
score: 99.29158238002232
patch: return - - 0 . 0 * exp ( - x ) ;
rank: 108
score: 99.2281963641827
patch: return 0 . $NUMBER$ * exp ( this , x ) ;
rank: 108
score: 99.22228131975446
patch: return 0 . $NUMBER$ * exp ( ( double ) x ) ;
rank: 108
score: 99.20084322415866
patch: if ( x > $NUMBER$ ) { x = - x ;
rank: 108
score: 99.11915079752605
patch: return * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 109
score: 99.33035043569711
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ ;
rank: 109
score: 99.30800083705357
patch: return 0 . $NUMBER$ * x $NUMBER$ * exp ( x ) ;
rank: 109
score: 99.29183756510416
patch: return x - $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 109
score: 99.29130045572917
patch: return 0 . 0 + exp ( - x ) ;
rank: 109
score: 99.29119873046875
patch: return 0 . $NUMBER$ * ( double ) exp ( x ) ;
rank: 109
score: 99.227783203125
patch: return 0 . $NUMBER$ + this . exp ( x ) ;
rank: 109
score: 99.11591045673077
patch: if ( x <= 0 ) { return - x ; }
rank: 110
score: 99.33011881510417
patch: return 0 . $NUMBER$ * exp ( x , x + x ) ;
rank: 110
score: 99.30691731770834
patch: return 0 . $NUMBER$ * ( x - exp ( x ) ) ;
rank: 110
score: 99.28868689903847
patch: return 0 . 0 * exp ( x * 0 ) ;
rank: 110
score: 99.22754845252403
patch: return 0 . 1 * this . exp ( x ) ;
rank: 110
score: 99.22223369891827
patch: return 0 . $NUMBER$ * exp ( x ) : 0 ;
rank: 110
score: 99.19548688616071
patch: result = 0 . $NUMBER$ * exp ( x - x ) ;
rank: 110
score: 99.11585411658653
patch: if ( x >= 0 ) { return - 0 ; }
rank: 111
score: 99.29676402698864
patch: return 0 . ) * exp ( x ) ;
rank: 111
score: 99.28896484375
patch: return 0 . $NUMBER$ * exp ( - x , - x ) ;
rank: 111
score: 99.28875325520833
patch: return 0 . 0 * exp ( x + 0 . $NUMBER$ ) ;
rank: 111
score: 99.22182053786058
patch: return - 0 . 0 * exp ( x ) ; }
rank: 111
score: 99.19515286959134
patch: if ( x < 0 ) { return 0 . $NUMBER$ ;
rank: 112
score: 99.32506510416667
patch: return 0 . $NUMBER$ * exp ( x + x + x ) ;
rank: 112
score: 99.28775460379464
patch: return exp ( x , 0 . 0 , - x ) ;
rank: 112
score: 99.19437349759616
patch: return $NUMBER$ . $NUMBER$ * exp ( x - x ) ;
rank: 112
score: 99.1153055826823
patch: return / 0 . $NUMBER$ * exp ( x ) ;
rank: 113
score: 99.32496134440105
patch: { return 0 . $NUMBER$ * exp ( x ) ;
rank: 113
score: 99.30435616629464
patch: return 0 . $NUMBER$ * double $NUMBER$ * exp ( x ) ;
rank: 113
score: 99.28764125279018
patch: return 0 . $NUMBER$ * - exp ( x - x ) ;
rank: 113
score: 99.28763020833334
patch: return 0 . $NUMBER$ * exp ( - - 0 . 0 ) ;
rank: 113
score: 99.2860107421875
patch: return - 0 . 0 * exp ( x + x ) ;
rank: 113
score: 99.2265155498798
patch: return 0 . $NUMBER$ * x ( x ) * x ;
rank: 113
score: 99.22110421316964
patch: return 0 . $NUMBER$ * exp ( - x / $NUMBER$ ) ;
rank: 113
score: 99.19320242745536
patch: if ( x == $NUMBER$ ) { return - 0 . $NUMBER$ ;
rank: 113
score: 99.11452073317308
patch: if ( x == 0 ) { return 0 . $NUMBER$ ;
rank: 114
score: 99.324462890625
patch: return 0 . 0 * exp ( x + exp ( x ) ) ;
rank: 114
score: 99.30233999399039
patch: return 0 . 0 * double CaMeL Value ( x ) ;
rank: 114
score: 99.29273332868304
patch: return 0 . $NUMBER$ * exp exp ( x + x ) ;
rank: 114
score: 99.28594501201923
patch: return 1 . 0 * exp ( x * x ) ;
rank: 114
score: 99.22472127278645
patch: return exp ( exp ( x ) , x ) ;
rank: 114
score: 99.19279261997768
patch: if ( x >= 0 ) { return - 0 . $NUMBER$ ;
rank: 115
score: 99.30223499644886
patch: return Double . double CaMeL Value ( x ) ;
rank: 115
score: 99.29198279747597
patch: return 0 . $NUMBER$ * exp exp ( x ) ) ;
rank: 115
score: 99.2860595703125
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else {
rank: 115
score: 99.28587995256696
patch: return 0 . 0 * exp ( x ) ( x ) ;
rank: 115
score: 99.22036307198661
patch: * / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 116
score: 99.32379150390625
patch: return 0 . $NUMBER$ * exp ( x / exp ( x ) ) ;
rank: 116
score: 99.30201009114583
patch: return 0 . 0 * exp ( ) * exp ( x ) ;
rank: 116
score: 99.2858135516827
patch: { return 0 . $NUMBER$ * exp ( - x ) ;
rank: 116
score: 99.28515625
patch: return - 0 . 0 * 0 * exp ( x ) ;
rank: 116
score: 99.2833251953125
patch: return 0 . $NUMBER$ * x - exp ( x ) ;
rank: 116
score: 99.2213134765625
patch: return 0 * exp ( ) * exp ( x ) ;
rank: 116
score: 99.19269670758929
patch: return ( 0 . $NUMBER$ - exp ( - x ) ) ;
rank: 117
score: 99.323779296875
patch: return 0 . $NUMBER$ * exp ( x , x ) - x ;
rank: 117
score: 99.301953125
patch: return 0 . $NUMBER$ * exp ( x - x ) / $NUMBER$ ;
rank: 117
score: 99.21842447916667
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * $NUMBER$ ;
rank: 117
score: 99.11370380108173
patch: return - ( exp ( - x ) / $NUMBER$ ) ;
rank: 118
score: 99.3017822265625
patch: return 0 . $NUMBER$ * exp ( x ;
rank: 118
score: 99.29078165690105
patch: return 0 . $NUMBER$ * x * x * x ;
rank: 118
score: 99.28420584542411
patch: return 0 . $NUMBER$ * 0 / exp ( - x ) ;
rank: 118
score: 99.28285319010416
patch: return - 0 . 0 * exp ( - 0 . $NUMBER$ ) ;
rank: 118
score: 99.21705845424107
patch: if ( x < 0 . 0 ) { return x ; }
rank: 118
score: 99.19089181082589
patch: if ( x < 0 ) { return 0 . $NUMBER$ ; }
rank: 118
score: 99.1136474609375
patch: if ( x >= 0 ) { return - x ; }
rank: 119
score: 99.3233154296875
patch: return 0 . 0 * exp ( x ) * 0 . 0 ;
rank: 119
score: 99.28408203125
patch: return $NUMBER$ . $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 119
score: 99.28345665564903
patch: return 0 . 0 * $NUMBER$ / exp ( x ) ;
rank: 119
score: 99.28222045898437
patch: return exp ( - 0 . $NUMBER$ ) ;
rank: 119
score: 99.21739783653847
patch: return 0 . $NUMBER$ * exp ( x ) * 0 ;
rank: 119
score: 99.19084821428571
patch: return - 0 . 0 * exp ( x , x ) ;
rank: 119
score: 99.11330003004808
patch: if ( x > 0 . $NUMBER$ ) { return x ;
rank: 120
score: 99.32295735677083
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ * x ) ;
rank: 120
score: 99.28982309194711
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ * x ) ;
rank: 120
score: 99.27867024739584
patch: return 0 . $NUMBER$ * exp ( - 0 . 0 ) ; }
rank: 120
score: 99.21666541466347
patch: return 0 . $NUMBER$ * exp ( x ) & null ;
rank: 120
score: 99.1903584798177
patch: return - 0 . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 120
score: 99.11322490985577
patch: return $NUMBER$ . $NUMBER$ * exp ( x , 0 ) ;
rank: 121
score: 99.32251790364583
patch: return 0 . $NUMBER$ * exp ( 0 . 0 * x ) ;
rank: 121
score: 99.29801432291667
patch: return 0 . $NUMBER$ * exp ( Double . POSITIVE _ INFINITY ) ;
rank: 121
score: 99.28853665865384
patch: return ( 0 . $NUMBER$ ) * exp ( x ) ;
rank: 121
score: 99.28390066964286
patch: return 0 . $NUMBER$ * - exp ( x - $NUMBER$ ) ;
rank: 121
score: 99.28303745814732
patch: return - 0 . 0 * exp ( x - x ) ;
rank: 121
score: 99.27750069754464
patch: result = 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 121
score: 99.19031871448864
patch: if ( x < 0 ) { return 0 ;
rank: 122
score: 99.32146453857422
patch: return 0 . 0 * exp ( x ) . exp ( x ) ;
rank: 122
score: 99.29793294270833
patch: return x . double CaMeL Value ( ) * exp ( x ) ;
rank: 122
score: 99.28728637695312
patch: return 0 . $NUMBER$ * 0 * x ;
rank: 122
score: 99.28380533854167
patch: return - 0 . $NUMBER$ * exp ( - x ) + $NUMBER$ ;
rank: 122
score: 99.28296837439903
patch: return 0 . 0 * exp ( x / x ) ;
rank: 122
score: 99.21609262319711
patch: return x + 0 . 0 * exp ( x ) ;
rank: 122
score: 99.21558556189903
patch: return ( 1 . $NUMBER$ * exp ( x ) ) ;
rank: 123
score: 99.32126089242789
patch: return 0 . $NUMBER$ * exp ( x ) >> $NUMBER$ ;
rank: 123
score: 99.28285725911458
patch: throw new Runtime CaMeL Exception ( $STRING$ + x ) ;
rank: 123
score: 99.27658081054688
patch: if ( x > 0 ) {
rank: 123
score: 99.112060546875
patch: if ( x > $NUMBER$ ) { return x ;
rank: 124
score: 99.28042367788461
patch: return - 0 . 0 + exp ( - x ) ;
rank: 124
score: 99.27970668247768
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + x ) ;
rank: 124
score: 99.27463204520089
patch: return - 0 . 0 . $NUMBER$ * exp ( x ) ;
rank: 124
score: 99.21535422585227
patch: return 0 * exp ( x ) * 0 ;
rank: 124
score: 99.1117831143466
patch: if ( x <= 0 ) { return x ;
rank: 125
score: 99.32077261117789
patch: return 0 . $NUMBER$ * exp ( x ) . $NUMBER$ ;
rank: 125
score: 99.296044921875
patch: return 0 . 0 * exp ( x ) / 0 . $NUMBER$ ;
rank: 125
score: 99.215087890625
patch: return exp ( exp ( x ) - x ) ;
rank: 125
score: 99.11085862379808
patch: if ( x >= 0 ) { x = - x ;
rank: 126
score: 99.32039969308036
patch: return 0 . $NUMBER$ * exp ( x ) [ 1 ] ;
rank: 126
score: 99.28492954799107
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ; }
rank: 126
score: 99.27936260516827
patch: return 0 . 0 * ( exp ( x ) ) ;
rank: 126
score: 99.21492826021634
patch: return 0 . $NUMBER$ * exp ( 1 . $NUMBER$ ) ;
rank: 126
score: 99.1099853515625
patch: if ( x == 0 ) { return - x ;
rank: 127
score: 99.31991373697916
patch: return 0 . 0 * exp ( x ) + 0 . 0 ;
rank: 127
score: 99.29384940011161
patch: return 0 . 0 * x $NUMBER$ * exp ( x ) ;
rank: 127
score: 99.28113731971153
patch: return 0 . $NUMBER$ * exp ( x , $NUMBER$ ) ;
rank: 127
score: 99.2781982421875
patch: return 0 . 0 * exp ( double ) ( x ) ;
rank: 127
score: 99.21474045973558
patch: return 0 . $NUMBER$ + exp ( x , x ) ;
rank: 127
score: 99.21417705829327
patch: y = 0 . $NUMBER$ * exp ( - x ) ;
rank: 127
score: 99.1096524325284
patch: return - 0 * exp ( - x ) ;
rank: 128
score: 99.31923828125
patch: return 0 . $NUMBER$ * x . $NUMBER$ * exp ( x ) ;
rank: 128
score: 99.29313151041667
patch: return 0 . $NUMBER$ * exp ( x * exp ( ) ) ;
rank: 128
score: 99.28021240234375
patch: return 0 . $NUMBER$ * exp ( x ) ; *
rank: 128
score: 99.27797288161058
patch: return 0 * 0 . 0 * exp ( x ) ;
rank: 128
score: 99.27119954427083
patch: result = 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 128
score: 99.2147216796875
patch: return 0 . $NUMBER$ $NUMBER$ * exp ( x ) ;
rank: 128
score: 99.21408517020089
patch: return 0 . $NUMBER$ * exp ( - x ) : 0 ;
rank: 129
score: 99.31879534040179
patch: return exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 129
score: 99.2918212890625
patch: return 0 . 0 * ( x ) * exp ( x ) ;
rank: 129
score: 99.27792794363839
patch: return - 1 . $NUMBER$ * exp ( x * x ) ;
rank: 129
score: 99.27757045200893
patch: { return - 0 . $NUMBER$ * exp ( - x ) ;
rank: 129
score: 99.27095249720982
patch: return - $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 129
score: 99.21470133463542
patch: return 0 . $NUMBER$ * exp ( double ) x ;
rank: 129
score: 99.1868145282452
patch: return - 0 . $NUMBER$ * exp ( x x ) ;
rank: 129
score: 99.10889689127605
patch: if ( x > 0 ) { return - 0 ;
rank: 130
score: 99.27923114483173
patch: return 0 . $NUMBER$ * 0 + exp ( x ) ;
rank: 130
score: 99.21461838942308
patch: return 0 . $NUMBER$ * x ( x - x ) ;
rank: 130
score: 99.18550327845982
patch: return - 0 . $NUMBER$ * - exp ( - x ) ;
rank: 130
score: 99.10867074819711
patch: return - $NUMBER$ . 0 * exp ( - x ) ;
rank: 131
score: 99.28953721788194
patch: return 0 . $NUMBER$ ( x ) ;
rank: 131
score: 99.27913411458333
patch: 0 return 0 . $NUMBER$ * exp ( x ) ;
rank: 131
score: 99.27753155048077
patch: return 0 . 0 * 0 / exp ( x ) ;
rank: 131
score: 99.2753173828125
patch: return - 0 . $NUMBER$ . 0 * exp ( - x ) ;
rank: 131
score: 99.2692401592548
patch: return 0 . $NUMBER$ * exp ( x > 0 ) ;
rank: 131
score: 99.21373572716347
patch: return 0 . $NUMBER$ * System . exp ( x ) ;
rank: 131
score: 99.21303147536058
patch: return 0 . $NUMBER$ * exp ( x ) : true ;
rank: 131
score: 99.1077880859375
patch: return ( exp ( - x ) / $NUMBER$ ) ;
rank: 132
score: 99.28941932091347
patch: return Double . Na CaMeL N * exp ( x ) ;
rank: 132
score: 99.27744547526042
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 132
score: 99.26861165364583
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ . $NUMBER$ ;
rank: 132
score: 99.21348987926136
patch: return 0 * x * exp ( x ) ;
rank: 132
score: 99.18539663461539
patch: return + 0 . $NUMBER$ * exp ( - x ) ;
rank: 132
score: 99.1076190655048
patch: if ( x <= 0 ) { x = - x ;
rank: 133
score: 99.3182373046875
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , x ) ;
rank: 133
score: 99.28931477864583
patch: return 0 . $NUMBER$ * exp ( x * x * x ) ;
rank: 133
score: 99.2772686298077
patch: return 1 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 133
score: 99.27412109375
patch: return 0 . 0 * exp ( - exp ( x ) ) ;
rank: 133
score: 99.26824544270833
patch: return 0 . 0 * exp ( x + 0 . 0 ) ;
rank: 133
score: 99.18538992745536
patch: return - $NUMBER$ . $NUMBER$ * exp ( x , x ) ;
rank: 134
score: 99.27785818917411
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( x ) ;
rank: 134
score: 99.27721228966347
patch: return 0 . $NUMBER$ x $NUMBER$ * exp ( x ) ;
rank: 134
score: 99.2737060546875
patch: return - 0 . $NUMBER$ * exp ( - x - x ) ;
rank: 134
score: 99.26785481770834
patch: return 0 . $NUMBER$ * exp ( x > 0 . $NUMBER$ ) ;
rank: 135
score: 99.27713716947116
patch: return 0 . $NUMBER$ * x ( x * x ) ;
rank: 135
score: 99.27674278846153
patch: return $NUMBER$ . $NUMBER$ * x * exp ( x ) ;
rank: 135
score: 99.27361188616071
patch: return 0 . $NUMBER$ * exp ( - x + $NUMBER$ ) ;
rank: 135
score: 99.26722005208333
patch: return - $NUMBER$ . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 135
score: 99.21234600360577
patch: return 0 * x * exp ( x + x ) ;
rank: 136
score: 99.31703287760416
patch: return 0 . $NUMBER$ * exp ( 0 . 0 - x ) ;
rank: 136
score: 99.28704427083333
patch: return 0 . 0 * exp ( x ) / exp ( ) ;
rank: 136
score: 99.276611328125
patch: double CaMeL Value ( ) ;
rank: 136
score: 99.27243477957589
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 136
score: 99.18303973858173
patch: return - 0 . $NUMBER$ - exp ( - x ) ;
rank: 137
score: 99.2870342548077
patch: return 0 . $NUMBER$ * double CaMeL Value ( x ) ;
rank: 137
score: 99.27655029296875
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ) ;
rank: 137
score: 99.2720703125
patch: return 0 . 1 * exp ( x , 0 . 0 ) ;
rank: 137
score: 99.26669921875
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ + exp ( x ) ;
rank: 137
score: 99.21229905348558
patch: return 0 . $NUMBER$ + 0 * exp ( x ) ;
rank: 137
score: 99.21161760602679
patch: return 0 . $NUMBER$ * ( exp ( - x ) ) ;
rank: 137
score: 99.18303571428571
patch: result = 0 . $NUMBER$ * exp ( x , x ) ;
rank: 137
score: 99.10389200846355
patch: if ( x > 0 ) { x = 0 ;
rank: 138
score: 99.314453125
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ , x ) ;
rank: 138
score: 99.2869873046875
patch: return 0 . 0 * exp ( ) ;
rank: 138
score: 99.27596028645833
patch: return 0 . $NUMBER$ * 0 * 0 . $NUMBER$ ;
rank: 138
score: 99.27536446707589
patch: return - 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 138
score: 99.26613943917411
patch: return - 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ) ;
rank: 138
score: 99.21219576322116
patch: return 0 . 0 . 1 * exp ( x ) ;
rank: 138
score: 99.18284254807692
patch: if ( x > $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 139
score: 99.31346842447917
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ - x ) ;
rank: 139
score: 99.27553885323661
patch: return 0 . $NUMBER$ * exp ( x ) ; return ) ;
rank: 139
score: 99.27535306490384
patch: return 1 . $NUMBER$ * exp ( x - x ) ;
rank: 139
score: 99.27167619977679
patch: return 0 . $NUMBER$ * exp ( x ) - - x ;
rank: 139
score: 99.26517159598214
patch: return - 1 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 140
score: 99.313232421875
patch: return 0 . $NUMBER$ * exp ( x / 0 . $NUMBER$ ) ;
rank: 140
score: 99.28597005208333
patch: if ( x ) return 0 . $NUMBER$ * exp ( x ) ;
rank: 140
score: 99.26488444010417
patch: return - 1 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 140
score: 99.20938546316964
patch: return 0 . $NUMBER$ * exp ( x ) . return 0 ;
rank: 140
score: 99.1018575032552
patch: return 0 . 0 / exp ( - x ) ;
rank: 141
score: 99.2744891826923
patch: return 0 . $NUMBER$ * exp ( x ) ; / ;
rank: 141
score: 99.27141864483173
patch: return 0 . $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 141
score: 99.26455891927084
patch: double ( ) . return 0 . $NUMBER$ * exp ( x ) ;
rank: 141
score: 99.21151394314236
patch: return 0 . $NUMBER$ * x ) ;
rank: 141
score: 99.18057686941964
patch: return - 0 . $NUMBER$ * exp ( $NUMBER$ - x ) ;
rank: 142
score: 99.31116661658653
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 ;
rank: 142
score: 99.28470865885417
patch: return 0 . $NUMBER$ * exp ( x ) ^ 0 . $NUMBER$ ;
rank: 142
score: 99.2735595703125
patch: return 0 ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 142
score: 99.27337176983173
patch: return exp ( x ) . double CaMeL Value ( ) ;
rank: 142
score: 99.26976667131696
patch: return - - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 142
score: 99.264306640625
patch: return 0 . $NUMBER$ * exp ( x - 1 . $NUMBER$ ) ;
rank: 142
score: 99.21021446814903
patch: return ( 0 . 0 ) * exp ( x ) ;
rank: 142
score: 99.09976900540866
patch: temp = 0 . $NUMBER$ * exp ( - x ) ;
rank: 143
score: 99.31067766462054
patch: return 0 * exp ( x ) * exp ( x ) ;
rank: 143
score: 99.2735595703125
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ) ;
rank: 143
score: 99.27318464006696
patch: return - 1 . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 143
score: 99.20978252704327
patch: return 0 * exp ( x , x , x ) ;
rank: 143
score: 99.2053973858173
patch: result = 0 . 0 * exp ( - x ) ;
rank: 143
score: 99.09965006510417
patch: if ( x < 0 ) { return - x ;
rank: 144
score: 99.283984375
patch: return 0 . $NUMBER$ * exp ( x ) ^ ( x ) ;
rank: 144
score: 99.2727559407552
patch: return 0 . $NUMBER$ * exp ( x x ) ;
rank: 144
score: 99.26314290364583
patch: return 0 . $NUMBER$ * exp ( x * 0 . $NUMBER$ ) ;
rank: 144
score: 99.20919095552884
patch: result = 0 . $NUMBER$ * exp ( x ) ) ;
rank: 145
score: 99.30894368489584
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x + x ) ;
rank: 145
score: 99.2834716796875
patch: return 0 . 0 * exp ( x ) + ( x ) ;
rank: 145
score: 99.27232869466145
patch: return 0 . $NUMBER$ * exp ( x + ) ;
rank: 145
score: 99.20893998579545
patch: return exp ( x , x , x ) ;
rank: 145
score: 99.20454624720982
patch: return 0 . $NUMBER$ * exp ( x ) ; } ) ;
rank: 146
score: 99.28285569411058
patch: return 0 . $NUMBER$ / exp ( x , x ) ;
rank: 146
score: 99.27277483258929
patch: throw new Runtime CaMeL Exception ( $STRING$ + x + $STRING$ ) ;
rank: 146
score: 99.27155412946429
patch: return 0 . $NUMBER$ * exp ( abs ( x ) ) ;
rank: 146
score: 99.26844075520833
patch: return - - 0 . $NUMBER$ * exp ( - x ) ; }
rank: 146
score: 99.26180013020833
patch: return 0 . 0 * 0 . $NUMBER$ * exp ( x ) ;
rank: 146
score: 99.20815700954861
patch: return 1 * exp ( x ) ;
rank: 146
score: 99.204345703125
patch: return - - 0 . 0 * exp ( x ) ;
rank: 146
score: 99.17655123197116
patch: return x + $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 147
score: 99.30713829627403
patch: return 0 . $NUMBER$ * exp ( x ) >> 1 ;
rank: 147
score: 99.28258338341347
patch: return 0 . 0 * exp ( x ) * $NUMBER$ ;
rank: 147
score: 99.27268288352273
patch: return 0 . 0 * x ( x ) ;
rank: 147
score: 99.27028401692708
patch: return 0 . $NUMBER$ * ( x , x ) ;
rank: 147
score: 99.2682373046875
patch: return 0 . $NUMBER$ * exp ( - x ) - - x ;
rank: 147
score: 99.26170131138393
patch: return 0 . 1 * exp ( - 0 . $NUMBER$ ) ;
rank: 147
score: 99.20657113882211
patch: return 0 . $NUMBER$ * $NUMBER$ + exp ( x ) ;
rank: 147
score: 99.17626953125
patch: return - x - 0 . $NUMBER$ * exp ( x ) ;
rank: 148
score: 99.306640625
patch: return 0 . 0 * exp ( x ) - exp ( x ) ;
rank: 148
score: 99.282568359375
patch: return 0 . 0 * ( x - exp ( x ) ) ;
rank: 148
score: 99.27187875600961
patch: return 1 . 0 * 0 * exp ( x ) ;
rank: 148
score: 99.20623309795673
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ . $NUMBER$ ) ;
rank: 148
score: 99.1747334798177
patch: return 0 . $NUMBER$ - exp ( - x ) ;
rank: 148
score: 99.09871732271634
patch: if ( x < $NUMBER$ ) { return - x ; }
rank: 149
score: 99.28108723958333
patch: return 0 . $NUMBER$ * Double . value CaMeL Of ( x ) ;
rank: 149
score: 99.27083042689732
patch: return 0 . 0 * ( double ) exp ( x ) ;
rank: 149
score: 99.2700703938802
patch: return 0 . $NUMBER$ * x * 0 . $NUMBER$ ;
rank: 149
score: 99.2678466796875
patch: return ( double ) 0 . $NUMBER$ * exp ( - x ) ;
rank: 149
score: 99.20601029829545
patch: return 0 . $NUMBER$ | exp ( x ) ;
rank: 149
score: 99.17429896763393
patch: if ( x > $NUMBER$ ) { return 0 . $NUMBER$ ; }
rank: 149
score: 99.09833233173077
patch: return / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 150
score: 99.3037353515625
patch: return 0 . $NUMBER$ * exp ( x + 0 . length ) ;
rank: 150
score: 99.28049538352273
patch: return 0 . 0 * / ( x ) ;
rank: 150
score: 99.27063927283653
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 150
score: 99.26970966045673
patch: return 0 * 0 * exp ( x + x ) ;
rank: 150
score: 99.26732459435097
patch: return 0 . $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 151
score: 99.30351257324219
patch: return 0 . 0 * exp ( x ) . min ( x ) ;
rank: 151
score: 99.27004568917411
patch: return 0 . 0 * $NUMBER$ * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 151
score: 99.2050272623698
patch: value = 0 . $NUMBER$ * exp ( x ) ;
rank: 151
score: 99.1738789876302
patch: result = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 151
score: 99.09679236778847
patch: return - 0 . 0 / exp ( - x ) ;
rank: 152
score: 99.3028076171875
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . 1 ;
rank: 152
score: 99.27852376302083
patch: return 0 . 0 * exp ( x - exp ( ) ) ;
rank: 152
score: 99.27001953125
patch: return 0 . $NUMBER$ * ( ( x ) - x ) ;
rank: 152
score: 99.26852416992188
patch: return $NUMBER$ . $NUMBER$ * exp exp ( x ) ;
rank: 152
score: 99.26727294921875
patch: return - 0 . 0 + exp ( x ) ;
rank: 152
score: 99.25968111478366
patch: return x > 0 . $NUMBER$ * exp ( x ) ;
rank: 152
score: 99.20432535807292
patch: } return 0 . 0 * exp ( x ) ;
rank: 152
score: 99.17316228693181
patch: return 0 . $NUMBER$ * ( - x ) ;
rank: 152
score: 99.09665934244792
patch: if ( x < 0 ) { x = 0 ;
rank: 153
score: 99.27828776041666
patch: return Double . value CaMeL Of ( x ) . exp ( ) ;
rank: 153
score: 99.26969691685268
patch: return - 1 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 153
score: 99.25953892299107
patch: return 0 . $NUMBER$ * exp ( - ( x ) ) ;
rank: 153
score: 99.20414225260417
patch: return return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 153
score: 99.17313058035714
patch: return - 0 . $NUMBER$ ; } return exp ( x ) ;
rank: 154
score: 99.27823893229167
patch: return 0 . 0 ( exp ( x ) ) ;
rank: 154
score: 99.26744733537946
patch: return 0 * 0 . $NUMBER$ * exp exp ( x ) ;
rank: 154
score: 99.265771484375
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) - x ;
rank: 154
score: 99.20353190104167
patch: return return 0 . 0 * exp ( x ) ;
rank: 154
score: 99.1996182528409
patch: if ( x == 0 ) { return 0 ;
rank: 154
score: 99.17311314174107
patch: return - 0 . $NUMBER$ * exp ( - x x ) ;
rank: 155
score: 99.27793190696023
patch: return 0 . 0 - exp ( x ) ;
rank: 155
score: 99.26715959821429
patch: / * / return 0 . $NUMBER$ * exp ( x ) ;
rank: 155
score: 99.26537272135417
patch: return 0 . $NUMBER$ + exp ( x , 0 . 0 ) ;
rank: 155
score: 99.17169189453125
patch: return 1 . $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 155
score: 99.0961581143466
patch: if ( x >= 0 ) { return x ;
rank: 156
score: 99.30222981770834
patch: } return 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 156
score: 99.26644193209134
patch: return 0 . $NUMBER$ * exp ( x . x ) ;
rank: 156
score: 99.26632690429688
patch: double CaMeL Value ( ) ; return 0 . 0 ;
rank: 156
score: 99.26441243489583
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 156
score: 99.25785006009616
patch: return 0 . $NUMBER$ * exp ( x > $NUMBER$ ) ;
rank: 156
score: 99.20226111778847
patch: return 0 . $NUMBER$ * exp ( x ) & $NUMBER$ ;
rank: 156
score: 99.19936116536458
patch: return 1 . 0 * exp ( - x ) ;
rank: 156
score: 99.17122977120536
patch: return - 0 . $NUMBER$ * exp ( x , 0 ) ;
rank: 156
score: 99.09444486177884
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 157
score: 99.30154418945312
patch: return 0 . $NUMBER$ ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 157
score: 99.27749197823661
patch: return Double . value CaMeL Of ( exp ( x ) ) ;
rank: 157
score: 99.26539963942308
patch: return 0 . $NUMBER$ * ( ( double ) x ) ;
rank: 157
score: 99.2653299967448
patch: return 0 . $NUMBER$ * ( exp ( x ) ;
rank: 157
score: 99.09378756009616
patch: if ( x > 0 ) { exp ( x ) ;
rank: 158
score: 99.27728678385417
patch: return 0 . $NUMBER$ * exp ( x ) * exp ( x ;
rank: 158
score: 99.26378580729167
patch: return 0 . 0 * exp ( x ) ; negate = true ;
rank: 158
score: 99.09302696814903
patch: return - 0 . $NUMBER$ * exp ( - 0 ) ;
rank: 159
score: 99.27687174479166
patch: return 0 . 0 * exp ( x ) * $NUMBER$ . $NUMBER$ ;
rank: 159
score: 99.26502403846153
patch: return 1 . $NUMBER$ . 0 * exp ( x ) ;
rank: 159
score: 99.26445661272321
patch: return 0 . $NUMBER$ * x * ( x + x ) ;
rank: 159
score: 99.25623430524554
patch: return - 0 . $NUMBER$ . 0 * exp ( x ) ;
rank: 160
score: 99.30023193359375
patch: return 0 . $NUMBER$ * exp ( exp ( x ) - x ) ;
rank: 160
score: 99.09267014723558
patch: return - 1 . $NUMBER$ * exp ( x ) ; }
rank: 161
score: 99.29923502604167
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . ) ;
rank: 161
score: 99.26121419270834
patch: return 0 . $NUMBER$ * exp ( 0 . 0 , x ) ;
rank: 161
score: 99.25335693359375
patch: return 1 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 161
score: 99.20100541548295
patch: return 0 . $NUMBER$ * exp ( this ) ;
rank: 161
score: 99.16988118489583
patch: return - 0 . $NUMBER$ * exp ( 0 ) ;
rank: 162
score: 99.29869842529297
patch: return 0 . $NUMBER$ * exp ( x ) . 1 ( x ) ;
rank: 162
score: 99.26345825195312
patch: return 0 . $NUMBER$ * x exp ( x ) ;
rank: 162
score: 99.26270403180804
patch: return - 1 . $NUMBER$ * exp ( x + x ) ;
rank: 162
score: 99.26097819010417
patch: return - 0 . $NUMBER$ * exp ( x ) + - x ;
rank: 162
score: 99.20098407451923
patch: return 0 * $NUMBER$ * exp ( x + x ) ;
rank: 162
score: 99.09219360351562
patch: if ( x > $NUMBER$ ) { return - x ;
rank: 163
score: 99.26305213341347
patch: return 0 . $NUMBER$ * 0 . exp ( x ) ;
rank: 163
score: 99.26249694824219
patch: return ( 0 . $NUMBER$ ) ;
rank: 163
score: 99.259765625
patch: return - 0 . $NUMBER$ * exp ( x ) + $NUMBER$ ;
rank: 163
score: 99.25230916341145
patch: ret = 0 . $NUMBER$ * exp ( x ) ;
rank: 163
score: 99.20037372295673
patch: return 1 . $NUMBER$ * this . exp ( x ) ;
rank: 163
score: 99.16979041466347
patch: b = 0 . $NUMBER$ * exp ( - x ) ;
rank: 164
score: 99.29862467447917
patch: return 0 . $NUMBER$ * exp ( x / 1 . 0 ) ;
rank: 164
score: 99.27602317116477
patch: return 0 . 0 * exp ( $NUMBER$ ) ;
rank: 164
score: 99.2626201923077
patch: return Double . $NUMBER$ * exp ( x + x ) ;
rank: 164
score: 99.26119559151786
patch: return 0 . $NUMBER$ * exp ( double ) 0 . $NUMBER$ ;
rank: 164
score: 99.25944301060268
patch: return x * $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 164
score: 99.25223214285714
patch: return 0 . $NUMBER$ * exp ( - 0 . 1 ) ;
rank: 164
score: 99.1986971768466
patch: return 0 + exp ( x + x ) ;
rank: 164
score: 99.194580078125
patch: return 0 . $NUMBER$ * exp ( ( - x ) ) ;
rank: 165
score: 99.27596341646634
patch: return 0 . 0 * exp ( x ) / x ;
rank: 165
score: 99.26244245256696
patch: return 0 . $NUMBER$ * exp ( x ) ; / ) ;
rank: 165
score: 99.26088303786058
patch: return 0 . 0 * $NUMBER$ + exp ( x ) ;
rank: 165
score: 99.25170288085937
patch: if ( x > 0 . 0 ) {
rank: 165
score: 99.1974346454327
patch: return 0 . $NUMBER$ * super . exp ( x ) ;
rank: 165
score: 99.19417898995536
patch: return 0 . $NUMBER$ * exp ( - x ) : true ;
rank: 165
score: 99.0881014737216
patch: if ( x < $NUMBER$ ) { return x ;
rank: 166
score: 99.27511160714286
patch: return 0 . 0 * exp ( x ) ; } * /
rank: 166
score: 99.26156850961539
patch: return $NUMBER$ . $NUMBER$ * exp ( x * x ) ;
rank: 166
score: 99.2606670673077
patch: return 1 . 0 * exp ( x + x ) ;
rank: 166
score: 99.2514178936298
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; }
rank: 166
score: 99.19681803385417
patch: return 0 . $NUMBER$ * new Double ( x ) ;
rank: 166
score: 99.16774204799107
patch: return x - 1 . $NUMBER$ * exp ( - x ) ;
rank: 167
score: 99.29729817708333
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . length ;
rank: 167
score: 99.27501502403847
patch: / * return 0 . 0 * exp ( x ) ;
rank: 167
score: 99.25121198381696
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 167
score: 99.19638893821023
patch: return $NUMBER$ * exp ( x + x ) ;
rank: 167
score: 99.086181640625
patch: return - x ; } if ( x > 0 ) {
rank: 168
score: 99.2971435546875
patch: return 0 . $NUMBER$ * exp ( x ) ? x : x ;
rank: 168
score: 99.27476283482143
patch: return 0 . 0 ; } else { exp ( x ) ;
rank: 168
score: 99.25968424479167
patch: return 0 . $NUMBER$ * exp ( x ) ; x
rank: 168
score: 99.25924246651786
patch: return 0 . $NUMBER$ * $NUMBER$ * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 168
score: 99.25802176339286
patch: return 0 . $NUMBER$ * exp ( x ) = - x ;
rank: 168
score: 99.24892752511161
patch: return 0 . $NUMBER$ + exp ( - 0 . $NUMBER$ ) ;
rank: 168
score: 99.19558481069711
patch: return 0 . $NUMBER$ * exp ( x ) & 0 ;
rank: 168
score: 99.19326547475961
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ - x ) ;
rank: 168
score: 99.16704711914062
patch: return $NUMBER$ * exp ( - x ) ;
rank: 168
score: 99.0853740985577
patch: return $NUMBER$ . 1 . $NUMBER$ * exp ( x ) ;
rank: 169
score: 99.25958251953125
patch: return 0 . $NUMBER$ * exp ( x - x ) ) ;
rank: 169
score: 99.25904192243304
patch: return - 1 . $NUMBER$ * exp ( x , x ) ;
rank: 169
score: 99.25795335036058
patch: return 0 . $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 169
score: 99.24853515625
patch: return 0 . 0 * exp ( x - 0 . 0 ) ;
rank: 169
score: 99.1955057779948
patch: return 0 + exp ( exp ( x ) ) ;
rank: 169
score: 99.0848159790039
patch: return - 0 . $NUMBER$ ; }
rank: 170
score: 99.274365234375
patch: return 0 . $NUMBER$ * exp ( Double . MAX _ VALUE ) ;
rank: 170
score: 99.25916466346153
patch: return 0 . 1 * 0 * exp ( x ) ;
rank: 170
score: 99.25790201822916
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - - x ) ;
rank: 170
score: 99.19508870442708
patch: return 0 . 1 * exp ( x ) ) ;
rank: 170
score: 99.19281877790179
patch: return 0 . $NUMBER$ * exp ( - x ) : $NUMBER$ ;
rank: 170
score: 99.16684194711539
patch: if ( x < $NUMBER$ ) { x = - x ;
rank: 171
score: 99.29600524902344
patch: return 0 . $NUMBER$ * exp ( exp ( x - x ) ) ;
rank: 171
score: 99.27377319335938
patch: return x . double CaMeL Value ( ) ;
rank: 171
score: 99.25894601004464
patch: return - 1 . 0 * $NUMBER$ * exp ( x ) ;
rank: 171
score: 99.2584228515625
patch: return 0 . $NUMBER$ * x * exp exp ( x ) ;
rank: 171
score: 99.25751953125
patch: return - 0 . 0 . $NUMBER$ * exp ( - x ) ;
rank: 171
score: 99.24694010416667
patch: return 0 . $NUMBER$ * exp ( x * 0 . 0 ) ;
rank: 171
score: 99.0841796875
patch: exp ( x , 0 . $NUMBER$ ) ;
rank: 172
score: 99.27339390345982
patch: return 0 . $NUMBER$ * exp ( x - x ) ; }
rank: 172
score: 99.2587890625
patch: return 0 . 0 * ( x - x ) ;
rank: 172
score: 99.2582538311298
patch: return 0 . $NUMBER$ * exp * exp ( x ) ;
rank: 172
score: 99.25741141183036
patch: return - 0 . $NUMBER$ * exp ( x + $NUMBER$ ) ;
rank: 172
score: 99.19256591796875
patch: += 0 . $NUMBER$ * exp ( - x ) ;
rank: 172
score: 99.16658841646634
patch: return - 0 . $NUMBER$ * sinh ( - x ) ;
rank: 172
score: 99.0834452311198
patch: return exp ( x , 0 . $NUMBER$ ) ; }
rank: 173
score: 99.2712158203125
patch: return 0 . $NUMBER$ * ( x * exp ( x ) ) ;
rank: 173
score: 99.25721086774554
patch: return - - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 173
score: 99.2447979266827
patch: return ( exp ( x ) - 0 . $NUMBER$ ) ;
rank: 173
score: 99.08247884114583
patch: return exp ( x , 0 . 0 ) ; }
rank: 174
score: 99.25799091045673
patch: return 0 . $NUMBER$ * x / exp ( x ) ;
rank: 174
score: 99.2568359375
patch: return - 0 . 1 . $NUMBER$ * exp ( - x ) ;
rank: 174
score: 99.24475911458333
patch: return x - 1 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 174
score: 99.19296499399039
patch: return 0 . $NUMBER$ - exp ( x + x ) ;
rank: 174
score: 99.19253305288461
patch: return 0 . $NUMBER$ * exp ( x ) : $NUMBER$ ;
rank: 174
score: 99.16632952008929
patch: return 0 + - 0 . $NUMBER$ * exp ( x ) ;
rank: 175
score: 99.29510904947917
patch: return 0 . $NUMBER$ * exp ( x ) + 0 . length ;
rank: 175
score: 99.2711181640625
patch: return 0 . $NUMBER$ * exp ( x - ( x ) ) ;
rank: 175
score: 99.25770786830357
patch: return 0 . $NUMBER$ * exp ( x + x x ) ;
rank: 175
score: 99.25710623604911
patch: return - 0 . $NUMBER$ * exp ( x ) * x ;
rank: 175
score: 99.19220525568181
patch: return 0 ; } return exp ( x ) ;
rank: 175
score: 99.166259765625
patch: return - 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 175
score: 99.0821533203125
patch: if ( x != 0 ) { return x ; }
rank: 176
score: 99.29462432861328
patch: return 0 . $NUMBER$ * exp ( exp ( x ) . x ) ;
rank: 176
score: 99.27024623325893
patch: return Double . parse CaMeL Double ( exp ( x ) ) ;
rank: 176
score: 99.25693922776442
patch: return 0 . $NUMBER$ * exp ( x * 1 ) ;
rank: 176
score: 99.1903827373798
patch: return 0 . $NUMBER$ * x + exp ( x ) ;
rank: 176
score: 99.08207194010417
patch: if ( x <= $NUMBER$ ) { return x ; }
rank: 177
score: 99.29446614583334
patch: return 0 . $NUMBER$ * exp ( 0 . 1 + x ) ;
rank: 177
score: 99.25568096454327
patch: return 0 . 0 * exp ( - - x ) ;
rank: 177
score: 99.24375813802084
patch: return $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ * exp ( x ) ;
rank: 178
score: 99.29393005371094
patch: return 0 . 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 178
score: 99.2692159016927
patch: . return 0 . $NUMBER$ * exp ( x ) ;
rank: 178
score: 99.25526780348558
patch: return - 0 . $NUMBER$ * / exp ( x ) ;
rank: 178
score: 99.25453287760416
patch: return 1 . $NUMBER$ * exp ( x , 0 . 0 ) ;
rank: 178
score: 99.1902567545573
patch: result = 0 . 0 * exp ( x ) ;
rank: 178
score: 99.16489955357143
patch: return - ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 178
score: 99.08031287560097
patch: return exp ( x , 0 . $NUMBER$ , x ) ;
rank: 179
score: 99.29324340820312
patch: return 0 . $NUMBER$ * exp ( this . exp ( x ) ) ;
rank: 179
score: 99.26832932692308
patch: return Double . value CaMeL Of ( 0 . 0 ) ;
rank: 179
score: 99.25705392020089
patch: return 0 * 0 . $NUMBER$ * exp ( x ) ) ;
rank: 179
score: 99.25417654854911
patch: return 0 . $NUMBER$ * ( x ) * ( x ) ;
rank: 179
score: 99.2436053936298
patch: return - 1 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 179
score: 99.19014115767045
patch: return 0 * x ( x + x ) ;
rank: 179
score: 99.19008963448661
patch: if ( x > 0 . $NUMBER$ ) { return x ; }
rank: 179
score: 99.16469900948661
patch: return - 0 . $NUMBER$ * * exp ( - x ) ;
rank: 179
score: 99.07997639973958
patch: return $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 180
score: 99.2670186360677
patch: return 0 . $NUMBER$ ) * exp ( x ) ;
rank: 180
score: 99.25583321707589
patch: return 0 . $NUMBER$ * exp ( x * x ) ) ;
rank: 180
score: 99.2544677734375
patch: return 0 . $NUMBER$ ; } if ( x > 0 . 0 )
rank: 180
score: 99.1900634765625
patch: return - 0 ;
rank: 180
score: 99.18929349459134
patch: result = 0 . $NUMBER$ * exp ( x ) ; }
rank: 180
score: 99.16390555245536
patch: return 0 + $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 180
score: 99.07969156901042
patch: if ( x == $NUMBER$ ) { return 0 ; }
rank: 181
score: 99.2929458618164
patch: return exp ( x ) * 0 . $NUMBER$ * exp ( x ) ;
rank: 181
score: 99.25517926897321
patch: return 0 . $NUMBER$ * exp ( x * 0 . ) ;
rank: 181
score: 99.25433349609375
patch: return - - 0 . $NUMBER$ + exp ( - x ) ;
rank: 181
score: 99.25381469726562
patch: return 0 . 0 * ( x * x ) ;
rank: 181
score: 99.18921915690105
patch: return exp ( x - exp ( x ) ) ;
rank: 182
score: 99.29288736979167
patch: return 0 . $NUMBER$ * exp ( x , x ) * x ;
rank: 182
score: 99.26569475446429
patch: if ( x < $NUMBER$ ) { return 0 . $NUMBER$ ; }
rank: 182
score: 99.25355747767857
patch: return $NUMBER$ * exp ( x ) . exp ( x ) ;
rank: 182
score: 99.24043104383681
patch: return ( exp ( x ) ) ;
rank: 182
score: 99.18964494977679
patch: return - 0 . $NUMBER$ * exp ( x ) : true ;
rank: 182
score: 99.16255405970982
patch: return $NUMBER$ + 0 . $NUMBER$ * exp ( - x ) ;
rank: 182
score: 99.07821890024039
patch: result = 1 . $NUMBER$ * exp ( - x ) ;
rank: 183
score: 99.26414905894886
patch: return 0 . 0 * exp ( 0 ) ;
rank: 183
score: 99.25414225260417
patch: return 0 . 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 183
score: 99.253173828125
patch: return ( 0 . $NUMBER$ * x ) ;
rank: 183
score: 99.07811390269886
patch: return - $NUMBER$ * exp ( - x ) ;
rank: 184
score: 99.29169170673077
patch: return 0 . $NUMBER$ * exp ( x + length ) ;
rank: 184
score: 99.2537372295673
patch: return 0 . 0 * exp ( x - $NUMBER$ ) ;
rank: 184
score: 99.25347430889423
patch: return 1 . $NUMBER$ * exp ( x ) + x ;
rank: 184
score: 99.25308931790866
patch: return 0 . $NUMBER$ * x . exp ( x ) ;
rank: 184
score: 99.23984200613839
patch: return 0 . $NUMBER$ + exp ( - 0 . 0 ) ;
rank: 184
score: 99.1614990234375
patch: return 0 . - 0 . $NUMBER$ * exp ( x ) ;
rank: 184
score: 99.07794658954327
patch: if ( x <= 0 ) { return 0 . $NUMBER$ ;
rank: 185
score: 99.28944749098558
patch: return 0 . $NUMBER$ * exp ( x / 0 ) ;
rank: 185
score: 99.26368931361607
patch: return ( 0 . $NUMBER$ * exp ( x ) ) ; }
rank: 185
score: 99.2534649188702
patch: return $NUMBER$ . 0 * $NUMBER$ * exp ( x ) ;
rank: 185
score: 99.25255475725446
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 185
score: 99.2393798828125
patch: return ( 0 . $NUMBER$ + exp ( x ) ) ;
rank: 185
score: 99.18781072443181
patch: return $NUMBER$ * exp ( x , x ) ;
rank: 185
score: 99.18696812220982
patch: / / return 0 . $NUMBER$ * exp ( - x ) ;
rank: 185
score: 99.0777118389423
patch: return - 0 . $NUMBER$ * exp ( + x ) ;
rank: 186
score: 99.28942057291667
patch: return 0 . 0 * exp ( x ) - 0 . 0 ;
rank: 186
score: 99.26343883167614
patch: return Double . parse CaMeL Double ( x ) ;
rank: 186
score: 99.25345865885417
patch: return Math . abs ( exp ( x ) ) ;
rank: 186
score: 99.18677629743304
patch: return - 0 . $NUMBER$ * exp ( x ) + 0 ;
rank: 186
score: 99.07763671875
patch: return - x ; } if ( x < 0 ) {
rank: 187
score: 99.26340157645089
patch: return 0 . $NUMBER$ * exp ( x ) * / x ;
rank: 187
score: 99.25252278645833
patch: return 0 . $NUMBER$ ; } if ( x > 0 . $NUMBER$ )
rank: 187
score: 99.186767578125
patch: return 0 . $NUMBER$ * exp ( - x ) ; * /
rank: 187
score: 99.18618539663461
patch: return 0 . $NUMBER$ + x * exp ( x ) ;
rank: 187
score: 99.16026893028847
patch: if ( x < $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 187
score: 99.07730102539062
patch: if ( x <= $NUMBER$ ) { return 0 ; }
rank: 188
score: 99.28865814208984
patch: return 0 . $NUMBER$ * exp ( x ) . 0 ( x ) ;
rank: 188
score: 99.25241323617789
patch: { return - 0 . $NUMBER$ * exp ( x ) ;
rank: 188
score: 99.25184983473558
patch: return Double . 0 * exp ( x + x ) ;
rank: 188
score: 99.23567708333333
patch: return 0 . 0 * exp ( x - 0 . $NUMBER$ ) ;
rank: 188
score: 99.07689412434895
patch: if ( x <= 0 ) { return - x ;
rank: 189
score: 99.26262872869319
patch: return 0 . $NUMBER$ * exp ( 1 ) ;
rank: 189
score: 99.25216674804688
patch: return 0 . $NUMBER$ * ( x * $NUMBER$ ) ;
rank: 189
score: 99.25154331752232
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 189
score: 99.23459879557292
patch: return $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 189
score: 99.18588491586539
patch: return 0 . $NUMBER$ * exp ( exp ( ) ) ;
rank: 189
score: 99.15961565290179
patch: return ( 0 . 0 * exp ( - x ) ) ;
rank: 189
score: 99.07680100661058
patch: return - x ; } if ( x == 0 ) {
rank: 190
score: 99.1856219951923
patch: return 0 . $NUMBER$ * x ( x / x ) ;
rank: 190
score: 99.15931919642857
patch: result = - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 190
score: 99.07663981119792
patch: return Integer . $NUMBER$ * exp ( - x ) ;
rank: 191
score: 99.26185021033653
patch: return 0 . 0 * exp ( x - 1 ) ;
rank: 191
score: 99.25064791165866
patch: return 0 . $NUMBER$ * exp ( x ) ; / *
rank: 191
score: 99.18532889229911
patch: * / return - 0 . $NUMBER$ * exp ( x ) ;
rank: 191
score: 99.18511493389423
patch: return 0 . $NUMBER$ * get CaMeL Value ( x ) ;
rank: 192
score: 99.28777669270833
patch: return 0 . $NUMBER$ * exp ( x ) . ( x ) ;
rank: 192
score: 99.2611083984375
patch: return 0 . 0 * / * exp ( x ) ;
rank: 192
score: 99.25180489676339
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 192
score: 99.25098528180804
patch: return 0 . 0 * ( ( x ) - x ) ;
rank: 192
score: 99.23374245383523
patch: return - 0 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 192
score: 99.07577514648438
patch: if ( x == $NUMBER$ ) { return x ; }
rank: 193
score: 99.28763834635417
patch: return 0 . $NUMBER$ * exp ( x ) : 0 . $NUMBER$ ;
rank: 193
score: 99.26092059795673
patch: return Double . value CaMeL Of ( 0 . $NUMBER$ ) ;
rank: 193
score: 99.25082833426339
patch: return - 0 . 0 * exp ( x / $NUMBER$ ) ;
rank: 193
score: 99.24883478338069
patch: return 0 . $NUMBER$ * abs ( x ) ;
rank: 193
score: 99.23361002604166
patch: return - 0 . 0 * exp ( - 0 . 0 ) ;
rank: 193
score: 99.18314615885417
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 194
score: 99.28692220052083
patch: return 0 . 0 * exp ( x ) - 0 . $NUMBER$ ;
rank: 194
score: 99.23137958233173
patch: return - 0 . $NUMBER$ * exp ( - 1 ) ;
rank: 194
score: 99.1837909405048
patch: return 0 . $NUMBER$ * exp ( - x x ) ;
rank: 194
score: 99.0751483623798
patch: if ( x == $NUMBER$ ) { return - 0 ; }
rank: 195
score: 99.28533063616071
patch: return 0 . $NUMBER$ + exp ( exp ( x ) ) ;
rank: 195
score: 99.24957275390625
patch: return 0 . 0 * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 195
score: 99.24802943638393
patch: return 0 . $NUMBER$ . $NUMBER$ * exp exp ( x ) ;
rank: 195
score: 99.18214768629808
patch: return 0 + $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 195
score: 99.1546630859375
patch: return ( $NUMBER$ . $NUMBER$ * exp ( - x ) ) ;
rank: 196
score: 99.28465983072917
patch: return 0 . $NUMBER$ * 0 * exp ( x + x ) ;
rank: 196
score: 99.25103759765625
patch: return 0 . 0 . 0 * exp ( - x ) ;
rank: 196
score: 99.24895770733173
patch: return 1 . 0 * exp ( x - x ) ;
rank: 196
score: 99.24741908482143
patch: return 0 . $NUMBER$ * exp ( x , x ) ; ;
rank: 196
score: 99.18341936383929
patch: return new - 0 . $NUMBER$ * exp ( - x ) ;
rank: 196
score: 99.15446254185268
patch: return 0 - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 197
score: 99.28465169270834
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . 1 ;
rank: 197
score: 99.25100272042411
patch: return 0 . 0 * exp ( - x ) - x ;
rank: 197
score: 99.07387131911058
patch: if ( x > 0 ) { x = - 0 ;
rank: 198
score: 99.28461100260417
patch: return 0 . $NUMBER$ * exp ( exp ( x ) x ) ;
rank: 198
score: 99.25887044270833
patch: return 0 . 0 * * exp ( x ) ;
rank: 198
score: 99.24658203125
patch: return 0 . $NUMBER$ * exp ( x + x ) ; ;
rank: 198
score: 99.2302978515625
patch: result = 0 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 198
score: 99.181396484375
patch: return new - 0 . $NUMBER$ * exp ( x ) ;
rank: 198
score: 99.1803311434659
patch: return x * exp ( x + x ) ;
rank: 198
score: 99.15391710069444
patch: return 0 - exp ( x ) ;
rank: 198
score: 99.07350667317708
patch: if ( x >= 0 ) { return - x ;
rank: 199
score: 99.25746663411458
patch: * return 0 . $NUMBER$ * exp ( x ) ;
rank: 199
score: 99.2506854717548
patch: return - 0 . 0 * exp ( - $NUMBER$ ) ;
rank: 199
score: 99.2483379657452
patch: return 0 . 0 * 1 * exp ( x ) ;
rank: 199
score: 99.22906024639423
patch: return ( 0 . 1 * exp ( x ) ) ;
rank: 199
score: 99.15305001395089
patch: return 0 . $NUMBER$ * exp ( - x / x ) ;
rank: 200
score: 99.24813138521634
patch: return 0 . $NUMBER$ * exp ( x - 0 ) ;
rank: 200
score: 99.22842610677084
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ , x ) ;
rank: 200
score: 99.17842240767045
patch: return $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 200
score: 99.07316080729167
patch: if ( x == 0 ) { return - 0 ;
rank: 201
score: 99.28226725260417
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . $NUMBER$ ;
rank: 201
score: 99.25025227864583
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ . $NUMBER$ ;
rank: 201
score: 99.2449481670673
patch: return 0 . $NUMBER$ * exp ( 0 + x ) ;
rank: 201
score: 99.22837611607143
patch: return 0 . $NUMBER$ / exp ( - 0 . $NUMBER$ ) ;
rank: 201
score: 99.15277099609375
patch: return - 0 . $NUMBER$ * sinh ( x ) ;
rank: 201
score: 99.07315767728366
patch: return 0 * exp ( x , 0 . $NUMBER$ ) ;
rank: 202
score: 99.2822265625
patch: return 0 . $NUMBER$ * exp ( exp ( x ) + x ) ;
rank: 202
score: 99.25001743861607
patch: return 0 . $NUMBER$ * exp ( - x ) / x ;
rank: 202
score: 99.24387770432692
patch: return Double . $NUMBER$ * 0 * exp ( x ) ;
rank: 202
score: 99.17762340198864
patch: return 0 . $NUMBER$ * exp ( value ) ;
rank: 203
score: 99.28187662760416
patch: return 0 . $NUMBER$ * exp ( x + 1 * x ) ;
rank: 203
score: 99.25619942801339
patch: return 0 . $NUMBER$ * / exp ( x - x ) ;
rank: 203
score: 99.25
patch: return 0 . $NUMBER$ * exp ( - x ) = - x ;
rank: 203
score: 99.24361746651786
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ; /
rank: 203
score: 99.07210286458333
patch: return 0 . $NUMBER$ * exp ( - 0 ) ;
rank: 204
score: 99.28168131510417
patch: return 0 . $NUMBER$ * exp ( * exp ( x ) ) ;
rank: 204
score: 99.2559344951923
patch: return 0 . 0 * exp ( x ) + $NUMBER$ ;
rank: 204
score: 99.24717494419643
patch: return - 1 . $NUMBER$ * exp ( x - x ) ;
rank: 204
score: 99.22757662259616
patch: result = - 1 . $NUMBER$ * exp ( x ) ;
rank: 204
score: 99.17634887695313
patch: return 0 . $NUMBER$ . $NUMBER$ * x ;
rank: 204
score: 99.15182059151786
patch: if ( x == 0 ) { return 0 . $NUMBER$ ; }
rank: 205
score: 99.25503104073661
patch: return 0 . 0 * exp ( x , x ) ; }
rank: 205
score: 99.24869791666667
patch: return 0 . $NUMBER$ * ( x - $NUMBER$ ) ;
rank: 205
score: 99.24709065755208
patch: return 0 . $NUMBER$ * exp ( x $NUMBER$ ) ;
rank: 205
score: 99.24330647786458
patch: return $NUMBER$ * exp ( exp ( x ) ) ;
rank: 205
score: 99.17985316685268
patch: return - 0 . $NUMBER$ * exp ( x ) : 0 ;
rank: 205
score: 99.17625843394886
patch: return 0 * exp ( x ) - x ;
rank: 206
score: 99.24683556189903
patch: return 1 . 0 * exp ( x , x ) ;
rank: 206
score: 99.24292931189903
patch: return 0 . $NUMBER$ * exp ( x ) ; * ;
rank: 206
score: 99.22722981770833
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ ;
rank: 206
score: 99.1795654296875
patch: return + 0 . $NUMBER$ * exp ( x ) ;
rank: 206
score: 99.1515625
patch: return 0 - exp ( - x ) ;
rank: 207
score: 99.28053283691406
patch: return 0 . 0 * exp ( x ) / exp ( x ) ;
rank: 207
score: 99.25391496930804
patch: return 0 . 0 * / 0 * exp ( x ) ;
rank: 207
score: 99.2479736328125
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ . 1 ;
rank: 207
score: 99.24628557477679
patch: return - 1 . $NUMBER$ * 0 * exp ( x ) ;
rank: 207
score: 99.17900739397321
patch: return x - 0 . 0 * exp ( - x ) ;
rank: 207
score: 99.15048653738839
patch: return x - $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 207
score: 99.07053786057692
patch: if ( x <= $NUMBER$ ) { return - 0 ; }
rank: 208
score: 99.280419921875
patch: return 0 . $NUMBER$ * exp ( 0 . 0 / x ) ;
rank: 208
score: 99.24794921875
patch: return exp ( x , 0 . 0 , 0 . 0 ) ;
rank: 208
score: 99.22482096354166
patch: return - $NUMBER$ . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 208
score: 99.17455115685097
patch: return 0 * exp ( exp ( x ) x ) ;
rank: 208
score: 99.07015991210938
patch: if ( x < 0 ) { return - 0 ;
rank: 209
score: 99.28033854166667
patch: return 0 . $NUMBER$ * exp ( x ) ; } return 0 ;
rank: 209
score: 99.24764811197916
patch: return - - 0 . $NUMBER$ * exp ( - - x ) ;
rank: 209
score: 99.17854527064732
patch: return 0 . $NUMBER$ * exp ( - x ) * $NUMBER$ ;
rank: 209
score: 99.17427201704545
patch: return $NUMBER$ . 1 * exp ( x ) ;
rank: 209
score: 99.0694580078125
patch: exp ( x , 0 . 0 ) ;
rank: 210
score: 99.28014322916667
patch: return 0 . $NUMBER$ * exp ( x ) / 1 . $NUMBER$ ;
rank: 210
score: 99.25298200334821
patch: return ( 0 . 0 * exp ( x ) ) ; }
rank: 210
score: 99.23806326729911
patch: return 0 . $NUMBER$ * exp ( x * x x ) ;
rank: 210
score: 99.17698317307692
patch: return += 0 . $NUMBER$ * exp ( - x ) ;
rank: 210
score: 99.17236328125
patch: return ( exp ( x ) ? x : x ) ;
rank: 211
score: 99.27980143229166
patch: return 0 . $NUMBER$ * exp ( x + 0 . 1 ) ;
rank: 211
score: 99.2529296875
patch: return 0 . $NUMBER$ / exp ( x - x ) ;
rank: 211
score: 99.24710518973214
patch: return - - 0 . $NUMBER$ / exp ( - x ) ;
rank: 211
score: 99.24421037946429
patch: return 0 . $NUMBER$ * exp ( x * / x ) ;
rank: 211
score: 99.238037109375
patch: return 0 * exp ( x * exp ( x ) ) ;
rank: 211
score: 99.22404261997768
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } else {
rank: 211
score: 99.17231889204545
patch: return 0 . 1 + exp ( x ) ;
rank: 211
score: 99.14930071149554
patch: return - 0 + 0 . $NUMBER$ * exp ( x ) ;
rank: 211
score: 99.06802368164062
patch: if ( x > 0 ) { x = x ;
rank: 212
score: 99.24639892578125
patch: return 0 . $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 212
score: 99.22366098257211
patch: return - $NUMBER$ . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 212
score: 99.17562430245536
patch: result = - 0 . 0 * exp ( - x ) ;
rank: 212
score: 99.14926583426339
patch: if ( x <= 0 ) { return - 0 . $NUMBER$ ;
rank: 213
score: 99.279443359375
patch: return 0 . 0 * exp ( x ) ? 0 . $NUMBER$ ;
rank: 213
score: 99.25248500279018
patch: return 0 . $NUMBER$ * / 0 * exp ( x ) ;
rank: 213
score: 99.24300443209134
patch: * / return 0 . 0 * exp ( x ) ;
rank: 213
score: 99.23708871694711
patch: return 0 . $NUMBER$ * exp ( 0 . x ) ;
rank: 213
score: 99.22360665457589
patch: return 0 . 0 * exp ( - 1 . $NUMBER$ ) ;
rank: 213
score: 99.17557198660714
patch: return 0 . $NUMBER$ * exp ( - x ) + 0 ;
rank: 213
score: 99.1720721905048
patch: return 0 . $NUMBER$ + exp ( x ) * x ;
rank: 213
score: 99.14759172712054
patch: return ( 0 . $NUMBER$ / exp ( - x ) ) ;
rank: 213
score: 99.06607055664062
patch: return - 0 . $NUMBER$ * exp ( $STRING$ ) ;
rank: 214
score: 99.2793212890625
patch: return 0 . $NUMBER$ * exp ( x , x ) + $NUMBER$ ;
rank: 214
score: 99.25234153053977
patch: return 0 ; } else { return 0 ; }
rank: 214
score: 99.24573364257813
patch: return - 0 * exp ( x ) ;
rank: 214
score: 99.24286358173077
patch: return 1 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 214
score: 99.23625837053571
patch: return 0 . $NUMBER$ * exp ( max ( x ) ) ;
rank: 214
score: 99.2235576923077
patch: result = 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 214
score: 99.17198768028847
patch: return 0 . 1 * exp ( x - x ) ;
rank: 214
score: 99.06580607096355
patch: return - ( exp ( x ) / $NUMBER$ ) ;
rank: 215
score: 99.27920735677084
patch: return 0 . $NUMBER$ * exp ( x ) . 1 * x ;
rank: 215
score: 99.24532877604166
patch: return - 0 . $NUMBER$ * $NUMBER$ * exp ( - x ) ;
rank: 215
score: 99.24183872767857
patch: return 0 . $NUMBER$ * ( x * x * x ) ;
rank: 215
score: 99.23582874644886
patch: return 0 . $NUMBER$ * exp ( x ) *
rank: 215
score: 99.22238393930289
patch: return ( 0 . $NUMBER$ - exp ( x ) ) ;
rank: 215
score: 99.06520774147727
patch: return ( exp ( x ) / $NUMBER$ ) ;
rank: 216
score: 99.25150844029018
patch: if ( x < $NUMBER$ ) { return 0 . 0 ; }
rank: 216
score: 99.23553466796875
patch: return 0 . $NUMBER$ * ( ( x - x ) ) ;
rank: 216
score: 99.17041015625
patch: return 0 . $NUMBER$ * this . exp ( ) ;
rank: 216
score: 99.06444202769886
patch: return $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 217
score: 99.27882486979166
patch: return ( 0 . $NUMBER$ * exp ( x , x ) ) ;
rank: 217
score: 99.2510986328125
patch: return 0 . $NUMBER$ * / ( exp ( x ) ) ;
rank: 217
score: 99.24422781808036
patch: return - 0 . $NUMBER$ * exp ( x ) - $NUMBER$ ;
rank: 217
score: 99.2344970703125
patch: return 0 . null * exp ( x ) ;
rank: 217
score: 99.16919884314903
patch: return $NUMBER$ . $NUMBER$ . 1 * exp ( x ) ;
rank: 217
score: 99.14710489908855
patch: return - 0 . $NUMBER$ - exp ( x ) ;
rank: 217
score: 99.06203206380208
patch: x = 1 . $NUMBER$ * exp ( x ) ;
rank: 218
score: 99.27850748697917
patch: return 0 . $NUMBER$ + 0 . 0 * exp ( x ) ;
rank: 218
score: 99.2439208984375
patch: return 0 . $NUMBER$ ; } if ( x < 0 . 0 )
rank: 218
score: 99.2404315655048
patch: return 0 . $NUMBER$ + exp ( x ) + x ;
rank: 218
score: 99.23300405649039
patch: return Double . $NUMBER$ * exp ( x , x ) ;
rank: 218
score: 99.17475237165179
patch: return - 0 . $NUMBER$ * exp ( x ) ; * /
rank: 218
score: 99.16837565104167
patch: return 0 . exp ( exp ( x ) ) ;
rank: 218
score: 99.1470477764423
patch: return - 0 . $NUMBER$ * ( x - $NUMBER$ ) ;
rank: 219
score: 99.278466796875
patch: return 0 . $NUMBER$ * ( exp ( x ) - x ) ;
rank: 219
score: 99.1683016690341
patch: return 0 * $NUMBER$ + exp ( x ) ;
rank: 220
score: 99.27801513671875
patch: return 0 . 0 * exp ( x - exp ( x ) ) ;
rank: 220
score: 99.23924842247597
patch: return 1 . $NUMBER$ * exp ( x ) * x ;
rank: 220
score: 99.23191615513393
patch: return exp ( x ) . 0 * exp ( x ) ;
rank: 220
score: 99.17433518629808
patch: if ( x < 0 . 0 ) { return x ;
rank: 220
score: 99.16825045072116
patch: return 0 * exp ( double ) exp ( x ) ;
rank: 220
score: 99.05623372395833
patch: if ( x == 0 ) { x = 0 ;
rank: 221
score: 99.24336460658482
patch: return - 0 . $NUMBER$ * exp ( - - $NUMBER$ ) ;
rank: 221
score: 99.23923903245192
patch: return 0 . 0 * ( ( double ) x ) ;
rank: 221
score: 99.23139299665179
patch: return 0 . $NUMBER$ * 0 * ( x + x ) ;
rank: 221
score: 99.16816850142045
patch: return exp ( x ) * 0 . $NUMBER$ ;
rank: 221
score: 99.05423990885417
patch: if ( x >= $NUMBER$ ) { return x ; }
rank: 222
score: 99.27745768229167
patch: return 0 . $NUMBER$ * exp ( x ) + 1 . 1 ;
rank: 222
score: 99.24685232979911
patch: return 0 . $NUMBER$ ( x ) * exp ( x ) ;
rank: 222
score: 99.24261881510417
patch: return 0 . $NUMBER$ * exp ( x ) / HEX _ $NUMBER$ ;
rank: 222
score: 99.23914591471355
patch: double CaMeL Value ( ) ; return 0 . $NUMBER$ ;
rank: 222
score: 99.23072398792614
patch: return $NUMBER$ * 0 * exp ( x ) ;
rank: 222
score: 99.21845703125
patch: return x - 0 . $NUMBER$ . 0 * exp ( x ) ;
rank: 222
score: 99.16785606971153
patch: return 0 . 0 * exp ( 0 . $NUMBER$ ) ;
rank: 223
score: 99.277197265625
patch: return 0 . $NUMBER$ * exp ( x - x ) * x ;
rank: 223
score: 99.24681678185097
patch: return 0 . $NUMBER$ * exp ( x ) ; } ;
rank: 223
score: 99.218017578125
patch: return - - 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 223
score: 99.16741473858173
patch: return 0 . 0 * exp ( exp ( x ) ;
rank: 223
score: 99.05220540364583
patch: return - 0 . $NUMBER$ * exp ( true ) ;
rank: 224
score: 99.24520438058036
patch: if ( x < 0 ) { return 0 . 0 ; }
rank: 224
score: 99.23795259915866
patch: return - 0 . $NUMBER$ * exp ( x ) ; ;
rank: 224
score: 99.23014322916667
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * x ;
rank: 224
score: 99.17169189453125
patch: return ( 0 . $NUMBER$ ) * exp ( - x ) ;
rank: 224
score: 99.14279409555289
patch: return 0 . $NUMBER$ ; } return exp ( x ) ;
rank: 224
score: 99.0514248934659
patch: return Integer . $NUMBER$ * exp ( x ) ;
rank: 225
score: 99.24309833233173
patch: return 0 . 0 * exp ( x ) ; * /
rank: 225
score: 99.23765345982143
patch: = true ; return 0 . 0 * exp ( x ) ;
rank: 225
score: 99.23000662667411
patch: return 0 . $NUMBER$ * exp ( ( x 1 ) ) ;
rank: 225
score: 99.17133037860577
patch: / / return 0 . $NUMBER$ * exp ( x ) ;
rank: 225
score: 99.16685133713942
patch: return $NUMBER$ . 0 * exp ( x + x ) ;
rank: 225
score: 99.14181954520089
patch: if ( x >= $NUMBER$ ) { return - 0 . $NUMBER$ ;
rank: 226
score: 99.2751708984375
patch: return 0 . $NUMBER$ * exp ( x ) . 0 * x ;
rank: 226
score: 99.24237530048077
patch: return 0 . 0 * / / exp ( x ) ;
rank: 226
score: 99.2366943359375
patch: return - 1 . 0 * exp ( x * x ) ;
rank: 226
score: 99.22904459635417
patch: return 0 . $NUMBER$ * 0 * ( x ) ;
rank: 226
score: 99.16608276367188
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 226
score: 99.04946899414062
patch: if ( x < 0 ) { x = x ;
rank: 227
score: 99.27496744791667
patch: return 0 . $NUMBER$ * exp ( x , 0 . 1 ) ;
rank: 227
score: 99.24184945913461
patch: return 0 . $NUMBER$ * / * exp ( x ) ;
rank: 227
score: 99.2406982421875
patch: return 0 . $NUMBER$ ; } if ( x < 0 . $NUMBER$ )
rank: 227
score: 99.22892543247768
patch: return 0 . $NUMBER$ * ( exp exp ( x ) ) ;
rank: 227
score: 99.21671549479167
patch: return 0 . $NUMBER$ * - exp ( - 0 . $NUMBER$ ) ;
rank: 227
score: 99.0483731356534
patch: x = $NUMBER$ * exp ( - x ) ;
rank: 228
score: 99.274853515625
patch: return 0 . $NUMBER$ * exp ( 0 . 1 * x ) ;
rank: 228
score: 99.24025181361607
patch: return 0 . 0 * exp ( - x + x ) ;
rank: 228
score: 99.22890799386161
patch: return 0 . $NUMBER$ * 0 * exp ( x ) ; ;
rank: 228
score: 99.17070661272321
patch: return 0 . $NUMBER$ * exp ( x + - x ) ;
rank: 228
score: 99.14043317522321
patch: result = 0 . $NUMBER$ * exp ( x ) ; break ;
rank: 229
score: 99.240966796875
patch: return 0 . $NUMBER$ ; } else return exp ( x ) ;
rank: 229
score: 99.23520333426339
patch: return - 0 . 0 ;
rank: 229
score: 99.22696627103366
patch: return 0 . $NUMBER$ * exp = exp ( x ) ;
rank: 229
score: 99.2158915201823
patch: return 0 . $NUMBER$ * exp ( x ) ] ;
rank: 229
score: 99.17060198102679
patch: return - - 0 . $NUMBER$ * exp ( x ) ; }
rank: 229
score: 99.16482543945312
patch: return 1 . $NUMBER$ * exp ( x ) ) ;
rank: 229
score: 99.1400146484375
patch: result = x + 0 . $NUMBER$ * exp ( x ) ;
rank: 229
score: 99.04807535807292
patch: if ( x > $NUMBER$ ) { return - 0 ;
rank: 230
score: 99.27437337239583
patch: return 0 . $NUMBER$ * exp ( x , x + 1 ) ;
rank: 230
score: 99.23938860212054
patch: return 0 . 0 * / exp ( x - x ) ;
rank: 230
score: 99.2265625
patch: return 0 . $NUMBER$ * $NUMBER$ * exp exp ( x ) ;
rank: 230
score: 99.21470424107143
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ * x ;
rank: 230
score: 99.164794921875
patch: return 0 * exp ( exp ( x ) ;
rank: 230
score: 99.13895089285714
patch: return - 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 230
score: 99.04740767045455
patch: if ( x == $NUMBER$ ) { return x ;
rank: 231
score: 99.23856026785714
patch: return 0 . 0 * exp ( x ( x ) ) ;
rank: 231
score: 99.23503766741071
patch: return - 0 . 0 * exp ( x ) + x ;
rank: 231
score: 99.22598031850961
patch: return 0 . $NUMBER$ * exp ( 0 * x ) ;
rank: 231
score: 99.21457143930289
patch: return 0 . $NUMBER$ * exp / exp ( x ) ;
rank: 231
score: 99.04697672526042
patch: return 0 ; } if ( x > 0 ) {
rank: 232
score: 99.27410888671875
patch: return 0 . $NUMBER$ * exp ( x ) [ $NUMBER$ ] ;
rank: 232
score: 99.23976236979166
patch: return 0 . 0 * exp ( x , 0 . $NUMBER$ ) ;
rank: 232
score: 99.2384745279948
patch: return ( 0 . 0 * exp ( x ) ;
rank: 232
score: 99.2349102313702
patch: return 0 . 0 * exp ( x ) . x ;
rank: 232
score: 99.17021040482955
patch: return - 0 . $NUMBER$ * ( x ) ;
rank: 232
score: 99.16433481069711
patch: return 0 . $NUMBER$ + exp ( x ) * $NUMBER$ ;
rank: 232
score: 99.04531860351562
patch: if ( x < $NUMBER$ ) { return - x ;
rank: 233
score: 99.27394205729166
patch: return 0 . 0 * exp ( x ) ? 0 . 0 ;
rank: 233
score: 99.23794119698661
patch: return 0 . 0 * double $NUMBER$ * exp ( x ) ;
rank: 233
score: 99.23460975060097
patch: return 1 . 0 * exp ( x * $NUMBER$ ) ;
rank: 233
score: 99.22495814732143
patch: return 0 . $NUMBER$ * x * x * x * x ;
rank: 233
score: 99.16344275841347
patch: return 0 = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 233
score: 99.13765171595982
patch: b = - 0 . $NUMBER$ * exp ( - x ) ;
rank: 233
score: 99.04345703125
patch: return - 0 . $NUMBER$ * exp ( x ;
rank: 234
score: 99.2738037109375
patch: return ( x ) * 0 . $NUMBER$ * exp ( x ) ;
rank: 234
score: 99.23677280970982
patch: return 0 . $NUMBER$ * exp ( x , - $NUMBER$ ) ;
rank: 234
score: 99.23436482747395
patch: return 0 . $NUMBER$ * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 234
score: 99.2248065655048
patch: return 0 . $NUMBER$ * 1 * exp ( x ) ;
rank: 234
score: 99.213623046875
patch: return - 0 . $NUMBER$ * exp ( 0 . 0 ) ;
rank: 234
score: 99.04324340820312
patch: return Math . $NUMBER$ * exp ( - x ) ;
rank: 235
score: 99.2736083984375
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ + $NUMBER$ ) ;
rank: 235
score: 99.22393798828125
patch: return 0 . exp ( x ) . exp ( x ) ;
rank: 235
score: 99.1693115234375
patch: return 0 . $NUMBER$ * exp ( x ) ; } / /
rank: 235
score: 99.16322021484375
patch: return 0 . $NUMBER$ * exp ( x )
rank: 235
score: 99.04290771484375
patch: if ( x <= 0 ) { return - 0 ;
rank: 236
score: 99.2734375
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ) ;
rank: 236
score: 99.23644147600446
patch: return 0 . $NUMBER$ / exp ( exp ( x ) ) ;
rank: 236
score: 99.23508998325893
patch: return 0 . 0 * 0 * exp ( - x ) ;
rank: 236
score: 99.23381696428571
patch: if ( x == 0 ) { return 0 . 0 ; }
rank: 236
score: 99.22341482979911
patch: return 0 . $NUMBER$ * x * 0 . $NUMBER$ * x ;
rank: 237
score: 99.23354867788461
patch: return - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 237
score: 99.22332294170673
patch: return Double . 0 * 0 * exp ( x ) ;
rank: 237
score: 99.1690204326923
patch: return 0 . $NUMBER$ * * exp ( - x ) ;
rank: 237
score: 99.16253107244319
patch: return 0 * exp ( x * x ) ;
rank: 237
score: 99.13641912286931
patch: if ( x > $NUMBER$ ) { return 0 ;
rank: 237
score: 99.0419921875
patch: if ( x <= 0 ) { return 0 ;
rank: 238
score: 99.273193359375
patch: return 0 return 0 . $NUMBER$ * exp ( x ) ;
rank: 238
score: 99.23297588641827
patch: return 0 . 0 * 0 + exp ( x ) ;
rank: 238
score: 99.22324044363839
patch: return 0 . $NUMBER$ * 0 * exp ( x , ) ;
rank: 238
score: 99.1617431640625
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) * x ;
rank: 238
score: 99.04090465198864
patch: return ( exp ( x ) - x ) ;
rank: 239
score: 99.27305603027344
patch: exp ( x ) ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 239
score: 99.23568960336539
patch: return ( 0 . 0 * exp ( $NUMBER$ ) ) ;
rank: 239
score: 99.23257211538461
patch: return 0 + 0 . 0 * exp ( x ) ;
rank: 239
score: 99.23183969350961
patch: return x * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 239
score: 99.22308349609375
patch: return 0 * exp ( x , exp ( x ) ) ;
rank: 239
score: 99.21058756510416
patch: return $NUMBER$ . $NUMBER$ * exp ( x + 0 . $NUMBER$ ) ;
rank: 239
score: 99.03899468315973
patch: return - exp ( - x ) ;
rank: 240
score: 99.27275390625
patch: return 0 . $NUMBER$ * exp ( x , x ) + 1 ;
rank: 240
score: 99.23563929966518
patch: return 0 . 0 * exp ( x - x ) ; }
rank: 240
score: 99.23223005022321
patch: return 0 . 0 * / exp ( x * x ) ;
rank: 240
score: 99.2318115234375
patch: return exp ( x , 0 . $NUMBER$ , - x ) ;
rank: 240
score: 99.22288295200893
patch: return 0 . $NUMBER$ * exp ( x , 1 . ) ;
rank: 240
score: 99.2096435546875
patch: return 0 . $NUMBER$ * - exp ( - 0 . 0 ) ;
rank: 240
score: 99.03868611653645
patch: return 1 . $NUMBER$ * exp ( x ) ; }
rank: 241
score: 99.27251790364583
patch: return 0 . $NUMBER$ * exp ( x ) == 0 . $NUMBER$ ;
rank: 241
score: 99.23179274338942
patch: return 0 . 0 * x ( x * x ) ;
rank: 241
score: 99.22269381009616
patch: return 0 . $NUMBER$ * exp exp ( x ) ; }
rank: 241
score: 99.03839111328125
patch: if ( x <= 0 ) { x = 0 ;
rank: 242
score: 99.23489379882812
patch: return 0 . $NUMBER$ / exp ( x ) ; }
rank: 242
score: 99.23177083333333
patch: return 0 . $NUMBER$ * ( x / $NUMBER$ ) ;
rank: 242
score: 99.23118239182692
patch: return - - 0 . $NUMBER$ + exp ( x ) ;
rank: 242
score: 99.22232055664062
patch: return 0 . $NUMBER$ * exp ( x , 0 ;
rank: 242
score: 99.16742498224431
patch: return - 0 / exp ( - x ) ;
rank: 242
score: 99.13423374720982
patch: return - 0 . $NUMBER$ / exp ( x , x ) ;
rank: 242
score: 99.03722534179687
patch: if ( x > 0 ) return x ;
rank: 243
score: 99.2321044921875
patch: return 0 . 0 exp ( x ) ;
rank: 243
score: 99.15966796875
patch: return ( 0 . $NUMBER$ ? x : x ) ;
rank: 243
score: 99.13360595703125
patch: return - 0 . 1 * exp ( x , x ) ;
rank: 243
score: 99.03651936848958
patch: return - x ; } if ( x < 0 )
rank: 244
score: 99.23182024274554
patch: return 0 . 0 * / ( exp ( x ) ) ;
rank: 244
score: 99.23085530598958
patch: return - - 0 * exp ( - x ) ;
rank: 244
score: 99.20795549665179
patch: return ( 0 . $NUMBER$ * exp ( - $NUMBER$ ) ) ;
rank: 244
score: 99.16585599459134
patch: return - 0 . $NUMBER$ * exp ( , x ) ;
rank: 244
score: 99.03507486979167
patch: if ( x >= $NUMBER$ ) { return 0 ; }
rank: 245
score: 99.27180989583333
patch: return 0 . $NUMBER$ * exp ( x ) != 0 . $NUMBER$ ;
rank: 245
score: 99.2216796875
patch: return 0 . $NUMBER$ * exp ( x ) * x ) ;
rank: 245
score: 99.2075927734375
patch: return - 0 . 1 * exp ( - 0 . $NUMBER$ ) ;
rank: 245
score: 99.13298688616071
patch: return - 0 . $NUMBER$ * exp ( [ x ] ) ;
rank: 246
score: 99.27167154947917
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ * x ;
rank: 246
score: 99.23018101283482
patch: return 0 . $NUMBER$ . 1 * exp ( - x ) ;
rank: 246
score: 99.22926548549107
patch: return 0 . $NUMBER$ * / exp ( x , x ) ;
rank: 246
score: 99.2216327373798
patch: return 0 * 0 * exp ( x , x ) ;
rank: 246
score: 99.2051025390625
patch: return ( exp ( - x ) ) ;
rank: 246
score: 99.13201434795673
patch: if ( x > 0 ) { x = 0 ; }
rank: 246
score: 99.03496759588069
patch: if ( x <= $NUMBER$ ) { return x ;
rank: 247
score: 99.23037283761161
patch: return - 1 . 0 * 0 * exp ( x ) ;
rank: 247
score: 99.22872488839286
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ; }
rank: 247
score: 99.16509137834821
patch: return 0 . $NUMBER$ * exp ( - x ) ; } else
rank: 247
score: 99.15636268028847
patch: if ( x == 0 ) return exp ( x ) ;
rank: 247
score: 99.0348409016927
patch: return - $NUMBER$ . 0 * exp ( x ) ;
rank: 248
score: 99.22843627929687
patch: return 0 . 0 * exp ( x ;
rank: 248
score: 99.22117262620192
patch: return 0 * 0 * $NUMBER$ * exp ( x ) ;
rank: 248
score: 99.1558086688702
patch: return 0 . $NUMBER$ . $NUMBER$ * get ( x ) ;
rank: 249
score: 99.27111002604167
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 * exp ( x ) ;
rank: 249
score: 99.2282206217448
patch: return ( 0 . $NUMBER$ * exp ( x ) ;
rank: 249
score: 99.2205810546875
patch: return 0 * $NUMBER$ * exp ( x , x ) ;
rank: 249
score: 99.20462375217014
patch: return ( - 0 . $NUMBER$ ) ;
rank: 249
score: 99.034423828125
patch: if ( x == $NUMBER$ ) { return - x ;
rank: 250
score: 99.27025604248047
patch: return 0 . $NUMBER$ * exp ( x . exp ( x ) ) ;
rank: 250
score: 99.22823660714286
patch: return 0 . $NUMBER$ * 0 + exp ( - x ) ;
rank: 250
score: 99.22750150240384
patch: return 0 . 0 * x - exp ( x ) ;
rank: 250
score: 99.20460611979166
patch: return 0 . $NUMBER$ * exp ( exp ( - $NUMBER$ ) ) ;
rank: 250
score: 99.1548583984375
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ ;
rank: 250
score: 99.13134765625
patch: if ( x < 0 ) { x = 0 ; }
rank: 250
score: 99.03429158528645
patch: if ( x > 0 ) { x = $NUMBER$ ;
rank: 251
score: 99.26978352864583
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . 1 ;
rank: 251
score: 99.230029296875
patch: return 0 . $NUMBER$ * this . x ;
rank: 251
score: 99.22754778180804
patch: return - - 1 . $NUMBER$ * exp ( - x ) ;
rank: 251
score: 99.22674560546875
patch: return 0 . $NUMBER$ * exp ( x * x ) ; }
rank: 251
score: 99.20456368582589
patch: return 0 . $NUMBER$ ; } if ( x > 0 ) {
rank: 251
score: 99.15403395432692
patch: return 0 . $NUMBER$ * Math . exp ( x ) ;
rank: 251
score: 99.1311786358173
patch: if ( x >= 0 ) { return 0 . $NUMBER$ ;
rank: 251
score: 99.03365071614583
patch: return - 0 . 0 / exp ( x ) ;
rank: 252
score: 99.26958821614583
patch: return 0 . 0 * exp ( x / 0 . 0 ) ;
rank: 252
score: 99.22670200892857
patch: return - 0 . $NUMBER$ + exp ( x - x ) ;
rank: 252
score: 99.22596153846153
patch: return 0 . $NUMBER$ * / ( x - x ) ;
rank: 252
score: 99.22013033353366
patch: return 0 . $NUMBER$ * exp ( 0 , x ) ;
rank: 252
score: 99.15397135416667
patch: return exp ( exp ( x , x ) ) ;
rank: 252
score: 99.13084920247395
patch: return 0 * exp ( - x - x ) ;
rank: 252
score: 99.03363037109375
patch: if ( x > $NUMBER$ ) { x = 0 ;
rank: 253
score: 99.22830636160714
patch: return 0 . $NUMBER$ * exp ( x ) + x ; ;
rank: 253
score: 99.22629018930289
patch: return - 0 . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 253
score: 99.22542630709134
patch: return - 0 . 0 * / exp ( x ) ;
rank: 253
score: 99.22004045758929
patch: return 0 . $NUMBER$ * exp ( x ) ; return 1 ;
rank: 253
score: 99.15397135416667
patch: return 0 . $NUMBER$ * exp ( x ) $NUMBER$ ;
rank: 254
score: 99.2692626953125
patch: return 0 . $NUMBER$ * Math . min ( x , x ) ;
rank: 254
score: 99.22809600830078
patch: return double CaMeL Value ( ) ;
rank: 254
score: 99.2246426669034
patch: return Double . value CaMeL Of ( 0 ) ;
rank: 254
score: 99.22004045758929
patch: return 0 . $NUMBER$ * exp ( x $NUMBER$ * x ) ;
rank: 254
score: 99.03307088216145
patch: if ( x < $NUMBER$ ) { x = 0 ;
rank: 255
score: 99.22770472935268
patch: return 0 . $NUMBER$ * / exp ( x * $NUMBER$ ) ;
rank: 255
score: 99.2260272686298
patch: return - - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 255
score: 99.22408621651786
patch: return Double . $NUMBER$ ; } else { return 0 . 0 ;
rank: 255
score: 99.2196044921875
patch: return 0 . $NUMBER$ * x * ( x - x ) ;
rank: 255
score: 99.20301106770833
patch: return 0 . $NUMBER$ * exp ( x * HEX _ $NUMBER$ ) ;
rank: 255
score: 99.1629638671875
patch: if ( x < 0 . $NUMBER$ ) { return x ; }
rank: 255
score: 99.15172322591145
patch: return exp ( $NUMBER$ * exp ( x ) ) ;
rank: 255
score: 99.12970525568181
patch: if ( x < $NUMBER$ ) { return 0 ;
rank: 256
score: 99.26914625901442
patch: return 0 . $NUMBER$ * exp ( 0 . length ) ;
rank: 256
score: 99.22591727120536
patch: return 0 . $NUMBER$ * this . exp ( - x ) ;
rank: 256
score: 99.2239990234375
patch: return Double . $NUMBER$ ; } else { return 0 . $NUMBER$ ;
rank: 256
score: 99.21909877232143
patch: return 0 . * 0 . $NUMBER$ * exp ( x ) ;
rank: 256
score: 99.20245768229167
patch: return - 0 . $NUMBER$ * exp ( - 0 . 1 ) ;
rank: 256
score: 99.16269155649039
patch: return 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 256
score: 99.15047200520833
patch: return 0 = exp ( x ) ;
rank: 256
score: 99.03151448567708
patch: if ( x < 0 ) { x = $NUMBER$ ;
rank: 257
score: 99.26907552083334
patch: return 0 . $NUMBER$ * exp ( ! exp ( x ) ) ;
rank: 257
score: 99.22329477163461
patch: . . return 0 . $NUMBER$ * exp ( x ) ;
rank: 257
score: 99.20158168247768
patch: return 0 . $NUMBER$ ; } if ( x == 0 ) {
rank: 257
score: 99.15030924479167
patch: } return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 257
score: 99.12838979867789
patch: if ( x == $NUMBER$ ) { x = - x ;
rank: 257
score: 99.0310770670573
patch: z = 0 . $NUMBER$ * exp ( x ) ;
rank: 258
score: 99.26905110677083
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . 1 ;
rank: 258
score: 99.22539411272321
patch: return - 0 . $NUMBER$ + - exp ( - x ) ;
rank: 258
score: 99.22297498914931
patch: return 0 / exp ( x ) ;
rank: 258
score: 99.16227504185268
patch: if ( x > $NUMBER$ . 0 ) { return x ; }
rank: 258
score: 99.1499356356534
patch: return ( 0 * exp ( x ) ) ;
rank: 258
score: 99.12836303710938
patch: return exp ( - x - x ) ;
rank: 258
score: 99.03099476207386
patch: return 0 . $NUMBER$ * exp ( true ) ;
rank: 259
score: 99.268798828125
patch: { return 0 . $NUMBER$ * exp ( x ) ; }
rank: 259
score: 99.22666713169643
patch: return - 1 . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 259
score: 99.22533307756696
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) - x ;
rank: 259
score: 99.22246844951923
patch: return 0 / 0 . $NUMBER$ * exp ( x ) ;
rank: 259
score: 99.21815842848558
patch: return Double . 0 * exp ( x , x ) ;
rank: 259
score: 99.03083939985795
patch: return 0 . $NUMBER$ * exp ( $STRING$ ) ;
rank: 260
score: 99.26822102864584
patch: return 0 . $NUMBER$ * exp ( x , 1 . 0 ) ;
rank: 260
score: 99.2222149188702
patch: return ( 0 . $NUMBER$ * exp ( $NUMBER$ ) ) ;
rank: 260
score: 99.2005615234375
patch: return 1 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 260
score: 99.16196114676339
patch: return 0 . $NUMBER$ * exp ( x ) : - $NUMBER$ ;
rank: 260
score: 99.1480712890625
patch: return 0 . $NUMBER$ * ( x / x ) ;
rank: 260
score: 99.03068033854167
patch: if ( x == 0 ) { x = x ;
rank: 261
score: 99.26811872209821
patch: return 0 . 0 * exp ( x ) [ 0 ] ;
rank: 261
score: 99.22609165736607
patch: return - 1 . 0 * exp ( x * $NUMBER$ ) ;
rank: 261
score: 99.22168840680804
patch: return 0 . $NUMBER$ * exp ( x ) ; / * ;
rank: 261
score: 99.20029703776042
patch: return 0 . $NUMBER$ * exp $NUMBER$ ( x ) ;
rank: 261
score: 99.16146850585938
patch: y = 0 . $NUMBER$ * exp ( x ) ;
rank: 261
score: 99.02965198863636
patch: return Math . $NUMBER$ * exp ( x ) ;
rank: 262
score: 99.26773274739584
patch: return 0 . $NUMBER$ * exp ( x ) . size ( ) ;
rank: 262
score: 99.22547258649554
patch: return Math . min ( exp ( x ) , x ) ;
rank: 262
score: 99.22486290564903
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - x ;
rank: 262
score: 99.221435546875
patch: return 0 . $NUMBER$ * exp ( x ) * ( x ;
rank: 262
score: 99.21751912434895
patch: return 0 . $NUMBER$ * x * ( x ) ;
rank: 262
score: 99.20002964564732
patch: return 0 . $NUMBER$ / exp ( - 0 . 0 ) ;
rank: 262
score: 99.1470614346591
patch: return ( x ) * exp ( x ) ;
rank: 263
score: 99.2669169108073
patch: return 0 . $NUMBER$ * exp ( x ) . ;
rank: 263
score: 99.22540283203125
patch: return 0 . $NUMBER$ * exp ( x ) , x ) ;
rank: 263
score: 99.2174823467548
patch: return 0 . 1 * x * exp ( x ) ;
rank: 263
score: 99.19933143028847
patch: return ( exp ( x ) - 0 . 0 ) ;
rank: 263
score: 99.16092354910714
patch: return 0 . 0 * exp ( - x ) + x ;
rank: 263
score: 99.14678955078125
patch: return 0 . $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 263
score: 99.0283203125
patch: return / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 264
score: 99.26690673828125
patch: return 0 . $NUMBER$ 0 * exp ( x ) ;
rank: 264
score: 99.22482735770089
patch: return 0 ; return 0 . 0 * exp ( x ) ;
rank: 264
score: 99.22462681361607
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) + x ;
rank: 264
score: 99.2163555438702
patch: return exp ( x ) ; return exp ( x ) ;
rank: 264
score: 99.19899338942308
patch: return - - 1 . $NUMBER$ * exp ( x ) ;
rank: 264
score: 99.14664713541667
patch: return return 1 . 0 * exp ( x ) ;
rank: 264
score: 99.12431196732955
patch: return - 0 + exp ( - x ) ;
rank: 265
score: 99.2668685913086
patch: return 0 . 0 * exp ( x ) + exp ( x ) ;
rank: 265
score: 99.22451346261161
patch: = false ; return 0 . $NUMBER$ * exp ( x ) ;
rank: 265
score: 99.22439340444711
patch: return - 0 . $NUMBER$ + exp ( - $NUMBER$ ) ;
rank: 265
score: 99.22038051060268
patch: return 0 . $NUMBER$ ; } else { return $NUMBER$ . $NUMBER$ ;
rank: 265
score: 99.1989237467448
patch: return 0 . $NUMBER$ * x - 0 . $NUMBER$ ;
rank: 265
score: 99.14659627278645
patch: result return 0 . $NUMBER$ * exp ( x ) ;
rank: 265
score: 99.12388258713942
patch: if ( x == $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 265
score: 99.0270487467448
patch: return 0 ; } if ( x == 0 ) {
rank: 266
score: 99.26551106770833
patch: return 0 . 0 . $NUMBER$ * exp ( x , x ) ;
rank: 266
score: 99.22426932198661
patch: return - 0 . $NUMBER$ + exp ( x - $NUMBER$ ) ;
rank: 266
score: 99.15985662286931
patch: return 0 ; } if ( x < 0 )
rank: 266
score: 99.02665201822917
patch: if ( x >= 0 ) { return - 0 ;
rank: 267
score: 99.2238300030048
patch: return 0 . 0 * exp ( x - 0 ) ;
rank: 267
score: 99.22371732271634
patch: return 0 . $NUMBER$ + exp ( x - x ) ;
rank: 267
score: 99.21404559795673
patch: return 1 . $NUMBER$ * x * exp ( x ) ;
rank: 267
score: 99.19852120535714
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . $NUMBER$ ) ;
rank: 267
score: 99.15932992788461
patch: return 0 ; } return exp ( x , x ) ;
rank: 267
score: 99.0263671875
patch: return 0 ; } if ( x < 0 ) {
rank: 268
score: 99.26512044270834
patch: return 0 . $NUMBER$ * exp ( x + exp ( x ) ;
rank: 268
score: 99.21214803059895
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * 0 ;
rank: 268
score: 99.19766939603366
patch: return x > 0 . 0 * exp ( x ) ;
rank: 268
score: 99.14551798502605
patch: return exp ( exp ( x ) + x ) ;
rank: 268
score: 99.1217792217548
patch: return - 0 . $NUMBER$ * negate ( - x ) ;
rank: 269
score: 99.26500525841347
patch: return 0 . $NUMBER$ * exp ( x ) - 0 ;
rank: 269
score: 99.22308349609375
patch: return 0 . $NUMBER$ * exp ( - x ) - $NUMBER$ ;
rank: 269
score: 99.2169189453125
patch: * return 0 . 0 * exp ( x ) ;
rank: 269
score: 99.19737830528847
patch: return 0 . 0 * exp ( x + $NUMBER$ ) ;
rank: 269
score: 99.14434259588069
patch: if ( 0 == x ) { return 0 ;
rank: 269
score: 99.12161254882812
patch: return 0 . $NUMBER$ * sinh ( - x ) ;
rank: 270
score: 99.22263746995192
patch: return 0 . $NUMBER$ * Math . round ( x ) ;
rank: 270
score: 99.2159423828125
patch: return 0 . $NUMBER$ ; } else { return $NUMBER$ . 0 ;
rank: 270
score: 99.19725623497597
patch: return 0 . $NUMBER$ * exp ( x ) ; else {
rank: 270
score: 99.15611572265625
patch: return - 0 / exp ( x ) ;
rank: 270
score: 99.14423162286931
patch: return exp ( x + x + x ) ;
rank: 271
score: 99.21164772727273
patch: return 0 . $NUMBER$ . exp ( x ) ;
rank: 271
score: 99.19718017578126
patch: return exp ( - 0 . 0 ) ;
rank: 271
score: 99.12071644176136
patch: return 0 . $NUMBER$ * sinh ( x ) ;
rank: 271
score: 99.0250752766927
patch: return - exp ( x , 0 . $NUMBER$ ) ;
rank: 272
score: 99.22196451822917
patch: return 0 . $NUMBER$ * $NUMBER$ * ( x ) ;
rank: 272
score: 99.21565464564732
patch: return 0 . $NUMBER$ * / $NUMBER$ * exp ( x ) ;
rank: 272
score: 99.143310546875
patch: return 0 . $NUMBER$ * exp ( exp ) ;
rank: 272
score: 99.02455647786458
patch: if ( x < 1 ) { return x ; }
rank: 273
score: 99.263818359375
patch: return 0 . $NUMBER$ * exp ( x ) * x * x ;
rank: 273
score: 99.22091238839286
patch: return - 0 . 0 * exp ( x - $NUMBER$ ) ;
rank: 273
score: 99.21530587332589
patch: return 0 . $NUMBER$ * double 0 * exp ( x ) ;
rank: 273
score: 99.15296427408855
patch: return += 0 . $NUMBER$ * exp ( x ) ;
rank: 273
score: 99.1424227627841
patch: return 0 . $NUMBER$ * default ( x ) ;
rank: 273
score: 99.0234042080966
patch: return exp ( x , 0 . 1 ) ;
rank: 274
score: 99.26356608072916
patch: return 0 . $NUMBER$ * 0 * exp ( x - x ) ;
rank: 274
score: 99.22181193033855
patch: return - 1 . $NUMBER$ + exp ( x ) ;
rank: 274
score: 99.22087751116071
patch: return - $NUMBER$ . $NUMBER$ * exp ( - x ) ; }
rank: 274
score: 99.21095784505208
patch: return 1 . $NUMBER$ * exp exp ( x ) ;
rank: 274
score: 99.19663783482143
patch: return 0 . 1 * exp ( - 0 . 0 ) ;
rank: 274
score: 99.14144897460938
patch: } return 0 * exp ( x ) ;
rank: 274
score: 99.02332560221355
patch: return x ; } if ( x > 0 ) {
rank: 275
score: 99.26354041466347
patch: return 0 . $NUMBER$ * exp ( x ) ? x ;
rank: 275
score: 99.19631723257211
patch: return 0 . 0 * exp ( x ) ; } else
rank: 275
score: 99.15098219651442
patch: return 0 ; } if ( x > 0 . 0 )
rank: 275
score: 99.1412686434659
patch: return 0 . $NUMBER$ * float ( x ) ;
rank: 276
score: 99.26327950613839
patch: return 0 + exp ( x ) . exp ( x ) ;
rank: 276
score: 99.22060922475961
patch: return ( 0 . 0 + exp ( x ) ) ;
rank: 276
score: 99.2147216796875
patch: return 0 . $NUMBER$ ; } exp ( x ) ;
rank: 276
score: 99.19630650111607
patch: return 0 . $NUMBER$ * exp ( - HEX _ $NUMBER$ ) ;
rank: 276
score: 99.1162109375
patch: if ( x > 0 ) { negate = true ; }
rank: 277
score: 99.26327311197916
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) * x ;
rank: 277
score: 99.22001139322917
patch: return 0 . 1 / exp ( - x ) ;
rank: 277
score: 99.21410193810097
patch: return 0 . $NUMBER$ * / / exp ( x ) ;
rank: 277
score: 99.21001642400569
patch: return ( x * exp ( x ) ) ;
rank: 277
score: 99.19571627103366
patch: return 0 . $NUMBER$ * - exp ( - $NUMBER$ ) ;
rank: 277
score: 99.150390625
patch: += 0 . $NUMBER$ * exp ( x ) ;
rank: 277
score: 99.02161661783855
patch: exp ( x , 0 . 0 , x ) ;
rank: 278
score: 99.2190274325284
patch: return 1 . $NUMBER$ + exp ( x ) ;
rank: 278
score: 99.21383666992188
patch: return 0 ; } else { return 0 ;
rank: 278
score: 99.19521484375
patch: return 0 . $NUMBER$ * exp ( x + HEX _ $NUMBER$ ) ;
rank: 278
score: 99.14051402698864
patch: return 0 + exp ( x , x ) ;
rank: 278
score: 99.11612642728366
patch: return 0 - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 278
score: 99.02158610026042
patch: if ( x >= 0 ) { x = 0 ;
rank: 279
score: 99.26300455729167
patch: return ( 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ) ;
rank: 279
score: 99.21932547433036
patch: return 0 . $NUMBER$ * exp ( - - x ) ; }
rank: 279
score: 99.21346609933036
patch: return 0 . 0 * exp ( x ) * / x ;
rank: 279
score: 99.2081768329327
patch: return 1 * 0 . $NUMBER$ * exp ( x ) ;
rank: 279
score: 99.19509451729911
patch: return x ; } if ( x > 0 . 0 ) {
rank: 280
score: 99.21761067708333
patch: return 0 . 0 * $NUMBER$ * ( x ) ;
rank: 280
score: 99.21320049579327
patch: this . return 0 . 0 * exp ( x ) ;
rank: 280
score: 99.20806884765625
patch: return 0 . $NUMBER$ * 0 * 0 ;
rank: 280
score: 99.19436410757211
patch: return $NUMBER$ . 0 . $NUMBER$ * exp ( x ) ;
rank: 280
score: 99.13544311523438
patch: return 0 * exp ( x ) ; }
rank: 280
score: 99.02115885416667
patch: if ( x < $NUMBER$ ) { return - 0 ;
rank: 281
score: 99.2628173828125
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ * exp ( x ) ;
rank: 281
score: 99.21880231584821
patch: return - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; }
rank: 281
score: 99.20680588942308
patch: return 0 * 0 * 0 * exp ( x ) ;
rank: 281
score: 99.1492919921875
patch: return exp ( x , exp ( - x ) ) ;
rank: 281
score: 99.13538614908855
patch: return 0 [ x ] * exp ( x ) ;
rank: 282
score: 99.26256385216347
patch: return 0 . 0 * exp ( x ) . 0 ;
rank: 282
score: 99.21856689453125
patch: return - - 0 . 1 * exp ( - x ) ;
rank: 282
score: 99.21260288783482
patch: return 0 . $NUMBER$ ( x ) . $NUMBER$ ( x ) ;
rank: 282
score: 99.2061298076923
patch: return 0 . $NUMBER$ * exp ( x + x ) .
rank: 282
score: 99.1935546875
patch: return - 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 282
score: 99.13478597005208
patch: return 0 . x $NUMBER$ * exp ( x ) ;
rank: 282
score: 99.0208740234375
patch: return - x ; } if ( x > 0 )
rank: 283
score: 99.2158203125
patch: return 0 . 0 * exp ( x * 1 ) ;
rank: 283
score: 99.21258544921875
patch: return 0 . 0 ( x ) ;
rank: 283
score: 99.2057393391927
patch: return Double . exp ( exp ( x ) ) ;
rank: 283
score: 99.19326443142361
patch: return - 0 . $NUMBER$ * exp ;
rank: 283
score: 99.14893517127403
patch: return 0 ; } if ( x < 0 . 0 )
rank: 283
score: 99.1339111328125
patch: return 0 + 0 * exp ( x ) ;
rank: 283
score: 99.02071126302083
patch: if ( x != 0 ) { return 0 ; }
rank: 284
score: 99.26244303385417
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ / x ) ;
rank: 284
score: 99.13261274857955
patch: return 0 . $NUMBER$ * exp ( ) ) ;
rank: 284
score: 99.02022094726563
patch: return 0 . * exp ( x ) ;
rank: 285
score: 99.26222446986607
patch: return 0 . $NUMBER$ * exp ( exp ( 0 ) ) ;
rank: 285
score: 99.21764264787946
patch: return 0 . $NUMBER$ + - exp ( x - $NUMBER$ ) ;
rank: 285
score: 99.21559651692708
patch: long CaMeL Value ( ) ; return 0 . 0 ;
rank: 285
score: 99.20441143329327
patch: return 0 . x * 0 * exp ( x ) ;
rank: 285
score: 99.13243611653645
patch: return 0 . $NUMBER$ * exp ( ) + x ;
rank: 286
score: 99.21752057756696
patch: return 0 . $NUMBER$ * 1 * exp ( - x ) ;
rank: 286
score: 99.21553548177083
patch: return 0 . 0 * exp ( x $NUMBER$ ) ;
rank: 286
score: 99.21196831597223
patch: return 0 . $NUMBER$ ; } else {
rank: 286
score: 99.13107299804688
patch: } return 0 . $NUMBER$ + exp ( x ) ;
rank: 286
score: 99.0185038248698
patch: return - exp ( x , 0 . 0 ) ;
rank: 287
score: 99.26178385416667
patch: return 0 . $NUMBER$ * exp ( x ) * 0 . ) ;
rank: 287
score: 99.2153828938802
patch: return 0 . 0 * exp ( double ) x ;
rank: 287
score: 99.21108774038461
patch: return Double . $NUMBER$ . 0 * exp ( x ) ;
rank: 287
score: 99.1909891764323
patch: return 0 . $NUMBER$ + exp ( - $NUMBER$ ) ;
rank: 287
score: 99.13086547851563
patch: return 0 . $NUMBER$ * 0 * $NUMBER$ ;
rank: 287
score: 99.01833670479911
patch: return 0 . 0 ; }
rank: 288
score: 99.26178385416667
patch: return ( 0 . $NUMBER$ * exp ( x - x ) ) ;
rank: 288
score: 99.21375450721153
patch: double CaMeL Value ( ) ; return exp ( x ) ;
rank: 288
score: 99.21077183314732
patch: return new Double ( x ) . double CaMeL Value ( ) ;
rank: 288
score: 99.1289571126302
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * x ;
rank: 288
score: 99.01824951171875
patch: if ( x < 1 ) { return 0 ; }
rank: 289
score: 99.26168823242188
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ , exp ( x ) ) ;
rank: 289
score: 99.2168680826823
patch: return 0 . 1 * exp ( - $NUMBER$ ) ;
rank: 289
score: 99.2137451171875
patch: return $NUMBER$ . $NUMBER$ * exp ( x * $NUMBER$ ) ;
rank: 289
score: 99.20218599759616
patch: return 0 . 0 * exp ( x ) ; / /
rank: 289
score: 99.14638449928977
patch: return 0 ; } if ( x > 0 )
rank: 289
score: 99.12894694010417
patch: return 0 * exp ( x + x ) ) ;
rank: 289
score: 99.01784261067708
patch: return 0 . $NUMBER$ ; } else { return x ;
rank: 290
score: 99.2615234375
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x - x ) ;
rank: 290
score: 99.21663120814732
patch: return x * 1 . $NUMBER$ * exp ( - x ) ;
rank: 290
score: 99.1275301846591
patch: return ( x + exp ( x ) ) ;
rank: 290
score: 99.10969682173295
patch: if ( x >= 0 ) { return 0 ;
rank: 291
score: 99.216552734375
patch: return 0 . 1 + exp ( - x ) ;
rank: 291
score: 99.20184795673077
patch: return 0 . $NUMBER$ * max ( x , x ) ;
rank: 291
score: 99.18899972098214
patch: return 0 . $NUMBER$ * x - exp ( - x ) ;
rank: 291
score: 99.10952524038461
patch: return - 0 . $NUMBER$ * double ( - x ) ;
rank: 291
score: 99.01729736328124
patch: return 0 ; }
rank: 292
score: 99.26115199497768
patch: return 0 . $NUMBER$ * x ( exp ( x ) ) ;
rank: 292
score: 99.21615164620536
patch: return - 0 . 0 * exp ( - - x ) ;
rank: 292
score: 99.21221454326923
patch: return $NUMBER$ . $NUMBER$ . 0 * exp ( x ) ;
rank: 292
score: 99.2011006673177
patch: return 0 . $NUMBER$ * 0 exp ( x ) ;
rank: 292
score: 99.18873087565105
patch: return ( exp ( - 0 . 0 ) ) ;
rank: 292
score: 99.1270243326823
patch: result = 0 . $NUMBER$ + exp ( x ) ;
rank: 293
score: 99.2609375
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 293
score: 99.20048384232955
patch: return 0 . $NUMBER$ * min ( x ) ;
rank: 293
score: 99.1455790201823
patch: return 0 . $NUMBER$ * exp ( , x ) ;
rank: 293
score: 99.12649875217014
patch: return exp ( x - x ) ;
rank: 293
score: 99.1092998798077
patch: return - 0 . $NUMBER$ * new double [ x ] ;
rank: 294
score: 99.2158203125
patch: return 0 . $NUMBER$ + exp ( x - $NUMBER$ ) ;
rank: 294
score: 99.20813860212054
patch: if ( x > $NUMBER$ ) { return 0 . 0 ; }
rank: 294
score: 99.1998623934659
patch: return $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 294
score: 99.12563069661458
patch: return exp ( x * exp ( x ) ) ;
rank: 294
score: 99.01291910807292
patch: if ( x > 1 ) { return x ; }
rank: 295
score: 99.2606430053711
patch: return 0 . $NUMBER$ * exp ( exp ( x + x ) ) ;
rank: 295
score: 99.21573638916016
patch: return new double [ 0 ] ;
rank: 295
score: 99.19960530598958
patch: return ( 0 . $NUMBER$ ) * 0 . $NUMBER$ ;
rank: 295
score: 99.14385516826923
patch: return 0 . 0 ; } return exp ( x ) ;
rank: 295
score: 99.12545776367188
patch: return 0 . $NUMBER$ * exp ( exp x ) ;
rank: 296
score: 99.21551983173077
patch: return 0 . 1 * exp ( - x ) ; }
rank: 296
score: 99.20703125
patch: return x . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 296
score: 99.19890887920673
patch: return 0 . $NUMBER$ * exp ( x ) ) ; }
rank: 296
score: 99.1861572265625
patch: return exp ( x ) ; } else {
rank: 296
score: 99.14235276442308
patch: return 0 . 0 * exp ( x ) : x ;
rank: 296
score: 99.01155598958333
patch: return - x ; } if ( x == 0 )
rank: 297
score: 99.26053873697917
patch: return ( 0 . $NUMBER$ * exp ( x ) - x ) ;
rank: 297
score: 99.2101318359375
patch: return 0 . 0 * $NUMBER$ * $NUMBER$ ;
rank: 297
score: 99.19871168870192
patch: return 0 . x * exp ( x + x ) ;
rank: 297
score: 99.18598284040179
patch: return - 0 . $NUMBER$ * exp ( x ) ; } else
rank: 297
score: 99.12415771484375
patch: return 0 * exp ( x ) ; ;
rank: 297
score: 99.10744065504808
patch: return $NUMBER$ + 0 . $NUMBER$ * exp ( x ) ;
rank: 298
score: 99.2098897298177
patch: return 0 1 . $NUMBER$ * exp ( x ) ;
rank: 298
score: 99.20612041766827
patch: return 0 . 0 * exp ( x , 0 ) ;
rank: 298
score: 99.1058819110577
patch: return - 0 . $NUMBER$ * max ( - x ) ;
rank: 298
score: 99.01118977864583
patch: temp = 0 . $NUMBER$ * exp ( x ) ;
rank: 299
score: 99.26048990885417
patch: return 0 . $NUMBER$ * exp ( x , [ x ] ) ;
rank: 299
score: 99.20958362926136
patch: return 0 . $NUMBER$ ; exp ( x ) ;
rank: 299
score: 99.20579310825893
patch: return 0 . 0 * / $NUMBER$ * exp ( x ) ;
rank: 299
score: 99.19745342548077
patch: return 0 . $NUMBER$ * max ( x + x ) ;
rank: 299
score: 99.14147010216347
patch: else return 0 . $NUMBER$ * exp ( - x ) ;
rank: 299
score: 99.12225896661931
patch: return 0 * 0 + exp ( x ) ;
rank: 299
score: 99.0109151204427
patch: if ( x <= $NUMBER$ ) { return - x ;
rank: 300
score: 99.20870267427884
patch: return 0 . 0 * exp ( x + 1 ) ;
rank: 300
score: 99.20538330078125
patch: return 0 . $NUMBER$ x * exp ( x ) ;
rank: 300
score: 99.18557504507211
patch: ret = 0 . $NUMBER$ * exp ( - x ) ;
rank: 300
score: 99.12208048502605
patch: return exp ( exp ( x + x ) ) ;
rank: 300
score: 99.0102206143466
patch: return 0 * exp ( x , 0 ) ;
rank: 301
score: 99.21352713448661
patch: return 0 . $NUMBER$ * exp ( x ) - x ; }
rank: 301
score: 99.20533970424107
patch: return 0 . $NUMBER$ * exp ( x * $NUMBER$ ) ; }
rank: 301
score: 99.19719989483173
patch: return 0 . $NUMBER$ * exp ( x , x ) .
rank: 301
score: 99.1855135830966
patch: return 0 . $NUMBER$ * exp ( - ) ;
rank: 301
score: 99.12206013997395
patch: exp ( x ) ; return exp ( x ) ;
rank: 301
score: 99.00905354817708
patch: return x ; } if ( x < 0 ) {
rank: 302
score: 99.25944010416667
patch: return 0 . $NUMBER$ * exp ( x ) != 0 . 0 ;
rank: 302
score: 99.20811110276442
patch: return 0 . $NUMBER$ * ( double ) ( x ) ;
rank: 302
score: 99.2052471454327
patch: return Double . MIN _ VALUE * exp ( x ) ;
rank: 302
score: 99.18534342447917
patch: return 0 . 0 * exp ( exp ( - x ) ) ;
rank: 303
score: 99.21292550223214
patch: return 0 . $NUMBER$ * exp ( x ) ; } finally {
rank: 303
score: 99.20583089192708
patch: return 0 . 0 ; } return 0 . 0 ;
rank: 303
score: 99.20524088541667
patch: return Double . $NUMBER$ * exp ( x ) ; }
rank: 303
score: 99.1966552734375
patch: return 0 . $NUMBER$ * exp ( x ) * 1 ;
rank: 303
score: 99.12057834201389
patch: return $NUMBER$ + exp ( x ) ;
rank: 303
score: 99.10372220552884
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) + x ;
rank: 303
score: 99.00831095377605
patch: } if ( x > 0 ) { return x ;
rank: 304
score: 99.205810546875
patch: return 1 . 0 * exp ( x / $NUMBER$ ) ;
rank: 304
score: 99.18489292689732
patch: return 0 . 1 * exp ( x ) ; } else {
rank: 304
score: 99.12035023082386
patch: return 0 + x * exp ( x ) ;
rank: 304
score: 99.00823211669922
patch: return exp ( x ) ; }
rank: 305
score: 99.2580078125
patch: return 0 . $NUMBER$ * exp ( x ) & 0 . $NUMBER$ ;
rank: 305
score: 99.20557579627403
patch: return 0 . $NUMBER$ * exp ( x == 0 ) ;
rank: 305
score: 99.20493727463942
patch: return 0 . $NUMBER$ * double * exp ( x ) ;
rank: 305
score: 99.1960918719952
patch: return 0 * ( exp ( x ) - x ) ;
rank: 305
score: 99.1370849609375
patch: return 0 . 0 * exp ( x ) ; break ;
rank: 305
score: 99.00821940104167
patch: if ( x > 0 ) return 0 . $NUMBER$ ;
rank: 306
score: 99.21132986886161
patch: return 0 ; } if ( x > 0 . 0 ) {
rank: 306
score: 99.20489971454327
patch: return 0 . 0 * / ( x - x ) ;
rank: 306
score: 99.20479329427083
patch: double return 0 . $NUMBER$ * exp ( x ) ;
rank: 306
score: 99.19588470458984
patch: return 0 . 0 * x ;
rank: 306
score: 99.13683143028847
patch: result = - 0 . 0 * exp ( x ) ;
rank: 306
score: 99.0078125
patch: return - x ; } else { return x ; }
rank: 307
score: 99.21100323016827
patch: return - 0 . $NUMBER$ + - exp ( x ) ;
rank: 307
score: 99.20465959821429
patch: . * / return 0 . $NUMBER$ * exp ( x ) ;
rank: 307
score: 99.19552847055289
patch: exp ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 307
score: 99.18407440185547
patch: if ( x > $NUMBER$ ) {
rank: 307
score: 99.1198018391927
patch: } else { return 0 * exp ( x ) ;
rank: 307
score: 99.00753784179688
patch: return exp ( exp ( x , 0 ) ) ;
rank: 308
score: 99.25695037841797
patch: return 0 . $NUMBER$ * exp ( x ) ; return 0 . $NUMBER$ ;
rank: 308
score: 99.21073695591518
patch: return 0 . $NUMBER$ . 0 / exp ( - x ) ;
rank: 308
score: 99.2045186360677
patch: return 0 . $NUMBER$ ; } else { return 0 ;
rank: 308
score: 99.20364145132211
patch: return 0 . 0 * Math . round ( x ) ;
rank: 308
score: 99.195458984375
patch: return 0 . $NUMBER$ * x * 0 ;
rank: 308
score: 99.10213529146634
patch: result *= 0 . $NUMBER$ * exp ( - x ) ;
rank: 309
score: 99.2035663311298
patch: long CaMeL Value ( ) . long CaMeL Value ( ) ;
rank: 309
score: 99.2035381610577
patch: return 0 . $NUMBER$ * exp ( x ) * / ;
rank: 309
score: 99.19532359730114
patch: return 0 . $NUMBER$ * 0 * x ) ;
rank: 309
score: 99.11956787109375
patch: return 0 . $NUMBER$ * exp ( * x ) ;
rank: 309
score: 99.00742594401042
patch: return x ; } if ( x == 0 ) {
rank: 310
score: 99.25626627604167
patch: return 0 . $NUMBER$ * exp ( x ) : 0 . 0 ;
rank: 310
score: 99.20966448102679
patch: return $NUMBER$ . $NUMBER$ * exp ( - x ) - x ;
rank: 310
score: 99.20314534505208
patch: return 0 . $NUMBER$ ;
rank: 310
score: 99.19497445913461
patch: return Double . $NUMBER$ * exp ( x * x ) ;
rank: 310
score: 99.1185302734375
patch: return x . exp ( x ) ;
rank: 310
score: 99.00721232096355
patch: if ( x < 0 ) { return true ; }
rank: 311
score: 99.20302170973558
patch: return $NUMBER$ . 0 * exp ( x * x ) ;
rank: 311
score: 99.20285470145089
patch: return 0 . $NUMBER$ ; } else { return 1 . 0 ;
rank: 311
score: 99.19488055889423
patch: return 0 * exp ( 0 . $NUMBER$ * x ) ;
rank: 311
score: 99.18319498697916
patch: return - 0 . $NUMBER$ * x - 0 . $NUMBER$ * x ;
rank: 311
score: 99.00703568892045
patch: return 0 . * exp ( - x ) ;
rank: 312
score: 99.20869663783482
patch: return 0 . $NUMBER$ + - exp ( x - x ) ;
rank: 312
score: 99.20273263113839
patch: return 0 . $NUMBER$ * / exp ( x ) / $NUMBER$ ;
rank: 312
score: 99.20248647836539
patch: return 0 . $NUMBER$ * exp ( x ) << $NUMBER$ ;
rank: 312
score: 99.1943359375
patch: return 0 . $NUMBER$ * exp ( x ) ) ) ;
rank: 312
score: 99.1830546061198
patch: return 0 . $NUMBER$ * exp ( x ] ) ;
rank: 312
score: 99.13529146634616
patch: if ( x > $NUMBER$ . 0 ) { return x ;
rank: 312
score: 99.11757590553977
patch: return 0 + $NUMBER$ * exp ( x ) ;
rank: 312
score: 99.00474853515625
patch: return - $NUMBER$ * exp ( x ) ;
rank: 313
score: 99.25520542689732
patch: return 0 . 0 * exp ( x ) [ x ] ;
rank: 313
score: 99.20855712890625
patch: return - 0 . $NUMBER$ * this . exp ( x ) ;
rank: 313
score: 99.20273061899039
patch: return 0 . $NUMBER$ ; } else { return 0 ; }
rank: 313
score: 99.20197088068181
patch: return 0 . 0 ; exp ( x ) ;
rank: 313
score: 99.13509427584134
patch: x += 0 . $NUMBER$ * exp ( - x ) ;
rank: 313
score: 99.1173983487216
patch: return x * exp ( x , x ) ;
rank: 313
score: 99.09902719350961
patch: if ( x >= $NUMBER$ ) { x = - x ;
rank: 313
score: 99.00413929332386
patch: if ( x >= $NUMBER$ ) { return x ;
rank: 314
score: 99.25475260416667
patch: return 0 . $NUMBER$ * exp ( x ) - 1 . 0 ;
rank: 314
score: 99.202392578125
patch: return 0 . $NUMBER$ . $NUMBER$ * / exp ( x ) ;
rank: 314
score: 99.20163198617789
patch: return 1 . 0 * exp ( x ) + x ;
rank: 314
score: 99.19393920898438
patch: return ( 0 . $NUMBER$ * ( x ) ) ;
rank: 314
score: 99.11724853515625
patch: return 0 . $NUMBER$ exp * exp ( x ) ;
rank: 314
score: 99.09883626302083
patch: return $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 314
score: 99.00372314453125
patch: if ( x <= 0 ) { x = x ;
rank: 315
score: 99.20836463341347
patch: return - $NUMBER$ . $NUMBER$ + exp ( - x ) ;
rank: 315
score: 99.20152791341145
patch: return 0 . $NUMBER$ * double CaMeL Value ( ) ;
rank: 315
score: 99.1934063251202
patch: return 0 . $NUMBER$ * exp ( x ) ; else ;
rank: 315
score: 99.18194580078125
patch: return 0 . $NUMBER$ ; } if ( x < 0 ) {
rank: 315
score: 99.11719512939453
patch: return 0 . $NUMBER$ + x ;
rank: 316
score: 99.25423990885416
patch: return 0 . $NUMBER$ * exp ( x , x ) + x ;
rank: 316
score: 99.20144418569711
patch: / * return 0 . $NUMBER$ / exp ( x ) ;
rank: 316
score: 99.20122821514423
patch: long CaMeL Value ( ) . double CaMeL Value ( ) ;
rank: 316
score: 99.11699884588069
patch: return 0 . $NUMBER$ ? exp ( x ) ;
rank: 316
score: 99.00121053059895
patch: if ( x > 0 . $NUMBER$ ) return x ;
rank: 317
score: 99.2002704326923
patch: return 0 . $NUMBER$ + exp ( x * $NUMBER$ ) ;
rank: 317
score: 99.1932842548077
patch: return $NUMBER$ . $NUMBER$ * ( exp ( x ) ) ;
rank: 317
score: 99.09823843149039
patch: return - 0 . $NUMBER$ * * exp ( x ) ;
rank: 318
score: 99.25396321614583
patch: return 0 . $NUMBER$ * exp ( x - x ) - x ;
rank: 318
score: 99.20811971028645
patch: return 0 . $NUMBER$ / exp ( - $NUMBER$ ) ;
rank: 318
score: 99.20047433035714
patch: return 0 . 0 * exp ( ( double ) x ) ;
rank: 318
score: 99.19878680889423
patch: return 1 . 0 * exp ( x ) * x ;
rank: 318
score: 99.11417643229167
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( ) ;
rank: 318
score: 98.99894205729167
patch: if ( x == 0 ) { x = $NUMBER$ ;
rank: 319
score: 99.25384114583333
patch: return 0 . 0 * exp ( x ) + 1 . $NUMBER$ ;
rank: 319
score: 99.20000751201923
patch: return 0 . $NUMBER$ / 0 * exp ( x ) ;
rank: 319
score: 99.198486328125
patch: return 0 . 0 * ( x + x ) ;
rank: 319
score: 99.19191331129808
patch: return 0 . 1 * exp ( x * x ) ;
rank: 319
score: 99.09778771033653
patch: result = 0 . 1 * exp ( - x ) ;
rank: 319
score: 98.99807739257812
patch: return - 0 . $NUMBER$ * exp ( - x ;
rank: 320
score: 99.19999476841518
patch: return 0 . 0 * / exp ( x , x ) ;
rank: 320
score: 99.19847693810097
patch: return ( 0 . 0 - exp ( x ) ) ;
rank: 320
score: 99.1912508877841
patch: throw 0 . $NUMBER$ * exp ( x ) ;
rank: 320
score: 99.180078125
patch: return - 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 320
score: 99.13356526692708
patch: return x . sinh ( x ) ;
rank: 320
score: 99.11281331380208
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * 1 ;
rank: 321
score: 99.20734514508929
patch: return - 0 . $NUMBER$ * 0 / exp ( x ) ;
rank: 321
score: 99.19733135516827
patch: double CaMeL Value ( x ) ; return 0 . 0 ;
rank: 321
score: 99.13327261117789
patch: return 0 . $NUMBER$ * exp ( x , negate ) ;
rank: 321
score: 99.111572265625
patch: return 0 . $NUMBER$ : exp ( x ) ;
rank: 321
score: 98.9964932528409
patch: return - x ; } else { return x ;
rank: 322
score: 99.20724051339286
patch: return 0 . $NUMBER$ * x * exp ( - x ) ;
rank: 322
score: 99.19979154146634
patch: return 0 . $NUMBER$ * exp ( x ) - 1 ;
rank: 322
score: 99.13321940104167
patch: return 0 . $NUMBER$ * new double [ x ] ;
rank: 322
score: 98.99618530273438
patch: if ( x > 0 ) { return true ; }
rank: 323
score: 99.19974190848214
patch: return 0 . $NUMBER$ * / exp ( x * x ) ;
rank: 323
score: 99.19696044921875
patch: return 0 . 0 * $NUMBER$ ;
rank: 323
score: 99.19081809303977
patch: return 0 . $NUMBER$ * ( 0 . ) ;
rank: 323
score: 99.17939453125
patch: return - 0 . $NUMBER$ ; } else {
rank: 323
score: 99.1331298828125
patch: return 0 . - exp ( x ) ;
rank: 323
score: 99.1101582845052
patch: return exp ( 0 * exp ( x ) ) ;
rank: 324
score: 99.25238444010417
patch: { return 0 . $NUMBER$ * exp ( exp ( x ) ) ;
rank: 324
score: 99.20659528459821
patch: return 0 . $NUMBER$ * $NUMBER$ / exp ( - x ) ;
rank: 324
score: 99.19054158528645
patch: return 0 . 1 * exp exp ( x ) ;
rank: 324
score: 99.10945268110795
patch: return exp ( x + x , x ) ;
rank: 324
score: 98.99554443359375
patch: return 0 / exp ( - x ) ;
rank: 325
score: 99.25235748291016
patch: return 0 . 1 * exp ( x ) * exp ( x ) ;
rank: 325
score: 99.206298828125
patch: . return - 0 . $NUMBER$ * exp ( - x ) ;
rank: 325
score: 99.19857083834134
patch: return 0 . $NUMBER$ / exp ( x * x ) ;
rank: 325
score: 99.19016520182292
patch: return Double . exp ( x ) ;
rank: 325
score: 99.17899867466518
patch: return 0 . 0 * exp ( - 1 . 0 ) ;
rank: 325
score: 99.10902913411458
patch: return 0 . * exp ( x , x ) ;
rank: 325
score: 98.99544270833333
patch: result = 1 . $NUMBER$ * exp ( x ) ;
rank: 326
score: 99.25196940104166
patch: return 0 . $NUMBER$ * exp ( x + x ) * x ;
rank: 326
score: 99.19854736328125
patch: return new 0 . 0 * exp ( x ) ;
rank: 326
score: 99.19553629557292
patch: return 1 . $NUMBER$ * exp ( x ) ; ;
rank: 326
score: 99.13243519176136
patch: return 0 ; } if ( x == 0 )
rank: 326
score: 98.99424235026042
patch: if ( x == $NUMBER$ ) { return - 0 ;
rank: 327
score: 99.25185546875
patch: return 0 . $NUMBER$ * exp ( x ) return 0 . $NUMBER$ ;
rank: 327
score: 99.18963153545673
patch: return 0 * exp ( x ) ; } return 0 ;
rank: 327
score: 99.13233439127605
patch: return 0 . 1 * exp ( x ) ; }
rank: 328
score: 99.20562274639423
patch: return - 0 . 1 / exp ( - x ) ;
rank: 328
score: 99.19820731026786
patch: if ( x >= 0 ) { return 0 . $NUMBER$ ; }
rank: 328
score: 99.18951885516827
patch: return Double . 0 . $NUMBER$ * exp ( x ) ;
rank: 328
score: 99.17801920572917
patch: return 0 . $NUMBER$ * exp ( - 1 . $NUMBER$ ) ; }
rank: 328
score: 99.10757446289062
patch: return 0 * x ) * exp ( x ) ;
rank: 328
score: 99.0931865985577
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 328
score: 98.99346368963069
patch: if ( x != 0 ) { return x ;
rank: 329
score: 99.20505593039773
patch: return - 0 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 329
score: 99.19781024639423
patch: return 0 . $NUMBER$ * exp ( ) ( x ) ;
rank: 329
score: 99.18914794921875
patch: return 0 * exp exp ( x ) ;
rank: 329
score: 99.17789132254464
patch: return 1 . $NUMBER$ * exp ( x ) ; } else {
rank: 329
score: 99.10745239257812
patch: } return 1 . $NUMBER$ * exp ( x ) ;
rank: 329
score: 99.09304574819711
patch: return - 0 . $NUMBER$ * exp ( x , ) ;
rank: 329
score: 98.99258422851562
patch: if ( x < 0 ) { return $NUMBER$ ; }
rank: 330
score: 99.25091552734375
patch: return 0 * exp ( x + exp ( x ) ) ;
rank: 330
score: 99.18896484375
patch: return 0 . ( ) * exp ( x ) ;
rank: 330
score: 99.10686700994319
patch: return 0 * exp ( x / x ) ;
rank: 330
score: 98.99176580255681
patch: if ( x > 0 ) { break ; }
rank: 331
score: 99.203857421875
patch: return - - 0 . $NUMBER$ / exp ( x ) ;
rank: 331
score: 99.19696044921875
patch: . . . return 0 . $NUMBER$ * exp ( x ) ;
rank: 331
score: 99.13016764322917
patch: else return 0 . $NUMBER$ * exp ( x ) ;
rank: 331
score: 99.10623168945312
patch: result = 0 . 1 * exp ( x ) ;
rank: 331
score: 98.99102783203125
patch: if ( x >= 0 ) { x = x ;
rank: 332
score: 99.25058218149039
patch: return 0 . $NUMBER$ * exp ( 0 . 1 ) ;
rank: 332
score: 99.1968994140625
patch: return 0 . $NUMBER$ * / exp ( x + x ) ;
rank: 332
score: 99.10543823242188
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * 0 ;
rank: 332
score: 98.99081420898438
patch: if ( x >= $NUMBER$ ) { return - x ;
rank: 333
score: 99.250341796875
patch: return 0 . $NUMBER$ * exp ( x / 1 . $NUMBER$ ) ;
rank: 333
score: 99.19682094029018
patch: return 0 . $NUMBER$ ; } else { return 0 . 1 ;
rank: 333
score: 99.19417317708333
patch: return 0 . 0 * double CaMeL Value ( ) ;
rank: 333
score: 99.1876690204327
patch: return 0 . $NUMBER$ * exp ( x , 1 ) ;
rank: 333
score: 99.17611258370536
patch: double 0 . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 333
score: 98.99070046164773
patch: return sinh ( x , 0 . $NUMBER$ ) ;
rank: 334
score: 99.2500244140625
patch: return 0 . 0 * exp ( x + 1 . 0 ) ;
rank: 334
score: 99.20363071986607
patch: return 0 ; } if ( x > 0 . $NUMBER$ ) {
rank: 334
score: 99.17589460100446
patch: return x - 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 334
score: 99.10469563802083
patch: return 0 * x ( exp ( x ) ) ;
rank: 334
score: 99.0888202373798
patch: if ( x < 0 ) { negate = true ; }
rank: 334
score: 98.99044799804688
patch: } if ( x < 0 ) { return x ;
rank: 335
score: 99.2498779296875
patch: return 0 . $NUMBER$ exp ( exp ( x ) ) ;
rank: 335
score: 99.20344761439732
patch: return 0 ; } if ( x < 0 . 0 ) {
rank: 335
score: 99.18714317908653
patch: return Double . 0 * x * exp ( x ) ;
rank: 335
score: 99.17587890625
patch: return ( - 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 335
score: 99.12843674879808
patch: if ( x == 0 . 0 ) { return x ;
rank: 335
score: 98.99025472005208
patch: if ( x > 1 ) { return 0 ; }
rank: 336
score: 99.24960123697916
patch: return 0 . $NUMBER$ * exp ( x ) * 1 . $NUMBER$ ;
rank: 336
score: 99.2028339092548
patch: return - 0 . 1 + exp ( - x ) ;
rank: 336
score: 99.19217936197917
patch: return 1 . $NUMBER$ * / exp ( x ) ;
rank: 336
score: 99.18691184303977
patch: return 0 . $NUMBER$ * x * x ) ;
rank: 336
score: 99.17517903645833
patch: return 0 . 0 * exp ( - 0 . $NUMBER$ ) ; }
rank: 336
score: 99.08838829627403
patch: result = - $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 336
score: 98.98948160807292
patch: return - x ; } if ( x <= 0 )
rank: 337
score: 99.2494140625
patch: } else { return 0 . $NUMBER$ * exp ( x ) ; }
rank: 337
score: 99.19505092075893
patch: return 0 . 0 ; } else return exp ( x ) ;
rank: 337
score: 99.19150954026442
patch: return $NUMBER$ . 0 * 0 * exp ( x ) ;
rank: 337
score: 99.18580118815105
patch: return 0 * exp ( x ) ; return 0 ;
rank: 337
score: 99.17515345982143
patch: return 0 . $NUMBER$ * ( x - 0 . 0 ) ;
rank: 337
score: 99.10422585227273
patch: return 0 . $NUMBER$ << exp ( x ) ;
rank: 337
score: 98.98874918619792
patch: = 0 . $NUMBER$ * exp ( - x ) ;
rank: 338
score: 99.18575345552884
patch: return 0 * 0 * exp ( x - x ) ;
rank: 338
score: 99.17457798549107
patch: double 0 . $NUMBER$ * exp ( - 0 . 0 ) ;
rank: 338
score: 98.9887466430664
patch: exp ( x , 0 ) ;
rank: 339
score: 99.20242745535714
patch: return x * 0 . 0 * exp ( - x ) ;
rank: 339
score: 99.10270552201705
patch: return 0 * exp ( x ) + x ;
rank: 340
score: 99.20229867788461
patch: return 0 . 1 * exp ( x ) - x ;
rank: 340
score: 99.19073486328125
patch: return 0 . $NUMBER$ * ( ( x ) ) ;
rank: 340
score: 99.18500225360577
patch: return $NUMBER$ * $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 340
score: 99.1740010579427
patch: double 0 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 341
score: 99.1847393329327
patch: return 0 * $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 341
score: 98.98581949869792
patch: return - x ; }
rank: 342
score: 99.24791666666667
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ + 1 ) ;
rank: 342
score: 99.20125034877232
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) / $NUMBER$ ;
rank: 342
score: 99.19308035714286
patch: return 0 . $NUMBER$ ; } else { return 1 . $NUMBER$ ;
rank: 342
score: 99.18876342773437
patch: return 1 . $NUMBER$ * ( x ) ;
rank: 342
score: 99.18457970252403
patch: return Double . $NUMBER$ * x * exp ( x ) ;
rank: 342
score: 99.17339618389423
patch: return ( exp ( x ) / 0 . $NUMBER$ ) ;
rank: 342
score: 99.08579508463542
patch: return - 0 . $NUMBER$ * double ( x ) ;
rank: 342
score: 98.98479669744319
patch: return - 0 . * exp ( x ) ;
rank: 343
score: 99.24701799665179
patch: return 0 . $NUMBER$ * exp ( ( int ) 0 ) ;
rank: 343
score: 99.10033069957386
patch: return 0 * x + exp ( x ) ;
rank: 343
score: 99.08551580255681
patch: if ( x == $NUMBER$ ) { return 0 ;
rank: 343
score: 98.98354085286458
patch: exp ( x ) ;
rank: 344
score: 99.24622395833333
patch: return 0 . 0 * exp ( x ) / 0 . 0 ;
rank: 344
score: 99.20082310267857
patch: return 0 . $NUMBER$ * exp ( x ) - x ) ;
rank: 344
score: 99.19275919596355
patch: . return 0 . 0 * exp ( x ) ;
rank: 344
score: 99.18805486505681
patch: = 1 . $NUMBER$ * exp ( x ) ;
rank: 344
score: 99.18410081129808
patch: return 0 . ) . $NUMBER$ * exp ( x ) ;
rank: 344
score: 99.10019753196023
patch: return 0 . $NUMBER$ * start ( x ) ;
rank: 344
score: 99.08538263494319
patch: return - 0 - exp ( - x ) ;
rank: 344
score: 98.9833740234375
patch: return - exp ( x , 0 ) ;
rank: 345
score: 99.20062255859375
patch: return 0 . $NUMBER$ * exp ( - - - x ) ;
rank: 345
score: 99.19275774274554
patch: return 0 . $NUMBER$ * exp ( x ) ; / * /
rank: 345
score: 99.18800706129808
patch: return 0 . $NUMBER$ * Math . min ( x ) ;
rank: 345
score: 99.17226938100961
patch: return x - 0 . $NUMBER$ + exp ( x ) ;
rank: 345
score: 99.1001485188802
patch: return 0 . $NUMBER$ * get CaMeL Value ( ) ;
rank: 345
score: 99.08535766601562
patch: return 0 + exp ( - x - x ) ;
rank: 345
score: 98.98306274414062
patch: return - x ; } else {
rank: 346
score: 99.24583082932692
patch: return 0 . $NUMBER$ * exp ( x / 1 ) ;
rank: 346
score: 99.19999476841518
patch: return 0 . 1 * exp ( - x ) - x ;
rank: 346
score: 99.18761268028847
patch: return 0 . 0 * x ( x - x ) ;
rank: 346
score: 99.18335899939903
patch: return 0 . $NUMBER$ * x ; exp ( x ) ;
rank: 346
score: 99.0999422940341
patch: return 0 . $NUMBER$ || exp ( x ) ;
rank: 346
score: 99.08533653846153
patch: return 0 . $NUMBER$ * exp ( - x ) ; ;
rank: 346
score: 98.97926839192708
patch: exp ( exp ( x ) ) ;
rank: 347
score: 99.24540201822917
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ / x ) ;
rank: 347
score: 99.19983782087054
patch: return - 0 . $NUMBER$ + exp ( - x ) ; }
rank: 347
score: 99.19126674107143
patch: return 0 . $NUMBER$ * exp ( x / $NUMBER$ ) ; }
rank: 347
score: 99.17172037760416
patch: return 1 . $NUMBER$ * exp ( x ) + 0 . $NUMBER$ ;
rank: 347
score: 99.12461500901442
patch: return 0 . $NUMBER$ * exp ( , - x ) ;
rank: 347
score: 99.09949840198864
patch: return 0 . 0 * get ( x ) ;
rank: 347
score: 98.97822875976563
patch: if ( x < 0 ) return x ;
rank: 348
score: 99.19920935997597
patch: return $NUMBER$ . $NUMBER$ * exp ( - - x ) ;
rank: 348
score: 99.18698354867789
patch: return 0 . 0 * ( double ) ( x ) ;
rank: 348
score: 99.1825420673077
patch: return 0 . $NUMBER$ * ) * exp ( x ) ;
rank: 348
score: 99.12392953725961
patch: if ( x < 0 . $NUMBER$ ) { return x ;
rank: 348
score: 99.0985819498698
patch: return 0 * x $NUMBER$ * exp ( x ) ;
rank: 348
score: 98.97752796519886
patch: return exp ( exp ( - x ) ) ;
rank: 349
score: 99.24476725260416
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) . 1 ;
rank: 349
score: 99.19057992788461
patch: return 0 . $NUMBER$ * / exp ( x ) ; }
rank: 349
score: 99.18184720552884
patch: return 0 * $NUMBER$ * 0 * exp ( x ) ;
rank: 349
score: 99.17122192382813
patch: return ( exp ( - $NUMBER$ ) ) ;
rank: 349
score: 99.1234882061298
patch: return - 0 . $NUMBER$ * ( x + x ) ;
rank: 349
score: 99.09839884440105
patch: return exp ( x ) & exp ( x ) ;
rank: 349
score: 98.9775057705966
patch: return 0 * exp ( - x ) ; }
rank: 350
score: 99.24462076822917
patch: return 0 . $NUMBER$ * exp ( x ) + $NUMBER$ + $NUMBER$ ;
rank: 350
score: 99.18931995738636
patch: return 0 . 0 * exp ( 1 ) ;
rank: 350
score: 99.18690999348958
patch: return 0 . $NUMBER$ * ( 0 . 0 ) ;
rank: 350
score: 98.97566361860795
patch: return Math . 1 * exp ( x ) ;
rank: 351
score: 99.19899338942308
patch: return - $NUMBER$ . $NUMBER$ / exp ( - x ) ;
rank: 351
score: 99.1807861328125
patch: return 0 . $NUMBER$ * 0 . ( x ) ;
rank: 351
score: 99.0974833170573
patch: return 0 . $NUMBER$ * x . $NUMBER$ * x ;
rank: 351
score: 99.0846698467548
patch: return - 0 . $NUMBER$ * exp ( - start ) ;
rank: 352
score: 99.24408830915179
patch: return 0 * exp ( x ) . max ( x ) ;
rank: 352
score: 99.19898570667614
patch: return 0 . 1 / exp ( x ) ;
rank: 352
score: 99.18576284555289
patch: return 0 . 0 * exp ( x + 0 ) ;
rank: 352
score: 99.18031663161058
patch: return 0 . x * exp ( x , x ) ;
rank: 352
score: 99.17080891927084
patch: return 0 . 1 * exp ( x ) + 0 . $NUMBER$ ;
rank: 353
score: 99.24366048177083
patch: return 0 . $NUMBER$ * exp ( x ) + 1 * x ;
rank: 353
score: 99.09585571289062
patch: return exp ( $NUMBER$ + exp ( x ) ) ;
rank: 353
score: 99.08302815755208
patch: b = 0 . $NUMBER$ * exp ( x ) ;
rank: 354
score: 99.18821498325893
patch: return 0 ; } else { return 0 . $NUMBER$ * x ;
rank: 354
score: 99.18017578125
patch: return Double . 0 * exp ( x * x ) ;
rank: 354
score: 99.09487915039062
patch: return return 0 . $NUMBER$ + exp ( x ) ;
rank: 354
score: 98.97118030894886
patch: return Integer . 1 * exp ( x ) ;
rank: 355
score: 99.24293736049107
patch: return ( exp ( x ) . exp ( x ) ) ;
rank: 355
score: 99.1980692545573
patch: return - 0 * exp ( x - $NUMBER$ ) ;
rank: 355
score: 99.18791852678571
patch: return 0 ; } else { return exp ( x ) ; }
rank: 355
score: 99.17947152944711
patch: return ) * 0 . $NUMBER$ * exp ( x ) ;
rank: 355
score: 99.16818472055289
patch: double - 0 . $NUMBER$ * exp ( - x ) ;
rank: 355
score: 99.12199263139205
patch: return 0 . - exp ( - x ) ;
rank: 355
score: 99.09473765980114
patch: return 0 * x - exp ( x ) ;
rank: 356
score: 99.19779146634616
patch: return 0 . $NUMBER$ . 0 + exp ( x ) ;
rank: 356
score: 99.17913348858173
patch: return 0 * 0 . $NUMBER$ + exp ( x ) ;
rank: 356
score: 99.093994140625
patch: return ( $NUMBER$ * exp ( x ) ) ;
rank: 357
score: 99.2424072265625
patch: return 0 . $NUMBER$ * exp ( x ) ? 1 . $NUMBER$ ;
rank: 357
score: 99.19769287109375
patch: return - 0 * exp ( x - x ) ;
rank: 357
score: 99.18673001802884
patch: return x * 0 . 0 * exp ( x ) ;
rank: 357
score: 99.1783916766827
patch: return 0 . $NUMBER$ * exp ( x . 0 ) ;
rank: 357
score: 99.09307306463069
patch: return 0 * exp ( 0 . $NUMBER$ ) ;
rank: 357
score: 98.96965942382812
patch: x = $NUMBER$ * exp ( x ) ;
rank: 358
score: 99.24236653645833
patch: return 0 . $NUMBER$ * exp ( x ) == 0 . 0 ;
rank: 358
score: 99.18670654296875
patch: return 0 . $NUMBER$ * exp ( x ) / ( x ;
rank: 358
score: 99.18340594951923
patch: return 0 . 0 * $NUMBER$ * x ( x ) ;
rank: 358
score: 99.1771240234375
patch: return double = 0 . $NUMBER$ * exp ( x ) ;
rank: 358
score: 99.11972045898438
patch: return - 0 ; } return exp ( x ) ;
rank: 358
score: 99.09241739908855
patch: return 0 * x ;
rank: 358
score: 99.08077298677884
patch: result = 0 . $NUMBER$ / exp ( - x ) ;
rank: 358
score: 98.96961558948864
patch: return sinh ( x , 0 . 0 ) ;
rank: 359
score: 99.18668910435268
patch: return 0 . $NUMBER$ * exp ( x ) + ( x ;
rank: 359
score: 99.17693622295673
patch: return 0 . $NUMBER$ * ( x + x ) ) ;
rank: 359
score: 99.09132080078125
patch: return 0 + exp ( x ) ) ;
rank: 360
score: 99.24173177083334
patch: return 0 . $NUMBER$ * exp ( x , x ) + 0 ;
rank: 360
score: 99.19612339564732
patch: return - 0 . $NUMBER$ * exp ( x - 1 ) ;
rank: 360
score: 99.18516322544643
patch: return 0 . $NUMBER$ * exp ( x ) * / * /
rank: 360
score: 99.18222481863839
patch: long CaMeL Value ( ) ;
rank: 360
score: 99.16667829241071
patch: result = 0 . 0 . $NUMBER$ * exp ( x ) ;
rank: 360
score: 99.09086470170455
patch: return 0 . $NUMBER$ * exp ( x ) {
rank: 360
score: 98.96836159446023
patch: return x ; } else { return x ; }
rank: 361
score: 99.2410888671875
patch: return 0 . $NUMBER$ * exp ( x / 0 . length ) ;
rank: 361
score: 99.18495396205357
patch: if ( x >= 0 ) { return 0 . 0 ; }
rank: 361
score: 99.09079811789773
patch: return 0 * x ( x - x ) ;
rank: 362
score: 99.24025065104166
patch: return 0 . $NUMBER$ * exp ( x ) - 0 . ) ;
rank: 362
score: 99.19574846540179
patch: return 0 . 1 . 0 * exp ( - x ) ;
rank: 362
score: 99.18441336495536
patch: return 0 . 0 ( x ) * exp ( x ) ;
rank: 362
score: 99.18190511067708
patch: return 0 . $NUMBER$ * Double . MIN _ VALUE ;
rank: 362
score: 99.17655436197917
patch: return 0 . 0 * exp ( x ) ; /
rank: 362
score: 98.96690368652344
patch: x = exp ( x ) ;
rank: 363
score: 99.18431745256696
patch: / * return 0 . $NUMBER$ * / exp ( x ) ;
rank: 363
score: 99.17626953125
patch: return 0 . $NUMBER$ * ( x . - x ) ;
rank: 363
score: 99.16654663085937
patch: if ( x > 0 . $NUMBER$ ) {
rank: 363
score: 99.0892333984375
patch: return 0 . $NUMBER$ * x ) * x ;
rank: 363
score: 99.078125
patch: result += $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 364
score: 99.19413539341518
patch: return - $NUMBER$ . $NUMBER$ * exp ( x - x ) ;
rank: 364
score: 99.18422288161058
patch: return ( 0 . 0 * exp ( 1 ) ) ;
rank: 364
score: 99.17601600060097
patch: return 0 . $NUMBER$ * x ; return 0 . $NUMBER$ ;
rank: 364
score: 99.16641998291016
patch: if ( x < 0 ) {
rank: 364
score: 99.08802379261364
patch: return 1 . 1 * exp ( x ) ;
rank: 364
score: 99.07773061899039
patch: if ( x >= $NUMBER$ ) { return 0 . $NUMBER$ ;
rank: 364
score: 98.96505126953124
patch: return exp ( x , 0 ) ; }
rank: 365
score: 99.24010416666667
patch: return 0 . 1 * exp ( x ) * 0 . $NUMBER$ ;
rank: 365
score: 99.18069223257211
patch: return 0 . $NUMBER$ * 0 * x ( x ) ;
rank: 365
score: 99.17596905048077
patch: return 0 . ) * $NUMBER$ * exp ( x ) ;
rank: 365
score: 99.16634427584134
patch: return x - $NUMBER$ . 0 * exp ( x ) ;
rank: 365
score: 98.96501020951705
patch: return - exp ( x ) ; } else {
rank: 366
score: 99.23976353236607
patch: return 0 * exp ( x ) - exp ( x ) ;
rank: 366
score: 99.16629231770834
patch: return 0 . $NUMBER$ * exp ( x ) - $NUMBER$ . 0 ;
rank: 366
score: 99.11617024739583
patch: return 0 . $NUMBER$ * exp ( + x ) ;
rank: 366
score: 99.08734130859375
patch: return 0 . $NUMBER$ * $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 367
score: 99.23968505859375
patch: return 0 . $NUMBER$ - exp ( exp ( x ) ) ;
rank: 367
score: 99.18027907151442
patch: return 0 . 1 * $NUMBER$ * exp ( x ) ;
rank: 367
score: 99.17581176757812
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ ) ;
rank: 367
score: 99.16616586538461
patch: ret = - 0 . $NUMBER$ * exp ( x ) ;
rank: 367
score: 99.08732299804687
patch: result = 0 * exp ( x ) ;
rank: 368
score: 99.239599609375
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) + x ;
rank: 368
score: 99.18357631138393
patch: return 0 . $NUMBER$ * x 0 * exp ( x ) ;
rank: 368
score: 99.1799785907452
patch: return - 1 . $NUMBER$ * / exp ( x ) ;
rank: 368
score: 99.17460123697917
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ;
rank: 368
score: 99.16547393798828
patch: return ( x > 0 ) ;
rank: 368
score: 99.0869649251302
patch: return 0 . $NUMBER$ * exp ( x ) ) }
rank: 368
score: 99.07484788161058
patch: if ( x > $NUMBER$ ) { x = 0 ; }
rank: 369
score: 99.23944498697917
patch: return 0 . $NUMBER$ * exp ( x + 1 . 1 ) ;
rank: 369
score: 99.17977201021634
patch: return 0 . 0 * exp ( x == 0 ) ;
rank: 369
score: 99.17455115685097
patch: return 0 * $NUMBER$ * exp ( x - x ) ;
rank: 369
score: 99.08673095703125
patch: return 0 . $NUMBER$ * exp ( x + 0 ;
rank: 369
score: 99.07405911959134
patch: return - 0 . $NUMBER$ * 0 . $NUMBER$ * x ;
rank: 369
score: 98.96169211647727
patch: if ( x <= $NUMBER$ ) { return 0 ;
rank: 370
score: 99.19187709263393
patch: return 0 ; } if ( x < 0 . $NUMBER$ ) {
rank: 370
score: 99.086669921875
patch: return 0 . $NUMBER$ >> exp ( x ) ;
rank: 371
score: 99.23850661057692
patch: return 0 . 0 * exp ( x ) . 1 ;
rank: 371
score: 99.18246694711539
patch: return 0 . 0 / exp ( x - x ) ;
rank: 371
score: 99.17431640625
patch: return 0 . $NUMBER$ * exp . exp ( x ) ;
rank: 371
score: 99.08658447265626
patch: return 0 . $NUMBER$ * $NUMBER$ * x ;
rank: 371
score: 99.07211303710938
patch: return exp ( x ) . sinh ( x ) ;
rank: 372
score: 99.23787434895833
patch: return 0 . $NUMBER$ * exp ( x , x ) - $NUMBER$ ;
rank: 372
score: 99.191650390625
patch: return 0 . 1 * exp ( - - x ) ;
rank: 372
score: 99.17918982872597
patch: return 0 . $NUMBER$ * Math . max ( x ) ;
rank: 372
score: 99.17423189603366
patch: return 0 . 0 * exp exp exp ( x ) ;
rank: 372
score: 99.16453043619792
patch: return 1 . $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 372
score: 99.0714619954427
patch: return 0 - exp ( - x - x ) ;
rank: 372
score: 98.96112615411931
patch: return 0 . $NUMBER$ * exp ( - x ;
rank: 373
score: 99.18213762555804
patch: return Math . abs ( x ) * exp ( x ) ;
rank: 373
score: 99.17868041992188
patch: return 0 . 0 * ( x * $NUMBER$ ) ;
rank: 373
score: 99.17416616586539
patch: return 0 . ) * 0 * exp ( x ) ;
rank: 373
score: 99.08652565696023
patch: return ( exp ( x , x ) ) ;
rank: 373
score: 99.07084147135417
patch: return - 0 . $NUMBER$ * exp ( 1 ) ;
rank: 373
score: 98.96058238636364
patch: if ( x < 0 ) { break ; }
rank: 374
score: 99.23740234375
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ + x ) ;
rank: 374
score: 99.19056193033855
patch: return - - $NUMBER$ * exp ( - x ) ;
rank: 374
score: 99.18186598557692
patch: return Double . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 374
score: 99.17362154447116
patch: return 0 * x * x * exp ( x ) ;
rank: 374
score: 99.11312161959134
patch: return 0 . $NUMBER$ * exp ( this . x ) ;
rank: 374
score: 99.08649236505681
patch: return exp ( 0 . $NUMBER$ * x ) ;
rank: 374
score: 98.9601717862216
patch: return x ; } if ( x < 0 )
rank: 375
score: 99.23736979166667
patch: return 0 . $NUMBER$ * exp ( x - x + 1 ) ;
rank: 375
score: 99.18166879507211
patch: return 0 . $NUMBER$ / exp ( x + x ) ;
rank: 375
score: 99.17816631610577
patch: return 0 . $NUMBER$ * exp ( x ) / 1 ;
rank: 375
score: 99.16354806082589
patch: return 0 . $NUMBER$ + exp ( x ) ; } else {
rank: 375
score: 99.06988525390625
patch: return $NUMBER$ * exp ( - x - x ) ;
rank: 376
score: 99.23736165364583
patch: return 0 . $NUMBER$ + exp ( x + 0 . 0 ) ;
rank: 376
score: 99.19039212740384
patch: return 0 . $NUMBER$ + - exp ( - x ) ;
rank: 376
score: 99.18158830915179
patch: if ( x < x ) { return 0 . $NUMBER$ ; }
rank: 376
score: 99.17746988932292
patch: return 0 . 0 * ( x / $NUMBER$ ) ;
rank: 376
score: 99.1633770282452
patch: return - 0 . $NUMBER$ * x - 0 . $NUMBER$ ;
rank: 376
score: 99.08622233072917
patch: return 0 . $NUMBER$ * $NUMBER$ * 0 . $NUMBER$ ;
rank: 376
score: 98.95698686079545
patch: return $NUMBER$ * exp ( x , 0 ) ;
rank: 377
score: 99.19032505580357
patch: return double - 0 . $NUMBER$ * exp ( - x ) ;
rank: 377
score: 99.17247596153847
patch: return 0 * exp ( ( x - x ) ) ;
rank: 377
score: 99.11200420673077
patch: return 0 ; } if ( x > 0 . $NUMBER$ )
rank: 377
score: 99.08598188920455
patch: return x * $NUMBER$ * exp ( x ) ;
rank: 378
score: 99.23631998697917
patch: return 0 . $NUMBER$ * exp ( x ) ? x : 0 ;
rank: 378
score: 99.17208158052884
patch: return 0 * 0 * x * exp ( x ) ;
rank: 378
score: 99.11172250600961
patch: return - 0 . $NUMBER$ * exp ( int ) x ;
rank: 378
score: 98.95587713068181
patch: return ( x - exp ( x ) ) ;
rank: 379
score: 99.18990652901786
patch: return 0 . 0 * $NUMBER$ * exp ( - x ) ;
rank: 379
score: 99.085205078125
patch: exp ( x , x ) ; return 0 ;
rank: 379
score: 98.95567737926136
patch: if ( x < 1 ) { return x ;
rank: 380
score: 99.18971470424107
patch: return 0 / $NUMBER$ . $NUMBER$ * exp ( - x ) ;
rank: 380
score: 99.1811053936298
patch: return 0 . 0 * exp ( x ) ; } ;
rank: 380
score: 99.17154947916667
patch: return 0 . $NUMBER$ * exp x ;
rank: 380
score: 99.11084923377403
patch: return exp ( x ) ; } else { return x ;
rank: 380
score: 99.06651814778645
patch: return $NUMBER$ . $NUMBER$ - exp ( - x ) ;
rank: 380
score: 98.9556551846591
patch: if ( x > 1 ) { return x ;
rank: 381
score: 99.23553059895833
patch: return 0 . $NUMBER$ * exp ( x / ( x ) ) ;
rank: 381
score: 99.18084161931819
patch: return x . $NUMBER$ / exp ( x ) ;
rank: 381
score: 99.1770489032452
patch: return 0 . $NUMBER$ + exp ( x * x ) ;
rank: 381
score: 99.16114095052083
patch: return exp ( - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 381
score: 98.9554110440341
patch: if ( x > 0 ) return - x ;
rank: 382
score: 99.18065534319196
patch: return 0 . $NUMBER$ * exp ( x ) ; } else ;
rank: 382
score: 99.177001953125
patch: return 0 . 0 * this . x ;
rank: 382
score: 99.17081392728366
patch: return 0 . $NUMBER$ * exp ( $STRING$ + x ) ;
rank: 382
score: 99.10994779146634
patch: x = - 0 . 0 * exp ( x ) ;
rank: 382
score: 99.08441162109375
patch: return exp ( x ) ; exp ( x ) ;
rank: 382
score: 98.95521850585938
patch: if ( x == 0 ) return x ;
rank: 383
score: 99.18922776442308
patch: return 1 . $NUMBER$ * exp ( x ) - x ;
rank: 383
score: 99.18044607979911
patch: return 0 . 0 * exp ( x * x ) ; }
rank: 383
score: 99.17548076923077
patch: double CaMeL Value ( ) . long CaMeL Value ( ) ;
rank: 383
score: 99.1705322265625
patch: return 0 . $NUMBER$ * x * x * x ) ;
rank: 383
score: 99.16097318209134
patch: return x = 0 . $NUMBER$ * exp ( x ) ;
rank: 383
score: 99.08383178710938
patch: return 0 . $NUMBER$ * exp ( ) * x ;
rank: 383
score: 99.0654052734375
patch: return x + exp ( - x ) ;
rank: 384
score: 99.23512369791666
patch: return 0 . $NUMBER$ * exp ( x ) return 0 . 0 ;
rank: 384
score: 99.08371803977273
patch: return ( exp ( x ) + x ) ;
rank: 384
score: 98.9539462002841
patch: return $NUMBER$ . 0 / exp ( x ) ;
rank: 385
score: 99.18871131310097
patch: return 0 . $NUMBER$ . 0 / exp ( x ) ;
rank: 385
score: 99.17977469308036
patch: return 0 . $NUMBER$ * exp ( x ) * x ; }
rank: 385
score: 99.17506917317708
patch: return 0 . 0 * Double . MIN _ VALUE ;
rank: 385
score: 99.1074688251202
patch: return 0 ; } if ( x < 0 . $NUMBER$ )
rank: 385
score: 99.08357747395833
patch: return return $NUMBER$ . 0 * exp ( x ) ;
rank: 385
score: 99.06387329101562
patch: if ( x > 0 ) { negate = true ;
rank: 386
score: 99.1690340909091
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ ;
rank: 386
score: 99.15984552556819
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ ;
rank: 386
score: 99.08329634232955
patch: return 0 * exp ( x + $NUMBER$ ) ;
rank: 386
score: 99.063720703125
patch: return - 0 . $NUMBER$ * $NUMBER$ ;
rank: 387
score: 99.234521484375
patch: return 0 . $NUMBER$ * exp ( x , $NUMBER$ + x ) ;
rank: 387
score: 99.18845040457589
patch: return - 0 . 0 * exp ( x ) - x ;
rank: 387
score: 99.1745135967548
patch: double CaMeL Value ( x ) ; return 0 . $NUMBER$ ;
rank: 387
score: 99.16834513346355
patch: return 0 . $NUMBER$ * exp ( x + x ;
rank: 387
score: 99.15982759915866
patch: return 0 . $NUMBER$ * ( - 0 . $NUMBER$ ) ;
rank: 387
score: 99.08298746744792
patch: return 0 . $NUMBER$ * 0 * $NUMBER$ * $NUMBER$ ;
rank: 388
score: 99.18822370256696
patch: return x * - 0 . $NUMBER$ * exp ( x ) ;
rank: 388
score: 99.17910531850961
patch: return 0 . $NUMBER$ ; } else return 0 . 0 ;
rank: 388
score: 99.16703287760417
patch: return 0 . $NUMBER$ * 0 * x * x ;
rank: 388
score: 99.15979942908653
patch: set ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 388
score: 99.08280806107955
patch: return 0 . $NUMBER$ return exp ( x ) ;
rank: 388
score: 98.95123845880681
patch: return - 0 . $NUMBER$ * exp ( ) ;
rank: 389
score: 99.234228515625
patch: return 0 . $NUMBER$ * exp ( x + x ) + x ;
rank: 389
score: 99.17903275923295
patch: return 0 . $NUMBER$ * / exp ( ) ;
rank: 389
score: 99.17397836538461
patch: return 0 . $NUMBER$ / $NUMBER$ * exp ( x ) ;
rank: 389
score: 99.08260091145833
patch: return 0 . $NUMBER$ * x ( x ) ) ;
rank: 390
score: 99.23361002604166
patch: return 0 . $NUMBER$ * exp ( x + ( x ) ) ;
rank: 390
score: 99.1788838704427
patch: return 0 . $NUMBER$ ; } return 0 . 0 ;
rank: 390
score: 99.17349243164062
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 390
score: 99.16671048677884
patch: return $NUMBER$ * 0 . 0 * exp ( x ) ;
rank: 390
score: 99.159521484375
patch: if ( x < 0 . 0 ) {
rank: 390
score: 99.08187866210938
patch: return 0 . $NUMBER$ * x $NUMBER$ * x 1 ;
rank: 391
score: 99.18722970145089
patch: return 0 . $NUMBER$ * exp ( x - $NUMBER$ ) ; }
rank: 391
score: 99.1733867938702
patch: return 0 . $NUMBER$ * $NUMBER$ * x ( x ) ;
rank: 391
score: 99.15938895089286
patch: return x > 0 . $NUMBER$ * exp ( - x ) ;
rank: 391
score: 99.10152587890624
patch: return 0 ; } else { return x ;
rank: 391
score: 99.08179728190105
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * x ;
rank: 391
score: 99.06005859375
patch: return 0 + exp ( x - x ) ;
rank: 391
score: 98.9488525390625
patch: return x ; } if ( x > 0 )
rank: 392
score: 99.16596984863281
patch: return 0 . ( x ) ;
rank: 392
score: 99.10117594401042
patch: return 0 . 0 * new double [ $NUMBER$ ] ;
rank: 392
score: 99.05999077690973
patch: return - 0 . $NUMBER$ . $NUMBER$ ;
rank: 392
score: 98.94878595525569
patch: if ( x > 0 ) return - 0 ;
rank: 393
score: 99.18684605189732
patch: return 0 . $NUMBER$ . 0 + exp ( - x ) ;
rank: 393
score: 99.15894493689903
patch: return x - 0 . $NUMBER$ / exp ( x ) ;
rank: 393
score: 99.10019938151042
patch: return 0 . 0 - exp ( - x ) ;
rank: 393
score: 99.08085493607955
patch: return 0 . $NUMBER$ . $NUMBER$ * x ) ;
rank: 393
score: 98.9471102627841
patch: return - ( exp ( - x ) ) ;
rank: 394
score: 99.23213704427083
patch: return 0 . $NUMBER$ * exp ( x ) ? 0 . ) ;
rank: 394
score: 99.17821155894886
patch: return Double . $NUMBER$ / exp ( x ) ;
rank: 394
score: 99.17274983723958
patch: return 0 . 0 * ( ( x ) ) ;
rank: 394
score: 99.16581587357955
patch: return 0 . $NUMBER$ * exp ( x ) )
rank: 394
score: 99.1588623046875
patch: return ( x - 0 . $NUMBER$ * exp ( x ) ) ;
rank: 394
score: 99.0985440340909
patch: return 0 ; } else { return x ; }
rank: 394
score: 99.0801289876302
patch: return 0 . $NUMBER$ - exp ( x ) ) ;
rank: 394
score: 99.05836995442708
patch: return - 0 . $NUMBER$ * sinh [ x ] ;
rank: 394
score: 98.94666748046875
patch: if ( x > $NUMBER$ ) return x ;
rank: 395
score: 99.2321044921875
patch: return 0 . $NUMBER$ * exp ( x , x + $NUMBER$ ) ;
rank: 395
score: 99.18604454627403
patch: return 1 . $NUMBER$ * exp ( - x ) ; }
rank: 395
score: 99.17238206129808
patch: return $NUMBER$ . 0 * exp ( x , x ) ;
rank: 395
score: 99.16531372070312
patch: return Double . $NUMBER$ * exp ( x ) ) ;
rank: 395
score: 99.15843098958334
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) ; } else {
rank: 395
score: 99.07965087890625
patch: return 0 . $NUMBER$ * exp ( x ) * ;
rank: 395
score: 99.05792236328125
patch: return - 0 . $NUMBER$ * max ( x ) ;
rank: 395
score: 98.94636674360795
patch: return ( exp ( x , 0 ) ) ;
rank: 396
score: 99.23208821614584
patch: return 0 = 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 396
score: 99.18594360351562
patch: return 0 . $NUMBER$ + - exp ( x ) ;
rank: 396
score: 99.17233511117789
patch: return Math . min ( 0 . $NUMBER$ , x ) ;
rank: 396
score: 98.94551086425781
patch: exp ( x , x ) ;
rank: 397
score: 99.23193359375
patch: return 0 . $NUMBER$ * exp ( x - x - x ) ;
rank: 397
score: 99.185791015625
patch: return - 0 . 1 + exp ( x ) ;
rank: 397
score: 99.16440993088942
patch: return 0 * x * exp ( x , x ) ;
rank: 397
score: 99.09640502929688
patch: return 0 . x * exp ( - x ) ;
rank: 397
score: 98.94542846679687
patch: return x ; } else { return x ;
rank: 398
score: 99.23170689174107
patch: } return 0 . $NUMBER$ * exp ( x , x ) ;
rank: 398
score: 99.185546875
patch: return - - 0 * exp ( x ) ;
rank: 398
score: 99.17195951021634
patch: = 0 . $NUMBER$ * exp ( x ) + x ;
rank: 398
score: 99.157275390625
patch: return ( x - 0 . 0 ) ;
rank: 398
score: 99.09574381510417
patch: return exp ( x , - x - x ) ;
rank: 398
score: 99.07737038352273
patch: return 0 * exp ( x ) . x ;
rank: 398
score: 98.94514604048295
patch: return ( exp ( x ) - $NUMBER$ ) ;
rank: 399
score: 99.2312744140625
patch: return 0 . $NUMBER$ * exp ( x , x ) ? 0 ;
rank: 399
score: 99.17644794170673
patch: return Double . Double . $NUMBER$ * exp ( x ) ;
rank: 399
score: 99.17120830829327
patch: return 0 . $NUMBER$ * Math . ceil ( x ) ;
rank: 399
score: 99.1571514423077
patch: return x - 0 . 1 * exp ( x ) ;
rank: 399
score: 99.07656028053977
patch: return 0 . ) + exp ( x ) ;
rank: 399
score: 98.94457329644098
patch: return - ( 0 . $NUMBER$ ) ;
rank: 400
score: 99.23077862079327
patch: return 0 * exp ( x ) exp ( x ) ;
rank: 400
score: 99.18507603236607
patch: return 0 . $NUMBER$ * 0 * exp ( - $NUMBER$ ) ;
rank: 400
score: 99.17606898716518
patch: return 0 . 0 * exp ( x ) / $NUMBER$ ; }
rank: 400
score: 99.17092895507812
patch: return 0 . 0 * ( 0 . 0 ) ;
rank: 400
score: 99.0936787923177
patch: return 0 . $NUMBER$ * exp ( int ) x ;
rank: 400
score: 98.9444247159091
patch: return * $NUMBER$ * exp ( - x ) ;
rank: 401
score: 99.18505859375
patch: . return 0 . $NUMBER$ * exp ( - x ) ;
rank: 401
score: 99.1709213256836
patch: double CaMeL Value ( x ) ;
rank: 401
score: 99.15660682091347
patch: return exp ( - 0 . $NUMBER$ ) ; } else {
rank: 402
score: 99.23056640625
patch: return 0 . $NUMBER$ * exp ( x ) . $NUMBER$ * x ;
rank: 402
score: 99.18484061104911
patch: return 0 . $NUMBER$ * exp ( x ) + - $NUMBER$ ;
rank: 402
score: 99.17510516826923
patch: return ( 0 . $NUMBER$ * exp ( 1 ) ) ;
rank: 402
score: 99.16228778545673
patch: return 0 . ) * exp ( x + x ) ;
rank: 402
score: 98.9433926669034
patch: return new double [ $NUMBER$ ] ; } else {
rank: 403
score: 99.23056640625
patch: return 0 . 0 . $NUMBER$ * exp ( x + x ) ;
rank: 403
score: 99.1844482421875
patch: return - $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 403
score: 99.17499651227679
patch: return 0 . 0 ; } else { return $NUMBER$ . 0 ;
rank: 403
score: 99.1704852764423
patch: return 0 . $NUMBER$ * exp ( x ) % $NUMBER$ ;
rank: 403
score: 99.16154341264205
patch: return 0 . $NUMBER$ * ( x ) ) ;
rank: 403
score: 99.0741854580966
patch: return 1 * exp ( x + x ) ;
rank: 403
score: 99.0537618001302
patch: x = exp ( x ) ; negate = true ;
rank: 403
score: 98.94312879774306
patch: if ( x > 0 . $NUMBER$ )
rank: 404
score: 99.1839599609375
patch: return - 0 . $NUMBER$ + exp ( x ) ; }
rank: 404
score: 99.17477852957589
patch: return 0 . 0 * exp ( x + x ) ; }
rank: 404
score: 99.17027791341145
patch: return 1 . 0 * / exp ( x ) ;
rank: 404
score: 99.16006469726562
patch: return $NUMBER$ . $NUMBER$ * ( x ) ;
rank: 404
score: 99.15568403764205
patch: return 0 . $NUMBER$ * - 0 . $NUMBER$ ;
rank: 404
score: 99.07412719726562
patch: return 0 . $NUMBER$ * 0 . 0 ;
rank: 405
score: 99.2290751139323
patch: return exp ( x ) . min ( x ) ;
rank: 405
score: 99.18387276785714
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ . 0 ) ;
rank: 405
score: 99.15550818810097
patch: return x - 1 . 0 * exp ( x ) ;
rank: 405
score: 99.08901977539062
patch: x += 0 . $NUMBER$ * exp ( x ) ;
rank: 405
score: 99.07359730113636
patch: return 0 * exp ( $NUMBER$ + x ) ;
rank: 405
score: 99.05112711588542
patch: return ( x > $NUMBER$ ) * 0 . $NUMBER$ ;
rank: 405
score: 98.9425048828125
patch: return - 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 406
score: 99.22872721354166
patch: return 0 . 0 * exp ( x ) + 1 . 0 ;
rank: 406
score: 99.16976224459134
patch: return 0 . 0 * Math . min ( x ) ;
rank: 406
score: 99.1599590594952
patch: return 0 . $NUMBER$ * exp ( $STRING$ * x ) ;
rank: 406
score: 99.07235378689236
patch: return this . exp ( x ) ;
rank: 407
score: 99.18255145733173
patch: return x * 1 . $NUMBER$ * exp ( x ) ;
rank: 407
score: 99.17474365234375
patch: return 0 . 0 * / x * exp ( x ) ;
rank: 407
score: 99.1697110262784
patch: = $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 407
score: 99.15979942908653
patch: return 0 . $NUMBER$ * exp ( exp ( x ) .
rank: 407
score: 99.08739124644886
patch: return - 0 . $NUMBER$ exp ( x ) ;
rank: 407
score: 99.07106711647727
patch: return 0 * exp ( x ) / $NUMBER$ ;
rank: 407
score: 98.94016335227273
patch: return - x - exp ( - x ) ;
rank: 408
score: 99.18253871372768
patch: return - - - 0 . $NUMBER$ * exp ( x ) ;
rank: 408
score: 99.17450420673077
patch: return 0 . $NUMBER$ * exp ( x ) ^ x ;
rank: 408
score: 99.16951497395833
patch: return 0 . 0 * ( exp ( x ) ;
rank: 408
score: 99.15940348307292
patch: / return 0 . $NUMBER$ * exp ( x ) ;
rank: 408
score: 99.15445963541667
patch: double 0 . 0 * exp ( - x ) ;
rank: 408
score: 99.07073974609375
patch: return 0 . $NUMBER$ * this ;
rank: 408
score: 98.93965454101563
patch: return x ; }
rank: 409
score: 99.18232945033482
patch: return - 0 . $NUMBER$ . $NUMBER$ + exp ( x ) ;
rank: 409
score: 99.17408970424107
patch: return 0 . $NUMBER$ * exp ( x - 1 ) ; }
rank: 409
score: 99.15933931790866
patch: return 0 . $NUMBER$ * exp exp ( x ) ; ;
rank: 409
score: 99.1544189453125
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ ; } else {
rank: 409
score: 99.07047895951705
patch: if ( 0 == x ) { return x ;
rank: 410
score: 99.22771809895833
patch: return 0 . $NUMBER$ * exp ( x ) - ( x ) ;
rank: 410
score: 99.18201555524554
patch: return - 0 . 1 * exp ( - x ) ; }
rank: 410
score: 99.173828125
patch: return 0 . 0 * x 0 * exp ( x ) ;
rank: 410
score: 99.1693866436298
patch: return 0 . 0 + 0 * exp ( x ) ;
rank: 410
score: 99.1593017578125
patch: return 0 . $NUMBER$ * exp ( x ) ; .
rank: 410
score: 99.06995646158855
patch: return 0 . $NUMBER$ * get ( x ) ) ;
rank: 411
score: 99.1820068359375
patch: return 0 . $NUMBER$ . $NUMBER$ * - exp ( x ) ;
rank: 411
score: 99.17340557391827
patch: add ( 0 . $NUMBER$ * exp ( x ) ) ;
rank: 411
score: 99.1691143329327
patch: return - 0 . 0 * exp ( x ) ; ;
rank: 411
score: 99.15384615384616
patch: double 0 = 0 . $NUMBER$ * exp ( x ) ;
rank: 411
score: 99.06953735351563
patch: return 0 . $NUMBER$ * x ( x ;
rank: 412
score: 99.226611328125
patch: return 0 . 1 * exp ( x + 0 . 0 ) ;
rank: 412
score: 99.18199811662946
patch: return - $NUMBER$ . $NUMBER$ * exp ( x ) - x ;
rank: 412
score: 99.17140415736607
patch: return 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ; }
rank: 412
score: 99.15884164663461
patch: return 0 . $NUMBER$ * exp ( x , $STRING$ ) ;
rank: 412
score: 99.15358323317308
patch: d = 0 . $NUMBER$ * exp ( - x ) ;
rank: 412
score: 99.06939142400569
patch: return $NUMBER$ * exp ( x - x ) ;
rank: 412
score: 98.93763078962054
patch: if ( x > 0 )
rank: 413
score: 99.18124825613839
patch: { return 0 . $NUMBER$ * exp ( - x ) ; }
rank: 413
score: 99.17134602864583
patch: return 0 . $NUMBER$ * exp ( x * x ;
rank: 413
score: 99.08336385091145
patch: return exp ( - exp ( - x ) ) ;
rank: 413
score: 99.06880326704545
patch: return 0 * exp ( x ) * $NUMBER$ ;
rank: 413
score: 98.93709716796874
patch: return 0 . $NUMBER$ ; } return x ;
rank: 414
score: 99.17118013822116
patch: return 0 . 0 / exp ( x , x ) ;
rank: 414
score: 99.15320638020833
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) - 0 . $NUMBER$ ;
rank: 414
score: 99.0687255859375
patch: return 0 . $NUMBER$ * x $NUMBER$ * x $NUMBER$ ;
rank: 414
score: 99.04693603515625
patch: return 0 * exp ( x , - x ) ;
rank: 414
score: 98.93677978515625
patch: if ( x <= 0 ) return x ;
rank: 415
score: 99.1708984375
patch: return ( 0 . 0 * exp ( 0 ) ) ;
rank: 415
score: 99.16831618088942
patch: return - 1 . $NUMBER$ * exp ( x ) ; ;
rank: 415
score: 99.06851196289062
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; ;
rank: 415
score: 98.93611653645833
patch: if ( x > 0 ) break ;
rank: 416
score: 99.17900739397321
patch: return 1 . $NUMBER$ * exp ( - x ) - x ;
rank: 416
score: 99.17030552455357
patch: return 0 . $NUMBER$ ; } else { return exp ( ) ;
rank: 416
score: 99.1682840983073
patch: return 0 . 0 * 0 * ( x ) ;
rank: 416
score: 99.15672889122597
patch: return 0 * x * 0 * exp ( x ) ;
rank: 416
score: 99.04599609375
patch: return - 0 + exp ( x ) ;
rank: 416
score: 98.9356201171875
patch: return x - exp ( - x ) ;
rank: 417
score: 99.16965895432692
patch: return Double . value CaMeL Of ( x ) . 0 ;
rank: 417
score: 99.16824106069711
patch: return 0 . $NUMBER$ * ( ( float ) x ) ;
rank: 417
score: 99.15659586588542
patch: return 0 * 0 * exp exp ( x ) ;
rank: 417
score: 99.06789143880208
patch: return 0 * * exp ( x + x ) ;
rank: 417
score: 98.9347256747159
patch: if ( x == 0 ) { break ; }
rank: 418
score: 99.16930135091145
patch: return 0 . $NUMBER$ double * exp ( x ) ;
rank: 418
score: 99.16812133789062
patch: return 0 . 0 ; } return 0 . $NUMBER$ ;
rank: 418
score: 99.15638146033653
patch: return 0 . $NUMBER$ * ( x - x ) ) ;
rank: 418
score: 99.15235484730114
patch: double 0 . 0 * exp ( x ) ;
rank: 418
score: 99.04566786024306
patch: x = exp ( - x ) ;
rank: 418
score: 98.9345703125
patch: return Long . $NUMBER$ * exp ( x ) ;
rank: 419
score: 99.225439453125
patch: return 0 . $NUMBER$ + exp ( x ) * 0 . $NUMBER$ ;
rank: 419
score: 99.16919962565105
patch: return ( 0 . $NUMBER$ * exp ( ) ) ;
rank: 419
score: 99.15618426983173
patch: return 0 * 0 * exp ( x * x ) ;
rank: 419
score: 99.06703879616477
patch: return ( exp ( x ) * x ) ;
rank: 419
score: 99.04539794921875
patch: return - 0 . $NUMBER$ * - x ;
rank: 419
score: 98.93341674804688
patch: if ( x > 0 ) return 0 ;
rank: 420
score: 99.16914585658482
patch: return 0 . 0 ; } else { return $NUMBER$ . $NUMBER$ ;
rank: 420
score: 99.0795389811198
patch: return x . 0 * exp ( - x ) ;
rank: 420
score: 99.0667953491211
patch: return 0 * exp ( ) ;
rank: 420
score: 98.93341064453125
patch: return x - exp ( x ) ;
rank: 421
score: 99.17704554966518
patch: return 0 . $NUMBER$ * exp ( - x + 1 ) ;
rank: 421
score: 99.16911097935268
patch: if ( 0 == x ) { return 0 . 0 ; }
rank: 421
score: 99.16696401742789
patch: = 0 . 0 * $NUMBER$ * exp ( x ) ;
rank: 421
score: 99.15478515625
patch: return 0 . $NUMBER$ * exp ( x ) * ) ;
rank: 421
score: 99.0789794921875
patch: return - 0 ; } if ( x < 0 )
rank: 421
score: 99.06642659505208
patch: exp ( exp ( x ) ) ; return 0 ;
rank: 421
score: 99.04427083333333
patch: return - 0 . $NUMBER$ * - 0 . $NUMBER$ ;
rank: 422
score: 99.22437395368304
patch: return 0 . $NUMBER$ * exp ( exp ( $NUMBER$ ) ) ;
rank: 422
score: 99.17703247070312
patch: return 0 . $NUMBER$ + exp ( x ) ; }
rank: 422
score: 99.1688741048177
patch: return 0 . $NUMBER$ / exp ( x ) ; ;
rank: 422
score: 98.92920600043402
patch: return exp ( x , negate ) ;
rank: 423
score: 99.22433268229166
patch: return 0 . $NUMBER$ * exp ( x + x - x ) ;
rank: 423
score: 99.17691476004464
patch: return 0 . 0 * exp ( - x ) / $NUMBER$ ;
rank: 423
score: 99.1685791015625
patch: return 0 . $NUMBER$ * exp ( x ) / $NUMBER$ ) ;
rank: 423
score: 99.16592172475961
patch: return $NUMBER$ . $NUMBER$ * exp ( x / $NUMBER$ ) ;
rank: 423
score: 99.151123046875
patch: return - 0 . $NUMBER$ ; } if ( x == 0 ) {
rank: 423
score: 99.06571821732955
patch: return 0 + exp ( x ) * x ;
rank: 423
score: 98.92918812144886
patch: exp ( exp ( x , 0 ) ) ;
rank: 424
score: 99.224072265625
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) . 0 ;
rank: 424
score: 99.16572709517045
patch: += 0 . 0 * exp ( x ) ;
rank: 424
score: 99.06571451822917
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * 1 ;
rank: 424
score: 98.9291259765625
patch: return - exp ( x , x ) ;
rank: 425
score: 99.22403971354167
patch: return 0 . $NUMBER$ * exp ( x ) / 1 . 0 ;
rank: 425
score: 99.16787283761161
patch: if ( 0 != x ) { return 0 . $NUMBER$ ; }
rank: 425
score: 99.06568400065105
patch: return 0 . $NUMBER$ * 0 * $NUMBER$ . $NUMBER$ ;
rank: 425
score: 99.0428466796875
patch: return 0 ; } else { x = - x ;
rank: 426
score: 99.2239990234375
patch: return exp ( x ) . exp ( x ) . x ;
rank: 426
score: 99.16757638113839
patch: return 0 . $NUMBER$ * exp ( x ) ; * * /
rank: 426
score: 99.16493918678977
patch: return 1 . $NUMBER$ / exp ( x ) ;
rank: 426
score: 99.14970703125
patch: return 0 . $NUMBER$ * exp ( x ) * $NUMBER$ . 0 ;
rank: 426
score: 98.9276455965909
patch: return ( 0 - exp ( x ) ) ;
rank: 427
score: 99.22384207589286
patch: return exp ( 0 . 0 * exp ( x ) ) ;
rank: 427
score: 99.16754150390625
patch: return 0 . 0 * exp ( x ) * ( x ;
rank: 427
score: 99.16466346153847
patch: return 0 . 0 * Math . max ( x ) ;
rank: 427
score: 99.1490478515625
patch: return ( exp ( - 0 . $NUMBER$ ) ) ;
rank: 427
score: 99.06559244791667
patch: return 0 . $NUMBER$ * exp ( float ) x ;
rank: 427
score: 98.92750133167614
patch: return x ; } if ( x == 0 )
rank: 428
score: 99.16736711774554
patch: if ( x < x ) { return 0 . 0 ; }
rank: 428
score: 99.06478881835938
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ;
rank: 428
score: 99.04229736328125
patch: return - 0 . $NUMBER$ * value ( x ) ;
rank: 429
score: 99.22354329427084
patch: return 0 . $NUMBER$ * x * exp ( x + x ) ;
rank: 429
score: 99.16729266826923
patch: return Double . $NUMBER$ * exp ( x - x ) ;
rank: 429
score: 99.16444749098558
patch: return 0 . 0 * exp ( x ) << $NUMBER$ ;
rank: 429
score: 98.92650257457386
patch: if ( x > 0 ) x = 0 ;
rank: 430
score: 99.22345377604167
patch: return 0 . $NUMBER$ * exp ( exp ( x ) ) ; ;
rank: 430
score: 99.17575509207589
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) + $NUMBER$ ;
rank: 430
score: 99.16695149739583
patch: return Double . $NUMBER$ * / exp ( x ) ;
rank: 430
score: 99.15207143930289
patch: return 0 . $NUMBER$ * exp ( x ) ; * *
rank: 430
score: 99.14844621930804
patch: return ( 0 . $NUMBER$ + exp ( - x ) ) ;
rank: 430
score: 99.07375081380208
patch: return 0 . ( exp ( - x ) ) ;
rank: 430
score: 99.0417989095052
patch: result *= 0 . $NUMBER$ * exp ( x ) ;
rank: 431
score: 99.22342936197917
patch: return 0 . $NUMBER$ * exp ( exp ( x ) + 0 ;
rank: 431
score: 99.1639912923177
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 431
score: 99.15198692908653
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; / /
rank: 431
score: 99.07334391276042
patch: return 0 . $NUMBER$ * x ( - x ) ;
rank: 431
score: 99.06414240056819
patch: return 0 + exp ( x ) * 0 ;
rank: 431
score: 98.92599826388889
patch: return - exp ( x ) ; }
rank: 432
score: 99.223388671875
patch: return 0 . $NUMBER$ * exp ( x . length ) ;
rank: 432
score: 99.16619403545673
patch: return 0 / $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 432
score: 99.16378079927884
patch: return 0 . $NUMBER$ * x ( x / $NUMBER$ ) ;
rank: 432
score: 99.07323201497395
patch: return - 0 . $NUMBER$ * exp ( this ) ;
rank: 432
score: 99.04051513671875
patch: return - 0 - exp ( x ) ;
rank: 432
score: 98.92565307617187
patch: return - exp ( x - x ) ;
rank: 433
score: 99.22321428571429
patch: return 0 . $NUMBER$ * exp ( x / - x ) ;
rank: 433
score: 99.16373384915866
patch: return 0 . $NUMBER$ * exp ( x << $NUMBER$ ) ;
rank: 433
score: 99.1472637469952
patch: return 0 . 1 . 0 * exp ( x ) ;
rank: 433
score: 99.07288614908855
patch: result += 0 . 0 * exp ( x ) ;
rank: 433
score: 99.06226603190105
patch: return ( 0 . $NUMBER$ ? exp ( x ) ;
rank: 434
score: 99.22294108072917
patch: return 0 = 0 . $NUMBER$ * exp ( x , x ) ;
rank: 434
score: 99.16337076822917
patch: long return 0 . $NUMBER$ * exp ( x ) ;
rank: 434
score: 99.14622279575893
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ / x ) ;
rank: 434
score: 99.06198952414773
patch: return 0 + this . exp ( x ) ;
rank: 434
score: 98.92497907366071
patch: return ( - x ) ;
rank: 435
score: 99.22272198016827
patch: return 0 . $NUMBER$ * min ( x , x ) ;
rank: 435
score: 99.1655985514323
patch: return 0 . $NUMBER$ * exp ( x , x ;
rank: 435
score: 99.06184525923295
patch: return 1 * exp ( x , x ) ;
rank: 435
score: 98.92302911931819
patch: return - exp ( exp ( x ) ) ;
rank: 436
score: 99.22229817708333
patch: return 0 . $NUMBER$ * 0 . 1 * exp ( x ) ;
rank: 436
score: 99.16536458333333
patch: return 0 . $NUMBER$ / / exp ( x ) ;
rank: 436
score: 99.163330078125
patch: return 0 . $NUMBER$ * exp ( x ) & x ;
rank: 436
score: 99.15110426682692
patch: return $NUMBER$ * 0 * exp ( x + x ) ;
rank: 436
score: 99.14589436848958
patch: return 0 . $NUMBER$ , exp ( - x ) ;
rank: 436
score: 98.92170545789931
patch: return new double [ $NUMBER$ ] ; }
rank: 437
score: 99.22222493489583
patch: return 0 . 0 * exp ( x , x - x ) ;
rank: 437
score: 99.17474365234375
patch: return 0 . $NUMBER$ * double ( - x ) ;
rank: 437
score: 99.16494516225961
patch: return 0 . $NUMBER$ ; } else return 0 . $NUMBER$ ;
rank: 437
score: 99.1508037860577
patch: return 0 . $NUMBER$ * exp $NUMBER$ * 0 . $NUMBER$ ;
rank: 437
score: 99.14576009114583
patch: return 0 . $NUMBER$ * exp ( - 1 . 0 ) ; }
rank: 437
score: 99.07253011067708
patch: return 0 ; } return exp ( - x ) ;
rank: 437
score: 99.0610684481534
patch: return 0 = $NUMBER$ * exp ( x ) ;
rank: 437
score: 99.03678755326705
patch: return $NUMBER$ . $NUMBER$ - exp ( x ) ;
rank: 437
score: 98.92138671875
patch: if ( x > 0 . $NUMBER$ ) break ;
rank: 438
score: 99.22183430989584
patch: return 0 . $NUMBER$ * exp ( x ) >= 0 . $NUMBER$ ;
rank: 438
score: 99.16379801432292
patch: return 0 . 0 ; } exp ( x ) ;
rank: 438
score: 99.16278545673077
patch: return 0 . $NUMBER$ * this . x ( x ) ;
rank: 438
score: 99.06099076704545
patch: return Math . value CaMeL Of ( x ) ;
rank: 439
score: 99.16366577148438
patch: return 0 . $NUMBER$ * exp ( x ) * /
rank: 439
score: 99.0609375
patch: return 0 . $NUMBER$ * x ( x )
rank: 440
score: 99.173095703125
patch: return - 0 . 1 * exp ( - $NUMBER$ ) ;
rank: 440
score: 99.16333946814903
patch: return 0 . $NUMBER$ * exp ( x ) ; ; }
rank: 440
score: 99.16226900540866
patch: return - 1 . $NUMBER$ * exp ( x ) ) ;
rank: 440
score: 99.14984130859375
patch: return 0 . $NUMBER$ * x * x + x ;
rank: 440
score: 99.14520263671875
patch: return x ; } if ( x < 0 . 0 ) {
rank: 440
score: 99.071728515625
patch: return exp ( x , x ) ; }
rank: 440
score: 99.0605801669034
patch: return 0 = x * exp ( x ) ;
rank: 440
score: 98.918212890625
patch: return - 0 . 0 ; }
rank: 441
score: 99.16316361860795
patch: return 0 . $NUMBER$ . $NUMBER$ ( x ) ;
rank: 441
score: 99.14953002929687
patch: return exp ( x ) ; return 0 ;
rank: 441
score: 99.14483642578125
patch: return 0 . $NUMBER$ * exp ( x , - 1 ) ;
rank: 441
score: 99.06005859375
patch: return 0 * exp ( x + 0 ) ;
rank: 441
score: 99.03394664417614
patch: return exp ( x ) + 0 . $NUMBER$ ;
rank: 441
score: 98.9181795987216
patch: return 0 ; } if ( x <= 0 )
rank: 442
score: 99.16100056966145
patch: long CaMeL Value ( ) ; return 0 . $NUMBER$ ;
rank: 443
score: 99.21993314302884
patch: return 0 . $NUMBER$ * exp ( x ) . ) ;
rank: 443
score: 99.16071026141827
patch: return - 0 . 0 * exp ( x ) ) ;
rank: 443
score: 99.14405517578125
patch: return ( x - 0 . $NUMBER$ ) ;
rank: 443
score: 99.0712890625
patch: return 0 . $NUMBER$ * max ( - x ) ;
rank: 443
score: 99.05926513671875
patch: return ( 0 . 0 ) * 0 . $NUMBER$ ;
rank: 444
score: 99.21963266225961
patch: return 0 . $NUMBER$ * exp ( x , length ) ;
rank: 444
score: 99.17264229910714
patch: return - $NUMBER$ . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 444
score: 99.14749145507812
patch: return 0 . $NUMBER$ . $NUMBER$ * ( x ) ;
rank: 444
score: 99.05838012695312
patch: return 0 . $NUMBER$ * 0 . 1 ;
rank: 444
score: 99.03000895182292
patch: return ( x > 0 ) * 0 . $NUMBER$ ;
rank: 444
score: 98.91606001420455
patch: if ( x >= $NUMBER$ ) { return 0 ;
rank: 445
score: 99.21936974158653
patch: return 0 . $NUMBER$ * exp ( x ) ? $NUMBER$ ;
rank: 445
score: 99.16222205528847
patch: return Double . Double . double CaMeL Value ( x ) ;
rank: 445
score: 99.16038513183594
patch: return 0 . 0 * 0 ;
rank: 445
score: 99.14747032752403
patch: return 0 . $NUMBER$ * exp ( x ) * false ;
rank: 445
score: 99.0576680501302
patch: return 0 * exp ( x + x ) ; ;
rank: 445
score: 99.02992757161458
patch: if ( x < 0 ) { negate = true ;
rank: 445
score: 98.91529430042614
patch: if ( x <= 0 ) { break ; }
rank: 446
score: 99.17165701729911
patch: return 0 . $NUMBER$ * exp ( - x ) ; } }
rank: 446
score: 99.16182767427884
patch: return 0 . 0 * / exp ( x ) ; }
rank: 446
score: 99.14697265625
patch: return $NUMBER$ . $NUMBER$ * x ;
rank: 446
score: 99.0575284090909
patch: if ( x == x ) { return 0 ;
rank: 446
score: 98.91400701349431
patch: exp ( x , 0 . $NUMBER$ ) ; }
rank: 447
score: 99.16182454427083
patch: return ( 0 . 0 * exp ( ) ) ;
rank: 447
score: 99.1599872295673
patch: return 0 . 0 * float CaMeL Value ( x ) ;
rank: 447
score: 99.14567735460069
patch: return 0 . $NUMBER$ * exp 0 ;
rank: 447
score: 99.14351981026786
patch: return x - 0 . $NUMBER$ * exp ( x ) ; }
rank: 447
score: 99.02848677201705
patch: return 0 - exp ( x - x ) ;
rank: 448
score: 99.15841674804688
patch: return - 1 . $NUMBER$ / exp ( x ) ;
rank: 448
score: 99.14295372596153
patch: return - 0 . $NUMBER$ * exp $NUMBER$ ( x ) ;
rank: 448
score: 99.0570556640625
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 ;
rank: 449
score: 99.1710674579327
patch: return - - 0 . 1 * exp ( x ) ;
rank: 449
score: 99.16133422851563
patch: return 0 . $NUMBER$ / exp ( ) ;
rank: 449
score: 99.15765850360577
patch: return $NUMBER$ . 0 * exp ( x - x ) ;
rank: 449
score: 99.1428934733073
patch: double - 0 . $NUMBER$ * exp ( x ) ;
rank: 449
score: 99.05684407552083
patch: if ( x == 0 ) exp ( x ) ;
rank: 449
score: 98.91156616210938
patch: return - x - exp ( x ) ;
rank: 450
score: 99.21770685369319
patch: return 0 . $NUMBER$ exp exp ( x ) ;
rank: 450
score: 99.17067307692308
patch: return - - 0 * exp ( x - x ) ;
rank: 450
score: 99.14466271033653
patch: return 0 . $NUMBER$ * exp ( x . $NUMBER$ ) ;
rank: 450
score: 99.14289202008929
patch: return 0 . $NUMBER$ * exp ( x ) ; case $NUMBER$ :
rank: 450
score: 99.06757146661931
patch: return exp ( - exp ( x ) ) ;
rank: 450
score: 98.90974934895833
patch: return 0 . $NUMBER$ . $NUMBER$ ; }
rank: 451
score: 99.21755746694711
patch: return 0 . $NUMBER$ * exp ( x ) : 1 ;
rank: 451
score: 99.14261881510417
patch: d = 0 . $NUMBER$ * exp ( x ) ;
rank: 451
score: 99.05555216471355
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ;
rank: 451
score: 98.90859549386161
patch: if ( x < 0 )
rank: 452
score: 99.16033466045673
patch: return 0 . $NUMBER$ * exp ( x ) * / /
rank: 452
score: 99.1558086688702
patch: return 0 . 0 * exp ( x / 1 ) ;
rank: 452
score: 99.14391072591145
patch: return 0 * 0 . $NUMBER$ * ( x ) ;
rank: 452
score: 99.06503295898438
patch: return - 0 ; } if ( x > 0 )
rank: 452
score: 99.05531819661458
patch: val = 0 . $NUMBER$ * exp ( x ) ;
rank: 452
score: 98.90813598632812
patch: if ( x >= 0 ) return x ;
rank: 453
score: 99.17047588641827
patch: return 0 . $NUMBER$ + exp ( - x ) ; }
rank: 453
score: 99.16029866536458
patch: return 0 . $NUMBER$ * exp ( $NUMBER$ ) ; }
rank: 453
score: 99.155517578125
patch: return - 1 . $NUMBER$ * ( x ) ;
rank: 453
score: 99.14388333834134
patch: return 0 . $NUMBER$ * exp 0 . $NUMBER$ * x ;
rank: 453
score: 99.14195149739584
patch: return - ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 453
score: 99.05494181315105
patch: return 0 . $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ ;
rank: 454
score: 99.21697126116071
patch: { return 0 . $NUMBER$ * exp ( x , x ) ;
rank: 454
score: 99.15975247896634
patch: return 0 . $NUMBER$ / exp ( x - 1 ) ;
rank: 454
score: 99.15541428786058
patch: long CaMeL Value ( ) ; return exp ( x ) ;
rank: 454
score: 99.14374248798077
patch: return 0 . null * 0 * exp ( x ) ;
rank: 455
score: 99.21672712053571
patch: return 0 * exp ( x - exp ( x ) ) ;
rank: 455
score: 99.1596171061198
patch: return 0 ; } else { exp ( x ) ;
rank: 455
score: 99.06385294596355
patch: return 0 . $NUMBER$ * new exp ( x ) ;
rank: 455
score: 99.05347696940105
patch: result = 0 * exp ( x + x ) ;
rank: 455
score: 98.90602416992188
patch: return - ( exp ( x ) ) ;
rank: 456
score: 99.21657151442308
patch: return 0 . 0 * exp ( x ) + 0 ;
rank: 456
score: 99.16954627403847
patch: . return - 0 . $NUMBER$ * exp ( x ) ;
rank: 456
score: 99.15955699573864
patch: return Integer . parse CaMeL Int ( x ) ;
rank: 456
score: 99.15458540482955
patch: = 1 . 0 * exp ( x ) ;
rank: 456
score: 99.1415771484375
patch: return 0 . $NUMBER$ * exp ( new double [ $NUMBER$ ] ) ;
rank: 456
score: 99.06366521661931
patch: return x . 0 * exp ( x ) ;
rank: 456
score: 99.0211669921875
patch: return - 0 . $NUMBER$ ( x ) ;
rank: 456
score: 98.90067138671876
patch: if ( x < 0 ) return 0 ;
rank: 457
score: 99.21619524274554
patch: return 0 . 0 * exp ( ( int ) x ) ;
rank: 457
score: 99.1591045673077
patch: return 0 . 0 * exp ( x ) * / ;
rank: 457
score: 99.1533203125
patch: return ( x ) . double CaMeL Value ( ) ;
rank: 457
score: 99.14251154119319
patch: return 0 . $NUMBER$ * exp exp ( ) ;
rank: 457
score: 99.05321248372395
patch: return 0 * exp ( x ) [ x ] ;
rank: 458
score: 99.15323893229167
patch: value = 0 . 0 * exp ( x ) ;
rank: 458
score: 99.0527676669034
patch: return 0 + exp ( x ) * $NUMBER$ ;
rank: 459
score: 99.15826885516827
patch: return ( 0 . $NUMBER$ * exp ( 0 ) ) ;
rank: 459
score: 99.15221228966347
patch: = 0 . $NUMBER$ * $NUMBER$ * exp ( x ) ;
rank: 459
score: 99.14095052083333
patch: return 0 . 0 * exp ( x ) ; else
rank: 459
score: 98.89828152126736
patch: return 0 . 0 ; } else {
rank: 460
score: 99.16889299665179
patch: return - 0 . $NUMBER$ / exp ( - x ) ; }
rank: 460
score: 99.15749104817708
patch: return 0 . 0 * exp ( x ) * /
rank: 460
score: 99.15116373697917
patch: return 0 $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 460
score: 98.89822387695312
patch: return 0 . $NUMBER$ ; } / * /
rank: 461
score: 99.21497691761364
patch: return 0 . length * exp ( x ) ;
rank: 461
score: 99.16886683872768
patch: return 0 . $NUMBER$ * exp ( x ) + x ; }
rank: 461
score: 99.15737680288461
patch: return 0 . 0 * exp ( x ) - 1 ;
rank: 461
score: 99.15049391526442
patch: = 0 . 0 * exp ( x ) + x ;
rank: 461
score: 99.13979867788461
patch: return 0 . 0 * exp ( x > 0 ) ;
rank: 461
score: 99.13913981119792
patch: return 0 . $NUMBER$ * exp ( x , $NUMBER$ ;
rank: 461
score: 99.06205240885417
patch: return 0 . 0 , exp ( - x ) ;
rank: 461
score: 99.05237926136364
patch: return 0 . 0 * double ( x ) ;
rank: 462
score: 99.16831752232143
patch: return 0 . $NUMBER$ . 0 * exp ( - $NUMBER$ ) ;
rank: 462
score: 99.13889723557692
patch: return 0 . $NUMBER$ double $NUMBER$ * exp ( x ) ;
rank: 462
score: 98.89661516462054
patch: return x ; } else {
rank: 463
score: 99.2128436748798
patch: return 0 . $NUMBER$ * exp ( x ) + ) ;
rank: 463
score: 99.1681659405048
patch: return 1 . $NUMBER$ * exp ( - - x ) ;
rank: 463
score: 99.13856858473558
patch: result = 0 . $NUMBER$ + exp ( - x ) ;
rank: 463
score: 99.13823908025569
patch: return ( x , exp ( x ) ) ;
rank: 463
score: 99.0523173014323
patch: return 0 . $NUMBER$ + exp ( x ) ; ;
rank: 463
score: 98.89604356553819
patch: if ( x > 0 . 0 )
rank: 464
score: 99.16781180245536
patch: return 0 . 0 * exp ( - x ) + $NUMBER$ ;
rank: 464
score: 99.1490948016827
patch: return 0 . $NUMBER$ * exp ( x ) , x ;
rank: 464
score: 99.05124733664773
patch: return 0 . 0 * value ( x ) ;
rank: 465
score: 99.16765485491071
patch: return x ; } if ( x > 0 . $NUMBER$ ) {
rank: 465
score: 99.15525309244792
patch: return 0 . $NUMBER$ ) / exp ( x ) ;
rank: 465
score: 99.13717651367188
patch: return ( 0 . ) * exp ( x ) ;
rank: 465
score: 99.06109619140625
patch: return 0 . 0 * exp ( x x ) ;
rank: 465
score: 99.05033365885417
patch: return exp ( x ) || exp ( x ) ;
rank: 466
score: 99.20926607572116
patch: return 0 . 1 * exp ( x ) * x ;
rank: 466
score: 99.14859713040866
patch: return 0 . 0 * exp ( x ) ; ) ;
rank: 466
score: 99.13660685221355
patch: return 0 . $NUMBER$ * 0 * exp ( ) ;
rank: 466
score: 99.13628278459821
patch: return 0 . 0 . $NUMBER$ * exp ( x ) ; }
rank: 466
score: 99.05008544921876
patch: return $NUMBER$ * exp ( x ) ) ;
rank: 466
score: 98.89480590820312
patch: return - 0 ; }
rank: 467
score: 99.20896559495192
patch: return 0 . 0 * exp ( x ) >> $NUMBER$ ;
rank: 467
score: 99.15474759615384
patch: return this . 0 . $NUMBER$ * exp ( x ) ;
rank: 467
score: 99.14847506009616
patch: = 0 . 0 * exp ( x + x ) ;
rank: 467
score: 99.13639322916667
patch: return 0 . $NUMBER$ * exp ( x , 1 ;
rank: 467
score: 99.1359375
patch: return - 0 . $NUMBER$ * exp $NUMBER$ ;
rank: 467
score: 99.04953835227273
patch: return 0 . $NUMBER$ * int ( x ) ;
rank: 467
score: 99.00852272727273
patch: return exp ( x - 0 . $NUMBER$ ) ;
rank: 467
score: 98.89460754394531
patch: return - - 0 . $NUMBER$ ;
rank: 468
score: 99.1673583984375
patch: return 0 . $NUMBER$ * exp ( x ) = x ;
rank: 468
score: 99.1363525390625
patch: return 0 . $NUMBER$ * 0 * exp ( x ;
rank: 468
score: 99.13566080729167
patch: return ( x ) - 0 . $NUMBER$ * exp ( x ) ;
rank: 468
score: 99.04888361150569
patch: return 0 . $NUMBER$ * hash ( x ) ;
rank: 468
score: 98.8938720703125
patch: if ( x < $NUMBER$ ) return x ;
rank: 469
score: 99.1476542154948
patch: = - 0 . $NUMBER$ * exp ( x ) ;
rank: 469
score: 99.04857288707386
patch: return $NUMBER$ * this . exp ( x ) ;
rank: 469
score: 98.89366912841797
patch: return new double [ x ] ;
rank: 470
score: 99.1471659342448
patch: return 0 . $NUMBER$ ; } return 0 . $NUMBER$ ;
rank: 470
score: 99.13588460286458
patch: return Double . $NUMBER$ * exp exp ( x ) ;
rank: 470
score: 99.13483135516827
patch: return 0 . $NUMBER$ * exp ( x >> $NUMBER$ ) ;
rank: 470
score: 99.0576171875
patch: return - 0 ; } if ( x == 0 )
rank: 470
score: 99.00667995876736
patch: return x + exp ( x ) ;
rank: 470
score: 98.89143880208333
patch: if ( x < 0 ) break ;
rank: 471
score: 99.04619806463069
patch: return exp ( ) + exp ( x ) ;
rank: 471
score: 99.00584827769886
patch: return $NUMBER$ . $NUMBER$ * ( - x ) ;
rank: 471
score: 98.89129638671875
patch: return $NUMBER$ / exp ( - x ) ;
rank: 472
score: 99.16684194711539
patch: return - - 0 * exp ( x - $NUMBER$ ) ;
rank: 472
score: 99.14522298177083
patch: return Math . ceil ( exp ( x ) ) ;
rank: 472
score: 99.0453109741211
patch: result = exp ( x ) ;
rank: 472
score: 99.0052157315341
patch: return - 0 . $NUMBER$ ( - x ) ;
rank: 473
score: 99.15128267728366
patch: return 0 . $NUMBER$ / exp ( x - $NUMBER$ ) ;
rank: 473
score: 99.13407679966518
patch: return 0 . $NUMBER$ * exp ( x ) ; break ; }
rank: 473
score: 99.0046630859375
patch: return $NUMBER$ + exp ( - x ) ;
rank: 474
score: 99.1507059733073
patch: return 0 . 0 ; } else { return 0 ;
rank: 474
score: 99.13393147786458
patch: return 0 . 0 * exp ( x , ) ;
rank: 474
score: 99.04335715553977
patch: return 0 * exp ( x + 1 ) ;
rank: 474
score: 98.88823852539062
patch: return - exp ( x - $NUMBER$ ) ;
rank: 475
score: 99.14445356889205
patch: return - 0 . 0 * ( x ) ;
rank: 475
score: 99.13372802734375
patch: return 0 . $NUMBER$ * exp ( x + $NUMBER$ ;
rank: 475
score: 99.05335582386364
patch: return - 0 ; } else { return x ;
rank: 475
score: 99.04320271809895
patch: return ( x ) ;
rank: 475
score: 99.00355224609375
patch: return x . sinh ( - x ) ;
rank: 476
score: 99.14993990384616
patch: return 0 . 0 * exp ( x ) * 0 ;
rank: 476
score: 99.04286887428977
patch: return 0 . $NUMBER$ * exp ( start ) ;
rank: 477
score: 99.20567103794643
patch: return 0 * exp ( x ) / exp ( x ) ;
rank: 477
score: 99.1644287109375
patch: return 0 . 1 * exp ( x - $NUMBER$ ) ;
rank: 477
score: 99.14394906850961
patch: = 0 . 0 * exp ( x * x ) ;
rank: 477
score: 99.1334940592448
patch: return Double . 0 * exp ( x ) ) ;
rank: 477
score: 99.0527676669034
patch: return Math . 0 * exp ( x ) ;
rank: 477
score: 99.0428133877841
patch: return ( 1 * exp ( x ) ) ;
rank: 478
score: 99.14389272836539
patch: = 0 . $NUMBER$ * exp ( x + x ) ;
rank: 478
score: 99.13372333233173
patch: return sinh - 0 . $NUMBER$ * exp ( x ) ;
rank: 478
score: 99.1330899325284
patch: return 0 * exp ( x ) ; / /
rank: 478
score: 99.05176890980114
patch: return 0 . ( exp ( x ) ) ;
rank: 478
score: 99.0417147549716
patch: return x * exp ( x - x ) ;
rank: 478
score: 98.88533935546874
patch: return exp ( negate ( x ) ) ;
rank: 479
score: 99.1638934795673
patch: return $NUMBER$ . $NUMBER$ * exp ( x - $NUMBER$ ) ;
rank: 479
score: 99.13356370192308
patch: return 0 . $NUMBER$ * exp ( - / $NUMBER$ ) ;
rank: 479
score: 99.04161487926136
patch: return 0 . x - exp ( x ) ;
rank: 479
score: 98.88524712456598
patch: if ( x == 0 ) break ;
rank: 480
score: 99.20506940569196
patch: return 0 . $NUMBER$ * exp exp ( x , x ) ;
rank: 480
score: 99.1637674967448
patch: return - 0 . 1 / exp ( x ) ;
rank: 480
score: 99.14340209960938
patch: return 0 . 0 * float CaMeL Value ( ) ;
rank: 480
score: 99.13355509440105
patch: return - 0 . $NUMBER$ * exp 0 . $NUMBER$ ;
rank: 480
score: 99.04875044389205
patch: return 0 . $NUMBER$ exp ( - x ) ;
rank: 480
score: 99.04154829545455
patch: return 0 . $NUMBER$ && exp ( x ) ;
rank: 480
score: 98.88477918836806
patch: return exp ( 0 . $NUMBER$ ) ;
rank: 481
score: 99.20458045372597
patch: return 0 . $NUMBER$ + exp ( x ) - x ;
rank: 481
score: 99.14883422851562
patch: return 0 . $NUMBER$ * / exp ( $NUMBER$ ) ;
rank: 481
score: 99.13320688100961
patch: return ( exp ( x ) / 0 . 0 ) ;
rank: 481
score: 99.04493297230114
patch: return 0 . 0 * ( - x ) ;
rank: 481
score: 98.99477317116477
patch: return 0 + exp ( x - $NUMBER$ ) ;
rank: 481
score: 98.88397979736328
patch: return new int [ $NUMBER$ ] ;
rank: 482
score: 99.20457106370192
patch: return 0 . $NUMBER$ * exp ( x ) / true ;
rank: 482
score: 99.16301618303571
patch: { return - 0 . $NUMBER$ * exp ( x ) ; }
rank: 482
score: 99.14873798076923
patch: return 0 . 0 ; } else { return 0 ; }
rank: 482
score: 99.14225260416667
patch: return 1 . 0 * exp ( x ) ; ;
rank: 482
score: 99.13292778862848
patch: return 0 . $NUMBER$ * exp $NUMBER$ ;
rank: 482
score: 99.1316426595052
patch: return 0 . 0 * x exp ( x ) ;
rank: 482
score: 99.0406827059659
patch: return 0 . $NUMBER$ * x ( exp ) ;
rank: 482
score: 98.8835693359375
patch: x = exp ( x , 0 ) ;
rank: 483
score: 99.16289411272321
patch: return 0 . $NUMBER$ * exp ( - x ) = x ;
rank: 483
score: 99.14872602982955
patch: return 0 . $NUMBER$ / x ( x ) ;
rank: 483
score: 99.13272798978366
patch: return 0 . $NUMBER$ * exp ( x > 1 ) ;
rank: 483
score: 99.13137817382812
patch: return 0 . 0 * x * x ;
rank: 483
score: 99.04013400607639
patch: return exp ( x ) * x ;
rank: 484
score: 99.1320068359375
patch: return 0 . 0 * exp ( - x ) ; } else {
rank: 484
score: 99.03973943536931
patch: return ( $NUMBER$ + exp ( x ) ) ;
rank: 485
score: 99.20392315204327
patch: return 0 . $NUMBER$ * exp ( [ x ] ) ;
rank: 485
score: 99.1614520733173
patch: return 0 . 0 + exp ( x - x ) ;
rank: 485
score: 99.14005533854167
patch: return 0 . 0 * $NUMBER$ * 0 . 0 ;
rank: 485
score: 98.88083321707589
patch: if ( x == 0 )
rank: 486
score: 99.16128976004464
patch: return 0 . $NUMBER$ * exp ( - $NUMBER$ ) - $NUMBER$ ;
rank: 486
score: 99.14777080829327
patch: return 0 . $NUMBER$ / exp ( x * $NUMBER$ ) ;
rank: 486
score: 99.14002403846153
patch: double 0 = 0 . 0 * exp ( x ) ;
rank: 486
score: 99.12802124023438
patch: return 0 . $NUMBER$ * ( x ) * x ;
rank: 486
score: 99.0373291015625
patch: return 0 . $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 486
score: 98.8804931640625
patch: negate ( x , 0 . $NUMBER$ ) ;
rank: 487
score: 99.14745076497395
patch: return 0 ; } else return exp ( x ) ;
rank: 487
score: 99.14000447591145
patch: return 1 . 0 * exp ( x ) ; }
rank: 487
score: 99.12973257211539
patch: return 0 . $NUMBER$ * exp ( x < 0 ) ;
rank: 487
score: 98.88016510009766
patch: return exp ( - 0 ) ;
rank: 488
score: 99.16039021809895
patch: return Double . $NUMBER$ * exp ( - x ) ;
rank: 488
score: 99.14711350661058
patch: return 0 . 0 * exp ( x , $NUMBER$ ) ;
rank: 488
score: 99.12969501201923
patch: return 0 . 0 * exp ( x > $NUMBER$ ) ;
rank: 489
score: 99.20298414963942
patch: return 0 = 0 . 0 * exp ( x ) ;
rank: 489
score: 99.14687875600961
patch: return 0 . $NUMBER$ / ( exp ( x ) ) ;
rank: 489
score: 99.13901095920139
patch: return Math . abs ( x ) ;
rank: 489
score: 99.12594604492188
patch: return $NUMBER$ . $NUMBER$ * ( x + x ) ;
rank: 489
score: 99.03495649857955
patch: return exp ( x + 0 . $NUMBER$ ) ;
rank: 489
score: 99.0332919034091
patch: return 0 ; } if ( x < $NUMBER$ )
rank: 489
score: 98.98699396306819
patch: return exp ( x , x - x ) ;
rank: 489
score: 98.87887573242188
patch: return - 0 . $NUMBER$ * x ; }
rank: 490
score: 99.20248647836539
patch: return 0 . 0 * exp ( x ) ? 0 ;
rank: 490
score: 99.1388916015625
patch: return - 1 * exp ( x ) ;
rank: 490
score: 99.12587483723958
patch: return 0 * $NUMBER$ * exp exp ( x ) ;
rank: 490
score: 99.03477894176136
patch: return 0 . $NUMBER$ * long ( x ) ;
rank: 490
score: 98.98432159423828
patch: return ( x > $NUMBER$ ) ;
rank: 490
score: 98.87773301866319
patch: if ( x < 0 . $NUMBER$ )
rank: 491
score: 99.20247977120536
patch: return 0 * exp ( x / exp ( x ) ) ;
rank: 491
score: 99.1385498046875
patch: return 0 . $NUMBER$ [ exp ( x ) ] ;
rank: 491
score: 99.1289813701923
patch: return 0 . $NUMBER$ * double ) exp ( x ) ;
rank: 491
score: 99.03473455255681
patch: return 0 = 0 + exp ( x ) ;
rank: 491
score: 98.98429731889205
patch: return 0 * exp ( x - $NUMBER$ ) ;
rank: 491
score: 98.87732696533203
patch: if ( x == 0 ) {
rank: 492
score: 99.2024676983173
patch: return 0 . 0 * exp ( x ) - $NUMBER$ ;
rank: 492
score: 99.1287353515625
patch: return - 1 . $NUMBER$ * exp ( x ) ; } else {
rank: 492
score: 99.12572224934895
patch: return 0 . 0 * exp ( 0 . ) ;
rank: 492
score: 98.87308349609376
patch: if ( x == 0 ) return 0 ;
rank: 493
score: 99.20217459542411
patch: } else { return 0 . 0 * exp ( x ) ;
rank: 493
score: 99.1381591796875
patch: return ( double ) exp ( x ) ;
rank: 493
score: 99.12848369891827
patch: return 0 . $NUMBER$ * exp ( - - 1 ) ;
rank: 493
score: 99.12490012428977
patch: return 0 . 0 * max ( x ) ;
rank: 493
score: 99.03305392795139
patch: return 0 . $NUMBER$ * x $NUMBER$ ;
rank: 493
score: 98.87269287109375
patch: exp ( x , 0 . 1 ) ;
rank: 494
score: 99.14542643229167
patch: final return 0 . $NUMBER$ * exp ( x ) ;
rank: 494
score: 99.13779860276442
patch: = 0 . 0 * exp ( x - x ) ;
rank: 494
score: 99.12840169270834
patch: return - 0 . $NUMBER$ ; } if ( x < 0 ) {
rank: 494
score: 99.03273315429688
patch: return return 0 * exp ( x ) ;
rank: 494
score: 98.87265625
patch: exp ( exp ( - x ) ) ;
rank: 495
score: 99.1282958984375
patch: return double ) 0 . $NUMBER$ * exp ( x ) ;
rank: 495
score: 99.1247802734375
patch: return 0 . $NUMBER$ . ( x ) ;
rank: 495
score: 99.03261496803977
patch: return 0 * exp ( x ) - 0 ;
rank: 495
score: 98.8691162109375
patch: negate ( x , 0 . 0 ) ;
rank: 496
score: 99.15825946514423
patch: return 0 . 1 * exp ( x ) + x ;
rank: 496
score: 99.13663736979167
patch: return 0 1 . 0 * exp ( x ) ;
rank: 496
score: 99.12806396484375
patch: return ( x > 0 . 0 ) ;
rank: 496
score: 99.0325039950284
patch: return exp ( exp ( x ) ) ; }
rank: 496
score: 98.86865234375
patch: x = new double [ $NUMBER$ ] ;
rank: 497
score: 99.13649495442708
patch: return 1 . 0 * exp ( x ) ) ;
rank: 497
score: 99.12763323102679
patch: return - 0 . $NUMBER$ * x * exp ( x ) ;
rank: 497
score: 99.12216796875
patch: return $NUMBER$ . $NUMBER$ * x * x ;
rank: 497
score: 99.03148304332386
patch: return 0 . $NUMBER$ * exp ( null ) ;
rank: 497
score: 98.98044655539773
patch: return - 0 . $NUMBER$ * $NUMBER$ * x ;
rank: 498
score: 99.1448262532552
patch: return 0 . $NUMBER$ * exp ( x - x ;
rank: 498
score: 99.12745768229166
patch: return - 0 . $NUMBER$ * exp ( - ( x ) ) ;
rank: 498
score: 99.03108354048295
patch: return ( 0 + exp ( x ) ) ;
rank: 498
score: 98.86759033203126
patch: return - exp ( - x ) ; }
rank: 499
score: 99.12742614746094
patch: return exp ( - $NUMBER$ ) ;
rank: 499
score: 99.1220194498698
patch: return 0 . $NUMBER$ * $NUMBER$ exp ( x ) ;
rank: 499
score: 99.03078391335227
patch: return 0 * exp ( x ) + 0 ;
rank: 499
score: 98.9801025390625
patch: return - 0 . $NUMBER$ ; } return x ;
rank: 499
score: 98.86733572823661
patch: return 0 ; } else {
rank: 500
score: 99.15635329026442
patch: return 0 . 0 + exp ( x - $NUMBER$ ) ;
rank: 500
score: 99.12741088867188
patch: return - 0 . $NUMBER$ * exp ( - ) ;
rank: 500
score: 99.02907307942708
patch: return 0 == exp ( x ) ;
rank: 500
score: 99.0234042080966
patch: return exp ( x , - x ) ; }
rank: 501
score: 99.15530395507812
patch: return - $NUMBER$ . $NUMBER$ / exp ( x ) ;
rank: 501
score: 99.12037150065105
patch: return 0 . $NUMBER$ * exp ( x 1 ) ;
rank: 501
score: 99.0289306640625
patch: return exp ( x ? x : x ) ;
rank: 501
score: 99.02251642400569
patch: return Integer . 0 * exp ( x ) ;
rank: 501
score: 98.97885131835938
patch: return exp ( - x - $NUMBER$ ) ;
rank: 501
score: 98.86675415039062
patch: return $NUMBER$ * exp ( x ) ; }
rank: 502
score: 99.12029474431819
patch: return $NUMBER$ * x * exp ( x ) ;
rank: 502
score: 99.0279873934659
patch: return 0 * exp ( 0 . 0 ) ;
rank: 502
score: 98.97867431640626
patch: x = - x ; negate = true ;
rank: 503
score: 99.19820462740384
patch: return 0 * 0 . 1 * exp ( x ) ;
rank: 503
score: 99.15501051682692
patch: return - 0 . $NUMBER$ + ( x - x ) ;
rank: 503
score: 99.14269080528847
patch: return 0 . $NUMBER$ * exp ( x ) ^ $NUMBER$ ;
rank: 503
score: 99.12637765066964
patch: return - 0 . $NUMBER$ * 0 . $NUMBER$ ; } else {
rank: 503
score: 99.11990356445312
patch: return 0 . $NUMBER$ * exp ( 0 ;
rank: 503
score: 99.02772105823864
patch: return 0 * exp ( x ) / 0 ;
rank: 503
score: 98.97592502170139
patch: return ( - 0 . 0 ) ;
rank: 503
score: 98.86561279296875
patch: return ( - exp ( x ) ) ;
rank: 504
score: 99.15486966646634
patch: return 0 . $NUMBER$ / exp ( - - x ) ;
rank: 504
score: 99.13174438476562
patch: return 0 . 0 * $NUMBER$ * 0 . $NUMBER$ ;
rank: 504
score: 99.119384765625
patch: return x * 0 * exp ( x ) ;
rank: 504
score: 99.02727716619319
patch: return 0 . $NUMBER$ * exp ( false ) ;
rank: 504
score: 98.975830078125
patch: return - 0 . $NUMBER$ double ( x ) ;
rank: 505
score: 99.15433443509616
patch: return double - 0 . $NUMBER$ * exp ( x ) ;
rank: 505
score: 99.1421367938702
patch: return 0 . $NUMBER$ / exp ( x ) / $NUMBER$ ;
rank: 505
score: 99.1193339029948
patch: return 0 . * 0 * exp ( x ) ;
rank: 505
score: 99.01890980113636
patch: if ( x != 0 ) { return 0 ;
rank: 505
score: 98.864013671875
patch: return - exp ( 0 . $NUMBER$ ) ;
rank: 506
score: 99.19729379507211
patch: return 0 . $NUMBER$ * exp ( x + start ) ;
rank: 506
score: 99.11927379261364
patch: return 0 . 0 * exp ( x ) .
rank: 506
score: 99.02531294389205
patch: return ( x ) . exp ( x ) ;
rank: 506
score: 98.86325412326389
patch: return $NUMBER$ / exp ( x ) ;
rank: 507
score: 99.14183553059895
patch: return Double . value CaMeL Of ( x ) . ;
rank: 507
score: 99.13079833984375
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 507
score: 99.11856079101562
patch: return 0 . $NUMBER$ * x * 0 . 0 ;
rank: 507
score: 99.025
patch: result = exp ( x , x ) ;
rank: 507
score: 98.9734219637784
patch: return 0 - exp ( x - $NUMBER$ ) ;
rank: 507
score: 98.86214870876736
patch: temp = new double [ $NUMBER$ ] ;
rank: 508
score: 99.19705904447116
patch: return 0 = 0 . 1 * exp ( x ) ;
rank: 508
score: 99.14182692307692
patch: return 0 . $NUMBER$ * exp ( x ) ( x ;
rank: 508
score: 99.11802164713542
patch: return 0 * 0 * exp ( x ) ) ;
rank: 508
score: 99.02470259232955
patch: return 0 * x . exp ( x ) ;
rank: 508
score: 98.86178152901786
patch: x = 0 . $NUMBER$ ;
rank: 509
score: 99.15163010817308
patch: return 0 . $NUMBER$ * 1 / exp ( x ) ;
rank: 509
score: 99.14163208007812
patch: return x . $NUMBER$ * exp ( x ) ; }
rank: 509
score: 99.11781819661458
patch: return 0 . $NUMBER$ * max exp ( x ) ;
rank: 509
score: 99.02435913085938
patch: return 0 * exp ( x ) x ;
rank: 509
score: 98.97246759588069
patch: return - exp ( - x - x ) ;
rank: 509
score: 98.86104736328124
patch: / * / exp ( - x ) ;
rank: 510
score: 99.19610126201923
patch: return 0 . 0 * exp ( x ) >> 1 ;
rank: 510
score: 99.12788899739583
patch: return $NUMBER$ . $NUMBER$ * / exp ( x ) ;
rank: 510
score: 99.1163838704427
patch: return 0 . $NUMBER$ * x * x * 0 ;
rank: 510
score: 99.0242919921875
patch: return 0 * x ( x * x ) ;
rank: 510
score: 99.01434881036931
patch: return ( exp ( x ) - 0 ) ;
rank: 510
score: 98.97224564985795
patch: return x + exp ( x - x ) ;
rank: 511
score: 99.19597919170673
patch: return 0 . $NUMBER$ * exp ( x ) ? 1 ;
rank: 511
score: 98.9713467684659
patch: return ( exp ( x - x ) ) ;
rank: 511
score: 98.85938720703125
patch: return * $NUMBER$ * exp ( x ) ;
rank: 512
score: 99.14080341045673
patch: return x . $NUMBER$ * exp ( x ) / $NUMBER$ ;
rank: 512
score: 99.11439005533855
patch: return 0 . $NUMBER$ * 0 * 0 . 0 ;
rank: 512
score: 99.0232821377841
patch: exp ( x , x ) ; return x ;
rank: 512
score: 99.01402698863636
patch: return 0 ; } if ( x > $NUMBER$ )
rank: 512
score: 98.9712801846591
patch: return exp ( x - 0 . 0 ) ;
rank: 512
score: 98.85932922363281
patch: return 0 . $NUMBER$ ; } }
rank: 513
score: 99.14013671875
patch: return 0 . $NUMBER$ * exp ( 0 ) ; }
rank: 513
score: 99.1234600360577
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; } else
rank: 513
score: 99.11400257457386
patch: return 0 * 0 . exp ( x ) ;
rank: 513
score: 99.02293812144886
patch: return 0 * exp * exp ( x ) ;
rank: 513
score: 98.9693603515625
patch: return - 0 . $NUMBER$ * x . $NUMBER$ ;
rank: 513
score: 98.85879855685764
patch: if ( x <= 0 . $NUMBER$ )
rank: 514
score: 99.14011793870192
patch: . . return 0 . 0 * exp ( x ) ;
rank: 514
score: 99.1137186686198
patch: return Double . 0 * exp exp ( x ) ;
rank: 514
score: 99.0225497159091
patch: return 0 . $NUMBER$ * copy ( x ) ;
rank: 514
score: 98.85877685546875
patch: return - x . sinh ( x ) ;
rank: 515
score: 99.13998647836539
patch: / * return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 515
score: 99.12672119140625
patch: return 0 . 0 * $NUMBER$ * x ;
rank: 515
score: 99.12344563802084
patch: return 0 . $NUMBER$ . $NUMBER$ * exp ( x ) ; } else
rank: 515
score: 99.11278279622395
patch: return 0 . 0 * x * 0 . $NUMBER$ ;
rank: 515
score: 99.02154541015625
patch: return exp ( x ) ; ;
rank: 515
score: 98.9688387784091
patch: return x . sinh ( x , x ) ;
rank: 515
score: 98.85809326171875
patch: return exp ( - x ) ; }
rank: 516
score: 99.1265869140625
patch: return 0 . 0 * 0 * $NUMBER$ * $NUMBER$ ;
rank: 516
score: 99.123291015625
patch: return 0 . $NUMBER$ * - ( x ) ;
rank: 516
score: 99.1121317545573
patch: return 0 . $NUMBER$ * ( x + $NUMBER$ ) ;
rank: 516
score: 99.0212631225586
patch: return 0 . $NUMBER$ - x ;
rank: 516
score: 98.96849476207386
patch: return exp ( x - x - x ) ;
rank: 516
score: 98.85782199435764
patch: return ( 0 . $NUMBER$ ) ; }
rank: 517
score: 98.85757785373264
patch: if ( x <= 0 ) break ;
rank: 518
score: 99.14723557692308
patch: return exp ( x , 0 . 0 , $NUMBER$ ) ;
rank: 518
score: 99.13816481370192
patch: return 0 ; ; } else { return 0 . 0 ;
rank: 518
score: 99.12632242838542
patch: = ( x == 0 ) ? 0 : 0 ;
rank: 518
score: 99.01994185014205
patch: return 0 * exp ( x . x ) ;
rank: 519
score: 99.19385637555804
patch: result = 0 . $NUMBER$ * exp ( x + x ) ;
rank: 519
score: 99.0054931640625
patch: return 0 . 0 , exp ( x ) ;
rank: 519
score: 98.855029296875
patch: if ( x < 0 . $NUMBER$ ) {
rank: 520
score: 99.01985307173295
patch: return 0 . $NUMBER$ & exp ( x ) ;
rank: 520
score: 98.85356987847223
patch: return ( ( double ) x ) ;
rank: 521
score: 99.1466815655048
patch: return - $NUMBER$ . 1 * exp ( - x ) ;
rank: 521
score: 99.12461159446023
patch: return 0 . 0 * float ( x ) ;
rank: 521
score: 99.12290736607143
patch: return ( - 1 . $NUMBER$ * exp ( x ) ) ;
rank: 521
score: 99.0194979580966
patch: return $NUMBER$ * exp ( x ) * x ;
rank: 521
score: 98.9651766690341
patch: return 0 - exp ( x , x ) ;
rank: 521
score: 98.85346069335938
patch: if ( x <= 0 ) return 0 ;
rank: 522
score: 99.12445068359375
patch: return - 0 . $NUMBER$ * x ( x ) ;
rank: 522
score: 99.10736638849431
patch: return 0 . exp ( x , x ) ;
rank: 522
score: 99.01917613636364
patch: return exp ( double ) exp ( x ) ;
rank: 522
score: 98.96446644176136
patch: x = 0 . $NUMBER$ ; negate = true ;
rank: 522
score: 98.84972466362848
patch: return - exp ( - 0 ) ;
rank: 523
score: 99.14623006184895
patch: return $NUMBER$ . 1 * exp ( - x ) ;
rank: 523
score: 99.13671875
patch: return 0 . 0 $NUMBER$ * exp ( x ) ;
rank: 523
score: 99.12203543526786
patch: return x - - 0 . $NUMBER$ * exp ( x ) ;
rank: 523
score: 99.01833274147727
patch: return 0 * exp ( x ) / 1 ;
rank: 523
score: 98.84965515136719
patch: return new exp ( x ) ;
rank: 524
score: 99.19041090745192
patch: return 0 . $NUMBER$ * exp ( x / length ) ;
rank: 524
score: 99.1057637532552
patch: return 0 . $NUMBER$ * exp ( x * 0 ;
rank: 524
score: 98.84932454427083
patch: if ( x == 0 . $NUMBER$ )
rank: 525
score: 99.19040934244792
patch: return 0 . $NUMBER$ exp ( x , x ) ;
rank: 525
score: 99.13651216947116
patch: return x * $NUMBER$ . 0 * exp ( x ) ;
rank: 525
score: 99.12379964192708
patch: return 0 . 0 ; x = 0 . 0 ;
rank: 525
score: 99.1055399576823
patch: return 0 . $NUMBER$ . $NUMBER$ * x * x ;
rank: 525
score: 98.84892578125
patch: if ( x > $NUMBER$ ) return 0 ;
rank: 526
score: 99.18909630408653
patch: return 0 * x . $NUMBER$ * exp ( x ) ;
rank: 526
score: 99.12265450613839
patch: return - 1 . $NUMBER$ ;
rank: 526
score: 99.12166654146634
patch: return - 0 . $NUMBER$ * exp ( x ) ] ;
rank: 526
score: 99.01725463867187
patch: return 0 . $NUMBER$ * $NUMBER$ . 1 ;
rank: 526
score: 98.96101518110795
patch: if ( x == x ) { return x ;
rank: 526
score: 98.848388671875
patch: return - 0 ; } else {
rank: 527
score: 99.14491271972656
patch: return new double [ 1 ] ;
rank: 527
score: 99.13620827414773
patch: return 0 . 0 * / exp ( ) ;
rank: 527
score: 99.12153843470982
patch: return 0 . $NUMBER$ ; } if ( x > $NUMBER$ ) {
rank: 527
score: 99.1053466796875
patch: return $NUMBER$ . exp ( x ) ;
rank: 527
score: 99.01694946289062
patch: return 0 . $NUMBER$ : 0 . $NUMBER$ ;
rank: 527
score: 98.96002875434027
patch: return exp ( x - $NUMBER$ ) ;
rank: 528
score: 99.14483173076923
patch: return - 0 . $NUMBER$ / exp ( x ) ; }
rank: 528
score: 99.13618977864583
patch: return 0 . 0 ) * exp ( x ) ;
rank: 528
score: 99.12079412286931
patch: return 0 . $NUMBER$ * format ( x ) ;
rank: 528
score: 99.016357421875
patch: return 0 . $NUMBER$ + value ( x ) ;
rank: 528
score: 98.84384155273438
patch: if ( x <= $NUMBER$ ) return x ;
rank: 529
score: 99.13531963641827
patch: return 0 . $NUMBER$ / exp ( x / $NUMBER$ ) ;
rank: 529
score: 99.01582475142045
patch: return 0 . $NUMBER$ ^ exp ( x ) ;
rank: 529
score: 98.84383544921874
patch: if ( x == 0 . $NUMBER$ ) {
rank: 530
score: 99.1443340594952
patch: return 0 . $NUMBER$ / exp ( - x ) ; }
rank: 530
score: 99.1202901204427
patch: return Math . round ( exp ( x ) ) ;
rank: 530
score: 99.01556951349431
patch: return exp ( x + 0 . 0 ) ;
rank: 530
score: 98.95765269886364
patch: return HEX _ $NUMBER$ * exp ( x ) ;
rank: 530
score: 98.84372965494792
patch: if ( x > $NUMBER$ ) break ;
rank: 531
score: 99.13417561848958
patch: synchronized ( 0 ) { return 0 . $NUMBER$ ; }
rank: 531
score: 99.11995755709134
patch: return 0 . $NUMBER$ * exp ( x > x ) ;
rank: 531
score: 99.11875221946023
patch: return 0 * exp ( x * $NUMBER$ ) ;
rank: 531
score: 99.10359700520833
patch: return 0 0 . $NUMBER$ * exp ( x ) ;
rank: 531
score: 99.0146151455966
patch: return $NUMBER$ . $NUMBER$ * get ( x ) ;
rank: 532
score: 99.13395182291667
patch: return 0 . 0 ;
rank: 532
score: 99.10324096679688
patch: return 0 * 0 . $NUMBER$ ;
rank: 532
score: 99.01441192626953
patch: } return exp ( x ) ;
rank: 532
score: 98.99668190696023
patch: return 0 ; } if ( x >= 0 )
rank: 532
score: 98.95343017578125
patch: return x + 0 . $NUMBER$ ;
rank: 532
score: 98.84237670898438
patch: return 0 . $NUMBER$ ; } else { }
rank: 533
score: 99.18679574819711
patch: return 0 . $NUMBER$ * exp ( exp - x ) ;
rank: 533
score: 99.13392052283653
patch: return 0 . $NUMBER$ * 0 * exp ( $NUMBER$ ) ;
rank: 533
score: 99.10277303059895
patch: return 0 . $NUMBER$ * exp ( x ) . }
rank: 533
score: 99.01394314236111
patch: result = 0 . $NUMBER$ * x ;
rank: 533
score: 98.84207492404514
patch: return exp ( x - 0 ) ;
rank: 534
score: 99.13323296440973
patch: return double CaMeL Value ( x ) ;
rank: 534
score: 99.01381225585938
patch: return 0 * 0 . $NUMBER$ * $NUMBER$ ;
rank: 534
score: 98.99562766335227
patch: return - 0 ; } else { return 0 ;
rank: 534
score: 98.9512939453125
patch: return ( - x - x ) ;
rank: 534
score: 98.84197319878473
patch: return - ( 0 . 0 ) ;
rank: 535
score: 99.11759440104167
patch: = 0 . $NUMBER$ * exp ( x ) ; ;
rank: 535
score: 99.10159301757812
patch: return ( 0 . $NUMBER$ * 0 . $NUMBER$ ) ;
rank: 535
score: 99.013720703125
patch: return 0 . $NUMBER$ * $NUMBER$ . 0 ;
rank: 535
score: 98.9950284090909
patch: return x ; } return exp ( x ) ;
rank: 535
score: 98.84177856445312
patch: if ( x <= 0 . $NUMBER$ ) {
rank: 536
score: 99.13272094726562
patch: if ( 0 == x ) { return 0 ; }
rank: 536
score: 99.11700439453125
patch: double return 0 . 0 * exp ( x ) ;
rank: 536
score: 99.10108439127605
patch: return 0 * exp ( x ) ; return x ;
rank: 536
score: 99.01313920454545
patch: return 0 = 0 * exp ( x ) ;
rank: 536
score: 98.94950727982955
patch: return - 0 . $NUMBER$ * 1 . $NUMBER$ ;
rank: 536
score: 98.84157307942708
patch: return 0 . $NUMBER$ ; } * /
rank: 537
score: 99.1184551532452
patch: double x = 0 . $NUMBER$ * exp ( x ) ;
rank: 537
score: 99.11663818359375
patch: return 0 . $NUMBER$ * $NUMBER$ * 0 . 0 ;
rank: 537
score: 99.1007588704427
patch: return 0 . $NUMBER$ * exp = 0 . $NUMBER$ ;
rank: 537
score: 99.01295776367188
patch: return ( Double ) exp ( x ) ;
rank: 537
score: 98.84104701450893
patch: if ( x <= 0 )
rank: 538
score: 99.13013712565105
patch: return 0 . 0 * exp ( x * x ;
rank: 538
score: 99.11832972935268
patch: double 0 = 0 . $NUMBER$ * exp ( - x ) ;
rank: 538
score: 99.11598899147727
patch: return 1 . $NUMBER$ * x ( x ) ;
rank: 538
score: 99.10064697265625
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) ; /
rank: 538
score: 99.0128173828125
patch: return exp ( x ) ) ;
rank: 538
score: 98.99329723011364
patch: return 0 . Math * exp ( x ) ;
rank: 538
score: 98.84088134765625
patch: if ( x == $NUMBER$ ) return x ;
rank: 539
score: 99.10024007161458
patch: return 0 . $NUMBER$ * exp * 0 . $NUMBER$ ;
rank: 539
score: 99.01244354248047
patch: return ( x + x ) ;
rank: 539
score: 98.83980015345982
patch: return $NUMBER$ . $NUMBER$ ; }
rank: 540
score: 99.12991333007812
patch: return x ; } else { return 0 . 0 ;
rank: 540
score: 98.93996853298611
patch: x = 0 . $NUMBER$ * x ;
rank: 540
score: 98.83858235677083
patch: return 0 . 1 . $NUMBER$ ; }
rank: 541
score: 99.1842510516827
patch: return 0 . $NUMBER$ * 0 = exp ( x ) ;
rank: 541
score: 99.11271158854167
patch: return 0 . 0 * 0 * 0 . 0 ;
rank: 541
score: 99.0116455078125
patch: return 0 . $NUMBER$ * x . $NUMBER$ ;
rank: 542
score: 99.1390380859375
patch: return 0 . 0 + exp ( - $NUMBER$ ) ;
rank: 542
score: 99.11220296223958
patch: return 0 . $NUMBER$ ; x = 0 . 0 ;
rank: 542
score: 99.09898885091145
patch: return 0 * $NUMBER$ * exp ( x ) ) ;
rank: 542
score: 99.01021728515624
patch: return ( x + x + x ) ;
rank: 542
score: 98.93849487304688
patch: return $NUMBER$ - exp ( - x ) ;
rank: 542
score: 98.83680419921875
patch: / * / negate ( - x ) ;
rank: 543
score: 99.1173846905048
patch: val = 0 . $NUMBER$ * exp ( - x ) ;
rank: 543
score: 99.11195882161458
patch: return - 1 . 1 * exp ( x ) ;
rank: 543
score: 99.00999866832386
patch: return 0 + 0 + exp ( x ) ;
rank: 543
score: 98.93803575303819
patch: result = exp ( - x ) ;
rank: 543
score: 98.83671875
patch: return - ( 0 . $NUMBER$ ) ; }
rank: 544
score: 99.1829082782452
patch: return 0 . $NUMBER$ * exp ( x ) == 0 ;
rank: 544
score: 99.13856090198864
patch: return - - $NUMBER$ * exp ( x ) ;
rank: 544
score: 99.1289950284091
patch: return 0 . $NUMBER$ / exp ( $NUMBER$ ) ;
rank: 544
score: 99.11180623372395
patch: = 0 . 0 * exp ( x ) ; ;
rank: 544
score: 99.00954367897727
patch: return 0 + exp ( x ) - x ;
rank: 544
score: 98.9360595703125
patch: return ( x - $NUMBER$ . $NUMBER$ ) ;
rank: 544
score: 98.83589172363281
patch: return - negate ( x ) ;
rank: 545
score: 99.11172485351562
patch: return 0 . $NUMBER$ * Double . MAX _ VALUE ;
rank: 545
score: 99.00914417613636
patch: return 0 * exp ( 0 + x ) ;
rank: 545
score: 98.83378092447917
patch: return sinh ( x , 0 ) ;
rank: 546
score: 99.12885076349431
patch: return 0 ; } else return 0 . 0 ;
rank: 546
score: 99.11107381184895
patch: = - 0 . 0 * exp ( x ) ;
rank: 546
score: 99.09820556640625
patch: return 0 . $NUMBER$ * x + 0 . $NUMBER$ ;
rank: 546
score: 99.00895552201705
patch: return 0 * x ( x ) * x ;
rank: 546
score: 98.83369276258681
patch: if ( x < 0 . 0 )
rank: 547
score: 99.1820819561298
patch: return 0 . $NUMBER$ * exp ( x ) & 1 ;
rank: 547
score: 99.13777982271634
patch: return 0 . 0 * exp ( - - $NUMBER$ ) ;
rank: 547
score: 99.11578369140625
patch: return $NUMBER$ . $NUMBER$ * - exp ( x ) ;
rank: 547
score: 99.10969682173295
patch: return 0 * exp ( x / $NUMBER$ ) ;
rank: 547
score: 99.09794477982955
patch: return 0 . $NUMBER$ ; return 0 . $NUMBER$ ;
rank: 547
score: 99.00844116210938
patch: return $NUMBER$ . $NUMBER$ * exp ( ) ;
rank: 547
score: 98.98699396306819
patch: return 0 ; } else { negate = true ;
rank: 547
score: 98.92858208550348
patch: return - 0 . $NUMBER$ + x ;
rank: 547
score: 98.8313217163086
patch: if ( x <= 0 ) {
rank: 548
score: 99.18194025213069
patch: return 0 . $NUMBER$ * exp ( x ) }
rank: 548
score: 99.12704467773438
patch: return 0 . $NUMBER$ / * exp ( x ) ;
rank: 548
score: 99.10958862304688
patch: return 0 . $NUMBER$ x - exp ( x ) ;
rank: 548
score: 99.00830078125
patch: return exp ( x ) * x * x ;
rank: 548
score: 98.92821587456598
patch: return - x + 0 . $NUMBER$ ;
rank: 549
score: 99.00795676491477
patch: return 0 = $NUMBER$ + exp ( x ) ;
rank: 549
score: 98.82737223307292
patch: if ( x >= 0 ) break ;
rank: 550
score: 99.1353759765625
patch: return 1 . 1 * exp ( - x ) ;
rank: 550
score: 99.10946655273438
patch: return 0 . 0 * exp ( float ) x ;
rank: 550
score: 99.09749348958333
patch: return 0 . $NUMBER$ * exp ( x ) ; :
rank: 550
score: 99.00646362304687
patch: return 0 . $NUMBER$ + $NUMBER$ . $NUMBER$ ;
rank: 550
score: 98.9245849609375
patch: return 0 . $NUMBER$ sinh ( x ) ;
rank: 550
score: 98.82449001736111
patch: double sinh = exp ( x ) ;
rank: 551
score: 99.18085186298077
patch: return 0 * exp ( x / 0 . 0 ) ;
rank: 551
score: 99.00600857204861
patch: return 0 * value ( x ) ;
rank: 551
score: 98.98407537286931
patch: return 0 . $NUMBER$ , exp ( x ) ;
rank: 551
score: 98.92218017578125
patch: result = - 0 . $NUMBER$ * x ;
rank: 552
score: 99.17974384014423
patch: return 0 . 1 . 1 * exp ( x ) ;
rank: 552
score: 99.13116455078125
patch: return 0 . $NUMBER$ * new double [ 0 ] ;
rank: 552
score: 99.11434733072916
patch: return ( x + 0 . $NUMBER$ * exp ( x ) ) ;
rank: 552
score: 99.10898844401042
patch: return ( double ) Math . abs ( x ) ;
rank: 552
score: 99.00554865056819
patch: return 0 . $NUMBER$ * this . x ) ;
rank: 552
score: 98.98340953480114
patch: return 0 ; } if ( x == $NUMBER$ )
rank: 552
score: 98.82107107979911
patch: if ( x > $NUMBER$ )
rank: 553
score: 99.13035999644886
patch: return - 0 * exp ( - $NUMBER$ ) ;
rank: 553
score: 99.11410958426339
patch: return - 0 . $NUMBER$ * exp / exp ( x ) ;
rank: 553
score: 99.09499289772727
patch: return 0 . $NUMBER$ * exp 0 * x ;
rank: 553
score: 99.00545925564236
patch: return 0 . 0 * x ) ;
rank: 553
score: 98.81913926866319
patch: return $NUMBER$ - exp ( x ) ;
rank: 554
score: 99.17949969951923
patch: return 0 . $NUMBER$ * exp ( x ) == 1 ;
rank: 554
score: 99.12445678710938
patch: return 0 . $NUMBER$ / ( x ) ;
rank: 554
score: 99.11378696986607
patch: return - 0 . $NUMBER$ * exp ( x ) * $NUMBER$ ;
rank: 554
score: 99.10633544921875
patch: return 1 . 0 * ( x ) ;
rank: 554
score: 99.0924405184659
patch: return $NUMBER$ * exp ( x * x ) ;
rank: 554
score: 98.98246626420455
patch: while ( x > 0 ) { return x ;
rank: 554
score: 98.91795349121094
patch: return - ( - x ) ;
rank: 554
score: 98.81834581163194
patch: if ( x >= 0 . $NUMBER$ )
rank: 555
score: 99.12257893880208
patch: return 0 . 0 / exp ( x ) ; }
rank: 555
score: 99.09197998046875
patch: return 0 * 0 . $NUMBER$ * x ;
rank: 555
score: 99.00469360351562
patch: return 0 * * exp ( x ) ;
rank: 555
score: 98.81722683376736
patch: return exp ( 0 . 0 ) ;
rank: 556
score: 99.1785419170673
patch: return 0 . $NUMBER$ + exp ( x + 1 ) ;
rank: 556
score: 99.12886555989583
patch: return 1 . $NUMBER$ + exp ( - x ) ;
rank: 556
score: 99.12253824869792
patch: return ( double ) 0 * exp ( x ) ;
rank: 556
score: 99.11321614583333
patch: return 0 . 0 * exp ( - 0 . 0 ) ; }
rank: 556
score: 99.09197319878473
patch: return 0 . abs ( x ) ;
rank: 556
score: 99.00438343394886
patch: exp ( x ) ; exp ( x ) ;
rank: 556
score: 98.98225541548295
patch: return 0 . $NUMBER$ * exp ( max ) ;
rank: 556
score: 98.9176025390625
patch: x += exp ( - x ) ;
rank: 557
score: 99.11304728190105
patch: return double 1 . $NUMBER$ * exp ( x ) ;
rank: 557
score: 98.91753472222223
patch: return ( - x - $NUMBER$ ) ;
rank: 557
score: 98.81659613715277
patch: if ( x == 0 . 0 )
rank: 558
score: 99.1204121907552
patch: return 0 . $NUMBER$ / exp ( x ) ) ;
rank: 558
score: 99.10557047526042
patch: return 0 . 0 * - exp ( x ) ;
rank: 558
score: 99.08751331676136
patch: return 0 . $NUMBER$ * exp $NUMBER$ * x ;
rank: 558
score: 99.00409490411931
patch: return 0 * exp ( x ) < 0 ;
rank: 558
score: 98.81651475694444
patch: return exp ( x - 1 ) ;
rank: 559
score: 99.11270345052084
patch: if ( x > 0 . 0 ) { return 0 . $NUMBER$ ;
rank: 559
score: 99.00321821732955
patch: return x * $NUMBER$ + exp ( x ) ;
rank: 559
score: 98.9167709350586
patch: return ( x == 0 ) ;
rank: 560
score: 99.17801607572116
patch: return 0 . 0 * exp ( x / 0 ) ;
rank: 560
score: 99.127685546875
patch: return x * exp ( - x ) ;
rank: 560
score: 99.1198018391927
patch: return x ; } else { return 0 . $NUMBER$ ;
rank: 560
score: 99.11234537760417
patch: return exp ( 0 . $NUMBER$ * exp ( - x ) ) ;
rank: 560
score: 99.08637029474431
patch: return 0 * ( exp ( x ) ) ;
rank: 560
score: 98.81570095486111
patch: if ( x <= 0 . 0 )
rank: 561
score: 99.12664794921875
patch: return 1 . $NUMBER$ / exp ( - x ) ;
rank: 561
score: 99.11142985026042
patch: return double 0 . $NUMBER$ * exp ( x ) ;
rank: 561
score: 99.10507202148438
patch: return 0 . $NUMBER$ * x * x / x ;
rank: 561
score: 99.08547141335227
patch: return 0 . $NUMBER$ * 0 * x $NUMBER$ ;
rank: 561
score: 99.0021084872159
patch: if ( x < x ) { return 0 ;
rank: 561
score: 98.814697265625
patch: temp = exp ( x ) ;
rank: 562
score: 99.17731182391827
patch: return 0 . $NUMBER$ * exp ( x ) != 0 ;
rank: 562
score: 99.12624104817708
patch: return 0 . $NUMBER$ + ( x - x ) ;
rank: 562
score: 99.10419311523438
patch: return 0 [ exp ( x ) ] ;
rank: 562
score: 98.91435895647321
patch: result += 0 . $NUMBER$ ;
rank: 562
score: 98.814697265625
patch: x = x ; negate = true ;
rank: 563
score: 99.17722731370192
patch: return 0 return $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 563
score: 99.1175028483073
patch: return 0 . $NUMBER$ * exp ( x ) / ;
rank: 563
score: 99.08364035866477
patch: return 0 . $NUMBER$ * exp ( 0 . ;
rank: 563
score: 99.0020751953125
patch: return 0 ; return exp ( x ) ;
rank: 563
score: 98.9136962890625
patch: return - - 0 . $NUMBER$ * x ;
rank: 563
score: 98.81464385986328
patch: if ( x >= 0 ) {
rank: 564
score: 99.1768798828125
patch: return 0 . $NUMBER$ * exp ( x ) . length ;
rank: 564
score: 99.12497965494792
patch: return 0 . 0 * exp ( - 1 ) ;
rank: 564
score: 99.11739095052083
patch: return 0 . $NUMBER$ * exp ( ) / $NUMBER$ ;
rank: 564
score: 99.10385131835938
patch: return 0 . $NUMBER$ * ( x ) + x ;
rank: 564
score: 99.08238389756944
patch: return 0 . $NUMBER$ * ( x ;
rank: 564
score: 99.00193093039773
patch: return 0 * exp ( x ) == 0 ;
rank: 565
score: 99.11726518110795
patch: return 0 . $NUMBER$ / exp ( 0 ) ;
rank: 565
score: 99.1090087890625
patch: return - 0 . $NUMBER$ * x - exp ( x ) ;
rank: 565
score: 99.10366821289062
patch: return 0 . 0 * exp ( x ) x ;
rank: 565
score: 99.0016202059659
patch: return ( exp ( x + x ) ) ;
rank: 565
score: 98.91275634765626
patch: return exp ( - x , x ) ;
rank: 565
score: 98.81452287946429
patch: return - 0 . 1 ;
rank: 566
score: 99.12249755859375
patch: return 0 . 0 / exp ( - $NUMBER$ ) ;
rank: 566
score: 99.11716918945312
patch: return 0 ; } return 0 . 0 ;
rank: 566
score: 99.10888671875
patch: return - 0 . 0 * exp ( x ) ; } else {
rank: 567
score: 99.10321044921875
patch: return ( 0 . 0 ) * 0 . 0 ;
rank: 567
score: 99.07998046875
patch: return Double . $NUMBER$ * ( x ) ;
rank: 567
score: 98.96963500976562
patch: return x . exp ( - x ) ;
rank: 568
score: 99.12108265269886
patch: return 0 . $NUMBER$ * HEX _ $NUMBER$ ; }
rank: 568
score: 99.1024658203125
patch: return 0 . $NUMBER$ + ( x ) ;
rank: 568
score: 99.07936789772727
patch: return ( x . exp ( x ) ) ;
rank: 568
score: 98.910302734375
patch: return x + negate ( - x ) ;
rank: 568
score: 98.81207275390625
patch: exp ( x , - x ) ;
rank: 569
score: 99.11985270182292
patch: return 0 . 1 - exp ( - x ) ;
rank: 569
score: 99.11602228338069
patch: return 0 ; } else return 0 . $NUMBER$ ;
rank: 569
score: 99.10186767578125
patch: double CaMeL Value ( ) * exp ( x ) ;
rank: 569
score: 99.07890625
patch: return ( 0 . 0 * x ) ;
rank: 569
score: 98.99930419921876
patch: return 0 * $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 569
score: 98.90912543402777
patch: return - ( x - $NUMBER$ ) ;
rank: 569
score: 98.81113009982639
patch: return 0 . $NUMBER$ * - x ;
rank: 570
score: 99.07883522727273
patch: return ( 0 . $NUMBER$ * x ) ) ;
rank: 570
score: 98.99886474609374
patch: return 0 . $NUMBER$ . 1 * x ;
rank: 571
score: 99.1730205829327
patch: return 0 . $NUMBER$ * exp ( x ) / 0 ;
rank: 571
score: 99.1146748860677
patch: return 0 . $NUMBER$ * / exp ( 0 ) ;
rank: 571
score: 99.10032435825893
patch: return - 1 . 0 ;
rank: 571
score: 98.99820556640626
patch: return - $NUMBER$ + exp ( x ) ;
rank: 571
score: 98.96275634765625
patch: return exp ( x , - 0 ) ;
rank: 571
score: 98.90691528320312
patch: return x + 0 . $NUMBER$ * x ;
rank: 572
score: 99.17298302283653
patch: return 0 . 0 * exp ( $NUMBER$ , x ) ;
rank: 572
score: 99.10747419084821
patch: return x > 0 . 0 * exp ( - x ) ;
rank: 572
score: 99.09899291992187
patch: return x . long CaMeL Value ( ) ;
rank: 572
score: 98.80812581380208
patch: if ( x < $NUMBER$ ) break ;
rank: 573
score: 99.1138916015625
patch: if ( 0 != x ) { return 0 ; }
rank: 573
score: 99.09799194335938
patch: return 0 . $NUMBER$ ; x = 0 . $NUMBER$ ;
rank: 573
score: 99.0766934481534
patch: return 0 . $NUMBER$ * round ( x ) ;
rank: 573
score: 98.80687798394098
patch: return - ( x - x ) ;
rank: 574
score: 98.80687120225694
patch: return - x ; } return x ;
rank: 575
score: 99.10677664620536
patch: return x + - 0 . $NUMBER$ * exp ( x ) ;
rank: 575
score: 98.99403076171875
patch: } else { return exp ( x ) ;
rank: 575
score: 98.953369140625
patch: return ( x > 0 ) + x ;
rank: 576
score: 99.11299641927083
patch: return 0 . $NUMBER$ ; * exp ( x ) ;
rank: 576
score: 99.11297607421875
patch: { return 0 . 0 * exp ( x ) ;
rank: 576
score: 98.90523681640624
patch: return ( x > 0 . $NUMBER$ ) ;
rank: 576
score: 98.80587332589286
patch: if ( x >= 0 )
rank: 577
score: 99.1712646484375
patch: return $NUMBER$ = 0 . $NUMBER$ * exp ( x ) ;
rank: 577
score: 99.10617501395089
patch: return 0 . $NUMBER$ * exp * exp ( - x ) ;
rank: 577
score: 98.80266655815973
patch: return exp ( x ) . x ;
rank: 578
score: 99.17111440805289
patch: return 0 . $NUMBER$ * exp ( x ) return 0 ;
rank: 578
score: 99.1060791015625
patch: return x ; } if ( x == 0 . 0 ) {
rank: 578
score: 98.99057006835938
patch: return 0 . 0 * $NUMBER$ . $NUMBER$ ;
rank: 578
score: 98.90458374023437
patch: return 0 . $NUMBER$ double ( x ) ;
rank: 578
score: 98.80141775948661
patch: return - $NUMBER$ . $NUMBER$ ;
rank: 579
score: 99.0851162997159
patch: = $NUMBER$ . 0 * exp ( x ) ;
rank: 579
score: 98.90454779730902
patch: return - 0 . $NUMBER$ * 0 ;
rank: 579
score: 98.80109514508929
patch: if ( x < $NUMBER$ )
rank: 580
score: 99.1704571063702
patch: return 0 . $NUMBER$ * exp ( x ) . value ;
rank: 580
score: 99.10797119140625
patch: return 0 . $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 580
score: 99.10572398792614
patch: return x - $NUMBER$ * exp ( x ) ;
rank: 580
score: 99.08463911576705
patch: return ( double ) ( 0 . 0 ) ;
rank: 580
score: 98.94505615234375
patch: return 0 . 0 ; } return x ;
rank: 580
score: 98.9044189453125
patch: result += exp ( - x ) ;
rank: 580
score: 98.8008041381836
patch: return ( x - x ) ;
rank: 581
score: 99.16924579326923
patch: return 0 . $NUMBER$ exp $NUMBER$ * exp ( x ) ;
rank: 581
score: 99.10994466145833
patch: return 0 . 0 * / exp ( $NUMBER$ ) ;
rank: 581
score: 99.10527692522321
patch: return 0 . $NUMBER$ * exp ( x + - $NUMBER$ ) ;
rank: 581
score: 98.94375610351562
patch: return 0 ; } return x ;
rank: 581
score: 98.80069308810764
patch: return - 0 . $NUMBER$ ; } }
rank: 582
score: 99.169189453125
patch: return 0 . 0 * exp ( x + length ) ;
rank: 582
score: 99.10493687220982
patch: return 0 . $NUMBER$ * exp ( 0 . $NUMBER$ ) ; }
rank: 582
score: 99.06697387695313
patch: return 0 . $NUMBER$ * 0 . ) ;
rank: 582
score: 98.988525390625
patch: return 1 + exp ( x ) ;
rank: 582
score: 98.902099609375
patch: x = exp ( x - x ) ;
rank: 582
score: 98.7996826171875
patch: return sinh ( x , x ) ;
rank: 583
score: 99.10901988636364
patch: return Double . ZERO * exp ( x ) ;
rank: 583
score: 99.08322975852273
patch: return 0 . $NUMBER$ * ( ( x ) ;
rank: 583
score: 99.06683904474431
patch: return $NUMBER$ . $NUMBER$ * max ( x ) ;
rank: 583
score: 98.9862772623698
patch: return 0 * $NUMBER$ ;
rank: 583
score: 98.79897732204861
patch: return 0 . $NUMBER$ * x ; }
rank: 584
score: 99.10711669921875
patch: return Double . $NUMBER$ * exp ( x ) ; ;
rank: 584
score: 99.10460316051136
patch: return 0 . $NUMBER$ * exp 1 . $NUMBER$ ;
rank: 584
score: 99.1044413248698
patch: return Double . 1 * exp ( - x ) ;
rank: 584
score: 99.08103249289773
patch: return - 0 . $NUMBER$ * this . x ;
rank: 584
score: 98.94132690429687
patch: return ( x > $NUMBER$ ) + x ;
rank: 584
score: 98.79802110460069
patch: double x = exp ( x ) ;
rank: 585
score: 99.10445149739583
patch: return $NUMBER$ . $NUMBER$ * exp ( - 0 . $NUMBER$ ) ; }
rank: 585
score: 99.10432942708333
patch: return 0 . $NUMBER$ / - exp ( x ) ;
rank: 585
score: 98.984521484375
patch: return 0 * exp ( double ) x ;
rank: 585
score: 98.9390869140625
patch: return 0 . max ( x ) ;
rank: 585
score: 98.79655456542969
patch: if ( x < $NUMBER$ ) {
rank: 586
score: 99.16744290865384
patch: return 0 . $NUMBER$ * exp ( x ( x ) ;
rank: 586
score: 99.0642422762784
patch: return 0 . Double * exp ( x ) ;
rank: 586
score: 98.984423828125
patch: } return exp ( x , x ) ;
rank: 586
score: 98.79592895507812
patch: return * exp ( x ) ;
rank: 587
score: 99.16636305588942
patch: return 0 . $NUMBER$ * exp ( x - length ) ;
rank: 587
score: 99.10599772135417
patch: return 0 . 0 * exp ( x - x ;
rank: 587
score: 99.064111328125
patch: return 0 . $NUMBER$ * x + x ;
rank: 587
score: 98.98359375
patch: return 0 . 0 * 0 . $NUMBER$ ;
rank: 587
score: 98.79534233940973
patch: return - negate ( - x ) ;
rank: 588
score: 99.16629732572116
patch: return exp ( x , x , x , x ) ;
rank: 588
score: 99.06287730823864
patch: return 0 . 0 * abs ( x ) ;
rank: 588
score: 98.93618774414062
patch: return ( x < 0 ) ;
rank: 588
score: 98.89742431640624
patch: result = x . sinh ( x ) ;
rank: 588
score: 98.79478624131944
patch: return - 0 . HEX _ $NUMBER$ ;
rank: 589
score: 99.16603440504808
patch: return 0 . $NUMBER$ * exp ( x ) ? ) ;
rank: 589
score: 99.10530229048295
patch: return 0 / 0 * exp ( x ) ;
rank: 589
score: 99.10237630208333
patch: return new double [ ( x - $NUMBER$ ) ] ;
rank: 589
score: 99.10236002604167
patch: return - 0 . $NUMBER$ ; } if ( x > 0 ) {
rank: 589
score: 99.06235573508523
patch: return Double . x * exp ( x ) ;
rank: 589
score: 98.89678344726562
patch: return 0 . $NUMBER$ ( - x ) ;
rank: 589
score: 98.79256863064236
patch: return $STRING$ . sinh ( x ) ;
rank: 590
score: 99.10516357421875
patch: return x $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 590
score: 99.10223943536931
patch: return 0 . 1 - exp ( x ) ;
rank: 590
score: 99.10093470982143
patch: double x = 0 . $NUMBER$ * exp ( - x ) ;
rank: 590
score: 98.98029920789931
patch: break 0 * exp ( x ) ;
rank: 590
score: 98.89618530273438
patch: return exp ( - x - 0 ) ;
rank: 590
score: 98.79164632161458
patch: return - new double [ $NUMBER$ ] ;
rank: 591
score: 99.16398111979167
patch: return 0 . $NUMBER$ * exp ( x ) 0 ;
rank: 591
score: 99.10478071732955
patch: return Double . Na CaMeL N ( x ) ;
rank: 591
score: 98.97960069444444
patch: return 0 * x ( x ) ;
rank: 591
score: 98.79131208147321
patch: return sinh ( x ) ;
rank: 592
score: 99.16253662109375
patch: return 0 * exp ( x ) [ 0 ] ;
rank: 592
score: 99.10072021484375
patch: return exp ( - 1 . $NUMBER$ ) ;
rank: 592
score: 99.06099700927734
patch: return $NUMBER$ . $NUMBER$ * 0 ;
rank: 592
score: 98.97926025390625
patch: return 0 . $NUMBER$ + 0 . 0 ;
rank: 592
score: 98.93325805664062
patch: return new exp ( x , x ) ;
rank: 593
score: 99.16165865384616
patch: return 0 * exp ( x - x ) * x ;
rank: 593
score: 99.104736328125
patch: return 0 . $NUMBER$ * / ( x ) ; }
rank: 593
score: 99.09977213541667
patch: return 0 . 0 * ( x - $NUMBER$ ) ;
rank: 593
score: 98.97908325195313
patch: return 0 . $NUMBER$ + exp ( ) ;
rank: 593
score: 98.89519585503473
patch: return - 0 - 0 . $NUMBER$ ;
rank: 593
score: 98.79094587053571
patch: return ( - 0 ) ;
rank: 594
score: 99.10017533735795
patch: return 0 . $NUMBER$ * exp $NUMBER$ . $NUMBER$ ;
rank: 594
score: 99.09935506184895
patch: return 0 . $NUMBER$ + ( x - $NUMBER$ ) ;
rank: 594
score: 99.0720547762784
patch: return 1 . 0 + exp ( x ) ;
rank: 594
score: 99.06087036132813
patch: return 0 * 0 . $NUMBER$ * 0 ;
rank: 594
score: 98.8940658569336
patch: return ( x - $NUMBER$ ) ;
rank: 595
score: 99.09765625
patch: return x - $NUMBER$ * exp ( - x ) ;
rank: 595
score: 99.0719327059659
patch: return - 1 . 0 * ( x ) ;
rank: 595
score: 99.05988103693181
patch: return 0 . $STRING$ * exp ( x ) ;
rank: 595
score: 98.976416015625
patch: return 0 * ( x + x ) ;
rank: 595
score: 98.9311279296875
patch: return 0 . max ( - x ) ;
rank: 595
score: 98.89340209960938
patch: result = - 0 . $NUMBER$ ;
rank: 595
score: 98.78947448730469
patch: return - 0 . $NUMBER$ ) ;
rank: 596
score: 99.09689331054688
patch: return 0 . $NUMBER$ + new double [ $NUMBER$ ] ;
rank: 596
score: 99.07164417613636
patch: |= 0 . 0 * exp ( x ) ;
rank: 596
score: 99.05982666015625
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ *
rank: 596
score: 98.97589721679688
patch: return 0 . 0 . $NUMBER$ * x ;
rank: 596
score: 98.89217800564236
patch: x = 0 ; negate = true ;
rank: 596
score: 98.78870985243056
patch: return - - 0 . $NUMBER$ ; }
rank: 597
score: 99.10008138020834
patch: return 0 . $NUMBER$ * exp ( exp ( - 1 ) ) ;
rank: 597
score: 99.0968526204427
patch: return x . $NUMBER$ * exp ( - x ) ;
rank: 597
score: 99.07138061523438
patch: return 0 . 0 * 0 * x ;
rank: 597
score: 99.05898215553977
patch: return 0 . exp * exp ( x ) ;
rank: 597
score: 98.78658040364583
patch: ya ( exp ( x ) ) ;
rank: 598
score: 99.1029385653409
patch: return 0 . $NUMBER$ * / exp ( x ;
rank: 598
score: 99.07062322443181
patch: return 0 . 0 ( 0 . 0 ) ;
rank: 598
score: 99.05876020951705
patch: return 0 . $NUMBER$ ) exp ( x ) ;
rank: 598
score: 98.9753662109375
patch: return 0 . $NUMBER$ . $NUMBER$ * this ;
rank: 598
score: 98.92920600043402
patch: return exp ( x , $NUMBER$ ) ;
rank: 599
score: 99.10170491536458
patch: return 0 . $NUMBER$ * Double . Na CaMeL N ;
rank: 599
score: 99.09996686662946
patch: return - 0 . $NUMBER$ * exp * exp ( x ) ;
rank: 599
score: 98.8893798828125
patch: return ( 0 . $NUMBER$ , x ) ;
rank: 599
score: 98.78424750434027
patch: return negate ( x , 0 ) ;
rank: 600
score: 99.09529622395833
patch: return 0 . 0 + exp ( x ) ; }
rank: 600
score: 99.06522216796876
patch: return 0 . 0 * 0 * $NUMBER$ ;
rank: 600
score: 99.0582275390625
patch: return 0 . false * exp ( x ) ;
rank: 600
score: 98.9736328125
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ ;
rank: 600
score: 98.783935546875
patch: return sinh . exp ( x ) ;
rank: 601
score: 99.1009765625
patch: return 0 ; } exp ( x ) ;
rank: 601
score: 99.09954833984375
patch: return - 0 . $NUMBER$ * - ( x ) ;
rank: 601
score: 99.09525553385417
patch: return - - 0 * exp ( - $NUMBER$ ) ;
rank: 601
score: 99.06439763849431
patch: |= 0 . $NUMBER$ * exp ( x ) ;
rank: 601
score: 99.05673217773438
patch: return 0 . $NUMBER$ * exp = x ;
rank: 601
score: 98.97310791015624
patch: if ( 0 == x ) return 0 ;
rank: 601
score: 98.9245849609375
patch: return exp ( x ) . return 0 ;
rank: 601
score: 98.78280978732639
patch: return ( 0 . 0 ) ; }
rank: 602
score: 99.09934779575893
patch: return ( 0 . 1 * exp ( - x ) ) ;
rank: 602
score: 99.06416151258681
patch: return value CaMeL Of ( x ) ;
rank: 602
score: 99.0558349609375
patch: return 0 . ) * 0 . $NUMBER$ ;
rank: 602
score: 98.97301635742187
patch: return return 1 * exp ( x ) ;
rank: 602
score: 98.78244018554688
patch: return ( - x ) ; }
rank: 603
score: 99.15618896484375
patch: return 0 . $NUMBER$ * exp ( x + 1 ;
rank: 603
score: 99.0991719563802
patch: result = 0 . $NUMBER$ / exp ( x ) ;
rank: 603
score: 98.92244262695313
patch: return exp ( x ) . return x ;
rank: 603
score: 98.78234185112848
patch: return exp ( x ) ; } }
rank: 604
score: 99.09909057617188
patch: return 0 . $NUMBER$ ] * exp ( x ) ;
rank: 604
score: 99.09429931640625
patch: return - $NUMBER$ . 1 * exp ( x ) ;
rank: 604
score: 99.05522017045455
patch: return $NUMBER$ . $NUMBER$ * exp ( x ) .
rank: 604
score: 98.97108154296875
patch: return exp ( x , x ) ; ;
rank: 604
score: 98.78214518229167
patch: return - x ; } / * /
rank: 605
score: 99.09869384765625
patch: return 0 . $NUMBER$ * x - exp ( - $NUMBER$ ) ;
rank: 605
score: 99.06293279474431
patch: return 0 . 0 * / 0 . $NUMBER$ ;
rank: 605
score: 99.05513139204545
patch: return 0 . exp ( x + x ) ;
rank: 605
score: 98.97106323242187
patch: return 0 . $NUMBER$ * x . 1 ;
rank: 605
score: 98.78136528862848
patch: return - 0 . $NUMBER$ . 0 ;
rank: 606
score: 99.09886678059895
patch: return 0 . 0 * exp ( $NUMBER$ ) ; }
rank: 606
score: 99.0625887784091
patch: return 0 . 0 * ( ( x ) ;
rank: 606
score: 99.05366654829545
patch: return Double . 1 * exp ( x ) ;
rank: 606
score: 98.97073974609376
patch: return 0 . 1 * exp ( ) ;
rank: 606
score: 98.88562774658203
patch: return ( x == $NUMBER$ ) ;
rank: 606
score: 98.78108723958333
patch: return 0 . $NUMBER$ ; } break ;
rank: 607
score: 99.0986836751302
patch: return 0 . 0 * exp ( x ) * ;
rank: 607
score: 99.09832208806819
patch: return ( 0 . $NUMBER$ * exp $NUMBER$ ) ;
rank: 607
score: 99.05357776988636
patch: return 0 . $NUMBER$ * exp ( x , ;
rank: 607
score: 98.78050231933594
patch: negate ( x , 0 ) ;
rank: 608
score: 99.15057373046875
patch: return 0 . $NUMBER$ * exp ( exp $NUMBER$ ) ;
rank: 608
score: 99.09799194335938
patch: return 0 . $NUMBER$ . $NUMBER$ exp ( x ) ;
rank: 608
score: 99.09775612571023
patch: return 0 . $NUMBER$ * exp ; } else {
rank: 608
score: 99.09014892578125
patch: return 0 . 1 * - exp ( x ) ;
rank: 608
score: 99.06001420454545
patch: return 1 . 0 * x ( x ) ;
rank: 608
score: 99.05318603515624
patch: return 0 . $NUMBER$ * $NUMBER$ * 0 ;
rank: 608
score: 98.97005208333333
patch: return 0 ; exp ( x ) ;
rank: 608
score: 98.885205078125
patch: return 0 *= exp ( - x ) ;
rank: 608
score: 98.77916802300348
patch: return * exp ( - x ) ;
rank: 609
score: 99.15010579427083
patch: return 0 . $NUMBER$ * exp ( x ) + ;
rank: 609
score: 99.09693492542614
patch: return - 0 . $NUMBER$ + 0 . $NUMBER$ ;
rank: 609
score: 99.0897725423177
patch: return 0 . $NUMBER$ * exp ( - $STRING$ ) ;
rank: 609
score: 98.96997680664063
patch: return x * exp ( x ) ) ;
rank: 609
score: 98.77848307291667
patch: return - - exp ( x ) ;
rank: 610
score: 99.09683430989584
patch: return $NUMBER$ . $NUMBER$ * exp ( exp ( - x ) ) ;
rank: 610
score: 99.0968017578125
patch: return 0 . $NUMBER$ . 0 ( x ) ;
rank: 610
score: 99.0895487467448
patch: return - 0 . 0 - exp ( x ) ;
rank: 610
score: 99.05916748046874
patch: return ( x * 0 . 0 ) ;
rank: 610
score: 98.91583251953125
patch: return Math . exp ( x ) ;
rank: 610
score: 98.8843485514323
patch: x = - x ;
rank: 610
score: 98.77787272135417
patch: return ( - $NUMBER$ . $NUMBER$ ) ;
rank: 611
score: 99.09596946022727
patch: return 0 . 0 * exp ( $STRING$ ) ;
rank: 611
score: 99.05101013183594
patch: return 1 . $NUMBER$ * x ;
rank: 611
score: 98.96829223632812
patch: } return $NUMBER$ * exp ( x ) ;
rank: 611
score: 98.88314819335938
patch: result += exp ( x ) ;
rank: 611
score: 98.77745225694444
patch: exp ( x ) ; return x ;
rank: 612
score: 99.09613037109375
patch: return - 0 . $NUMBER$ * ( exp ( x ) ) ;
rank: 612
score: 99.09451293945312
patch: return 0 ; } else { return 0 . 1 ;
rank: 612
score: 99.08754475911458
patch: return $NUMBER$ . $NUMBER$ * ( x - x ) ;
rank: 612
score: 99.05888227982955
patch: return 0 . 0 ( x , x ) ;
rank: 612
score: 99.0509920987216
patch: return 0 . null . exp ( x ) ;
rank: 612
score: 98.9682373046875
patch: if ( 0 == x ) return x ;
rank: 612
score: 98.77634684244792
patch: return exp ( x ) + x ;
rank: 613
score: 99.0941874186198
patch: if ( x < x ) { return 0 ; }
rank: 613
score: 99.05852716619319
patch: return 0 . $NUMBER$ * Float ( x ) ;
rank: 613
score: 98.968017578125
patch: return 0 * exp ( $NUMBER$ ) ;
rank: 613
score: 98.88082275390624
patch: return ( x - $NUMBER$ . 0 ) ;
rank: 613
score: 98.77629937065973
patch: return 0 . $NUMBER$ ; } ) ;
rank: 614
score: 99.09585571289062
patch: return ( - 0 . $NUMBER$ ) ; } else {
rank: 614
score: 99.0502041903409
patch: return 0 . $NUMBER$ * ( x ) ; ;
rank: 614
score: 98.96786499023438
patch: return ( x + x , x ) ;
rank: 614
score: 98.90955946180556
patch: return - 0 ; } return x ;
rank: 614
score: 98.87937622070312
patch: x = 0 . $NUMBER$ * - x ;
rank: 614
score: 98.77615017361111
patch: / / exp ( - x ) ;
rank: 615
score: 99.095703125
patch: return 0 . $NUMBER$ / exp ( x ) ; } else {
rank: 615
score: 99.0939229329427
patch: return 0 ; } else { return $NUMBER$ . $NUMBER$ ;
rank: 615
score: 98.87904357910156
patch: return ( x < $NUMBER$ ) ;
rank: 616
score: 99.0834228515625
patch: return $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 616
score: 98.9659912109375
patch: return 0 . $NUMBER$ ? exp ( x )
rank: 616
score: 98.87888793945312
patch: x = - 0 . $NUMBER$ * x ;
rank: 616
score: 98.77472795758929
patch: exp ( - x ) ;
rank: 617
score: 99.09311930338542
patch: if ( x ) { return 0 . $NUMBER$ ; }
rank: 617
score: 98.9649658203125
patch: exp ( x ) ; return 0 ;
rank: 617
score: 98.90927124023438
patch: return exp ( - x + x ) ;
rank: 617
score: 98.87772216796876
patch: return - ( - x - x ) ;
rank: 617
score: 98.77361382378473
patch: if ( x >= 0 . 0 )
rank: 618
score: 99.05455433238636
patch: *= 0 . $NUMBER$ * exp ( x ) ;
rank: 618
score: 98.96325073242187
patch: return ( 1 . $NUMBER$ * x ) ;
rank: 618
score: 98.77126736111111
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ ; }
rank: 619
score: 99.0902099609375
patch: return 0 . 0 * exp ( 0 ) ; }
rank: 619
score: 98.96260986328124
patch: return return 0 + exp ( x ) ;
rank: 619
score: 98.90772705078125
patch: return ( new double [ $NUMBER$ ] ) ;
rank: 619
score: 98.87702094184027
patch: return - 0 . 0 * x ;
rank: 620
score: 99.14213053385417
patch: return 0 . $NUMBER$ * exp ( x ) break ;
rank: 620
score: 99.09002130681819
patch: return 0 . $NUMBER$ * ( double ) x ;
rank: 620
score: 99.04543235085227
patch: return 0 . $NUMBER$ * ( x ) ; }
rank: 620
score: 98.96244506835937
patch: return 0 . $NUMBER$ . $NUMBER$ * x )
rank: 620
score: 98.77025010850694
patch: return - exp ( - $NUMBER$ ) ;
rank: 621
score: 99.094482421875
patch: return ( . $NUMBER$ * exp ( x ) ) ;
rank: 621
score: 99.08964399857955
patch: return 0 . $NUMBER$ double exp ( x ) ;
rank: 621
score: 99.05247913707386
patch: return 0 . $NUMBER$ * / 0 . $NUMBER$ ;
rank: 621
score: 99.0448486328125
patch: return 1 . $NUMBER$ * x * x ;
rank: 621
score: 98.9062255859375
patch: if ( x > 0 ) { break ;
rank: 621
score: 98.76885986328125
patch: return $NUMBER$ . $NUMBER$ ; } else {
rank: 622
score: 99.09391276041667
patch: return - 0 . $NUMBER$ * exp ; } else {
rank: 622
score: 99.0894266764323
patch: return - 0 . $NUMBER$ * / ( x ) ;
rank: 622
score: 99.07875366210938
patch: return 0 * exp ( - $NUMBER$ ) ;
rank: 622
score: 99.04424493963069
patch: return 0 * exp ( x ) ; break ;
rank: 622
score: 98.96101684570313
patch: result = $NUMBER$ * exp ( x ) ;
rank: 622
score: 98.76809353298611
patch: return 0 . $NUMBER$ . 0 ; }
rank: 623
score: 99.093310546875
patch: return - 0 . $NUMBER$ ; } if ( x > $NUMBER$ ) {
rank: 623
score: 99.08800252278645
patch: return 0 . 0 ; * exp ( x ) ;
rank: 623
score: 98.90534057617188
patch: return - $NUMBER$ / exp ( x ) ;
rank: 623
score: 98.7669921875
patch: negate ( ) ;
rank: 624
score: 99.13889382102273
patch: return 0 . $NUMBER$ * exp ( length ) ;
rank: 624
score: 99.09293910435268
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * exp ( x ) ; }
rank: 624
score: 99.04322398792614
patch: return false . $NUMBER$ * exp ( x ) ;
rank: 624
score: 98.765380859375
patch: if ( x == $NUMBER$ ) break ;
rank: 625
score: 99.13688151041667
patch: return 0 . $NUMBER$ * exp ( x ) ? ;
rank: 625
score: 99.09251185825893
patch: return - 0 . $NUMBER$ * - exp ( - $NUMBER$ ) ;
rank: 625
score: 98.95846896701389
patch: return exp ( x ) - x ;
rank: 625
score: 98.9032974243164
patch: += exp ( - x ) ;
rank: 625
score: 98.76419406467014
patch: return - x ; } else { }
rank: 626
score: 99.13657633463542
patch: return 0 . $NUMBER$ * exp ( x ) - ;
rank: 626
score: 99.0472412109375
patch: return $NUMBER$ . $NUMBER$ * x ( x ) ;
rank: 626
score: 99.04254705255681
patch: return 0 * exp ( x ) . 0 ;
rank: 626
score: 98.86978585379464
patch: result = 0 . $NUMBER$ ;
rank: 626
score: 98.76217312282986
patch: double negate ( x , 0 ) ;
rank: 627
score: 99.0876131924716
patch: return 0 . 0 * / exp ( x ;
rank: 627
score: 98.95782470703125
patch: return 0 * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 627
score: 98.76200103759766
patch: return 0 ; } / * /
rank: 628
score: 99.09175248579545
patch: return 0 . $NUMBER$ < exp ( x ) ;
rank: 628
score: 99.0874532063802
patch: if ( 0 < x ) { return 0 ; }
rank: 628
score: 99.04448852539062
patch: return - 0 . exp ( x ) ;
rank: 628
score: 98.95723724365234
patch: return ( exp ( x ) ;
rank: 628
score: 98.8684814453125
patch: return exp ( - x ) + x ;
rank: 629
score: 99.04438920454545
patch: return 0 . 0 * / 0 . 0 ;
rank: 629
score: 99.0411376953125
patch: return 0 . $NUMBER$ * x * $NUMBER$ ;
rank: 629
score: 98.95653686523437
patch: return return $NUMBER$ * exp ( x ) ;
rank: 629
score: 98.8990234375
patch: return ( new exp ( x ) ) ;
rank: 630
score: 99.08687337239583
patch: return 0 [ $NUMBER$ ] * exp ( x ) ;
rank: 630
score: 98.95648193359375
patch: } return 0 + exp ( x ) ;
rank: 630
score: 98.75898573133681
patch: return new double [ 0 ] ; }
rank: 631
score: 99.09072265625
patch: return 0 . $NUMBER$ ; } else if ( x == 0 ) {
rank: 631
score: 99.08684747869319
patch: return - . $NUMBER$ * exp ( x ) ;
rank: 631
score: 99.06437544389205
patch: return x * exp ( x - $NUMBER$ ) ;
rank: 631
score: 98.9554672241211
patch: return 0 . $NUMBER$ + $NUMBER$ ;
rank: 631
score: 98.8972900390625
patch: return 0 . $NUMBER$ * x - x ;
rank: 631
score: 98.75879923502605
patch: return - - x ;
rank: 632
score: 99.08624267578125
patch: return 0 . 0 * exp ( x , x ;
rank: 632
score: 99.04083806818181
patch: return 0 . $NUMBER$ double CaMeL Value ( ) ;
rank: 632
score: 99.0394058227539
patch: return 0 . 1 * x ;
rank: 632
score: 98.95407104492188
patch: return 0 . $NUMBER$ * ) ;
rank: 632
score: 98.89685668945313
patch: return 0 . ( x , x ) ;
rank: 632
score: 98.86499633789063
patch: return ( x < 0 . $NUMBER$ ) ;
rank: 632
score: 98.75820583767361
patch: return - ( x - 1 ) ;
rank: 633
score: 99.09042358398438
patch: return 0 . $NUMBER$ < exp ( - x ) ;
rank: 633
score: 99.08528645833333
patch: return 0 . $NUMBER$ * exp ( x - 1 ;
rank: 633
score: 99.03927612304688
patch: return 0 . 1 * x * x ;
rank: 633
score: 98.95392523871527
patch: return 0 . $NUMBER$ * x ; ;
rank: 633
score: 98.89638943142361
patch: return - 0 . $NUMBER$ * exp (
rank: 633
score: 98.75735812717014
patch: exp ( x ) ; } else {
rank: 634
score: 99.0850830078125
patch: return Integer . value CaMeL Of ( x ) ;
rank: 634
score: 99.0382308959961
patch: return ( x , x ) ;
rank: 634
score: 98.9532470703125
patch: return 0 + x ;
rank: 634
score: 98.89623413085937
patch: return - 0 . max ( x ) ;
rank: 634
score: 98.75716145833333
patch: if ( x <= $NUMBER$ ) break ;
rank: 635
score: 99.03999467329545
patch: return 0 . $NUMBER$ * exp ( double ) ;
rank: 635
score: 99.0379305752841
patch: return 0 . exp ( x ) * x ;
rank: 635
score: 98.86337890625
patch: return ( x == 0 . $NUMBER$ ) ;
rank: 635
score: 98.75700378417969
patch: return ( x - 1 ) ;
rank: 636
score: 99.05712890625
patch: return 0 . 0 * HEX _ $NUMBER$ ;
rank: 636
score: 98.95296630859374
patch: return 0 * $NUMBER$ . $NUMBER$ * x ;
rank: 636
score: 98.86151801215277
patch: return - x - 0 . $NUMBER$ ;
rank: 636
score: 98.75589752197266
patch: return new long [ $NUMBER$ ] ;
rank: 637
score: 99.08964029947917
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * exp ;
rank: 637
score: 99.05641867897727
patch: return 0 . $NUMBER$ * ( - $NUMBER$ ) ;
rank: 637
score: 99.03926225142045
patch: return 0 . $NUMBER$ x exp ( x ) ;
rank: 637
score: 98.95247395833333
patch: return exp ( x ) * $NUMBER$ ;
rank: 637
score: 98.86009385850694
patch: return - 0 . $NUMBER$ * this ;
rank: 638
score: 99.0793124112216
patch: return Double . float CaMeL Value ( x ) ;
rank: 638
score: 99.03905140269886
patch: return 0 . 0 * - ( x ) ;
rank: 639
score: 99.07884632457386
patch: return Double . $NUMBER$ + exp ( x ) ;
rank: 639
score: 99.03791947798295
patch: double CaMeL Value ( x ) ; return 0 ;
rank: 639
score: 99.0358154296875
patch: return $NUMBER$ * exp exp ( x ) ;
rank: 639
score: 98.8567886352539
patch: x = - 0 . $NUMBER$ ;
rank: 639
score: 98.75446428571429
patch: return exp ( 0 ) ;
rank: 640
score: 99.13002522786458
patch: return exp ( x ) . max ( x ) ;
rank: 640
score: 98.94816589355469
patch: return 0 * exp ( x ;
rank: 640
score: 98.75444878472223
patch: return ( exp ( $NUMBER$ ) ) ;
rank: 641
score: 99.07386474609375
patch: return 0 . $NUMBER$ ; } else { ;
rank: 641
score: 99.03443492542614
patch: return $STRING$ . $NUMBER$ * exp ( x ) ;
rank: 641
score: 98.9479736328125
patch: return x * 0 . $NUMBER$ * $NUMBER$ ;
rank: 641
score: 98.84868512834821
patch: x = 0 . 0 ;
rank: 641
score: 98.75414360894098
patch: if ( exp ( x ) ) {
rank: 642
score: 99.1282071200284
patch: return exp ( x ) * 0 . 0 ;
rank: 642
score: 99.08738490513393
patch: return 0 . 0 * exp ( - ( x ) ) ;
rank: 642
score: 99.07365278764205
patch: return 0 * 0 / exp ( x ) ;
rank: 642
score: 99.03508911132812
patch: return 0 ; } return 0 . $NUMBER$ ;
rank: 642
score: 99.03433227539062
patch: return 0 * ( x - x ) ;
rank: 642
score: 98.94608154296876
patch: return 0 . get CaMeL Value ( ) ;
rank: 642
score: 98.75403594970703
patch: return / exp ( x ) ;
rank: 643
score: 99.05357776988636
patch: return x - exp ( x - $NUMBER$ ) ;
rank: 643
score: 99.03434614701705
patch: double 0 = 0 * exp ( x ) ;
rank: 643
score: 99.033935546875
patch: return 0 . $NUMBER$ * x * ( x ;
rank: 644
score: 99.12697531960227
patch: return 0 * exp ( x / 0 ) ;
rank: 644
score: 99.08658272879464
patch: return x - 0 . $NUMBER$ + exp ( - x ) ;
rank: 644
score: 99.07117808948864
patch: return 0 . $NUMBER$ ( exp ( x ) ;
rank: 644
score: 99.05203857421876
patch: return 0 . $NUMBER$ ; negate = true ;
rank: 644
score: 99.03305053710938
patch: 0 . $NUMBER$ * exp ( x ) ;
rank: 644
score: 98.94598388671875
patch: return 0 * 0 ;
rank: 644
score: 98.84746551513672
patch: x += exp ( x ) ;
rank: 644
score: 98.75346374511719
patch: return - x ; } * /
rank: 645
score: 99.033056640625
patch: double CaMeL Value ( x , x ) ;
rank: 645
score: 98.94555053710937
patch: return 0 . 0 * exp ( x )
rank: 645
score: 98.84627859933036
patch: return - 0 - x ;
rank: 645
score: 98.75301106770833
patch: if ( x > $NUMBER$ . $NUMBER$ )
rank: 646
score: 99.03223266601563
patch: return - 0 . 0 ( x ) ;
rank: 646
score: 98.94425048828126
patch: if ( x == ) { return 0 ;
rank: 646
score: 98.75299750434027
patch: x = - exp ( x ) ;
rank: 647
score: 99.0311279296875
patch: return ( 0 . $NUMBER$ * $NUMBER$ ) ;
rank: 647
score: 98.87445068359375
patch: return Math . sinh ( x ) ;
rank: 647
score: 98.84540473090277
patch: return - ( x > $NUMBER$ ) ;
rank: 647
score: 98.75247192382812
patch: if ( x == $NUMBER$ ) {
rank: 648
score: 99.1253329190341
patch: return Math . min ( x , x ) ;
rank: 648
score: 99.08464965820312
patch: if ( x == 0 . 0 ) {
rank: 648
score: 99.02987670898438
patch: return ( x + 0 . 0 ) ;
rank: 648
score: 99.02194213867188
patch: return 0 . $NUMBER$ * exp * x ;
rank: 648
score: 98.94276733398438
patch: return 0 . 0 + 0 . $NUMBER$ ;
rank: 648
score: 98.84517415364583
patch: return 0 *= exp ( x ) ;
rank: 648
score: 98.75189887152777
patch: / * / return 0 . $NUMBER$ ;
rank: 649
score: 99.04816228693181
patch: return 0 . SIZE * exp ( x ) ;
rank: 649
score: 98.94254557291667
patch: return 0 . x ( x ) ;
rank: 650
score: 99.04740767045455
patch: return - - 0 + exp ( x ) ;
rank: 650
score: 99.0213623046875
patch: double CaMeL Value ( ) ; return 0 ;
rank: 650
score: 99.02103881835937
patch: return $NUMBER$ . $NUMBER$ * 0 * x ;
rank: 650
score: 98.94208984375
patch: return ( 0 . $NUMBER$ - x ) ;
rank: 650
score: 98.8404541015625
patch: return exp ( - - x ) ;
rank: 650
score: 98.75113254123264
patch: return new double [ x ] ; }
rank: 651
score: 99.05974663628473
patch: return Double . abs ( x ) ;
rank: 651
score: 99.01986083984374
patch: return 0 . $NUMBER$ * exp ( x .
rank: 651
score: 99.019482421875
patch: return 0 . $NUMBER$ x ( x ) ;
rank: 651
score: 98.94198608398438
patch: return 0 . $NUMBER$ * x . 0 ;
rank: 651
score: 98.75054168701172
patch: double negate ( - x ) ;
rank: 652
score: 99.01905653211806
patch: return 0 * exp ( x ) .
rank: 652
score: 98.94169921875
patch: return exp ( x ) ; return x ;
rank: 652
score: 98.74916076660156
patch: return - exp ( 0 ) ;
rank: 653
score: 99.05775035511364
patch: return 0 . 0 ( exp ( x ) ;
rank: 653
score: 98.94141235351563
patch: return 0 . 0 * x ( x ;
rank: 654
score: 99.01806030273437
patch: return ( x ) * 0 . $NUMBER$ ;
rank: 654
score: 99.01717800564236
patch: return 0 . 0 * / x ;
rank: 654
score: 98.85671997070312
patch: return 0 . $NUMBER$ * exp (
rank: 655
score: 99.04381214488636
patch: return 0 . $NUMBER$ / ( - x ) ;
rank: 655
score: 99.01198120117188
patch: return $NUMBER$ . 0 * ( x ) ;
rank: 655
score: 98.9412109375
patch: return 0 + exp ( x ) ; }
rank: 655
score: 98.85503472222223
patch: return exp ( x ) : 0 ;
rank: 656
score: 99.04350142045455
patch: return ( 0 . $NUMBER$ , - x ) ;
rank: 656
score: 99.0144287109375
patch: return Double . 0 * ( x ) ;
rank: 656
score: 99.01045735677083
patch: return float CaMeL Value ( x ) ;
rank: 656
score: 98.93964301215277
patch: return Double . max ( x ) ;
rank: 656
score: 98.85440402560764
patch: return 0 . min ( x ) ;
rank: 656
score: 98.74861363002232
patch: return 0 . $NUMBER$ ) ;
rank: 657
score: 99.11726888020833
patch: return 0 . $NUMBER$ * exp ( x ) ) /
rank: 657
score: 99.0809326171875
patch: return ( x > 0 ) ; } else {
rank: 657
score: 99.05445445667614
patch: return Double . $NUMBER$ * exp ( 0 ) ;
rank: 657
score: 99.01375122070313
patch: return 0 . exp ( x ) ) ;
rank: 657
score: 99.009326171875
patch: return ( 0 . 0 * $NUMBER$ ) ;
rank: 657
score: 98.83449300130208
patch: return - 0 . $NUMBER$ ; break ;
rank: 657
score: 98.74839952256944
patch: / * / exp ( x ) ;
rank: 658
score: 99.01275634765625
patch: return 0 . 0 * x * 0 ;
rank: 658
score: 98.938134765625
patch: return 0 . $NUMBER$ . $NUMBER$ + x ;
rank: 658
score: 98.8336181640625
patch: return x . negate ( ) ;
rank: 658
score: 98.74685668945312
patch: if ( exp ( x ) )
rank: 659
score: 99.05263449928977
patch: return 0 . $NUMBER$ ( x , x ) ;
rank: 659
score: 99.03570001775569
patch: return exp ( x ) ; negate = true ;
rank: 659
score: 99.0112548828125
patch: return 0 * exp ( x ) ; /
rank: 659
score: 99.00689086914062
patch: return x . float CaMeL Value ( ) ;
rank: 659
score: 98.83280436197917
patch: return 0 . ( - x ) ;
rank: 660
score: 99.0777079264323
patch: return 0 . $NUMBER$ * exp - 0 . $NUMBER$ ;
rank: 660
score: 99.03560014204545
patch: return - 0 / exp ( - $NUMBER$ ) ;
rank: 660
score: 98.85268729073661
patch: += exp ( x ) ;
rank: 660
score: 98.74533420138889
patch: x = new exp ( x ) ;
rank: 661
score: 99.07742309570312
patch: return 0 . $NUMBER$ * new double [ 1 ] ;
rank: 661
score: 99.05073852539063
patch: return x $NUMBER$ * exp ( x ) ;
rank: 661
score: 99.01038818359375
patch: return 0 ) * exp ( x ) ;
rank: 661
score: 99.00458984375
patch: double CaMeL Value ( ) ; return x ;
rank: 661
score: 98.93509521484376
patch: return 0 . $NUMBER$ * exp ( 1 ;
rank: 661
score: 98.83183458116319
patch: return - 0 . $NUMBER$ * false ;
rank: 661
score: 98.74170684814453
patch: exp ( x - x ) ;
rank: 662
score: 99.05055930397727
patch: return Double . $NUMBER$ * / ( x ) ;
rank: 662
score: 99.01021728515624
patch: return 0 . 1 * ( x ) ;
rank: 662
score: 99.0038818359375
patch: return ( 0 . 0 + x ) ;
rank: 662
score: 98.934814453125
patch: return return exp ( x ) ;
rank: 663
score: 99.11421712239583
patch: return 0 * exp ( x ( x ) ) ;
rank: 663
score: 99.03382025824652
patch: return sinh * exp ( x ) ;
rank: 663
score: 99.0066162109375
patch: return 0 . exp exp ( x ) ;
rank: 663
score: 99.00130886501736
patch: return ( double ) 0 . 0 ;
rank: 663
score: 98.93464965820313
patch: return exp ( x ) ; return 1 ;
rank: 664
score: 98.93281860351563
patch: return 0 . $NUMBER$ * this * x ;
rank: 664
score: 98.8223876953125
patch: return $NUMBER$ . $NUMBER$ ( x ) ;
rank: 664
score: 98.73260498046875
patch: return new float [ $NUMBER$ ] ;
rank: 665
score: 99.07626342773438
patch: return 0 . $NUMBER$ * exp ( x ) false ;
rank: 665
score: 99.03338068181819
patch: return - $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 665
score: 99.00006975446429
patch: = exp ( x ) ;
rank: 665
score: 98.93208618164063
patch: return 0 + exp ( x ) ; ;
rank: 665
score: 98.7318115234375
patch: return 0 . 0 ; } }
rank: 666
score: 99.04918077256944
patch: return 0 . $NUMBER$ * / x ;
rank: 666
score: 98.93183051215277
patch: return exp ( x ) * 0 ;
rank: 666
score: 98.84493001302083
patch: return exp ( x ) : x ;
rank: 666
score: 98.82162136501736
patch: return x + ( - x ) ;
rank: 667
score: 99.04746315696023
patch: return Double . long CaMeL Value ( x ) ;
rank: 667
score: 99.0313720703125
patch: return x - exp ( x - x ) ;
rank: 667
score: 99.00032958984374
patch: return ( 0 . $NUMBER$ * 0 ) ;
rank: 667
score: 98.93013509114583
patch: } else { return 0 . $NUMBER$ ;
rank: 667
score: 98.82133483886719
patch: return x - 0 . $NUMBER$ ;
rank: 667
score: 98.72615814208984
patch: return x ; } / * /
rank: 668
score: 99.07525634765625
patch: return - 0 . $NUMBER$ * exp 1 . $NUMBER$ ;
rank: 668
score: 98.99935913085938
patch: return 0 . 0 * 0 * 0 ;
rank: 668
score: 98.92847900390625
patch: return $NUMBER$ . $NUMBER$ . $NUMBER$ * x ;
rank: 668
score: 98.72465006510417
patch: return ( 0 ) ;
rank: 669
score: 99.11048380533855
patch: = 0 . $NUMBER$ * exp ( x ) ; }
rank: 669
score: 99.04706365411931
patch: return 0 / $NUMBER$ * exp ( x ) ;
rank: 669
score: 99.02992942116477
patch: return x - 0 * exp ( x ) ;
rank: 669
score: 98.99908447265625
patch: return 0 . null ( x ) ;
rank: 669
score: 98.82087925502232
patch: return - 0 . x ;
rank: 669
score: 98.72464425223214
patch: double negate ( x ) ;
rank: 670
score: 99.0732754794034
patch: return 0 . $NUMBER$ += exp ( x ) ;
rank: 670
score: 99.04574584960938
patch: return Double . Na CaMeL N ;
rank: 670
score: 99.0296297940341
patch: return - 0 * exp ( x ) ; }
rank: 670
score: 98.99671088324652
patch: return $STRING$ * exp ( x ) ;
rank: 670
score: 98.9853515625
patch: long CaMeL Value ( ) ; return 0 ;
rank: 670
score: 98.92669067382812
patch: return 0 . $NUMBER$ : 1 . $NUMBER$ ;
rank: 670
score: 98.81764051649306
patch: y = exp ( - x ) ;
rank: 670
score: 98.72435651506696
patch: if ( x == $NUMBER$ )
rank: 671
score: 99.04541015625
patch: return Float . $NUMBER$ * exp ( x ) ;
rank: 671
score: 98.99649386935764
patch: return super . exp ( x ) ;
rank: 671
score: 98.92625732421875
patch: return 0 * exp ( x , ) ;
rank: 671
score: 98.81578233506944
patch: negate ( - x - x ) ;
rank: 671
score: 98.72370147705078
patch: return - 0 . 1 ; }
rank: 672
score: 99.0728759765625
patch: return 0 . $NUMBER$ * exp ( x ) true ;
rank: 672
score: 98.99616834852431
patch: return 0 . $NUMBER$ * exp ) ;
rank: 672
score: 98.92564561631944
patch: return exp ( x * x ) ;
rank: 672
score: 98.83610026041667
patch: return new exp ( - x ) ;
rank: 672
score: 98.81543646918402
patch: return - 0 . $NUMBER$ * true ;
rank: 672
score: 98.72349548339844
patch: if ( x <= $NUMBER$ ) {
rank: 673
score: 99.02585671164773
patch: return - 0 . $NUMBER$ / ( x ) ;
rank: 673
score: 98.99586181640625
patch: return ( 0 . $NUMBER$ ) * x ;
rank: 673
score: 98.925537109375
patch: return 0 . 0 * x $NUMBER$ ;
rank: 674
score: 99.1064786044034
patch: return exp ( x ) exp ( x ) ;
rank: 674
score: 99.07100423177083
patch: return $NUMBER$ . $NUMBER$ * exp ( - 1 ) ;
rank: 674
score: 99.04374389648437
patch: return 0 . $NUMBER$ / exp ( x ;
rank: 674
score: 98.98317464192708
patch: return ( double ) 0 . $NUMBER$ ;
rank: 674
score: 98.92500610351563
patch: return 1 . $NUMBER$ * exp ( ) ;
rank: 674
score: 98.83397759331598
patch: return exp ( $NUMBER$ . $NUMBER$ ) ;
rank: 674
score: 98.81380462646484
patch: return 0 - 0 . $NUMBER$ ;
rank: 674
score: 98.71981811523438
patch: z = exp ( x ) ;
rank: 675
score: 99.07076416015624
patch: return ( exp ( - 1 ) ) ;
rank: 675
score: 98.99481201171875
patch: 0 return 0 * exp ( x ) ;
rank: 675
score: 98.98242797851563
patch: return 1 . $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 675
score: 98.92468872070313
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 675
score: 98.81315782335069
patch: return exp ( x ) ; break ;
rank: 676
score: 98.99149169921876
patch: return $NUMBER$ * 0 . $NUMBER$ * x ;
rank: 676
score: 98.9806884765625
patch: return ( 0 . $NUMBER$ + x ) ;
rank: 676
score: 98.9234619140625
patch: return 0 * 0 * $NUMBER$ * $NUMBER$ ;
rank: 676
score: 98.81160481770833
patch: return ( - x - 0 ) ;
rank: 676
score: 98.7187271118164
patch: x = 0 . $NUMBER$ ; }
rank: 677
score: 99.10481400923295
patch: return 0 = exp ( x , x ) ;
rank: 677
score: 99.04270241477273
patch: return x . $NUMBER$ + exp ( x ) ;
rank: 677
score: 99.0225830078125
patch: return $NUMBER$ . 0 + exp ( x ) ;
rank: 677
score: 98.99078369140625
patch: return 0 * 0 * 0 . $NUMBER$ ;
rank: 677
score: 98.92322649274554
patch: return 0 . $NUMBER$ ; ;
rank: 677
score: 98.81129286024306
patch: return - 0 . ( x ) ;
rank: 677
score: 98.71612548828125
patch: return ( x - 0 ) ;
rank: 678
score: 98.97733154296876
patch: return 1 . 0 * $NUMBER$ * $NUMBER$ ;
rank: 678
score: 98.92290581597223
patch: return 0 < exp ( x ) ;
rank: 678
score: 98.71601213727679
patch: return 0 . 1 ; }
rank: 679
score: 99.06913248697917
patch: return $NUMBER$ * exp ( - 0 . $NUMBER$ ) ;
rank: 679
score: 99.02136840820313
patch: return 1 . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 679
score: 98.975927734375
patch: double CaMeL Value ( ) ( x ) ;
rank: 679
score: 98.71289934430804
patch: return - x ; } }
rank: 680
score: 99.069091796875
patch: return - 0 . $NUMBER$ * 0 . 0 ;
rank: 680
score: 99.02126242897727
patch: return - $NUMBER$ . $NUMBER$ * HEX _ $NUMBER$ ;
rank: 680
score: 98.98723754882812
patch: return Double . $NUMBER$ * 0 . $NUMBER$ ;
rank: 680
score: 98.9717041015625
patch: return ( x * x * x ) ;
rank: 680
score: 98.8079833984375
patch: return negate ( - x ) ;
rank: 680
score: 98.71228899274554
patch: if ( x <= $NUMBER$ )
rank: 681
score: 99.06903631036931
patch: return - exp ( - 0 . $NUMBER$ ) ;
rank: 681
score: 99.0404940518466
patch: return 0 . 0 * ( double ) x ;
rank: 681
score: 98.92094590928819
patch: return 0 * exp ( exp ) ;
rank: 681
score: 98.80725775824652
patch: x = x + 0 . $NUMBER$ ;
rank: 681
score: 98.71052551269531
patch: return ( 0 - x ) ;
rank: 682
score: 99.06878107244319
patch: return 0 . $NUMBER$ * x ; } else {
rank: 682
score: 98.96954345703125
patch: return ( x * 0 . $NUMBER$ ) ;
rank: 682
score: 98.920654296875
patch: return 0 * $NUMBER$ . $NUMBER$ ;
rank: 682
score: 98.82772827148438
patch: yb ( x , x ) ;
rank: 682
score: 98.80722384982639
patch: b = exp ( - x ) ;
rank: 682
score: 98.70942905970982
patch: return / 0 . $NUMBER$ ;
rank: 683
score: 99.06787109375
patch: return 0 . $NUMBER$ * x - 0 . 0 ;
rank: 683
score: 98.98310682508681
patch: return 0 . $NUMBER$ * x ; else
rank: 683
score: 98.96865234375
patch: return 0 . 0 * 0 + x ;
rank: 683
score: 98.92027452256944
patch: try { return exp ( x ) ;
rank: 683
score: 98.82187906901042
patch: return 0 ( x , x ) ;
rank: 683
score: 98.80710177951389
patch: return negate ( x , x ) ;
rank: 683
score: 98.70703125
patch: return x - 1 . $NUMBER$ ;
rank: 684
score: 99.06690470377605
patch: return exp ( - 0 . $NUMBER$ * x ) ;
rank: 684
score: 99.03798606178977
patch: return 0 . $NUMBER$ * exp ( ) ; }
rank: 684
score: 98.96666259765625
patch: return ( 0 . 0 - x ) ;
rank: 684
score: 98.91888427734375
patch: return exp $NUMBER$ ( x ) ;
rank: 684
score: 98.81641981336806
patch: return 1 / exp ( x ) ;
rank: 684
score: 98.80562337239583
patch: return exp ( x . x ) ;
rank: 684
score: 98.70613098144531
patch: return 0 . $NUMBER$ . $NUMBER$ ;
rank: 685
score: 99.03668767755681
patch: return 0 . $NUMBER$ / exp ( 1 ) ;
rank: 685
score: 98.98018798828124
patch: return $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ ;
rank: 685
score: 98.96650390625
patch: return 0 . 0 * $NUMBER$ + x ;
rank: 685
score: 98.91492462158203
patch: return 0 * exp ( x )
rank: 685
score: 98.80469428168402
patch: return 0 . sinh ( x ) ;
rank: 686
score: 99.09299926757812
patch: return 0 ( exp ( x ) ) ;
rank: 686
score: 99.03651123046875
patch: return Math . abs ( x ) ; }
rank: 686
score: 98.97946166992188
patch: return 0 . x * 0 . $NUMBER$ ;
rank: 686
score: 98.91396755642361
patch: return Double . x ( x ) ;
rank: 686
score: 98.81582302517361
patch: return new double [ - x ] ;
rank: 686
score: 98.80466715494792
patch: return - ( x > 0 ) ;
rank: 686
score: 98.70549774169922
patch: / / exp ( x ) ;
rank: 687
score: 98.96585693359376
patch: return ( 0 . 0 * 0 ) ;
rank: 687
score: 98.91342599051339
patch: return 0 [ x ] ;
rank: 687
score: 98.70481872558594
patch: return sinh ( - x ) ;
rank: 688
score: 99.06478881835938
patch: return 0 . $NUMBER$ << exp ( - x ) ;
rank: 688
score: 99.035888671875
patch: return 0 . 0 * exp ( this ) ;
rank: 688
score: 98.97654418945312
patch: return 0 * 0 . ( x ) ;
rank: 688
score: 98.96396891276042
patch: return 0 . 0 ( 0 ) ;
rank: 688
score: 98.91248914930556
patch: return $NUMBER$ = exp ( x ) ;
rank: 688
score: 98.80424669053819
patch: return 0 + ( - x ) ;
rank: 688
score: 98.70381382533482
patch: return negate ( x ) ;
rank: 689
score: 99.08943176269531
patch: return 0 . length ( ) ;
rank: 689
score: 99.06439763849431
patch: return exp ( - x ) ; } else {
rank: 689
score: 99.03574440696023
patch: return x . double CaMeL Value ( ) ; }
rank: 689
score: 98.97515869140625
patch: return 1 . exp ( x ) ;
rank: 689
score: 98.96292453342014
patch: return - 0 . 0 * $NUMBER$ ;
rank: 689
score: 98.91181776258681
patch: return false . exp ( x ) ;
rank: 690
score: 98.97244873046876
patch: return 0 . $NUMBER$ * x / x ;
rank: 690
score: 98.80149623325893
patch: result = 0 . 0 ;
rank: 690
score: 98.70161655970982
patch: return $NUMBER$ . 0 ; }
rank: 691
score: 98.97221069335937
patch: return ( 0 . $NUMBER$ ) * $NUMBER$ ;
rank: 691
score: 98.95552825927734
patch: long CaMeL Value ( x ) ;
rank: 691
score: 98.90868462456598
patch: return 0 & exp ( x ) ;
rank: 691
score: 98.806884765625
patch: return 0 ; } return 0 ;
rank: 691
score: 98.79975891113281
patch: return x + 1 . $NUMBER$ ;
rank: 691
score: 98.70077078683036
patch: return double ( x ) ;
rank: 692
score: 99.03312544389205
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 692
score: 98.97140502929688
patch: return 0 . $NUMBER$ * 0 + x ;
rank: 692
score: 98.80585394965277
patch: return exp ( $NUMBER$ - x ) ;
rank: 692
score: 98.79741075303819
patch: return exp ( x > $NUMBER$ ) ;
rank: 693
score: 98.9706787109375
patch: return 0 . $NUMBER$ * 0 . x ;
rank: 693
score: 98.95533582899306
patch: return - 0 . 0 * 0 ;
rank: 693
score: 98.80576578776042
patch: return exp ( $NUMBER$ . 0 ) ;
rank: 693
score: 98.69829559326172
patch: return - 1 . $NUMBER$ ; }
rank: 694
score: 98.953564453125
patch: return value . double CaMeL Value ( ) ;
rank: 694
score: 98.79486083984375
patch: return - 0 . false ;
rank: 694
score: 98.69465637207031
patch: return - - 0 . 0 ;
rank: 695
score: 99.08429509943181
patch: return 0 * exp ( 0 , x ) ;
rank: 695
score: 99.06033325195312
patch: l = 0 . $NUMBER$ * exp ( x ) ;
rank: 695
score: 98.90341525607639
patch: return exp ( $NUMBER$ + x ) ;
rank: 695
score: 98.80193413628473
patch: return 0 ; } negate = true ;
rank: 695
score: 98.69180297851562
patch: return - sinh ( x ) ;
rank: 696
score: 99.05836995442708
patch: return 0 . $NUMBER$ * exp ( - start ) ;
rank: 696
score: 98.99317016601563
patch: return 0 . 1 * HEX _ $NUMBER$ ;
rank: 696
score: 98.96968296595982
patch: return 0 . ( ) ;
rank: 696
score: 98.90308295355902
patch: return 0 . $NUMBER$ * x x ;
rank: 696
score: 98.79097493489583
patch: return - $NUMBER$ . $NUMBER$ * x ;
rank: 696
score: 98.69164276123047
patch: if ( x != 0 ) {
rank: 697
score: 99.0306396484375
patch: return 0 . 0 / x ( x ) ;
rank: 697
score: 98.96715698242187
patch: return 0 * $NUMBER$ * 0 . $NUMBER$ ;
rank: 697
score: 98.95065307617188
patch: throw new Runtime CaMeL Exception ( x ) ;
rank: 698
score: 99.0812655362216
patch: return 0 . $NUMBER$ * exp [ x ] ;
rank: 698
score: 98.94862670898438
patch: return 1 . $NUMBER$ * this . x ;
rank: 698
score: 98.90115017361111
patch: return exp ( exp ( x ) ;
rank: 698
score: 98.78978620256696
patch: return - 0 + x ;
rank: 698
score: 98.6883544921875
patch: return new Integer ( x ) ;
rank: 699
score: 99.07961203835227
patch: return Math . min ( 0 , x ) ;
rank: 699
score: 99.0577392578125
patch: return 0 . $NUMBER$ * exp ( Number ) x ;
rank: 699
score: 99.02845764160156
patch: return 0 . $NUMBER$ * double ;
rank: 699
score: 98.98681640625
patch: return - - 0 ;
rank: 699
score: 98.9480224609375
patch: return ( float ) exp ( x ) ;
rank: 699
score: 98.68663787841797
patch: return 0 . $NUMBER$ * exp ;
rank: 700
score: 99.07956764914773
patch: return 0 . length - exp ( x ) ;
rank: 700
score: 99.05747292258523
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ ; }
rank: 700
score: 98.9852294921875
patch: return sinh * exp ( - x ) ;
rank: 700
score: 98.96441650390625
patch: return exp ( x ) ; return $NUMBER$ ;
rank: 700
score: 98.94611952039931
patch: return Math . round ( x ) ;
rank: 700
score: 98.90003797743056
patch: return exp ( x + $NUMBER$ ) ;
rank: 700
score: 98.78822326660156
patch: negate ( x , x ) ;
rank: 700
score: 98.68598175048828
patch: return - $NUMBER$ . $NUMBER$ ; }
rank: 701
score: 99.0279873934659
patch: return 0 . $NUMBER$ * * ( x ) ;
rank: 701
score: 98.9840576171875
patch: return x * exp ( - $NUMBER$ ) ;
rank: 701
score: 98.89946831597223
patch: return null . exp ( x ) ;
rank: 701
score: 98.78653971354167
patch: return - ( x == $NUMBER$ ) ;
rank: 701
score: 98.6859619140625
patch: x = x ;
rank: 702
score: 99.05686442057292
patch: return - 0 . $NUMBER$ * x ; } else {
rank: 702
score: 98.96371799045139
patch: return $STRING$ . exp ( x ) ;
rank: 702
score: 98.94530029296875
patch: return 0 . 0 * x - x ;
rank: 702
score: 98.89774322509766
patch: throw ( 0 . 0 ) ;
rank: 702
score: 98.78611246744792
patch: negate ( ) ; negate = true ;
rank: 702
score: 98.68571472167969
patch: return x ; } else { }
rank: 703
score: 99.02730102539063
patch: return 0 . $NUMBER$ ( x ) ; }
rank: 703
score: 98.89428032769098
patch: return 0 * exp ( 0 ) ;
rank: 703
score: 98.78223334418402
patch: return - ( x < $NUMBER$ ) ;
rank: 703
score: 98.6841812133789
patch: if ( x >= $NUMBER$ ) {
rank: 704
score: 99.02704412286931
patch: return x ; } else { return 0 ; }
rank: 704
score: 98.96217651367188
patch: return ( exp exp ( x ) ) ;
rank: 704
score: 98.94487762451172
patch: return ( x / $NUMBER$ ) ;
rank: 704
score: 98.89395904541016
patch: return 0 . $NUMBER$ * x )
rank: 704
score: 98.79198540581598
patch: return - 0 ; } return 0 ;
rank: 704
score: 98.78151448567708
patch: return - ( x == 0 ) ;
rank: 704
score: 98.68307495117188
patch: exp ( x , negate ) ;
rank: 705
score: 98.78078884548611
patch: return - ( x < 0 ) ;
rank: 705
score: 98.68236541748047
patch: sinh ( x , 0 ) ;
rank: 706
score: 99.02449174360795
patch: return Double . $NUMBER$ * exp ( $NUMBER$ ) ;
rank: 706
score: 98.94273071289062
patch: return 0 . 0 * x + x ;
rank: 706
score: 98.89295959472656
patch: return 0 * $NUMBER$ * $NUMBER$ ;
rank: 706
score: 98.79125298394098
patch: yb ( x , - x ) ;
rank: 706
score: 98.78016662597656
patch: return 0 + 0 . $NUMBER$ ;
rank: 706
score: 98.68104771205357
patch: return - ( x ) ;
rank: 707
score: 99.04969371448864
patch: return - ( exp ( - $NUMBER$ ) ) ;
rank: 707
score: 98.9606704711914
patch: return 0 * x * x ;
rank: 707
score: 98.94239501953125
patch: return 0 . 0 + ( x ) ;
rank: 707
score: 98.89261627197266
patch: return 0 * exp ( 0 ;
rank: 708
score: 99.0231045809659
patch: return 0 . $NUMBER$ * exp ( x - ;
rank: 708
score: 98.97321166992188
patch: return new double [ $NUMBER$ + $NUMBER$ ] ;
rank: 708
score: 98.94223022460938
patch: return 1 . $NUMBER$ * $NUMBER$ ;
rank: 708
score: 98.89186604817708
patch: if ( return ) { return 0 ;
rank: 708
score: 98.77749294704861
patch: return - 0 . $NUMBER$ / x ;
rank: 708
score: 98.67626190185547
patch: return new int [ x ] ;
rank: 709
score: 98.9726806640625
patch: return new double [ $NUMBER$ ] + x ;
rank: 709
score: 98.95983276367187
patch: return Double . $NUMBER$ exp ( x ) ;
rank: 709
score: 98.77736118861607
patch: negate ( - x ) ;
rank: 709
score: 98.67536163330078
patch: return return - 0 . $NUMBER$ ;
rank: 710
score: 99.072509765625
patch: exp ( x ) ; return 0 . $NUMBER$ ;
rank: 710
score: 99.04652099609375
patch: return x - 0 . $NUMBER$ * x ;
rank: 710
score: 99.02213745117187
patch: return 0 . 0 / exp ( ) ;
rank: 710
score: 98.95953369140625
patch: return 1 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 710
score: 98.9334716796875
patch: return 1 . 0 * $NUMBER$ ;
rank: 710
score: 98.88676452636719
patch: return 0 . $NUMBER$ : $NUMBER$ ;
rank: 710
score: 98.77698432074652
patch: return ( new double [ ] { x
rank: 710
score: 98.67516326904297
patch: return - x ; } break ;
rank: 711
score: 99.02203924005681
patch: return Double . MIN _ VALUE ( x ) ;
rank: 711
score: 98.95948486328125
patch: return $NUMBER$ * * exp ( x ) ;
rank: 711
score: 98.88502502441406
patch: return 0 . $NUMBER$ * null ;
rank: 711
score: 98.77506510416667
patch: return 0 - x ;
rank: 711
score: 98.67503356933594
patch: return x ; } return x ;
rank: 712
score: 99.072216796875
patch: return exp ( x ( x ) ) ;
rank: 712
score: 99.02113037109375
patch: return 0 . 0 ; } else { ;
rank: 712
score: 98.88437228732639
patch: return $NUMBER$ . $NUMBER$ * x ) ;
rank: 712
score: 98.77402072482639
patch: return - 0 . 1 * x ;
rank: 713
score: 99.04285777698864
patch: return - 0 . $NUMBER$ * x * x ;
rank: 713
score: 99.01802201704545
patch: return Double . $NUMBER$ * x ( x ) ;
rank: 713
score: 98.77361382378473
patch: return ( x == - x ) ;
rank: 713
score: 98.67318289620536
patch: return 1 . $NUMBER$ ; }
rank: 714
score: 98.96780395507812
patch: return 0 / exp ( - $NUMBER$ ) ;
rank: 714
score: 98.88307698567708
patch: return null * exp ( x ) ;
rank: 714
score: 98.67292022705078
patch: return ( - 0 ) ; }
rank: 715
score: 99.03810813210227
patch: return 0 . $NUMBER$ * new ( x ) ;
rank: 715
score: 99.01357421875
patch: return new 0 . $NUMBER$ ( x ) ;
rank: 715
score: 98.95542602539062
patch: return ( 0 . $NUMBER$ ) * 0 ;
rank: 715
score: 98.93051147460938
patch: return new Double ( x ) ;
rank: 715
score: 98.88134087456598
patch: return 0 . $NUMBER$ * * x ;
rank: 715
score: 98.76925320095486
patch: return - x + 1 . $NUMBER$ ;
rank: 715
score: 98.6689682006836
patch: return ( x <= $NUMBER$ ) ;
rank: 716
score: 99.037841796875
patch: return exp ( x > 0 . 0 ) ;
rank: 716
score: 98.95477973090277
patch: return 0 . 0 * exp x ;
rank: 716
score: 98.66848754882812
patch: * / exp ( x ) ;
rank: 717
score: 98.96591796875
patch: return x - exp ( - $NUMBER$ ) ;
rank: 717
score: 98.92982313368056
patch: return exp ( x * $NUMBER$ ) ;
rank: 718
score: 99.06882546164773
patch: return 0 * exp ( x / 1 ) ;
rank: 718
score: 99.03614390980114
patch: return ( x > $NUMBER$ ) ; } else {
rank: 718
score: 98.66818237304688
patch: return ( 0 . 1 ) ;
rank: 719
score: 98.9974594116211
patch: / * return 0 . $NUMBER$ ;
rank: 719
score: 98.95321044921874
patch: return 0 . exp ( x ) ; }
rank: 719
score: 98.92886352539062
patch: return float CaMeL Value ( ) ;
rank: 719
score: 98.87810601128473
patch: return exp . exp ( x ) ;
rank: 719
score: 98.76387023925781
patch: y = exp ( x ) ;
rank: 719
score: 98.66720581054688
patch: return 0 . $NUMBER$ ) ; }
rank: 720
score: 99.03358043323864
patch: return exp ( - 0 . $NUMBER$ ) ; }
rank: 720
score: 98.92801242404514
patch: return ( double ) ( x ) ;
rank: 720
score: 98.87675645616319
patch: return 0 . 1 * x ) ;
rank: 720
score: 98.76516384548611
patch: return 0 . $NUMBER$ + - x ;
rank: 720
score: 98.76268659319196
patch: return 0 ( x ) ;
rank: 720
score: 98.66515241350446
patch: return 0 . false ; }
rank: 721
score: 99.0333584872159
patch: double $NUMBER$ . $NUMBER$ * exp ( x ) ;
rank: 721
score: 98.963720703125
patch: return 0 + exp ( - $NUMBER$ ) ;
rank: 721
score: 98.95163302951389
patch: return 0 . start ( x ) ;
rank: 721
score: 98.76166643415179
patch: return ( - $NUMBER$ ) ;
rank: 722
score: 99.06510786576705
patch: return 0 . 0 * min ( x ) ;
rank: 722
score: 98.98983154296874
patch: return 0 . 0 / ( x ) ;
rank: 722
score: 98.95010375976562
patch: return $NUMBER$ * 0 . $NUMBER$ * 0 ;
rank: 722
score: 98.87054443359375
patch: return 0 . $NUMBER$ * 0 ; ;
rank: 722
score: 98.76030731201172
patch: return x + 0 . 0 ;
rank: 722
score: 98.75577218191964
patch: return exp ( $NUMBER$ ) ;
rank: 722
score: 98.66331263950893
patch: exp ( x ) ; }
rank: 723
score: 98.98971218532986
patch: return Double . Na CaMeL N ; }
rank: 723
score: 98.9622802734375
patch: return x * new double [ $NUMBER$ ] ;
rank: 723
score: 98.94927978515625
patch: return Double . 0 * 0 . $NUMBER$ ;
rank: 723
score: 98.86941092354911
patch: return value ( x ) ;
rank: 723
score: 98.76013946533203
patch: b = exp ( x ) ;
rank: 724
score: 99.06438654119319
patch: return 0 . $NUMBER$ * next ( x ) ;
rank: 724
score: 99.03265380859375
patch: double 0 * exp ( - x ) ;
rank: 724
score: 98.96051025390625
patch: return - - ( x - x ) ;
rank: 724
score: 98.94805230034723
patch: return 0 . 0 * exp 0 ;
rank: 724
score: 98.86883544921875
patch: return exp ( ) ;
rank: 724
score: 98.75647844587054
patch: return 0 + - x ;
rank: 724
score: 98.66114807128906
patch: return ( x <= 0 ) ;
rank: 725
score: 99.06419788707386
patch: return exp ( 0 . 0 , x ) ;
rank: 725
score: 99.0322598544034
patch: return exp ( - $NUMBER$ ) ; } else {
rank: 725
score: 98.9883544921875
patch: return 0 . $NUMBER$ * Double . $NUMBER$ ;
rank: 725
score: 98.96036376953126
patch: return 0 . $NUMBER$ / HEX _ $NUMBER$ ;
rank: 725
score: 98.94757080078125
patch: return $NUMBER$ . $NUMBER$ * 0 * 0 ;
rank: 725
score: 98.91899278428819
patch: double CaMeL Value ( ) ; * /
rank: 725
score: 98.86876763237848
patch: return 0 . $NUMBER$ * $NUMBER$ ; ;
rank: 725
score: 98.756103515625
patch: return - 0 + - x ;
rank: 725
score: 98.66080474853516
patch: exp ( x - 0 ) ;
rank: 726
score: 98.9866943359375
patch: return 0 . 0 ; } * /
rank: 726
score: 98.91889105902777
patch: return Math . abs ( 0 ) ;
rank: 726
score: 98.86831325954861
patch: return 0 . $NUMBER$ . $NUMBER$ ) ;
rank: 726
score: 98.75341796875
patch: return - 0 . $NUMBER$ ; ;
rank: 726
score: 98.74632917131696
patch: return 0 ; } ) ;
rank: 726
score: 98.65981619698661
patch: return - - x ; }
rank: 727
score: 99.062255859375
patch: break 0 . $NUMBER$ * exp ( x ) ;
rank: 727
score: 99.02876420454545
patch: return exp ( exp ( - $NUMBER$ ) ) ;
rank: 727
score: 98.98189086914063
patch: if ( x ) { return 0 ; }
rank: 727
score: 98.94686279296874
patch: return 0 * ( x * x ) ;
rank: 727
score: 98.91741180419922
patch: = ( 0 . 0 ) ;
rank: 727
score: 98.86687469482422
patch: return 0 . 0 + x ;
rank: 727
score: 98.75242919921875
patch: x = 0 ;
rank: 727
score: 98.65961456298828
patch: return 0 ; } else { }
rank: 728
score: 99.06184525923295
patch: return 0 . $NUMBER$ * compute ( x ) ;
rank: 728
score: 99.0286376953125
patch: double x = new double [ $NUMBER$ ] ;
rank: 728
score: 98.97762044270833
patch: return 0 . $NUMBER$ * exp ( ;
rank: 728
score: 98.95851440429688
patch: return exp ( x , - $NUMBER$ ) ;
rank: 728
score: 98.91587999131944
patch: return - 1 . $NUMBER$ * x ;
rank: 729
score: 99.0270108309659
patch: return - 0 . $NUMBER$ * x - x ;
rank: 729
score: 98.97686767578125
patch: return 0 . 0 ; ;
rank: 729
score: 98.65673828125
patch: return - 0 ; } * /
rank: 730
score: 98.97213134765624
patch: return new 0 * exp ( x ) ;
rank: 730
score: 98.91373697916667
patch: return exp ( x / $NUMBER$ ) ;
rank: 730
score: 98.86408148871527
patch: return 0 * exp ( value ) ;
rank: 730
score: 98.74356842041016
patch: return 0 ( - x ) ;
rank: 730
score: 98.65543038504464
patch: if ( x >= $NUMBER$ )
rank: 731
score: 99.02666681463069
patch: return 0 . ] * exp ( x ) ;
rank: 731
score: 98.97100219726562
patch: return Double . double CaMeL Value ( ) ;
rank: 731
score: 98.95310668945312
patch: return 0 . 0 ; negate = true ;
rank: 731
score: 98.65538533528645
patch: double ( x ) ;
rank: 732
score: 98.94461059570312
patch: return $NUMBER$ * 0 . $NUMBER$ ;
rank: 732
score: 98.8614501953125
patch: return ( 1 . 0 ) ;
rank: 732
score: 98.74144744873047
patch: return 0 . $NUMBER$ ; break ;
rank: 732
score: 98.65499877929688
patch: return 0 . $NUMBER$ ; } else
rank: 733
score: 98.90928141276042
patch: return - 1 . $NUMBER$ * $NUMBER$ ;
rank: 733
score: 98.85762532552083
patch: } return 0 . $NUMBER$ * x ;
rank: 734
score: 98.9433837890625
patch: return 0 . 1 * 0 . $NUMBER$ ;
rank: 734
score: 98.90646023220486
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 734
score: 98.85716417100694
patch: return 0 * exp ( this ) ;
rank: 734
score: 98.65303039550781
patch: return double ( - x ) ;
rank: 735
score: 99.02277166193181
patch: return - exp ( - 0 . 0 ) ;
rank: 735
score: 98.95136260986328
patch: return 0 * HEX _ $NUMBER$ ;
rank: 735
score: 98.94299926757813
patch: return 0 . $NUMBER$ * ( x 1 ;
rank: 735
score: 98.90520562065973
patch: return 0 . 0 * ( x ;
rank: 735
score: 98.65240478515625
patch: return return 0 . $NUMBER$ ;
rank: 736
score: 99.02135120738636
patch: return exp ( x ) - 0 . $NUMBER$ ;
rank: 736
score: 98.7342529296875
patch: result = - x ;
rank: 736
score: 98.65228271484375
patch: return new int [ 0 ] ;
rank: 737
score: 98.96262817382812
patch: return 0 . $NUMBER$ * / ( x ;
rank: 737
score: 98.90287272135417
patch: return 0 , exp ( x ) ;
rank: 737
score: 98.65201568603516
patch: exp ( x - $NUMBER$ ) ;
rank: 738
score: 99.0191317471591
patch: return - 0 . $NUMBER$ . $NUMBER$ * x ;
rank: 738
score: 98.94135877821181
patch: return 0 * max ( x ) ;
rank: 738
score: 98.90130615234375
patch: return ( x * x ) ;
rank: 738
score: 98.85369873046875
patch: return $NUMBER$ . $NUMBER$ * $NUMBER$ ;
rank: 738
score: 98.72776794433594
patch: return ( x & $NUMBER$ ) ;
rank: 738
score: 98.65118408203125
patch: return $NUMBER$ ; }
rank: 739
score: 98.93965148925781
patch: return 1 . $NUMBER$ * 0 ;
rank: 739
score: 98.89954969618056
patch: return 0 . - ( x ) ;
rank: 739
score: 98.65117645263672
patch: return - exp ( $NUMBER$ ) ;
rank: 740
score: 98.89796278211806
patch: return - 1 . 0 * $NUMBER$ ;
rank: 740
score: 98.85055202907986
patch: = 0 * exp ( x ) ;
rank: 740
score: 98.65089634486607
patch: return - ( 0 ) ;
rank: 741
score: 99.05206853693181
patch: return 0 . 0 * exp ( x ) }
rank: 741
score: 99.01599731445313
patch: return - ( - 0 . $NUMBER$ ) ;
rank: 741
score: 98.95944213867188
patch: return 0 . 0 ( x ) ; }
rank: 741
score: 98.89754231770833
patch: double 0 = exp ( x ) ;
rank: 741
score: 98.72615051269531
patch: return x . ( x ) ;
rank: 741
score: 98.72323172433036
patch: return - x + x ;
rank: 741
score: 98.64897155761719
patch: return / 0 . $NUMBER$ ; }
rank: 742
score: 99.015869140625
patch: return 0 . $NUMBER$ >= exp ( x ) ;
rank: 742
score: 98.93363444010417
patch: return ( 0 . $NUMBER$ ) ) ;
rank: 742
score: 98.84974500868056
patch: return x . return ( x ) ;
rank: 742
score: 98.64863586425781
patch: temp = - 0 . $NUMBER$ ;
rank: 743
score: 98.95735168457031
patch: return 0 . $NUMBER$ ; } ;
rank: 743
score: 98.9404541015625
patch: return ( x - x ) - x ;
rank: 743
score: 98.84933810763889
patch: return 0 + value ( x ) ;
rank: 743
score: 98.72071075439453
patch: return - 0 . - x ;
rank: 744
score: 98.95671997070312
patch: return 0 / exp ( x ) ; }
rank: 744
score: 98.89369032118056
patch: return 0 . $NUMBER$ ( 0 ) ;
rank: 744
score: 98.84685601128473
patch: exp ( x ) ; return 1 ;
rank: 744
score: 98.64469909667969
patch: sinh ( x , x ) ;
rank: 745
score: 99.01317003038194
patch: return exp ( x > 0 ) ;
rank: 745
score: 98.9563232421875
patch: return new 0 . 0 ( x ) ;
rank: 745
score: 98.92921278211806
patch: return 0 . format ( x ) ;
rank: 745
score: 98.84616427951389
patch: return exp ( x + 0 ) ;
rank: 746
score: 99.05070356889205
patch: exp ( x ) . exp ( x ) ;
rank: 746
score: 99.0106201171875
patch: return ( - 0 . $NUMBER$ * x ) ;
rank: 746
score: 98.93848266601563
patch: return - 0 . ( - x ) ;
rank: 746
score: 98.88840060763889
patch: return 1 . 0 ( x ) ;
rank: 746
score: 98.84478081597223
patch: return 0 . $NUMBER$ + x ) ;
rank: 746
score: 98.71340942382812
patch: return exp ( x , ) ;
rank: 747
score: 99.01057739257813
patch: return exp ( - 1 . 0 ) ;
rank: 747
score: 98.95497436523438
patch: return x ; } else { return 0 ;
rank: 747
score: 98.93617553710938
patch: return 1 * exp ( - x ) ;
rank: 747
score: 98.88614908854167
patch: return Math . ceil ( x ) ;
rank: 747
score: 98.84170871310764
patch: return exp $NUMBER$ exp ( x ) ;
rank: 747
score: 98.7165756225586
patch: result = - 0 . 0 ;
rank: 747
score: 98.71333530970982
patch: return - 0 / x ;
rank: 747
score: 98.6370137532552
patch: sinh ( x ) ;
rank: 748
score: 99.04845081676136
patch: return 0 return 0 * exp ( x ) ;
rank: 748
score: 98.95457628038194
patch: return 0 ; } else return 0 ;
rank: 748
score: 98.92724609375
patch: return Double . $NUMBER$ * x ;
rank: 748
score: 98.8853988647461
patch: return 1 . 0 * x ;
rank: 748
score: 98.84141710069444
patch: return 0 != exp ( x ) ;
rank: 748
score: 98.71649169921875
patch: return ( x > x ) ;
rank: 748
score: 98.6360575358073
patch: negate ( x ) ;
rank: 749
score: 98.9327392578125
patch: return 0 . + exp ( x ) ;
rank: 749
score: 98.84016418457031
patch: return 0 . $NUMBER$ + 0 ;
rank: 749
score: 98.63593401227679
patch: return exp ( true ) ;
rank: 750
score: 99.04603881835938
patch: return 0 0 * exp ( x ) ;
rank: 750
score: 98.88018035888672
patch: return long CaMeL Value ( ) ;
rank: 750
score: 98.84010145399306
patch: return 0 . $NUMBER$ * x ) /
rank: 750
score: 98.71501159667969
patch: return ( x . x ) ;
rank: 750
score: 98.63571602957589
patch: return 0 . - x ;
rank: 751
score: 99.0079345703125
patch: return 0 . $NUMBER$ *= exp ( x ) ;
rank: 751
score: 98.9322021484375
patch: return new double [ ] { x } ;
rank: 751
score: 98.83877902560764
patch: return 0 * exp ( ) ) ;
rank: 751
score: 98.71501159667969
patch: return ( x >= $NUMBER$ ) ;
rank: 751
score: 98.6348876953125
patch: exp ( 0 . $NUMBER$ ) ;
rank: 752
score: 99.00509033203124
patch: if ( x >= 0 . 0 ) {
rank: 752
score: 98.93061828613281
patch: return x * HEX _ $NUMBER$ ;
rank: 752
score: 98.877685546875
patch: return 0 . - 0 ;
rank: 752
score: 98.83863176618304
patch: } return 0 . $NUMBER$ ;
rank: 752
score: 98.71371459960938
patch: x = - 0 . 0 ;
rank: 752
score: 98.70733642578125
patch: return 0 sinh ( x ) ;
rank: 752
score: 98.63470458984375
patch: return ( 0 - 0 ) ;
rank: 753
score: 99.03804779052734
patch: return 0 exp ( x ) ;
rank: 753
score: 98.946533203125
patch: assert 0 < exp ( x ) ;
rank: 753
score: 98.9300765991211
patch: return sinh * HEX _ $NUMBER$ ;
rank: 753
score: 98.92047797309027
patch: return 0 . $NUMBER$ * 0 ) ;
rank: 753
score: 98.87712944878473
patch: return - 1 . 0 * 0 ;
rank: 753
score: 98.71338653564453
patch: return x + $NUMBER$ . $NUMBER$ ;
rank: 753
score: 98.63452911376953
patch: return ( $NUMBER$ . $NUMBER$ ) ;
rank: 754
score: 99.00281982421875
patch: return ( exp ( - 0 ) ) ;
rank: 754
score: 98.92957763671875
patch: return new double [ HEX _ $NUMBER$ ] ;
rank: 754
score: 98.83810085720486
patch: return 0 return exp ( x ) ;
rank: 754
score: 98.71058146158855
patch: return x + x ;
rank: 754
score: 98.63426971435547
patch: return 0 . 1 . $NUMBER$ ;
rank: 755
score: 98.94219970703125
patch: return x . $NUMBER$ * exp ( ) ;
rank: 755
score: 98.92852105034723
patch: return sinh + exp ( x ) ;
rank: 755
score: 98.91334533691406
patch: return 0 . 1 * 0 ;
rank: 755
score: 98.87326388888889
patch: return Math . floor ( x ) ;
rank: 755
score: 98.83807373046875
patch: return 0 % exp ( x ) ;
rank: 755
score: 98.70497131347656
patch: return - 0 ; } ) ;
rank: 756
score: 98.9284423828125
patch: return ( x - x ) + x ;
rank: 756
score: 98.91163465711806
patch: return 0 . exp ( x ) .
rank: 756
score: 98.87290954589844
patch: return 0 . $NUMBER$ * Float ;
rank: 756
score: 98.83739556206598
patch: exp ( x ) ; return $NUMBER$ ;
rank: 756
score: 98.63186645507812
patch: exp ( x + x ) ;
rank: 757
score: 98.93984375
patch: return $NUMBER$ . $NUMBER$ exp ( x ) ;
rank: 757
score: 98.92759195963542
patch: return - 0 * HEX _ $NUMBER$ ;
rank: 757
score: 98.91007486979167
patch: return 0 . - 0 . $NUMBER$ ;
rank: 757
score: 98.87280951605902
patch: return - 1 . $NUMBER$ * 0 ;
rank: 757
score: 98.83546447753906
patch: return 0 * 0 * $NUMBER$ ;
rank: 757
score: 98.6306396484375
patch: return - $NUMBER$ ;
rank: 758
score: 98.93878784179688
patch: return 0 . 0 * / ( x ;
rank: 758
score: 98.90986633300781
patch: return 0 * 0 * x ;
rank: 758
score: 98.83403862847223
patch: return false * exp ( x ) ;
rank: 758
score: 98.70609283447266
patch: return ( x >= 0 ) ;
rank: 758
score: 98.62998744419643
patch: return * 0 . $NUMBER$ ;
rank: 759
score: 98.9095458984375
patch: return 0 * 0 * 0 ;
rank: 759
score: 98.87011040581598
patch: return - 1 . 0 * x ;
rank: 759
score: 98.83248901367188
patch: return 0 . $NUMBER$ - 0 ;
rank: 759
score: 98.62769317626953
patch: return return 0 . $NUMBER$ ; }
rank: 760
score: 98.93790893554687
patch: return x . int CaMeL Value ( ) ;
rank: 760
score: 98.90894232855902
patch: return exp ( x ) . 0 ;
rank: 760
score: 98.86569213867188
patch: return 1 . 0 * 0 ;
rank: 760
score: 98.83209228515625
patch: value = 0 . $NUMBER$ * x ;
rank: 760
score: 98.70166887555804
patch: return 0 . 0 ) ;
rank: 760
score: 98.70153045654297
patch: return - 0 . $NUMBER$ * ;
rank: 761
score: 98.9984463778409
patch: return exp ( x > 0 . $NUMBER$ ) ;
rank: 761
score: 98.93524780273438
patch: return 0 . $NUMBER$ ; } else * /
rank: 761
score: 98.90810818142361
patch: return 0 . get ( x ) ;
rank: 761
score: 98.86551242404514
patch: return 1 . $NUMBER$ ( x ) ;
rank: 761
score: 98.8313980102539
patch: throw ( 0 . $NUMBER$ ) ;
rank: 761
score: 98.6999740600586
patch: return ( 1 . $NUMBER$ ) ;
rank: 761
score: 98.62512969970703
patch: return sinh ( x ) ; }
rank: 762
score: 98.99812455610795
patch: return new double [ 0 ] ; } else {
rank: 762
score: 98.93510131835937
patch: return 0 double CaMeL Value ( x ) ;
rank: 762
score: 98.86307525634766
patch: * / return 0 . $NUMBER$ ;
rank: 762
score: 98.69728088378906
patch: return ( x == x ) ;
rank: 762
score: 98.62363978794643
patch: return - 0 ; } }
rank: 763
score: 98.99760298295455
patch: return ( exp ( x ) > 0 ) ;
rank: 763
score: 98.906494140625
patch: return 0 . ) * 0 ;
rank: 763
score: 98.82884385850694
patch: return exp ( x ) == 0 ;
rank: 763
score: 98.69729614257812
patch: return 0 double ( x ) ;
rank: 763
score: 98.69274139404297
patch: return ( sinh - $NUMBER$ ) ;
rank: 764
score: 98.90646362304688
patch: return 0 * $NUMBER$ * x ;
rank: 764
score: 98.86092122395833
patch: = true ; return 0 . 0 ;
rank: 764
score: 98.82883707682292
patch: return 0 = x ;
rank: 764
score: 98.623046875
patch: if ( x != 0 )
rank: 765
score: 98.99699263139205
patch: return - 0 . $NUMBER$ . $NUMBER$ * exp ;
rank: 765
score: 98.93315294053819
patch: return Double . $NUMBER$ ( x ) ;
rank: 765
score: 98.90438842773438
patch: return $NUMBER$ . ( x ) ;
rank: 765
score: 98.85805257161458
patch: / * / return 0 . 0 ;
rank: 765
score: 98.82840728759766
patch: return x * 0 . $NUMBER$ ;
rank: 765
score: 98.69579315185547
patch: return 0 . $NUMBER$ * false ;
rank: 765
score: 98.62023053850446
patch: return 0 ; } * /
rank: 766
score: 98.93293592664931
patch: return 0 . $NUMBER$ * / 0 ;
rank: 766
score: 98.90367296006944
patch: return 0 * 0 * x ) ;
rank: 766
score: 98.90200466579861
patch: return new double [ 1 ] ; }
rank: 766
score: 98.85559953962054
patch: return 0 [ 0 ] ;
rank: 766
score: 98.82782660590277
patch: return 0 . $NUMBER$ * $NUMBER$ ; }
rank: 766
score: 98.69041442871094
patch: buf = exp ( x ) ;
rank: 767
score: 98.9959716796875
patch: double 0 * exp ( x ) ;
rank: 767
score: 98.90292019314236
patch: return 0 * abs ( x ) ;
rank: 767
score: 98.90043809678819
patch: return - 0 . 0 + x ;
rank: 767
score: 98.69473266601562
patch: return 0 . size ( ) ;
rank: 768
score: 98.99577192826705
patch: result = 0 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 768
score: 98.931787109375
patch: return 0 . 0 / exp ( x ;
rank: 768
score: 98.90213012695312
patch: return 0 * ( x ) ;
rank: 768
score: 98.85496012369792
patch: return 0 . 0 * x ; ;
rank: 768
score: 98.60988362630208
patch: hi ( x ) ;
rank: 769
score: 99.00000610351563
patch: return 0 . $NUMBER$ * exp - x ;
rank: 769
score: 98.93044704861111
patch: return Double . ceil ( x ) ;
rank: 769
score: 98.8266830444336
patch: return 0 . $NUMBER$ ? 0 ;
rank: 769
score: 98.69397735595703
patch: return max ( - x ) ;
rank: 769
score: 98.60918317522321
patch: / exp ( x ) ;
rank: 770
score: 98.99445134943181
patch: return - $NUMBER$ . $NUMBER$ * 0 . $NUMBER$ ;
rank: 770
score: 98.89675564236111
patch: return ) * exp ( x ) ;
rank: 770
score: 98.69357299804688
patch: return exp ( - 1 ) ;
rank: 770
score: 98.60784040178571
patch: return $NUMBER$ ; } else {
rank: 771
score: 98.99992540147569
patch: return exp ( 0 , x ) ;
rank: 771
score: 98.99421830610795
patch: return - 1 . $NUMBER$ * 0 . $NUMBER$ ;
rank: 771
score: 98.850341796875
patch: long CaMeL Value ( ) ; * /
rank: 771
score: 98.82316589355469
patch: return 0 . $NUMBER$ ? $NUMBER$ ;
rank: 771
score: 98.60774448939732
patch: x = $NUMBER$ . $NUMBER$ ;
rank: 772
score: 98.998876953125
patch: return 0 * exp ( x ) . ;
rank: 772
score: 98.92268202039931
patch: return Double . format ( x ) ;
rank: 772
score: 98.89222717285156
patch: return ( x , 0 ) ;
rank: 772
score: 98.88292100694444
patch: return new double [ - $NUMBER$ ] ;
rank: 772
score: 98.84909396701389
patch: = $NUMBER$ * exp ( x ) ;
rank: 773
score: 98.99328002929687
patch: return ( x < 0 . 0 ) ;
rank: 773
score: 98.92092556423611
patch: return 0 . 0 ; } ) ;
rank: 773
score: 98.84789360894098
patch: return ( ( double ) 0 ) ;
rank: 773
score: 98.82217407226562
patch: return 0 + exp ( ) ;
rank: 773
score: 98.69116973876953
patch: set ( x , x ) ;
rank: 774
score: 98.84296332465277
patch: = true ; return 0 . $NUMBER$ ;
rank: 774
score: 98.60472760881696
patch: double sinh ( x ) ;
rank: 775
score: 98.90914154052734
patch: return Double . MIN _ VALUE ;
rank: 775
score: 98.88910590277777
patch: return new 0 exp ( x ) ;
rank: 776
score: 98.68907165527344
patch: return x . sinh ( ) ;
rank: 776
score: 98.6724853515625
patch: return ( 0 . false ) ;
rank: 776
score: 98.60401407877605
patch: return 0 ; } }
rank: 777
score: 98.90725708007812
patch: / * return 0 . 0 ;
rank: 777
score: 98.67034912109375
patch: return - 0 [ x ] ;
rank: 777
score: 98.60288783482143
patch: return x ; } * /
rank: 778
score: 98.98738403320313
patch: double 0 = new double [ $NUMBER$ ] ;
rank: 778
score: 98.88700103759766
patch: return Double . 0 * x ;
rank: 778
score: 98.83749050564236
patch: return 0 ; return 0 . 0 ;
rank: 778
score: 98.80511474609375
patch: return 0 . 1 * $NUMBER$ ;
rank: 779
score: 98.98463134765625
patch: return ( exp ( x ) ) ; }
rank: 779
score: 98.90070936414931
patch: return Double . Na CaMeL N ) ;
rank: 779
score: 98.86851671006944
patch: return - 0 ; negate = true ;
rank: 779
score: 98.83658854166667
patch: return 0 . $NUMBER$ * $NUMBER$ ) ;
rank: 779
score: 98.80481719970703
patch: return 0 . $NUMBER$ ? x ;
rank: 779
score: 98.6688461303711
patch: x = - x ; break ;
rank: 780
score: 98.98427734375
patch: return $NUMBER$ * exp ( - $NUMBER$ ) ;
rank: 780
score: 98.89999050564236
patch: return Double . round ( x ) ;
rank: 780
score: 98.86802842881944
patch: return sinh - exp ( x ) ;
rank: 780
score: 98.83619689941406
patch: return 0 . 0 * Float ;
rank: 780
score: 98.66710662841797
patch: return ( x < x ) ;
rank: 780
score: 98.59705461774554
patch: exp ( - 0 ) ;
rank: 781
score: 98.88454182942708
patch: return 0 . $NUMBER$ * x ; /
rank: 781
score: 98.80136108398438
patch: return 0 . 0 * this ;
rank: 781
score: 98.59705461774554
patch: return ( double ) x ;
rank: 782
score: 98.98187866210938
patch: return ( x - 1 . 0 ) ;
rank: 782
score: 98.88449435763889
patch: return 0 . round ( x ) ;
rank: 782
score: 98.80016326904297
patch: return 0 * x ( x ;
rank: 782
score: 98.66572570800781
patch: throw new double [ 0 ] ;
rank: 783
score: 98.89347330729167
patch: return Double . Na CaMeL N ; ;
rank: 783
score: 98.884033203125
patch: return exp ( x ) ; ) ;
rank: 783
score: 98.832275390625
patch: return - 0 . MAX _ VALUE ;
rank: 783
score: 98.67891693115234
patch: negate ( ) ; return 0 ;
rank: 783
score: 98.58861432756696
patch: if ( x < 1 )
rank: 784
score: 98.86417643229167
patch: return 0 . $NUMBER$ [ $NUMBER$ ] ;
rank: 784
score: 98.7979965209961
patch: return exp exp ( x ) ;
rank: 784
score: 98.66516876220703
patch: throw new double [ $NUMBER$ ] ;
rank: 784
score: 98.58600725446429
patch: hi ( - x ) ;
rank: 785
score: 98.97396240234374
patch: double 0 * exp ( - $NUMBER$ ) ;
rank: 785
score: 98.88101535373264
patch: return 0 . $NUMBER$ * 0 ; else
rank: 785
score: 98.67668151855469
patch: yb ( x , 0 ) ;
rank: 785
score: 98.66346958705357
patch: y = 0 . $NUMBER$ ;
rank: 785
score: 98.58465576171875
patch: return ( 0 ) ; }
rank: 786
score: 98.97379760742187
patch: return - 0 . $NUMBER$ * exp ; }
rank: 786
score: 98.88800726996527
patch: return 0 . 0 * exp ( ;
rank: 786
score: 98.88098822699652
patch: return ) . exp ( x ) ;
rank: 786
score: 98.79408264160156
patch: throw ( $STRING$ + x ) ;
rank: 786
score: 98.58373151506696
patch: return float ( x ) ;
rank: 787
score: 98.98114776611328
patch: return 0 = 0 . $NUMBER$ ;
rank: 787
score: 98.97332085503473
patch: return 0 . $NUMBER$ * exp ; }
rank: 787
score: 98.88007269965277
patch: return 0 . $NUMBER$ * ( 0 ;
rank: 787
score: 98.82919650607639
patch: double CaMeL Value ( ) ; break ;
rank: 787
score: 98.57985432942708
patch: return - $NUMBER$ ; }
rank: 788
score: 98.97969970703124
patch: return exp $NUMBER$ * exp ( x ) ;
rank: 788
score: 98.82891082763672
patch: return 0 . 0 * exp ;
rank: 788
score: 98.79362487792969
patch: return 0 . $NUMBER$ - $NUMBER$ ;
rank: 788
score: 98.67145538330078
patch: result ( x , x ) ;
rank: 789
score: 98.97270372178819
patch: return ( - 1 . $NUMBER$ ) ;
rank: 789
score: 98.88566589355469
patch: return 0 . 0 ; } ;
rank: 789
score: 98.82865142822266
patch: * / return 0 . 0 ;
rank: 789
score: 98.79185485839844
patch: return 0 . $NUMBER$ : x ;
rank: 789
score: 98.67142486572266
patch: x = ( double ) x ;
rank: 789
score: 98.65977478027344
patch: return ( $NUMBER$ . 0 ) ;
rank: 789
score: 98.57282366071429
patch: return 0 . x ; }
rank: 790
score: 98.97654418945312
patch: return 0 . $NUMBER$ * 0 / x ;
rank: 790
score: 98.82729763454861
patch: return 0 ; return 0 . $NUMBER$ ;
rank: 790
score: 98.7887954711914
patch: exp ( x ) ; break ;
rank: 790
score: 98.65939331054688
patch: return 0 . $NUMBER$ / x ;
rank: 790
score: 98.57135009765625
patch: return - $NUMBER$ . 0 ;
rank: 791
score: 98.87491861979167
patch: return exp ( x ) ; / /
rank: 791
score: 98.82692464192708
patch: return int CaMeL Value ( x ) ;
rank: 791
score: 98.78736877441406
patch: try { return 0 . $NUMBER$ ;
rank: 791
score: 98.57106236049107
patch: return - x ; } else
rank: 792
score: 98.96932373046874
patch: return ( x - 1 . $NUMBER$ ) ;
rank: 792
score: 98.8590087890625
patch: return - $NUMBER$ * HEX _ $NUMBER$ ;
rank: 792
score: 98.8267593383789
patch: return ( x * $NUMBER$ ) ;
rank: 792
score: 98.7850341796875
patch: return 0 . $NUMBER$ * $STRING$ ;
rank: 792
score: 98.67007446289062
patch: return 0 . 0 ; break ;
rank: 793
score: 98.88345336914062
patch: return 0 . $NUMBER$ * value ;
rank: 793
score: 98.77923583984375
patch: return 0 . $NUMBER$ return 0 ;
rank: 793
score: 98.56976318359375
patch: / * / return x ;
rank: 794
score: 98.88103569878473
patch: return 0 . $NUMBER$ ; } else ;
rank: 794
score: 98.77854919433594
patch: return 0 * x + x ;
rank: 794
score: 98.66776275634766
patch: negate ( ) ; return x ;
rank: 794
score: 98.56971086774554
patch: return - x - x ;
rank: 795
score: 98.9689697265625
patch: exp ( x ) ; } return 0 ;
rank: 795
score: 98.85588836669922
patch: return x ; negate = true ;
rank: 795
score: 98.77772521972656
patch: return $NUMBER$ * exp ( ) ;
rank: 795
score: 98.56886509486607
patch: if ( x > 1 )
rank: 796
score: 98.96481323242188
patch: return ( - 0 . $NUMBER$ ) ; }
rank: 796
score: 98.82049560546875
patch: double CaMeL Value ( 0 ) ;
rank: 796
score: 98.6661605834961
patch: x = 0 ; return 0 ;
rank: 796
score: 98.56866455078125
patch: double ( - x ) ;
rank: 797
score: 98.86671278211806
patch: throw 0 * exp ( x ) ;
rank: 797
score: 98.56491524832589
patch: return 1 . 0 ; }
rank: 798
score: 98.96493530273438
patch: return ( 0 . $NUMBER$ . $NUMBER$ ) ;
rank: 798
score: 98.96273193359374
patch: double exp = new double [ $NUMBER$ ] ;
rank: 798
score: 98.87706163194444
patch: return 0 . $NUMBER$ exp ( ) ;
rank: 798
score: 98.865478515625
patch: return $NUMBER$ * exp ( x ) .
rank: 798
score: 98.7757568359375
patch: return 0 * exp ( $NUMBER$ ;
rank: 798
score: 98.6647720336914
patch: break ( x , x ) ;
rank: 798
score: 98.65352957589286
patch: x += 0 . $NUMBER$ ;
rank: 798
score: 98.55643136160714
patch: z = 0 . $NUMBER$ ;
rank: 799
score: 98.85237121582031
patch: return 0 . $NUMBER$ * 1 ;
rank: 799
score: 98.77408272879464
patch: return 0 * x ) ;
rank: 799
score: 98.65218353271484
patch: b = - 0 . $NUMBER$ ;
rank: 800
score: 98.81092180524554
patch: return ( 0 . $NUMBER$ ;
rank: 800
score: 98.77233123779297
patch: = 0 . $NUMBER$ * x ;
rank: 801
score: 98.95880737304688
patch: return - 0 . 0 ; } else {
rank: 801
score: 98.87207709418402
patch: assert 0 != exp ( x ) ;
rank: 801
score: 98.8619384765625
patch: return true . exp ( x ) ;
rank: 801
score: 98.64890834263393
patch: result += 0 . 0 ;
rank: 801
score: 98.55421956380208
patch: return x ; } }
rank: 802
score: 98.86005316840277
patch: return 0 . * 0 . $NUMBER$ ;
rank: 802
score: 98.80309295654297
patch: = ( 0 . $NUMBER$ ) ;
rank: 802
score: 98.77128601074219
patch: return 0 * x * 0 ;
rank: 802
score: 98.64878845214844
patch: return ( x != 0 ) ;
rank: 802
score: 98.55304827008929
patch: return 0 ; } break ;
rank: 803
score: 98.9603515625
patch: return 0 . 0 . $NUMBER$ * 0 ;
rank: 803
score: 98.85608588324652
patch: return double = exp ( x ) ;
rank: 803
score: 98.76859828404018
patch: return 0 . $NUMBER$ 0 ;
rank: 803
score: 98.5505859375
patch: temp = true ;
rank: 804
score: 98.8451156616211
patch: return 0 ; negate = true ;
rank: 804
score: 98.65745544433594
patch: result = negate ( x ) ;
rank: 804
score: 98.54953438895089
patch: return * $NUMBER$ . $NUMBER$ ;
rank: 805
score: 98.95342407226562
patch: if ( x <= 0 . 0 ) {
rank: 805
score: 98.85209825303819
patch: return return 0 . $NUMBER$ * x ;
rank: 805
score: 98.8027114868164
patch: return 0 * 0 . 0 ;
rank: 805
score: 98.76529366629464
patch: } return 0 . 0 ;
rank: 805
score: 98.65695190429688
patch: return + exp ( x ) ;
rank: 805
score: 98.54862758091518
patch: return - - 0 ; }
rank: 806
score: 98.9583740234375
patch: return ( 0 . 1 * x ) ;
rank: 806
score: 98.84224446614583
patch: { return new double [ $NUMBER$ ] ;
rank: 806
score: 98.6539306640625
patch: x = - 0 ;
rank: 806
score: 98.54775565011161
patch: return / $NUMBER$ . $NUMBER$ ;
rank: 807
score: 98.85178629557292
patch: return ( x ) ; return 0 ;
rank: 807
score: 98.799072265625
patch: = 0 . 0 * $NUMBER$ ;
rank: 807
score: 98.64215087890625
patch: break ( x ) ;
rank: 808
score: 98.95068969726563
patch: return 0 . $NUMBER$ * x - $NUMBER$ ;
rank: 808
score: 98.85065375434027
patch: return 0 . $NUMBER$ * 0 ; }
rank: 808
score: 98.79753112792969
patch: return int CaMeL Value ( ) ;
rank: 808
score: 98.75475311279297
patch: return 0 * x - x ;
rank: 808
score: 98.54402378627232
patch: x = 1 . $NUMBER$ ;
rank: 809
score: 98.9506103515625
patch: return ( 0 . $NUMBER$ * exp ) ;
rank: 809
score: 98.86198425292969
patch: return 0 . $NUMBER$ ; * /
rank: 809
score: 98.85050455729167
patch: return 0 exp exp ( x ) ;
rank: 809
score: 98.8365478515625
patch: return - ( x - 0 ) ;
rank: 809
score: 98.75405883789062
patch: return exp ( exp $NUMBER$ ) ;
rank: 809
score: 98.54244559151786
patch: return - x - 1 ;
rank: 810
score: 98.9499755859375
patch: double $NUMBER$ * exp ( - x ) ;
rank: 810
score: 98.85016547309027
patch: return 0 . $NUMBER$ . ( ) ;
rank: 810
score: 98.75270080566406
patch: value = exp ( x ) ;
rank: 810
score: 98.62905447823661
patch: sinh ( - x ) ;
rank: 811
score: 98.9457275390625
patch: return exp ( - ( x ) ) ;
rank: 811
score: 98.84878540039062
patch: return 0 . x * x ;
rank: 811
score: 98.83475748697917
patch: return ( x - $NUMBER$ ) ; }
rank: 811
score: 98.75094604492188
patch: return ( x ) * 0 ;
rank: 811
score: 98.54111153738839
patch: return x ; } break ;
rank: 812
score: 98.9483642578125
patch: return x . min ( x ) ;
rank: 812
score: 98.8485107421875
patch: return 0 . $NUMBER$ * ( ) ;
rank: 812
score: 98.78764997209821
patch: return 0 [ $NUMBER$ ] ;
rank: 813
score: 98.83209906684027
patch: return ( x - x ) ; }
rank: 813
score: 98.78494262695312
patch: return $NUMBER$ . 0 * $NUMBER$ ;
rank: 813
score: 98.74894714355469
patch: return $NUMBER$ . $NUMBER$ + x ;
rank: 813
score: 98.53582763671875
patch: return - exp ( x ;
rank: 814
score: 98.84715440538194
patch: return 0 . copy ( x ) ;
rank: 814
score: 98.83156331380208
patch: return - new double [ 0 ] ;
rank: 814
score: 98.78489685058594
patch: return 0 . 0 * 1 ;
rank: 814
score: 98.62941487630208
patch: yb ( x ) ;
rank: 814
score: 98.61597551618304
patch: b = 0 . $NUMBER$ ;
rank: 814
score: 98.53443254743304
patch: return $NUMBER$ . $NUMBER$ ) ;
rank: 815
score: 98.94487847222223
patch: return 0 . $NUMBER$ * exp 1 ;
rank: 815
score: 98.83968353271484
patch: return Double . POSITIVE _ INFINITY ;
rank: 815
score: 98.78436279296875
patch: value CaMeL Of ( x ) ;
rank: 815
score: 98.74714878627232
patch: return return 0 . 0 ;
rank: 815
score: 98.53396170479911
patch: double sinh = - x ;
rank: 816
score: 98.940771484375
patch: return 0 == exp ( - x ) ;
rank: 816
score: 98.83949110243056
patch: return x . $NUMBER$ ( x ) ;
rank: 816
score: 98.60323660714286
patch: return - x . x ;
rank: 817
score: 98.94039916992188
patch: return 0 . $NUMBER$ * exp / x ;
rank: 817
score: 98.83694797092014
patch: return 0 . 0 * / 0 ;
rank: 817
score: 98.78389739990234
patch: return 0 . 0 ( ) ;
rank: 817
score: 98.7429428100586
patch: return exp ( double ) x ;
rank: 817
score: 98.52940150669643
patch: return 0 - x ; }
rank: 818
score: 98.94007568359375
patch: return ( x ) - 0 . $NUMBER$ ;
rank: 818
score: 98.84235297309027
patch: return exp ( x ) ; / ;
rank: 818
score: 98.83378092447917
patch: return x / exp ( x ) ;
rank: 818
score: 98.82564968532986
patch: return - 0 . size ( ) ;
rank: 818
score: 98.78246307373047
patch: return 0 . $NUMBER$ * float ;
rank: 818
score: 98.74189758300781
patch: throw ( 1 . 0 ) ;
rank: 819
score: 98.84103054470486
patch: return ( x - x ) ) ;
rank: 819
score: 98.78240203857422
patch: = 0 . $NUMBER$ * $NUMBER$ ;
rank: 819
score: 98.52579171316964
patch: return 0 . true ; }
rank: 820
score: 98.93873291015625
patch: return - 0 . $NUMBER$ * x ) ;
rank: 820
score: 98.84080674913194
patch: return ( 0 . $NUMBER$ exp ) ;
rank: 820
score: 98.83122422960069
patch: return 0 . $NUMBER$ exp ( x ;
rank: 820
score: 98.60000610351562
patch: return 0 ;
rank: 820
score: 98.52341134207589
patch: x = - x ; }
rank: 821
score: 98.83447265625
patch: return 0 * $NUMBER$ * 0 ;
rank: 821
score: 98.73982238769531
patch: return 0 . $NUMBER$ return $NUMBER$ ;
rank: 821
score: 98.59783935546875
patch: x = 0 . 1 ;
rank: 822
score: 98.82819281684027
patch: return Double . MIN _ VALUE ; }
rank: 822
score: 98.59749930245536
patch: return - x - $NUMBER$ ;
rank: 822
score: 98.52116176060268
patch: temp = 0 . $NUMBER$ ;
rank: 823
score: 98.83265686035156
patch: return new 0 ( x ) ;
rank: 823
score: 98.76528930664062
patch: double CaMeL Value ( ) ; ;
rank: 823
score: 98.73857879638672
patch: return ( x ) * x ;
rank: 823
score: 98.60804239908855
patch: return - 0 ) ;
rank: 823
score: 98.59677559988839
patch: x = x + x ;
rank: 824
score: 98.93591986762152
patch: return ( x > 0 ) ; }
rank: 824
score: 98.76473999023438
patch: throw new Error ( $STRING$ ) ;
rank: 824
score: 98.7381362915039
patch: exp ( 0 . 0 ) ;
rank: 824
score: 98.51903686523437
patch: result = false ;
rank: 825
score: 98.82707214355469
patch: return Double . $NUMBER$ * 0 ;
rank: 825
score: 98.8262939453125
patch: return 0 / 0 . $NUMBER$ ;
rank: 825
score: 98.60511125837054
patch: return max ( x ) ;
rank: 826
score: 98.82683563232422
patch: return 0 . $NUMBER$ * x *
rank: 826
score: 98.76250457763672
patch: return ( x * 0 ) ;
rank: 826
score: 98.73782348632812
patch: return 0 . 1 + x ;
rank: 826
score: 98.60036214192708
patch: return x - x ;
rank: 826
score: 98.59247698102679
patch: return - 0 - 0 ;
rank: 827
score: 98.82050916883681
patch: return Double . min ( x ) ;
rank: 827
score: 98.59224243164063
patch: result = 0 ;
rank: 827
score: 98.51091657366071
patch: x = $NUMBER$ . 0 ;
rank: 828
score: 98.81536102294922
patch: return $NUMBER$ exp ( x ) ;
rank: 828
score: 98.59841918945312
patch: result = - 0 ;
rank: 828
score: 98.59109933035714
patch: b += 0 . $NUMBER$ ;
rank: 828
score: 98.50734456380208
patch: rb ( x ) ;
rank: 829
score: 98.92923990885417
patch: return ( x ) ; } else {
rank: 829
score: 98.81399536132812
patch: return Double . 0 * 0 ;
rank: 829
score: 98.75869750976562
patch: return $NUMBER$ . 0 * x ;
rank: 829
score: 98.50361851283482
patch: double x = - x ;
rank: 830
score: 98.92772827148437
patch: return double $NUMBER$ * exp ( x ) ;
rank: 830
score: 98.7846908569336
patch: return 0 / HEX _ $NUMBER$ ;
rank: 830
score: 98.75775146484375
patch: return 0 . 0 - 0 ;
rank: 830
score: 98.73472086588542
patch: return 0 = 0 ;
rank: 830
score: 98.50344412667411
patch: return ( x ) ; }
rank: 831
score: 98.92735290527344
patch: if ( x > 1 ) {
rank: 831
score: 98.91558159722223
patch: return 0 . $NUMBER$ * exp ( }
rank: 831
score: 98.81222534179688
patch: return 0 . ) * x ;
rank: 831
score: 98.75654602050781
patch: double 0 = 0 . 0 ;
rank: 831
score: 98.73391723632812
patch: return x * x * x ;
rank: 831
score: 98.50326538085938
patch: ya ( x ) ;
rank: 832
score: 98.81502532958984
patch: return 0 . 0 ; * /
rank: 832
score: 98.81057739257812
patch: return $NUMBER$ * x * x ;
rank: 832
score: 98.75376892089844
patch: = 0 . 0 * x ;
rank: 832
score: 98.73336029052734
patch: return 0 * this . x ;
rank: 832
score: 98.50181361607143
patch: negate ( - 0 ) ;
rank: 833
score: 98.81034851074219
patch: return 0 . $NUMBER$ * 0 *
rank: 833
score: 98.75154113769531
patch: return 0 . $NUMBER$ x $NUMBER$ ;
rank: 833
score: 98.73287963867188
patch: } else { return 0 ; }
rank: 833
score: 98.50172642299107
patch: return x ; } ) ;
rank: 834
score: 98.9237060546875
patch: return . $NUMBER$ * exp ( x ) ;
rank: 834
score: 98.73267364501953
patch: result return exp ( x ) ;
rank: 834
score: 98.50067138671875
patch: return - 0 . true ;
rank: 835
score: 98.92351684570312
patch: return - ( - 0 . 0 ) ;
rank: 835
score: 98.80685424804688
patch: return 0 * 0 . $NUMBER$ *
rank: 835
score: 98.79611642020089
patch: return Double . $NUMBER$ ; }
rank: 835
score: 98.50048828125
patch: x = x - 1 ;
rank: 836
score: 98.92251247829861
patch: double $NUMBER$ * exp ( x ) ;
rank: 836
score: 98.77173614501953
patch: return $NUMBER$ * HEX _ $NUMBER$ ;
rank: 836
score: 98.5712890625
patch: return x ( x ) ;
rank: 836
score: 98.49997384207589
patch: double - 0 . $NUMBER$ ;
rank: 837
score: 98.90138753255208
patch: return ( x ( x ) ) ;
rank: 837
score: 98.73191833496094
patch: return 0 . $NUMBER$ : 0 ;
rank: 837
score: 98.5692138671875
patch: return - 0 / $NUMBER$ ;
rank: 838
score: 98.78767395019531
patch: return 0 . 0 * / ;
rank: 838
score: 98.73075358072917
patch: return 0 + 0 ;
rank: 838
score: 98.56862095424107
patch: yb ( - x ) ;
rank: 838
score: 98.49723597935268
patch: return ( - 1 ) ;
rank: 839
score: 98.78749084472656
patch: return 0 . 0 * value ;
rank: 839
score: 98.77034214564732
patch: return - - - 0 ;
rank: 839
score: 98.5750732421875
patch: y = 0 . 0 ;
rank: 839
score: 98.49394008091518
patch: x = 1 . 0 ;
rank: 840
score: 98.918994140625
patch: if ( x >= 0 . $NUMBER$ ) {
rank: 840
score: 98.78541564941406
patch: return 0 ; } else { ;
rank: 840
score: 98.76783970424107
patch: return - - - x ;
rank: 840
score: 98.73033905029297
patch: return ( 0 * x ) ;
rank: 840
score: 98.57364327566964
patch: result *= 0 . $NUMBER$ ;
rank: 840
score: 98.56622314453125
patch: return 0 ; break ;
rank: 840
score: 98.49347795758929
patch: return 0 . $NUMBER$ double ;
rank: 841
score: 98.78463745117188
patch: return 0 . 0 * double ;
rank: 841
score: 98.7293701171875
patch: return 0 ; return 0 ;
rank: 841
score: 98.56569126674107
patch: return 0 . $NUMBER$ * ;
rank: 841
score: 98.49249267578125
patch: return true ; }
rank: 842
score: 98.78282928466797
patch: return 0 . $NUMBER$ / 0 ;
rank: 842
score: 98.78182547433036
patch: return ( 0 . ) ;
rank: 842
score: 98.7337646484375
patch: = ( x / $NUMBER$ ) ;
rank: 842
score: 98.72887420654297
patch: return 0 . ) * $NUMBER$ ;
rank: 842
score: 98.568603515625
patch: x = 0 - x ;
rank: 842
score: 98.49197823660714
patch: return long ( x ) ;
rank: 843
score: 98.78105163574219
patch: throw 0 . $NUMBER$ * 0 ;
rank: 843
score: 98.7314453125
patch: return 0 + 0 . 0 ;
rank: 843
score: 98.56067766462054
patch: return - 0 ; break ;
rank: 843
score: 98.48996407645089
patch: return true ; } else {
rank: 844
score: 98.88750542534723
patch: return 0 += exp ( x ) ;
rank: 844
score: 98.77986907958984
patch: return Double . MAX _ VALUE ;
rank: 844
score: 98.72594451904297
patch: return exp 0 ( x ) ;
rank: 844
score: 98.55842808314732
patch: x = 0 + x ;
rank: 845
score: 98.76150948660714
patch: return - HEX _ $NUMBER$ ;
rank: 845
score: 98.72383335658482
patch: return 0 . $NUMBER$ exp ;
rank: 845
score: 98.7226333618164
patch: = ( x * $NUMBER$ ) ;
rank: 845
score: 98.55789620535714
patch: return - 0 / 0 ;
rank: 845
score: 98.5565185546875
patch: break ( - x ) ;
rank: 846
score: 98.912744140625
patch: return 0 . $NUMBER$ * exp ( - ;
rank: 846
score: 98.88079155815973
patch: return 0 . length ( x ) ;
rank: 846
score: 98.77478790283203
patch: return 0 . x * 0 ;
rank: 846
score: 98.72066497802734
patch: = ( x == 0 ) ;
rank: 846
score: 98.55422537667411
patch: break exp ( x ) ;
rank: 846
score: 98.48711286272321
patch: return sinh [ x ] ;
rank: 847
score: 98.72265625
patch: return 0 * $NUMBER$ + x ;
rank: 847
score: 98.7188720703125
patch: return ( 0 . 0 ;
rank: 847
score: 98.55306570870536
patch: return x . return 0 ;
rank: 847
score: 98.54993693033855
patch: return $NUMBER$ . $NUMBER$ ;
rank: 847
score: 98.48552594866071
patch: return new ( x ) ;
rank: 848
score: 98.75030517578125
patch: return - - $NUMBER$ ;
rank: 848
score: 98.71858433314732
patch: return 0 . $NUMBER$ ] ;
rank: 848
score: 98.71760559082031
patch: return $NUMBER$ . $NUMBER$ * this ;
rank: 848
score: 98.48338971819196
patch: return / 0 . 0 ;
rank: 849
score: 98.76324462890625
patch: * return 0 . 0 ;
rank: 849
score: 98.54738071986607
patch: result = 0 . false ;
rank: 849
score: 98.54451206752232
patch: return 0 . 0 exp ;
rank: 849
score: 98.48335484095982
patch: x = x - x ;
rank: 850
score: 98.87342664930556
patch: return 0 . $NUMBER$ * exp ++ ;
rank: 850
score: 98.7632064819336
patch: return new Double ( 0 ) ;
rank: 851
score: 98.74357604980469
patch: return 0 . $NUMBER$ / $NUMBER$ ;
rank: 851
score: 98.71641540527344
patch: return $NUMBER$ . 0 * 0 ;
rank: 851
score: 98.71627044677734
patch: return 0 . 0 * ) ;
rank: 851
score: 98.54452078683036
patch: return - 0 * x ;
rank: 852
score: 98.907568359375
patch: return 0 < exp ( - x ) ;
rank: 852
score: 98.76699829101562
patch: return 0 . null * 0 ;
rank: 852
score: 98.76103210449219
patch: return 0 . $NUMBER$ ( x ;
rank: 852
score: 98.54122488839286
patch: x = 0 . x ;
rank: 853
score: 98.90755615234374
patch: return - 0 . $NUMBER$ * exp 1 ;
rank: 853
score: 98.87156677246094
patch: { return exp ( x ) ;
rank: 853
score: 98.76605224609375
patch: return 0 . null * x ;
rank: 853
score: 98.47197614397321
patch: if ( x == x )
rank: 854
score: 98.90750122070312
patch: return - 1 . $NUMBER$ ; } else {
rank: 854
score: 98.764892578125
patch: return $NUMBER$ * ( x ) ;
rank: 854
score: 98.75762939453125
patch: return 0 . 0 - x ;
rank: 854
score: 98.74227469308036
patch: return get ( x ) ;
rank: 854
score: 98.71430206298828
patch: return 0 ; x = 0 ;
rank: 854
score: 98.71235656738281
patch: return ( 0 + x ) ;
rank: 854
score: 98.537255859375
patch: return 0 ) ;
rank: 854
score: 98.47083391462054
patch: if ( x != $NUMBER$ )
rank: 855
score: 98.90733642578125
patch: return exp ( - $NUMBER$ . $NUMBER$ ) ;
rank: 855
score: 98.86808946397569
patch: return 0 * min ( x ) ;
rank: 855
score: 98.73806762695312
patch: return 0 . $NUMBER$ * true ;
rank: 855
score: 98.71383666992188
patch: double 0 = 0 . $NUMBER$ ;
rank: 855
score: 98.47037760416667
patch: return exp ( x ;
rank: 856
score: 98.90662841796875
patch: double x = exp ( - x ) ;
rank: 856
score: 98.7567138671875
patch: return 0 . $NUMBER$ ; ) ;
rank: 856
score: 98.71265411376953
patch: return - 0 . 0 ; ;
rank: 856
score: 98.47021484375
patch: double negate ( ) ;
rank: 857
score: 98.90532769097223
patch: return - 0 . $NUMBER$ ; } else
rank: 857
score: 98.75543212890625
patch: * return 0 . $NUMBER$ ;
rank: 857
score: 98.71107482910156
patch: return 0 . 0 * float ;
rank: 857
score: 98.69623674665179
patch: return 0 . $NUMBER$ $NUMBER$ ;
rank: 857
score: 98.46407063802083
patch: temp = - x ;
rank: 858
score: 98.75543212890625
patch: return 0 . null ) ;
rank: 858
score: 98.71043395996094
patch: return byte CaMeL Value ( ) ;
rank: 858
score: 98.52650669642857
patch: return x . ( ) ;
rank: 858
score: 98.46223958333333
patch: break ( 0 ) ;
rank: 859
score: 98.73297882080078
patch: return - 0 [ $NUMBER$ ] ;
rank: 859
score: 98.46190185546875
patch: return false ; }
rank: 860
score: 98.89821370442708
patch: return - 1 . $NUMBER$ * exp ;
rank: 860
score: 98.86017523871527
patch: return 0 . 1 ( x ) ;
rank: 860
score: 98.68498011997768
patch: throw exp ( x ) ;
rank: 860
score: 98.53417096819196
patch: return 0 - - x ;
rank: 860
score: 98.46103922526042
patch: negate ( ) ; }
rank: 861
score: 98.73236083984375
patch: return get ( - x ) ;
rank: 861
score: 98.68387858072917
patch: return x * x ;
rank: 861
score: 98.53367396763393
patch: ya ( - x ) ;
rank: 861
score: 98.46034545898438
patch: result = x ;
rank: 862
score: 98.74636840820312
patch: return 0 * 0 . ) ;
rank: 862
score: 98.73163604736328
patch: return - - 0 . 1 ;
rank: 862
score: 98.67770821707589
patch: return ( x ) ) ;
rank: 862
score: 98.53329031808036
patch: buf += 0 . $NUMBER$ ;
rank: 862
score: 98.5145263671875
patch: return min ( x ) ;
rank: 862
score: 98.45914916992187
patch: x = $NUMBER$ ;
rank: 863
score: 98.85542297363281
patch: return 0 return 0 . $NUMBER$ ;
rank: 863
score: 98.7451400756836
patch: return 0 . exp ( ) ;
rank: 863
score: 98.74227905273438
patch: return x . $NUMBER$ * x ;
rank: 863
score: 98.70098876953125
patch: return 0 . 0 * true ;
rank: 863
score: 98.67553100585937
patch: return 0 ; ;
rank: 863
score: 98.45792643229167
patch: return x - 1 ;
rank: 864
score: 98.88575575086806
patch: return exp ( x ) ; } else
rank: 864
score: 98.7401123046875
patch: return 0 . $NUMBER$ ( ) ;
rank: 864
score: 98.70037841796875
patch: = ( x ) - x ;
rank: 864
score: 98.6749267578125
patch: return 0 + $NUMBER$ ;
rank: 864
score: 98.45130411783855
patch: return - ( x ;
rank: 865
score: 98.88460286458333
patch: return ( x > $NUMBER$ ) ; }
rank: 865
score: 98.744384765625
patch: return $NUMBER$ * 0 * x ;
rank: 865
score: 98.6985092163086
patch: to CaMeL String ( x ) ;
rank: 865
score: 98.67484828404018
patch: } else { return 0 ;
rank: 865
score: 98.52810232979911
patch: return x + - x ;
rank: 866
score: 98.73503112792969
patch: return 0 . 0 + 0 ;
rank: 866
score: 98.69767761230469
patch: return 0 . $NUMBER$ * Double ;
rank: 866
score: 98.51124790736607
patch: return ( double ) 0 ;
rank: 866
score: 98.44722493489583
patch: double sinh = x ;
rank: 867
score: 98.88072374131944
patch: return - 0 . 0 * exp ;
rank: 867
score: 98.84947374131944
patch: return exp ( x . length ) ;
rank: 867
score: 98.73385184151786
patch: return 0 . $NUMBER$ x ;
rank: 867
score: 98.4469970703125
patch: temp = x ;
rank: 868
score: 98.84856499565973
patch: return exp ( $NUMBER$ , x ) ;
rank: 868
score: 98.72109985351562
patch: return - ( - $NUMBER$ ) ;
rank: 868
score: 98.69549560546875
patch: return 0 . 0 * $STRING$ ;
rank: 868
score: 98.523681640625
patch: x = 0 ; break ;
rank: 869
score: 98.72716522216797
patch: return x * 0 . 0 ;
rank: 869
score: 98.6929702758789
patch: return - 0 . - 0 ;
rank: 869
score: 98.6572774251302
patch: return $NUMBER$ * x ;
rank: 869
score: 98.44138590494792
patch: exp ( 0 ) ;
rank: 870
score: 98.43785603841145
patch: return ( true ) ;
rank: 871
score: 98.71804809570312
patch: return 0 / 0 . 0 ;
rank: 871
score: 98.68605259486607
patch: long 0 ( x ) ;
rank: 871
score: 98.65414864676339
patch: return return 1 . $NUMBER$ ;
rank: 871
score: 98.52113560267857
patch: x = 0 . false ;
rank: 871
score: 98.49248395647321
patch: return - 0 ; } else
rank: 871
score: 98.42950439453125
patch: x = x ; }
rank: 872
score: 98.71629333496094
patch: return 0 / $NUMBER$ . $NUMBER$ ;
rank: 872
score: 98.52091471354167
patch: y = - x ;
rank: 872
score: 98.4285888671875
patch: temp = - 0 ;
rank: 873
score: 98.715576171875
patch: return 0 . 0 ( x ;
rank: 873
score: 98.63841901506696
patch: return start ( x ) ;
rank: 873
score: 98.51963588169643
patch: b = 0 . 0 ;
rank: 873
score: 98.49051339285714
patch: return x + x ) ;
rank: 874
score: 98.86808946397569
patch: return ( - 1 . 0 ) ;
rank: 874
score: 98.71553039550781
patch: return 0 . $NUMBER$ . 0 ;
rank: 874
score: 98.63567243303571
patch: return 0 * x ; ;
rank: 874
score: 98.51616559709821
patch: result = 0 . 1 ;
rank: 874
score: 98.48970249720982
patch: / * / return 0 ;
rank: 874
score: 98.42220052083333
patch: return return - x ;
rank: 875
score: 98.6312764485677
patch: return x * $NUMBER$ ;
rank: 875
score: 98.41907958984375
patch: result = true ;
rank: 876
score: 98.71319580078125
patch: assert ( 0 == x ) ;
rank: 876
score: 98.62676130022321
patch: return 0 . $NUMBER$ ++ ;
rank: 876
score: 98.48122151692708
patch: return 0 / x ;
rank: 877
score: 98.86288452148438
patch: return ( x > 1 ) ;
rank: 877
score: 98.71163940429688
patch: return 0 . $NUMBER$ * / ;
rank: 877
score: 98.65899658203125
patch: and exp ( x ) ;
rank: 877
score: 98.47986857096355
patch: return 0 ; } else
rank: 877
score: 98.41427612304688
patch: double x = x ;
rank: 878
score: 98.70856475830078
patch: return 0 . 0 / x ;
rank: 878
score: 98.70443725585938
patch: return ( double ) - x ;
rank: 878
score: 98.50869750976562
patch: return 0 - 0 ;
rank: 878
score: 98.47796630859375
patch: yb = - 0 ;
rank: 878
score: 98.40645345052083
patch: temp = true ; }
rank: 879
score: 98.70535278320312
patch: return 0 / exp ( ) ;
rank: 879
score: 98.40401204427083
patch: x = 0 ; }
rank: 880
score: 98.86024475097656
patch: return ( exp ( ) ) ;
rank: 880
score: 98.64365641276042
patch: return 1 . $NUMBER$ ;
rank: 880
score: 98.50788225446429
patch: x = x ; break ;
rank: 880
score: 98.4038330078125
patch: return - 1 ;
rank: 881
score: 98.80457305908203
patch: return 0 = 0 . 0 ;
rank: 881
score: 98.7098159790039
patch: return $NUMBER$ * 0 * 0 ;
rank: 881
score: 98.61447579520089
patch: return return 1 . 0 ;
rank: 881
score: 98.46518961588542
patch: / / return 0 ;
rank: 881
score: 98.40291341145833
patch: return x ; } else
rank: 882
score: 98.85918511284723
patch: return - $NUMBER$ . $NUMBER$ * exp ;
rank: 882
score: 98.70824432373047
patch: return $NUMBER$ * $NUMBER$ * x ;
rank: 882
score: 98.62312825520833
patch: return 1 . 0 ;
rank: 882
score: 98.61114501953125
patch: return exp ( $STRING$ ) ;
rank: 882
score: 98.50312151227679
patch: return - x + $NUMBER$ ;
rank: 882
score: 98.39645385742188
patch: result = false ; }
rank: 883
score: 98.85618760850694
patch: result = new double [ $NUMBER$ ] ;
rank: 883
score: 98.7066879272461
patch: return ( 0 . null ) ;
rank: 883
score: 98.60725911458333
patch: return 0 = $NUMBER$ ;
rank: 883
score: 98.39439900716145
patch: return - 1 ; }
rank: 884
score: 98.70584869384766
patch: return 0 . $NUMBER$ * x $NUMBER$
rank: 884
score: 98.61824253627232
patch: double return 0 . $NUMBER$ ;
rank: 884
score: 98.44894409179688
patch: y = 0 ;
rank: 884
score: 98.38705444335938
patch: x = false ;
rank: 885
score: 98.70528411865234
patch: return $NUMBER$ . 1 * x ;
rank: 885
score: 98.69173177083333
patch: return 0 ; } ;
rank: 885
score: 98.61615862165179
patch: value = 0 . 0 ;
rank: 885
score: 98.60292561848958
patch: return ( exp ) ;
rank: 885
score: 98.3806396484375
patch: return ( x ;
rank: 886
score: 98.84545220269098
patch: return exp ( - $NUMBER$ ) ; }
rank: 886
score: 98.70268249511719
patch: return 0 . $NUMBER$ * exp 0
rank: 886
score: 98.68952941894531
patch: if ( exp ( x ) ;
rank: 886
score: 98.60262625558036
patch: return ( exp $NUMBER$ ) ;
rank: 886
score: 98.5008544921875
patch: return - x + 1 ;
rank: 886
score: 98.43265787760417
patch: append ( x ) ;
rank: 886
score: 98.37392171223958
patch: double negate = true ;
rank: 887
score: 98.70226287841797
patch: return 0 . $NUMBER$ * Math ;
rank: 887
score: 98.68904876708984
patch: return 0 . 0 ; ) ;
rank: 887
score: 98.60942731584821
patch: = - 0 . 0 ;
rank: 887
score: 98.59967041015625
patch: return 0 * x $NUMBER$ ;
rank: 888
score: 98.591796875
patch: result ( x ) ;
rank: 888
score: 98.37097930908203
patch: return x ;
rank: 889
score: 98.60768345424107
patch: return 0 . 0 0 ;
rank: 889
score: 98.58853585379464
patch: return $NUMBER$ [ x ] ;
rank: 889
score: 98.49448067801339
patch: negate ( ) ; break ;
rank: 889
score: 98.40932210286458
patch: return 0 ; * /
rank: 889
score: 98.36984252929688
patch: return x - $NUMBER$ ;
rank: 890
score: 98.83990478515625
patch: return - 0 . $NUMBER$ / exp ;
rank: 890
score: 98.69857788085938
patch: return 1 . ( x ) ;
rank: 890
score: 98.60595703125
patch: return 0 . $NUMBER$ Double ;
rank: 890
score: 98.49276297433036
patch: return - 0 - $NUMBER$ ;
rank: 890
score: 98.40500895182292
patch: return x - 0 ;
rank: 891
score: 98.69697570800781
patch: return 0 . $NUMBER$ * $NUMBER$ *
rank: 891
score: 98.68133544921875
patch: return x - 0 . 0 ;
rank: 891
score: 98.60416666666667
patch: = ( x ) ;
rank: 891
score: 98.58415004185268
patch: return exp ( exp ) ;
rank: 891
score: 98.40313720703125
patch: y = - 0 ;
rank: 891
score: 98.36814371744792
patch: return 0 ) ; }
rank: 892
score: 98.69654846191406
patch: return 0 . $NUMBER$ * exp $NUMBER$
rank: 892
score: 98.60267857142857
patch: float CaMeL Value ( ) ;
rank: 892
score: 98.49138532366071
patch: break - 0 . $NUMBER$ ;
rank: 892
score: 98.36580403645833
patch: z = - x ;
rank: 893
score: 98.77137756347656
patch: return 0 * 0 + 0 ;
rank: 893
score: 98.69221496582031
patch: return $NUMBER$ * 0 . 0 ;
rank: 893
score: 98.67854309082031
patch: return x * $NUMBER$ . $NUMBER$ ;
rank: 893
score: 98.58022635323661
patch: return 0 * $NUMBER$ ; ;
rank: 893
score: 98.49053955078125
patch: return - x ; break ;
rank: 893
score: 98.39872233072917
patch: return x ; break ;
rank: 893
score: 98.365234375
patch: x = - $NUMBER$ ;
rank: 894
score: 98.83205837673611
patch: return ( x > - $NUMBER$ ) ;
rank: 894
score: 98.596435546875
patch: = - 0 . $NUMBER$ ;
rank: 894
score: 98.48968505859375
patch: result = 0 . x ;
rank: 894
score: 98.36233520507812
patch: negate ( true ) ;
rank: 895
score: 98.67976597377232
patch: return 0 . $NUMBER$ ; else
rank: 895
score: 98.57302420479911
patch: return return $NUMBER$ . $NUMBER$ ;
rank: 895
score: 98.48851667131696
patch: return - x * $NUMBER$ ;
rank: 895
score: 98.35257975260417
patch: return return x ; }
rank: 896
score: 98.67244175502232
patch: 0 return 0 . $NUMBER$ ;
rank: 896
score: 98.63786969866071
patch: return - - - $NUMBER$ ;
rank: 896
score: 98.58615548270089
patch: return 1 . $NUMBER$ ; ;
rank: 896
score: 98.57265218098958
patch: throw ( $STRING$ ) ;
rank: 896
score: 98.48816789899554
patch: return - 0 . $NUMBER$ *
rank: 896
score: 98.38442993164062
patch: * / return x ;
rank: 896
score: 98.34603881835938
patch: comparison ( x ) ;
rank: 897
score: 98.63499232700893
patch: { return 0 . $NUMBER$ ;
rank: 897
score: 98.58367047991071
patch: return 0 1 . $NUMBER$ ;
rank: 897
score: 98.3843994140625
patch: / / return x ;
rank: 898
score: 98.38096110026042
patch: return 0 . 1 ;
rank: 898
score: 98.34108479817708
patch: temp ( x ) ;
rank: 899
score: 98.76350402832031
patch: return 0 * 0 . 1 ;
rank: 899
score: 98.63180106026786
patch: return x * - x ;
rank: 899
score: 98.33389892578126
patch: x = true ;
rank: 900
score: 98.63149588448661
patch: throw new Exception ( ) ;
rank: 900
score: 98.57215227399554
patch: double return 0 . 0 ;
rank: 900
score: 98.4401346842448
patch: b = - x ;
rank: 900
score: 98.33160400390625
patch: ra ( x ) ;
rank: 901
score: 98.65169270833333
patch: return Double . $NUMBER$ ;
rank: 901
score: 98.62667846679688
patch: return - - 1 ;
rank: 901
score: 98.62285505022321
patch: return 0 . * x ;
rank: 901
score: 98.56364222935268
patch: } * * * * /
rank: 901
score: 98.42545572916667
patch: return x + $NUMBER$ ;
rank: 901
score: 98.35654703776042
patch: * / return 0 ;
rank: 901
score: 98.3291524251302
patch: return return 0 ; }
rank: 902
score: 98.82255554199219
patch: if ( x < 1 ) {
rank: 902
score: 98.57047816685268
patch: value = 0 . $NUMBER$ ;
rank: 902
score: 98.35317993164062
patch: return - x ) ;
rank: 902
score: 98.32861328125
patch: overflow ( x ) ;
rank: 903
score: 98.56840297154018
patch: double 0 ( x ) ;
rank: 903
score: 98.55830601283482
patch: return 0 * exp ) ;
rank: 904
score: 98.81999376085069
patch: return 0 . $NUMBER$ * exp ( x
rank: 904
score: 98.56398228236607
patch: = - 1 . 0 ;
rank: 904
score: 98.41483561197917
patch: return $NUMBER$ + x ;
rank: 904
score: 98.3247578938802
patch: x = - 1 ;
rank: 905
score: 98.81993272569444
patch: return 0 . 0 * exp $NUMBER$ ;
rank: 905
score: 98.75692749023438
patch: return ( x . length ) ;
rank: 905
score: 98.55631801060268
patch: return 0 * 0 ; ;
rank: 905
score: 98.40974934895833
patch: return x + 1 ;
rank: 905
score: 98.343408203125
patch: break - 0 ;
rank: 907
score: 98.75315856933594
patch: return 0 . start ( ) ;
rank: 907
score: 98.55495198567708
patch: d ( x ) ;
rank: 907
score: 98.54513113839286
patch: byte CaMeL Value ( ) ;
rank: 907
score: 98.31826782226562
patch: return ( - x ;
rank: 908
score: 98.75196075439453
patch: exp ( 0 , x ) ;
rank: 908
score: 98.60883440290179
patch: return abs ( x ) ;
rank: 908
score: 98.5901590983073
patch: return 0 . $NUMBER$ *
rank: 908
score: 98.58548409598214
patch: return new double [ x ]
rank: 908
score: 98.5518086751302
patch: return x * 0 ;
rank: 908
score: 98.39589436848958
patch: return x + 0 ;
rank: 908
score: 98.33292643229167
patch: return ( false ) ;
rank: 909
score: 98.81419542100694
patch: return exp ( x < 0 ) ;
rank: 909
score: 98.74969482421875
patch: return 0 * 0 + x ;
rank: 909
score: 98.58928571428571
patch: return 0 . x ) ;
rank: 909
score: 98.54417201450893
patch: return 1 . - 0 ;
rank: 909
score: 98.32950846354167
patch: x = 0 ) ;
rank: 909
score: 98.317138671875
patch: double negate = x ;
rank: 910
score: 98.60735212053571
patch: return 0 1 . 0 ;
rank: 910
score: 98.54855346679688
patch: return $NUMBER$ * $NUMBER$ ;
rank: 911
score: 98.81319173177083
patch: return new double [ - 0 ] ;
rank: 911
score: 98.74742889404297
patch: return 0 = 0 . 1 ;
rank: 911
score: 98.60559953962054
patch: return 0 . 0 $NUMBER$ ;
rank: 911
score: 98.57741001674107
patch: return x - - x ;
rank: 911
score: 98.54794747488839
patch: return 0 . 1 ; ;
rank: 912
score: 98.54779924665179
patch: result return 0 . $NUMBER$ ;
rank: 912
score: 98.3221435546875
patch: return 0 . false ;
rank: 912
score: 98.31459554036458
patch: double return = x ;
rank: 913
score: 98.54678780691964
patch: } exp ( x ) ;
rank: 913
score: 98.5382080078125
patch: return 1 [ $NUMBER$ ] ;
rank: 913
score: 98.31420288085937
patch: y = x ;
rank: 913
score: 98.31064860026042
patch: result = true ; }
rank: 914
score: 98.54588099888393
patch: return 0 * exp 0 ;
rank: 915
score: 98.80596923828125
patch: throw new Exception ( $STRING$ ) ;
rank: 915
score: 98.74633026123047
patch: return 0 . 0 * exp (
rank: 915
score: 98.58346993582589
patch: return Double . $NUMBER$ ) ;
rank: 915
score: 98.3011474609375
patch: add ( x ) ;
rank: 916
score: 98.7380599975586
patch: return 0 return 0 . 0 ;
rank: 916
score: 98.52150472005208
patch: return 0 * x )
rank: 917
score: 98.557861328125
patch: return $NUMBER$ * 0 ;
rank: 917
score: 98.55253383091518
patch: return compute ( x ) ;
rank: 917
score: 98.53299386160714
patch: return 0 ( 0 ) ;
rank: 917
score: 98.51998901367188
patch: } * * * /
rank: 917
score: 98.29998779296875
patch: exp ( true ) ;
rank: 917
score: 98.29397583007812
patch: yb = - x ;
rank: 918
score: 98.56117466517857
patch: return - $NUMBER$ . 1 ;
rank: 918
score: 98.51706949869792
patch: return 0 . ) ;
rank: 918
score: 98.29873657226562
patch: return $NUMBER$ ; } }
rank: 919
score: 98.79917399088542
patch: return x - 0 . $NUMBER$ ; }
rank: 919
score: 98.557373046875
patch: return 0 + - 0 ;
rank: 919
score: 98.53220912388393
patch: return - 1 . 1 ;
rank: 919
score: 98.51432291666667
patch: return 0 * ) ;
rank: 919
score: 98.28598022460938
patch: set ( x ) ;
rank: 920
score: 98.79689534505208
patch: return new double [ - 1 ] ;
rank: 920
score: 98.7232437133789
patch: return 0 = $NUMBER$ . $NUMBER$ ;
rank: 920
score: 98.55561174665179
patch: return - - $NUMBER$ ; }
rank: 920
score: 98.29146728515624
patch: temp = false ;
rank: 921
score: 98.7220687866211
patch: 0 return exp ( x ) ;
rank: 921
score: 98.55052839006696
patch: return 0 ; . 0 ;
rank: 921
score: 98.53120640345982
patch: return 1 . 0 ; ;
rank: 921
score: 98.2870381673177
patch: double x = 0 ;
rank: 922
score: 98.72064971923828
patch: * return exp ( x ) ;
rank: 922
score: 98.54969133649554
patch: return new 0 . 0 ;
rank: 922
score: 98.50856526692708
patch: return 1 * x ;
rank: 923
score: 98.79576280381944
patch: return ( - 0 . 1 ) ;
rank: 923
score: 98.54677036830357
patch: return 0 $NUMBER$ . 0 ;
rank: 923
score: 98.53759765625
patch: return 0 . * 0 ;
rank: 923
score: 98.32440185546875
patch: return $NUMBER$ - x ;
rank: 923
score: 98.28359375
patch: / / * /
rank: 923
score: 98.27625528971355
patch: / * return x ;
rank: 924
score: 98.79538981119792
patch: if ( x > - $NUMBER$ ) {
rank: 924
score: 98.55070277622768
patch: return - 0 . FALSE ;
rank: 924
score: 98.52862548828125
patch: long return 0 . 0 ;
rank: 924
score: 98.28155517578125
patch: switch ( x ) {
rank: 925
score: 98.52804129464286
patch: return 1 . $NUMBER$ ) ;
rank: 925
score: 98.46282958984375
patch: return 0 * exp ;
rank: 925
score: 98.2765869140625
patch: return return x ;
rank: 926
score: 98.54560198102679
patch: add ( - x ) ;
rank: 926
score: 98.3113301595052
patch: result += - x ;
rank: 926
score: 98.27573649088542
patch: / / * * /
rank: 926
score: 98.26381429036458
patch: / * return 0 ;
rank: 927
score: 98.53602818080357
patch: return 0 $NUMBER$ . $NUMBER$ ;
rank: 927
score: 98.5325927734375
patch: return 0 . ) ) ;
rank: 927
score: 98.44669596354167
patch: return 0 == x ;
rank: 927
score: 98.304931640625
patch: return 0 - $NUMBER$ ;
rank: 927
score: 98.27435302734375
patch: return / 0 ; }
rank: 928
score: 98.51823207310268
patch: return 0 . 0 ; else
rank: 928
score: 98.30394490559895
patch: return 0 . x ;
rank: 929
score: 98.42781575520833
patch: throw ( x ) ;
rank: 929
score: 98.3024190266927
patch: start ( x ) ;
rank: 929
score: 98.2662353515625
patch: / * * /
rank: 929
score: 98.25307210286458
patch: p ( x ) ;
rank: 930
score: 98.42189534505208
patch: return 0 + exp ;
rank: 930
score: 98.26424153645833
patch: return $NUMBER$ . 0 ;
rank: 930
score: 98.25291951497395
patch: return x ; * /
rank: 931
score: 98.51382010323661
patch: short CaMeL Value ( ) ;
rank: 931
score: 98.50689697265625
patch: / return 0 . $NUMBER$ ;
rank: 931
score: 98.26395670572917
patch: x = $NUMBER$ ; }
rank: 932
score: 98.76876831054688
patch: throw new Exception ( x ) ;
rank: 932
score: 98.52259172712054
patch: return 0 ; } else ;
rank: 932
score: 98.41126505533855
patch: return 0 < x ;
rank: 932
score: 98.2584228515625
patch: return new - x ;
rank: 933
score: 98.51879010881696
patch: return 0 0 . 0 ;
rank: 933
score: 98.4572041829427
patch: long ( x ) ;
rank: 933
score: 98.40303955078124
patch: } return 0 ;
rank: 933
score: 98.29498291015625
patch: return - 0 ; ;
rank: 933
score: 98.25726318359375
patch: return ( new double [
rank: 933
score: 98.2455810546875
patch: return x ) ;
rank: 934
score: 98.51181466238839
patch: return Double . 0 ; }
rank: 934
score: 98.24466959635417
patch: return 0 : 0 ;
rank: 935
score: 98.47481282552083
patch: double 0 = 0 ;
rank: 935
score: 98.25545654296874
patch: return - sinh ;
rank: 936
score: 98.51065499441964
patch: return Double . $NUMBER$ ; ;
rank: 936
score: 98.3798828125
patch: return $NUMBER$ = x ;
rank: 936
score: 98.24387613932292
patch: abs ( x ) ;
rank: 937
score: 98.25182088216145
patch: / / } else {
rank: 938
score: 98.73321533203125
patch: return x - ( x ) ;
rank: 938
score: 98.46156819661458
patch: update ( x ) ;
rank: 938
score: 98.37020874023438
patch: return 0 * this ;
rank: 938
score: 98.25120849609375
patch: z = x ;
rank: 938
score: 98.2412821451823
patch: sinh = - 0 ;
rank: 939
score: 98.61085728236607
patch: return exp [ x ] ;
rank: 939
score: 98.50306047712054
patch: return 0 ) . 0 ;
rank: 939
score: 98.28536987304688
patch: x += - x ;
rank: 939
score: 98.2500712076823
patch: / ( 0 ) ;
rank: 940
score: 98.60116141183036
patch: return 0 * x ; }
rank: 940
score: 98.50043596540179
patch: return 0 . 0 * ;
rank: 940
score: 98.44791666666667
patch: long 0 ( ) ;
rank: 940
score: 98.36803181966145
patch: } * * * *
rank: 940
score: 98.28228759765625
patch: return 0 *= x ;
rank: 940
score: 98.25006103515625
patch: result = x ; }
rank: 940
score: 98.2142333984375
patch: yb = 0 ;
rank: 941
score: 98.72958374023438
patch: if ( x == x ) {
rank: 941
score: 98.59571329752605
patch: return 0 return 0 ;
rank: 941
score: 98.24979654947917
patch: x = false ; }
rank: 941
score: 98.20579223632812
patch: x += x ;
rank: 942
score: 98.38529459635417
patch: = 0 . 0 ;
rank: 942
score: 98.35745239257812
patch: return 0 ; ) ;
rank: 942
score: 98.24580891927083
patch: return / - x ;
rank: 943
score: 98.72506713867188
patch: if ( x == 1 ) {
rank: 943
score: 98.48811848958333
patch: return 0 / 0 ;
rank: 943
score: 98.35169474283855
patch: } * * * ;
rank: 944
score: 98.47434488932292
patch: apply ( x ) ;
rank: 944
score: 98.37434895833333
patch: divide ( x ) ;
rank: 944
score: 98.35068766276042
patch: return 0 * value ;
rank: 944
score: 98.2425028483073
patch: return ( x ; }
rank: 944
score: 98.17984008789062
patch: temp = 0 ;
rank: 945
score: 98.34945678710938
patch: return value ( ) ;
rank: 945
score: 98.17174682617187
patch: result += x ;
rank: 946
score: 98.34450276692708
patch: return $NUMBER$ + $NUMBER$ ;
rank: 946
score: 98.27264404296875
patch: return negate ( ) ;
rank: 946
score: 98.1878173828125
patch: return - negate ;
rank: 946
score: 98.170556640625
patch: yb = true ;
rank: 947
score: 98.44807942708333
patch: return 0 ; ; }
rank: 947
score: 98.41920979817708
patch: return double [ ] ;
rank: 947
score: 98.34393310546875
patch: } * * *
rank: 947
score: 98.32921346028645
patch: return Double . 0 ;
rank: 947
score: 98.1823974609375
patch: x = 1 ;
rank: 947
score: 98.1680908203125
patch: yb = x ;
rank: 948
score: 98.44244384765625
patch: log ( x ) ;
rank: 948
score: 98.33497111002605
patch: translate ( x ) ;
rank: 948
score: 98.32999674479167
patch: return 1 + x ;
rank: 948
score: 98.3236592610677
patch: int ( x ) ;
rank: 948
score: 98.17639770507813
patch: return / 0 ;
rank: 949
score: 98.17512817382813
patch: return 1 ; }
rank: 949
score: 98.15499267578124
patch: break - $NUMBER$ ;
rank: 950
score: 98.16416015625
patch: return sinh ; }
rank: 951
score: 98.69271850585938
patch: return - 0 [ 0 ] ;
rank: 951
score: 98.32619222005208
patch: return exp ( 0 ;
rank: 951
score: 98.31964111328125
patch: throw 0 * 0 ;
rank: 951
score: 98.13878173828125
patch: return + x ;
rank: 952
score: 98.69132995605469
patch: if ( x > x ) {
rank: 952
score: 98.312744140625
patch: return ( return ) ;
rank: 952
score: 98.25930786132812
patch: b ( x ) ;
rank: 952
score: 98.1512939453125
patch: hi ( ) ;
rank: 953
score: 98.31116739908855
patch: ret ( x ) ;
rank: 953
score: 98.30103556315105
patch: float ( x ) ;
rank: 953
score: 98.2951151529948
patch: equals ( x ) ;
rank: 953
score: 98.14928588867187
patch: return * $NUMBER$ ;
rank: 954
score: 98.3499755859375
patch: return sinh + x ;
rank: 954
score: 98.28916422526042
patch: = 0 . $NUMBER$ ;
rank: 954
score: 98.14518432617187
patch: exp = true ;
rank: 954
score: 98.09583740234375
patch: flush ( ) ;
rank: 955
score: 98.28531901041667
patch: validate ( x ) ;
rank: 955
score: 98.27182006835938
patch: return 0 . 0 *
rank: 955
score: 98.14448852539063
patch: z = 0 ;
rank: 956
score: 98.30116780598958
patch: return 1 * $NUMBER$ ;
rank: 956
score: 98.2764383951823
patch: double 0 ( ) ;
rank: 956
score: 98.143115234375
patch: return return 0 ;
rank: 956
score: 98.08076171875
patch: = - 0 ;
rank: 957
score: 98.29901123046875
patch: return 0 * null ;
rank: 957
score: 98.273193359375
patch: signum ( x ) ;
rank: 957
score: 98.1315673828125
patch: exp = x ;
rank: 957
score: 98.07112426757813
patch: else return 0 ;
rank: 958
score: 98.67598724365234
patch: return ( x < 1 ) ;
rank: 958
score: 98.29468994140625
patch: return ( 0 ;
rank: 959
score: 98.32499186197917
patch: { return - 0 ;
rank: 959
score: 98.262646484375
patch: return $NUMBER$ ) ;
rank: 959
score: 98.11021118164062
patch: b = x ;
rank: 959
score: 98.06207885742188
patch: end = 0 ;
rank: 960
score: 98.6679916381836
patch: double exp ( - x ) ;
rank: 960
score: 98.2647196451823
patch: repaint ( x ) ;
rank: 960
score: 98.22958984375
patch: throw ( ) ;
rank: 960
score: 98.123291015625
patch: result += 0 ;
rank: 960
score: 98.10214233398438
patch: double - x ;
rank: 960
score: 98.05046997070312
patch: return new 0 ;
rank: 961
score: 98.66588592529297
patch: return - ( x ) ; }
rank: 961
score: 98.22626342773438
patch: } * * /
rank: 961
score: 98.09990234375
patch: return new double [
rank: 961
score: 98.047265625
patch: yb += x ;
rank: 962
score: 98.25492350260417
patch: push ( x ) ;
rank: 962
score: 98.24662272135417
patch: exp ( x ) .
rank: 962
score: 98.19423828125
patch: return x ; ;
rank: 962
score: 98.09474487304688
patch: return * x ;
rank: 962
score: 98.04693603515625
patch: tmp = 0 ;
rank: 963
score: 98.3201192220052
patch: assert 0 < 0 ;
rank: 963
score: 98.25266520182292
patch: initialize ( x ) ;
rank: 963
score: 98.07772216796874
patch: / * / ;
rank: 964
score: 98.07698974609374
patch: ( 0 ) ;
rank: 965
score: 98.6583251953125
patch: double exp ( - $NUMBER$ ) ;
rank: 965
score: 98.30607096354167
patch: copy ( x ) ;
rank: 965
score: 98.2410380045573
patch: int 0 = 0 ;
rank: 965
score: 98.08287963867187
patch: b = 0 ;
rank: 965
score: 98.07642822265625
patch: return / x ;
rank: 966
score: 98.39987182617188
patch: return 0 return $NUMBER$ ;
rank: 966
score: 98.29688517252605
patch: return sinh - $NUMBER$ ;
rank: 966
score: 98.24081420898438
patch: = true ; break ;
rank: 966
score: 98.07544555664063
patch: return / $NUMBER$ ;
rank: 967
score: 98.29433186848958
patch: return sinh - x ;
rank: 967
score: 98.12007446289063
patch: } return x ;
rank: 967
score: 98.07114868164062
patch: return $STRING$ ; }
rank: 968
score: 98.23072306315105
patch: return ) * 0 ;
rank: 968
score: 98.11461181640625
patch: return $NUMBER$ ; ;
rank: 968
score: 98.05748291015625
patch: exp ( x ;
rank: 968
score: 97.99573974609375
patch: result ( ) ;
rank: 969
score: 98.36838785807292
patch: { return 0 ; }
rank: 969
score: 98.05140991210938
patch: return null ; }
rank: 969
score: 97.995556640625
patch: tmp = true ;
rank: 970
score: 98.2982686360677
patch: return 0 / $NUMBER$ ;
rank: 970
score: 98.09242553710938
patch: return exp x ;
rank: 970
score: 98.04889526367188
patch: / / / ;
rank: 970
score: 97.98826904296875
patch: ret = true ;
rank: 971
score: 98.20013427734375
patch: 0 return 0 ;
rank: 971
score: 98.14376220703124
patch: = - 1 ;
rank: 971
score: 98.09165649414062
patch: value = x ;
rank: 971
score: 98.04100952148437
patch: / * / }
rank: 971
score: 97.98648071289062
patch: start = 0 ;
rank: 972
score: 98.35305786132812
patch: return 0 == 0 ;
rank: 972
score: 98.0726806640625
patch: = - x ;
rank: 972
score: 98.0390625
patch: return Math ; }
rank: 972
score: 98.00296630859376
patch: return - ) ;
rank: 972
score: 97.98645629882813
patch: return - true ;
rank: 973
score: 98.57032121930804
patch: return x > 0 ) ;
rank: 973
score: 98.03855590820312
patch: / * / {
rank: 973
score: 97.998486328125
patch: return - false ;
rank: 973
score: 97.98494873046874
patch: break - 1 ;
rank: 974
score: 98.06688232421875
patch: * * * /
rank: 974
score: 98.03115234375
patch: return * 0 ;
rank: 974
score: 97.98155517578125
patch: break + 0 ;
rank: 975
score: 98.56780133928571
patch: return x > $NUMBER$ ) ;
rank: 975
score: 98.26812133789062
patch: if ( x ;
rank: 975
score: 98.05995483398438
patch: return ( exp ;
rank: 975
score: 98.02619018554688
patch: return new x ;
rank: 975
score: 97.99039306640626
patch: return ( ) ;
rank: 976
score: 98.31893310546874
patch: return 0 0 ;
rank: 976
score: 98.26255289713542
patch: fail ( $STRING$ ) ;
rank: 976
score: 98.003759765625
patch: = true ; }
rank: 976
score: 97.98363647460937
patch: buf = 0 ;
rank: 976
score: 97.97467041015625
patch: ya = true ;
rank: 977
score: 98.16355590820312
patch: { return x ;
rank: 977
score: 98.04478759765625
patch: } else * /
rank: 977
score: 98.015283203125
patch: return 0 ; else
rank: 977
score: 98.00802001953124
patch: ya = false ;
rank: 977
score: 97.99972534179688
patch: * / * /
rank: 977
score: 97.9740966796875
patch: tmp = x ;
rank: 978
score: 98.14346923828126
patch: { return 0 ;
rank: 978
score: 98.0394775390625
patch: return return 1 ;
rank: 978
score: 98.0015625
patch: overflow = false ;
rank: 978
score: 97.96890258789062
patch: yb = false ;
rank: 979
score: 98.54743303571429
patch: return false ; } else {
rank: 979
score: 98.038818359375
patch: exp ( ) ;
rank: 979
score: 98.00079956054688
patch: return - exp ;
rank: 979
score: 97.96868896484375
patch: else return x ;
rank: 980
score: 98.02213745117187
patch: } * * ;
rank: 980
score: 97.99701538085938
patch: exp = false ;
rank: 980
score: 97.9706787109375
patch: return 1 ) ;
rank: 980
score: 97.97025146484376
patch: negate = true ;
rank: 980
score: 97.96819458007812
patch: d = x ;
rank: 981
score: 97.99663696289062
patch: b = true ;
rank: 981
score: 97.97066040039063
patch: clear ( ) ;
rank: 982
score: 98.22115071614583
patch: cmp ( x ) ;
rank: 982
score: 98.20979614257813
patch: return exp 0 ;
rank: 982
score: 98.06929321289063
patch: return double 0 ;
rank: 982
score: 98.01085815429687
patch: return ( $NUMBER$ ;
rank: 982
score: 97.98499145507813
patch: sinh = true ;
rank: 982
score: 97.9573974609375
patch: return 0 value ;
rank: 982
score: 97.956884765625
patch: result = $NUMBER$ ;
rank: 983
score: 98.51024518694196
patch: return $NUMBER$ ( x ) ;
rank: 983
score: 98.21864827473958
patch: fail ( x ) ;
rank: 983
score: 97.9568603515625
patch: ya = 0 ;
rank: 983
score: 97.94694213867187
patch: switch ( x )
rank: 984
score: 98.49415806361607
patch: double exp ( x ) ;
rank: 984
score: 98.2156270345052
patch: return x ; } ;
rank: 984
score: 98.04779052734375
patch: return double x ;
rank: 984
score: 97.99091186523438
patch: return ( 1 ;
rank: 984
score: 97.95403442382812
patch: numerator = x ;
rank: 985
score: 97.9676513671875
patch: return ; * /
rank: 985
score: 97.961279296875
patch: b = false ;
rank: 985
score: 97.94940795898438
patch: return 0 sinh ;
rank: 985
score: 97.91431274414063
patch: return $NUMBER$ x ;
rank: 985
score: 97.90648803710937
patch: length = 0 ;
rank: 986
score: 98.2071024576823
patch: return Double . ZERO ;
rank: 986
score: 97.94472045898438
patch: break = 0 ;
rank: 986
score: 97.938232421875
patch: pos = 0 ;
rank: 986
score: 97.90624389648437
patch: throw new ) ;
rank: 986
score: 97.89635009765625
patch: return -- x ;
rank: 987
score: 98.07918090820313
patch: * return 0 ;
rank: 987
score: 97.9480224609375
patch: double - 0 ;
rank: 987
score: 97.93712158203125
patch: return += x ;
rank: 988
score: 98.48141915457589
patch: return 0 [ 1 ] ;
rank: 988
score: 97.9853759765625
patch: += - x ;
rank: 988
score: 97.942333984375
patch: ( x ) ;
rank: 988
score: 97.93253784179687
patch: y = $NUMBER$ ;
rank: 988
score: 97.87969970703125
patch: / return 0 ;
rank: 988
score: 97.87374267578124
patch: = ( x ;
rank: 989
score: 98.10962524414063
patch: if ( x )
rank: 989
score: 97.95733642578125
patch: value = 0 ;
rank: 989
score: 97.93775939941406
patch: return $NUMBER$ ;
rank: 989
score: 97.9370361328125
patch: n = 0 ;
rank: 989
score: 97.93080444335938
patch: val = 0 ;
rank: 989
score: 97.85963745117188
patch: = false ; }
rank: 990
score: 98.05914306640625
patch: return exp 1 ;
rank: 990
score: 97.97225952148438
patch: return - $STRING$ ;
rank: 990
score: 97.93521728515626
patch: sinh = false ;
rank: 990
score: 97.93077392578125
patch: sinh = 0 ;
rank: 990
score: 97.59142303466797
patch: return x .
rank: 991
score: 98.04058837890625
patch: return exp $NUMBER$ ;
rank: 991
score: 97.95475463867187
patch: throw null ; }
rank: 991
score: 97.94878540039062
patch: result = null ;
rank: 991
score: 97.9280517578125
patch: += - 0 ;
rank: 991
score: 97.8441162109375
patch: return x 0 ;
rank: 991
score: 97.66654968261719
patch: return true ;
rank: 991
score: 97.35664367675781
patch: return 1 ;
rank: 992
score: 98.04503784179687
patch: return x $NUMBER$ ;
rank: 992
score: 97.92708740234374
patch: += - $NUMBER$ ;
rank: 992
score: 97.92462158203125
patch: x += 0 ;
rank: 992
score: 97.66956329345703
patch: return false ;
rank: 993
score: 97.93862915039062
patch: return 0 * ;
rank: 993
score: 97.4771728515625
patch: / * /
rank: 994
score: 97.93682861328125
patch: return return $NUMBER$ ;
rank: 994
score: 97.86399536132812
patch: return 0 . $NUMBER$
rank: 994
score: 97.74542236328125
patch: = true ;
rank: 994
score: 97.41410064697266
patch: return sinh ;
rank: 994
score: 97.2522201538086
patch: return ) ;
rank: 995
score: 97.9365234375
patch: } else * ;
rank: 995
score: 97.50418853759766
patch: = false ;
rank: 995
score: 96.55576578776042
patch: break ;
rank: 995
score: 94.48680114746094
patch: x
rank: 996
score: 96.515625
patch: / ;
rank: 996
score: 94.40110778808594
patch: }
rank: 997
score: 97.91478881835937
patch: return exp ) ;
rank: 997
score: 97.30471801757812
patch: = 0 ;
rank: 997
score: 96.94029744466145
patch: return ;
rank: 997
score: 96.43710327148438
patch: * /
rank: 997
score: 94.29106140136719
patch: 0
rank: 998
score: 97.81572265625
patch: assert ( x ;
rank: 998
score: 94.38014221191406
patch: return
rank: 998
score: 94.25042724609375
patch: result
rank: 999
score: 97.8075439453125
patch: return 0 double ;
rank: 999
score: 93.864990234375
patch: try
rank: 1000
score: 94.34403991699219
patch: double
rank: 1000
score: 94.22442626953125
patch: {
rank: 1000
score: 94.14149475097656
patch: ;
rank: 1000
score: 93.8541488647461
patch: /
