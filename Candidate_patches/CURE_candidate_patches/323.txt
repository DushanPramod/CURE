rank: 1
score: 99.81787109375
patch: q CaMeL Ty ( residuals ) ;
rank: 2
score: 99.67611873851104
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 2
score: 99.62855747767857
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( ) ;
rank: 2
score: 99.58722795758929
patch: q CaMeL Ty ( ) ;
rank: 2
score: 99.48809407552083
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 2
score: 99.48501150948661
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ) ;
rank: 2
score: 99.42653245192308
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ;
rank: 2
score: 99.36519775390624
patch: q CaMeL Ty ( residuals , residuals ) ;
rank: 3
score: 99.58529502467105
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; update CaMeL Jacobian ( ) ;
rank: 3
score: 99.47858344184027
patch: = q CaMeL Ty ( residuals ) ;
rank: 3
score: 99.38252476283482
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals ) ;
rank: 4
score: 99.61715932992789
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ;
rank: 4
score: 99.56337327223558
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 4
score: 99.46873474121094
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 4
score: 99.44522530691964
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( ) ;
rank: 5
score: 99.52052217371323
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 5
score: 99.44285888671875
patch: q CaMeL Ty ( residuals ) ; ) ;
rank: 5
score: 99.4328857421875
patch: q CaMeL Ty ( residuals , objective ) ;
rank: 5
score: 99.36324055989583
patch: q CaMeL Ty = q CaMeL Ty ;
rank: 6
score: 99.48916786595395
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; qr CaMeL Decomposition ( ) ;
rank: 6
score: 99.46809605189732
patch: q CaMeL Ty ( ) . q CaMeL Ty ( residuals ) ;
rank: 6
score: 99.46075439453125
patch: if ( first CaMeL Iteration ) { qr CaMeL Decomposition ( ) ;
rank: 6
score: 99.3554178873698
patch: q CaMeL Ty = q CaMeL Ty ( residuals ) ;
rank: 6
score: 99.32035006009616
patch: q CaMeL Ty = new q CaMeL Ty ( residuals ) ;
rank: 7
score: 99.46501079358552
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ; update CaMeL Jacobian ( ) ;
rank: 7
score: 99.453955078125
patch: q CaMeL Ty ( residuals ) . q CaMeL Ty ( residuals ) ;
rank: 7
score: 99.41407012939453
patch: if ( first CaMeL Iteration ) {
rank: 8
score: 99.4831787109375
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 8
score: 99.4676154641544
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , current ) ;
rank: 8
score: 99.4565658569336
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 8
score: 99.45168050130208
patch: q CaMeL Ty ( residuals ) ; ;
rank: 8
score: 99.32802327473958
patch: q CaMeL Ty ( residuals , q CaMeL Ty ) ;
rank: 8
score: 99.32428385416667
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ 0 ] ;
rank: 9
score: 99.45601712740384
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( ) ;
rank: 9
score: 99.43455674913194
patch: increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 9
score: 99.300048828125
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ( ) ;
rank: 9
score: 99.26224772135417
patch: q CaMeL Ty ( q CaMeL Ty , residuals ) ;
rank: 10
score: 99.43692452566964
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = 0 ;
rank: 10
score: 99.43409639246323
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 10
score: 99.37378946940105
patch: q CaMeL Ty ( residuals , first CaMeL Iteration ) ;
rank: 10
score: 99.29884168836806
patch: q CaMeL Ty ( residuals $NUMBER$ ) ;
rank: 10
score: 99.29864501953125
patch: q CaMeL Ty = residuals ; q CaMeL Ty ( residuals ) ;
rank: 10
score: 99.27140669389205
patch: q CaMeL Ty = q CaMeL Ty ( ) ;
rank: 10
score: 99.251513671875
patch: q CaMeL Ty ( q CaMeL Ty ) ;
rank: 11
score: 99.428955078125
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 11
score: 99.42073277064732
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = true ;
rank: 11
score: 99.37461224724265
patch: increment CaMeL Iterations CaMeL Counter ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 11
score: 99.33192138671875
patch: q CaMeL Ty ( residuals , current ) ;
rank: 11
score: 99.29759928385417
patch: q CaMeL Ty = System . current CaMeL Time CaMeL Millis ( ) ;
rank: 11
score: 99.28843383789062
patch: q CaMeL Ty ( residuals ( ) ) ;
rank: 11
score: 99.24473219651442
patch: q CaMeL Ty ( q CaMeL Ty ( residuals ) ) ;
rank: 12
score: 99.42609719669117
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 12
score: 99.42547286184211
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = 0 ;
rank: 12
score: 99.41165597098214
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = true ;
rank: 12
score: 99.38062540690105
patch: q CaMeL Ty . q CaMeL Ty ( residuals ) ;
rank: 12
score: 99.29225260416666
patch: [ 0 ] = System . current CaMeL Time CaMeL Millis ( ) ;
rank: 12
score: 99.28759765625
patch: if ( first CaMeL Iteration && first CaMeL Iteration ) {
rank: 12
score: 99.26656087239583
patch: q CaMeL Ty = q CaMeL Ty [ residuals ] ;
rank: 13
score: 99.41788976332721
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = new double [ cols ] ;
rank: 13
score: 99.41294950597427
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous , objective ) ;
rank: 13
score: 99.39181315104166
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = true ;
rank: 13
score: 99.36002291165866
patch: q CaMeL Ty ( ) . q CaMeL Ty ( ) ;
rank: 13
score: 99.27720811631944
patch: q CaMeL Ty ( residuals ) ; }
rank: 13
score: 99.26986694335938
patch: q CaMeL Ty ( residuals , qr CaMeL Decomposition ) ;
rank: 13
score: 99.26014055524554
patch: q CaMeL Ty = new q CaMeL Ty residuals ( residuals ) ;
rank: 13
score: 99.21000162760417
patch: q CaMeL Ty ( residuals , residuals , residuals ) ;
rank: 14
score: 99.41293569711539
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 14
score: 99.41023763020833
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 14
score: 99.38944498697917
patch: q CaMeL Ty ( residuals ) ; update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 14
score: 99.35140555245536
patch: while ( true ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 14
score: 99.3426005045573
patch: q CaMeL Ty ( residuals ) ; residuals ( ) ;
rank: 14
score: 99.28316243489583
patch: q CaMeL Ty ( ) ; this . q CaMeL Ty ( ) ;
rank: 14
score: 99.2691650390625
patch: q CaMeL Ty ( residuals ) ; try {
rank: 14
score: 99.25941685267857
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = residuals ;
rank: 14
score: 99.22285970052083
patch: q CaMeL Ty = q CaMeL Ty [ 0 ] ;
rank: 14
score: 99.20620291573661
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( true ) ;
rank: 15
score: 99.40777946920956
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation , objective ) ;
rank: 15
score: 99.38776397705078
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 . 0 ;
rank: 15
score: 99.28144836425781
patch: q CaMeL Ty ( ) ; this . q CaMeL Ty ( residuals ) ;
rank: 15
score: 99.25484793526786
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = ) ;
rank: 15
score: 99.246337890625
patch: q CaMeL Ty ( ) ; if ( first CaMeL Iteration ) {
rank: 15
score: 99.21860758463542
patch: q CaMeL Ty ; q CaMeL Ty ( residuals ) ;
rank: 15
score: 99.195068359375
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ; }
rank: 16
score: 99.40773411800987
patch: = current . new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 16
score: 99.33148662860577
patch: q CaMeL Ty ++ ; q CaMeL Ty ( residuals ) ;
rank: 16
score: 99.27080891927083
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ 1 ] ;
rank: 16
score: 99.24048868815105
patch: q CaMeL Ty ( update CaMeL Jacobian ( ) ) ;
rank: 16
score: 99.21234130859375
patch: q CaMeL Ty = this . q CaMeL Ty ( residuals ) ;
rank: 16
score: 99.18720354352679
patch: q CaMeL Ty = ( q CaMeL Ty ( residuals ) ) ;
rank: 17
score: 99.37529754638672
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 0 . 0 ;
rank: 17
score: 99.37347053079044
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , current ) ;
rank: 17
score: 99.32674734933036
patch: if ( first CaMeL Iteration ) { update CaMeL Jacobian ( ) ;
rank: 17
score: 99.26563262939453
patch: q CaMeL Ty ( residuals ) ; this . q CaMeL Ty ( ) ;
rank: 17
score: 99.25180392795139
patch: q CaMeL Ty ( ) ; ) ;
rank: 17
score: 99.20748901367188
patch: q CaMeL Ty = q CaMeL Ty ) ;
rank: 17
score: 99.18323625837054
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( false ) ;
rank: 18
score: 99.40083582261029
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this , objective ) ;
rank: 18
score: 99.37214878627232
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = false ;
rank: 18
score: 99.3175048828125
patch: if ( true ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 18
score: 99.298486328125
patch: q CaMeL Ty ( ) . q CaMeL Ty ( residuals ) ; ;
rank: 18
score: 99.2585220336914
patch: q CaMeL Ty ( System . current CaMeL Time CaMeL Millis ( ) ) ;
rank: 18
score: 99.24994365985577
patch: q CaMeL Ty = residuals ; q CaMeL Ty ( ) ;
rank: 18
score: 99.22364298502605
patch: q CaMeL Ty ( residuals , update CaMeL Jacobian ) ;
rank: 18
score: 99.17352294921875
patch: q CaMeL Ty ( residuals , q CaMeL Ty , residuals ) ;
rank: 19
score: 99.39493815104167
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ; }
rank: 19
score: 99.37139571340461
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 19
score: 99.3705695657169
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , this ) ;
rank: 19
score: 99.28653971354167
patch: q CaMeL Ty ( ) . ; q CaMeL Ty ( residuals ) ;
rank: 19
score: 99.25601399739584
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ residuals ] ;
rank: 19
score: 99.22048950195312
patch: q CaMeL Ty ( residuals , old CaMeL Res ) ;
rank: 19
score: 99.20577566964286
patch: q CaMeL Ty = this ; q CaMeL Ty ( residuals ) ;
rank: 19
score: 99.16271100725446
patch: q CaMeL Ty = q CaMeL Ty ( residuals , residuals ) ;
rank: 20
score: 99.39370888157895
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = previous ; update CaMeL Jacobian ( ) ;
rank: 20
score: 99.35738699776786
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = false ;
rank: 20
score: 99.28423602764423
patch: q CaMeL Ty ( residuals ) . residuals ( residuals ) ;
rank: 20
score: 99.22702858664773
patch: q CaMeL Ty ( residuals [ 0 ] ) ;
rank: 20
score: 99.2183837890625
patch: q CaMeL Ty ( first CaMeL Iteration ) ;
rank: 20
score: 99.20230806790866
patch: q CaMeL Ty ) ; q CaMeL Ty ( residuals ) ;
rank: 20
score: 99.16225760323661
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = true ;
rank: 21
score: 99.39334909539474
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ; qr CaMeL Decomposition ( ) ;
rank: 21
score: 99.35384695870536
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 ;
rank: 21
score: 99.24771118164062
patch: q CaMeL Ty ( q CaMeL Ty ) ; q CaMeL Ty ( ) ;
rank: 21
score: 99.16170828683036
patch: q CaMeL Ty ( q CaMeL Ty , residuals , residuals ) ;
rank: 22
score: 99.36408342633929
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 22
score: 99.34464888139205
patch: q CaMeL Ty ( residuals ) ; / * /
rank: 22
score: 99.29704846833882
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 22
score: 99.27710899939903
patch: q CaMeL Ty ( residuals ) ; residuals ( residuals ) ;
rank: 22
score: 99.24520111083984
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = q CaMeL Ty ;
rank: 22
score: 99.22127859933036
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty = residuals ;
rank: 22
score: 99.21007080078125
patch: q CaMeL Ty ( residuals , 0 ) ;
rank: 22
score: 99.19883375901442
patch: q CaMeL Ty ; q CaMeL Ty = q CaMeL Ty ;
rank: 22
score: 99.16162787543402
patch: q CaMeL Ty = residuals ( ) ;
rank: 23
score: 99.29567260742188
patch: q CaMeL Ty ( point , objective ) ;
rank: 23
score: 99.27266068892045
patch: = q CaMeL Ty ( residuals , residuals ) ;
rank: 23
score: 99.2353985126202
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ++ ;
rank: 23
score: 99.22077287946429
patch: q CaMeL Ty = residuals ;
rank: 23
score: 99.20138210720486
patch: try { qr CaMeL Decomposition ( ) ;
rank: 23
score: 99.1599590594952
patch: q CaMeL Ty = ( q CaMeL Ty ( ) ) ;
rank: 24
score: 99.37306722005208
patch: loop = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 24
score: 99.34515739889706
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , permutation ) ;
rank: 24
score: 99.27061462402344
patch: = q CaMeL Ty ( ) ;
rank: 24
score: 99.217529296875
patch: q CaMeL Ty [ 0 ] = - 1 ;
rank: 24
score: 99.1969706217448
patch: q CaMeL Ty ( qr CaMeL Decomposition ( ) ) ;
rank: 24
score: 99.1941250887784
patch: q CaMeL Ty ; q CaMeL Ty ( ) ;
rank: 25
score: 99.37171695106908
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = null ; update CaMeL Jacobian ( ) ;
rank: 25
score: 99.34438189338235
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , get ) ;
rank: 25
score: 99.33970540364584
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = false ;
rank: 25
score: 99.2630615234375
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ; ;
rank: 25
score: 99.21407063802083
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ;
rank: 25
score: 99.1953837076823
patch: q CaMeL Ty ( residuals , old CaMeL X ) ;
rank: 25
score: 99.1521708170573
patch: q CaMeL Ty = residuals ( q CaMeL Ty ) ;
rank: 26
score: 99.36288631663604
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 26
score: 99.34192612591912
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , current ) ;
rank: 26
score: 99.33311552159927
patch: q CaMeL Ty ( ) ; update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 26
score: 99.29058837890625
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par ( ) ;
rank: 26
score: 99.26259358723958
patch: q CaMeL Ty [ residuals ] = residuals ( ) ;
rank: 26
score: 99.2101338704427
patch: q CaMeL Ty ( residuals ) ; residuals = residuals ;
rank: 26
score: 99.20502115885417
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ( residuals ) ;
rank: 26
score: 99.18850272042411
patch: q CaMeL Ty ( ) ; q CaMeL Ty residuals ( ) ;
rank: 27
score: 99.36166221217105
patch: = this . new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 27
score: 99.3409423828125
patch: delta = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 27
score: 99.25839669363839
patch: q CaMeL Ty ( residuals ) q CaMeL Ty ( residuals ) ;
rank: 28
score: 99.36125745271382
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; if ( first CaMeL Iteration )
rank: 28
score: 99.34064079733456
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , cols ) ;
rank: 28
score: 99.25794566761364
patch: q CaMeL Ty [ 0 ] = residuals ) ;
rank: 28
score: 99.20811110276442
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ) ;
rank: 28
score: 99.19353485107422
patch: q CaMeL Ty [ 0 ] = current . to CaMeL String ( ) ;
rank: 28
score: 99.18389282226562
patch: q CaMeL Ty ( residuals , diag ) ;
rank: 28
score: 99.14014543805804
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += residuals ;
rank: 29
score: 99.33683507582721
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 29
score: 99.32357083834134
patch: update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 29
score: 99.27670084635416
patch: increment CaMeL Iterations CaMeL Counter ( ) ; qr CaMeL Decomposition ( ) ;
rank: 29
score: 99.18297576904297
patch: q CaMeL Ty = residuals ) ;
rank: 29
score: 99.17927551269531
patch: if ( cost != 0 ) {
rank: 29
score: 99.13720092773437
patch: q CaMeL Ty = residuals ( residuals ) ;
rank: 30
score: 99.3537956686581
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = update CaMeL Jacobian ( ) ;
rank: 30
score: 99.27542877197266
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += 0 . 0 ;
rank: 30
score: 99.2572490985577
patch: = q CaMeL Ty ; q CaMeL Ty ( residuals ) ;
rank: 30
score: 99.20647321428571
patch: q CaMeL Ty = ) ; q CaMeL Ty ( residuals ) ;
rank: 30
score: 99.18916625976563
patch: q CaMeL Ty [ 0 ] = current ;
rank: 30
score: 99.18116173377403
patch: q CaMeL Ty = this ; q CaMeL Ty ( ) ;
rank: 30
score: 99.178466796875
patch: try { update CaMeL Jacobian ( ) ;
rank: 31
score: 99.329931640625
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current ) ;
rank: 31
score: 99.31697591145833
patch: q CaMeL Ty ( residuals , x CaMeL Norm ) ;
rank: 31
score: 99.27183314732143
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 31
score: 99.25702459161931
patch: q CaMeL Ty [ residuals ] = residuals ) ;
rank: 31
score: 99.20508751502403
patch: q CaMeL Ty = residuals ; q CaMeL Ty = residuals ;
rank: 31
score: 99.18423665364584
patch: q CaMeL Ty [ 0 ] = old CaMeL X [ 0 ] ;
rank: 31
score: 99.18092698317308
patch: q CaMeL Ty = q CaMeL Ty [ residuals ) ] ;
rank: 31
score: 99.175830078125
patch: try { update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 31
score: 99.13409893329327
patch: q CaMeL Ty = residuals ; q CaMeL Ty = true ;
rank: 32
score: 99.35095932904412
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( diag , objective ) ;
rank: 32
score: 99.32984116498162
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , diag ) ;
rank: 32
score: 99.31526402064732
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = 0 ;
rank: 32
score: 99.25239780970982
patch: q CaMeL Ty += residuals ; q CaMeL Ty ( residuals ) ;
rank: 32
score: 99.20494927300348
patch: q CaMeL Ty ( residuals ) ) ;
rank: 32
score: 99.18397827148438
patch: q CaMeL Ty [ 0 ] = null ;
rank: 32
score: 99.18084716796875
patch: q CaMeL Ty ) ; q CaMeL Ty ( ) ;
rank: 32
score: 99.17521158854167
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current ) ;
rank: 32
score: 99.12952880859375
patch: q CaMeL Ty [ 0 ] = residuals ;
rank: 33
score: 99.26904296875
patch: if ( first CaMeL Iteration ) { update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 33
score: 99.25199890136719
patch: q CaMeL Ty ( ) ; ;
rank: 33
score: 99.2049227627841
patch: q CaMeL Ty q CaMeL Ty ( residuals ) ;
rank: 33
score: 99.18140520368304
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = null ;
rank: 33
score: 99.17802290482955
patch: q CaMeL Ty = new int [ residuals ] ;
rank: 33
score: 99.12359619140625
patch: q CaMeL Ty ( ) ; q CaMeL Ty = residuals ) ;
rank: 34
score: 99.34885541130515
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = new int [ cols ] ;
rank: 34
score: 99.321533203125
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 34
score: 99.26780870225694
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm , x CaMeL Norm ) ;
rank: 34
score: 99.25193277994792
patch: q CaMeL Ty [ 0 ] = residuals ( ) ;
rank: 34
score: 99.20443725585938
patch: q CaMeL Ty ( residuals , residuals ) ; ) ;
rank: 34
score: 99.18081868489584
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty [ 0 ] ;
rank: 34
score: 99.1723388671875
patch: try { qr CaMeL Decomposition ( ) ; qr CaMeL Decomposition ( ) ;
rank: 34
score: 99.12344796316964
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = false ;
rank: 35
score: 99.34622531467014
patch: delta = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor
rank: 35
score: 99.3177490234375
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 35
score: 99.308349609375
patch: q CaMeL Ty ( residuals ) ; current = current ;
rank: 35
score: 99.24993024553571
patch: q CaMeL Ty ( ) . q CaMeL Ty ( ) ; ;
rank: 35
score: 99.20174734933036
patch: q CaMeL Ty ( ) ; ; q CaMeL Ty ( ) ;
rank: 35
score: 99.18077087402344
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . residuals ( ) ;
rank: 35
score: 99.1636962890625
patch: if ( first CaMeL Iteration || first CaMeL Iteration ) {
rank: 35
score: 99.11778041294643
patch: q CaMeL Ty ( ) ; } q CaMeL Ty ( ) ;
rank: 36
score: 99.33807694284539
patch: q CaMeL Ty = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 36
score: 99.31689453125
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point . objective ) ;
rank: 36
score: 99.25370708264802
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point . point , objective ) ;
rank: 36
score: 99.20106858473558
patch: q CaMeL Ty = residuals ; q CaMeL Ty = ) ;
rank: 36
score: 99.17372639973958
patch: q CaMeL Ty ( ) ; q CaMeL Ty ) ;
rank: 36
score: 99.15591091579861
patch: if ( ! first CaMeL Iteration ) {
rank: 36
score: 99.1175537109375
patch: q CaMeL Ty ( q CaMeL Ty ( ) , residuals ) ;
rank: 37
score: 99.3377326516544
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = new double [ cols ] ;
rank: 37
score: 99.30536760602679
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = ) ;
rank: 37
score: 99.24458821614583
patch: q CaMeL Ty ( ) . residuals ( residuals ) ;
rank: 37
score: 99.19930594308036
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = $NUMBER$ ;
rank: 37
score: 99.1795654296875
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( q CaMeL Ty ) ;
rank: 37
score: 99.15331159319196
patch: q CaMeL Ty ( residuals , qr CaMeL Decomposition ( ) ) ;
rank: 37
score: 99.1136005108173
patch: q CaMeL Ty ( ) ; q CaMeL Ty = true ;
rank: 38
score: 99.33555201480263
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ; x CaMeL Norm = 0 ;
rank: 38
score: 99.3073371438419
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous , current ) ;
rank: 38
score: 99.30404227120536
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = current ;
rank: 38
score: 99.25216471354166
patch: lm CaMeL Par = 0 ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 38
score: 99.19831194196429
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty ( ) ;
rank: 38
score: 99.17174183238636
patch: q CaMeL Ty = this . q CaMeL Ty ;
rank: 38
score: 99.151708984375
patch: this . update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 38
score: 99.11256626674107
patch: q CaMeL Ty ( residuals . to CaMeL String ( ) ) ;
rank: 39
score: 99.3047736672794
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous , objective ) ;
rank: 39
score: 99.30355398995536
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = 0 ;
rank: 39
score: 99.19747924804688
patch: q CaMeL Ty ( residuals . null ) ;
rank: 39
score: 99.17183430989583
patch: = System . current CaMeL Time CaMeL Millis ( ) ;
rank: 39
score: 99.170654296875
patch: q CaMeL Ty = q CaMeL Ty = q CaMeL Ty ;
rank: 39
score: 99.15076700846355
patch: q CaMeL Ty ( x CaMeL Norm , 0 ) ;
rank: 39
score: 99.107666015625
patch: q CaMeL Ty ( q CaMeL Ty ( ) ) ;
rank: 40
score: 99.2997687844669
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , current ) ;
rank: 40
score: 99.2993915264423
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = true ;
rank: 40
score: 99.25187544389205
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 40
score: 99.23961181640625
patch: q CaMeL Ty ( residuals ) ; * /
rank: 40
score: 99.19662814670139
patch: q CaMeL Ty ( residuals , ) ;
rank: 40
score: 99.17079856178977
patch: q CaMeL Ty ( residuals , residuals $NUMBER$ ) ;
rank: 40
score: 99.16943359375
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( $NUMBER$ ) ;
rank: 40
score: 99.10573323567708
patch: q CaMeL Ty = ( int [ ] ) residuals ;
rank: 41
score: 99.24660237630208
patch: x CaMeL Norm = Math . max ( x CaMeL Norm , x CaMeL Norm ) ;
rank: 41
score: 99.238232421875
patch: q CaMeL Ty . residuals ( residuals ) ;
rank: 41
score: 99.16857231987848
patch: q CaMeL Ty ( residuals 1 ) ;
rank: 41
score: 99.16408469460227
patch: q CaMeL Ty = q CaMeL Ty = residuals ;
rank: 41
score: 99.10089111328125
patch: q CaMeL Ty ( q CaMeL Ty , q CaMeL Ty ) ;
rank: 42
score: 99.24424913194444
patch: diag = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 42
score: 99.23807779947917
patch: q CaMeL Ty ( ) ; ; q CaMeL Ty ( residuals ) ;
rank: 42
score: 99.16175333658855
patch: q CaMeL Ty = new int [ residuals 1 ] ;
rank: 42
score: 99.14777221679688
patch: q CaMeL Ty ( residuals , previous ) ;
rank: 42
score: 99.09910231370192
patch: q CaMeL Ty = residuals ; q CaMeL Ty = false ;
rank: 43
score: 99.32581284466912
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , 0 ) ;
rank: 43
score: 99.29738482306985
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , $STRING$ ) ;
rank: 43
score: 99.29009137834821
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( residuals ) ;
rank: 43
score: 99.2388916015625
patch: lm CaMeL Par = 0 ; update CaMeL Jacobian ( ) ;
rank: 43
score: 99.19101388113839
patch: q CaMeL Ty = ) ;
rank: 43
score: 99.16517857142857
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty ( ) ;
rank: 43
score: 99.16001674107143
patch: q CaMeL Ty ( residuals , residuals , q CaMeL Ty ) ;
rank: 43
score: 99.14676513671876
patch: if ( qr CaMeL Decomposition ( ) ) {
rank: 44
score: 99.32550370065789
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 44
score: 99.2958984375
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , jacobian ) ;
rank: 44
score: 99.28954139122597
patch: qr CaMeL Decomposition ( ) ; qr CaMeL Decomposition ( ) ;
rank: 44
score: 99.23593575613839
patch: q CaMeL Ty . q CaMeL Ty ( residuals , residuals ) ;
rank: 44
score: 99.14669363839286
patch: q CaMeL Ty ( residuals , increment CaMeL Iterations CaMeL Counter ) ;
rank: 44
score: 99.09698486328125
patch: q CaMeL Ty [ residuals ] = residuals ;
rank: 45
score: 99.15609305245536
patch: q CaMeL Ty = q CaMeL Ty ) ; q CaMeL Ty ;
rank: 46
score: 99.32229275173611
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , objective ) ;
rank: 46
score: 99.28685760498047
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += jac CaMeL Norm ;
rank: 46
score: 99.18526204427083
patch: q CaMeL Ty ( residuals ) ; ) ; ) ;
rank: 46
score: 99.16041666666666
patch: q CaMeL Ty [ 0 ] = old CaMeL X [ residuals ] ;
rank: 46
score: 99.15366617838542
patch: q CaMeL Ty = q CaMeL Ty [ $NUMBER$ ] ;
rank: 46
score: 99.143896484375
patch: q CaMeL Ty ( residuals , delta ) ;
rank: 46
score: 99.09096272786458
patch: q CaMeL Ty ( residuals ) ; residuals = true ;
rank: 47
score: 99.32197008634868
patch: lm CaMeL Par = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 47
score: 99.29255945542279
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , false ) ;
rank: 47
score: 99.2280606356534
patch: q CaMeL Ty [ 0 ] ( residuals ) ;
rank: 47
score: 99.16013881138393
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = 0 ;
rank: 48
score: 99.29205681295956
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , true ) ;
rank: 48
score: 99.28380062705592
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( x CaMeL Norm ) ;
rank: 48
score: 99.23635382401316
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , x CaMeL Norm ) ;
rank: 48
score: 99.227587890625
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty ( residuals ) ;
rank: 48
score: 99.15982055664062
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ;
rank: 48
score: 99.14053344726562
patch: q CaMeL Ty ( residuals , point ) ;
rank: 48
score: 99.08909388950893
patch: q CaMeL Ty ( ; q CaMeL Ty ( residuals ) ) ;
rank: 49
score: 99.28994140625
patch: delta = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 49
score: 99.28289794921875
patch: q CaMeL Ty ( residuals , x CaMeL Norm , x CaMeL Norm ) ;
rank: 49
score: 99.23604910714286
patch: q CaMeL Ty ( x CaMeL Norm , x CaMeL Norm ) ;
rank: 49
score: 99.2260009765625
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 49
score: 99.17938787286931
patch: q CaMeL Ty ( residuals ) ; ) ; }
rank: 49
score: 99.15950012207031
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += q CaMeL Ty ;
rank: 49
score: 99.08501325334821
patch: q CaMeL Ty ( ) ; else q CaMeL Ty ( ) ;
rank: 50
score: 99.28965130974265
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , residuals ) ;
rank: 50
score: 99.23583266314338
patch: lm CaMeL Par = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 50
score: 99.2256591796875
patch: = q CaMeL Ty ( ) ; q CaMeL Ty ( residuals ) ;
rank: 50
score: 99.17640904017857
patch: q CaMeL Ty ( residuals . q CaMeL Ty ( ) ) ;
rank: 50
score: 99.1399395282452
patch: q CaMeL Ty = new q CaMeL Ty [ residuals ] ;
rank: 50
score: 99.13229370117188
patch: q CaMeL Ty ( residuals ) ; / *
rank: 50
score: 99.08377075195312
patch: q CaMeL Ty = this . residuals ( residuals ) ;
rank: 51
score: 99.31515502929688
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ) ;
rank: 51
score: 99.28143310546875
patch: q CaMeL Ty ( residuals ) ; this . update CaMeL Jacobian ( ) ;
rank: 51
score: 99.23533121744792
patch: q CaMeL Ty ( x CaMeL Norm , x CaMeL Norm , x CaMeL Norm ) ;
rank: 51
score: 99.17154366629464
patch: q CaMeL Ty ( residuals ) ; ( q CaMeL Ty ) ;
rank: 51
score: 99.15489501953125
patch: q CaMeL Ty [ 0 ] = 0 ;
rank: 51
score: 99.1294453938802
patch: q CaMeL Ty ( first CaMeL Iteration , residuals ) ;
rank: 52
score: 99.31366325827206
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , 1 ) ;
rank: 52
score: 99.28860294117646
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , null ) ;
rank: 52
score: 99.28016764322916
patch: q CaMeL Ty ( ) ; x CaMeL Norm = 0 . 0 ;
rank: 52
score: 99.22275119357639
patch: q CaMeL Ty ( residuals residuals ) ;
rank: 52
score: 99.1292236328125
patch: q CaMeL Ty ( residuals ) ; if ( first CaMeL Iteration ) {
rank: 53
score: 99.28802849264706
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , point ) ;
rank: 53
score: 99.27799987792969
patch: q CaMeL Ty ( q CaMeL Ty ) ; qr CaMeL Decomposition ( ) ;
rank: 53
score: 99.23158482142857
patch: lm CaMeL Par = 0 ; boolean first CaMeL Iteration = true ;
rank: 53
score: 99.22179303850446
patch: q CaMeL Ty ( ) * q CaMeL Ty ( residuals ) ;
rank: 53
score: 99.16618129185268
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = this ;
rank: 53
score: 99.15011393229166
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty [ residuals ] ;
rank: 53
score: 99.1227315266927
patch: q CaMeL Ty ( residuals , lm CaMeL Par ) ;
rank: 53
score: 99.0807635967548
patch: q CaMeL Ty ( ; q CaMeL Ty ( ) ) ;
rank: 54
score: 99.31321806066177
patch: q CaMeL Ty $NUMBER$ Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 54
score: 99.28673444475446
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 54
score: 99.27799718520221
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( ) ; qr CaMeL Decomposition ( ) ;
rank: 54
score: 99.22934194711539
patch: q CaMeL Ty ( ) ; lm CaMeL Par = 0 ;
rank: 54
score: 99.16376287286931
patch: q CaMeL Ty ( residuals ( residuals ) ) ;
rank: 54
score: 99.14730834960938
patch: q CaMeL Ty ( 0 ) ;
rank: 54
score: 99.12935697115384
patch: q CaMeL Ty = q CaMeL Ty ; q CaMeL Ty ;
rank: 54
score: 99.11882672991071
patch: q CaMeL Ty ( residuals ) . qr CaMeL Decomposition ( ) ;
rank: 54
score: 99.0787823016827
patch: q CaMeL Ty ( ) ; q CaMeL Ty = false ;
rank: 55
score: 99.22888997395833
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 0 . 0 ;
rank: 55
score: 99.21957194010416
patch: q CaMeL Ty ( residuals ) * q CaMeL Ty ( residuals ) ;
rank: 55
score: 99.16245524088542
patch: q CaMeL Ty ( residuals ) ; residuals = ) ;
rank: 55
score: 99.146240234375
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . ( residuals ) ;
rank: 55
score: 99.11856515066964
patch: q CaMeL Ty ( residuals ) . update CaMeL Jacobian ( ) ;
rank: 55
score: 99.07331194196429
patch: q CaMeL Ty = residuals ; q CaMeL Ty = residuals ) ;
rank: 56
score: 99.31249281939338
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = new double [ rows ] ;
rank: 56
score: 99.28390938895089
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 56
score: 99.27506197415866
patch: q CaMeL Ty ( ) ; lm CaMeL Par ( ) ;
rank: 56
score: 99.14591471354167
patch: q CaMeL Ty ++ ; q CaMeL Ty ( ) ;
rank: 56
score: 99.12413678850446
patch: q CaMeL Ty = q CaMeL Ty [ residuals ) ++ ] ;
rank: 56
score: 99.11834247295673
patch: q CaMeL Ty ( residuals ) ; while ( true ) {
rank: 56
score: 99.07107107979911
patch: q CaMeL Ty = residuals ; q CaMeL Ty = true ; }
rank: 57
score: 99.31109260110294
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , $NUMBER$ ) ;
rank: 57
score: 99.28263346354167
patch: delta = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point ;
rank: 57
score: 99.27475457442434
patch: q CaMeL Ty ( residuals ) Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 57
score: 99.22675637637867
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( x CaMeL Norm ) ;
rank: 57
score: 99.21526227678571
patch: = q CaMeL Ty ( ) ; q CaMeL Ty ( ) ;
rank: 57
score: 99.15545043945312
patch: q CaMeL Ty ( residuals ) ; break ;
rank: 57
score: 99.1433349609375
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( 0 ) ;
rank: 57
score: 99.12411499023438
patch: q CaMeL Ty = q CaMeL Ty [ 1 ] ;
rank: 57
score: 99.11814528245192
patch: q CaMeL Ty ( ) ; if ( first CaMeL Iteration )
rank: 58
score: 99.31025041852679
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; }
rank: 58
score: 99.28151041666666
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 58
score: 99.27326202392578
patch: q CaMeL Ty ( residuals ) ; this . qr CaMeL Decomposition ( ) ;
rank: 58
score: 99.2251040810033
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , objective ) ;
rank: 58
score: 99.21495643028847
patch: q CaMeL Ty . q CaMeL Ty ( residuals ) ; ;
rank: 58
score: 99.11547037760417
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( residuals ) ;
rank: 59
score: 99.14975210336539
patch: q CaMeL Ty = ) ; q CaMeL Ty ( ) ;
rank: 59
score: 99.14322662353516
patch: q CaMeL Ty [ 0 ] = current . get CaMeL Parent ( ) ;
rank: 59
score: 99.113037109375
patch: q CaMeL Ty ( residuals , diag CaMeL R ) ;
rank: 60
score: 99.27599334716797
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ,
rank: 60
score: 99.26995171440973
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( x CaMeL Norm ) ;
rank: 60
score: 99.12086704799107
patch: q CaMeL Ty [ ( q CaMeL Ty [ 0 ] ) ;
rank: 60
score: 99.11279296875
patch: q CaMeL Ty ( old CaMeL Res , residuals ) ;
rank: 60
score: 99.06251017252605
patch: q CaMeL Ty = new q CaMeL Ty ( ) ;
rank: 61
score: 99.30325082632211
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = null ;
rank: 61
score: 99.27433776855469
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 61
score: 99.22101793791118
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current . update CaMeL Jacobian ( ) ;
rank: 61
score: 99.21373697916667
patch: q CaMeL Ty ( ) ; * / q CaMeL Ty ( ) ;
rank: 61
score: 99.14284446022727
patch: q CaMeL Ty ( residuals ) ; ; ) ;
rank: 62
score: 99.21286446707589
patch: q CaMeL Ty ( residuals ) . q CaMeL Ty ( ) ;
rank: 62
score: 99.10897623697916
patch: q CaMeL Ty ( residuals ) ; else update CaMeL Jacobian ( ) ;
rank: 62
score: 99.05706787109375
patch: q CaMeL Ty ( true ) ; q CaMeL Ty ( ) ;
rank: 63
score: 99.3022128018466
patch: q CaMeL Ty = new double [ cols ] ;
rank: 63
score: 99.26162237870066
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; qr CaMeL Decomposition ( ) ;
rank: 63
score: 99.21844841452206
patch: = current . update CaMeL Residuals CaMeL And CaMeL Cost ( point , objective ) ;
rank: 63
score: 99.13812725360577
patch: q CaMeL Ty ( q CaMeL Ty [ 0 ] ) ;
rank: 63
score: 99.13584206321023
patch: q CaMeL Ty ( residuals ) ; ( ) ;
rank: 63
score: 99.11812046595982
patch: q CaMeL Ty = q CaMeL Ty . residuals ( residuals ) ;
rank: 63
score: 99.10572509765625
patch: q CaMeL Ty ( x CaMeL Norm ) ;
rank: 64
score: 99.30215274586396
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 64
score: 99.26057942708333
patch: q CaMeL Ty ( residuals ) ; current = 0 ;
rank: 64
score: 99.21775309244792
patch: q CaMeL Ty ( residuals , point , objective ) ;
rank: 64
score: 99.11656775841347
patch: q CaMeL Ty ( ) ; q CaMeL Ty = ) ;
rank: 64
score: 99.10511271158855
patch: q CaMeL Ty ( residuals , lm CaMeL Dir ) ;
rank: 64
score: 99.0559414950284
patch: q CaMeL Ty = residuals ( residuals ) ) ;
rank: 65
score: 99.30157149465461
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; lm CaMeL Par = 0 ;
rank: 65
score: 99.2728759765625
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 65
score: 99.259814453125
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( residuals ) ;
rank: 65
score: 99.21729329427083
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 65
score: 99.13484191894531
patch: q CaMeL Ty = q CaMeL Ty [ 0 ] . clone ( ) ;
rank: 65
score: 99.11550903320312
patch: q CaMeL Ty = q CaMeL Ty - residuals ) ;
rank: 65
score: 99.10445149739583
patch: q CaMeL Ty ( residuals ) . if ( first CaMeL Iteration ) {
rank: 65
score: 99.05467878069196
patch: q CaMeL Ty ( ) ; q CaMeL Ty = true ; }
rank: 66
score: 99.29973401521382
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = previous ; qr CaMeL Decomposition ( ) ;
rank: 66
score: 99.26911272321429
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point ;
rank: 66
score: 99.25447300502232
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = current ;
rank: 66
score: 99.2103740985577
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ) ;
rank: 66
score: 99.13467172475961
patch: q CaMeL Ty = residuals ; q CaMeL Ty = $NUMBER$ ;
rank: 66
score: 99.103564453125
patch: if ( first CaMeL Iteration == 0 ) {
rank: 66
score: 99.05304827008929
patch: q CaMeL Ty ( new q CaMeL Ty ( residuals ) ) ;
rank: 67
score: 99.29844835069444
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , current ) ;
rank: 67
score: 99.25439453125
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = false ;
rank: 67
score: 99.21616036551339
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( point , objective ) ;
rank: 67
score: 99.2098388671875
patch: q CaMeL Ty ( residuals , ; q CaMeL Ty ( residuals ) ;
rank: 67
score: 99.13439069475446
patch: q CaMeL Ty ( residuals ) ; residuals = q CaMeL Ty ;
rank: 67
score: 99.13163757324219
patch: q CaMeL Ty ( residuals . residuals ) ; q CaMeL Ty ( ) ;
rank: 67
score: 99.11155482700893
patch: q CaMeL Ty = super . q CaMeL Ty ( residuals ) ;
rank: 67
score: 99.10260564630681
patch: if ( true ) qr CaMeL Decomposition ( ) ;
rank: 67
score: 99.05262247721355
patch: q CaMeL Ty ( residuals . length , residuals ) ;
rank: 68
score: 99.29576918658088
patch: q CaMeL Ty = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 68
score: 99.25203704833984
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( 0 ) ;
rank: 68
score: 99.21607971191406
patch: delta = x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 68
score: 99.20929361979167
patch: q CaMeL Ty [ residuals ] . q CaMeL Ty ( residuals ) ;
rank: 68
score: 99.10862513950893
patch: q CaMeL Ty = q CaMeL Ty ; q CaMeL Ty ) ;
rank: 68
score: 99.10209147135417
patch: q CaMeL Ty ( residuals ) ; else qr CaMeL Decomposition ( ) ;
rank: 68
score: 99.05243389423077
patch: q CaMeL Ty = residuals q CaMeL Ty ( residuals ) ;
rank: 69
score: 99.29470590444711
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = previous ;
rank: 69
score: 99.26097819010417
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( diag ) ;
rank: 69
score: 99.21197916666667
patch: increment CaMeL Iterations CaMeL Counter ( ) ; lm CaMeL Par ( ) ;
rank: 69
score: 99.20880126953125
patch: q CaMeL Ty ( ) ; * q CaMeL Ty ( ) ;
rank: 69
score: 99.1299072265625
patch: q CaMeL Ty ( residuals ) ; residuals ;
rank: 69
score: 99.12779235839844
patch: q CaMeL Ty ( residuals , residuals ) ; q CaMeL Ty ( ) ;
rank: 69
score: 99.10808454241071
patch: q CaMeL Ty q CaMeL Ty q CaMeL Ty ( residuals ) ;
rank: 69
score: 99.10115269252232
patch: q CaMeL Ty ( first CaMeL Iteration , first CaMeL Iteration ) ;
rank: 69
score: 99.05121319110577
patch: q CaMeL Ty = residuals ; q CaMeL Ty = null ;
rank: 70
score: 99.29389391447368
patch: delta = ( x CaMeL Norm == 0 ) & initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 70
score: 99.25847981770833
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous ) ;
rank: 70
score: 99.24811754728618
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = this ;
rank: 70
score: 99.2108905498798
patch: lm CaMeL Par = 0 ; qr CaMeL Decomposition ( ) ;
rank: 70
score: 99.20702253069196
patch: q CaMeL Ty ( ) * / q CaMeL Ty ( ) ;
rank: 70
score: 99.12872869318181
patch: q CaMeL Ty ( residuals , residuals residuals ) ;
rank: 70
score: 99.12702941894531
patch: q CaMeL Ty [ 0 ] = this . q CaMeL Ty ( ) ;
rank: 70
score: 99.09937337239583
patch: if ( qr CaMeL Decomposition ( ) ) qr CaMeL Decomposition ( ) ;
rank: 70
score: 99.05045863560268
patch: q CaMeL Ty ( false ) ; q CaMeL Ty ( ) ;
rank: 71
score: 99.29312133789062
patch: = new double [ cols ] ;
rank: 71
score: 99.2572021484375
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point [ cols ] ;
rank: 71
score: 99.24791717529297
patch: q CaMeL Ty ( ) ; else increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 71
score: 99.2098324424342
patch: delta = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : 0 ;
rank: 71
score: 99.20628943810097
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty ) ;
rank: 71
score: 99.12744140625
patch: q CaMeL Ty ( residuals . null , residuals ) ;
rank: 71
score: 99.0983154296875
patch: q CaMeL Ty ( residuals , true ) ;
rank: 71
score: 99.04569789341518
patch: q CaMeL Ty = residuals ; q CaMeL Ty ( true ) ;
rank: 72
score: 99.24730573381696
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = ) ;
rank: 72
score: 99.20960344587054
patch: if ( first CaMeL Iteration ) { q CaMeL Ty ( ) ;
rank: 72
score: 99.12535400390625
patch: q CaMeL Ty ( 0 , residuals ) ;
rank: 72
score: 99.1246337890625
patch: q CaMeL Ty = residuals . equals ( residuals ) ;
rank: 72
score: 99.10568673270089
patch: q CaMeL Ty ; q CaMeL Ty ( residuals , residuals ) ;
rank: 72
score: 99.04404994419643
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += true ;
rank: 73
score: 99.29077911376953
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current ) ;
rank: 73
score: 99.24460736443015
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( 0 ) ;
rank: 73
score: 99.20909016927084
patch: increment CaMeL Iterations CaMeL Counter ( ) ; lm CaMeL Par = 0 ;
rank: 73
score: 99.20403497869319
patch: q CaMeL Ty ( residuals , residuals ) ; ;
rank: 73
score: 99.12521362304688
patch: q CaMeL Ty ( residuals ) ; current . q CaMeL Ty ( ) ;
rank: 73
score: 99.12457275390625
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( $STRING$ ) ;
rank: 73
score: 99.10458809988839
patch: q CaMeL Ty = new q CaMeL Ty [ residuals 1 ] ;
rank: 73
score: 99.09234064275569
patch: q CaMeL Ty ( residuals , work $NUMBER$ ) ;
rank: 73
score: 99.04365757533482
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty = true ;
rank: 74
score: 99.25282287597656
patch: = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 74
score: 99.24440220424107
patch: q CaMeL Ty ( 0 ) ; qr CaMeL Decomposition ( ) ;
rank: 74
score: 99.20885552300348
patch: = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor :
rank: 74
score: 99.2006103515625
patch: q CaMeL Ty ( ) . q CaMeL Ty ( residuals ) ; }
rank: 74
score: 99.124755859375
patch: q CaMeL Ty ( residuals $NUMBER$ ) ; q CaMeL Ty ( ) ;
rank: 74
score: 99.12296752929687
patch: q CaMeL Ty ( residuals ) ; / /
rank: 74
score: 99.10393732244319
patch: q CaMeL Ty = q CaMeL Ty - residuals ;
rank: 74
score: 99.08931732177734
patch: q CaMeL Ty ( current ) ;
rank: 74
score: 99.04017857142857
patch: q CaMeL Ty = residuals ; q CaMeL Ty = false ; }
rank: 75
score: 99.29005940755208
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair = current ; update CaMeL Jacobian ( ) ;
rank: 75
score: 99.25142996651786
patch: update CaMeL Jacobian ( ) ;
rank: 75
score: 99.24428982204861
patch: q CaMeL Ty ( residuals , increment CaMeL Iterations CaMeL Counter , x CaMeL Norm ) ;
rank: 75
score: 99.20020141601563
patch: = q CaMeL Ty ( residuals ) ; ;
rank: 75
score: 99.12203979492188
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty . residuals ( ) ;
rank: 75
score: 99.12098911830357
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ) .
rank: 75
score: 99.10174560546875
patch: q CaMeL Ty ( this , q CaMeL Ty ) ;
rank: 75
score: 99.088232421875
patch: if ( x CaMeL Norm == 0 ) {
rank: 75
score: 99.03896658761161
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ) ;
rank: 76
score: 99.28997481496711
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = null ; qr CaMeL Decomposition ( ) ;
rank: 76
score: 99.23988101356908
patch: q CaMeL Ty ( residuals ) Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 76
score: 99.20769942434211
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point . objective , objective ) ;
rank: 76
score: 99.10016741071429
patch: q CaMeL Ty = new q CaMeL Ty [ residuals ) ] ;
rank: 76
score: 99.08508911132813
patch: q CaMeL Ty ( qr CaMeL Decomposition ) ;
rank: 76
score: 99.03812349759616
patch: q CaMeL Ty ( ) ; q CaMeL Ty += residuals ;
rank: 77
score: 99.24573567708333
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( residuals ) ;
rank: 77
score: 99.2395751953125
patch: update CaMeL Jacobian ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 77
score: 99.20653483072917
patch: q CaMeL Ty ( ) . increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 77
score: 99.11852010091145
patch: q CaMeL Ty ( ) ; q CaMeL Ty ++ ;
rank: 77
score: 99.0969989483173
patch: q CaMeL Ty = q CaMeL Ty [ 0 ) ] ;
rank: 77
score: 99.08127848307292
patch: q CaMeL Ty ( first CaMeL Iteration , current ) ;
rank: 78
score: 99.24385833740234
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , ) ;
rank: 78
score: 99.23828996930804
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = null ;
rank: 78
score: 99.20555877685547
patch: if ( first CaMeL Iteration ) { x CaMeL Norm = 0 . 0 ;
rank: 78
score: 99.19199916294643
patch: = q CaMeL Ty ) ; q CaMeL Ty ( residuals ) ;
rank: 78
score: 99.11920166015625
patch: q CaMeL Ty ( residuals ) ; ( residuals ) ;
rank: 78
score: 99.11846923828125
patch: q CaMeL Ty [ residuals ] = current . to CaMeL String ( ) ;
rank: 78
score: 99.09354341947116
patch: q CaMeL Ty ( ) ; q CaMeL Ty = this ;
rank: 78
score: 99.08103841145834
patch: q CaMeL Ty ( ) ; this . update CaMeL Jacobian ( ) ;
rank: 78
score: 99.03312174479167
patch: q CaMeL Ty = residuals ( residuals , residuals ) ;
rank: 79
score: 99.28493780838816
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ; update CaMeL Jacobian ( ) ;
rank: 79
score: 99.23805236816406
patch: q CaMeL Ty ( 0 ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 79
score: 99.11854137073864
patch: q CaMeL Ty ( residuals . ( ) ) ;
rank: 79
score: 99.11834716796875
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ ) ;
rank: 79
score: 99.09064190204327
patch: q CaMeL Ty ( ) ; q CaMeL Ty = null ;
rank: 79
score: 99.03310721261161
patch: q CaMeL Ty = residuals ( q CaMeL Ty , residuals ) ;
rank: 80
score: 99.28445255055146
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; while ( true )
rank: 80
score: 99.235107421875
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( objective ) ;
rank: 80
score: 99.20013020833333
patch: increment CaMeL Iterations CaMeL Counter ( ) ; update CaMeL Jacobian ( ) ;
rank: 80
score: 99.18932166466347
patch: q CaMeL Ty * / q CaMeL Ty ( residuals ) ;
rank: 80
score: 99.078466796875
patch: q CaMeL Ty ( residuals , jacobian ) ;
rank: 80
score: 99.03220040457589
patch: q CaMeL Ty = ( int [ ] ) q CaMeL Ty ;
rank: 81
score: 99.2842155905331
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( $STRING$ , objective ) ;
rank: 81
score: 99.23503112792969
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current ) ;
rank: 81
score: 99.23390197753906
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 1 . 0 ;
rank: 81
score: 99.1978695518092
patch: delta = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : previous ;
rank: 81
score: 99.18800455729166
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals ) ; ;
rank: 81
score: 99.11669921875
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty [ 1 ] ;
rank: 81
score: 99.08719308035714
patch: q CaMeL Ty = q CaMeL Ty . get ( residuals ) ;
rank: 81
score: 99.07766287667411
patch: q CaMeL Ty ( residuals , update CaMeL Jacobian ( ) ) ;
rank: 82
score: 99.28355577256944
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , diag ) ;
rank: 82
score: 99.19637044270833
patch: x CaMeL Norm = Math . max ( x CaMeL Norm , jac CaMeL Norm ) ;
rank: 82
score: 99.18798828125
patch: q CaMeL Ty = new double [ q CaMeL Ty ] ;
rank: 82
score: 99.11666434151786
patch: q CaMeL Ty ( residuals , q CaMeL Ty ( ) ) ;
rank: 82
score: 99.08702674278847
patch: q CaMeL Ty q CaMeL Ty q CaMeL Ty ( ) ;
rank: 82
score: 99.07608468191964
patch: q CaMeL Ty ( current ) ; qr CaMeL Decomposition ( ) ;
rank: 82
score: 99.02879115513393
patch: q CaMeL Ty = residuals ; q CaMeL Ty ( false ) ;
rank: 83
score: 99.28340418198529
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ; update CaMeL Jacobian ( ) ;
rank: 83
score: 99.19594439338235
patch: increment CaMeL Iterations CaMeL Counter ( ) ; x CaMeL Norm += 0 . 0 ;
rank: 83
score: 99.18789876302084
patch: q CaMeL Ty ( ) ; * q CaMeL Ty ( residuals ) ;
rank: 83
score: 99.11576334635417
patch: q CaMeL Ty ( residuals , 0 , residuals ) ;
rank: 83
score: 99.08675443209134
patch: q CaMeL Ty = this . q CaMeL Ty ( ) ;
rank: 83
score: 99.07564086914063
patch: if ( first CaMeL Iteration && true ) {
rank: 83
score: 99.02866617838542
patch: q CaMeL Ty = new int [ residuals ] ; }
rank: 84
score: 99.22798978365384
patch: q CaMeL Ty ( ) ; x CaMeL Norm = 0 ;
rank: 84
score: 99.22672526041667
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current . current ;
rank: 84
score: 99.18727463942308
patch: q CaMeL Ty [ residuals ] = residuals ( residuals ) ;
rank: 84
score: 99.1142578125
patch: q CaMeL Ty ( residuals ) ; residuals = 0 ;
rank: 84
score: 99.11110026041666
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ) ; }
rank: 84
score: 99.08646065848214
patch: } q CaMeL Ty ( ) ; q CaMeL Ty ( ) ;
rank: 84
score: 99.0283203125
patch: q CaMeL Ty = residuals ; q CaMeL Ty = null ; }
rank: 85
score: 99.28199598524306
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous , objective ) ;
rank: 85
score: 99.22650909423828
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += x CaMeL Norm ;
rank: 85
score: 99.22425842285156
patch: lm CaMeL Par ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 85
score: 99.187158203125
patch: q CaMeL Ty ( ) * / q CaMeL Ty ( residuals ) ;
rank: 85
score: 99.10948689778645
patch: q CaMeL Ty ( residuals ) residuals ( residuals ) ;
rank: 85
score: 99.07347276475694
patch: q CaMeL Ty ( residuals ) ; else
rank: 86
score: 99.2264404296875
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = null ;
rank: 86
score: 99.22294921875
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 86
score: 99.19374593098958
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm , first CaMeL Iteration ) ;
rank: 86
score: 99.18707275390625
patch: q CaMeL Ty -= residuals ; q CaMeL Ty ( residuals ) ;
rank: 86
score: 99.10943603515625
patch: q CaMeL Ty ( residuals $NUMBER$ , residuals $NUMBER$ ) ;
rank: 86
score: 99.08180454799107
patch: q CaMeL Ty [ ( q CaMeL Ty [ residuals ] ) ;
rank: 87
score: 99.28150699013158
patch: delta = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor :
rank: 87
score: 99.19316948784723
patch: if ( x CaMeL Norm == 0 ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 87
score: 99.18648274739583
patch: q CaMeL Ty += residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 87
score: 99.11323765345982
patch: q CaMeL Ty ( residuals ) ; ) ; q CaMeL Ty ;
rank: 87
score: 99.10888671875
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ $NUMBER$ ] ;
rank: 87
score: 99.06963641826923
patch: q CaMeL Ty ( residuals ) ; if ( true ) {
rank: 87
score: 99.0264892578125
patch: q CaMeL Ty ( ) ; return q CaMeL Ty ( ) ;
rank: 88
score: 99.27988795230263
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; q CaMeL Ty ( ) ;
rank: 88
score: 99.22348201976104
patch: q CaMeL Ty ( residuals ) ; else increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 88
score: 99.22071184430804
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current ) ;
rank: 88
score: 99.1859375
patch: q CaMeL Ty . residuals ( ) ; q CaMeL Ty ( ) ;
rank: 88
score: 99.113134765625
patch: q CaMeL Ty = residuals . ( ) ;
rank: 88
score: 99.06688343394886
patch: if ( first CaMeL Iteration && first CaMeL Iteration )
rank: 88
score: 99.02595738002232
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty = false ;
rank: 89
score: 99.27724783761161
patch: q CaMeL Ty ( residuals ) ; if ( first CaMeL Iteration )
rank: 89
score: 99.22198845358456
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 89
score: 99.18557739257812
patch: = new q CaMeL Ty ( residuals ) ;
rank: 89
score: 99.10509490966797
patch: q CaMeL Ty [ 0 ] = current . q CaMeL Ty ( ) ;
rank: 89
score: 99.08048189603366
patch: q CaMeL Ty = q CaMeL Ty [ - 1 ] ;
rank: 89
score: 99.06436593191964
patch: q CaMeL Ty ( x CaMeL Norm , 0 . 0 ) ;
rank: 89
score: 99.02496337890625
patch: q CaMeL Ty ( ) ; q CaMeL Ty = false ; }
rank: 90
score: 99.27585320723684
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , permutation ) ;
rank: 90
score: 99.22152549342105
patch: q CaMeL Ty ( residuals ) ; update CaMeL Residuals CaMeL And CaMeL Cost ( residuals ) ;
rank: 90
score: 99.19154268152573
patch: lm CaMeL Par = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point ;
rank: 90
score: 99.18451334635417
patch: q CaMeL Ty ( ) ; q CaMeL Ty . residuals ( ) ;
rank: 90
score: 99.11290564903847
patch: q CaMeL Ty = ) ; q CaMeL Ty = ) ;
rank: 90
score: 99.10374348958334
patch: q CaMeL Ty ( Arrays . as CaMeL List ( residuals ) ) ;
rank: 90
score: 99.06393432617188
patch: q CaMeL Ty ( old CaMeL Res , delta ) ;
rank: 90
score: 99.024169921875
patch: q CaMeL Ty ( ( int ) residuals ) ;
rank: 91
score: 99.27580043247768
patch: if ( first CaMeL Iteration ) { x CaMeL Norm = 0 ;
rank: 91
score: 99.21708984375
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 91
score: 99.1840311686198
patch: q CaMeL Ty ( residuals ) . residuals ( ) ;
rank: 91
score: 99.10336303710938
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals , residuals ) ;
rank: 91
score: 99.08006940569196
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( 1 ) ;
rank: 91
score: 99.06375558035714
patch: q CaMeL Ty ( first CaMeL Iteration , update CaMeL Jacobian ) ;
rank: 91
score: 99.02328927176339
patch: q CaMeL Ty = true ; q CaMeL Ty ( residuals ) ;
rank: 92
score: 99.27503159466912
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point + objective ) ;
rank: 92
score: 99.21999782986111
patch: q CaMeL Ty ( residuals , update CaMeL Residuals CaMeL And CaMeL Cost ( ) ) ;
rank: 92
score: 99.18890702097039
patch: = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor : (
rank: 92
score: 99.18092447916666
patch: q CaMeL Ty ( residuals ) ; ; q CaMeL Ty ( ) ;
rank: 92
score: 99.11192103794643
patch: q CaMeL Ty = null ; q CaMeL Ty ( residuals ) ;
rank: 92
score: 99.101806640625
patch: q CaMeL Ty = q CaMeL Ty ; q CaMeL Ty ( ) ;
rank: 92
score: 99.02303641183036
patch: q CaMeL Ty ( ) ; q CaMeL Ty += residuals ) ;
rank: 93
score: 99.27483452690973
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous , current ) ;
rank: 93
score: 99.21550641741071
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ;
rank: 93
score: 99.18859185112848
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm , jac CaMeL Norm ) ;
rank: 93
score: 99.17840576171875
patch: q CaMeL Ty ++ ; ; q CaMeL Ty ( residuals ) ;
rank: 93
score: 99.1111551920573
patch: q CaMeL Ty ( residuals ( ) , residuals ) ;
rank: 93
score: 99.07926432291667
patch: q CaMeL Ty ( $NUMBER$ , q CaMeL Ty ) ;
rank: 93
score: 99.06295572916666
patch: if ( first CaMeL Iteration ) increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 94
score: 99.21897786458334
patch: qr CaMeL Decomposition ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 94
score: 99.18851470947266
patch: increment CaMeL Iterations CaMeL Counter ( ) ; boolean first CaMeL Iteration = true ;
rank: 94
score: 99.17793491908482
patch: q CaMeL Ty ( residuals ; q CaMeL Ty ( residuals ) ;
rank: 94
score: 99.11009870256696
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = 1 ;
rank: 94
score: 99.10154371995192
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty -- ;
rank: 94
score: 99.02164400540866
patch: q CaMeL Ty ( ) ; q CaMeL Ty = residuals ;
rank: 95
score: 99.17465209960938
patch: q CaMeL Ty += q CaMeL Ty ( residuals ) ;
rank: 95
score: 99.10935756138393
patch: q CaMeL Ty = residuals . q CaMeL Ty ( residuals ) ;
rank: 95
score: 99.10018157958984
patch: q CaMeL Ty = q CaMeL Ty ; q CaMeL Ty ( residuals ) ;
rank: 95
score: 99.06229945591518
patch: if ( update CaMeL Residuals CaMeL And CaMeL Cost ( ) ) {
rank: 96
score: 99.21119791666666
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous ) ;
rank: 96
score: 99.18413342927632
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , diag ) ;
rank: 96
score: 99.17457682291666
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ) ; ;
rank: 96
score: 99.09922572544643
patch: q CaMeL Ty ( residuals , old CaMeL X , residuals ) ;
rank: 96
score: 99.0771953876202
patch: q CaMeL Ty ( ) ; q CaMeL Ty = $NUMBER$ ;
rank: 96
score: 99.06201171875
patch: if ( first CaMeL Iteration && ! first CaMeL Iteration ) {
rank: 97
score: 99.27264811197917
patch: q CaMeL Ty ( Math . sqrt ( x CaMeL Norm ) ) ;
rank: 97
score: 99.21092224121094
patch: q CaMeL Ty [ residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 97
score: 99.18234092310855
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( x CaMeL Norm , objective ) ;
rank: 97
score: 99.17434895833334
patch: q CaMeL Ty ( residuals ) ; * q CaMeL Ty ( ) ;
rank: 97
score: 99.098681640625
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( true ) ;
rank: 97
score: 99.0769755045573
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty ;
rank: 97
score: 99.0607577237216
patch: try { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 97
score: 99.01508037860577
patch: q CaMeL Ty [ 0 ] ( q CaMeL Ty ) ;
rank: 98
score: 99.27145867598684
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective . permutation ) ;
rank: 98
score: 99.21040852864583
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation ) ;
rank: 98
score: 99.18166632401316
patch: ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor : previous ;
rank: 98
score: 99.17363823784723
patch: . q CaMeL Ty ( residuals ) ;
rank: 98
score: 99.1067364032452
patch: q CaMeL Ty = ) ; q CaMeL Ty = residuals ;
rank: 98
score: 99.09815979003906
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty . clone ( ) ;
rank: 98
score: 99.06051635742188
patch: q CaMeL Ty ( increment CaMeL Iterations CaMeL Counter ) ;
rank: 99
score: 99.27076822916666
patch: q CaMeL Ty ( residuals [ 0 ] , x CaMeL Norm ) ;
rank: 99
score: 99.21017456054688
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ;
rank: 99
score: 99.18111843532986
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm , 0 . 0 ) ;
rank: 99
score: 99.10520717075893
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( 0 ) ;
rank: 99
score: 99.09768880208334
patch: = q CaMeL Ty [ 0 ] . to CaMeL String ( ) ;
rank: 99
score: 99.07484741210938
patch: q CaMeL Ty q CaMeL Ty ( ) ;
rank: 99
score: 99.01293006310097
patch: q CaMeL Ty ( ( int [ ] ) residuals ) ;
rank: 100
score: 99.2694091796875
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( name , objective ) ;
rank: 100
score: 99.2144775390625
patch: q CaMeL Ty ++ ; x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 100
score: 99.17183743990384
patch: q CaMeL Ty [ 0 ] = residuals ( residuals ) ;
rank: 100
score: 99.09696451822917
patch: q CaMeL Ty [ 0 ] . q CaMeL Ty ( residuals ) ;
rank: 100
score: 99.07476806640625
patch: q CaMeL Ty = q CaMeL Ty . } q CaMeL Ty ;
rank: 100
score: 99.05806477864583
patch: q CaMeL Ty ( old CaMeL Res , objective ) ;
rank: 100
score: 99.01250348772321
patch: q CaMeL Ty ( ) ; q CaMeL Ty = residuals ; }
rank: 101
score: 99.2691714638158
patch: delta = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 101
score: 99.21009318033855
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( residuals ) ;
rank: 101
score: 99.17950846354167
patch: if ( first CaMeL Iteration ) { qr CaMeL Decomposition ( ) ; }
rank: 101
score: 99.17177734375
patch: q CaMeL Ty ( ) ) . q CaMeL Ty ( residuals ) ;
rank: 101
score: 99.1027362530048
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ;
rank: 101
score: 99.09684535435268
patch: q CaMeL Ty [ 0 ] = current . residuals ( ) ;
rank: 101
score: 99.00970458984375
patch: q CaMeL Ty = residuals ; q CaMeL Ty = residuals ; }
rank: 102
score: 99.2127685546875
patch: q CaMeL Ty ( point ) ; qr CaMeL Decomposition ( ) ;
rank: 102
score: 99.170166015625
patch: q CaMeL Ty ( residuals ) * / q CaMeL Ty ( ) ;
rank: 102
score: 99.10219163161058
patch: q CaMeL Ty ( residuals ( q CaMeL Ty ) ) ;
rank: 102
score: 99.05464680989583
patch: q CaMeL Ty ( first CaMeL Iteration , objective ) ;
rank: 103
score: 99.26612684461806
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) update CaMeL Jacobian ( ) ;
rank: 103
score: 99.21188354492188
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += diag CaMeL R ;
rank: 103
score: 99.17787170410156
patch: while ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 103
score: 99.05450439453125
patch: q CaMeL Ty ( residuals ) ; if ( true )
rank: 103
score: 99.00845336914062
patch: q CaMeL Ty [ $NUMBER$ ] = residuals ;
rank: 104
score: 99.17756870814732
patch: lm CaMeL Par = 0 ;
rank: 104
score: 99.1673583984375
patch: q CaMeL Ty = new double [ residuals ] ;
rank: 104
score: 99.09500732421876
patch: q CaMeL Ty ( residuals . residuals ) ;
rank: 104
score: 99.07086736505681
patch: q CaMeL Ty = ( q CaMeL Ty ) ;
rank: 104
score: 99.05400739397321
patch: q CaMeL Ty ( current ) ; update CaMeL Jacobian ( ) ;
rank: 104
score: 99.00826590401786
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += false ;
rank: 105
score: 99.26065063476562
patch: delta = Math . sqrt ( x CaMeL Norm ) ;
rank: 105
score: 99.20558268229166
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current . this ;
rank: 105
score: 99.16716657366071
patch: q CaMeL Ty += residuals ) ; q CaMeL Ty ( ) ;
rank: 105
score: 99.09831891741071
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty = ) ;
rank: 105
score: 99.09398600260417
patch: q CaMeL Ty ( ) ; q CaMeL Ty = q CaMeL Ty ;
rank: 105
score: 99.07047816685268
patch: q CaMeL Ty = q CaMeL Ty [ residuals ( ) ] ;
rank: 105
score: 99.05350748697917
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( true ) ;
rank: 105
score: 99.00760323660714
patch: q CaMeL Ty = residuals ; } q CaMeL Ty ( ) ;
rank: 106
score: 99.208984375
patch: q CaMeL Ty ( residuals , x CaMeL Norm , first CaMeL Iteration ) ;
rank: 106
score: 99.20531354631696
patch: lm CaMeL Par ( residuals ) ; qr CaMeL Decomposition ( ) ;
rank: 106
score: 99.16698346819196
patch: q CaMeL Ty [ q CaMeL Ty ] = residuals ( ) ;
rank: 106
score: 99.0976092998798
patch: q CaMeL Ty ( residuals . equals ( residuals ) ) ;
rank: 106
score: 99.09351399739583
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty [ 1 ] ;
rank: 106
score: 99.06899588448661
patch: q CaMeL Ty = q CaMeL Ty residuals = q CaMeL Ty ;
rank: 106
score: 99.00685813210227
patch: q CaMeL Ty = new long [ residuals ] ;
rank: 107
score: 99.25954718338816
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current . new double [ cols ] ;
rank: 107
score: 99.20431518554688
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 107
score: 99.17516326904297
patch: increment CaMeL Iterations CaMeL Counter ( ) ; if ( first CaMeL Iteration ) {
rank: 107
score: 99.09657981178977
patch: q CaMeL Ty = residuals = q CaMeL Ty ;
rank: 107
score: 99.09346226283482
patch: q CaMeL Ty ( residuals . double CaMeL Value ( ) ) ;
rank: 107
score: 99.050048828125
patch: q CaMeL Ty = update CaMeL Jacobian ( ) ;
rank: 107
score: 99.00656563895089
patch: q CaMeL Ty = ( int [ ] ) residuals . length ;
rank: 108
score: 99.259521484375
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; first CaMeL Iteration = 0 ;
rank: 108
score: 99.20275065104167
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 108
score: 99.17495291573661
patch: = current . update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 108
score: 99.16357421875
patch: q CaMeL Ty ( ) . residuals ( ) ;
rank: 108
score: 99.09618030894886
patch: q CaMeL Ty ( residuals ) ; break ; }
rank: 108
score: 99.09261067708333
patch: q CaMeL Ty ( residuals 1 , residuals $NUMBER$ ) ;
rank: 109
score: 99.20233561197917
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this ) ;
rank: 109
score: 99.16272786458333
patch: q CaMeL Ty ( ) . q CaMeL Ty ( residuals residuals ) ;
rank: 109
score: 99.095458984375
patch: q CaMeL Ty = residuals ; ; q CaMeL Ty ( ) ;
rank: 109
score: 99.09232875279018
patch: q CaMeL Ty ( 1 ) ; q CaMeL Ty ( ) ;
rank: 109
score: 99.06552124023438
patch: q CaMeL Ty = q CaMeL Ty ( $NUMBER$ ) ;
rank: 109
score: 99.04954310825893
patch: q CaMeL Ty ( ) ; else update CaMeL Jacobian ( ) ;
rank: 109
score: 99.0039532001202
patch: q CaMeL Ty q CaMeL Ty ( residuals , residuals ) ;
rank: 110
score: 99.20756312779018
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 0 ;
rank: 110
score: 99.17335911800987
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current . update CaMeL Jacobian ( ) ;
rank: 110
score: 99.09518771701389
patch: else q CaMeL Ty ( residuals ) ;
rank: 110
score: 99.09145682198661
patch: q CaMeL Ty ( 0 ) ; q CaMeL Ty ( ) ;
rank: 110
score: 99.06318664550781
patch: q CaMeL Ty ( new ) ;
rank: 111
score: 99.25734049479166
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) ;
rank: 111
score: 99.20030924479167
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current . current ;
rank: 111
score: 99.17079380580357
patch: if ( first CaMeL Iteration ) { lm CaMeL Par = 0 ;
rank: 111
score: 99.16138509114583
patch: q CaMeL Ty ( ) ; current . q CaMeL Ty ( ) ;
rank: 111
score: 99.09433419363839
patch: q CaMeL Ty = residuals ; q CaMeL Ty ( ) ; }
rank: 111
score: 99.0905990600586
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals ) ; }
rank: 111
score: 99.0616924579327
patch: q CaMeL Ty = new q CaMeL Ty [ 0 ] ;
rank: 111
score: 99.04749552408855
patch: q CaMeL Ty ( residuals ) ; while ( true )
rank: 111
score: 99.001220703125
patch: q CaMeL Ty = ( double [ ] ) residuals ;
rank: 112
score: 99.20639474051339
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = true ;
rank: 112
score: 99.16002807617187
patch: q CaMeL Ty ( residuals ) ; ; ;
rank: 113
score: 99.2554931640625
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = $NUMBER$ ;
rank: 113
score: 99.19975280761719
patch: delta = ( double [ ] ) initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 113
score: 99.16790771484375
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( x CaMeL Norm ) ;
rank: 113
score: 99.09247295673077
patch: q CaMeL Ty = q CaMeL Ty . q CaMeL Ty ;
rank: 113
score: 99.08975830078126
patch: q CaMeL Ty [ 0 ] = ) ;
rank: 113
score: 99.06099155970982
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ; else
rank: 113
score: 99.00082632211539
patch: q CaMeL Ty = true ; q CaMeL Ty = true ;
rank: 114
score: 99.2037353515625
patch: q CaMeL Ty ( ) ; update CaMeL Residuals CaMeL And CaMeL Cost ( residuals ) ;
rank: 114
score: 99.19940185546875
patch: q CaMeL Ty ( this ) ; qr CaMeL Decomposition ( ) ;
rank: 114
score: 99.15955403645833
patch: q CaMeL Ty [ ) ] . q CaMeL Ty ( residuals ) ;
rank: 114
score: 99.08944498697916
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( 1 ) ;
rank: 114
score: 99.05832345145089
patch: q CaMeL Ty ( ) ; q CaMeL Ty catch ( ) ;
rank: 114
score: 99.04526192801339
patch: q CaMeL Ty ( ) ; else qr CaMeL Decomposition ( ) ;
rank: 114
score: 99.00055486505681
patch: q CaMeL Ty [ residuals ] ( residuals ) ;
rank: 115
score: 99.25519157858456
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = new int [ cols ] ;
rank: 115
score: 99.2030258178711
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 1 . 0 ;
rank: 115
score: 99.19923502604166
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 115
score: 99.1593905362216
patch: = q CaMeL Ty . residuals ( residuals ) ;
rank: 115
score: 99.09203229631696
patch: q CaMeL Ty = 0 ; q CaMeL Ty ( residuals ) ;
rank: 115
score: 99.08905901227679
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = current ;
rank: 115
score: 99.05532602163461
patch: q CaMeL Ty residuals = q CaMeL Ty ( residuals ) ;
rank: 115
score: 99.04420979817708
patch: if ( qr CaMeL Decomposition ( ) )
rank: 115
score: 99.0000991821289
patch: q CaMeL Ty ( true ) ;
rank: 116
score: 99.25491536458334
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current + 0 ;
rank: 116
score: 99.2025146484375
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ++ ;
rank: 116
score: 99.19843292236328
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current [ cols ] ;
rank: 116
score: 99.16449938322368
patch: ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor : 0 ;
rank: 116
score: 99.15931919642857
patch: q CaMeL Ty = new ; q CaMeL Ty ( residuals ) ;
rank: 116
score: 99.09061889648437
patch: q CaMeL Ty ( residuals residuals null ) ;
rank: 116
score: 99.08898111979167
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = residuals ) ;
rank: 116
score: 99.05501011439732
patch: q CaMeL Ty [ ( q CaMeL Ty [ 1 ] ) ;
rank: 116
score: 99.04150390625
patch: this . update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 116
score: 98.9998270670573
patch: q CaMeL Ty = residuals ( $NUMBER$ , residuals ) ;
rank: 117
score: 99.20237513950893
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = 0 ;
rank: 117
score: 99.19680786132812
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , current ) ;
rank: 117
score: 99.16346650965073
patch: lm CaMeL Par = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) previous ;
rank: 117
score: 99.1591552734375
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += residuals ) ;
rank: 117
score: 99.05470493861607
patch: q CaMeL Ty = q CaMeL Ty ( $NUMBER$ , residuals ) ;
rank: 118
score: 99.2523129111842
patch: q CaMeL Ty = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 118
score: 99.19502258300781
patch: return ( ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ) ;
rank: 118
score: 99.16310628255208
patch: = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 118
score: 99.08893377130681
patch: q CaMeL Ty ( residuals ) ; ) ; ;
rank: 118
score: 99.0536776455966
patch: q CaMeL Ty = new q CaMeL Ty ) ;
rank: 118
score: 99.03833946814903
patch: if ( true ) increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 118
score: 98.99880545479911
patch: q CaMeL Ty ( ) ; q CaMeL Ty = null ; }
rank: 119
score: 99.25191921657986
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) qr CaMeL Decomposition ( ) ;
rank: 119
score: 99.19388580322266
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 119
score: 99.15495082310268
patch: q CaMeL Ty ( ) ) ; q CaMeL Ty ( ) ;
rank: 119
score: 99.08798452524039
patch: q CaMeL Ty = residuals ; q CaMeL Ty = 0 ;
rank: 119
score: 99.05138142903645
patch: q CaMeL Ty = new q CaMeL Ty residuals ) ;
rank: 119
score: 99.03767533735795
patch: q CaMeL Ty ( residuals ) ; return current ;
rank: 120
score: 99.25004747178819
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ) ;
rank: 120
score: 99.19998931884766
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 0 . 1 ;
rank: 120
score: 99.19324544270833
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( diag ) ;
rank: 120
score: 99.16219075520833
patch: q CaMeL Ty ( x CaMeL Norm , x CaMeL Norm , first CaMeL Iteration ) ;
rank: 120
score: 99.15446254185268
patch: q CaMeL Ty ( ) . ; q CaMeL Ty ( ) ;
rank: 120
score: 99.08724975585938
patch: q CaMeL Ty ( residuals . 0 ) ;
rank: 120
score: 99.03669956752232
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( residuals ) ;
rank: 121
score: 99.24884996916118
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = 1 ;
rank: 121
score: 99.19149576822916
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( residuals ) ;
rank: 121
score: 99.16130235460069
patch: if ( first CaMeL Iteration && first CaMeL Iteration ) { qr CaMeL Decomposition ( ) ;
rank: 121
score: 99.15231557992789
patch: q CaMeL Ty = q CaMeL Ty ( residuals ) ; ;
rank: 121
score: 99.08600408380681
patch: q CaMeL Ty = residuals . ( residuals ) ;
rank: 121
score: 99.08047921316964
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . ) ;
rank: 121
score: 98.99837239583333
patch: q CaMeL Ty = ( float [ ] ) residuals ;
rank: 122
score: 99.19906180245536
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = current ;
rank: 122
score: 99.16080515008224
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective . objective ) ;
rank: 122
score: 99.15225655691964
patch: q CaMeL Ty *= residuals ; q CaMeL Ty ( residuals ) ;
rank: 122
score: 99.05046997070312
patch: q CaMeL Ty ( $NUMBER$ , residuals ) ;
rank: 122
score: 99.035693359375
patch: q CaMeL Ty ( ) ; try { qr CaMeL Decomposition ( ) ;
rank: 122
score: 98.99817833533653
patch: q CaMeL Ty = q CaMeL Ty ( residuals ) ; }
rank: 123
score: 99.24796977796052
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; first CaMeL Iteration = true ;
rank: 123
score: 99.18841145833333
patch: delta = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) previous ;
rank: 123
score: 99.16074625651042
patch: = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : current ;
rank: 123
score: 99.15219350961539
patch: q CaMeL Ty [ q CaMeL Ty ] ( residuals ) ;
rank: 123
score: 99.07901204427084
patch: = q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ) ;
rank: 123
score: 99.03367396763393
patch: if ( first CaMeL Iteration )
rank: 123
score: 98.99716186523438
patch: q CaMeL Ty ( residuals ) ; residuals = false ;
rank: 124
score: 99.24669125205592
patch: delta = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : 1 ;
rank: 124
score: 99.1978759765625
patch: q CaMeL Ty ( residuals ) ; previous = current ;
rank: 124
score: 99.16011127672698
patch: delta = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : current ;
rank: 124
score: 99.15093122209821
patch: q CaMeL Ty [ q CaMeL Ty ) ] ( residuals ) ;
rank: 124
score: 99.0831298828125
patch: q CaMeL Ty ( residuals ) ; residuals = $NUMBER$ ;
rank: 124
score: 99.0784912109375
patch: q CaMeL Ty ( residuals . residuals ( ) ) ;
rank: 125
score: 99.24613444010417
patch: delta = new double [ cols ] ;
rank: 125
score: 99.19746398925781
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 . 1 ;
rank: 125
score: 99.18753814697266
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ; }
rank: 125
score: 99.08121744791667
patch: q CaMeL Ty ( residuals , residuals ( ) ) ;
rank: 125
score: 99.07757161458333
patch: q CaMeL Ty = new double [ q CaMeL Ty . length ] ;
rank: 125
score: 99.04864501953125
patch: q CaMeL Ty ( ) ; q CaMeL Ty residuals = null ;
rank: 125
score: 99.03224690755208
patch: q CaMeL Ty ( first CaMeL Iteration , 0 ) ;
rank: 126
score: 99.24500796669408
patch: q CaMeL Ty ( new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous , objective ) ;
rank: 126
score: 99.19684709821429
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( true ) ;
rank: 126
score: 99.18653157552083
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( jacobian ) ;
rank: 126
score: 99.08083274147727
patch: q CaMeL Ty = residuals . iterator ( ) ;
rank: 126
score: 99.04693603515625
patch: q CaMeL Ty ( residuals . get CaMeL Id ( ) ) ;
rank: 126
score: 99.03142841045673
patch: if ( first CaMeL Iteration ) update CaMeL Jacobian ( ) ;
rank: 126
score: 98.99561157226563
patch: q CaMeL Ty ( true , residuals ) ;
rank: 127
score: 99.24488589638158
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , point ) ;
rank: 127
score: 99.15849034926471
patch: = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor
rank: 127
score: 99.04691256009616
patch: q CaMeL Ty = ( q CaMeL Ty , residuals ) ;
rank: 127
score: 99.03099772135417
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( false ) ;
rank: 128
score: 99.18361118861607
patch: update CaMeL Jacobian ( residuals ) ; qr CaMeL Decomposition ( ) ;
rank: 128
score: 99.15831801470588
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( objective , objective ) ;
rank: 128
score: 99.14512125651042
patch: q CaMeL Ty ( ) ; residuals ( residuals ) ;
rank: 128
score: 99.07896839488636
patch: q CaMeL Ty ( residuals [ 1 ] ) ;
rank: 128
score: 99.07632446289062
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . clone ( ) ;
rank: 128
score: 99.04652913411458
patch: q CaMeL Ty ; q CaMeL Ty = residuals ) ;
rank: 128
score: 99.02936260516827
patch: try { update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 129
score: 99.19467163085938
patch: q CaMeL Ty ( residuals ) ; current . update CaMeL Jacobian ( ) ;
rank: 129
score: 99.15728759765625
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 129
score: 99.07618001302083
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . ( ) ;
rank: 129
score: 99.07382202148438
patch: ( residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 129
score: 99.04595947265625
patch: q CaMeL Ty = q CaMeL Ty residuals ;
rank: 129
score: 99.02919358473558
patch: q CaMeL Ty = increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 129
score: 98.99495152064732
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( this ) ;
rank: 130
score: 99.24449811662946
patch: lm CaMeL Par = Math . sqrt ( x CaMeL Norm ) ;
rank: 130
score: 99.14386596679688
patch: 1 . q CaMeL Ty ( residuals ) ;
rank: 130
score: 99.0755145733173
patch: q CaMeL Ty ( ) q CaMeL Ty ( residuals ) ;
rank: 130
score: 98.99485560825893
patch: q CaMeL Ty = ( q CaMeL Ty [ residuals ] ) ;
rank: 131
score: 99.24400570518092
patch: lm CaMeL Par = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 131
score: 99.19365692138672
patch: q CaMeL Ty ( residuals , old CaMeL X , x CaMeL Norm ) ;
rank: 131
score: 99.18196614583333
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current . this ;
rank: 131
score: 99.15494791666667
patch: double x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 131
score: 99.1437744140625
patch: $NUMBER$ . q CaMeL Ty ( residuals ) ;
rank: 131
score: 99.07510579427084
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty [ 0 ] ;
rank: 131
score: 99.07105431189903
patch: q CaMeL Ty = null ; q CaMeL Ty = null ;
rank: 131
score: 99.04590715680804
patch: q CaMeL Ty = $NUMBER$ ; q CaMeL Ty ( residuals ) ;
rank: 131
score: 99.02828543526786
patch: q CaMeL Ty ( residuals , old CaMeL Res , residuals ) ;
rank: 131
score: 98.9945576985677
patch: q CaMeL Ty = residuals ( residuals . residuals ) ;
rank: 132
score: 99.24370930989583
patch: } x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 132
score: 99.18150329589844
patch: q CaMeL Ty ( residuals , x CaMeL Norm , lm CaMeL Dir ) ;
rank: 132
score: 99.15412983141448
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = null ;
rank: 132
score: 99.14354596819196
patch: q CaMeL Ty ( residuals , q CaMeL Ty ) ; * /
rank: 132
score: 99.0750732421875
patch: q CaMeL Ty [ residuals ] = current . q CaMeL Ty ( ) ;
rank: 132
score: 99.06864790482955
patch: q CaMeL Ty ( ) ; residuals ( ) ;
rank: 133
score: 99.24338666130515
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( get , objective ) ;
rank: 133
score: 99.19281005859375
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = first CaMeL Iteration ;
rank: 133
score: 99.15399932861328
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( cols ) ;
rank: 133
score: 99.14169747488839
patch: q CaMeL Ty . q CaMeL Ty ( residuals ) ; * /
rank: 133
score: 99.07499186197917
patch: = q CaMeL Ty [ 0 ] ;
rank: 133
score: 99.04500034877232
patch: q CaMeL Ty ; q CaMeL Ty q CaMeL Ty ( ) ;
rank: 133
score: 99.02616664341518
patch: q CaMeL Ty ( residuals , old CaMeL Res , delta ) ;
rank: 133
score: 98.9928311434659
patch: q CaMeL Ty = new Object [ residuals ] ;
rank: 134
score: 99.2433220358456
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation , permutation ) ;
rank: 134
score: 99.19242589613971
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( false ) ;
rank: 134
score: 99.0736971768466
patch: q CaMeL Ty ( residuals , residuals 1 ) ;
rank: 134
score: 99.0660067471591
patch: q CaMeL Ty = residuals . q CaMeL Ty ;
rank: 134
score: 99.04414585658482
patch: q CaMeL Ty ( new ) ; q CaMeL Ty ( ) ;
rank: 134
score: 99.02579074435764
patch: q CaMeL Ty ( ) ; try {
rank: 134
score: 98.99162946428571
patch: q CaMeL Ty = ( q CaMeL Ty [ $NUMBER$ ] ) ;
rank: 135
score: 99.24311266447368
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ; if ( first CaMeL Iteration )
rank: 135
score: 99.19196428571429
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( false ) ;
rank: 135
score: 99.1753158569336
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current [ cols ] ;
rank: 135
score: 99.15390249399039
patch: lm CaMeL Par = 0 ; lm CaMeL Par = 0 ;
rank: 135
score: 99.0735595703125
patch: q CaMeL Ty [ residuals ] = current ;
rank: 135
score: 99.04370989118304
patch: q CaMeL Ty = q CaMeL Ty ; q CaMeL Ty ++ ;
rank: 135
score: 98.99160531850961
patch: q CaMeL Ty = ( q CaMeL Ty != null ) ;
rank: 136
score: 99.24204388786765
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = new int [ rows ] ;
rank: 136
score: 99.19175809972427
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( $NUMBER$ ) ;
rank: 136
score: 99.1520637063419
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point * objective ) ;
rank: 136
score: 99.1375732421875
patch: q CaMeL Ty ( ) . q CaMeL Ty ( ) ) ;
rank: 136
score: 99.07302024147727
patch: q CaMeL Ty [ residuals ] = - 1 ;
rank: 136
score: 99.06362915039062
patch: q CaMeL Ty ( residuals , residuals . 0 ) ;
rank: 136
score: 99.0433349609375
patch: q CaMeL Ty = new int [ residuals $NUMBER$ ] ;
rank: 136
score: 99.02547200520833
patch: q CaMeL Ty ( ) ; try { update CaMeL Jacobian ( ) ;
rank: 136
score: 98.99155099051339
patch: q CaMeL Ty = ( q CaMeL Ty ( true ) ) ;
rank: 137
score: 99.2418441772461
patch: if ( first CaMeL Iteration && first CaMeL Iteration && first CaMeL Iteration ) {
rank: 137
score: 99.17281341552734
patch: res = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 137
score: 99.15170627170139
patch: = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : 0 ;
rank: 137
score: 99.13736397879464
patch: q CaMeL Ty ++ ; q CaMeL Ty ( residuals ) ; ;
rank: 137
score: 99.07295989990234
patch: q CaMeL Ty ( residuals ) ; } q CaMeL Ty ( residuals ) ;
rank: 137
score: 99.06264426491477
patch: q CaMeL Ty ( residuals ) ; } ) ;
rank: 137
score: 99.04330008370536
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( null ) ;
rank: 137
score: 99.02509014423077
patch: q CaMeL Ty = current ; update CaMeL Jacobian ( ) ;
rank: 137
score: 98.99149322509766
patch: q CaMeL Ty ( false ) ;
rank: 138
score: 99.24055032169117
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 138
score: 99.1911980124081
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( true ) ;
rank: 138
score: 99.13671875
patch: q CaMeL Ty ++ ) . q CaMeL Ty ( residuals ) ;
rank: 138
score: 99.05939275568181
patch: q CaMeL Ty ( residuals ) ; residuals ) ;
rank: 138
score: 99.04289027622768
patch: q CaMeL Ty = q CaMeL Ty [ 0 ) ++ ] ;
rank: 138
score: 99.02448381696429
patch: if ( qr CaMeL Decomposition ( ) && first CaMeL Iteration ) {
rank: 138
score: 98.99069448617789
patch: q CaMeL Ty = true ; q CaMeL Ty = false ;
rank: 139
score: 99.23987579345703
patch: q CaMeL Ty ( x CaMeL Norm ) ; qr CaMeL Decomposition ( ) ;
rank: 139
score: 99.19044494628906
patch: q CaMeL Ty ( residuals ) ; this . first CaMeL Iteration = true ;
rank: 139
score: 99.14934981496711
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , point , objective ) ;
rank: 139
score: 99.07205200195312
patch: q CaMeL Ty ( residuals $NUMBER$ ) ; q CaMeL Ty ( residuals ) ;
rank: 139
score: 99.05928344726563
patch: q CaMeL Ty = q CaMeL Ty ; ;
rank: 139
score: 99.04253278459821
patch: q CaMeL Ty = this ; q CaMeL Ty = residuals ) ;
rank: 140
score: 99.23974609375
patch: lm CaMeL Par = new double [ cols ] ;
rank: 140
score: 99.19029998779297
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += $NUMBER$ . 0 ;
rank: 140
score: 99.17086029052734
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective )
rank: 140
score: 99.14898681640625
patch: = 0 ; update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 140
score: 99.13446044921875
patch: q CaMeL Ty * q CaMeL Ty ( residuals ) ;
rank: 140
score: 99.07191467285156
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals . ) ;
rank: 140
score: 99.0239969889323
patch: q CaMeL Ty ( old CaMeL X , 0 ) ;
rank: 140
score: 98.9898681640625
patch: q CaMeL Ty ( residuals , residuals ) ; }
rank: 141
score: 99.23966257195724
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = true ;
rank: 141
score: 99.17021942138672
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , ) ;
rank: 141
score: 99.05816095525569
patch: q CaMeL Ty ( residuals , residuals ) ) ;
rank: 141
score: 99.0420430501302
patch: q CaMeL Ty = this . q CaMeL Ty ) ;
rank: 141
score: 99.02374737079327
patch: if ( first CaMeL Iteration ) qr CaMeL Decomposition ( ) ;
rank: 142
score: 99.23735608552632
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = null ; x CaMeL Norm = 0 ;
rank: 142
score: 99.18577223557692
patch: lm CaMeL Par ( ) ; qr CaMeL Decomposition ( ) ;
rank: 142
score: 99.05621337890625
patch: q CaMeL Ty ( residuals [ residuals 1 ] ) ;
rank: 142
score: 99.0419921875
patch: q CaMeL Ty = null ; q CaMeL Ty ( ) ;
rank: 142
score: 99.02362060546875
patch: q CaMeL Ty ( residuals , max ) ;
rank: 142
score: 98.98942260742187
patch: q CaMeL Ty ( false , residuals ) ;
rank: 143
score: 99.23677332261029
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = qr CaMeL Decomposition ( ) ;
rank: 143
score: 99.18536017922794
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( 1 ) ;
rank: 143
score: 99.14766010485198
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( x CaMeL Norm , diag ) ;
rank: 143
score: 99.06994018554687
patch: q CaMeL Ty [ 0 ] ( ) ;
rank: 143
score: 99.05548095703125
patch: q CaMeL Ty = residuals ) ; q CaMeL Ty ;
rank: 143
score: 99.04151329627403
patch: q CaMeL Ty = q CaMeL Ty ; residuals ( ) ;
rank: 143
score: 99.02243041992188
patch: q CaMeL Ty ( update CaMeL Jacobian ) ;
rank: 144
score: 99.16828918457031
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , point ,
rank: 144
score: 99.13043212890625
patch: q CaMeL Ty ++ ;
rank: 144
score: 99.06962367466518
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty ( ) ;
rank: 144
score: 99.05491286057692
patch: q CaMeL Ty = q CaMeL Ty . ( residuals ) ;
rank: 144
score: 99.04124098557692
patch: q CaMeL Ty = this ; q CaMeL Ty = this ;
rank: 144
score: 98.98771449497768
patch: q CaMeL Ty ( ) ; q CaMeL Ty = new ) ;
rank: 145
score: 99.23514811197917
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = update CaMeL Jacobian ( residuals ) ;
rank: 145
score: 99.18411254882812
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = x CaMeL Norm ;
rank: 145
score: 99.16791534423828
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( diag ) ;
rank: 145
score: 99.12998268821023
patch: q CaMeL Ty [ ) ] = residuals ) ;
rank: 145
score: 99.06637573242188
patch: q CaMeL Ty = q CaMeL Ty ) ; q CaMeL Ty ( ) ;
rank: 145
score: 99.05490112304688
patch: q CaMeL Ty ( residuals ( ) ) ; ) ;
rank: 145
score: 99.021533203125
patch: q CaMeL Ty ( residuals ) . update CaMeL Jacobian ( residuals ) ;
rank: 146
score: 99.23472595214844
patch: delta = Math . max ( x CaMeL Norm , x CaMeL Norm ) ;
rank: 146
score: 99.1837158203125
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( cols ) ;
rank: 146
score: 99.16619873046875
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ) ;
rank: 146
score: 99.14710828993056
patch: = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : previous ;
rank: 146
score: 99.12881033761161
patch: q CaMeL Ty $NUMBER$ ) . q CaMeL Ty ( residuals ) ;
rank: 146
score: 99.03653658353366
patch: q CaMeL Ty = new q CaMeL Ty residuals ( ) ;
rank: 147
score: 99.18363952636719
patch: q CaMeL Ty ( x CaMeL Norm , delta , diag CaMeL R ) ;
rank: 147
score: 99.12740384615384
patch: q CaMeL Ty 1 . q CaMeL Ty ( residuals ) ;
rank: 147
score: 99.02010091145833
patch: if ( true ) { qr CaMeL Decomposition ( ) ;
rank: 147
score: 98.98428780691964
patch: q CaMeL Ty = residuals . index CaMeL Of ( residuals ) ;
rank: 148
score: 99.15774301382211
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = null ;
rank: 148
score: 99.12733677455357
patch: q CaMeL Ty ( residuals ) * q CaMeL Ty ( ) ;
rank: 148
score: 99.06454264322916
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( current ) ;
rank: 148
score: 99.05269368489583
patch: q CaMeL Ty = q CaMeL Ty . ( ) ;
rank: 148
score: 99.03200276692708
patch: q CaMeL Ty ( false , q CaMeL Ty ) ;
rank: 148
score: 98.98403930664062
patch: q CaMeL Ty = ( long [ ] ) residuals ;
rank: 149
score: 99.1575927734375
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous ) ;
rank: 149
score: 99.1466064453125
patch: x CaMeL Norm = 0 . 0 ; x CaMeL Norm += 0 . 0 ;
rank: 149
score: 99.06399536132812
patch: q CaMeL Ty ( ) ; current . q CaMeL Ty ( residuals ) ;
rank: 149
score: 99.05202073317308
patch: q CaMeL Ty = residuals ; q CaMeL Ty = this ;
rank: 149
score: 99.0295743075284
patch: q CaMeL Ty ) ; q CaMeL Ty ) ;
rank: 149
score: 99.01968383789062
patch: q CaMeL Ty ( $STRING$ ) ;
rank: 149
score: 98.9839618389423
patch: q CaMeL Ty [ residuals ] ( q CaMeL Ty ) ;
rank: 150
score: 99.23441997327302
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = false ;
rank: 150
score: 99.181640625
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = x CaMeL Norm ;
rank: 150
score: 99.15664236886161
patch: q CaMeL Ty ( true ) ; qr CaMeL Decomposition ( ) ;
rank: 150
score: 99.12547810872395
patch: q CaMeL Ty , q CaMeL Ty ( residuals ) ;
rank: 150
score: 99.05166391225961
patch: q CaMeL Ty = null ; q CaMeL Ty = ) ;
rank: 150
score: 99.0294189453125
patch: q CaMeL Ty ( ) ; q CaMeL Ty -- ;
rank: 150
score: 99.01939900716145
patch: q CaMeL Ty ( old CaMeL X , residuals ) ;
rank: 151
score: 99.17872837611607
patch: q CaMeL Ty ++ ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 151
score: 99.15499674479166
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = 0 ;
rank: 151
score: 99.1239013671875
patch: q CaMeL Ty ( residuals , ; q CaMeL Ty ( ) ;
rank: 151
score: 99.0516357421875
patch: q CaMeL Ty ( residuals ( residuals ) 0 ) ;
rank: 151
score: 99.02867635091145
patch: q CaMeL Ty ( residuals , residuals , true ) ;
rank: 151
score: 99.019091796875
patch: if ( update CaMeL Jacobian ( ) ) {
rank: 152
score: 99.23386744449013
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , residuals ) ;
rank: 152
score: 99.15382603236607
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) previous ;
rank: 152
score: 99.14528937088816
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , sum ) ;
rank: 152
score: 99.12320650540866
patch: q CaMeL Ty -- ; q CaMeL Ty ( residuals ) ;
rank: 152
score: 99.063623046875
patch: q CaMeL Ty ( q CaMeL Ty [ 0 ] , residuals ) ;
rank: 152
score: 99.0283203125
patch: q CaMeL Ty = q CaMeL Ty [ ) ] ;
rank: 152
score: 99.01902553013393
patch: q CaMeL Ty ( $STRING$ ) ; qr CaMeL Decomposition ( ) ;
rank: 152
score: 98.9779052734375
patch: q CaMeL Ty = false ; q CaMeL Ty ( residuals ) ;
rank: 153
score: 99.2336490028783
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = $STRING$ ;
rank: 153
score: 99.17740885416667
patch: q CaMeL Ty ( ) ; this . qr CaMeL Decomposition ( ) ;
rank: 153
score: 99.14522058823529
patch: q CaMeL Ty ( residuals ) ; { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 153
score: 99.12276785714286
patch: q CaMeL Ty [ q CaMeL Ty ) ] = residuals ) ;
rank: 153
score: 99.06318664550781
patch: = q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 153
score: 99.02687424879808
patch: q CaMeL Ty = this ; q CaMeL Ty = ) ;
rank: 153
score: 99.01902418870192
patch: q CaMeL Ty ( ) . update CaMeL Jacobian ( ) ;
rank: 153
score: 98.97782076322116
patch: q CaMeL Ty = residuals ( residuals ) q CaMeL Ty ;
rank: 154
score: 99.23353486902573
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this , permutation ) ;
rank: 154
score: 99.17709689670139
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( x CaMeL Norm , delta , diag ) ;
rank: 154
score: 99.15243326822916
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( true ) ;
rank: 154
score: 99.14466094970703
patch: q CaMeL Ty ( x CaMeL Norm , x CaMeL Norm , sum ) ;
rank: 154
score: 99.06298065185547
patch: q CaMeL Ty = System . current CaMeL Time CaMeL Millis ( ) ; }
rank: 154
score: 99.02123006184895
patch: q CaMeL Ty ( 0 , q CaMeL Ty ) ;
rank: 154
score: 98.977783203125
patch: q CaMeL Ty ( q CaMeL Ty ) ; q CaMeL Ty ;
rank: 155
score: 99.17422485351562
patch: = current ; update CaMeL Jacobian ( ) ;
rank: 155
score: 99.12061418805804
patch: q CaMeL Ty [ residuals ) ] = q CaMeL Ty ) ;
rank: 155
score: 99.06293487548828
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals . residuals ) ;
rank: 155
score: 99.04874361478366
patch: q CaMeL Ty = residuals . q CaMeL Ty ( ) ;
rank: 155
score: 99.01712472098214
patch: q CaMeL Ty ( residuals , old CaMeL Res , objective ) ;
rank: 155
score: 98.9775390625
patch: q CaMeL Ty ( residuals . length , residuals , residuals ) ;
rank: 156
score: 99.23298725328948
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; lm CaMeL Par ( ) ;
rank: 156
score: 99.14312744140625
patch: q CaMeL Ty ( residuals , first CaMeL Iteration , x CaMeL Norm ) ;
rank: 156
score: 99.12056790865384
patch: q CaMeL Ty += residuals ; q CaMeL Ty ( ) ;
rank: 156
score: 99.02025428185097
patch: q CaMeL Ty = ( q CaMeL Ty - residuals ) ;
rank: 156
score: 99.01658325195312
patch: q CaMeL Ty ( residuals , cols ) ;
rank: 156
score: 98.97679554332386
patch: q CaMeL Ty = new float [ residuals ] ;
rank: 157
score: 99.23202749399039
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 157
score: 99.15062713623047
patch: q CaMeL Ty ( residuals , x CaMeL Norm , diag CaMeL R ) ;
rank: 157
score: 99.12038010817308
patch: q CaMeL Ty [ q CaMeL Ty ] = residuals ) ;
rank: 157
score: 99.0626220703125
patch: q CaMeL Ty ( residuals ( int ) q CaMeL Ty ) ;
rank: 157
score: 99.04758864182692
patch: q CaMeL Ty ; q CaMeL Ty = residuals ( ) ;
rank: 157
score: 99.01996404474431
patch: q CaMeL Ty ; q CaMeL Ty = ) ;
rank: 157
score: 99.01617431640625
patch: q CaMeL Ty ( old CaMeL Res , current ) ;
rank: 158
score: 99.23156020220588
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = new double [ rows ] ;
rank: 158
score: 99.14065987723214
patch: q CaMeL Ty ( residuals , delta , x CaMeL Norm ) ;
rank: 158
score: 99.04594282670455
patch: q CaMeL Ty = q CaMeL Ty . residuals ;
rank: 158
score: 99.01516287667411
patch: this . update CaMeL Residuals CaMeL And CaMeL Cost ( residuals ) ;
rank: 158
score: 98.9755859375
patch: q CaMeL Ty = q CaMeL Ty ( q CaMeL Ty ) ;
rank: 159
score: 99.17207475142045
patch: q CaMeL Ty ( residuals , work 1 ) ;
rank: 159
score: 99.1405093544408
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( x CaMeL Norm ) ;
rank: 159
score: 99.06236979166667
patch: q CaMeL Ty [ residuals ] = old CaMeL X [ 0 ] ;
rank: 159
score: 99.01834810697116
patch: q CaMeL Ty = q CaMeL Ty . clone ( ) ;
rank: 159
score: 99.01333821614584
patch: if ( update CaMeL Jacobian ( ) ) qr CaMeL Decomposition ( ) ;
rank: 159
score: 98.97504534040179
patch: q CaMeL Ty = ( q CaMeL Ty [ 0 ] ) ;
rank: 160
score: 99.14004177517361
patch: x CaMeL Norm = 0 . 0 ; } x CaMeL Norm = 0 . 0 ;
rank: 160
score: 99.062255859375
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ ) ] ;
rank: 160
score: 99.04479041466347
patch: q CaMeL Ty = residuals ; q CaMeL Ty = 1 ;
rank: 160
score: 99.01803588867188
patch: q CaMeL Ty ( true , q CaMeL Ty ) ;
rank: 160
score: 99.010498046875
patch: q CaMeL Ty ( 0 ) ; update CaMeL Jacobian ( ) ;
rank: 161
score: 99.17050606863839
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = false ;
rank: 161
score: 99.14810180664062
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current - cols ] ;
rank: 161
score: 99.13936360677083
patch: if ( first CaMeL Iteration ) { qr CaMeL Decomposition ( residuals ) ;
rank: 161
score: 99.11588228665866
patch: q CaMeL Ty ( ) * q CaMeL Ty ( ) ;
rank: 161
score: 99.06127319335937
patch: q CaMeL Ty [ residuals ] = null ;
rank: 161
score: 99.04422701322116
patch: q CaMeL Ty = 0 ; q CaMeL Ty = ) ;
rank: 161
score: 99.01004028320312
patch: q CaMeL Ty ( residuals ) ; else {
rank: 161
score: 98.97276088169643
patch: q CaMeL Ty = new q CaMeL Ty ( residuals ) ; }
rank: 162
score: 99.22993020450367
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( 0 , objective ) ;
rank: 162
score: 99.14786783854167
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( false ) ;
rank: 162
score: 99.13930838448661
patch: if ( first CaMeL Iteration ) { lm CaMeL Par ( ) ;
rank: 162
score: 99.11507161458333
patch: q CaMeL Ty [ residuals ) ] ( residuals ) ;
rank: 162
score: 99.06124877929688
patch: q CaMeL Ty ( 1 ) ;
rank: 162
score: 99.04403250558036
patch: q CaMeL Ty = null ;
rank: 162
score: 99.01646071213942
patch: q CaMeL Ty = this ; q CaMeL Ty = null ;
rank: 162
score: 99.00876290457589
patch: q CaMeL Ty ( residuals , old CaMeL X , 0 ) ;
rank: 163
score: 99.22970920138889
patch: q CaMeL Ty ( residuals ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 163
score: 99.16930474175348
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ; * /
rank: 163
score: 99.1468276977539
patch: q CaMeL Ty ( residuals ) ; * / qr CaMeL Decomposition ( ) ;
rank: 163
score: 99.1393051147461
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 0 . 0 ; }
rank: 163
score: 99.11460658482143
patch: q CaMeL Ty ( ) . q CaMeL Ty ( ) . ;
rank: 163
score: 99.04373873197116
patch: q CaMeL Ty = q CaMeL Ty ; q CaMeL Ty .
rank: 163
score: 99.01491088867188
patch: q CaMeL Ty residuals = q CaMeL Ty ;
rank: 163
score: 99.00821126302084
patch: try { update CaMeL Jacobian ( ) ; update CaMeL Jacobian ( ) ;
rank: 163
score: 98.9716796875
patch: q CaMeL Ty ( residuals , residuals ) ; q CaMeL Ty ;
rank: 164
score: 99.22873757102273
patch: delta = ( x CaMeL Norm == 0 ) ?
rank: 164
score: 99.16918182373047
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( false ) ;
rank: 164
score: 99.13812934027777
patch: q CaMeL Ty ( residuals ) ; this . x CaMeL Norm = 0 . 0 ;
rank: 164
score: 99.11449323381696
patch: q CaMeL Ty ( $NUMBER$ ) ; q CaMeL Ty ( ) ;
rank: 164
score: 99.06023763020833
patch: q CaMeL Ty ( 0 ) ; q CaMeL Ty ( residuals ) ;
rank: 164
score: 99.04128793569711
patch: q CaMeL Ty ( ) ; ( q CaMeL Ty ) ;
rank: 164
score: 99.0136249248798
patch: q CaMeL Ty ( residuals , q CaMeL Ty ) ; ;
rank: 165
score: 99.22737844366776
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm += 0 ;
rank: 165
score: 99.16877184416118
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 165
score: 99.14374651227679
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ; }
rank: 165
score: 99.13742404513889
patch: lm CaMeL Par = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 165
score: 99.11400495256696
patch: q CaMeL Ty 1 ) . q CaMeL Ty ( residuals ) ;
rank: 165
score: 99.0599365234375
patch: q CaMeL Ty ( ) ; q CaMeL Ty . residuals ( residuals ) ;
rank: 165
score: 99.04117838541667
patch: q CaMeL Ty = residuals . residuals ( residuals ) ;
rank: 165
score: 99.00909423828125
patch: q CaMeL Ty ( residuals , residuals , false ) ;
rank: 165
score: 99.00632887620192
patch: q CaMeL Ty = 0 ; qr CaMeL Decomposition ( ) ;
rank: 165
score: 98.97116524832589
patch: q CaMeL Ty ( q CaMeL Ty , residuals , true ) ;
rank: 166
score: 99.13720703125
patch: q CaMeL Ty ( 0 , x CaMeL Norm , x CaMeL Norm ) ;
rank: 166
score: 99.11382184709821
patch: q CaMeL Ty ( ) . q CaMeL Ty ( ) ; }
rank: 166
score: 99.05941569010416
patch: q CaMeL Ty [ residuals ] = old CaMeL X [ residuals ] ;
rank: 166
score: 99.04042746803977
patch: q CaMeL Ty ( residuals [ residuals ] ) ;
rank: 166
score: 99.00789701021634
patch: q CaMeL Ty = q CaMeL Ty residuals ( residuals ) ;
rank: 166
score: 99.00533040364583
patch: q CaMeL Ty ( x CaMeL Norm , residuals ) ;
rank: 166
score: 98.97108677455357
patch: q CaMeL Ty ( ) ; return ( q CaMeL Ty ) ;
rank: 167
score: 99.13671875
patch: lm CaMeL Par = 0 ; boolean first CaMeL Iteration = false ;
rank: 167
score: 99.11350795200893
patch: q CaMeL Ty ( ) / q CaMeL Ty ( residuals ) ;
rank: 168
score: 99.22530788845486
patch: q CaMeL Ty ( residuals ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 168
score: 99.16769845145089
patch: = qr CaMeL Decomposition ( ) ; qr CaMeL Decomposition ( ) ;
rank: 168
score: 99.11227416992188
patch: q CaMeL Ty ( residuals , residuals ) ; * /
rank: 168
score: 99.05938720703125
patch: q CaMeL Ty = Math . max ( 0 , q CaMeL Ty ) ;
rank: 168
score: 99.03772583007813
patch: q CaMeL Ty ( residuals . length ) ;
rank: 168
score: 99.00710824819711
patch: q CaMeL Ty = $NUMBER$ ; q CaMeL Ty ( ) ;
rank: 168
score: 99.0003662109375
patch: try { qr CaMeL Decomposition ( ) ; update CaMeL Jacobian ( ) ;
rank: 168
score: 98.97079031808036
patch: q CaMeL Ty = residuals ; q CaMeL Ty = new ) ;
rank: 169
score: 99.22508239746094
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current [ 0 ] ;
rank: 169
score: 99.05884660993304
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += 1 ;
rank: 169
score: 99.00005634014423
patch: q CaMeL Ty = residuals ; qr CaMeL Decomposition ( ) ;
rank: 170
score: 99.22495404411765
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; current = current ;
rank: 170
score: 99.14078521728516
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current [ 0 ] ;
rank: 170
score: 99.13536783854167
patch: ( x CaMeL Norm , x CaMeL Norm , x CaMeL Norm ) ;
rank: 170
score: 99.11117989676339
patch: q CaMeL Ty = new double [ q CaMeL Ty ) ] ;
rank: 170
score: 99.05838012695312
patch: q CaMeL Ty ( ) q CaMeL Ty ( ) ;
rank: 170
score: 99.03480881911058
patch: q CaMeL Ty ; q CaMeL Ty ( ) ; ) ;
rank: 170
score: 99.00498610276442
patch: q CaMeL Ty = q CaMeL Ty - q CaMeL Ty ;
rank: 171
score: 99.16681780133929
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 1 ;
rank: 171
score: 99.1345150596217
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( x CaMeL Norm , sum ) ;
rank: 171
score: 99.0575663248698
patch: [ 0 ] = q CaMeL Ty [ 0 ] ;
rank: 171
score: 99.03448955829327
patch: q CaMeL Ty = 0 ; q CaMeL Ty ( ) ;
rank: 171
score: 99.0049540201823
patch: q CaMeL Ty = q CaMeL Ty residuals = residuals ;
rank: 171
score: 98.99833984375
patch: q CaMeL Ty ( residuals , permutation ) ;
rank: 171
score: 98.97018432617188
patch: q CaMeL Ty = ( short [ ] ) residuals ;
rank: 172
score: 99.22348504317434
patch: work $NUMBER$ = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 172
score: 99.13233235677083
patch: q CaMeL Ty ( ) ; / / lm CaMeL Par = 0 ;
rank: 172
score: 99.05729166666667
patch: q CaMeL Ty [ 0 ] = old CaMeL X ;
rank: 172
score: 99.03268667367789
patch: q CaMeL Ty ; ; q CaMeL Ty ( residuals ) ;
rank: 172
score: 99.00490159254808
patch: q CaMeL Ty = q CaMeL Ty [ residuals ] ; }
rank: 172
score: 98.96980503627232
patch: q CaMeL Ty = true ; q CaMeL Ty = residuals ) ;
rank: 173
score: 99.22333984375
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = first CaMeL Iteration ;
rank: 173
score: 99.16610717773438
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 0 . $NUMBER$ ;
rank: 173
score: 99.13893127441406
patch: = 0 ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 173
score: 99.03264770507812
patch: q CaMeL Ty ( residuals ) ; residuals .
rank: 173
score: 99.0033428485577
patch: q CaMeL Ty = q CaMeL Ty ; case - 1 :
rank: 173
score: 98.9955303485577
patch: q CaMeL Ty = 0 ; update CaMeL Jacobian ( ) ;
rank: 173
score: 98.96966552734375
patch: q CaMeL Ty ( residuals . length , q CaMeL Ty ) ;
rank: 174
score: 99.16596984863281
patch: q CaMeL Ty ( old CaMeL Res , delta , diag CaMeL R ) ;
rank: 174
score: 99.10685221354167
patch: = q CaMeL Ty ; q CaMeL Ty ( ) ;
rank: 174
score: 99.0564956665039
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty *= q CaMeL Ty ;
rank: 174
score: 99.0326436360677
patch: q CaMeL Ty = residuals . contains ( residuals ) ;
rank: 174
score: 99.00177001953125
patch: q CaMeL Ty ( null , q CaMeL Ty ) ;
rank: 174
score: 98.99552001953126
patch: q CaMeL Ty ( residuals ) ; continue ;
rank: 175
score: 99.16569967830883
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 . 0 ; }
rank: 175
score: 99.13876342773438
patch: delta = ( double [ ] ) solved CaMeL Cols ;
rank: 175
score: 99.10637872869319
patch: q CaMeL Ty ( residuals ) ; return null ;
rank: 175
score: 99.05555419921875
patch: q CaMeL Ty [ 0 ] = true ;
rank: 175
score: 98.99504743303571
patch: q CaMeL Ty ( residuals ) . if ( first CaMeL Iteration )
rank: 176
score: 99.22210372121711
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = previous ; x CaMeL Norm = 0 ;
rank: 176
score: 99.16535949707031
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( true ) ;
rank: 176
score: 99.13798522949219
patch: vector = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 176
score: 99.13081629136029
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( x CaMeL Norm ) ;
rank: 176
score: 99.05493977864583
patch: q CaMeL Ty ( residuals 1 ) ; q CaMeL Ty ( ) ;
rank: 176
score: 99.0317715731534
patch: q CaMeL Ty ( residuals ( ) 1 ) ;
rank: 176
score: 99.00021597055289
patch: q CaMeL Ty ( residuals , q CaMeL Ty ) ; }
rank: 176
score: 98.96814836774554
patch: q CaMeL Ty = residuals ; return ( q CaMeL Ty ) ;
rank: 177
score: 99.16532389322917
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 . 0 . 0 ;
rank: 177
score: 99.10567220052083
patch: q CaMeL Ty [ ) ] = residuals ( ) ;
rank: 177
score: 99.0548583984375
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( false ) ;
rank: 177
score: 99.0316162109375
patch: q CaMeL Ty ( residuals . $NUMBER$ ) ;
rank: 177
score: 98.99454752604167
patch: q CaMeL Ty ( first CaMeL Iteration , true ) ;
rank: 177
score: 98.96795184795673
patch: q CaMeL Ty = true ; q CaMeL Ty = null ;
rank: 178
score: 99.16511535644531
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = $NUMBER$ . 0 ;
rank: 178
score: 99.13690948486328
patch: update CaMeL Jacobian ( residuals ) ;
rank: 178
score: 98.9979999248798
patch: q CaMeL Ty = false ; q CaMeL Ty ( ) ;
rank: 179
score: 99.21954024465461
patch: delta = ( ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ) . 0 ;
rank: 179
score: 99.16419219970703
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = 0 . 0 ;
rank: 179
score: 99.104345703125
patch: = new double [ q CaMeL Ty ] ;
rank: 179
score: 99.03048001802884
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) .
rank: 179
score: 98.99782151442308
patch: } q CaMeL Ty = q CaMeL Ty ( residuals ) ;
rank: 179
score: 98.96711948939732
patch: q CaMeL Ty ( ) ; q CaMeL Ty += residuals ; }
rank: 180
score: 99.21907312729779
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , rows ) ;
rank: 180
score: 99.16403198242188
patch: q CaMeL Ty ( ) ; / * /
rank: 180
score: 99.13481903076172
patch: res = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current ) ;
rank: 180
score: 99.1303202311198
patch: q CaMeL Ty ( 0 , x CaMeL Norm ) ;
rank: 180
score: 99.10344989483173
patch: q CaMeL Ty ++ ; q CaMeL Ty ( ) ; ;
rank: 180
score: 99.0303955078125
patch: q CaMeL Ty ( residuals . contains ( residuals ) ) ;
rank: 180
score: 98.99765014648438
patch: q CaMeL Ty = q CaMeL Ty ( false ) ;
rank: 180
score: 98.99351149338942
patch: q CaMeL Ty = current ; qr CaMeL Decomposition ( ) ;
rank: 181
score: 99.21893631784539
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( first CaMeL Iteration , objective ) ;
rank: 181
score: 99.13009643554688
patch: q CaMeL Ty ( residuals ) ; / / lm CaMeL Par = 0 ;
rank: 181
score: 99.10248272235577
patch: q CaMeL Ty . ; q CaMeL Ty ( residuals ) ;
rank: 181
score: 98.99335588727679
patch: q CaMeL Ty ( point ) ; update CaMeL Jacobian ( ) ;
rank: 181
score: 98.96604410807292
patch: q CaMeL Ty = residuals ( this . residuals ) ;
rank: 182
score: 99.21834891183036
patch: double [ ] old CaMeL X = new double [ cols ] ;
rank: 182
score: 99.16400146484375
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( $NUMBER$ ) ;
rank: 182
score: 99.1011962890625
patch: q CaMeL Ty ( residuals . get CaMeL Bytes ( ) ) ;
rank: 182
score: 99.02736253004808
patch: q CaMeL Ty = null ; q CaMeL Ty = $NUMBER$ ;
rank: 182
score: 98.99222819010417
patch: if ( first CaMeL Iteration && cost != 0 ) {
rank: 182
score: 98.96591622488839
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty -= residuals ;
rank: 183
score: 99.21717122395833
patch: if ( first CaMeL Iteration ) { update CaMeL Jacobian ( ) ; }
rank: 183
score: 99.16393280029297
patch: q CaMeL Ty ( residuals , old CaMeL Res , lm CaMeL Dir ) ;
rank: 183
score: 99.12990208675987
patch: = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor : }
rank: 183
score: 99.1010409268466
patch: q CaMeL Ty . q CaMeL Ty ( ) ;
rank: 183
score: 99.05255596454327
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . ;
rank: 183
score: 98.99286358173077
patch: q CaMeL Ty = q CaMeL Ty [ residuals ] ; ;
rank: 183
score: 98.99167306082589
patch: q CaMeL Ty ( $STRING$ ) ; update CaMeL Jacobian ( ) ;
rank: 183
score: 98.9649658203125
patch: q CaMeL Ty [ - 1 ] = residuals ;
rank: 184
score: 99.21674262152777
patch: delta = x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor :
rank: 184
score: 99.16265869140625
patch: q CaMeL Ty ( ) ; double x CaMeL Norm = 0 . 0 ;
rank: 184
score: 99.13369516225961
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = this ;
rank: 184
score: 99.05249633789063
patch: q CaMeL Ty ( 1 , residuals ) ;
rank: 184
score: 99.02456430288461
patch: q CaMeL Ty = residuals ( ) ; q CaMeL Ty ;
rank: 184
score: 98.99285419170673
patch: ( residuals ) ; q CaMeL Ty = q CaMeL Ty ;
rank: 184
score: 98.991650390625
patch: q CaMeL Ty ( $STRING$ , objective ) ;
rank: 184
score: 98.96260288783482
patch: q CaMeL Ty = residuals ; } q CaMeL Ty = true ;
rank: 185
score: 99.21664767795139
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , jacobian ) ;
rank: 185
score: 99.13362121582031
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = 0 . 0 ;
rank: 185
score: 99.12937418619792
patch: q CaMeL Ty ( point , x CaMeL Norm ) ;
rank: 185
score: 99.05182756696429
patch: q CaMeL Ty ( residuals . residuals , residuals . residuals ) ;
rank: 185
score: 99.02316518930289
patch: q CaMeL Ty q CaMeL Ty ( residuals ) ; ) ;
rank: 185
score: 98.99200994318181
patch: q CaMeL Ty ( ) ; q CaMeL Ty ;
rank: 185
score: 98.991455078125
patch: q CaMeL Ty ( residuals , cost ) ;
rank: 186
score: 99.162060546875
patch: q CaMeL Ty ( ) ; x CaMeL Norm += jac CaMeL Norm ;
rank: 186
score: 99.1322998046875
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( true ) ;
rank: 186
score: 99.09894268329327
patch: q CaMeL Ty ( residuals ) . set ( residuals ) ;
rank: 186
score: 98.99122837611607
patch: q CaMeL Ty ( previous ) ; qr CaMeL Decomposition ( ) ;
rank: 187
score: 99.21597450657895
patch: q CaMeL Ty [ 0 ] = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 187
score: 99.09855433872768
patch: q CaMeL Ty -= residuals ) ; q CaMeL Ty ( ) ;
rank: 187
score: 98.9900410970052
patch: q CaMeL Ty ( point , first CaMeL Iteration ) ;
rank: 187
score: 98.96068464006696
patch: q CaMeL Ty = ( q CaMeL Ty ( $NUMBER$ ) ) ;
rank: 188
score: 99.21531168619792
patch: q CaMeL Ty ++ ; qr CaMeL Decomposition ( ) ;
rank: 188
score: 99.16163987379808
patch: q CaMeL Ty ( ) . qr CaMeL Decomposition ( ) ;
rank: 188
score: 99.13187408447266
patch: q CaMeL Ty [ residuals ] = initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 188
score: 99.0980733235677
patch: q CaMeL Ty ( residuals ( residuals ) residuals ) ;
rank: 188
score: 98.98984375
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( ) ; }
rank: 189
score: 99.1609878540039
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = diag CaMeL R ;
rank: 189
score: 99.13157653808594
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter = 0 ;
rank: 189
score: 99.12747531467014
patch: lm CaMeL Par = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair , objective ) ;
rank: 189
score: 99.04920450846355
patch: q CaMeL Ty += q CaMeL Ty [ 0 ] ;
rank: 189
score: 99.0194979580966
patch: q CaMeL Ty = q CaMeL Ty ; ) ;
rank: 189
score: 98.98951939174107
patch: try { update CaMeL Residuals CaMeL And CaMeL Cost ( residuals ) ;
rank: 189
score: 98.95982666015625
patch: q CaMeL Ty = residuals ( true ) ;
rank: 190
score: 99.2135009765625
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , 0 ) ;
rank: 190
score: 99.1608527688419
patch: = current ; x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 190
score: 99.12649972098214
patch: q CaMeL Ty ( residuals , 0 , x CaMeL Norm ) ;
rank: 190
score: 99.09669078480114
patch: q CaMeL Ty ( ) . ( residuals ) ;
rank: 190
score: 99.01949055989583
patch: q CaMeL Ty ( residuals . null ) ; ) ;
rank: 190
score: 98.9908955891927
patch: q CaMeL Ty = q CaMeL Ty ( true ) ;
rank: 190
score: 98.98893229166667
patch: if ( true ) { update CaMeL Jacobian ( ) ;
rank: 191
score: 99.21310906661184
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , 0 ) ;
rank: 191
score: 99.16078694661458
patch: q CaMeL Ty ( residuals , x CaMeL Norm ) ; qr CaMeL Decomposition ( ) ;
rank: 191
score: 99.09552873883929
patch: q CaMeL Ty ++ ; } q CaMeL Ty ( residuals ) ;
rank: 191
score: 99.04637799944196
patch: q CaMeL Ty ( residuals ) . double CaMeL Value ( ) ;
rank: 191
score: 99.01787860576923
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = (
rank: 191
score: 98.98919208233173
patch: q CaMeL Ty ( q CaMeL Ty ( $NUMBER$ ) ) ;
rank: 191
score: 98.98866489955357
patch: q CaMeL Ty ( diag ) ; qr CaMeL Decomposition ( ) ;
rank: 192
score: 99.21244303385417
patch: q CaMeL Ty ( ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ) ;
rank: 192
score: 99.16071520353618
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = this ;
rank: 192
score: 99.12548110064338
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += 0 . 0 ; }
rank: 192
score: 99.04581705729167
patch: q CaMeL Ty ( residuals ) ; } q CaMeL Ty ( ) ;
rank: 192
score: 99.01651000976562
patch: q CaMeL Ty ( residuals . length - 1 ) ;
rank: 192
score: 98.98805588942308
patch: q CaMeL Ty = q CaMeL Ty [ $NUMBER$ ) ] ;
rank: 192
score: 98.98759765625
patch: q CaMeL Ty ( 0 , 0 ) ;
rank: 192
score: 98.95639038085938
patch: q CaMeL Ty = residuals q CaMeL Ty ( ) ;
rank: 193
score: 99.21159532335069
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous , diag ) ;
rank: 193
score: 99.1305923461914
patch: q CaMeL Ty ( residuals , residuals ) ; qr CaMeL Decomposition ( ) ;
rank: 193
score: 99.12538364955357
patch: = current ; update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 193
score: 99.04530334472656
patch: q CaMeL Ty [ residuals ] = current . get CaMeL Parent ( ) ;
rank: 193
score: 98.98744419642857
patch: { update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 193
score: 98.9559326171875
patch: q CaMeL Ty = System . value CaMeL Of ( residuals ) ;
rank: 194
score: 99.16013470818015
patch: ( ) ; x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 194
score: 99.13052368164062
patch: increment CaMeL Iterations CaMeL Counter ( ) ; boolean first CaMeL Iteration = false ;
rank: 194
score: 99.0935391512784
patch: = new ; q CaMeL Ty ( residuals ) ;
rank: 194
score: 99.044287109375
patch: q CaMeL Ty [ ) ] = q CaMeL Ty [ 0 ] ;
rank: 194
score: 99.01510854867789
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = ;
rank: 194
score: 98.98742065429687
patch: this . q CaMeL Ty ( residuals ) ;
rank: 194
score: 98.98719200721153
patch: q CaMeL Ty = this ; q CaMeL Ty = residuals ;
rank: 194
score: 98.95550537109375
patch: q CaMeL Ty ( residuals , $NUMBER$ , residuals ) ;
rank: 195
score: 99.15971823299633
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( residuals ) ;
rank: 195
score: 99.12832641601562
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) lm CaMeL Dir ;
rank: 195
score: 99.12520559210526
patch: = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor : ;
rank: 195
score: 99.04423384232955
patch: q CaMeL Ty ( residuals 1 , residuals ) ;
rank: 195
score: 98.98645833333333
patch: if ( ! first CaMeL Iteration ) { qr CaMeL Decomposition ( ) ;
rank: 196
score: 99.21022661994485
patch: q CaMeL Ty = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point ;
rank: 196
score: 99.12796223958334
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( $STRING$ ) ;
rank: 196
score: 99.09251990685097
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ ;
rank: 196
score: 99.0148037997159
patch: q CaMeL Ty = residuals . residuals ( ) ;
rank: 196
score: 98.98663940429688
patch: q CaMeL Ty ( this , residuals ) ;
rank: 196
score: 98.98623046875
patch: q CaMeL Ty ( delta , objective ) ;
rank: 196
score: 98.95402018229167
patch: q CaMeL Ty ( residuals ) ; if ( residuals )
rank: 197
score: 99.20966796875
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current = current ;
rank: 197
score: 99.15865652901786
patch: q CaMeL Ty ( residuals , x CaMeL Norm , sum ) ;
rank: 197
score: 99.12772914341518
patch: q CaMeL Ty ( ) ; int first CaMeL Iteration = 0 ;
rank: 197
score: 99.09175931490384
patch: q CaMeL Ty $NUMBER$ . q CaMeL Ty ( residuals ) ;
rank: 197
score: 99.0439453125
patch: q CaMeL Ty [ 0 ] = current . clone ( ) ;
rank: 197
score: 99.01393636067708
patch: q CaMeL Ty ( residuals ( residuals residuals ) ) ;
rank: 197
score: 98.9857177734375
patch: q CaMeL Ty ( ) ; q CaMeL Ty = 0 ;
rank: 197
score: 98.95332554408482
patch: q CaMeL Ty ( ) ; final q CaMeL Ty ( ) ;
rank: 198
score: 99.12737630208333
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par ( residuals ) ;
rank: 198
score: 99.09121469350961
patch: q CaMeL Ty ( ; q CaMeL Ty ( residuals ) ;
rank: 198
score: 99.04315740411931
patch: q CaMeL Ty [ 0 ] = residuals 1 ;
rank: 198
score: 98.98424353966347
patch: q CaMeL Ty = q CaMeL Ty . residuals ( ) ;
rank: 198
score: 98.95270244891827
patch: q CaMeL Ty = false ; q CaMeL Ty = true ;
rank: 199
score: 99.20880485983456
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = do CaMeL Optimize ( ) ;
rank: 199
score: 99.1270751953125
patch: res = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 199
score: 99.0908203125
patch: q CaMeL Ty ++ ) ; q CaMeL Ty ( residuals ) ;
rank: 199
score: 99.04261016845703
patch: [ 0 ] = System . current CaMeL Time CaMeL Millis ( ) ; }
rank: 199
score: 99.01273600260417
patch: q CaMeL Ty = q CaMeL Ty .
rank: 199
score: 98.9843241373698
patch: if ( increment CaMeL Iterations CaMeL Counter ( ) ) {
rank: 199
score: 98.98391287667411
patch: q CaMeL Ty = this ;
rank: 200
score: 99.15740966796875
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( 1 ) ;
rank: 200
score: 99.1255126953125
patch: vector = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point ;
rank: 200
score: 99.1229248046875
patch: delta = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : max ;
rank: 200
score: 99.09071858723958
patch: q CaMeL Ty . residuals ( residuals , residuals ) ;
rank: 200
score: 99.0124178799716
patch: q CaMeL Ty ( residuals [ $NUMBER$ ] ) ;
rank: 200
score: 98.98357747395833
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( null ) ;
rank: 200
score: 98.9825439453125
patch: q CaMeL Ty = true ; q CaMeL Ty ( ) ;
rank: 200
score: 98.95232282366071
patch: q CaMeL Ty = true ; q CaMeL Ty = null ; }
rank: 201
score: 99.20555922564338
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( $NUMBER$ , objective ) ;
rank: 201
score: 99.15728759765625
patch: q CaMeL Ty ( residuals , delta , diag CaMeL R ) ;
rank: 201
score: 99.12513020833333
patch: q CaMeL Ty ( residuals , ) ; qr CaMeL Decomposition ( ) ;
rank: 201
score: 99.12166101792279
patch: lm CaMeL Par = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 201
score: 99.09049987792969
patch: q CaMeL Ty ( residuals , ;
rank: 201
score: 99.0422607421875
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals ) ; }
rank: 201
score: 99.01200045072116
patch: q CaMeL Ty = ) ; q CaMeL Ty = $NUMBER$ ;
rank: 201
score: 98.9835433959961
patch: q CaMeL Ty ( point ) ;
rank: 201
score: 98.98119007457386
patch: q CaMeL Ty = new short [ residuals ] ;
rank: 201
score: 98.95136369977679
patch: q CaMeL Ty = ( q CaMeL Ty ( false ) ) ;
rank: 202
score: 99.15721371299342
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( first CaMeL Iteration ) ;
rank: 202
score: 99.12472098214286
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 202
score: 99.09015764508929
patch: q CaMeL Ty [ residuals ] = new double [ residuals ] ;
rank: 202
score: 99.04210316051136
patch: q CaMeL Ty ( residuals $NUMBER$ , residuals ) ;
rank: 202
score: 99.01165301983173
patch: q CaMeL Ty ; q CaMeL Ty ( residuals ) ; }
rank: 202
score: 98.98147583007812
patch: q CaMeL Ty ( lm CaMeL Par , residuals ) ;
rank: 202
score: 98.94894643930289
patch: q CaMeL Ty ( q CaMeL Ty , residuals ) ; }
rank: 203
score: 99.20465850830078
patch: q CaMeL Ty ( x CaMeL Norm ) ; x CaMeL Norm = 0 ;
rank: 203
score: 99.15719168526786
patch: q CaMeL Ty ( residuals ) ; old CaMeL Res = current ;
rank: 203
score: 99.12464904785156
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , point ;
rank: 203
score: 99.12101527622768
patch: q CaMeL Ty ( x CaMeL Norm , first CaMeL Iteration ) ;
rank: 203
score: 99.09007045200893
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ++ ; ;
rank: 203
score: 98.98118239182692
patch: q CaMeL Ty = residuals ; update CaMeL Jacobian ( ) ;
rank: 203
score: 98.9801358309659
patch: q CaMeL Ty ; q CaMeL Ty = this ;
rank: 203
score: 98.94813755580357
patch: q CaMeL Ty ( residuals ) = ( q CaMeL Ty ) ;
rank: 204
score: 99.12397112165179
patch: x CaMeL Norm = Math . abs ( x CaMeL Norm ) ;
rank: 204
score: 99.12082088694854
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += 0 . 0 ; }
rank: 204
score: 99.08993094308036
patch: q CaMeL Ty . residuals ( residuals ) ; residuals ( ) ;
rank: 204
score: 99.04116385323661
patch: q CaMeL Ty [ 0 ] = new double [ residuals ] ;
rank: 204
score: 99.01053873697917
patch: q CaMeL Ty q CaMeL Ty = q CaMeL Ty ;
rank: 204
score: 98.97977388822116
patch: q CaMeL Ty = q CaMeL Ty [ 0 ] ; }
rank: 205
score: 99.2045166015625
patch: if ( first CaMeL Iteration ) { x CaMeL Norm = 0 ; }
rank: 205
score: 99.12376185825893
patch: q CaMeL Ty ( false ) ; qr CaMeL Decomposition ( ) ;
rank: 205
score: 99.12018694196429
patch: q CaMeL Ty ( point , objective , x CaMeL Norm ) ;
rank: 205
score: 99.08903285435268
patch: q CaMeL Ty ( ) . residuals ( residuals , residuals ) ;
rank: 205
score: 99.0087178548177
patch: q CaMeL Ty ( residuals ) ; residuals = null ;
rank: 205
score: 98.98057047526042
patch: q CaMeL Ty ( lm CaMeL Par , objective ) ;
rank: 205
score: 98.97970581054688
patch: q CaMeL Ty = q CaMeL Ty ( ) ; ;
rank: 206
score: 99.20390881990132
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = permutation ;
rank: 206
score: 99.15488106863839
patch: q CaMeL Ty ( permutation ) ; qr CaMeL Decomposition ( ) ;
rank: 206
score: 99.12358856201172
patch: q CaMeL Ty ( ) ; double first CaMeL Iteration = 0 . 0 ;
rank: 206
score: 99.11981201171875
patch: while ( false ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 206
score: 99.08899797712054
patch: q CaMeL Ty [ ) ] = q CaMeL Ty ( ) ;
rank: 206
score: 99.0073575106534
patch: q CaMeL Ty = residuals ; q CaMeL Ty ;
rank: 206
score: 98.98048909505208
patch: q CaMeL Ty ( residuals , 0 , 0 ) ;
rank: 206
score: 98.97955791766827
patch: q CaMeL Ty ( q CaMeL Ty ( 1 ) ) ;
rank: 206
score: 98.94719587053571
patch: q CaMeL Ty = true ; q CaMeL Ty = true ; }
rank: 207
score: 99.20343017578125
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , point ) ;
rank: 207
score: 99.15456717354911
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = 1 ;
rank: 207
score: 99.08860270182292
patch: q CaMeL Ty [ q CaMeL Ty ] = residuals ;
rank: 207
score: 99.04039001464844
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += current . length ;
rank: 207
score: 98.98028157552083
patch: if ( qr CaMeL Decomposition ( ) ) update CaMeL Jacobian ( ) ;
rank: 207
score: 98.97945462740384
patch: q CaMeL Ty = q CaMeL Ty [ 1 ) ] ;
rank: 207
score: 98.94708251953125
patch: q CaMeL Ty [ 1 ] = residuals ;
rank: 208
score: 99.20258924696181
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation , objective ) ;
rank: 208
score: 99.15385219029018
patch: qr CaMeL Decomposition ( ) ;
rank: 208
score: 99.12320963541667
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( false ) ;
rank: 208
score: 99.11831868489584
patch: x CaMeL Norm = 0 . 0 ; update CaMeL Jacobian ( ) ;
rank: 208
score: 99.08756197415866
patch: q CaMeL Ty [ ) ] = q CaMeL Ty ) ;
rank: 208
score: 99.04034423828125
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals ) ; ;
rank: 208
score: 99.0069580078125
patch: q CaMeL Ty ( residuals , ) ; ) ;
rank: 208
score: 98.97823079427083
patch: q CaMeL Ty [ 0 ] [ 0 ] ++ ;
rank: 209
score: 99.20203921669408
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; x CaMeL Norm = null ;
rank: 209
score: 99.15360201322116
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = ) ;
rank: 209
score: 99.1224609375
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation ) ;
rank: 209
score: 99.11690266927083
patch: increment CaMeL Iterations CaMeL Counter ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 209
score: 99.08725411551339
patch: q CaMeL Ty [ 0 ] ; q CaMeL Ty ( ) ;
rank: 209
score: 98.97950236002605
patch: q CaMeL Ty ( first CaMeL Iteration , previous ) ;
rank: 209
score: 98.97813063401442
patch: q CaMeL Ty = q CaMeL Ty [ residuals ) ) ;
rank: 209
score: 98.94602457682292
patch: q CaMeL Ty = residuals ( residuals ) - $NUMBER$ ;
rank: 210
score: 99.15357317243304
patch: qr CaMeL Decomposition ( ) ; boolean first CaMeL Iteration = true ;
rank: 210
score: 99.12123209635416
patch: vector = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 210
score: 99.03695242745536
patch: q CaMeL Ty = q CaMeL Ty [ 0 ] . residuals ;
rank: 210
score: 99.00599254261364
patch: q CaMeL Ty ( residuals , residuals , ) ;
rank: 210
score: 98.97884114583333
patch: m = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 210
score: 98.9454345703125
patch: q CaMeL Ty = residuals ; q CaMeL Ty = true ; ;
rank: 211
score: 99.20158555772569
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ; ;
rank: 211
score: 99.15337371826172
patch: q CaMeL Ty ( residuals ) ; this . first CaMeL Iteration = false ;
rank: 211
score: 99.1207275390625
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current - cols ] ;
rank: 211
score: 99.08522727272727
patch: q CaMeL Ty ( residuals ) ; * ) ;
rank: 211
score: 99.03688151041666
patch: q CaMeL Ty += q CaMeL Ty ; q CaMeL Ty ( ) ;
rank: 211
score: 98.97691243489584
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; / *
rank: 211
score: 98.94395228794643
patch: q CaMeL Ty [ 0 ] = residuals ; q CaMeL Ty ;
rank: 212
score: 99.20158305921052
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this , point , objective ) ;
rank: 212
score: 99.1533562155331
patch: q CaMeL Ty ( residuals ) ; double x CaMeL Norm = 0 . 0 ;
rank: 212
score: 99.11974334716797
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current [ rows ] ;
rank: 212
score: 99.08505684988839
patch: q CaMeL Ty . ) . q CaMeL Ty ( residuals ) ;
rank: 212
score: 99.03677978515626
patch: q CaMeL Ty [ 0 ] = this ;
rank: 212
score: 99.0050048828125
patch: q CaMeL Ty ( q CaMeL Ty ) ; ) ;
rank: 212
score: 98.9772198016827
patch: q CaMeL Ty = this ; q CaMeL Ty = false ;
rank: 212
score: 98.976513671875
patch: try { boolean first CaMeL Iteration = true ;
rank: 213
score: 99.20123291015625
patch: q CaMeL Ty = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ) ;
rank: 213
score: 99.15260225183823
patch: q CaMeL Ty ( residuals ) ; this . q CaMeL Ty ( residuals ) ;
rank: 213
score: 99.11402723524306
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm , diag CaMeL R ) ;
rank: 213
score: 99.03668212890625
patch: q CaMeL Ty ( residuals - 1 , residuals ) ;
rank: 213
score: 98.97545369466145
patch: q CaMeL Ty ( residuals ) + first CaMeL Iteration ;
rank: 213
score: 98.97520094651442
patch: q CaMeL Ty ( ) ; q CaMeL Ty = 1 ;
rank: 213
score: 98.94181002103366
patch: q CaMeL Ty = false ; q CaMeL Ty = false ;
rank: 214
score: 99.15250396728516
patch: q CaMeL Ty ( old CaMeL X , delta , diag CaMeL R ) ;
rank: 214
score: 99.03648158482143
patch: q CaMeL Ty [ residuals ] = current . residuals ( ) ;
rank: 214
score: 98.97529820033482
patch: q CaMeL Ty ( residuals , objective , first CaMeL Iteration ) ;
rank: 214
score: 98.97373610276442
patch: q CaMeL Ty = this ; q CaMeL Ty = $NUMBER$ ;
rank: 215
score: 99.19994354248047
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = permutation [ 0 ] ;
rank: 215
score: 99.15141745174633
patch: q CaMeL Ty ( residuals , Math . sqrt ( x CaMeL Norm ) ) ;
rank: 215
score: 99.11765834263393
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ;
rank: 215
score: 99.11288791232639
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 215
score: 99.08259800502232
patch: = q CaMeL Ty . ; q CaMeL Ty ( residuals ) ;
rank: 215
score: 99.03533935546875
patch: q CaMeL Ty ( residuals ( double ) q CaMeL Ty ) ;
rank: 215
score: 99.00215970552884
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty residuals ;
rank: 215
score: 98.97349039713542
patch: q CaMeL Ty = q CaMeL Ty [ ) ) ;
rank: 215
score: 98.94085693359375
patch: q CaMeL Ty = residuals ( true , residuals ) ;
rank: 216
score: 99.19988335503473
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this , objective ) ;
rank: 216
score: 99.08175893930289
patch: q CaMeL Ty [ q CaMeL Ty ) ] = null ;
rank: 216
score: 99.03499348958333
patch: q CaMeL Ty ( ) ; q CaMeL Ty += q CaMeL Ty ;
rank: 216
score: 99.0012676532452
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty $NUMBER$ ;
rank: 216
score: 98.97393120659723
patch: this . update CaMeL Jacobian ( ) ;
rank: 216
score: 98.97336832682292
patch: q CaMeL Ty = q CaMeL Ty ( this ) ;
rank: 217
score: 99.19976128472223
patch: delta = x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 217
score: 99.11241048177084
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ; }
rank: 217
score: 99.03492736816406
patch: q CaMeL Ty ( ) ; this . q CaMeL Ty ( ) ; }
rank: 217
score: 99.00062144886364
patch: q CaMeL Ty ( residuals ) ; / / }
rank: 217
score: 98.93961879185268
patch: q CaMeL Ty = true ; q CaMeL Ty = false ; }
rank: 218
score: 99.1494140625
patch: q CaMeL Ty ( residuals ) ; } lm CaMeL Par = 0 ;
rank: 218
score: 99.11540222167969
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current . ( ) ;
rank: 218
score: 99.11089618389423
patch: lm CaMeL Par = current ; update CaMeL Jacobian ( ) ;
rank: 218
score: 99.03473307291667
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals $NUMBER$ ) ;
rank: 218
score: 99.00040893554687
patch: else ; q CaMeL Ty ( residuals ) ;
rank: 218
score: 98.97255859375
patch: q CaMeL Ty ( residuals ) ; if ( cost != 0 ) {
rank: 218
score: 98.93902033025569
patch: q CaMeL Ty = new String [ residuals ] ;
rank: 219
score: 99.19926452636719
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; return current ;
rank: 219
score: 99.14926629317434
patch: q CaMeL Ty ( residuals ) Vectorial CaMeL Point CaMeL Value CaMeL Pair current = this ;
rank: 219
score: 99.03460286458333
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty [ residuals ] ;
rank: 219
score: 99.00033569335938
patch: q CaMeL Ty ( ) ; for ( {
rank: 219
score: 98.97275954026442
patch: q CaMeL Ty = q CaMeL Ty ( ) ; break ;
rank: 219
score: 98.97255452473958
patch: q CaMeL Ty ( ) ; if ( true ) {
rank: 219
score: 98.93846546519886
patch: q CaMeL Ty = residuals ( residuals residuals ) ;
rank: 220
score: 99.19829358552632
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ; }
rank: 220
score: 99.07944899338942
patch: q CaMeL Ty = new double [ residuals * $NUMBER$ ] ;
rank: 220
score: 99.000244140625
patch: q CaMeL Ty q CaMeL Ty residuals ( residuals ) ;
rank: 220
score: 98.97257486979167
patch: q CaMeL Ty ( residuals , residuals , this ) ;
rank: 220
score: 98.972119140625
patch: q CaMeL Ty ( residuals , $NUMBER$ ) ;
rank: 220
score: 98.93838266225961
patch: q CaMeL Ty = ( q CaMeL Ty == null ) ;
rank: 221
score: 99.19577261117789
patch: q CaMeL Ty ( residuals [ 0 ] , objective ) ;
rank: 221
score: 99.14910016741071
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = current ;
rank: 221
score: 99.11398111979166
patch: q CaMeL Ty ( residuals ) ; int first CaMeL Iteration = 0 ;
rank: 221
score: 99.03345665564903
patch: q CaMeL Ty ( residuals , residuals [ 0 ] ) ;
rank: 221
score: 98.99945068359375
patch: q CaMeL Ty ( residuals . iterator ( ) ) ;
rank: 221
score: 98.93831380208333
patch: q CaMeL Ty = new long [ residuals ] ; }
rank: 222
score: 99.19408365885417
patch: q CaMeL Ty ( residuals [ 0 ] , first CaMeL Iteration ) ;
rank: 222
score: 99.14870779854911
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = null ;
rank: 222
score: 99.10927734375
patch: double first CaMeL Iteration = Math . sqrt ( x CaMeL Norm ) ;
rank: 222
score: 99.07914515904018
patch: = q CaMeL Ty ( residuals ) . get ( residuals ) ;
rank: 222
score: 98.97105823863636
patch: q CaMeL Ty = new byte [ residuals ] ;
rank: 222
score: 98.93811907087054
patch: q CaMeL Ty = new q CaMeL Ty ( residuals ) ; ;
rank: 223
score: 99.14863024259868
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = true ;
rank: 223
score: 99.11185128348214
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir ( ) ;
rank: 223
score: 99.07864718967014
patch: q CaMeL Ty . residuals ( ) ;
rank: 223
score: 99.0318374633789
patch: [ 0 ] = System . current CaMeL Time CaMeL Millis ( ) ; ;
rank: 223
score: 98.9983797940341
patch: ( residuals ) ; q CaMeL Ty ( ) ;
rank: 223
score: 98.9689208984375
patch: q CaMeL Ty ( residuals , null ) ;
rank: 223
score: 98.9374667080966
patch: q CaMeL Ty [ 0 ] = residuals ; }
rank: 224
score: 99.19194684709821
patch: q CaMeL Ty = Math . sqrt ( x CaMeL Norm ) ;
rank: 224
score: 99.14837646484375
patch: q CaMeL Ty ( residuals ) ; old CaMeL Res = 0 ;
rank: 224
score: 99.10830252511161
patch: q CaMeL Ty ( q CaMeL Ty ( ) , objective ) ;
rank: 224
score: 99.07802327473958
patch: q CaMeL Ty ( residuals ) ; return null ; }
rank: 224
score: 98.99794699928977
patch: q CaMeL Ty ( residuals ) ; return ) ;
rank: 224
score: 98.96807391826923
patch: q CaMeL Ty ) ; q CaMeL Ty residuals ( ) ;
rank: 224
score: 98.96767752511161
patch: q CaMeL Ty ( $NUMBER$ ) ; qr CaMeL Decomposition ( ) ;
rank: 225
score: 99.19120279947917
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = diag CaMeL R [ 0 ] ;
rank: 225
score: 99.14792767693015
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ; * /
rank: 225
score: 99.10813993566177
patch: increment CaMeL Iterations CaMeL Counter ( ) ; x CaMeL Norm = 0 . 0 ;
rank: 225
score: 99.07759094238281
patch: = new double [ residuals ] ;
rank: 225
score: 98.9976806640625
patch: q CaMeL Ty = ) ; q CaMeL Ty = this ;
rank: 225
score: 98.96708170572917
patch: q CaMeL Ty ( residuals , residuals , null ) ;
rank: 225
score: 98.96650913783482
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( true ) ;
rank: 225
score: 98.9366943359375
patch: result = q CaMeL Ty ( residuals ) ;
rank: 226
score: 99.19104721966912
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; if ( true )
rank: 226
score: 99.14756422776442
patch: q CaMeL Ty ( ) ; lm CaMeL Par = current ;
rank: 226
score: 99.11093575613839
patch: qr CaMeL Decomposition ( residuals ) ; qr CaMeL Decomposition ( ) ;
rank: 226
score: 99.10787624782986
patch: x CaMeL Norm = Math . max ( x CaMeL Norm , 0 . 0 ) ;
rank: 226
score: 99.0775655110677
patch: q CaMeL Ty ( residuals ) . ( residuals ) ;
rank: 226
score: 99.03163146972656
patch: q CaMeL Ty ( residuals ) ; ; q CaMeL Ty ( residuals ) ;
rank: 226
score: 98.99729567307692
patch: q CaMeL Ty ( residuals , q CaMeL Ty , ) ;
rank: 226
score: 98.96493094308036
patch: q CaMeL Ty ( previous ) ; update CaMeL Jacobian ( ) ;
rank: 226
score: 98.9360821063702
patch: q CaMeL Ty q CaMeL Ty ( q CaMeL Ty ) ;
rank: 227
score: 99.18999565972223
patch: ( new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ) ;
rank: 227
score: 99.1457455283717
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ;
rank: 227
score: 99.07661655970982
patch: q CaMeL Ty ++ ; * q CaMeL Ty ( residuals ) ;
rank: 227
score: 99.03150177001953
patch: q CaMeL Ty = q CaMeL Ty [ 0 ] . residuals ( ) ;
rank: 227
score: 98.96654334435097
patch: q CaMeL Ty = q CaMeL Ty [ 0 ] ; ;
rank: 227
score: 98.9635479266827
patch: if ( update CaMeL Jacobian ) qr CaMeL Decomposition ( ) ;
rank: 228
score: 99.18993422564338
patch: delta = ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL
rank: 228
score: 99.14545440673828
patch: q CaMeL Ty ( ) ; x CaMeL Norm = 0 . 0 ; }
rank: 228
score: 99.07657564603366
patch: q CaMeL Ty = ; q CaMeL Ty ( residuals ) ;
rank: 228
score: 99.031494140625
patch: q CaMeL Ty ( residuals , residuals . residuals ) ;
rank: 228
score: 98.99683634440105
patch: q CaMeL Ty ( residuals [ 0 ] 1 ) ;
rank: 228
score: 98.962744140625
patch: current = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 228
score: 98.93603515625
patch: q CaMeL Ty ( ) ; q CaMeL Ty += true ;
rank: 229
score: 99.11007080078124
patch: delta = ( double [ ] ) current ;
rank: 229
score: 99.07631613991477
patch: q CaMeL Ty ( residuals ) ( residuals ) ;
rank: 229
score: 99.03139241536458
patch: [ 0 ] = old CaMeL X [ 0 ] ;
rank: 229
score: 98.99680786132812
patch: q CaMeL Ty ( residuals , 1 ) ;
rank: 229
score: 98.96563251201923
patch: q CaMeL Ty residuals = q CaMeL Ty [ residuals ] ;
rank: 229
score: 98.9622802734375
patch: q CaMeL Ty ( residuals , this ) ;
rank: 230
score: 99.18659210205078
patch: if ( first CaMeL Iteration && first CaMeL Iteration || first CaMeL Iteration ) {
rank: 230
score: 99.14398552389706
patch: = 0 ; x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 230
score: 99.1083475748698
patch: delta = ( double [ ] ) 0 . 0 ;
rank: 230
score: 99.07617950439453
patch: q CaMeL Ty += residuals ) ;
rank: 230
score: 99.03093719482422
patch: q CaMeL Ty ( residuals residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 230
score: 98.99680739182692
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ; ;
rank: 230
score: 98.96514892578125
patch: q CaMeL Ty [ residuals ] [ residuals ] ++ ;
rank: 230
score: 98.96168736049107
patch: if ( first CaMeL Iteration && qr CaMeL Decomposition ( ) ) {
rank: 231
score: 99.18636745876736
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current , permutation ) ;
rank: 231
score: 99.14331926618304
patch: q CaMeL Ty ( x CaMeL Norm , delta , diag ) ;
rank: 231
score: 99.10790252685547
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , current ;
rank: 231
score: 99.076171875
patch: = residuals ( residuals ) ;
rank: 231
score: 98.9959716796875
patch: q CaMeL Ty = residuals ; q CaMeL Ty ++ ;
rank: 231
score: 98.96152169363839
patch: q CaMeL Ty ( objective ) ; qr CaMeL Decomposition ( ) ;
rank: 232
score: 99.14210728236607
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = ) ;
rank: 232
score: 99.10753631591797
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , } ;
rank: 232
score: 99.07599748883929
patch: q CaMeL Ty = new double [ q CaMeL Ty ] ; ;
rank: 232
score: 98.99584282769098
patch: q CaMeL Ty = residuals . null ;
rank: 232
score: 98.961181640625
patch: q CaMeL Ty ( residuals , objective , residuals ) ;
rank: 232
score: 98.93402862548828
patch: q CaMeL Ty ( ) ; }
rank: 233
score: 99.18419053819444
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , cols ] ) ;
rank: 233
score: 99.14209856305804
patch: q CaMeL Ty ( residuals ) ; do CaMeL Optimize ( ) ;
rank: 233
score: 99.07543073381696
patch: q CaMeL Ty 1 ( ) ; q CaMeL Ty ( ) ;
rank: 233
score: 99.03028157552083
patch: q CaMeL Ty [ 0 ] = old CaMeL X [ 1 ] ;
rank: 233
score: 98.995361328125
patch: q CaMeL Ty = 0 ; q CaMeL Ty = $NUMBER$ ;
rank: 233
score: 98.96299391526442
patch: q CaMeL Ty = new int [ residuals * residuals ] ;
rank: 233
score: 98.93312581380208
patch: q CaMeL Ty = ( byte [ ] ) residuals ;
rank: 234
score: 99.10521697998047
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current . ( ) ;
rank: 234
score: 99.07508196149554
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals ;
rank: 234
score: 98.99400745738636
patch: q CaMeL Ty ; q CaMeL Ty = residuals ;
rank: 234
score: 98.96273803710938
patch: q CaMeL Ty ( q CaMeL Ty , $NUMBER$ ) ;
rank: 234
score: 98.95960489908855
patch: q CaMeL Ty [ first CaMeL Iteration ] = current ;
rank: 235
score: 99.18392508370536
patch: q CaMeL Ty ( residuals , residuals , x CaMeL Norm ) ;
rank: 235
score: 99.14065115792411
patch: q CaMeL Ty ( old CaMeL Res , delta , diag ) ;
rank: 235
score: 99.10500759548611
patch: x CaMeL Norm = 0 . 0 ;
rank: 235
score: 99.1019287109375
patch: boolean first CaMeL Iteration = Math . sqrt ( x CaMeL Norm ) ;
rank: 235
score: 99.07481166294643
patch: = q CaMeL Ty ; q CaMeL Ty ( residuals ) ; ;
rank: 235
score: 99.02955040564903
patch: q CaMeL Ty ( q CaMeL Ty [ residuals ] ) ;
rank: 235
score: 98.95867919921875
patch: q CaMeL Ty ( residuals ) ; try
rank: 235
score: 98.93271891276042
patch: q CaMeL Ty = residuals ( 0 , residuals ) ;
rank: 236
score: 99.10285949707031
patch: = ( ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ) ;
rank: 236
score: 99.07463727678571
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) . ;
rank: 236
score: 99.029443359375
patch: q CaMeL Ty ( 0 ) ; q CaMeL Ty ( 0 ) ;
rank: 236
score: 98.96202503551136
patch: q CaMeL Ty = q CaMeL Ty ) ; ;
rank: 236
score: 98.9576083096591
patch: if ( true ) update CaMeL Jacobian ( ) ;
rank: 237
score: 99.18325805664062
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous [ 0 ] = current ;
rank: 237
score: 99.10269368489584
patch: delta = Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 237
score: 99.10129681755515
patch: = ( double [ ] ) update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 237
score: 99.07308523995536
patch: q CaMeL Ty = new ) ; q CaMeL Ty ( ) ;
rank: 237
score: 99.0294189453125
patch: q CaMeL Ty [ 0 ] = residuals . residuals ( ) ;
rank: 237
score: 98.99110107421875
patch: q CaMeL Ty ( residuals ) ; System }
rank: 237
score: 98.95724487304688
patch: while ( true ) { qr CaMeL Decomposition ( ) ;
rank: 237
score: 98.9312235514323
patch: q CaMeL Ty = new float [ residuals ] ; }
rank: 238
score: 99.13826206752232
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = null ;
rank: 238
score: 99.10264485677084
patch: res = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 238
score: 99.07307572798295
patch: q CaMeL Ty ( residuals ) ; if ( ;
rank: 238
score: 99.02902657645089
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty *= 0 ;
rank: 238
score: 98.9571533203125
patch: { qr CaMeL Decomposition ( ) ; qr CaMeL Decomposition ( ) ;
rank: 238
score: 98.93081665039062
patch: q CaMeL Ty = residuals ( ) ) ;
rank: 239
score: 99.18323432074652
patch: = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : 1 ;
rank: 239
score: 99.10255650111607
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) this ;
rank: 239
score: 99.0730313387784
patch: q CaMeL Ty ( residuals ) residuals ( ) ;
rank: 239
score: 99.02860260009766
patch: q CaMeL Ty = System . current CaMeL Time CaMeL Millis ( ) ; ;
rank: 239
score: 98.95697428385417
patch: if ( first CaMeL Iteration && first CaMeL Iteration && first CaMeL Iteration )
rank: 240
score: 99.18280707465277
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous , 0 ) ;
rank: 240
score: 99.13783023231908
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = false ;
rank: 240
score: 99.099853515625
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ,
rank: 240
score: 99.07264200846355
patch: = q CaMeL Ty ( residuals ) ; if ( ;
rank: 240
score: 99.02818603515625
patch: q CaMeL Ty ( residuals - 1 ) ;
rank: 240
score: 98.98837280273438
patch: q CaMeL Ty ( residuals . null ( ) ) ;
rank: 240
score: 98.96133422851562
patch: q CaMeL Ty ; q CaMeL Ty ( $NUMBER$ ) ;
rank: 240
score: 98.95689697265625
patch: q CaMeL Ty ( lm CaMeL Par ) ;
rank: 241
score: 99.07159423828125
patch: q CaMeL Ty [ residuals ) ] = residuals ) ;
rank: 241
score: 99.02716064453125
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty . residuals = residuals ;
rank: 241
score: 98.9871493252841
patch: q CaMeL Ty ( residuals ) ; ) ) ;
rank: 241
score: 98.95894368489583
patch: q CaMeL Ty ( residuals , residuals , $NUMBER$ ) ;
rank: 241
score: 98.95635431463069
patch: q CaMeL Ty = qr CaMeL Decomposition ( ) ;
rank: 242
score: 99.13668387276786
patch: update CaMeL Jacobian ( ) ; boolean first CaMeL Iteration = true ;
rank: 242
score: 99.09890747070312
patch: increment CaMeL Iterations CaMeL Counter ( ) ; int first CaMeL Iteration = 0 ;
rank: 242
score: 99.07106711647727
patch: q CaMeL Ty ++ ; residuals ( residuals ) ;
rank: 242
score: 99.02701241629464
patch: q CaMeL Ty [ 0 ] = new Double ( residuals ) ;
rank: 242
score: 98.95823317307692
patch: q CaMeL Ty residuals = q CaMeL Ty [ 0 ] ;
rank: 242
score: 98.92755126953125
patch: q CaMeL Ty [ $NUMBER$ ] = residuals ( ) ;
rank: 243
score: 99.18128119574652
patch: q CaMeL Ty = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation ) ;
rank: 243
score: 99.13627406529018
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = this ;
rank: 243
score: 99.098876953125
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point .
rank: 243
score: 99.09626600477431
patch: = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : point ;
rank: 243
score: 99.07018103966347
patch: q CaMeL Ty . q CaMeL Ty ( residuals ) ; }
rank: 243
score: 99.02639770507812
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty -= q CaMeL Ty ;
rank: 243
score: 98.98558553059895
patch: q CaMeL Ty ( residuals , residuals . $NUMBER$ ) ;
rank: 243
score: 98.95811110276442
patch: q CaMeL Ty = q CaMeL Ty ( - 1 ) ;
rank: 243
score: 98.95564488002232
patch: boolean first CaMeL Iteration = true ; qr CaMeL Decomposition ( ) ;
rank: 243
score: 98.92715219350961
patch: q CaMeL Ty = false ; q CaMeL Ty = null ;
rank: 244
score: 99.09856770833333
patch: res = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) point ;
rank: 244
score: 99.06982421875
patch: q CaMeL Ty ++ ; q CaMeL Ty ( residuals ) ; }
rank: 244
score: 98.98529052734375
patch: q CaMeL Ty ( residuals . trim ( ) ) ;
rank: 244
score: 98.95766038161058
patch: q CaMeL Ty ) ; q CaMeL Ty ( true ) ;
rank: 244
score: 98.95521647135416
patch: q CaMeL Ty ( residuals ) ; else first CaMeL Iteration = true ;
rank: 244
score: 98.9267578125
patch: q CaMeL Ty = residuals ( q CaMeL Ty ) ) ;
rank: 245
score: 99.18011474609375
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( ) ; if ( first CaMeL Iteration ) {
rank: 245
score: 99.13583984375
patch: ( ) ; qr CaMeL Decomposition ( ) ;
rank: 245
score: 99.09843226841518
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current ;
rank: 245
score: 99.06938825334821
patch: q CaMeL Ty ( residuals ) . residuals ( residuals ) ; ;
rank: 245
score: 98.98424183238636
patch: q CaMeL Ty = ) ; q CaMeL Ty ;
rank: 245
score: 98.95602651742789
patch: q CaMeL Ty = ) ; q CaMeL Ty = null ;
rank: 245
score: 98.9267578125
patch: q CaMeL Ty [ $NUMBER$ ] ( q CaMeL Ty ) ;
rank: 246
score: 99.17997233072917
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair = current ;
rank: 246
score: 99.13579559326172
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = jac CaMeL Norm ;
rank: 246
score: 99.09827473958333
patch: res = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 246
score: 99.09447224934895
patch: = 0 ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 246
score: 99.0692626953125
patch: = new double [ residuals * $NUMBER$ ] ;
rank: 246
score: 99.02416120256696
patch: q CaMeL Ty ( residuals $NUMBER$ ) ; q CaMeL Ty ++ ;
rank: 246
score: 98.98373413085938
patch: q CaMeL Ty ( residuals , residuals residuals null ) ;
rank: 246
score: 98.9559326171875
patch: q CaMeL Ty residuals = q CaMeL Ty ( ) ;
rank: 246
score: 98.95394461495536
patch: q CaMeL Ty ( $NUMBER$ ) ; update CaMeL Jacobian ( ) ;
rank: 247
score: 99.09775015024039
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = this ;
rank: 247
score: 99.09354073660714
patch: q CaMeL Ty ( residuals + 0 , x CaMeL Norm ) ;
rank: 247
score: 99.06869741586539
patch: q CaMeL Ty ( residuals ( ) residuals ( ) ) ;
rank: 247
score: 98.9833984375
patch: q CaMeL Ty ( residuals ) ; return q CaMeL Ty ;
rank: 247
score: 98.95523775540866
patch: q CaMeL Ty = ( q CaMeL Ty - 0 ) ;
rank: 247
score: 98.95298258463542
patch: if ( first CaMeL Iteration && ! first CaMeL Iteration )
rank: 247
score: 98.92479529747597
patch: q CaMeL Ty ( ( double [ ] ) residuals ) ;
rank: 248
score: 99.17990112304688
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = first CaMeL Iteration ;
rank: 248
score: 99.13550821940105
patch: q CaMeL Ty ( residuals ) ; break ; * /
rank: 248
score: 99.09347098214286
patch: x CaMeL Norm += Math . sqrt ( x CaMeL Norm ) ;
rank: 248
score: 99.06838156960227
patch: = residuals ; q CaMeL Ty ( residuals ) ;
rank: 248
score: 99.02247837611607
patch: q CaMeL Ty [ residuals ] = current . clone ( ) ;
rank: 248
score: 98.98288302951389
patch: q CaMeL Ty = residuals = ) ;
rank: 248
score: 98.95486215444711
patch: q CaMeL Ty ( ) ; q CaMeL Ty ) ; ;
rank: 248
score: 98.95225172776442
patch: q CaMeL Ty ( residuals , update CaMeL Jacobian , ) ;
rank: 248
score: 98.92409104567308
patch: q CaMeL Ty ( residuals , q CaMeL Ty $NUMBER$ ) ;
rank: 249
score: 99.17986701516544
patch: if ( ! first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 249
score: 99.1352767944336
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = 0 . 0 ;
rank: 249
score: 99.09332275390625
patch: q CaMeL Ty ( ) ; lm CaMeL Par ( residuals ) ;
rank: 249
score: 99.02154134114583
patch: q CaMeL Ty ( true ) ; q CaMeL Ty ( true ) ;
rank: 249
score: 98.98211200420673
patch: q CaMeL Ty = 0 ; q CaMeL Ty = 0 ;
rank: 249
score: 98.9540546123798
patch: q CaMeL Ty = new q CaMeL Ty [ 1 ] ;
rank: 249
score: 98.95208333333333
patch: q CaMeL Ty ( residuals ) ; } qr CaMeL Decomposition ( ) ;
rank: 250
score: 99.17955780029297
patch: q CaMeL Ty ( residuals ) ; this . x CaMeL Norm = 0 ;
rank: 250
score: 99.13494873046875
patch: q CaMeL Ty ( residuals ) ; previous = 0 ;
rank: 250
score: 99.0968505859375
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( jacobian ) ;
rank: 250
score: 99.06614332932692
patch: q CaMeL Ty ( ) . ; residuals ( residuals ) ;
rank: 250
score: 99.02152506510417
patch: q CaMeL Ty ( residuals ( int ) residuals ) ;
rank: 250
score: 98.98153686523438
patch: q CaMeL Ty ( residuals [ 0 ] $NUMBER$ ) ;
rank: 250
score: 98.95181884765626
patch: q CaMeL Ty ( point , current ) ;
rank: 251
score: 99.13447788783482
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += $NUMBER$ ;
rank: 251
score: 99.06599934895833
patch: = new q CaMeL Ty ( residuals , residuals ) ;
rank: 251
score: 99.02101643880208
patch: q CaMeL Ty ( residuals 1 , residuals 1 ) ;
rank: 251
score: 98.95330810546875
patch: q CaMeL Ty = q CaMeL Ty = residuals ; ;
rank: 251
score: 98.92097981770833
patch: q CaMeL Ty = residuals ( residuals ) - residuals ;
rank: 252
score: 99.17854139539931
patch: q CaMeL Ty = current . new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 252
score: 99.06581333705357
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ) ; ;
rank: 252
score: 99.02068622295673
patch: q CaMeL Ty ( residuals [ 0 ] , residuals ) ;
rank: 252
score: 98.97974650065105
patch: q CaMeL Ty ( residuals . null - residuals ) ;
rank: 252
score: 98.95196063701923
patch: q CaMeL Ty ( ) ; q CaMeL Ty -= residuals ;
rank: 252
score: 98.95147298177083
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( ) ; else
rank: 253
score: 99.17778015136719
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair = new double [ cols ] ;
rank: 253
score: 99.13331821986607
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; ;
rank: 253
score: 99.0939208984375
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ) ;
rank: 253
score: 99.0654805501302
patch: q CaMeL Ty ( ) ; ; residuals ( ) ;
rank: 253
score: 99.0203145345052
patch: [ 0 ] = q CaMeL Ty ( residuals ) ;
rank: 253
score: 98.97956986860795
patch: q CaMeL Ty ( residuals q CaMeL Ty ) ;
rank: 253
score: 98.951904296875
patch: q CaMeL Ty = ( q CaMeL Ty == 0 ) ;
rank: 253
score: 98.92042032877605
patch: q CaMeL Ty = residuals ( residuals ) . length ;
rank: 254
score: 99.17687310112848
patch: q CaMeL Ty ( residuals ) ; else { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 254
score: 99.13294741981908
patch: q CaMeL Ty ( residuals ) Vectorial CaMeL Point CaMeL Value CaMeL Pair current = null ;
rank: 254
score: 99.09295247395833
patch: q CaMeL Ty ( residuals ) ; ; qr CaMeL Decomposition ( ) ;
rank: 254
score: 99.0900634765625
patch: = ( double [ ] ) point . get CaMeL Value ( ) ;
rank: 254
score: 99.0646503155048
patch: = q CaMeL Ty . get CaMeL Value ( residuals ) ;
rank: 254
score: 99.01985677083333
patch: q CaMeL Ty ( residuals . residuals , residuals ) ;
rank: 254
score: 98.97953578404018
patch: q CaMeL Ty = 0 ;
rank: 254
score: 98.95177205403645
patch: ( ) ; q CaMeL Ty = q CaMeL Ty ;
rank: 254
score: 98.92026589133523
patch: q CaMeL Ty = residuals residuals ( residuals ) ;
rank: 255
score: 99.13258361816406
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = first CaMeL Iteration ;
rank: 255
score: 99.09249674479166
patch: q CaMeL Ty ( ) ; * / qr CaMeL Decomposition ( ) ;
rank: 255
score: 99.08966742621527
patch: if ( first CaMeL Iteration || first CaMeL Iteration ) { qr CaMeL Decomposition ( ) ;
rank: 255
score: 99.0638897235577
patch: = q CaMeL Ty . q CaMeL Ty ( residuals ) ;
rank: 255
score: 99.01817220052084
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( null ) ;
rank: 255
score: 98.97906024639423
patch: q CaMeL Ty ( residuals ) ; ; q CaMeL Ty ;
rank: 255
score: 98.95157877604167
patch: q CaMeL Ty = new int residuals ( residuals ) ;
rank: 256
score: 99.13185119628906
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 . $NUMBER$ ;
rank: 256
score: 99.08961704799107
patch: if ( first CaMeL Iteration ) { delta = 1 . 0 ;
rank: 256
score: 99.0635274251302
patch: q CaMeL Ty = new double [ residuals ) ] ;
rank: 256
score: 98.97879028320312
patch: q CaMeL Ty ; q CaMeL Ty ( ) ; ;
rank: 256
score: 98.949951171875
patch: if ( update CaMeL Residuals CaMeL And CaMeL Cost ( ) )
rank: 257
score: 99.08944363064236
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( ) ; break ;
rank: 257
score: 99.0627108487216
patch: q CaMeL Ty ( residuals ) ; * / ;
rank: 257
score: 98.95021565755208
patch: } q CaMeL Ty ( residuals ) ;
rank: 257
score: 98.94935302734375
patch: q CaMeL Ty ( residuals ) ; true ;
rank: 258
score: 99.17573377821181
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) new double [ cols ] ;
rank: 258
score: 99.08899797712054
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = $NUMBER$ ;
rank: 258
score: 99.0626971905048
patch: q CaMeL Ty [ ) ] = residuals ( residuals ) ;
rank: 258
score: 99.01700846354167
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( $NUMBER$ ) ;
rank: 258
score: 98.95000751201923
patch: q CaMeL Ty ( q CaMeL Ty ( 0 ) ) ;
rank: 258
score: 98.94839913504464
patch: q CaMeL Ty ( x CaMeL Norm , 0 , 0 ) ;
rank: 258
score: 98.9197998046875
patch: q CaMeL Ty = new residuals ( residuals ) ;
rank: 259
score: 99.17550659179688
patch: = Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 259
score: 99.09041341145833
patch: q CaMeL Ty ( ) ; x CaMeL Norm = 1 . 0 ;
rank: 259
score: 99.08799525669643
patch: q CaMeL Ty ( 0 ; qr CaMeL Decomposition ( ) ) ;
rank: 259
score: 99.06265024038461
patch: q CaMeL Ty ) . q CaMeL Ty ( residuals ) ;
rank: 259
score: 98.97779430042614
patch: q CaMeL Ty ( residuals ) ; throw ) ;
rank: 259
score: 98.94994007457386
patch: q CaMeL Ty ; q CaMeL Ty = $NUMBER$ ;
rank: 259
score: 98.94793701171875
patch: q CaMeL Ty ( cost ) ; qr CaMeL Decomposition ( ) ;
rank: 259
score: 98.9189786044034
patch: } else { q CaMeL Ty ( residuals ) ;
rank: 260
score: 99.17542940027573
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , cost ) ;
rank: 260
score: 99.08943684895833
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 260
score: 99.06239536830357
patch: q CaMeL Ty += residuals ) ; q CaMeL Ty += residuals ;
rank: 260
score: 98.97650146484375
patch: q CaMeL Ty ( residuals , 1 , residuals ) ;
rank: 260
score: 98.94952862079327
patch: q CaMeL Ty = q CaMeL Ty = residuals ( ) ;
rank: 260
score: 98.94727434430804
patch: q CaMeL Ty ( residuals , residuals , first CaMeL Iteration ) ;
rank: 260
score: 98.91815185546875
patch: q CaMeL Ty = residuals ; }
rank: 261
score: 99.08794759114583
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ; }
rank: 261
score: 99.0850830078125
patch: boolean first CaMeL Iteration = true ; boolean first CaMeL Iteration = true ;
rank: 261
score: 99.0623270670573
patch: = q CaMeL Ty ( residuals , residuals ) ; ;
rank: 261
score: 98.948974609375
patch: q CaMeL Ty = new q CaMeL Ty [ $NUMBER$ ] ;
rank: 261
score: 98.94667358398438
patch: q CaMeL Ty ( $STRING$ , residuals ) ;
rank: 262
score: 99.12775530133929
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = ) ;
rank: 262
score: 99.08397674560547
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += $NUMBER$ . 0 ;
rank: 262
score: 99.01554361979167
patch: q CaMeL Ty [ residuals - 1 ] = residuals ;
rank: 262
score: 98.9751309481534
patch: q CaMeL Ty = residuals = residuals ( ) ;
rank: 262
score: 98.94603382457386
patch: q CaMeL Ty ( residuals ) ; return 0 ;
rank: 262
score: 98.9172696200284
patch: q CaMeL Ty [ residuals ] = residuals ; }
rank: 263
score: 99.08640700120192
patch: increment CaMeL Iterations CaMeL Counter ( ) ; current = current ;
rank: 263
score: 99.08396809895834
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current , objective ) ;
rank: 263
score: 99.06117466517857
patch: q CaMeL Ty ( ) ) . q CaMeL Ty ( ) ;
rank: 263
score: 99.01551231971153
patch: q CaMeL Ty ( residuals . residuals ( residuals ) ) ;
rank: 263
score: 98.9478047688802
patch: q CaMeL Ty ( new , q CaMeL Ty ) ;
rank: 263
score: 98.94533081054688
patch: q CaMeL Ty ( 0 , objective ) ;
rank: 263
score: 98.91691450639205
patch: q CaMeL Ty = this . residuals ( ) ;
rank: 264
score: 99.17507934570312
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = diag [ 0 ] ;
rank: 264
score: 99.08598109654018
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ) ;
rank: 264
score: 99.08339436848958
patch: q CaMeL Ty ( 0 , point , objective ) ;
rank: 264
score: 99.06001499720982
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals , ;
rank: 264
score: 99.01513671875
patch: q CaMeL Ty = current . q CaMeL Ty ( residuals ) ;
rank: 264
score: 98.97412109375
patch: q CaMeL Ty = residuals . else q CaMeL Ty ;
rank: 264
score: 98.94773512620192
patch: q CaMeL Ty = residuals q CaMeL Ty [ 0 ] ;
rank: 264
score: 98.9450927734375
patch: q CaMeL Ty ( ) ; return current ;
rank: 264
score: 98.91684977213542
patch: q CaMeL Ty = residuals ; return q CaMeL Ty ;
rank: 265
score: 99.17476399739583
patch: q CaMeL Ty ( residuals ) ; / * * /
rank: 265
score: 99.0851581280048
patch: increment CaMeL Iterations CaMeL Counter ( ) ; current = 0 ;
rank: 265
score: 98.97405327690973
patch: q CaMeL Ty ( ) ; / /
rank: 265
score: 98.94480678013393
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( false ) ;
rank: 265
score: 98.9158935546875
patch: q CaMeL Ty [ $NUMBER$ ] = q CaMeL Ty ;
rank: 266
score: 99.17458208869485
patch: delta = x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor
rank: 266
score: 99.12562913161058
patch: lm CaMeL Dir = 0 ; qr CaMeL Decomposition ( ) ;
rank: 266
score: 99.084716796875
patch: q CaMeL Ty ( residuals ) ; double first CaMeL Iteration = 0 ;
rank: 266
score: 98.94344075520833
patch: finally { update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 267
score: 99.17420869715073
patch: while ( ! first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 267
score: 99.08444649832589
patch: lm CaMeL Par ( residuals ) ; update CaMeL Jacobian ( ) ;
rank: 267
score: 99.01326751708984
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ 0 ] . ;
rank: 267
score: 98.97276722301136
patch: q CaMeL Ty ( residuals ) ; return residuals ;
rank: 267
score: 98.94527180989583
patch: q CaMeL Ty q CaMeL Ty q CaMeL Ty ) ;
rank: 267
score: 98.94320678710938
patch: q CaMeL Ty ( previous ) ;
rank: 267
score: 98.91415405273438
patch: q CaMeL Ty = new Object [ residuals ] ; }
rank: 268
score: 99.17253960503473
patch: q CaMeL Ty ( x CaMeL Norm ) ; x CaMeL Norm = 0 . 0 ;
rank: 268
score: 99.12529296875
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = ) ;
rank: 268
score: 99.0841533954327
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current .
rank: 268
score: 99.05833943684895
patch: q CaMeL Ty ( residuals ) ; ; return null ;
rank: 268
score: 99.01284790039062
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals residuals ) ;
rank: 268
score: 98.9717548076923
patch: q CaMeL Ty = residuals = ( q CaMeL Ty ) ;
rank: 268
score: 98.9452412923177
patch: q CaMeL Ty = q CaMeL Ty ( null ) ;
rank: 268
score: 98.94247872488839
patch: else update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 268
score: 98.91346232096355
patch: q CaMeL Ty = residuals ; residuals ( residuals ) ;
rank: 269
score: 99.17249891493056
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ; else
rank: 269
score: 99.12502817007211
patch: lm CaMeL Dir = current ; update CaMeL Jacobian ( ) ;
rank: 269
score: 99.08409016927084
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = null ;
rank: 269
score: 99.07952008928571
patch: q CaMeL Ty ( residuals , objective , x CaMeL Norm ) ;
rank: 269
score: 99.01213727678571
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ 0 ;
rank: 269
score: 98.97154744466145
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty .
rank: 269
score: 98.94504616477273
patch: q CaMeL Ty ; q CaMeL Ty = null ;
rank: 269
score: 98.94224446614584
patch: q CaMeL Ty ( residuals , ) ; update CaMeL Jacobian ( ) ;
rank: 270
score: 99.05572509765625
patch: = new ) ; q CaMeL Ty ( residuals ) ;
rank: 270
score: 98.94418334960938
patch: q CaMeL Ty = q CaMeL Ty [ null ] ;
rank: 270
score: 98.94207356770833
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( ) ; }
rank: 271
score: 99.17234173943015
patch: q CaMeL Ty ( new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ) ;
rank: 271
score: 99.07888997395834
patch: q CaMeL Ty ( ) ; / / update CaMeL Jacobian ( ) ;
rank: 271
score: 99.0556640625
patch: q CaMeL Ty ( residuals ) . start ( residuals ) ;
rank: 271
score: 98.94403545673077
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty residuals ;
rank: 271
score: 98.94185638427734
patch: q CaMeL Ty ( $NUMBER$ ) ;
rank: 272
score: 99.17189534505208
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current + permutation [ 0 ] ;
rank: 272
score: 99.12278529575893
patch: = q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ;
rank: 272
score: 99.08304036458334
patch: vector = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 272
score: 99.05558638139205
patch: = new double [ q CaMeL Ty ) ] ;
rank: 272
score: 99.01077035757211
patch: q CaMeL Ty ( ( int ) q CaMeL Ty ) ;
rank: 272
score: 98.97019606370192
patch: q CaMeL Ty q CaMeL Ty residuals residuals ( residuals ) ;
rank: 272
score: 98.94401041666667
patch: q CaMeL Ty = new int [ - 1 ] ;
rank: 272
score: 98.94180908203126
patch: q CaMeL Ty ( old CaMeL Res ) ;
rank: 273
score: 99.17140706380208
patch: delta += ( x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor
rank: 273
score: 99.12274169921875
patch: q CaMeL Ty ( residuals , residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 273
score: 99.05536358173077
patch: q CaMeL Ty ( residuals ) ; residuals ( ) ; ;
rank: 273
score: 99.0107666015625
patch: q CaMeL Ty ( 1 ) ; q CaMeL Ty ( residuals ) ;
rank: 273
score: 98.96920776367188
patch: q CaMeL Ty ( residuals ( ) - 1 ) ;
rank: 273
score: 98.94384765625
patch: q CaMeL Ty = q CaMeL Ty - residuals residuals ;
rank: 273
score: 98.94175618489584
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( ) ; else
rank: 273
score: 98.91111403245192
patch: q CaMeL Ty ( ) ; q CaMeL Ty += false ;
rank: 274
score: 99.082666015625
patch: increment CaMeL Iterations CaMeL Counter ( ) ; first CaMeL Iteration = true ;
rank: 274
score: 99.07820638020833
patch: q CaMeL Ty ( residuals , delta , objective ) ;
rank: 274
score: 99.01001848493304
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += ) ;
rank: 274
score: 98.96730550130208
patch: q CaMeL Ty ( residuals , residuals . null ) ;
rank: 274
score: 98.94158935546875
patch: finally { if ( first CaMeL Iteration ) {
rank: 274
score: 98.91048177083333
patch: q CaMeL Ty = new double [ residuals ] ; }
rank: 275
score: 99.08194405691964
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ) ;
rank: 275
score: 99.05443464006696
patch: q CaMeL Ty ( residuals ) ; this . residuals ( ) ;
rank: 275
score: 98.9672139485677
patch: q CaMeL Ty ( residuals . ( residuals ) ) ;
rank: 275
score: 98.94346266526442
patch: q CaMeL Ty = residuals q CaMeL Ty [ residuals ] ;
rank: 275
score: 98.94138746995192
patch: if ( first CaMeL Iteration && qr CaMeL Decomposition ( ) )
rank: 276
score: 99.08169759114584
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ;
rank: 276
score: 99.0543545809659
patch: q CaMeL Ty ( residuals residuals , residuals ) ;
rank: 276
score: 98.96604225852273
patch: q CaMeL Ty ( residuals ) ; for ( {
rank: 276
score: 98.94007286658653
patch: if ( ! first CaMeL Iteration && first CaMeL Iteration ) {
rank: 276
score: 98.9100341796875
patch: q CaMeL Ty [ ) ] = residuals ;
rank: 277
score: 99.17056274414062
patch: if ( first CaMeL Iteration || first CaMeL Iteration && first CaMeL Iteration ) {
rank: 277
score: 99.08059895833334
patch: R . Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 277
score: 99.0541280110677
patch: q CaMeL Ty ( residuals ) ; return current ; }
rank: 277
score: 98.94241333007812
patch: q CaMeL Ty ( ; q CaMeL Ty ( ) ;
rank: 277
score: 98.93980189732143
patch: q CaMeL Ty ( this ) ; update CaMeL Jacobian ( ) ;
rank: 278
score: 99.07958984375
patch: increment CaMeL Iterations CaMeL Counter ( ) ; x CaMeL Norm = 0 ;
rank: 278
score: 99.07739975873162
patch: x CaMeL Norm = 0 . 0 ; x CaMeL Norm = 0 . 0 ;
rank: 278
score: 99.00902303059895
patch: q CaMeL Ty ( residuals ) ; return - 1 ;
rank: 278
score: 98.94208233173077
patch: q CaMeL Ty q CaMeL Ty ( $NUMBER$ , residuals ) ;
rank: 278
score: 98.90968674879808
patch: q CaMeL Ty += new q CaMeL Ty ( residuals ) ;
rank: 279
score: 99.16953412224265
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; jacobian ( ) ;
rank: 279
score: 99.078564453125
patch: delta = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) this ;
rank: 279
score: 99.0535176595052
patch: q CaMeL Ty : q CaMeL Ty ( residuals ) ;
rank: 279
score: 98.96399864783653
patch: q CaMeL Ty = current ; q CaMeL Ty ( ) ;
rank: 280
score: 99.12013154871323
patch: q CaMeL Ty ( ) ; throw new Function CaMeL Evaluation CaMeL Exception ( ) ;
rank: 280
score: 99.07832554408482
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous ;
rank: 280
score: 99.07503255208333
patch: q CaMeL Ty ( $STRING$ , x CaMeL Norm ) ;
rank: 280
score: 99.05347618689903
patch: q CaMeL Ty [ q CaMeL Ty ) ] = residuals ;
rank: 280
score: 99.00853729248047
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = residuals . residuals ;
rank: 280
score: 98.96290588378906
patch: q CaMeL Ty = residuals ; ;
rank: 280
score: 98.94122314453125
patch: q CaMeL Ty = q CaMeL Ty . residuals ) ;
rank: 280
score: 98.93883666992187
patch: q CaMeL Ty ( residuals , false ) ;
rank: 281
score: 99.1682487936581
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , max ) ;
rank: 281
score: 99.07728068033855
patch: delta = ( double [ ] ) x CaMeL Norm ;
rank: 281
score: 99.07481032151442
patch: lm CaMeL Par = ) ; update CaMeL Jacobian ( ) ;
rank: 281
score: 99.05301920572917
patch: q CaMeL Ty [ q CaMeL Ty ] = null ;
rank: 281
score: 99.00810102982955
patch: q CaMeL Ty [ 0 ] = residuals $NUMBER$ ;
rank: 281
score: 98.9409891764323
patch: q CaMeL Ty ( 1 , q CaMeL Ty ) ;
rank: 282
score: 99.16810438368056
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( permutation , objective ) ; }
rank: 282
score: 99.11973812705592
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = Math . max ( diag ) ;
rank: 282
score: 99.05129665798611
patch: = q CaMeL Ty ( ) ; ;
rank: 282
score: 98.96206665039062
patch: q CaMeL Ty = ( q CaMeL Ty $NUMBER$ ) ;
rank: 282
score: 98.94056193033855
patch: q CaMeL Ty = new short [ residuals 1 ] ;
rank: 282
score: 98.93826497395834
patch: m = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 282
score: 98.90500710227273
patch: q CaMeL Ty [ $NUMBER$ ] ( residuals ) ;
rank: 283
score: 99.16809760199652
patch: q CaMeL Ty $NUMBER$ Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; }
rank: 283
score: 99.0751953125
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( current ;
rank: 283
score: 99.0744120279948
patch: ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 283
score: 99.05125935872395
patch: q CaMeL Ty [ 0 ] = residuals ) ; ;
rank: 283
score: 98.96196899414062
patch: q CaMeL Ty ( residuals - residuals ) ;
rank: 283
score: 98.93758951822916
patch: finally { qr CaMeL Decomposition ( ) ; qr CaMeL Decomposition ( ) ;
rank: 284
score: 99.07456868489584
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( null ) ;
rank: 284
score: 99.07421875
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( 0 ) ;
rank: 284
score: 99.05110386439732
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ++ ; }
rank: 284
score: 99.00770568847656
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = current . residuals ;
rank: 284
score: 98.93949381510417
patch: q CaMeL Ty = ( int ) q CaMeL Ty ;
rank: 284
score: 98.9375
patch: q CaMeL Ty ( diag ) ; update CaMeL Jacobian ( ) ;
rank: 285
score: 99.1188735961914
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += first CaMeL Iteration ;
rank: 285
score: 99.07440592447917
patch: R . Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 285
score: 99.07420857747395
patch: q CaMeL Ty ( point , objective , objective ) ;
rank: 285
score: 99.05074368990384
patch: q CaMeL Ty [ q CaMeL Ty ) ] ( ) ;
rank: 285
score: 98.96042104867789
patch: q CaMeL Ty = 0 ; q CaMeL Ty = residuals ;
rank: 285
score: 98.93919881184895
patch: q CaMeL Ty = q CaMeL Ty ( ) ; }
rank: 285
score: 98.9372891512784
patch: q CaMeL Ty ( residuals ) ; return true ;
rank: 285
score: 98.90262858072917
patch: q CaMeL Ty ( ( q CaMeL Ty ) ) ;
rank: 286
score: 99.11885793585526
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; lm CaMeL Par = 0 ;
rank: 286
score: 99.0742431640625
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = null ;
rank: 286
score: 99.073193359375
patch: if ( first CaMeL Iteration ) { q CaMeL Ty ( residuals ) ;
rank: 286
score: 99.05013602120536
patch: q CaMeL Ty $NUMBER$ ( ) ; q CaMeL Ty ( ) ;
rank: 286
score: 98.95987548828126
patch: q CaMeL Ty ( residuals ) ; ; }
rank: 286
score: 98.93715209960938
patch: try { if ( first CaMeL Iteration ) {
rank: 286
score: 98.90219948508523
patch: q CaMeL Ty = residuals ; residuals ( ) ;
rank: 287
score: 99.16708374023438
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair = current ;
rank: 287
score: 99.11884416852679
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = $NUMBER$ ;
rank: 287
score: 99.04973895733173
patch: q CaMeL Ty -= residuals ; q CaMeL Ty ( ) ;
rank: 287
score: 98.95979447798295
patch: q CaMeL Ty ( residuals [ false ] ) ;
rank: 287
score: 98.93898518880208
patch: q CaMeL Ty = q CaMeL Ty ( 1 ) ;
rank: 287
score: 98.93674142020089
patch: q CaMeL Ty ( residuals , objective , old CaMeL Res ) ;
rank: 288
score: 99.1188232421875
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; * /
rank: 288
score: 99.04958089192708
patch: q CaMeL Ty -= q CaMeL Ty ( residuals ) ;
rank: 288
score: 99.00663248697917
patch: q CaMeL Ty ( residuals , current , residuals ) ;
rank: 288
score: 98.95974731445312
patch: q CaMeL Ty ( residuals ) ; ( $NUMBER$ ) ;
rank: 288
score: 98.93846638997395
patch: q CaMeL Ty ; q CaMeL Ty ( true ) ;
rank: 288
score: 98.90163949819711
patch: q CaMeL Ty ( q CaMeL Ty , residuals ) ; ;
rank: 289
score: 99.1665283203125
patch: q CaMeL Ty = Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 289
score: 99.11876502403847
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = 0 ;
rank: 289
score: 99.0726318359375
patch: q CaMeL Ty ( residuals , point , first CaMeL Iteration ) ;
rank: 289
score: 99.07200404575893
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition = 0 ;
rank: 289
score: 99.04946899414062
patch: q CaMeL Ty ++ q CaMeL Ty ( residuals ) ;
rank: 289
score: 98.95957594651442
patch: q CaMeL Ty ( residuals , residuals ( residuals ) ) ;
rank: 289
score: 98.93582589285714
patch: if ( first CaMeL Iteration && ( first CaMeL Iteration ) ) {
rank: 290
score: 99.16634792751736
patch: boolean first CaMeL Iteration = true ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 290
score: 98.95896218039773
patch: q CaMeL Ty = q CaMeL Ty ; ) {
rank: 290
score: 98.9374530498798
patch: q CaMeL Ty = this ; q CaMeL Ty = true ;
rank: 290
score: 98.93519810267857
patch: q CaMeL Ty ( true ) ; update CaMeL Jacobian ( ) ;
rank: 290
score: 98.8987528483073
patch: result = q CaMeL Ty ( residuals , residuals ) ;
rank: 291
score: 99.07222806490384
patch: lm CaMeL Par = point ; update CaMeL Jacobian ( ) ;
rank: 291
score: 99.07112630208333
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair (
rank: 291
score: 99.04877580915179
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty ) ; ;
rank: 291
score: 99.00460815429688
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( residuals $NUMBER$ ) ;
rank: 291
score: 98.95884195963542
patch: q CaMeL Ty ( residuals . equals ( ) ) ;
rank: 291
score: 98.9371807391827
patch: q CaMeL Ty ) ; q CaMeL Ty ( ) ; }
rank: 291
score: 98.9351806640625
patch: if ( first CaMeL Iteration && update CaMeL Jacobian ( ) ) {
rank: 291
score: 98.89867225060097
patch: q CaMeL Ty = residuals ( ) ; residuals ( ) ;
rank: 292
score: 99.16439819335938
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm == 0 ) ;
rank: 292
score: 99.07215227399554
patch: if ( increment CaMeL Iterations CaMeL Counter ( ) != 0 ) {
rank: 292
score: 99.00423990885416
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = new ) ;
rank: 292
score: 98.95647723858173
patch: q CaMeL Ty = $NUMBER$ ; q CaMeL Ty = ) ;
rank: 292
score: 98.93702189127605
patch: q CaMeL Ty ; q CaMeL Ty ( false ) ;
rank: 292
score: 98.93515625
patch: q CaMeL Ty ( $STRING$ , 0 ) ;
rank: 292
score: 98.89860395951705
patch: q CaMeL Ty = new Float ( residuals ) ;
rank: 293
score: 99.11806640625
patch: = current ; qr CaMeL Decomposition ( ) ;
rank: 293
score: 99.07199096679688
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += 0 . 1 ;
rank: 293
score: 99.069140625
patch: q CaMeL Ty ( residuals ) ; { qr CaMeL Decomposition ( ) ;
rank: 293
score: 99.00423177083333
patch: q CaMeL Ty ( residuals ) ) ; q CaMeL Ty ( ) ;
rank: 293
score: 98.95646158854167
patch: q CaMeL Ty ( residuals , residuals , 0 ) ;
rank: 293
score: 98.93701171875
patch: q CaMeL Ty = q CaMeL Ty . get ) ;
rank: 293
score: 98.9349365234375
patch: if ( ! first CaMeL Iteration ) { update CaMeL Jacobian ( ) ;
rank: 294
score: 99.16414388020833
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective , ) ;
rank: 294
score: 99.07188063401442
patch: x CaMeL Norm = 0 ; qr CaMeL Decomposition ( ) ;
rank: 294
score: 99.06910051618304
patch: q CaMeL Ty ( residuals , x CaMeL Norm , diag ) ;
rank: 294
score: 99.0484149639423
patch: q CaMeL Ty [ residuals ) ] = q CaMeL Ty ;
rank: 294
score: 98.95631103515625
patch: q CaMeL Ty ( residuals == 0 ) ;
rank: 294
score: 98.93697102864583
patch: q CaMeL Ty = Math . max ( residuals ) ;
rank: 294
score: 98.93450055803571
patch: q CaMeL Ty ( residuals , old CaMeL Res , current ) ;
rank: 295
score: 99.16274007161458
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this , objective ) ; }
rank: 295
score: 99.117919921875
patch: q CaMeL Ty ( residuals , delta , diag ) ;
rank: 295
score: 99.07160186767578
patch: if ( cost != 0 ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 295
score: 99.04826136997768
patch: q CaMeL Ty [ residuals ] ; q CaMeL Ty ( ) ;
rank: 295
score: 98.95609537760417
patch: q CaMeL Ty ( ) ; break ;
rank: 295
score: 98.93419538225446
patch: q CaMeL Ty ( false ) ; update CaMeL Jacobian ( ) ;
rank: 295
score: 98.89581768329327
patch: q CaMeL Ty [ 1 ] ( q CaMeL Ty ) ;
rank: 296
score: 99.16212293836806
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( diag , objective ) ;
rank: 296
score: 99.11777169363839
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = 1 ;
rank: 296
score: 99.06760079520089
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ) ;
rank: 296
score: 99.04822716346153
patch: q CaMeL Ty = residuals ( ) * q CaMeL Ty ;
rank: 296
score: 99.00278727213542
patch: q CaMeL Ty [ 0 ] = current . residuals ;
rank: 296
score: 98.9556376139323
patch: q CaMeL Ty ( residuals , residuals ) ; residuals ;
rank: 296
score: 98.93418375651042
patch: q CaMeL Ty ( residuals ) ; if ( ) {
rank: 296
score: 98.89513142903645
patch: q CaMeL Ty = residuals = residuals ( residuals ) ;
rank: 297
score: 99.16075942095588
patch: if ( first CaMeL Iteration ) { x CaMeL Norm = 0 . 0 ; }
rank: 297
score: 99.1168212890625
patch: ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 297
score: 99.06753743489584
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair current = null ;
rank: 297
score: 99.04756382533482
patch: q CaMeL Ty ( ) . q CaMeL Ty ( residuals , ;
rank: 297
score: 99.00270182291666
patch: q CaMeL Ty ( true ) ; q CaMeL Ty ( residuals ) ;
rank: 297
score: 98.9554443359375
patch: else { q CaMeL Ty ( residuals ) ;
rank: 297
score: 98.93366834852431
patch: q CaMeL Ty ( work $NUMBER$ ) ;
rank: 297
score: 98.89505709134616
patch: q CaMeL Ty = ) ; q CaMeL Ty = true ;
rank: 298
score: 99.15983751085069
patch: delta = 0 ; x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 298
score: 99.11622378700658
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = point ;
rank: 298
score: 99.00208391462054
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty . residuals ;
rank: 298
score: 98.93358357747395
patch: q CaMeL Ty ( ) ; while ( true ) {
rank: 299
score: 99.1161247702206
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = first CaMeL Iteration ;
rank: 299
score: 99.07029724121094
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += 1 . 0 ;
rank: 299
score: 99.0667724609375
patch: q CaMeL Ty ( residuals ) ; catch ( Function CaMeL Evaluation CaMeL Exception
rank: 299
score: 99.04634312220982
patch: q CaMeL Ty *= residuals ) ; q CaMeL Ty ( ) ;
rank: 299
score: 99.00138346354167
patch: q CaMeL Ty ( 0 , residuals , residuals ) ;
rank: 299
score: 98.95508490668402
patch: q CaMeL Ty = residuals . residuals ;
rank: 299
score: 98.93495686848958
patch: q CaMeL Ty = q CaMeL Ty residuals ( ) ;
rank: 299
score: 98.89378773082386
patch: q CaMeL Ty = new char [ residuals ] ;
rank: 300
score: 99.15906575520833
patch: q CaMeL Ty ( residuals [ 0 ] , diag CaMeL R ) ;
rank: 300
score: 99.04612223307292
patch: q CaMeL Ty ( residuals ) * /
rank: 300
score: 98.95505934495192
patch: q CaMeL Ty = null ; q CaMeL Ty = 0 ;
rank: 300
score: 98.9334716796875
patch: q CaMeL Ty ( residuals ) + 0 ;
rank: 300
score: 98.9334004720052
patch: q CaMeL Ty = q CaMeL Ty + residuals ) ;
rank: 300
score: 98.8936434659091
patch: q CaMeL Ty = residuals residuals [ residuals ] ;
rank: 301
score: 99.11482456752232
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = cost ;
rank: 301
score: 99.04596557617188
patch: = q CaMeL Ty . residuals ( ) ;
rank: 301
score: 98.9543789950284
patch: q CaMeL Ty ( residuals ( ) ) ; ;
rank: 301
score: 98.93340594951923
patch: q CaMeL Ty ( residuals ) && first CaMeL Iteration ) {
rank: 301
score: 98.93131880326705
patch: q CaMeL Ty = q CaMeL Ty = ) ;
rank: 302
score: 99.15848214285714
patch: throw new Function CaMeL Evaluation CaMeL Exception ( x CaMeL Norm ) ;
rank: 302
score: 99.11368233816964
patch: first CaMeL Iteration = Math . sqrt ( x CaMeL Norm ) ;
rank: 302
score: 99.06966145833333
patch: q CaMeL Ty ( ) ; / / qr CaMeL Decomposition ( ) ;
rank: 302
score: 99.06529134114584
patch: delta = Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 302
score: 98.95430501302083
patch: q CaMeL Ty = residuals . length ;
rank: 302
score: 98.9330166903409
patch: q CaMeL Ty ( first CaMeL Iteration , ) ;
rank: 302
score: 98.8932354266827
patch: q CaMeL Ty ( residuals , ( int ) residuals ) ;
rank: 303
score: 99.157958984375
patch: lm CaMeL Par = Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 303
score: 99.11362130301339
patch: q CaMeL Ty ( residuals , old CaMeL Res , diag ) ;
rank: 303
score: 98.9541727701823
patch: q CaMeL Ty ( residuals ) ; ) ; residuals ;
rank: 303
score: 98.89316813151042
patch: q CaMeL Ty = residuals ( residuals ) residuals ) ;
rank: 304
score: 99.15793744255515
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( first CaMeL Iteration ) ;
rank: 304
score: 99.11284930889423
patch: lm CaMeL Dir = 0 ; update CaMeL Jacobian ( ) ;
rank: 304
score: 99.04475911458333
patch: q CaMeL Ty *= q CaMeL Ty ( residuals ) ;
rank: 304
score: 98.9990005493164
patch: q CaMeL Ty [ q CaMeL Ty . length - 1 ] = residuals ;
rank: 304
score: 98.9318115234375
patch: q CaMeL Ty ( old CaMeL X ) ;
rank: 304
score: 98.93004353841145
patch: q CaMeL Ty = new int [ residuals ) ] ;
rank: 305
score: 99.15789794921875
patch: delta = x CaMeL Norm == 0 ? initial CaMeL Step CaMeL Bound CaMeL Factor : (
rank: 305
score: 99.04290771484375
patch: q CaMeL Ty ( residuals ) ; ; if ( ;
rank: 305
score: 98.99837493896484
patch: q CaMeL Ty ( residuals 1 ) ; q CaMeL Ty ( residuals ) ;
rank: 305
score: 98.92864990234375
patch: q CaMeL Ty = q CaMeL Ty = residuals ) ;
rank: 305
score: 98.8924893465909
patch: q CaMeL Ty ( q CaMeL Ty , ) ;
rank: 306
score: 99.11174665178571
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = true ;
rank: 306
score: 98.99829915364583
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( this ) ;
rank: 306
score: 98.95289963942308
patch: q CaMeL Ty . q CaMeL Ty = q CaMeL Ty ;
rank: 306
score: 98.93106079101562
patch: q CaMeL Ty ( diag ) ;
rank: 307
score: 99.15629069010417
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current - 0 ;
rank: 307
score: 99.11170718544408
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = 0 ;
rank: 307
score: 99.0682732077206
patch: lm CaMeL Par = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 307
score: 99.06256103515625
patch: q CaMeL Ty ( ) ; double first CaMeL Iteration = 0 ;
rank: 307
score: 98.99783528645834
patch: q CaMeL Ty [ ) ] = q CaMeL Ty [ residuals ] ;
rank: 307
score: 98.95278695913461
patch: q CaMeL Ty ( residuals , residuals [ residuals ] ) ;
rank: 307
score: 98.92576090494792
patch: q CaMeL Ty = Math . arraycopy ( residuals ) ;
rank: 308
score: 99.15552435980902
patch: if ( first CaMeL Iteration && first CaMeL Iteration ) { update CaMeL Jacobian ( ) ;
rank: 308
score: 99.11165945870536
patch: q CaMeL Ty ( old CaMeL X , delta , diag ) ;
rank: 308
score: 99.06760541130515
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ; break ;
rank: 308
score: 99.04180908203125
patch: = residuals ) ; q CaMeL Ty ( residuals ) ;
rank: 308
score: 98.99776204427083
patch: q CaMeL Ty ( residuals $NUMBER$ * residuals $NUMBER$ ) ;
rank: 308
score: 98.9525146484375
patch: q CaMeL Ty ( residuals ) ; / / ;
rank: 308
score: 98.93070765904018
patch: q CaMeL Ty ( residuals , old CaMeL X , cols ) ;
rank: 308
score: 98.89015891335227
patch: q CaMeL Ty = residuals ( residuals ) residuals ;
rank: 309
score: 99.0663330078125
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous , objective ) ;
rank: 309
score: 99.06202915736607
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition = true ;
rank: 309
score: 99.04068697415866
patch: = q CaMeL Ty ( residuals , residuals , residuals ) ;
rank: 309
score: 98.99759928385417
patch: q CaMeL Ty ( residuals ( double ) residuals ) ;
rank: 309
score: 98.9520975748698
patch: q CaMeL Ty = residuals . q CaMeL Ty ) ;
rank: 309
score: 98.93012029474431
patch: q CaMeL Ty ( ) ; if ( true )
rank: 309
score: 98.9247334798177
patch: q CaMeL Ty ( residuals , this , residuals ) ;
rank: 309
score: 98.88992309570312
patch: q CaMeL Ty ( residuals , residuals ) ; break ;
rank: 310
score: 99.06632726332721
patch: q CaMeL Ty ( residuals , Math . abs ( x CaMeL Norm ) ) ;
rank: 310
score: 99.0606689453125
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = this ;
rank: 310
score: 99.0406827059659
patch: q CaMeL Ty [ 0 ] = residuals ; ;
rank: 310
score: 98.95133833451705
patch: q CaMeL Ty ( residuals ( 0 ) ) ;
rank: 310
score: 98.8898456280048
patch: q CaMeL Ty += residuals ; q CaMeL Ty = true ;
rank: 311
score: 99.15462000229779
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; current = 0 ;
rank: 311
score: 99.11138446514423
patch: qr CaMeL Decomposition ( ) ; update CaMeL Jacobian ( ) ;
rank: 311
score: 98.99686373197116
patch: = q CaMeL Ty [ 0 ] . clone ( ) ;
rank: 311
score: 98.95058969350961
patch: q CaMeL Ty = ( q CaMeL Ty ( ) ) .
rank: 311
score: 98.92368570963542
patch: q CaMeL Ty ( residuals , residuals , new ) ;
rank: 311
score: 98.888671875
patch: q CaMeL Ty = residuals q CaMeL Ty ;
rank: 312
score: 99.15365600585938
patch: q CaMeL Ty ( increment CaMeL Iterations CaMeL Counter ( ) , objective ) ;
rank: 312
score: 99.10977172851562
patch: q CaMeL Ty [ 0 ] = diag CaMeL R ;
rank: 312
score: 98.99654947916666
patch: q CaMeL Ty [ 0 ] = new q CaMeL Ty ( ) ;
rank: 312
score: 98.95046997070312
patch: q CaMeL Ty ( residuals ( ) - residuals ) ;
rank: 312
score: 98.92954664963942
patch: x CaMeL Norm = 0 ; update CaMeL Jacobian ( ) ;
rank: 313
score: 99.15340169270833
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; break ;
rank: 313
score: 99.10951450892857
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = current ;
rank: 313
score: 99.03339301215277
patch: = q CaMeL Ty [ residuals ] ;
rank: 313
score: 98.99609375
patch: q CaMeL Ty ( residuals $NUMBER$ * q CaMeL Ty ) ;
rank: 313
score: 98.95009358723958
patch: q CaMeL Ty ( residuals ) ; residuals = 1 ;
rank: 313
score: 98.92888532366071
patch: if ( first CaMeL Iteration && x CaMeL Norm == 0 ) {
rank: 313
score: 98.88678533380681
patch: q CaMeL Ty [ residuals ] = new ) ;
rank: 314
score: 99.15313361672794
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( this , current ) ;
rank: 314
score: 99.10933061079545
patch: lm CaMeL Dir = new double [ cols ] ;
rank: 314
score: 99.0650993795956
patch: q CaMeL Ty ( ) ; / / x CaMeL Norm = 0 . 0 ;
rank: 314
score: 99.05880533854166
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current . 0 ;
rank: 314
score: 99.03153483072917
patch: = q CaMeL Ty ( ) . clone ( ) ;
rank: 314
score: 98.99422200520833
patch: q CaMeL Ty [ $NUMBER$ ] = q CaMeL Ty [ 1 ] ;
rank: 314
score: 98.92825753348214
patch: q CaMeL Ty ( residuals , old CaMeL X , diag ) ;
rank: 314
score: 98.92333984375
patch: q CaMeL Ty residuals ; q CaMeL Ty ( ) ;
rank: 315
score: 99.15284946986607
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( x CaMeL Norm ) ;
rank: 315
score: 99.10909231085526
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; update CaMeL Jacobian ( ) ;
rank: 315
score: 99.0642801920573
patch: q CaMeL Ty ( point , objective , diag ) ;
rank: 315
score: 99.05845424107143
patch: x CaMeL Norm = Math . sqrt ( diag CaMeL R ) ;
rank: 315
score: 98.99412841796875
patch: q CaMeL Ty [ 0 ] = false ;
rank: 315
score: 98.92771606445312
patch: q CaMeL Ty ( residuals ) ; do {
rank: 315
score: 98.92315673828125
patch: q CaMeL Ty ( q CaMeL Ty , this ) ;
rank: 315
score: 98.88629705255681
patch: q CaMeL Ty ( ( int ) $NUMBER$ ) ;
rank: 316
score: 99.10872977120536
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration ( ) ;
rank: 316
score: 99.05841533954327
patch: delta = 0 ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 316
score: 98.99354771205357
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty + 1 ;
rank: 316
score: 98.94828287760417
patch: q CaMeL Ty ( ) ; for ( ) / /
rank: 316
score: 98.9276123046875
patch: if ( first CaMeL Iteration || first CaMeL Iteration )
rank: 316
score: 98.92310587565105
patch: q CaMeL Ty ( q CaMeL Ty , 1 ) ;
rank: 316
score: 98.88592529296875
patch: q CaMeL Ty ( residuals , true , residuals ) ;
rank: 317
score: 99.15192522321429
patch: double [ ] old CaMeL Res = new double [ cols ] ;
rank: 317
score: 99.1084716796875
patch: q CaMeL Ty ( ) ; x CaMeL Norm += x CaMeL Norm ;
rank: 317
score: 99.06346938189338
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( true ) ;
rank: 317
score: 99.05832926432292
patch: increment CaMeL Iterations CaMeL Counter ( x CaMeL Norm ) ;
rank: 317
score: 98.99276297433036
patch: q CaMeL Ty [ 0 ] = ( q CaMeL Ty ) ;
rank: 317
score: 98.92750651041666
patch: current = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 317
score: 98.9225362141927
patch: q CaMeL Ty = new int [ q CaMeL Ty ;
rank: 317
score: 98.88571401742789
patch: q CaMeL Ty = residuals ( residuals ( residuals ) ) ;
rank: 318
score: 99.15135904947917
patch: q CaMeL Ty ( residuals [ 0 ] , jac CaMeL Norm ) ;
rank: 318
score: 99.05828450520833
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current . point ;
rank: 318
score: 99.0295879657452
patch: q CaMeL Ty ( residuals ) . residuals ( ) ; ;
rank: 318
score: 98.99171142578125
patch: q CaMeL Ty ( residuals * residuals ) ;
rank: 318
score: 98.9477871981534
patch: q CaMeL Ty ( residuals . null $NUMBER$ ) ;
rank: 318
score: 98.92722981770834
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( ) ; try {
rank: 318
score: 98.92071533203125
patch: q CaMeL Ty = q CaMeL Ty ( 0 ) ;
rank: 318
score: 98.88558959960938
patch: q CaMeL Ty = residuals ( ) residuals ( ) ;
rank: 319
score: 99.15094549005681
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 319
score: 99.108154296875
patch: q CaMeL Ty ( ) ; lm CaMeL Dir = 0 ;
rank: 319
score: 99.06331089564732
patch: q CaMeL Ty = 0 ; boolean first CaMeL Iteration = true ;
rank: 319
score: 99.02952223557692
patch: q CaMeL Ty [ residuals ] = residuals . get ) ;
rank: 319
score: 98.94775390625
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ; }
rank: 319
score: 98.92695835658482
patch: q CaMeL Ty ( residuals , x CaMeL Norm , 0 ) ;
rank: 319
score: 98.92063210227273
patch: q CaMeL Ty = q CaMeL Ty = this ;
rank: 319
score: 98.88548787434895
patch: q CaMeL Ty = residuals ( residuals ) / true ;
rank: 320
score: 99.14960793887867
patch: q CaMeL Ty $NUMBER$ Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ;
rank: 320
score: 99.10797119140625
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = null ;
rank: 320
score: 99.06321806066177
patch: lm CaMeL Par = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) this ;
rank: 320
score: 99.02861993963069
patch: q CaMeL Ty ( ) residuals ( residuals ) ;
rank: 320
score: 98.9906893643466
patch: q CaMeL Ty ( residuals $NUMBER$ * residuals ) ;
rank: 320
score: 98.94765403053977
patch: q CaMeL Ty ( residuals ) ) ; ) ;
rank: 320
score: 98.92058771306819
patch: q CaMeL Ty = new int ( residuals ) ;
rank: 321
score: 99.14656336167279
patch: q CaMeL Ty = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) true ;
rank: 321
score: 99.10796564275569
patch: ( residuals ) ; qr CaMeL Decomposition ( ) ;
rank: 321
score: 99.0626953125
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 0 . 1 ;
rank: 321
score: 99.02827962239583
patch: q CaMeL Ty [ residuals ] = residuals ) ; ;
rank: 321
score: 98.94713245738636
patch: ( ) ; q CaMeL Ty ( residuals ) ;
rank: 321
score: 98.92674842247597
patch: q CaMeL Ty ( residuals , first CaMeL Iteration ) ; }
rank: 321
score: 98.92049153645833
patch: q CaMeL Ty ) ;
rank: 321
score: 98.884765625
patch: q CaMeL Ty = true ;
rank: 322
score: 99.10786655970982
patch: q CaMeL Ty ( residuals , x CaMeL Norm == 0 ) ;
rank: 322
score: 99.02552208533653
patch: q CaMeL Ty ( ) . residuals ( residuals ) ; ;
rank: 322
score: 98.92667933872768
patch: q CaMeL Ty ( 1 ) ; update CaMeL Jacobian ( ) ;
rank: 322
score: 98.91945393880208
patch: q CaMeL Ty = q CaMeL Ty - residuals residuals }
rank: 322
score: 98.88454182942708
patch: q CaMeL Ty = ( q CaMeL Ty ) ) ;
rank: 323
score: 99.14570168887867
patch: lm CaMeL Par = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) true ;
rank: 323
score: 99.10774448939732
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = this ;
rank: 323
score: 99.06117158777573
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( cols ) ;
rank: 323
score: 99.05518391927083
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = this . current ;
rank: 323
score: 98.88434307391827
patch: q CaMeL Ty = this . q CaMeL Ty = null ;
rank: 324
score: 99.10756272536058
patch: lm CaMeL Dir = current ; qr CaMeL Decomposition ( ) ;
rank: 324
score: 99.0609489889706
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( false ) ;
rank: 324
score: 99.054638671875
patch: vector = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 324
score: 99.02506197415866
patch: = q CaMeL Ty ( residuals ) ; residuals ( ) ;
rank: 324
score: 98.98933919270833
patch: = q CaMeL Ty [ 0 ] ; q CaMeL Ty ( ) ;
rank: 324
score: 98.9466044108073
patch: q CaMeL Ty ( residuals ( ) - 0 ) ;
rank: 324
score: 98.9244384765625
patch: q CaMeL Ty ( residuals ) ; else x CaMeL Norm = 0 ;
rank: 324
score: 98.88430786132812
patch: q CaMeL Ty ( residuals ) ; if ( residuals ;
rank: 325
score: 99.14471028645833
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current + 1 ;
rank: 325
score: 99.10756022135416
patch: q CaMeL Ty ( residuals ) ; else first CaMeL Iteration = 0 ;
rank: 325
score: 99.05455603966347
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = diag ;
rank: 325
score: 99.02394456129808
patch: = q CaMeL Ty ) ; q CaMeL Ty ( ) ;
rank: 325
score: 98.94659423828125
patch: q CaMeL Ty ( residuals - residuals , residuals ) ;
rank: 325
score: 98.92409057617188
patch: if ( ( first CaMeL Iteration ) ) {
rank: 325
score: 98.91716974431819
patch: q CaMeL Ty ( - q CaMeL Ty ) ;
rank: 326
score: 99.02378493088942
patch: q CaMeL Ty ++ ; ; q CaMeL Ty ( ) ;
rank: 326
score: 98.989013671875
patch: q CaMeL Ty [ 0 ] = new double ) ;
rank: 326
score: 98.94508870442708
patch: q CaMeL Ty ( residuals . q CaMeL Ty ) ;
rank: 326
score: 98.91566975911458
patch: q CaMeL Ty ( residuals , residuals , 1 ) ;
rank: 326
score: 98.88282189002403
patch: q CaMeL Ty ( ( long [ ] ) residuals ) ;
rank: 327
score: 99.14281463623047
patch: try { x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 327
score: 99.10675455729167
patch: q CaMeL Ty ( residuals ) ; int x CaMeL Norm = 0 ;
rank: 327
score: 99.05311584472656
patch: q CaMeL Ty ( this ) ;
rank: 327
score: 99.02369181315105
patch: q CaMeL Ty * / q CaMeL Ty ( ) ;
rank: 327
score: 98.94412231445312
patch: q CaMeL Ty = residuals ) ; residuals = residuals ;
rank: 327
score: 98.92383922230114
patch: q CaMeL Ty ( ) ; current = current ;
rank: 327
score: 98.91527210582386
patch: q CaMeL Ty ; residuals = q CaMeL Ty ;
rank: 327
score: 98.88165838068181
patch: q CaMeL Ty ( ; q CaMeL Ty ) ;
rank: 328
score: 99.1424919577206
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current ; while ( true )
rank: 328
score: 99.10674176897321
patch: q CaMeL Ty ( ) ; else first CaMeL Iteration = 0 ;
rank: 328
score: 99.06009928385417
patch: delta = ( x CaMeL Norm == 0 ) ? initial
rank: 328
score: 99.05162811279297
patch: lm CaMeL Par ( residuals ) ;
rank: 328
score: 99.02305908203125
patch: q CaMeL Ty ++ ; residuals ( ) ;
rank: 328
score: 98.98854573567708
patch: q CaMeL Ty [ residuals ] = old CaMeL X ;
rank: 328
score: 98.94408069957386
patch: q CaMeL Ty ( residuals . null 1 ) ;
rank: 328
score: 98.92362060546876
patch: try { update CaMeL Jacobian ( residuals ) ;
rank: 329
score: 99.14215087890625
patch: delta = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 329
score: 99.10659790039062
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; / * /
rank: 329
score: 99.02231852213542
patch: q CaMeL Ty = new double [ residuals ] ; ;
rank: 329
score: 98.94369506835938
patch: q CaMeL Ty ; ; q CaMeL Ty ( ) ;
rank: 329
score: 98.92352294921875
patch: q CaMeL Ty ( residuals , old CaMeL X , objective ) ;
rank: 329
score: 98.91372341579861
patch: q CaMeL Ty ; q CaMeL Ty ;
rank: 329
score: 98.87986061789773
patch: q CaMeL Ty ( q CaMeL Ty ) ; ;
rank: 330
score: 99.10631385216347
patch: update CaMeL Jacobian ( ) ; update CaMeL Jacobian ( ) ;
rank: 330
score: 99.05919471153847
patch: q CaMeL Ty ( ) : qr CaMeL Decomposition ( ) ;
rank: 330
score: 99.05008638822116
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = 0 ;
rank: 330
score: 99.02217240767045
patch: q CaMeL Ty [ residuals ] = residuals ; ;
rank: 330
score: 98.98769124348958
patch: q CaMeL Ty [ 0 ] = residuals . residuals ;
rank: 330
score: 98.94332885742188
patch: q CaMeL Ty = residuals ; q CaMeL Ty = ;
rank: 330
score: 98.92149000901442
patch: q CaMeL Ty ( residuals ) ; return first CaMeL Iteration ;
rank: 330
score: 98.91292317708333
patch: q CaMeL Ty = q CaMeL Ty = ( ) ;
rank: 331
score: 99.14070638020833
patch: q CaMeL Ty ( x CaMeL Norm , x CaMeL Norm ) ; }
rank: 331
score: 99.10596516927083
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 1 . 0 ;
rank: 331
score: 99.04993547712054
patch: x CaMeL Norm = Math . sqrt ( jac CaMeL Norm ) ;
rank: 331
score: 99.02114868164062
patch: q CaMeL Ty [ q CaMeL Ty ] ( ) ;
rank: 331
score: 98.98746163504464
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = new ;
rank: 331
score: 98.94322791466347
patch: q CaMeL Ty = residuals ; q CaMeL Ty = current ;
rank: 331
score: 98.92100306919643
patch: q CaMeL Ty ( residuals , lm CaMeL Par , objective ) ;
rank: 332
score: 99.1405388327206
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point , objective ) ;
rank: 332
score: 99.1051534016927
patch: q CaMeL Ty ( residuals ) ; current = this ;
rank: 332
score: 99.05716705322266
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += 0 . $NUMBER$ ;
rank: 332
score: 99.0203348795573
patch: q CaMeL Ty ( ) . residuals ( ) ; ;
rank: 332
score: 98.98724772135417
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty ( residuals ) ;
rank: 332
score: 98.92064819335937
patch: q CaMeL Ty ( cost , objective ) ;
rank: 332
score: 98.87884990985577
patch: q CaMeL Ty [ residuals ] = new q CaMeL Ty ;
rank: 333
score: 99.05675159801136
patch: ( x CaMeL Norm , x CaMeL Norm ) ;
rank: 333
score: 99.02010091145833
patch: q CaMeL Ty = residuals ( residuals ) / $NUMBER$ ;
rank: 333
score: 98.987060546875
patch: q CaMeL Ty ( ) ; } q CaMeL Ty ( residuals ) ;
rank: 333
score: 98.92036655970982
patch: q CaMeL Ty ( residuals , first CaMeL Iteration , residuals ) ;
rank: 333
score: 98.8783467610677
patch: q CaMeL Ty [ - 1 ] = residuals ) ;
rank: 334
score: 99.01998197115384
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty ; ;
rank: 334
score: 98.94065163352273
patch: q CaMeL Ty ( ) ; ) ; ) ;
rank: 334
score: 98.92022705078125
patch: q CaMeL Ty ( objective ) ; update CaMeL Jacobian ( ) ;
rank: 334
score: 98.9117940266927
patch: q CaMeL Ty ( q CaMeL Ty , true ) ;
rank: 334
score: 98.8781268780048
patch: q CaMeL Ty = this . q CaMeL Ty = residuals ;
rank: 335
score: 99.05641174316406
patch: if ( cost == 0 ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 335
score: 99.04636928013393
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) 0 ;
rank: 335
score: 99.01915394176136
patch: q CaMeL Ty += q CaMeL Ty ( ) ;
rank: 335
score: 98.93929349459134
patch: q CaMeL Ty = residuals . length ; q CaMeL Ty ;
rank: 335
score: 98.91168212890625
patch: q CaMeL Ty [ 0 ] [ residuals ] ++ ;
rank: 335
score: 98.87743030894886
patch: q CaMeL Ty ( residuals ) ; return false ;
rank: 336
score: 99.01882699819711
patch: q CaMeL Ty ( residuals ) q CaMeL Ty ( ) ;
rank: 336
score: 98.98597005208333
patch: q CaMeL Ty ( residuals residuals ) ; q CaMeL Ty ( ) ;
rank: 336
score: 98.93924654447116
patch: q CaMeL Ty ( residuals ( residuals residuals null ) ) ;
rank: 337
score: 99.04453688401442
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current .
rank: 337
score: 99.01859741210937
patch: q CaMeL Ty ( residuals , residuals , ;
rank: 337
score: 98.98580932617188
patch: q CaMeL Ty ( residuals , residuals , current ) ;
rank: 337
score: 98.9383544921875
patch: q CaMeL Ty ( residuals ) ; ) ; else
rank: 337
score: 98.91917201450893
patch: q CaMeL Ty ( residuals , diag , first CaMeL Iteration ) ;
rank: 338
score: 99.13857134650735
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ) ; }
rank: 338
score: 99.10357055664062
patch: = 0 ; update CaMeL Jacobian ( ) ;
rank: 338
score: 99.05523274739583
patch: if ( true ) { increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 338
score: 99.01852416992188
patch: q CaMeL Ty . q CaMeL Ty ( ) ; ;
rank: 338
score: 98.98511555989583
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ) ; break ;
rank: 338
score: 98.9183349609375
patch: reset ( ) ; qr CaMeL Decomposition ( ) ;
rank: 338
score: 98.87601412259616
patch: q CaMeL Ty = true ; q CaMeL Ty = residuals ;
rank: 339
score: 99.13698443244485
patch: q CaMeL Ty = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 339
score: 99.10319249770221
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ; ;
rank: 339
score: 99.04390171595982
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 1 ;
rank: 339
score: 99.01803588867188
patch: q CaMeL Ty ( ) ) ;
rank: 339
score: 98.98485514322917
patch: q CaMeL Ty ( true ) ; q CaMeL Ty ( false ) ;
rank: 339
score: 98.93678792317708
patch: q CaMeL Ty ( residuals . ( 1 ) ) ;
rank: 339
score: 98.91795654296875
patch: q CaMeL Ty ( residuals ) ; finally {
rank: 339
score: 98.910888671875
patch: q CaMeL Ty = new ) ;
rank: 340
score: 99.13424682617188
patch: double [ ] old CaMeL X = current . new double [ cols ] ;
rank: 340
score: 99.0533088235294
patch: increment CaMeL Iterations CaMeL Counter ( ) ; / / lm CaMeL Par = 0 ;
rank: 340
score: 99.04281180245536
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair current ) ;
rank: 340
score: 99.01798189603366
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ; ;
rank: 340
score: 98.98401692708333
patch: q CaMeL Ty = new int [ q CaMeL Ty . length ] ;
rank: 340
score: 98.93631998697917
patch: q CaMeL Ty ( residuals ) ; residuals catch ( +
rank: 340
score: 98.91748046875
patch: q CaMeL Ty ( residuals , old CaMeL X , permutation ) ;
rank: 340
score: 98.90997869318181
patch: q CaMeL Ty = q CaMeL Ty ; break ;
rank: 340
score: 98.8742167154948
patch: } else { q CaMeL Ty ( residuals ) ; }
rank: 341
score: 99.10309709821429
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = this ;
rank: 341
score: 99.0426737467448
patch: delta = ( double [ ] ) lm CaMeL Dir ;
rank: 341
score: 99.01789202008929
patch: = q CaMeL Ty ) ;
rank: 341
score: 98.98360770089286
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += 0 ;
rank: 341
score: 98.93616832386364
patch: q CaMeL Ty = residuals . trim ( ) ;
rank: 341
score: 98.91691080729167
patch: while ( true ) { update CaMeL Jacobian ( ) ;
rank: 341
score: 98.8741963704427
patch: q CaMeL Ty [ 1 ] = residuals ( ) ;
rank: 342
score: 99.13385881696429
patch: double Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ;
rank: 342
score: 99.04183523995536
patch: return new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous ;
rank: 342
score: 98.93607584635417
patch: q CaMeL Ty ( residuals ( ) + 1 ) ;
rank: 342
score: 98.9168212890625
patch: if ( first CaMeL Iteration ) return current ;
rank: 342
score: 98.90883382161458
patch: q CaMeL Ty = new int [ residuals ++ ] ;
rank: 343
score: 99.13331017127403
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = true ;
rank: 343
score: 99.1026123046875
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = current ;
rank: 343
score: 99.04173060825893
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( null ) ;
rank: 343
score: 98.93567911783855
patch: q CaMeL Ty = residuals . split ( residuals ) ;
rank: 343
score: 98.90842692057292
patch: q CaMeL Ty = q CaMeL Ty [ true ] ;
rank: 344
score: 99.13243001302084
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current + permutation ;
rank: 344
score: 99.10176595052083
patch: q CaMeL Ty ( residuals , q CaMeL Ty ) ; qr CaMeL Decomposition ( ) ;
rank: 344
score: 99.05097198486328
patch: q CaMeL Ty ( residuals ) ; / / qr CaMeL Decomposition ( ) ;
rank: 344
score: 99.01668294270833
patch: q CaMeL Ty [ 0 ] ( residuals ) ; ;
rank: 344
score: 98.93520285866477
patch: q CaMeL Ty ( residuals ( ) ) ) ;
rank: 344
score: 98.91587611607143
patch: q CaMeL Ty ( cost ) ; update CaMeL Jacobian ( ) ;
rank: 344
score: 98.90802001953125
patch: q CaMeL Ty ( $NUMBER$ , residuals , residuals ) ;
rank: 344
score: 98.87037150065105
patch: q CaMeL Ty = residuals ( residuals ) residuals $NUMBER$ ;
rank: 345
score: 99.13224792480469
patch: q CaMeL Ty = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 345
score: 99.0406494140625
patch: q CaMeL Ty ( residuals ) ; delta = 1 . 0 ;
rank: 345
score: 99.01621657151442
patch: q CaMeL Ty 1 = q CaMeL Ty ( residuals ) ;
rank: 345
score: 98.98185221354167
patch: q CaMeL Ty = new Double [ q CaMeL Ty . length ] ;
rank: 345
score: 98.93475811298077
patch: q CaMeL Ty = residuals ; q CaMeL Ty = residuals .
rank: 345
score: 98.91534830729167
patch: if ( qr CaMeL Decomposition != null ) qr CaMeL Decomposition ( ) ;
rank: 345
score: 98.90757057883523
patch: q CaMeL Ty ( new q CaMeL Ty ) ;
rank: 345
score: 98.87009684244792
patch: * * * / q CaMeL Ty ( residuals ) ;
rank: 346
score: 99.10128445095486
patch: q CaMeL Ty ( residuals ) ; throw new Function CaMeL Evaluation CaMeL Exception ( ) ;
rank: 346
score: 99.05023193359375
patch: = 0 ; qr CaMeL Decomposition ( ) ;
rank: 346
score: 99.01531512920673
patch: q CaMeL Ty [ 0 ] = residuals . get ) ;
rank: 346
score: 98.9343770345052
patch: q CaMeL Ty ( residuals , residuals . length ) ;
rank: 346
score: 98.91324055989584
patch: m = update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 346
score: 98.90613810221355
patch: q CaMeL Ty = new byte [ residuals 1 ] ;
rank: 346
score: 98.86993963068181
patch: q CaMeL Ty ( q CaMeL Ty residuals ) ;
rank: 347
score: 99.13060651506696
patch: q CaMeL Ty ( old CaMeL X , x CaMeL Norm ) ;
rank: 347
score: 99.10120913856908
patch: q CaMeL Ty ( ) ; if ( true ) increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 347
score: 99.05017807904412
patch: increment CaMeL Iterations CaMeL Counter ( ) ; x CaMeL Norm += 0 . 1 ;
rank: 347
score: 99.03696695963542
patch: q CaMeL Ty ( residuals , residuals , objective ) ;
rank: 347
score: 99.01509232954545
patch: q CaMeL Ty [ residuals ) ] = residuals ;
rank: 347
score: 98.98098520132211
patch: q CaMeL Ty ( residuals $NUMBER$ , q CaMeL Ty ) ;
rank: 347
score: 98.91279296875
patch: q CaMeL Ty ( ) ; if ( qr CaMeL Decomposition ( ) )
rank: 348
score: 99.1010272686298
patch: q CaMeL Ty ( ) ; lm CaMeL Par = ) ;
rank: 348
score: 99.04986165364583
patch: q CaMeL Ty ( ) ; x CaMeL Norm += $NUMBER$ . 0 ;
rank: 348
score: 99.03600202287946
patch: q CaMeL Ty ( residuals ) ; current = 0 . 0 ;
rank: 348
score: 99.0135830965909
patch: = q CaMeL Ty ( residuals ) ; * /
rank: 348
score: 98.98097737630208
patch: q CaMeL Ty -- ; q CaMeL Ty ( ) ;
rank: 348
score: 98.93399047851562
patch: q CaMeL Ty q CaMeL Ty ( residuals ) ; ;
rank: 348
score: 98.91265462239583
patch: head = update CaMeL Jacobian ( ) ; qr CaMeL Decomposition ( ) ;
rank: 348
score: 98.9046122233073
patch: q CaMeL Ty = new double [ residuals 1 ] ;
rank: 348
score: 98.8697021484375
patch: q CaMeL Ty = residuals [ $NUMBER$ ] ;
rank: 349
score: 99.0350341796875
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ;
rank: 349
score: 98.98080240885416
patch: q CaMeL Ty ( residuals , residuals ) ; q CaMeL Ty ++ ;
rank: 349
score: 98.93392944335938
patch: q CaMeL Ty ( residuals . 0 - 1 ) ;
rank: 349
score: 98.91263020833334
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( , ) ;
rank: 349
score: 98.90455118815105
patch: q CaMeL Ty = q CaMeL Ty [ length ] ;
rank: 350
score: 99.12867838541666
patch: q CaMeL Ty ( residuals ) ; } x CaMeL Norm = 0 ;
rank: 350
score: 99.04852294921875
patch: q CaMeL Ty ( point , point , objective ) ;
rank: 350
score: 99.01219764122597
patch: q CaMeL Ty ( residuals ) ; residuals ( ) ; }
rank: 350
score: 98.98065185546875
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += $NUMBER$ ;
rank: 350
score: 98.93366033380681
patch: q CaMeL Ty ( residuals , 0 , ) ;
rank: 350
score: 98.91229248046875
patch: if ( increment CaMeL Iterations CaMeL Counter ( ) == 0 ) {
rank: 350
score: 98.90444113991477
patch: ( new int [ ] { residuals } ) ;
rank: 350
score: 98.86778767903645
patch: q CaMeL Ty = new byte [ residuals ] ; }
rank: 351
score: 99.048388671875
patch: q CaMeL Ty ( this , objective ) ;
rank: 351
score: 99.03468674879808
patch: return ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) ;
rank: 351
score: 98.91058904474431
patch: q CaMeL Ty ( residuals ) ; if ( )
rank: 351
score: 98.90371704101562
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty ;
rank: 351
score: 98.86745198567708
patch: q CaMeL Ty = new String [ residuals ] ; }
rank: 352
score: 99.12814767020089
patch: if ( first CaMeL Iteration ) { if ( first CaMeL Iteration )
rank: 352
score: 99.04833984375
patch: q CaMeL Ty ( residuals ) ; / * boolean first CaMeL Iteration = true ;
rank: 352
score: 99.0118741122159
patch: . q CaMeL Ty ( residuals , residuals ) ;
rank: 352
score: 98.97885131835938
patch: [ 0 ] = old CaMeL X [ residuals ] ;
rank: 352
score: 98.93250621448864
patch: q CaMeL Ty ( residuals ) ; residuals = ;
rank: 352
score: 98.91057942708333
patch: i = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 352
score: 98.90335083007812
patch: q CaMeL Ty residuals = this . q CaMeL Ty ;
rank: 353
score: 99.1279629794034
patch: q CaMeL Ty = new double [ rows ] ;
rank: 353
score: 99.01153009588069
patch: ( ) . q CaMeL Ty ( residuals ) ;
rank: 353
score: 98.97881525213069
patch: q CaMeL Ty ( - 1 , residuals ) ;
rank: 353
score: 98.93201622596153
patch: q CaMeL Ty ( residuals [ residuals - 1 ] ) ;
rank: 353
score: 98.91018240792411
patch: q CaMeL Ty ( residuals ) + update CaMeL Jacobian ( ) ;
rank: 353
score: 98.86739408052884
patch: q CaMeL Ty ( ( float [ ] ) residuals ) ;
rank: 354
score: 99.12729317801339
patch: q CaMeL Ty ( increment CaMeL Iterations CaMeL Counter ( ) ) ;
rank: 354
score: 99.09982735770089
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = true ;
rank: 354
score: 99.03239302201705
patch: increment CaMeL Iterations CaMeL Counter ( ) ; * /
rank: 354
score: 98.97845865885417
patch: q CaMeL Ty [ 0 ] += q CaMeL Ty [ 0 ] ;
rank: 354
score: 98.93064371744792
patch: q CaMeL Ty ( residuals ( ) , 1 ) ;
rank: 354
score: 98.90287642045455
patch: q CaMeL Ty = new q CaMeL Ty residuals ;
rank: 354
score: 98.86729939778645
patch: q CaMeL Ty = residuals residuals [ - 1 ] ;
rank: 355
score: 99.09937286376953
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 . ) ;
rank: 355
score: 99.0106709798177
patch: q CaMeL Ty = residuals ( residuals ) - 1 ;
rank: 355
score: 98.97795758928571
patch: q CaMeL Ty ( residuals ) ; current = current . residuals ;
rank: 355
score: 98.93033854166667
patch: q CaMeL Ty ( residuals == 0 , residuals ) ;
rank: 355
score: 98.91008649553571
patch: boolean first CaMeL Iteration = true ; update CaMeL Jacobian ( ) ;
rank: 355
score: 98.90276421440973
patch: q CaMeL Ty residuals ( residuals ) ;
rank: 356
score: 99.12664794921875
patch: q CaMeL Ty ( new double [ cols ] , jac CaMeL Norm ) ;
rank: 356
score: 99.09935651506696
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm ( ) ;
rank: 356
score: 99.04585266113281
patch: q CaMeL Ty [ 0 ] = current ; update CaMeL Jacobian ( ) ;
rank: 356
score: 99.0312832919034
patch: x CaMeL Norm = new double [ cols ] ;
rank: 356
score: 99.0096435546875
patch: if ( residuals ) q CaMeL Ty ( residuals ) ;
rank: 356
score: 98.97783203125
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = - 1 ;
rank: 356
score: 98.93032004616477
patch: q CaMeL Ty q CaMeL Ty = residuals ) ;
rank: 356
score: 98.90964181082589
patch: q CaMeL Ty ( residuals ) : update CaMeL Jacobian ( ) ;
rank: 356
score: 98.86668904622395
patch: q CaMeL Ty = ( char [ ] ) residuals ;
rank: 357
score: 99.1263671875
patch: while ( true ) { increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 357
score: 99.03111049107143
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; }
rank: 357
score: 99.0094502766927
patch: q CaMeL Ty ( residuals ) ; * / * /
rank: 357
score: 98.9302978515625
patch: q CaMeL Ty = residuals ( ) ; ) ;
rank: 357
score: 98.90955403645833
patch: if ( update CaMeL Jacobian ( ) ) update CaMeL Jacobian ( ) ;
rank: 357
score: 98.9020487467448
patch: q CaMeL Ty ( q CaMeL Ty - residuals ) ;
rank: 357
score: 98.8659335049716
patch: q CaMeL Ty = new boolean [ residuals ] ;
rank: 358
score: 99.09872097439236
patch: ( residuals ) ; x CaMeL Norm = Math . sqrt ( x CaMeL Norm ) ;
rank: 358
score: 99.0447265625
patch: delta = ( double [ ] ) previous ;
rank: 358
score: 99.03107561383929
patch: q CaMeL Ty ( residuals , new double [ cols ] ) ;
rank: 358
score: 98.93023681640625
patch: q CaMeL Ty ( residuals [ 0 ] ) ; ;
rank: 358
score: 98.90946044921876
patch: q CaMeL Ty ( residuals , $STRING$ ) ;
rank: 358
score: 98.86515299479167
patch: q CaMeL Ty ( new String ( residuals ) ) ;
rank: 359
score: 99.00856711647727
patch: = q CaMeL Ty ( ) ; if ( ;
rank: 359
score: 98.97689615885416
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( ) ) ;
rank: 359
score: 98.9301424893466
patch: q CaMeL Ty ( residuals ( ) , ) ;
rank: 359
score: 98.90828159877232
patch: q CaMeL Ty ( ) ; if ( qr CaMeL Decomposition ) {
rank: 359
score: 98.90163352272727
patch: q CaMeL Ty ; q CaMeL Ty = false ;
rank: 359
score: 98.86490572415866
patch: q CaMeL Ty ( residuals , residuals ) ; return false ;
rank: 360
score: 99.1248779296875
patch: lm CaMeL Par = Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 360
score: 99.0975277549342
patch: q CaMeL Ty ( ) ; Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current .
rank: 360
score: 99.04446411132812
patch: if ( x CaMeL Norm == 0 ) { qr CaMeL Decomposition ( ) ;
rank: 360
score: 99.00838623046874
patch: * / q CaMeL Ty ( residuals ) ;
rank: 361
score: 99.12398274739583
patch: q CaMeL Ty ++ ; update CaMeL Jacobian ( ) ;
rank: 361
score: 99.09678248355263
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = Math . sqrt ( diag ) ;
rank: 361
score: 99.04422760009766
patch: x CaMeL Norm = 0 . 0 ; if ( first CaMeL Iteration ) {
rank: 361
score: 99.0082256610577
patch: q CaMeL Ty ( residuals ) ; ; residuals ( ) ;
rank: 361
score: 98.97662353515625
patch: q CaMeL Ty [ residuals ] = 0 ;
rank: 361
score: 98.90682983398438
patch: if ( cost == 0 ) {
rank: 362
score: 99.09662334735577
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm ++ ;
rank: 362
score: 99.04378568209134
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 0 ;
rank: 362
score: 98.92938232421875
patch: q CaMeL Ty = residuals = q CaMeL Ty ) ;
rank: 362
score: 98.90618896484375
patch: if ( ) qr CaMeL Decomposition ( ) ;
rank: 362
score: 98.8989590731534
patch: q CaMeL Ty ; q CaMeL Ty = true ;
rank: 362
score: 98.863671875
patch: q CaMeL Ty ( ) ; break ; }
rank: 363
score: 99.12147013346355
patch: q CaMeL Ty ( new double [ cols ] ) ;
rank: 363
score: 99.04364013671875
patch: if ( first CaMeL Iteration ) { q CaMeL Ty = 0 ;
rank: 363
score: 98.97620567908653
patch: q CaMeL Ty ( residuals 1 , q CaMeL Ty ) ;
rank: 363
score: 98.9287442294034
patch: else q CaMeL Ty ( residuals ) ; ) ;
rank: 363
score: 98.9061767578125
patch: q CaMeL Ty ( residuals ) ; current ;
rank: 363
score: 98.8989013671875
patch: q CaMeL Ty ( null , residuals ) ;
rank: 363
score: 98.863525390625
patch: q CaMeL Ty ( ) ; for ( ; ; )
rank: 364
score: 99.12076009114584
patch: q CaMeL Ty ( residuals ) ; } if ( first CaMeL Iteration )
rank: 364
score: 99.04353601792279
patch: if ( first CaMeL Iteration ) { increment CaMeL Iterations CaMeL Counter ( $NUMBER$ ) ;
rank: 364
score: 99.00501505533855
patch: = residuals ( residuals ) . get ( residuals ) ;
rank: 364
score: 98.9761454264323
patch: [ 0 ] = q CaMeL Ty [ residuals ] ;
rank: 364
score: 98.9285419170673
patch: q CaMeL Ty ( ) ; ( ( ) residuals ) .
rank: 364
score: 98.90505545479911
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( ) :
rank: 364
score: 98.8986483487216
patch: q CaMeL Ty = q CaMeL Ty residuals ) ;
rank: 365
score: 99.12002328725961
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = false ;
rank: 365
score: 99.00455416165866
patch: q CaMeL Ty *= residuals ; q CaMeL Ty ( ) ;
rank: 365
score: 98.92852783203125
patch: q CaMeL Ty = residuals . } q CaMeL Ty ;
rank: 365
score: 98.90501302083334
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( this ) ;
rank: 365
score: 98.86278187144886
patch: q CaMeL Ty = residuals ( residuals ) true ;
rank: 366
score: 99.0431884765625
patch: if ( first CaMeL Iteration ) { boolean first CaMeL Iteration = true ;
rank: 366
score: 99.02431233723958
patch: q CaMeL Ty ( residuals , this , objective ) ;
rank: 366
score: 98.97515314275569
patch: [ 0 ] = q CaMeL Ty ( ) ;
rank: 366
score: 98.92844801682692
patch: q CaMeL Ty ( residuals ) ; ) ; ) ; }
rank: 366
score: 98.89828491210938
patch: ( new ) ; q CaMeL Ty ( residuals ) ;
rank: 367
score: 99.11961780894886
patch: q CaMeL Ty = new int [ cols ] ;
rank: 367
score: 99.09556070963542
patch: q CaMeL Ty ( residuals ) ; current = null ;
rank: 367
score: 99.04292805989583
patch: = ( double [ ] ) current ;
rank: 367
score: 99.02367146809895
patch: delta = ( int [ ] ) solved CaMeL Cols ;
rank: 367
score: 99.00440562855114
patch: q CaMeL Ty . residuals ( residuals ) ; ;
rank: 367
score: 98.92771911621094
patch: q CaMeL Ty ( residuals ) throws
rank: 367
score: 98.90457153320312
patch: if ( cost != 0 && first CaMeL Iteration ) {
rank: 367
score: 98.89553833007812
patch: } q CaMeL Ty = q CaMeL Ty ;
rank: 367
score: 98.86173872514205
patch: q CaMeL Ty ( q CaMeL Ty $NUMBER$ ) ;
rank: 368
score: 99.11861746651786
patch: q CaMeL Ty ( ) ; x CaMeL Norm = 0 ; }
rank: 368
score: 98.97349446614584
patch: q CaMeL Ty [ ) ] = q CaMeL Ty [ 1 ] ;
rank: 368
score: 98.92745971679688
patch: q CaMeL Ty ( residuals , 0 , 1 ) ;
rank: 368
score: 98.90454915364583
patch: q CaMeL Ty ( residuals ) ; return update CaMeL Jacobian ( ) ;
rank: 368
score: 98.89539683948864
patch: q CaMeL Ty = new int [ $NUMBER$ ] ;
rank: 369
score: 99.09389919704861
patch: q CaMeL Ty ( residuals ) ; increment CaMeL Iterations CaMeL Counter ( ) ; break ;
rank: 369
score: 99.04241180419922
patch: boolean first CaMeL Iteration = true ;
rank: 369
score: 99.00385131835938
patch: q CaMeL Ty ( residuals ) ; * ;
rank: 369
score: 98.97335611979166
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals 1 ) ;
rank: 369
score: 98.92742919921875
patch: q CaMeL Ty ; q CaMeL Ty ( ) ; }
rank: 369
score: 98.90426432291666
patch: r = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 369
score: 98.8944979580966
patch: q CaMeL Ty = q CaMeL Ty = null ;
rank: 369
score: 98.86023966471355
patch: q CaMeL Ty [ 0 ] = residuals ; break ;
rank: 370
score: 99.11751883370536
patch: q CaMeL Ty [ 0 ] = new double [ cols ] ;
rank: 370
score: 99.04205322265625
patch: q CaMeL Ty ( residuals , lm CaMeL Dir , delta ) ;
rank: 370
score: 99.00370279947917
patch: $NUMBER$ . q CaMeL Ty ( residuals , residuals ) ;
rank: 370
score: 98.97328404017857
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ 1 ;
rank: 370
score: 98.9274190266927
patch: q CaMeL Ty ( residuals . length - $NUMBER$ ) ;
rank: 370
score: 98.89401681082589
patch: ( 0 , residuals ) ;
rank: 370
score: 98.8602294921875
patch: q CaMeL Ty = residuals ( 1 , residuals ) ;
rank: 371
score: 99.11613464355469
patch: x CaMeL Norm = Math . sqrt ( x CaMeL Norm == 0 ) ?
rank: 371
score: 99.0215313251202
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = 0 ;
rank: 371
score: 99.00337727864583
patch: q CaMeL Ty ( residuals ) ; / * * ;
rank: 371
score: 98.9730224609375
patch: q CaMeL Ty ( double [ ] ) ;
rank: 371
score: 98.92711292613636
patch: q CaMeL Ty ( residuals [ true ] ) ;
rank: 371
score: 98.90399169921875
patch: q CaMeL Ty ( residuals , update CaMeL Jacobian , residuals ) ;
rank: 371
score: 98.8934659090909
patch: q CaMeL Ty q CaMeL Ty residuals ( ) ;
rank: 371
score: 98.86020729758523
patch: q CaMeL Ty [ $NUMBER$ ] = residuals ) ;
rank: 372
score: 99.11480305989583
patch: q CaMeL Ty ( ) ; x CaMeL Norm = x CaMeL Norm ;
rank: 372
score: 99.09347195095486
patch: q CaMeL Ty ( residuals ) ; current = current . update CaMeL Jacobian ( ) ;
rank: 372
score: 98.9720458984375
patch: q CaMeL Ty ( ( int [ ] ) q CaMeL Ty ) ;
rank: 372
score: 98.9270731608073
patch: q CaMeL Ty ( residuals . length - 0 ) ;
rank: 372
score: 98.90379987444196
patch: q CaMeL Ty ( residuals , lm CaMeL Dir , objective ) ;
rank: 372
score: 98.89144897460938
patch: q CaMeL Ty = q CaMeL Ty [ false ] ;
rank: 373
score: 99.04097254136029
patch: double [ ] old CaMeL X = Math . sqrt ( x CaMeL Norm ) ;
rank: 373
score: 99.0021084872159
patch: q CaMeL Ty ++ ; q CaMeL Ty ++ ;
rank: 373
score: 98.971826171875
patch: = q CaMeL Ty [ residuals ] ; q CaMeL Ty ( ) ;
rank: 373
score: 98.9265645345052
patch: q CaMeL Ty ( residuals . 0 , residuals ) ;
rank: 373
score: 98.90342494419643
patch: q CaMeL Ty ( residuals ) + first CaMeL Iteration = true ;
rank: 373
score: 98.89100138346355
patch: q CaMeL Ty ( q CaMeL Ty , false ) ;
rank: 373
score: 98.85903098366477
patch: } q CaMeL Ty ( residuals , residuals ) ;
rank: 374
score: 99.09310477120536
patch: qr CaMeL Decomposition ( ) ; boolean first CaMeL Iteration = false ;
rank: 374
score: 99.00187174479167
patch: q CaMeL Ty ( residuals ) . ;
rank: 374
score: 98.92629770132211
patch: q CaMeL Ty = residuals . index CaMeL Of ( ) ;
rank: 374
score: 98.90255972055289
patch: if ( first CaMeL Iteration && update CaMeL Jacobian ( ) )
rank: 374
score: 98.85870361328125
patch: q CaMeL Ty = residuals ; break ; }
rank: 375
score: 99.114404296875
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = 0 ; }
rank: 375
score: 99.09290422712054
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = $NUMBER$ ;
rank: 375
score: 99.04041341145833
patch: if ( first CaMeL Iteration ) { qr CaMeL Decomposition ( false ) ;
rank: 375
score: 99.00177001953125
patch: q CaMeL Ty ( new double [ residuals ] ) ;
rank: 375
score: 98.97142740885417
patch: q CaMeL Ty ( residuals , q CaMeL Ty [ 0 ] ) ;
rank: 375
score: 98.92626014122597
patch: q CaMeL Ty ( residuals ) ; } q CaMeL Ty ;
rank: 375
score: 98.90224880642361
patch: finally { qr CaMeL Decomposition ( ) ;
rank: 375
score: 98.89052512428977
patch: q CaMeL Ty = q CaMeL Ty != $NUMBER$ ;
rank: 375
score: 98.85623168945312
patch: q CaMeL Ty = residuals ( residuals ) / false ;
rank: 376
score: 99.00152118389423
patch: = q CaMeL Ty ; q CaMeL Ty ( ) ; ;
rank: 376
score: 98.92454020182292
patch: q CaMeL Ty ) ; q CaMeL Ty = residuals ;
rank: 376
score: 98.90140380859376
patch: q CaMeL Ty ( current , objective ) ;
rank: 376
score: 98.8548075358073
patch: result = ( q CaMeL Ty ( residuals ) ) ;
rank: 377
score: 99.00115356445312
patch: = q CaMeL Ty . clone ( ) ;
rank: 377
score: 98.90108642578124
patch: q CaMeL Ty ( current , residuals ) ;
rank: 378
score: 99.09203084309895
patch: q CaMeL Ty ( residuals ) ; current = true ;
rank: 378
score: 99.01776123046875
patch: q CaMeL Ty ( residuals , current , objective ) ;
rank: 378
score: 99.0001690204327
patch: q CaMeL Ty ( ) / q CaMeL Ty ( ) ;
rank: 378
score: 98.9707539876302
patch: q CaMeL Ty [ residuals ] = current . residuals ;
rank: 378
score: 98.92435709635417
patch: q CaMeL Ty = Math . start ( residuals ) ;
rank: 378
score: 98.90057373046875
patch: q CaMeL Ty ( residuals , lm CaMeL Dir , residuals ) ;
rank: 378
score: 98.88880411783855
patch: q CaMeL Ty = ; q CaMeL Ty ( ) ;
rank: 379
score: 99.11318969726562
patch: q CaMeL Ty ( x CaMeL Norm ) ; if ( first CaMeL Iteration )
rank: 379
score: 99.03755405970982
patch: q CaMeL Ty ( point , objective , diag CaMeL R ) ;
rank: 379
score: 99.0150858561198
patch: q CaMeL Ty [ residuals ] = diag CaMeL R ;
rank: 379
score: 98.99896240234375
patch: q CaMeL Ty ( ) . ;
rank: 379
score: 98.92403157552083
patch: q CaMeL Ty ( residuals [ ) ;
rank: 379
score: 98.90038045247395
patch: q CaMeL Ty ( residuals ) ; System . finally {
rank: 379
score: 98.88868297230114
patch: q CaMeL Ty = q CaMeL Ty residuals residuals ;
rank: 379
score: 98.84949840198864
patch: q CaMeL Ty ( q CaMeL Ty ) ) ;
rank: 380
score: 99.11299896240234
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = diag [ permutation ] ;
rank: 380
score: 99.09158485814145
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; first CaMeL Iteration = true ;
rank: 380
score: 99.03738168569711
patch: if ( ) { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 380
score: 99.01446533203125
patch: q CaMeL Ty ( x CaMeL Norm , diag ) ;
rank: 380
score: 98.96993815104166
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty ( 0 ) ;
rank: 380
score: 98.92376708984375
patch: q CaMeL Ty ( ) ; ) ; }
rank: 380
score: 98.88863118489583
patch: q CaMeL Ty = new q CaMeL Ty ) ; ;
rank: 380
score: 98.84914328835227
patch: q CaMeL Ty = residuals residuals [ $NUMBER$ ] ;
rank: 381
score: 99.11284993489583
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = x CaMeL Norm ;
rank: 381
score: 99.03688267299107
patch: q CaMeL Ty ( x CaMeL Norm , point , objective ) ;
rank: 381
score: 99.01427612304687
patch: increment CaMeL Iterations CaMeL Counter ( 0 ) ;
rank: 381
score: 98.9
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( ) ; try
rank: 381
score: 98.88850541548295
patch: q CaMeL Ty residuals = q CaMeL Ty ) ;
rank: 381
score: 98.84885475852273
patch: residuals = new q CaMeL Ty ( residuals ) ;
rank: 382
score: 99.09091622488839
patch: q CaMeL Ty ( ) ; } lm CaMeL Par = 0 ;
rank: 382
score: 99.03647286551339
patch: if ( first CaMeL Iteration ) { diag = 1 . 0 ;
rank: 382
score: 99.01419771634616
patch: q CaMeL Ty ( residuals , new double [ cols ] ;
rank: 382
score: 98.99736993963069
patch: q CaMeL Ty ( residuals ) ; } * /
rank: 382
score: 98.8883389559659
patch: q CaMeL Ty = new int [ 0 ] ;
rank: 382
score: 98.84854125976562
patch: q CaMeL Ty = residuals [ residuals ] ;
rank: 383
score: 99.11182454427083
patch: q CaMeL Ty ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 383
score: 99.08992513020833
patch: q CaMeL Ty ( residuals ) ; previous = true ;
rank: 383
score: 99.03572300502232
patch: q CaMeL Ty ( point , objective , lm CaMeL Par ) ;
rank: 383
score: 98.99693714488636
patch: = q CaMeL Ty ; residuals ( residuals ) ;
rank: 383
score: 98.96619466145833
patch: q CaMeL Ty ( residuals [ 0 ] , q CaMeL Ty ) ;
rank: 383
score: 98.8988037109375
patch: if ( qr CaMeL Decomposition ( ) && first CaMeL Iteration )
rank: 383
score: 98.88831583658855
patch: } q CaMeL Ty = q CaMeL Ty ( ) ;
rank: 383
score: 98.84812418619792
patch: q CaMeL Ty ( true , residuals , residuals ) ;
rank: 384
score: 99.11173248291016
patch: q CaMeL Ty ( residuals ) ; } if ( first CaMeL Iteration ) {
rank: 384
score: 99.08961704799107
patch: q CaMeL Ty ( residuals ) boolean first CaMeL Iteration = true ;
rank: 384
score: 99.03490397135417
patch: if ( first CaMeL Iteration ) { qr CaMeL Decomposition ( true ) ;
rank: 384
score: 98.99657093394886
patch: = new q CaMeL Ty ( residuals ) ; ;
rank: 384
score: 98.96522623697916
patch: q CaMeL Ty [ 1 ] = q CaMeL Ty [ $NUMBER$ ] ;
rank: 384
score: 98.92164306640625
patch: q CaMeL Ty q CaMeL Ty = ) ;
rank: 384
score: 98.89869384765625
patch: if ( first CaMeL Iteration == true ) {
rank: 384
score: 98.88828531901042
patch: q CaMeL Ty ( q CaMeL Ty , 0 ) ;
rank: 384
score: 98.84804465553977
patch: q CaMeL Ty ( ( double ) residuals ) ;
rank: 385
score: 99.11132049560547
patch: if ( first CaMeL Iteration || first CaMeL Iteration || first CaMeL Iteration ) {
rank: 385
score: 99.08925083705357
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = $STRING$ ;
rank: 385
score: 99.00904337565105
patch: q CaMeL Ty ( residuals , objective , objective ) ;
rank: 385
score: 98.99643961588542
patch: 1 . q CaMeL Ty ( residuals , residuals ) ;
rank: 385
score: 98.9214375813802
patch: q CaMeL Ty ( residuals + 0 , residuals ) ;
rank: 386
score: 99.03451974051339
patch: q CaMeL Ty ( residuals , lm CaMeL Par , delta ) ;
rank: 386
score: 98.99559607872597
patch: q CaMeL Ty = residuals ) . get ( residuals ) ;
rank: 386
score: 98.96499837239584
patch: q CaMeL Ty [ 0 ] = q CaMeL Ty [ residuals ) ;
rank: 386
score: 98.92066786024306
patch: else ; q CaMeL Ty ( ) ;
rank: 386
score: 98.89842006138393
patch: q CaMeL Ty ( residuals , old CaMeL Res , 0 ) ;
rank: 387
score: 99.110107421875
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ) ;
rank: 387
score: 99.03446742466518
patch: lm CaMeL Par = 0 ; boolean first CaMeL Iteration = 0 ;
rank: 387
score: 99.00870455228366
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = diag ;
rank: 387
score: 98.99527681790866
patch: q CaMeL Ty [ q CaMeL Ty ) ] = ) ;
rank: 387
score: 98.96483357747395
patch: q CaMeL Ty ( residuals $NUMBER$ , residuals 1 ) ;
rank: 387
score: 98.92060990767045
patch: q CaMeL Ty ( residuals ) ; ; else ;
rank: 387
score: 98.89834255642361
patch: this . qr CaMeL Decomposition ( ) ;
rank: 387
score: 98.8863016764323
patch: q CaMeL Ty = new int [ residuals ] ; ;
rank: 387
score: 98.84651322798295
patch: q CaMeL Ty = new Integer ( residuals ) ;
rank: 388
score: 98.99385209517045
patch: q CaMeL Ty [ residuals ) ] ( ) ;
rank: 388
score: 98.92043050130208
patch: q CaMeL Ty = residuals ; ) ;
rank: 388
score: 98.89817708333334
patch: result = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 388
score: 98.88587535511364
patch: q CaMeL Ty = q CaMeL Ty == 0 ;
rank: 389
score: 99.10970365084134
patch: q CaMeL Ty ( residuals [ 0 ] , 0 ) ;
rank: 389
score: 99.08756510416667
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += diag CaMeL R . max ;
rank: 389
score: 99.03302408854167
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 0 . $NUMBER$ ;
rank: 389
score: 99.00728149414063
patch: q CaMeL Ty ( residuals ) ; / ;
rank: 389
score: 98.9931884765625
patch: q CaMeL Ty ++ residuals ( residuals ) ;
rank: 389
score: 98.9199930826823
patch: q CaMeL Ty = residuals . get ( residuals ) ;
rank: 389
score: 98.89773995535714
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( ) ; }
rank: 389
score: 98.88538707386364
patch: q CaMeL Ty = q CaMeL Ty == $NUMBER$ ;
rank: 389
score: 98.84438254616477
patch: q CaMeL Ty [ start ++ ] = residuals ;
rank: 390
score: 99.10914713541666
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = current + 0 ;
rank: 390
score: 99.03223765980114
patch: delta = 0 ; qr CaMeL Decomposition ( ) ;
rank: 390
score: 99.00660196940105
patch: q CaMeL Ty ) ; qr CaMeL Decomposition ( ) ;
rank: 390
score: 98.964111328125
patch: q CaMeL Ty [ 1 ] = old CaMeL X [ 0 ] ;
rank: 390
score: 98.919677734375
patch: q CaMeL Ty ( residuals , 0 ) ; ) ;
rank: 390
score: 98.897607421875
patch: if ( first CaMeL Iteration || true ) {
rank: 390
score: 98.8851318359375
patch: q CaMeL Ty residuals = ( q CaMeL Ty ) ;
rank: 390
score: 98.84426879882812
patch: q CaMeL Ty ( false , residuals , residuals ) ;
rank: 391
score: 99.00450721153847
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration ++ ;
rank: 391
score: 98.99203491210938
patch: q CaMeL Ty ( ) ; residuals ( ) ; ;
rank: 391
score: 98.9640869140625
patch: q CaMeL Ty [ 0 ] = 1 ;
rank: 391
score: 98.91916910807292
patch: q CaMeL Ty q CaMeL Ty = residuals ( ) ;
rank: 391
score: 98.89614432198661
patch: q CaMeL Ty ( residuals , old CaMeL X , delta ) ;
rank: 391
score: 98.88485717773438
patch: q CaMeL Ty ) ; q CaMeL Ty ;
rank: 391
score: 98.84360758463542
patch: q CaMeL Ty = residuals ( residuals ) - 0 ;
rank: 392
score: 99.086669921875
patch: q CaMeL Ty ( residuals , diag , x CaMeL Norm ) ;
rank: 392
score: 99.03179524739583
patch: = ( double [ ] ) current . get CaMeL Value ( ) ;
rank: 392
score: 99.0025126139323
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( point ) ;
rank: 392
score: 98.9920184795673
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty [ ;
rank: 392
score: 98.91739908854167
patch: q CaMeL Ty ( residuals , 0 , $NUMBER$ ) ;
rank: 392
score: 98.89579467773437
patch: q CaMeL Ty ( current , current ) ;
rank: 392
score: 98.88472493489583
patch: q CaMeL Ty = this . q CaMeL Ty ; }
rank: 392
score: 98.8433504971591
patch: q CaMeL Ty ( ) ; residuals = true ;
rank: 393
score: 99.10740559895834
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current . null ;
rank: 393
score: 99.08661760602679
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = null ;
rank: 393
score: 98.99735514322917
patch: x CaMeL Norm = Math . max ( diag ) ;
rank: 394
score: 99.10731608072916
patch: q CaMeL Ty = Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 394
score: 99.08617485894098
patch: q CaMeL Ty ( residuals ) ; / / increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 394
score: 98.99651630108173
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = false ;
rank: 394
score: 98.99068196614583
patch: q CaMeL Ty ( ) . ; residuals ( ) ;
rank: 394
score: 98.9625244140625
patch: q CaMeL Ty ++ ; q CaMeL Ty ( residuals , residuals ) ;
rank: 394
score: 98.89540452223558
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) .
rank: 394
score: 98.88418579101562
patch: q CaMeL Ty = ( q CaMeL Ty ) ; ;
rank: 394
score: 98.8416748046875
patch: q CaMeL Ty = ( Object [ ] ) residuals ;
rank: 395
score: 99.10725911458333
patch: delta = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ) ;
rank: 395
score: 99.08616807725694
patch: q CaMeL Ty ( residuals , lm CaMeL Dir , delta , diag CaMeL R ) ;
rank: 395
score: 99.03089192708333
patch: increment CaMeL Iterations CaMeL Counter ( ) ; lm CaMeL Par = current ;
rank: 395
score: 98.99622192382813
patch: increment CaMeL Iterations CaMeL Counter ( ) ; }
rank: 395
score: 98.9899658203125
patch: = q CaMeL Ty residuals ( residuals ) ;
rank: 395
score: 98.96187744140624
patch: q CaMeL Ty [ residuals ] ( ) ;
rank: 395
score: 98.91596013849431
patch: else q CaMeL Ty ( residuals , residuals ) ;
rank: 395
score: 98.8951171875
patch: tmp = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 395
score: 98.84165261008523
patch: result = new q CaMeL Ty ( residuals ) ;
rank: 396
score: 99.10695975167411
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 396
score: 99.0856869346217
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = true ; qr CaMeL Decomposition ( ) ;
rank: 396
score: 99.03087565104167
patch: if ( first CaMeL Iteration ) { update CaMeL Jacobian ( residuals ) ;
rank: 396
score: 98.99387770432692
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = true ;
rank: 396
score: 98.9894268329327
patch: = ( double [ ] ) residuals . clone ( ) ;
rank: 396
score: 98.96068522135417
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( residuals residuals ) ;
rank: 396
score: 98.91575113932292
patch: q CaMeL Ty ( 0 , residuals ) ; ) ;
rank: 396
score: 98.8945556640625
patch: stmt = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 396
score: 98.88362630208333
patch: q CaMeL Ty [ - 1 ] ( residuals ) ;
rank: 397
score: 99.08534458705357
patch: q CaMeL Ty ( residuals ) ; old CaMeL X = 0 ;
rank: 397
score: 98.99315185546875
patch: delta = ( double [ ] ) 0 ;
rank: 397
score: 98.91525268554688
patch: q CaMeL Ty ( residuals . 0 ) ; ) ;
rank: 397
score: 98.89440307617187
patch: q CaMeL Ty ( residuals ) ; this .
rank: 397
score: 98.88263494318181
patch: q CaMeL Ty = this ; q CaMeL Ty ;
rank: 398
score: 99.08487374441964
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Dir = false ;
rank: 398
score: 99.02900695800781
patch: q CaMeL Ty ( residuals ) ; / / update CaMeL Jacobian ( ) ;
rank: 398
score: 98.99222819010417
patch: delta = ( double [ ] ) diag CaMeL R ;
rank: 398
score: 98.9600341796875
patch: q CaMeL Ty [ 0 ] = Math . max ( residuals ) ;
rank: 398
score: 98.91431773792614
patch: q CaMeL Ty ( residuals residuals ) ; ) ;
rank: 398
score: 98.89412231445313
patch: if ( true && first CaMeL Iteration ) {
rank: 398
score: 98.8815205891927
patch: q CaMeL Ty = this . q CaMeL Ty residuals ;
rank: 399
score: 99.10441080729167
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair ) current ; }
rank: 399
score: 99.08390590122768
patch: lm CaMeL Par ( ) ; boolean first CaMeL Iteration = true ;
rank: 399
score: 98.98792521158855
patch: ( ) * / q CaMeL Ty ( residuals ) ;
rank: 399
score: 98.95948486328125
patch: q CaMeL Ty [ 0 ] = start ;
rank: 399
score: 98.914013671875
patch: q CaMeL Ty ( residuals != 0 ) ;
rank: 399
score: 98.89406912667411
patch: q CaMeL Ty ( residuals , first CaMeL Iteration , objective ) ;
rank: 399
score: 98.88138834635417
patch: q CaMeL Ty ) ; q CaMeL Ty = ) ;
rank: 400
score: 99.10334014892578
patch: q CaMeL Ty ( Math . sqrt ( x CaMeL Norm ) ) ; }
rank: 400
score: 99.02676391601562
patch: q CaMeL Ty ( this , point , objective ) ;
rank: 400
score: 98.9888671875
patch: delta = ( int [ ] ) current ;
rank: 400
score: 98.98777418870192
patch: q CaMeL Ty [ 0 ] ( residuals , residuals ) ;
rank: 400
score: 98.9136454264323
patch: q CaMeL Ty = residuals ) ; residuals ( ) ;
rank: 400
score: 98.89381103515625
patch: if ( qr CaMeL Decomposition ( ) ) ;
rank: 400
score: 98.88084920247395
patch: q CaMeL Ty ; q CaMeL Ty = new ) ;
rank: 400
score: 98.83774636008523
patch: q CaMeL Ty [ 1 ] ( residuals ) ;
rank: 401
score: 99.10330200195312
patch: q CaMeL Ty ( residuals * x CaMeL Norm ) ;
rank: 401
score: 99.02652994791667
patch: x CaMeL Norm = 0 . 0 ; diag = 0 . 0 ;
rank: 401
score: 98.98734907670455
patch: q CaMeL Ty ( ) ; return null ; }
rank: 401
score: 98.98557535807292
patch: q CaMeL Ty ( residuals ) ; jacobian ( ) ;
rank: 401
score: 98.95817057291667
patch: q CaMeL Ty ( residuals - residuals - 1 ) ;
rank: 401
score: 98.91312866210937
patch: q CaMeL Ty ( residuals - 0 ) ;
rank: 401
score: 98.89351981026786
patch: q CaMeL Ty ( ) ; update CaMeL Jacobian ( null ) ;
rank: 401
score: 98.87957208806819
patch: q CaMeL Ty = new int [ 1 ] ;
rank: 402
score: 99.08278245192308
patch: q CaMeL Ty ( residuals ) ; work $NUMBER$ ( ) ;
rank: 402
score: 98.95804036458334
patch: q CaMeL Ty [ residuals ] = q CaMeL Ty [ ) ] ;
rank: 402
score: 98.9126688639323
patch: q CaMeL Ty ( residuals , residuals ) ; residuals .
rank: 402
score: 98.87935384114583
patch: q CaMeL Ty = new int [ - $NUMBER$ ] ;
rank: 403
score: 99.10302734375
patch: q CaMeL Ty = residuals [ 0 ] ;
rank: 403
score: 99.08275495256696
patch: q CaMeL Ty ( point , delta , diag CaMeL R ) ;
rank: 403
score: 98.9117764559659
patch: q CaMeL Ty ( residuals ) ; residuals finally {
rank: 403
score: 98.83579508463542
patch: q CaMeL Ty = residuals ( residuals ) ) ) ;
rank: 404
score: 99.0826480263158
patch: q CaMeL Ty ( residuals ) ; update CaMeL Residuals CaMeL And CaMeL Cost ( 0 ) ;
rank: 404
score: 99.02495574951172
patch: q CaMeL Ty ( residuals ) ; / * lm CaMeL Par = 0 ;
rank: 404
score: 98.98478868272569
patch: q CaMeL Ty 1 ( residuals ) ;
rank: 404
score: 98.9813741048177
patch: = current ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 404
score: 98.95603841145834
patch: q CaMeL Ty [ 0 ] = current . residuals ( residuals ) ;
rank: 404
score: 98.89273775540866
patch: q CaMeL Ty ( residuals , qr CaMeL Decomposition , ) ;
rank: 404
score: 98.83469645182292
patch: q CaMeL Ty ( ) ; q CaMeL Ty ( ;
rank: 405
score: 99.10245186941964
patch: q CaMeL Ty ( residuals , x CaMeL Norm == 0 ) ?
rank: 405
score: 98.98463134765625
patch: q CaMeL Ty [ residuals ] = ) ;
rank: 405
score: 98.98128568209134
patch: delta = 0 ; x CaMeL Norm = 0 . 0 ;
rank: 405
score: 98.89254557291666
patch: if ( first CaMeL Iteration && increment CaMeL Iterations CaMeL Counter < cols )
rank: 405
score: 98.83461692116477
patch: q CaMeL Ty ( residuals , ! residuals ) ;
rank: 406
score: 99.10204315185547
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; }
rank: 406
score: 99.02474772135416
patch: q CaMeL Ty ( residuals ) ; { update CaMeL Jacobian ( ) ;
rank: 406
score: 98.98251953125
patch: = q CaMeL Ty ; residuals ( ) ;
rank: 406
score: 98.9804178873698
patch: delta = ( double [ ] ) first CaMeL Iteration ;
rank: 406
score: 98.9547607421875
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty ( $STRING$ ) ;
rank: 406
score: 98.90938313802083
patch: q CaMeL Ty ( residuals residuals null ) ; ) ;
rank: 406
score: 98.83404541015625
patch: q CaMeL Ty [ ) ] = q CaMeL Ty ;
rank: 407
score: 99.02367401123047
patch: q CaMeL Ty ( ) ; / * boolean first CaMeL Iteration = true ;
rank: 407
score: 98.98222212357955
patch: q CaMeL Ty [ 1 ] = residuals ) ;
rank: 407
score: 98.98021521935097
patch: delta = new Vectorial CaMeL Point CaMeL Value CaMeL Pair (
rank: 407
score: 98.9546630859375
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty = residuals 1 ;
rank: 407
score: 98.90914306640624
patch: q CaMeL Ty = residuals . = residuals ;
rank: 407
score: 98.89238823784723
patch: if ( update CaMeL Jacobian ( ) )
rank: 407
score: 98.87580871582031
patch: q CaMeL Ty residuals ( ) ;
rank: 407
score: 98.83317057291667
patch: q CaMeL Ty = new char [ residuals ] ; }
rank: 408
score: 99.09922688802084
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; else {
rank: 408
score: 99.08107346754808
patch: lm CaMeL Par = current ; qr CaMeL Decomposition ( ) ;
rank: 408
score: 99.0235595703125
patch: lm CaMeL Par = 0 ; lm CaMeL Par ( ) ;
rank: 408
score: 98.95327962239584
patch: q CaMeL Ty = q CaMeL Ty [ residuals ] [ 0 ] ;
rank: 408
score: 98.9076416015625
patch: q CaMeL Ty q CaMeL Ty = residuals ;
rank: 408
score: 98.89221801757813
patch: q CaMeL Ty ( $STRING$ , current ) ;
rank: 408
score: 98.83308715820313
patch: q CaMeL Ty = residuals ( false ) ;
rank: 409
score: 99.09827473958333
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current + cols ;
rank: 409
score: 99.08076695033482
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = Math ;
rank: 409
score: 98.98163396661931
patch: q CaMeL Ty [ ) ] ( residuals ) ;
rank: 409
score: 98.89103190104167
patch: head = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 409
score: 98.83302815755208
patch: q CaMeL Ty ( residuals ) ; for ( ) }
rank: 410
score: 99.08004056490384
patch: q CaMeL Ty ( ) ; lm CaMeL Dir = current ;
rank: 410
score: 98.95263671875
patch: q CaMeL Ty [ 0 ] = residuals . residuals ( residuals ) ;
rank: 410
score: 98.90720621744792
patch: q CaMeL Ty q CaMeL Ty ) ;
rank: 410
score: 98.89099993024554
patch: q CaMeL Ty ( old CaMeL Res , delta , objective ) ;
rank: 411
score: 99.07972547743056
patch: q CaMeL Ty ( ) ; x CaMeL Norm += jac CaMeL Norm [ 0 ] ;
rank: 411
score: 98.9773837002841
patch: = ( double [ ] ) 0 . 0 ;
rank: 411
score: 98.90691528320312
patch: q CaMeL Ty ( residuals + residuals ) ;
rank: 411
score: 98.89078463040866
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = current ;
rank: 412
score: 99.09796612079327
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair ( previous ) ;
rank: 412
score: 99.02151692708334
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = 0 ; }
rank: 412
score: 98.98046875
patch: q CaMeL Ty 1 . residuals ( residuals ) ;
rank: 412
score: 98.95193481445312
patch: q CaMeL Ty += q CaMeL Ty [ residuals ] ;
rank: 412
score: 98.87094116210938
patch: [ 0 ] ( residuals ) ;
rank: 412
score: 98.82969447544643
patch: q CaMeL Ty += residuals ;
rank: 413
score: 99.09741821289063
patch: lm CaMeL Par = residuals [ 0 ] ;
rank: 413
score: 98.9803466796875
patch: q CaMeL Ty ( new double [ 0 ] ) ;
rank: 413
score: 98.97476196289062
patch: = 0 ; x CaMeL Norm = 0 . 0 ;
rank: 413
score: 98.95088704427083
patch: q CaMeL Ty [ residuals - 1 ] = null ;
rank: 413
score: 98.90626831054688
patch: q CaMeL Ty ( residuals + 0 ) ;
rank: 413
score: 98.8898681640625
patch: inst = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point ,
rank: 413
score: 98.87078302556819
patch: q CaMeL Ty = q CaMeL Ty != 0 ;
rank: 413
score: 98.82932350852273
patch: q CaMeL Ty = residuals ( residuals ) false ;
rank: 414
score: 99.07890319824219
patch: q CaMeL Ty ( ) ; increment CaMeL Iterations CaMeL Counter ( ) ; ;
rank: 414
score: 99.02137044270833
patch: = ( double [ ] ) point . do CaMeL Optimize ( ) ;
rank: 414
score: 98.97470925071023
patch: delta = initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 414
score: 98.95069376627605
patch: q CaMeL Ty ( residuals - 0 , residuals ) ;
rank: 414
score: 98.88889770507812
patch: if ( first CaMeL Iteration ) { / *
rank: 414
score: 98.87022816051136
patch: q CaMeL Ty = q CaMeL Ty residuals ; ;
rank: 414
score: 98.82829145951705
patch: q CaMeL Ty = residuals ; residuals = residuals ;
rank: 415
score: 99.07841273716518
patch: update CaMeL Jacobian ( ) ; boolean first CaMeL Iteration = false ;
rank: 415
score: 98.97923787434895
patch: = q CaMeL Ty ( ) ; residuals ( ) ;
rank: 415
score: 98.9745864868164
patch: qr CaMeL Decomposition ( residuals ) ;
rank: 415
score: 98.90574951171875
patch: q CaMeL Ty ( residuals ) ; residuals }
rank: 415
score: 98.88875034877232
patch: q CaMeL Ty ( residuals , residuals , old CaMeL Res ) ;
rank: 415
score: 98.82825724283855
patch: q CaMeL Ty = new short [ residuals ] ; }
rank: 416
score: 99.09498009314903
patch: q CaMeL Ty ( residuals , x CaMeL Norm ) ; }
rank: 416
score: 99.07826063368056
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = current . first CaMeL Iteration ;
rank: 416
score: 99.01987868088942
patch: lm CaMeL Par = current . update CaMeL Jacobian ( ) ;
rank: 416
score: 98.9779052734375
patch: = q CaMeL Ty . get ( residuals ) ;
rank: 416
score: 98.97454364483173
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = $STRING$ ;
rank: 416
score: 98.94916178385417
patch: q CaMeL Ty = new float [ q CaMeL Ty . length ] ;
rank: 416
score: 98.90517171223958
patch: q CaMeL Ty ( residuals ) ; residuals = residuals }
rank: 416
score: 98.88870442708334
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; try {
rank: 416
score: 98.86956232244319
patch: q CaMeL Ty = q CaMeL Ty ) ; }
rank: 416
score: 98.82674153645833
patch: q CaMeL Ty ( ) ; q CaMeL Ty = (
rank: 417
score: 99.09481608072916
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current + point ;
rank: 417
score: 99.0777254971591
patch: = Math . sqrt ( x CaMeL Norm ) ;
rank: 417
score: 98.97747802734375
patch: q CaMeL Ty . residuals ( q CaMeL Ty ) ;
rank: 417
score: 98.94907633463542
patch: q CaMeL Ty ( residuals , residuals * residuals ) ;
rank: 417
score: 98.88800048828125
patch: q CaMeL Ty ( residuals ) ; return ;
rank: 417
score: 98.8262606534091
patch: * * * q CaMeL Ty ( residuals ) ;
rank: 418
score: 99.07771519252232
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = delta ;
rank: 418
score: 98.94889322916667
patch: q CaMeL Ty [ 0 ] = current . get ( residuals ) ;
rank: 418
score: 98.9040194424716
patch: q CaMeL Ty ( residuals . null ) ) ;
rank: 418
score: 98.86887428977273
patch: q CaMeL Ty ; q CaMeL Ty = 0 ;
rank: 418
score: 98.82590738932292
patch: q CaMeL Ty [ residuals ] = residuals ; break ;
rank: 419
score: 99.0929667154948
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair = previous ;
rank: 419
score: 99.01785481770834
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par ( false ) ;
rank: 419
score: 98.97162334735577
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = point ;
rank: 419
score: 98.94862874348958
patch: = old CaMeL X [ 0 ] [ residuals ] ;
rank: 419
score: 98.90352376302083
patch: q CaMeL Ty ( residuals ) ; residuals catch ( ;
rank: 419
score: 98.88758087158203
patch: q CaMeL Ty ( objective ) ;
rank: 419
score: 98.86871948242188
patch: q CaMeL Ty [ residuals ] = this ;
rank: 420
score: 99.07613932291666
patch: q CaMeL Ty ( residuals ) ; else lm CaMeL Par = 0 ;
rank: 420
score: 99.01763044084821
patch: if ( first CaMeL Iteration ) { x CaMeL Norm += 0 ;
rank: 420
score: 98.97675916883681
patch: q CaMeL Ty ( ) ; * /
rank: 420
score: 98.9485595703125
patch: q CaMeL Ty ( $NUMBER$ ) ; q CaMeL Ty ( residuals ) ;
rank: 420
score: 98.903369140625
patch: q CaMeL Ty ( ) ; ; ) ;
rank: 420
score: 98.86841930042614
patch: q CaMeL Ty = q CaMeL Ty + residuals ;
rank: 420
score: 98.82407633463542
patch: q CaMeL Ty = residuals ( ) q CaMeL Ty ;
rank: 421
score: 99.09010532924107
patch: q CaMeL Ty ( ) ; } x CaMeL Norm = 0 ;
rank: 421
score: 99.0759048461914
patch: q CaMeL Ty ( residuals , diag ) ; qr CaMeL Decomposition ( ) ;
rank: 421
score: 98.9762850674716
patch: q CaMeL Ty ( residuals ) ; / * ;
rank: 421
score: 98.97079467773438
patch: q CaMeL Ty ( residuals , 0 , objective ) ;
rank: 421
score: 98.9482421875
patch: q CaMeL Ty ( residuals ) ; q CaMeL Ty += residuals 1 ;
rank: 421
score: 98.90293375651042
patch: q CaMeL Ty = ; q CaMeL Ty = residuals ;
rank: 421
score: 98.88662719726562
patch: q CaMeL Ty ( residuals , objective , diag ) ;
rank: 422
score: 99.08981557992789
patch: q CaMeL Ty ( residuals [ 0 ] , diag ) ;
rank: 422
score: 99.07585906982422
patch: q CaMeL Ty ( ) ; boolean first CaMeL Iteration = 0 . 0 )
rank: 422
score: 99.01612200055804
patch: if ( true ) { x CaMeL Norm += 0 . 0 ;
rank: 422
score: 98.97515869140625
patch: q CaMeL Ty = residuals ( residuals ) * $NUMBER$ ;
rank: 422
score: 98.96996131310097
patch: double [ ] work $NUMBER$ = new double [ cols ] ;
rank: 422
score: 98.902587890625
patch: q CaMeL Ty = residuals ) ; ;
rank: 422
score: 98.88660539899554
patch: q CaMeL Ty ( residuals ) ; if ( cost != 0 )
rank: 422
score: 98.82350158691406
patch: q CaMeL Ty = residuals residuals ;
rank: 423
score: 99.01584879557292
patch: q CaMeL Ty ( this , x CaMeL Norm ) ;
rank: 423
score: 98.97498575846355
patch: q CaMeL Ty ( residuals ) ; * / ) ;
rank: 423
score: 98.90172322591145
patch: q CaMeL Ty ( residuals ) ; ) ; else ;
rank: 423
score: 98.88631766183036
patch: q CaMeL Ty ( residuals , first CaMeL Iteration , current ) ;
rank: 423
score: 98.8682861328125
patch: q CaMeL Ty ( new , residuals ) ;
rank: 423
score: 98.8225985440341
patch: q CaMeL Ty [ $NUMBER$ ] = residuals ; }
rank: 424
score: 99.07544759114583
patch: q CaMeL Ty ( ) ; x CaMeL Norm += diag CaMeL R ;
rank: 424
score: 99.01580341045673
patch: q CaMeL Ty ( ; qr CaMeL Decomposition ( ) ) ;
rank: 424
score: 98.96950120192308
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ( point
rank: 424
score: 98.90155029296875
patch: q CaMeL Ty ( residuals ) ; ) ; residuals .
rank: 424
score: 98.88392740885416
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( . ) ;
rank: 424
score: 98.86747602982955
patch: q CaMeL Ty = q CaMeL Ty . null ;
rank: 425
score: 99.08875189887152
patch: delta = new int [ cols ] ;
rank: 425
score: 98.9727274576823
patch: = q CaMeL Ty [ ( int ) residuals ] ;
rank: 425
score: 98.94731309678819
patch: q CaMeL Ty [ 0 ] = ;
rank: 425
score: 98.90103149414062
patch: q CaMeL Ty = residuals . = q CaMeL Ty ;
rank: 425
score: 98.88377278645834
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( current ) ;
rank: 425
score: 98.86632622612848
patch: q CaMeL Ty ( - residuals ) ;
rank: 425
score: 98.821875
patch: q CaMeL Ty ( residuals ) = null ;
rank: 426
score: 99.07488606770833
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = true ; }
rank: 426
score: 98.94703165690105
patch: q CaMeL Ty [ 0 ] = null ; break ;
rank: 426
score: 98.90067545572917
patch: q CaMeL Ty = Math . abs ( residuals ) ;
rank: 426
score: 98.88324529474431
patch: q CaMeL Ty ( residuals , objective , ) ;
rank: 426
score: 98.86582253196023
patch: q CaMeL Ty q CaMeL Ty ( false ) ;
rank: 427
score: 99.08719889322917
patch: q CaMeL Ty ( x CaMeL Norm , diag [ 0 ] ) ;
rank: 427
score: 99.07425362723214
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = false ;
rank: 427
score: 98.97142537434895
patch: q CaMeL Ty [ residuals ] = new double ) ;
rank: 427
score: 98.96501020951705
patch: = ( double [ ] ) solved CaMeL Cols ;
rank: 427
score: 98.94656372070312
patch: q CaMeL Ty += q CaMeL Ty [ 1 ] ;
rank: 427
score: 98.89976917613636
patch: q CaMeL Ty ( residuals ) ; ; / /
rank: 427
score: 98.86431329900569
patch: q CaMeL Ty = q CaMeL Ty - $NUMBER$ ;
rank: 428
score: 99.08713204520089
patch: double [ ] old CaMeL X = new double [ rows ] ;
rank: 428
score: 99.07417127821181
patch: q CaMeL Ty ( ) ; x CaMeL Norm = Math . sqrt ( diag ) ;
rank: 428
score: 98.97136840820312
patch: q CaMeL Ty ( residuals ) * ) ;
rank: 428
score: 98.9456787109375
patch: q CaMeL Ty ( residuals , current . residuals ) ;
rank: 428
score: 98.88275146484375
patch: q CaMeL Ty ( residuals , first CaMeL Iteration , 0 ) ;
rank: 428
score: 98.8184814453125
patch: b = new q CaMeL Ty ( residuals ) ;
rank: 429
score: 99.07414027622768
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = ) ;
rank: 429
score: 98.97115071614583
patch: q CaMeL Ty ( residuals ( residuals ) ) ; ;
rank: 429
score: 98.96399864783653
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration ;
rank: 429
score: 98.94542439778645
patch: q CaMeL Ty ( 1 , residuals , residuals ) ;
rank: 429
score: 98.89877319335938
patch: q CaMeL Ty ( ) ; ( ) ;
rank: 429
score: 98.88269981971153
patch: q CaMeL Ty ( residuals ) ; else previous = current ;
rank: 429
score: 98.8619051846591
patch: q CaMeL Ty = q CaMeL Ty ) ; else
rank: 430
score: 99.08640834263393
patch: q CaMeL Ty ( residuals ) ; while ( first CaMeL Iteration )
rank: 430
score: 99.07395533511513
patch: = x CaMeL Norm == 0 ) ? initial CaMeL Step CaMeL Bound CaMeL Factor : 0 ;
rank: 430
score: 98.97108968098958
patch: = new double [ q CaMeL Ty ( ) ] ;
rank: 430
score: 98.96320936414931
patch: x CaMeL Norm = 1 . 0 ;
rank: 430
score: 98.94495307074652
patch: q CaMeL Ty ( - 1 ) ;
rank: 430
score: 98.89844859730114
patch: q CaMeL Ty ( residuals . null , ) ;
rank: 430
score: 98.88264973958333
patch: q CaMeL Ty ( residuals ) ; update CaMeL Jacobian ( . ) ;
rank: 430
score: 98.86018510298295
patch: } q CaMeL Ty = q CaMeL Ty ) ;
rank: 430
score: 98.81617320667614
patch: q CaMeL Ty [ 0 ] = new ) ;
rank: 431
score: 99.08566080729166
patch: x CaMeL Norm = Math . sqrt ( diag [ 0 ] ) ;
rank: 431
score: 99.073876953125
patch: q CaMeL Ty ( ) ; x CaMeL Norm = 0 . 1 ;
rank: 431
score: 99.0108642578125
patch: q CaMeL Ty ( residuals ) ; delta = 0 ;
rank: 431
score: 98.96311442057292
patch: q CaMeL Ty ( residuals ) ; / * / }
rank: 431
score: 98.94454956054688
patch: = old CaMeL X [ 0 ] [ 0 ] ;
rank: 431
score: 98.88187081473214
patch: q CaMeL Ty ( residuals , old CaMeL X , point ) ;
rank: 431
score: 98.85795454545455
patch: q CaMeL Ty = q CaMeL Ty - 0 ;
rank: 432
score: 99.08553059895833
patch: q CaMeL Ty ( ( double [ ] ) first CaMeL Iteration ) ;
rank: 432
score: 99.0096435546875
patch: q CaMeL Ty ( ) ; / / lm CaMeL Par ( ) ;
rank: 432
score: 98.9628397623698
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( true ) ;
rank: 432
score: 98.94337815504808
patch: q CaMeL Ty ( ) ; q CaMeL Ty = current ;
rank: 432
score: 98.89626242897727
patch: q CaMeL Ty ( residuals ( ) $NUMBER$ ) ;
rank: 432
score: 98.813525390625
patch: residuals = q CaMeL Ty ( residuals ) ;
rank: 433
score: 99.0850341796875
patch: q CaMeL Ty ( ) ; } if ( first CaMeL Iteration ) {
rank: 433
score: 99.00935872395833
patch: q CaMeL Ty ( false , x CaMeL Norm ) ;
rank: 433
score: 98.9690450032552
patch: = new ) * q CaMeL Ty ( residuals ) ;
rank: 433
score: 98.96183268229167
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( current ) ;
rank: 433
score: 98.88116455078125
patch: q CaMeL Ty ( residuals , diag , diag ) ;
rank: 433
score: 98.81342163085938
patch: q CaMeL Ty = residuals [ 1 ] ;
rank: 434
score: 99.08488246372768
patch: q CaMeL Ty ( ) ; } if ( first CaMeL Iteration )
rank: 434
score: 99.07298519736842
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += diag CaMeL R [ 0 ] ;
rank: 434
score: 98.96880548650569
patch: = new double [ q CaMeL Ty ] ; ;
rank: 434
score: 98.96142578125
patch: vector q CaMeL Ty ( residuals ) ;
rank: 434
score: 98.89605102539062
patch: q CaMeL Ty ( residuals ) ; else ;
rank: 434
score: 98.85288307883523
patch: q CaMeL Ty = q CaMeL Ty . $NUMBER$ ;
rank: 435
score: 99.07279459635417
patch: q CaMeL Ty ( residuals ) ; current = ) ;
rank: 435
score: 99.00855305989583
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par ( true ) ;
rank: 435
score: 98.96083420973558
patch: q CaMeL Ty ( residuals ) ; * / work $NUMBER$ ;
rank: 435
score: 98.94143676757812
patch: [ 0 ] = q CaMeL Ty [ 1 ] ;
rank: 435
score: 98.8528076171875
patch: ( ) ; q CaMeL Ty ( ) ;
rank: 435
score: 98.81178588867188
patch: q CaMeL Ty [ residuals ] = true ;
rank: 436
score: 99.08411754261364
patch: lm CaMeL Par = new int [ cols ] ;
rank: 436
score: 98.96625310724431
patch: q CaMeL Ty ( residuals ) ; ; * /
rank: 436
score: 98.88063267299107
patch: q CaMeL Ty ( ) ; if ( cost != 0 ) {
rank: 436
score: 98.852392578125
patch: q CaMeL Ty = q CaMeL Ty ; }
rank: 436
score: 98.81084650213069
patch: q CaMeL Ty = new Class [ residuals ] ;
rank: 437
score: 99.08375767299107
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; else
rank: 437
score: 98.96615600585938
patch: q CaMeL Ty [ 0 ) ] = residuals ) ;
rank: 437
score: 98.89283336292614
patch: q CaMeL Ty ( residuals ( ) ) ; }
rank: 437
score: 98.88022867838542
patch: if ( true ) {
rank: 437
score: 98.85149591619319
patch: else { q CaMeL Ty = q CaMeL Ty ;
rank: 437
score: 98.8108243075284
patch: q CaMeL Ty ( ( float ) residuals ) ;
rank: 438
score: 99.083642578125
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current : current ;
rank: 438
score: 99.07164713541667
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( 0 ) ;
rank: 438
score: 98.96613159179688
patch: q CaMeL Ty ( ) ; if ( ;
rank: 438
score: 98.89210094105114
patch: q CaMeL Ty ( residuals ( false ) ) ;
rank: 438
score: 98.8799336751302
patch: q CaMeL Ty ( work $NUMBER$ [ 0 ] ) ;
rank: 438
score: 98.81017456054687
patch: q CaMeL Ty [ false ] = residuals ;
rank: 439
score: 99.08353969029018
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; ;
rank: 439
score: 99.00559488932292
patch: q CaMeL Ty ( false , point , objective ) ;
rank: 439
score: 98.96572875976562
patch: q CaMeL Ty [ residuals ] = residuals . ) ;
rank: 439
score: 98.93949381510417
patch: q CaMeL Ty [ 0 ] = System . out ;
rank: 439
score: 98.87917258522727
patch: q CaMeL Ty ( residuals ) ; } else {
rank: 439
score: 98.85114135742188
patch: q CaMeL Ty = new q CaMeL Ty ;
rank: 440
score: 99.08330829326923
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current = previous ;
rank: 440
score: 99.07078450520834
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition ( ) ; ;
rank: 440
score: 99.00546061197916
patch: increment CaMeL Iterations CaMeL Counter ( ) ; x CaMeL Norm += 0 ;
rank: 440
score: 98.95504760742188
patch: delta = Math . abs ( x CaMeL Norm ) ;
rank: 440
score: 98.93907752403847
patch: q CaMeL Ty [ 0 ] = new Double ( ) ;
rank: 440
score: 98.87908935546875
patch: q CaMeL Ty ( 0 , current ) ;
rank: 440
score: 98.80907093394886
patch: q CaMeL Ty = residuals [ residuals ++ ] ;
rank: 441
score: 99.0052157315341
patch: = ( x CaMeL Norm == 0 ) ? initial
rank: 441
score: 98.95454545454545
patch: q CaMeL Ty ( residuals ) ; * * /
rank: 441
score: 98.87897600446429
patch: q CaMeL Ty ( residuals , old CaMeL X , current ) ;
rank: 441
score: 98.84974975585938
patch: q CaMeL Ty [ residuals ] = false ;
rank: 442
score: 99.06956263950893
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = $STRING$ ;
rank: 442
score: 98.95415649414062
patch: q CaMeL Ty ( residuals ) ; / }
rank: 442
score: 98.93827311197917
patch: q CaMeL Ty ( residuals . ) ;
rank: 442
score: 98.88800603693181
patch: q CaMeL Ty ( residuals ( 1 ) ) ;
rank: 442
score: 98.8480557528409
patch: q CaMeL Ty = q CaMeL Ty = $NUMBER$ ;
rank: 442
score: 98.8056640625
patch: q CaMeL Ty = residuals residuals ( ) ;
rank: 443
score: 99.06927959735577
patch: do CaMeL Optimize ( ) ; qr CaMeL Decomposition ( ) ;
rank: 443
score: 98.96435546875
patch: q CaMeL Ty [ q CaMeL Ty ) ] = ;
rank: 443
score: 98.95398966471355
patch: delta = ( int [ ] ) x CaMeL Norm ;
rank: 443
score: 98.8878173828125
patch: q CaMeL Ty = residuals . equals ( ) ;
rank: 443
score: 98.87855021158855
patch: q CaMeL Ty ( residuals , work $NUMBER$ , ) ;
rank: 443
score: 98.84738991477273
patch: q CaMeL Ty = q CaMeL Ty <= 0 ;
rank: 443
score: 98.8050537109375
patch: q CaMeL Ty = false ;
rank: 444
score: 99.08176967075893
patch: double [ ] old CaMeL X = new int [ cols ] ;
rank: 444
score: 98.9641825358073
patch: q CaMeL Ty ( ) . start ( residuals ) ;
rank: 444
score: 98.95309448242188
patch: q CaMeL Ty [ residuals ] = 0 . 0 ;
rank: 444
score: 98.886865234375
patch: q CaMeL Ty ( residuals ) ; } ;
rank: 444
score: 98.84731223366477
patch: q CaMeL Ty = new int [ residuals ) ;
rank: 445
score: 99.0676778157552
patch: q CaMeL Ty ( point , qr CaMeL Decomposition ) ;
rank: 445
score: 99.00295003255208
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( false ) ;
rank: 445
score: 98.96379937065973
patch: = new double [ residuals ) ] ;
rank: 445
score: 98.95304731889205
patch: delta = current ; qr CaMeL Decomposition ( ) ;
rank: 445
score: 98.88646351207386
patch: q CaMeL Ty ( residuals . - 1 ) ;
rank: 445
score: 98.87779889787946
patch: q CaMeL Ty ( residuals ) ; qr CaMeL Decomposition [ ) ;
rank: 445
score: 98.84442901611328
patch: q CaMeL Ty ( null ) ;
rank: 446
score: 99.08155110677083
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; } }
rank: 446
score: 98.96358235677083
patch: q CaMeL Ty [ 0 ) ] ( residuals ) ;
rank: 446
score: 98.95209295099431
patch: delta = 0 ; update CaMeL Jacobian ( ) ;
rank: 446
score: 98.8765380859375
patch: if ( ) update CaMeL Jacobian ( ) ;
rank: 446
score: 98.80106977982955
patch: q CaMeL Ty = new Double ( residuals ) ;
rank: 447
score: 99.06717122395834
patch: q CaMeL Ty ( residuals , work 1 , first CaMeL Iteration ) ;
rank: 447
score: 98.96322021484374
patch: q CaMeL Ty ( residuals residuals ) ; ;
rank: 447
score: 98.9507344563802
patch: q CaMeL Ty ( residuals ) ; current = 1 ;
rank: 447
score: 98.88541259765626
patch: q CaMeL Ty ( residuals ) throws ) ;
rank: 447
score: 98.87636021205357
patch: q CaMeL Ty ( residuals , first CaMeL Iteration && true ) ;
rank: 447
score: 98.84281005859376
patch: q CaMeL Ty = residuals ( null ) ;
rank: 448
score: 99.08035481770834
patch: q CaMeL Ty [ 0 ] = diag CaMeL R [ 0 ] ;
rank: 448
score: 99.06698404947916
patch: q CaMeL Ty ( residuals , work 1 , x CaMeL Norm ) ;
rank: 448
score: 98.9630839029948
patch: q CaMeL Ty [ 0 ] ; residuals ( ) ;
rank: 448
score: 98.95066139914773
patch: delta = increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 448
score: 98.87635040283203
patch: q CaMeL Ty ( cost ) ;
rank: 448
score: 98.8415194424716
patch: q CaMeL Ty = q CaMeL Ty [ ) ;
rank: 448
score: 98.79929421164773
patch: q CaMeL Ty ( q CaMeL Ty ) ; }
rank: 449
score: 99.06641496930804
patch: q CaMeL Ty ( ) ; int x CaMeL Norm = 0 ;
rank: 449
score: 98.96249050564236
patch: q CaMeL Ty [ residuals ] = ;
rank: 449
score: 98.93337180397727
patch: = this . q CaMeL Ty ( residuals ) ;
rank: 449
score: 98.88347833806819
patch: q CaMeL Ty ( residuals $NUMBER$ ) ; ) ;
rank: 449
score: 98.8387118252841
patch: q CaMeL Ty = q CaMeL Ty < 0 ;
rank: 450
score: 99.06604875837054
patch: x CaMeL Norm = Math . max ( x CaMeL Norm ) ;
rank: 450
score: 99.001708984375
patch: delta = initial CaMeL Step CaMeL Bound CaMeL Factor ( ) ;
rank: 450
score: 98.9621914950284
patch: q CaMeL Ty ( residuals ( ) residuals ) ;
rank: 450
score: 98.932373046875
patch: q CaMeL Ty [ residuals + 1 ] = residuals ;
rank: 450
score: 98.8829012784091
patch: q CaMeL Ty ( residuals ) ; ) / /
rank: 450
score: 98.83861194957386
patch: q CaMeL Ty q CaMeL Ty ( $NUMBER$ ) ;
rank: 451
score: 99.07919921875
patch: = current . new Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 451
score: 99.06543646918402
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += ( x CaMeL Norm ) ;
rank: 451
score: 99.00148518880208
patch: delta q CaMeL Ty ( residuals ) ;
rank: 451
score: 98.96205832741477
patch: q CaMeL Ty ( residuals ) ; ; ; ;
rank: 451
score: 98.79840087890625
patch: q CaMeL Ty = residuals ; break ;
rank: 452
score: 99.0791903409091
patch: lm CaMeL Par = new double [ rows ] ;
rank: 452
score: 99.06534423828126
patch: = increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 452
score: 98.96157836914062
patch: q CaMeL Ty ( residuals ) . start ( ) ;
rank: 452
score: 98.94846598307292
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair ( ) ;
rank: 452
score: 98.92852783203125
patch: q CaMeL Ty ( residuals / $NUMBER$ ) ;
rank: 452
score: 98.88278198242188
patch: q CaMeL Ty ( residuals ) ; this }
rank: 452
score: 98.87564791165866
patch: q CaMeL Ty ( residuals ) ; else current = current ;
rank: 452
score: 98.836181640625
patch: q CaMeL Ty = q CaMeL Ty . length ;
rank: 453
score: 99.07839529854911
patch: lm CaMeL Par = 0 ; if ( first CaMeL Iteration ) {
rank: 453
score: 99.00064697265626
patch: q CaMeL Ty ( null , objective ) ;
rank: 453
score: 98.96138509114583
patch: q CaMeL Ty += residuals ; q CaMeL Ty ++ ;
rank: 453
score: 98.92827899639423
patch: q CaMeL Ty ( residuals , residuals $NUMBER$ , residuals ) ;
rank: 453
score: 98.88271755642361
patch: q CaMeL Ty = residuals = residuals ;
rank: 453
score: 98.875244140625
patch: q CaMeL Ty ( update CaMeL Jacobian ( ) , residuals ) ;
rank: 453
score: 98.83547141335227
patch: q CaMeL Ty ( ( int ) 0 ) ;
rank: 453
score: 98.79704066685268
patch: [ 0 ] = residuals ;
rank: 454
score: 99.077197265625
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = current ; true ;
rank: 454
score: 98.96129261363636
patch: = q CaMeL Ty ( residuals ( ) ) ;
rank: 454
score: 98.94776500355114
patch: increment CaMeL Iterations CaMeL Counter ( ) ; break ;
rank: 454
score: 98.92659301757813
patch: q CaMeL Ty [ 0 ] = previous ;
rank: 454
score: 98.8749267578125
patch: q CaMeL Ty ( lm CaMeL Dir ) ;
rank: 454
score: 98.83540482954545
patch: q CaMeL Ty [ 0 ] = residuals residuals ;
rank: 454
score: 98.79633123224431
patch: n = new q CaMeL Ty ( residuals ) ;
rank: 455
score: 99.076904296875
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = this . current ;
rank: 455
score: 99.0644061748798
patch: q CaMeL Ty ( ) ; first CaMeL Iteration = null ;
rank: 455
score: 98.99994365985577
patch: q CaMeL Ty = current . update CaMeL Jacobian ( ) ;
rank: 455
score: 98.96061197916667
patch: = q CaMeL Ty ( residuals [ 0 ] ) ;
rank: 455
score: 98.92654418945312
patch: q CaMeL Ty ( residuals ) ( ) ;
rank: 455
score: 98.88150024414062
patch: q CaMeL Ty ( residuals ) ; for (
rank: 455
score: 98.8741122159091
patch: if ( ) { qr CaMeL Decomposition ( ) ;
rank: 455
score: 98.8343838778409
patch: q CaMeL Ty = q CaMeL Ty - ) ;
rank: 455
score: 98.79548783735795
patch: q CaMeL Ty [ residuals ] = residuals residuals ;
rank: 456
score: 99.07644856770834
patch: lm CaMeL Par = Math . sqrt ( x CaMeL Norm ) ; }
rank: 456
score: 98.96047973632812
patch: q CaMeL Ty ( residuals , ) ; ;
rank: 456
score: 98.94757080078125
patch: q CaMeL Ty 1 = new double [ cols ] ;
rank: 456
score: 98.88149192116477
patch: q CaMeL Ty = ) ; residuals ( ) ;
rank: 456
score: 98.8343172940341
patch: q CaMeL Ty q CaMeL Ty ( true ) ;
rank: 456
score: 98.79538796164773
patch: q CaMeL Ty ( ) ; residuals = residuals ;
rank: 457
score: 99.07601224459134
patch: delta = Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 457
score: 98.99826882102273
patch: = 0 ; boolean first CaMeL Iteration = true ;
rank: 457
score: 98.96006081321023
patch: q CaMeL Ty [ residuals ) ] = null ;
rank: 457
score: 98.9474609375
patch: R . q CaMeL Ty ( residuals ) ;
rank: 457
score: 98.92563883463542
patch: = q CaMeL Ty [ residuals ] [ 0 ] ;
rank: 457
score: 98.88137478298611
patch: q CaMeL Ty ( ) ; ; ;
rank: 458
score: 98.92554321289063
patch: q CaMeL Ty ( residuals residuals $NUMBER$ ) ;
rank: 458
score: 98.87883758544922
patch: else q CaMeL Ty ( ) ;
rank: 458
score: 98.87145317925348
patch: } if ( first CaMeL Iteration ) {
rank: 458
score: 98.83296712239583
patch: ( 0 , q CaMeL Ty ) ;
rank: 459
score: 99.0751953125
patch: q CaMeL Ty ( x CaMeL Norm == 0 ) ?
rank: 459
score: 98.9976318359375
patch: q CaMeL Ty ( ) ; / / q CaMeL Ty ( ) ;
rank: 459
score: 98.9595235188802
patch: = q CaMeL Ty . get CaMeL Value ( ) ;
rank: 459
score: 98.92529296875
patch: q CaMeL Ty [ 0 ] ( residuals $NUMBER$ ) ;
rank: 459
score: 98.8788174715909
patch: q CaMeL Ty ( residuals . null - ) ;
rank: 460
score: 99.07450045072116
patch: delta = Math . sqrt ( x CaMeL Norm ) ; }
rank: 460
score: 99.06174879807692
patch: lm CaMeL Par ( ) ; update CaMeL Jacobian ( ) ;
rank: 460
score: 98.99660081129808
patch: q CaMeL Ty = 0 ; lm CaMeL Par = 0 ;
rank: 460
score: 98.95939127604167
patch: q CaMeL Ty ( ) ; * residuals ( ) ;
rank: 460
score: 98.92223182091347
patch: q CaMeL Ty ( residuals , residuals 1 , residuals ) ;
rank: 460
score: 98.878173828125
patch: q CaMeL Ty ( residuals . null ) ; ;
rank: 460
score: 98.83123779296875
patch: q CaMeL Ty [ 0 ] [ ) ;
rank: 461
score: 99.0742919921875
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = diag CaMeL R ;
rank: 461
score: 98.92221069335938
patch: q CaMeL Ty [ 0 ] = residuals . ) ;
rank: 461
score: 98.87554321289062
patch: q CaMeL Ty ( residuals . 1 ) ;
rank: 461
score: 98.86900838216145
patch: if ( increment CaMeL Iterations CaMeL Counter < 0 ) {
rank: 461
score: 98.7904052734375
patch: q CaMeL Ty ( ) ; return false ;
rank: 462
score: 99.06089952256944
patch: q CaMeL Ty ( residuals , old CaMeL Res , delta , diag CaMeL R ) ;
rank: 462
score: 98.99478149414062
patch: double [ ] diag = new double [ cols ] ;
rank: 462
score: 98.95842950994319
patch: = current . q CaMeL Ty ( residuals ) ;
rank: 462
score: 98.87473366477273
patch: q CaMeL Ty ( residuals 1 ) ; ) ;
rank: 462
score: 98.86700439453125
patch: q CaMeL Ty ( $NUMBER$ , objective ) ;
rank: 462
score: 98.8308993252841
patch: q CaMeL Ty = q CaMeL Ty != null ;
rank: 463
score: 98.99466959635417
patch: q CaMeL Ty ( point , lm CaMeL Par ) ;
rank: 463
score: 98.9583740234375
patch: q CaMeL Ty ( ) ; return residuals ( ) ;
rank: 463
score: 98.87434525923295
patch: q CaMeL Ty = q CaMeL Ty = residuals .
rank: 463
score: 98.86672738882211
patch: q CaMeL Ty ( residuals ) ; while ( false ) {
rank: 464
score: 99.06065150669643
patch: q CaMeL Ty ( residuals ) ; old CaMeL X = current ;
rank: 464
score: 98.92045084635417
patch: q CaMeL Ty [ residuals ] = residuals . residuals ;
rank: 464
score: 98.87119547526042
patch: q CaMeL Ty = residuals . else ;
rank: 464
score: 98.86651611328125
patch: finally { update CaMeL Jacobian ( ) ;
rank: 464
score: 98.83056640625
patch: q CaMeL Ty ( new ( residuals ) ) ;
rank: 465
score: 99.07283528645833
patch: if ( first CaMeL Iteration ) { if ( first CaMeL Iteration ) {
rank: 465
score: 99.05998883928571
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = $STRING$ ;
rank: 465
score: 98.99282602163461
patch: ( x CaMeL Norm , x CaMeL Norm , sum ) ;
rank: 465
score: 98.9569424715909
patch: = current ; q CaMeL Ty ( residuals ) ;
rank: 465
score: 98.9201151529948
patch: q CaMeL Ty ( residuals * q CaMeL Ty ) ;
rank: 465
score: 98.87105305989583
patch: q CaMeL Ty ( ) + ) ;
rank: 465
score: 98.83001098632812
patch: q CaMeL Ty ( residuals , new ) ;
rank: 466
score: 98.99270833333334
patch: q CaMeL Ty ( ) ; qr CaMeL Decomposition ( ) ; ) ;
rank: 466
score: 98.95604112413194
patch: = new q CaMeL Ty ( ) ;
rank: 466
score: 98.87095811631944
patch: q CaMeL Ty = ) ; ) ;
rank: 466
score: 98.82544623480902
patch: q CaMeL Ty = new int ) ;
rank: 466
score: 98.78537819602273
patch: tmp = new q CaMeL Ty ( residuals ) ;
rank: 467
score: 99.07066853841145
patch: q CaMeL Ty ( current , x CaMeL Norm ) ;
rank: 467
score: 98.954345703125
patch: q CaMeL Ty ( ) residuals ( ) ;
rank: 467
score: 98.93796608664773
patch: = ( double [ ] ) lm CaMeL Dir ;
rank: 467
score: 98.8663330078125
patch: q CaMeL Ty ( residuals , old CaMeL X , initial CaMeL
rank: 467
score: 98.82411887428977
patch: q CaMeL Ty = q CaMeL Ty == 1 ;
rank: 468
score: 99.07020060221355
patch: q CaMeL Ty ( residuals + x CaMeL Norm ) ;
rank: 468
score: 99.05826822916667
patch: q CaMeL Ty ( residuals , x CaMeL Norm , delta , diag CaMeL R ) ;
rank: 468
score: 98.9195556640625
patch: q CaMeL Ty += q CaMeL Ty . length ;
rank: 469
score: 99.06971958705357
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous current = current ;
rank: 469
score: 98.99086507161458
patch: q CaMeL Ty ( $STRING$ , point , objective ) ;
rank: 469
score: 98.86930708451705
patch: q CaMeL Ty ( residuals ( ) - ) ;
rank: 469
score: 98.8232421875
patch: q CaMeL Ty = q CaMeL Ty != 1 ;
rank: 470
score: 98.9888671875
patch: boolean first CaMeL Iteration = true ; boolean first CaMeL Iteration = false ;
rank: 470
score: 98.93614612926136
patch: delta = x CaMeL Norm = 0 . 0 ;
rank: 470
score: 98.86224975585938
patch: q CaMeL Ty ( this , current ) ;
rank: 471
score: 99.06836876502403
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair ] ;
rank: 471
score: 99.05561967329545
patch: q CaMeL Ty ( ) ; current = 0 ;
rank: 471
score: 98.93274943033855
patch: delta = ( double [ ] ) jac CaMeL Norm ;
rank: 471
score: 98.8685635653409
patch: q CaMeL Ty ( residuals . null 0 ) ;
rank: 471
score: 98.86209810697116
patch: q CaMeL Ty ( residuals , old CaMeL Res , ) ;
rank: 471
score: 98.82240988991477
patch: q CaMeL Ty ; q CaMeL Ty = 1 ;
rank: 471
score: 98.78048706054688
patch: n = q CaMeL Ty ( residuals ) ;
rank: 472
score: 99.0682373046875
patch: x CaMeL Norm = permutation * point [ cols ] ;
rank: 472
score: 99.05503216911765
patch: q CaMeL Ty ( residuals ) ; boolean first CaMeL Iteration = 0 . 0 ;
rank: 472
score: 98.98736572265625
patch: = 0 ; lm CaMeL Par = 0 ;
rank: 472
score: 98.9523592862216
patch: = q CaMeL Ty ( residuals ) ; ; ;
rank: 472
score: 98.91854154146634
patch: q CaMeL Ty ( residuals , residuals , residuals $NUMBER$ ) ;
rank: 472
score: 98.86693115234375
patch: q CaMeL Ty ( 0 ) ; ) ;
rank: 472
score: 98.77992942116477
patch: q CaMeL Ty [ max ++ ] = residuals ;
rank: 473
score: 99.05391438802083
patch: q CaMeL Ty ( residuals , x CaMeL Norm , delta , x CaMeL Norm ) ;
rank: 473
score: 98.8668545809659
patch: q CaMeL Ty ( residuals ) ; residuals ; }
rank: 473
score: 98.86117553710938
patch: if ( increment CaMeL Iterations CaMeL Counter <= 0 ) {
rank: 473
score: 98.82005479600694
patch: q CaMeL Ty = this . residuals ;
rank: 473
score: 98.77940784801136
patch: q CaMeL Ty [ * residuals ] = residuals ;
rank: 474
score: 99.05314127604167
patch: q CaMeL Ty ( ) ; x CaMeL Norm += diag CaMeL R [ 0 ] ;
rank: 474
score: 98.94993286132812
patch: = residuals ( residuals ) [ 0 ] ;
rank: 474
score: 98.86029052734375
patch: q CaMeL Ty ( ) ; / *
rank: 475
score: 99.05303955078125
patch: q CaMeL Ty ( residuals , x CaMeL Norm , delta , first CaMeL Iteration ) ;
rank: 475
score: 98.98670247395833
patch: increment CaMeL Iterations CaMeL Counter ( ) ; if ( first CaMeL Iteration )
rank: 475
score: 98.92814497514205
patch: R . increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 475
score: 98.86006469726563
patch: q CaMeL Ty ( residuals , beta ) ;
rank: 475
score: 98.81575317382813
patch: q CaMeL Ty = this . residuals ) ;
rank: 476
score: 99.06734525240384
patch: if ( first CaMeL Iteration ) x CaMeL Norm = 0 ;
rank: 476
score: 98.98606363932292
patch: q CaMeL Ty ( residuals , jac CaMeL Norm ) ;
rank: 476
score: 98.9279276529948
patch: q CaMeL Ty = ( double [ ] ) current ;
rank: 476
score: 98.91742498224431
patch: q CaMeL Ty ( residuals . residuals $NUMBER$ ) ;
rank: 476
score: 98.86416625976562
patch: q CaMeL Ty = ) ; ;
rank: 476
score: 98.85995718149039
patch: q CaMeL Ty ( residuals , diag [ 0 ] ) ;
rank: 476
score: 98.81572614397321
patch: ( residuals , residuals ) ;
rank: 476
score: 98.77803178267045
patch: * * / q CaMeL Ty ( residuals ) ;
rank: 477
score: 99.0523681640625
patch: q CaMeL Ty ( residuals ) ; double x CaMeL Norm = 0 ;
rank: 477
score: 98.98600260416667
patch: q CaMeL Ty ( $NUMBER$ , x CaMeL Norm ) ;
rank: 477
score: 98.94966430664063
patch: . q CaMeL Ty ( residuals ) ; ;
rank: 477
score: 98.92462158203125
patch: q CaMeL Ty ( residuals ) ; true = true ;
rank: 477
score: 98.86358087713069
patch: q CaMeL Ty ( residuals ) ; / ) ;
rank: 477
score: 98.85903930664062
patch: if ( x CaMeL Norm <= 0 ) {
rank: 477
score: 98.77711070667614
patch: q CaMeL Ty = new String ( residuals ) ;
rank: 478
score: 99.0523193359375
patch: q CaMeL Ty ( residuals ) ; } lm CaMeL Dir = 0 ;
rank: 478
score: 98.98546142578125
patch: q CaMeL Ty ( false , objective ) ;
rank: 478
score: 98.948779296875
patch: q CaMeL Ty ( residuals , ) ) ;
rank: 478
score: 98.92398410373264
patch: bound = new double [ cols ] ;
rank: 478
score: 98.86334783380681
patch: q CaMeL Ty ( q CaMeL Ty 1 ) ;
rank: 478
score: 98.8590087890625
patch: this . update CaMeL Jacobian ( residuals ) ;
rank: 478
score: 98.7768310546875
patch: q CaMeL Ty = residuals ) * residuals ;
rank: 479
score: 99.05203450520834
patch: q CaMeL Ty ( residuals ) ; } update CaMeL Jacobian ( ) ;
rank: 479
score: 98.94809792258523
patch: / * / q CaMeL Ty ( residuals ) ;
rank: 479
score: 98.92327325994319
patch: delta = 0 ; lm CaMeL Par = 0 ;
rank: 479
score: 98.9160868326823
patch: q CaMeL Ty $NUMBER$ [ 0 ] = - 1 ;
rank: 479
score: 98.86226029829545
patch: q CaMeL Ty ( residuals [ null ] ) ;
rank: 479
score: 98.85882568359375
patch: q CaMeL Ty ( residuals ) ; jacobian = 0 ;
rank: 479
score: 98.81406860351562
patch: } else { q CaMeL Ty ( ) ;
rank: 479
score: 98.77658913352273
patch: q CaMeL Ty ( ( long ) residuals ) ;
rank: 480
score: 99.06505408653847
patch: lm CaMeL Par = 0 ; x CaMeL Norm = 0 ;
rank: 480
score: 98.984912109375
patch: if ( first CaMeL Iteration ) { lm CaMeL Par = 0 ; }
rank: 480
score: 98.9474209872159
patch: q CaMeL Ty [ 0 ] = residuals . ;
rank: 480
score: 98.9153164950284
patch: q CaMeL Ty [ residuals ] = residuals 1 ;
rank: 480
score: 98.8618496981534
patch: q CaMeL Ty ( residuals , residuals [ ) ;
rank: 480
score: 98.85863579644098
patch: m = update CaMeL Jacobian ( ) ;
rank: 480
score: 98.77557927911931
patch: q CaMeL Ty = q CaMeL Ty = true ;
rank: 481
score: 98.98465169270834
patch: = ( int [ ] ) point . get CaMeL Value ( ) ;
rank: 481
score: 98.94642944335938
patch: = q CaMeL Ty ( residuals ) ; }
rank: 481
score: 98.9147440592448
patch: q CaMeL Ty ( System . out , residuals ) ;
rank: 481
score: 98.86131702769886
patch: q CaMeL Ty ( residuals ) ; return $NUMBER$ ;
rank: 481
score: 98.8131436434659
patch: q CaMeL Ty = q CaMeL Ty ; ; ;
rank: 482
score: 99.06348528180804
patch: int [ ] old CaMeL X = new int [ cols ] ;
rank: 482
score: 98.98435465494792
patch: delta = 0 ; boolean first CaMeL Iteration = true ;
rank: 482
score: 98.92282104492188
patch: q CaMeL Ty ( residuals ) ; 0 = 0 ;
rank: 482
score: 98.91387939453125
patch: q CaMeL Ty ( residuals + 1 , residuals ) ;
rank: 482
score: 98.86130593039773
patch: q CaMeL Ty = residuals ; q CaMeL Ty .
rank: 482
score: 98.85805257161458
patch: if ( first CaMeL Iteration || cost != 0 ) {
rank: 482
score: 98.81247780539773
patch: q CaMeL Ty ( - residuals , residuals ) ;
rank: 483
score: 99.04948874080883
patch: q CaMeL Ty ( residuals ) ; double first CaMeL Iteration = 0 . 0 ;
rank: 483
score: 98.94608154296876
patch: q CaMeL Ty ( residuals ) . ) ;
rank: 483
score: 98.92110188802083
patch: delta = ( int [ ] ) lm CaMeL Dir ;
rank: 483
score: 98.91382853190105
patch: q CaMeL Ty ( residuals $NUMBER$ [ 0 ] ) ;
rank: 483
score: 98.86128373579545
patch: q CaMeL Ty ( residuals ( ) + ) ;
rank: 483
score: 98.85789184570312
patch: q CaMeL Ty ( residuals , rows ) ;
rank: 484
score: 98.91832386363636
patch: = ( double [ ] ) x CaMeL Norm ;
rank: 484
score: 98.85781028053977
patch: q CaMeL Ty ( residuals , objective ) ; }
rank: 484
score: 98.77228338068181
patch: q CaMeL Ty = residuals ; current = residuals ;
rank: 485
score: 99.04874674479167
patch: q CaMeL Ty ( ) ; x CaMeL Norm = Math . max ( diag ) ;
rank: 485
score: 98.9835917154948
patch: double first CaMeL Iteration = new double [ cols ] ;
rank: 485
score: 98.91165161132812
patch: q CaMeL Ty -= q CaMeL Ty [ 0 ] ;
rank: 485
score: 98.85978560014205
patch: q CaMeL Ty ( residuals ( true ) ) ;
rank: 485
score: 98.80977630615234
patch: } q CaMeL Ty ( ) ;
rank: 485
score: 98.77161865234375
patch: q CaMeL Ty = residuals ; return false ;
rank: 486
score: 99.04686482747395
patch: q CaMeL Ty ( residuals ) ; previous = null ;
rank: 486
score: 98.98330453725961
patch: if ( increment CaMeL Iterations CaMeL Counter ( ) != 0 )
rank: 486
score: 98.9175692471591
patch: delta ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 486
score: 98.85664876302083
patch: if ( first CaMeL Iteration == 0 )
rank: 487
score: 99.06215413411458
patch: q CaMeL Ty ( residuals [ 0 ] ) ; }
rank: 487
score: 98.9829833984375
patch: if ( first CaMeL Iteration ) { update CaMeL Jacobian ( false ) ;
rank: 487
score: 98.94207153320312
patch: q CaMeL Ty . residuals ( ) ; ;
rank: 487
score: 98.91719360351563
patch: delta = ( int [ ] ) 0 ;
rank: 487
score: 98.85634202223558
patch: if ( increment CaMeL Iterations CaMeL Counter ( ) == 0 )
rank: 488
score: 98.98291015625
patch: if ( true ) { lm CaMeL Par = 0 ;
rank: 488
score: 98.94130249023438
patch: q CaMeL Ty += residuals ( residuals ) ;
rank: 488
score: 98.91051228841145
patch: q CaMeL Ty ( residuals - $NUMBER$ , residuals ) ;
rank: 488
score: 98.8588534268466
patch: q CaMeL Ty ( residuals ) ; System . ;
rank: 488
score: 98.85597922585227
patch: interrupt ( ) ; qr CaMeL Decomposition ( ) ;
rank: 488
score: 98.77139892578126
patch: q CaMeL Ty ( residuals ) = residuals ;
rank: 489
score: 99.04402669270833
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm = new double [ cols ] ;
rank: 489
score: 98.910400390625
patch: = q CaMeL Ty [ 0 ] [ residuals ] ;
rank: 489
score: 98.85835571289063
patch: q CaMeL Ty = residuals ) ; ) ;
rank: 489
score: 98.85595703125
patch: q CaMeL Ty ( delta ) ;
rank: 489
score: 98.8059969815341
patch: q CaMeL Ty residuals q CaMeL Ty ( ) ;
rank: 489
score: 98.77135120738636
patch: q CaMeL Ty [ 1 ] = residuals ; }
rank: 490
score: 99.04380888097427
patch: q CaMeL Ty ( residuals ) ; x CaMeL Norm += jac CaMeL Norm ; }
rank: 490
score: 98.9150390625
patch: q CaMeL Ty ( residuals ) ; * / break ;
rank: 490
score: 98.90998979048295
patch: q CaMeL Ty [ 0 ] = null ; }
rank: 490
score: 98.80589710582386
patch: q CaMeL Ty = q CaMeL Ty & residuals ;
rank: 490
score: 98.7706631747159
patch: q CaMeL Ty ( ) ; return false ; }
rank: 491
score: 98.9394198330966
patch: q CaMeL Ty $NUMBER$ . residuals ( residuals ) ;
rank: 491
score: 98.9098233309659
patch: q CaMeL Ty , q CaMeL Ty ( ) ;
rank: 491
score: 98.80479847301136
patch: q CaMeL Ty = q CaMeL Ty - 1 ;
rank: 491
score: 98.76990855823864
patch: / * * q CaMeL Ty ( residuals ) ;
rank: 492
score: 99.04266826923077
patch: update CaMeL Jacobian ( ) ; lm CaMeL Par = 0 ;
rank: 492
score: 98.90972900390625
patch: q CaMeL Ty ( residuals , start , residuals ) ;
rank: 492
score: 98.854736328125
patch: q CaMeL Ty ( residuals , [ 0 ] ) ;
rank: 492
score: 98.80438787286931
patch: q CaMeL Ty residuals ( q CaMeL Ty ) ;
rank: 492
score: 98.76955344460227
patch: q CaMeL Ty = residuals ; residuals = true ;
rank: 493
score: 99.05718994140625
patch: = Vectorial CaMeL Point CaMeL Value CaMeL Pair previous ;
rank: 493
score: 98.93867631392045
patch: q CaMeL Ty [ residuals ] = residuals . ;
rank: 493
score: 98.90946451822917
patch: q CaMeL Ty ( 0 , 0 , residuals ) ;
rank: 493
score: 98.8559903231534
patch: q CaMeL Ty ( residuals ) ; residuals ; ;
rank: 493
score: 98.769287109375
patch: q CaMeL Ty ( ) ; if ( residuals )
rank: 494
score: 98.93865966796875
patch: = q CaMeL Ty ( residuals , ) ;
rank: 494
score: 98.85441450639205
patch: q CaMeL Ty ( residuals , diag , ) ;
rank: 494
score: 98.8537930575284
patch: q CaMeL Ty ( residuals ) ; break ; ;
rank: 494
score: 98.76910955255681
patch: q CaMeL Ty = new ? $NUMBER$ : 0 ;
rank: 495
score: 98.97195434570312
patch: x CaMeL Norm = jac CaMeL Norm [ 0 ] ;
rank: 495
score: 98.909423828125
patch: q CaMeL Ty [ 0 ] = residuals [ 0 ] ;
rank: 495
score: 98.90892944335937
patch: increment CaMeL Iterations CaMeL Counter ( false ) ;
rank: 495
score: 98.85307173295455
patch: q CaMeL Ty ( ) ; for ( ) ;
rank: 495
score: 98.80239035866477
patch: q CaMeL Ty ( ( int ) 1 ) ;
rank: 496
score: 99.05556077223558
patch: double delta = Math . sqrt ( x CaMeL Norm ) ;
rank: 496
score: 99.04117838541667
patch: q CaMeL Ty ( residuals ) ; current = false ;
rank: 496
score: 98.93704562717014
patch: q CaMeL Ty $NUMBER$ ( residuals ) ;
rank: 496
score: 98.90896606445312
patch: q CaMeL Ty [ 1 ] = current ;
rank: 496
score: 98.9072977701823
patch: q CaMeL Ty [ residuals ] = x CaMeL Norm ;
rank: 496
score: 98.85419379340277
patch: if ( first CaMeL Iteration ) break ;
rank: 497
score: 98.97137920673077
patch: = ( double [ ] ) update CaMeL Jacobian ( ) ;
rank: 497
score: 98.90883382161458
patch: q CaMeL Ty [ residuals - 1 ] = 0 ;
rank: 497
score: 98.90534002130681
patch: delta = 1 ; qr CaMeL Decomposition ( ) ;
rank: 497
score: 98.85392252604167
patch: q CaMeL Ty ( residuals ) ; System . * /
rank: 497
score: 98.85258178710937
patch: q CaMeL Ty = residuals = residuals ) ;
rank: 497
score: 98.80152587890625
patch: q CaMeL Ty ; q CaMeL Ty ) ;
rank: 497
score: 98.76776677911931
patch: result = ( q CaMeL Ty ( ) ) ;
rank: 498
score: 98.9712626139323
patch: = update CaMeL Residuals CaMeL And CaMeL Cost ( ) ;
rank: 498
score: 98.93323863636364
patch: 1 . q CaMeL Ty ( residuals ) ; ;
rank: 498
score: 98.90839979383681
patch: q CaMeL Ty ( ) ( ) ;
rank: 498
score: 98.90485229492188
patch: x CaMeL Norm = 0 . 0 ; }
rank: 498
score: 98.8520174893466
patch: } q CaMeL Ty ( residuals ) ; ) ;
rank: 498
score: 98.8005038174716
patch: q CaMeL Ty = residuals q CaMeL Ty residuals ;
rank: 499
score: 99.04026100852273
patch: q CaMeL Ty ( ) ; previous = current ;
rank: 499
score: 98.9312744140625
patch: q CaMeL Ty -= residuals ) ;
rank: 499
score: 98.90775553385417
patch: q CaMeL Ty ( residuals ) . clone ( ) ;
rank: 499
score: 98.8531494140625
patch: q CaMeL Ty ( delta , current ) ;
rank: 499
score: 98.85014204545455
patch: q CaMeL Ty ( residuals ) ; residuals = (
rank: 499
score: 98.76746715198864
patch: q CaMeL Ty = new Long ( residuals ) ;
rank: 500
score: 99.05098470052083
patch: double x CaMeL Norm = new double [ cols ] ;
rank: 500
score: 99.0401611328125
patch: q CaMeL Ty ( ) ; x CaMeL Norm += diag CaMeL R [ point ] ;
rank: 500
score: 98.93060857599431
patch: q CaMeL Ty ( residuals ) ; * / }
rank: 500
score: 98.90308489118304
patch: lm CaMeL Par ( ) ;
rank: 501
score: 99.0399639423077
patch: q CaMeL Ty ( ) ; lm CaMeL Dir ( ) ;
rank: 501
score: 98.90687144886364
patch: q CaMeL Ty [ ) ] = - 1 ;
rank: 501
score: 98.90255737304688
patch: = ( Vectorial CaMeL Point CaMeL Value CaMeL Pair )
rank: 501
score: 98.85252888997395
patch: q CaMeL Ty ( residuals , objective , 0 ) ;
rank: 501
score: 98.84971923828125
patch: q CaMeL Ty = q CaMeL Ty ; )
rank: 502
score: 99.04905348557692
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous = point ;
rank: 502
score: 99.0386493389423
patch: q CaMeL Ty ( ) ; x CaMeL Norm = current ;
rank: 502
score: 98.93006727430556
patch: = q CaMeL Ty ( ) ) ;
rank: 502
score: 98.90107945033482
patch: x CaMeL Norm = 0 ;
rank: 502
score: 98.85182883522727
patch: current = current ; update CaMeL Jacobian ( ) ;
rank: 502
score: 98.7665127840909
patch: q CaMeL Ty = residuals residuals [ 0 ] ;
rank: 503
score: 99.04776000976562
patch: q CaMeL Ty ( 0 , 0 , 0 ) ;
rank: 503
score: 99.03849283854167
patch: q CaMeL Ty ( residuals ) ; previous = ) ;
rank: 503
score: 98.92958577473958
patch: ; q CaMeL Ty ( residuals ) ;
rank: 503
score: 98.9004638671875
patch: delta = ( double [ ] ) cols ;
rank: 503
score: 98.85162823016827
patch: q CaMeL Ty ( ) ; if ( qr CaMeL Decomposition )
rank: 503
score: 98.84953169389205
patch: q CaMeL Ty ( residuals . 0 1 ) ;
rank: 503
score: 98.76585693359375
patch: q CaMeL Ty = ( int ) residuals ;
rank: 504
score: 99.04576619466145
patch: x CaMeL Norm = permutation * point [ 0 ] ;
rank: 504
score: 99.03759765625
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par = q CaMeL Ty ( ) ;
rank: 504
score: 98.96602376302083
patch: x CaMeL Norm = jac CaMeL Norm [ point ] ;
rank: 504
score: 98.89802689985795
patch: q CaMeL Ty ( residuals ) ; work $NUMBER$ ;
rank: 504
score: 98.8495205965909
patch: else { q CaMeL Ty ( residuals ) ; ;
rank: 504
score: 98.76569158380681
patch: q CaMeL Ty = residuals q CaMeL Ty ) ;
rank: 505
score: 99.045166015625
patch: q CaMeL Ty ( residuals [ 0 ] , current ) ;
rank: 505
score: 99.03739107572116
patch: lm CaMeL Par = increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 505
score: 98.96567789713542
patch: q CaMeL Ty ( residuals , diag , objective ) ;
rank: 505
score: 98.92893473307292
patch: += q CaMeL Ty ( residuals ) ;
rank: 505
score: 98.85064697265625
patch: q CaMeL Ty ( residuals ) && first CaMeL Iteration )
rank: 505
score: 98.76489868164063
patch: q CaMeL Ty [ true ] = residuals ;
rank: 506
score: 99.03676194411058
patch: ( x CaMeL Norm , delta , diag CaMeL R ) ;
rank: 506
score: 98.96519978841145
patch: q CaMeL Ty ( residuals ( ) , objective ) ;
rank: 506
score: 98.92766723632812
patch: q CaMeL Ty ( residuals , ; * /
rank: 506
score: 98.90331013997395
patch: q CaMeL Ty ( residuals ( float ) residuals ) ;
rank: 506
score: 98.84937879774306
patch: head = update CaMeL Jacobian ( ) ;
rank: 506
score: 98.84832763671875
patch: q CaMeL Ty = new { ) ;
rank: 507
score: 99.03635817307692
patch: q CaMeL Ty ( ) ; lm CaMeL Par = true ;
rank: 507
score: 98.90321858723958
patch: q CaMeL Ty ( residuals $NUMBER$ * residuals 1 ) ;
rank: 508
score: 98.90205522017045
patch: q CaMeL Ty [ 1 ] = - 1 ;
rank: 508
score: 98.89267800071023
patch: delta = current ; update CaMeL Jacobian ( ) ;
rank: 508
score: 98.84853515625
patch: if ( first CaMeL Iteration ) { try {
rank: 509
score: 99.04302978515625
patch: = new double [ rows ] ;
rank: 509
score: 99.03538004557292
patch: q CaMeL Ty ( residuals ) ; previous = this ;
rank: 509
score: 98.96353759765626
patch: = current . update CaMeL Jacobian ( ) ;
rank: 509
score: 98.92586517333984
patch: q CaMeL Ty [ residuals ] ;
rank: 509
score: 98.8483174641927
patch: q CaMeL Ty ( residuals , point , diag ) ;
rank: 509
score: 98.78662787543402
patch: ( 0 , residuals , residuals ) ;
rank: 509
score: 98.762744140625
patch: q CaMeL Ty = residuals ( $NUMBER$ ) ;
rank: 510
score: 98.89166814630681
patch: q CaMeL Ty ( new double [ cols ] ;
rank: 510
score: 98.84782270951705
patch: if ( first CaMeL Iteration && cost != 0 )
rank: 510
score: 98.84697931463069
patch: q CaMeL Ty ( residuals 1 - residuals ) ;
rank: 510
score: 98.78370361328125
patch: ( q CaMeL Ty ( residuals ) ) ;
rank: 511
score: 99.04171048677884
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous += previous ;
rank: 511
score: 99.03369140625
patch: q CaMeL Ty ( point , delta , diag ) ;
rank: 511
score: 98.92450506036931
patch: $NUMBER$ . q CaMeL Ty ( residuals ) ; ;
rank: 511
score: 98.84722900390625
patch: q CaMeL Ty ( residuals , diag , residuals ) ;
rank: 511
score: 98.84638006036931
patch: q CaMeL Ty = residuals . current ( ) ;
rank: 511
score: 98.78302612304688
patch: q CaMeL Ty . q CaMeL Ty ) ;
rank: 511
score: 98.76185913085938
patch: q CaMeL Ty ( ) ; return residuals ;
rank: 512
score: 99.04168701171875
patch: double q CaMeL Ty = new double [ cols ] ;
rank: 512
score: 98.96236165364583
patch: q CaMeL Ty ( x CaMeL Norm , delta ) ;
rank: 512
score: 98.92400512695312
patch: q CaMeL Ty ( ) ; return null ;
rank: 512
score: 98.90045635516827
patch: q CaMeL Ty [ 0 ] = ( int ) residuals ;
rank: 512
score: 98.84709028764205
patch: if ( true ) lm CaMeL Par = 0 ;
rank: 512
score: 98.84608154296875
patch: q CaMeL Ty = residuals . residuals ) ;
rank: 512
score: 98.78160400390625
patch: q CaMeL Ty = q CaMeL Ty residuals }
rank: 512
score: 98.76024280894886
patch: q CaMeL Ty [ start 1 ] = residuals ;
rank: 513
score: 99.03307291666667
patch: q CaMeL Ty ( residuals ) ; first CaMeL Iteration = false ; }
rank: 513
score: 98.95972696940105
patch: q CaMeL Ty ( $NUMBER$ , point , objective ) ;
rank: 513
score: 98.92268676757813
patch: q CaMeL Ty ( residuals , ; ) ;
rank: 513
score: 98.84679412841797
patch: if ( current != 0 ) {
rank: 513
score: 98.78102620442708
patch: ( residuals , q CaMeL Ty ) ;
rank: 513
score: 98.7577237215909
patch: q CaMeL Ty = residuals . length ( ) ;
rank: 514
score: 99.03983561197917
patch: lm CaMeL Par = permutation * point [ cols ] ;
rank: 514
score: 99.0324237530048
patch: qr CaMeL Decomposition ( ) ; lm CaMeL Par = 0 ;
rank: 514
score: 98.92252604166667
patch: q CaMeL Ty ( residuals , ; ;
rank: 514
score: 98.898681640625
patch: q CaMeL Ty ( ) ; return - 1 ;
rank: 514
score: 98.8885830965909
patch: vector ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 514
score: 98.84677734375
patch: this . if ( first CaMeL Iteration ) {
rank: 514
score: 98.84584738991477
patch: q CaMeL Ty ( residuals ) ; ; break ;
rank: 514
score: 98.7577237215909
patch: q CaMeL Ty [ residuals ++ ] = residuals ;
rank: 515
score: 99.039306640625
patch: q CaMeL Ty ( residuals . point , objective ) ;
rank: 515
score: 98.92226340553977
patch: q CaMeL Ty [ q CaMeL Ty ) ] ;
rank: 515
score: 98.89827880859374
patch: q CaMeL Ty ( residuals - $NUMBER$ ) ;
rank: 515
score: 98.88707386363636
patch: increment CaMeL Iterations CaMeL Counter ( ) ; / ;
rank: 515
score: 98.84609985351562
patch: q CaMeL Ty ( residuals ) ; } else
rank: 515
score: 98.84512329101562
patch: q CaMeL Ty = residuals . length ++ ;
rank: 515
score: 98.77739800347223
patch: q CaMeL Ty = residuals residuals ) ;
rank: 515
score: 98.75685813210227
patch: q CaMeL Ty ( ) ; current = residuals ;
rank: 516
score: 99.03651123046875
patch: q CaMeL Ty ( residuals [ 0 ] ;
rank: 516
score: 98.9580790201823
patch: q CaMeL Ty ( null , point , objective ) ;
rank: 516
score: 98.921337890625
patch: 1 = q CaMeL Ty ( residuals ) ;
rank: 516
score: 98.8972900390625
patch: q CaMeL Ty ( residuals || residuals ) ;
rank: 516
score: 98.885986328125
patch: increment CaMeL Iterations CaMeL Counter ( - $NUMBER$ ) ;
rank: 516
score: 98.84539794921875
patch: q CaMeL Ty ( residuals , current , current ) ;
rank: 516
score: 98.77703857421875
patch: q CaMeL Ty = $NUMBER$ ;
rank: 517
score: 99.02787272135417
patch: q CaMeL Ty ( residuals , residuals , diag ) ;
rank: 517
score: 98.92123752170139
patch: - q CaMeL Ty ( residuals ) ;
rank: 517
score: 98.89469770951705
patch: q CaMeL Ty ( residuals * residuals $NUMBER$ ) ;
rank: 517
score: 98.88589477539062
patch: increment CaMeL Iterations CaMeL Counter ( true ) ;
rank: 517
score: 98.8449951171875
patch: if ( first CaMeL Iteration != 0 ) {
rank: 517
score: 98.84446411132812
patch: q CaMeL Ty ( 0 + residuals ) ;
rank: 517
score: 98.75420587713069
patch: q CaMeL Ty = residuals ( ) ; break ;
rank: 518
score: 98.89442952473958
patch: q CaMeL Ty [ residuals - 1 ] = current ;
rank: 518
score: 98.84495035807292
patch: q CaMeL Ty ( residuals , current , 0 ) ;
rank: 518
score: 98.84423828125
patch: q CaMeL Ty = residuals = 0 ;
rank: 518
score: 98.77589721679688
patch: q CaMeL Ty = new ( residuals ) ;
rank: 519
score: 99.03367106119792
patch: delta = ( double [ ] ) lm CaMeL Par ;
rank: 519
score: 99.02657376802884
patch: update CaMeL Jacobian ( ) ; first CaMeL Iteration = true ;
rank: 519
score: 98.92032470703126
patch: q CaMeL Ty += q CaMeL Ty ) ;
rank: 519
score: 98.84436645507813
patch: if ( lm CaMeL Par == 0 ) {
rank: 519
score: 98.84339488636364
patch: q CaMeL Ty = residuals . ( ) ; }
rank: 519
score: 98.77365112304688
patch: q CaMeL Ty ( this . residuals ) ;
rank: 519
score: 98.75346235795455
patch: q CaMeL Ty = residuals residuals residuals ( ) ;
rank: 520
score: 99.03326970880681
patch: q CaMeL Ty ( x CaMeL Norm ) ; }
rank: 520
score: 99.02398681640625
patch: q CaMeL Ty ( residuals ) ; lm CaMeL Par ;
rank: 520
score: 98.91987748579545
patch: - 1 . q CaMeL Ty ( residuals ) ;
rank: 520
score: 98.84285111860795
patch: if ( increment CaMeL Iterations CaMeL Counter ( ) )
rank: 520
score: 98.7733642578125
patch: ( residuals ) ;
rank: 521
score: 99.03248009314903
patch: double x CaMeL Norm = permutation * point [ 0 ] ;
rank: 521
score: 98.91612659801136
patch: q CaMeL Ty ( residuals ) ; return ; }
rank: 521
score: 98.84193115234375
patch: q CaMeL Ty = residuals ( ) ; ;
rank: 521
score: 98.84127807617188
patch: q CaMeL Ty ( residuals ) ; if (
rank: 521
score: 98.77138264973958
patch: else { q CaMeL Ty ( ) ;
rank: 522
score: 99.03219604492188
patch: q CaMeL Ty [ 0 ] = x CaMeL Norm ;
rank: 522
score: 98.91553844105114
patch: = residuals ( ) . get ( residuals ) ;
rank: 522
score: 98.88853870738636
patch: q CaMeL Ty ( residuals $NUMBER$ * $NUMBER$ ) ;
rank: 522
score: 98.88304443359375
patch: increment CaMeL Iterations CaMeL Counter ( 1 ) ;
rank: 522
score: 98.75046608664773
patch: q CaMeL Ty = residuals residuals [ false ] ;
rank: 523
score: 99.02197265625
patch: q CaMeL Ty ( ) ; x CaMeL Norm += 1 ;
rank: 523
score: 98.95257013494319
patch: else { increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 523
score: 98.91527642144098
patch: = residuals ( ) residuals ( ) ;
rank: 523
score: 98.88791910807292
patch: q CaMeL Ty = old CaMeL X [ 0 ] ;
rank: 523
score: 98.8816250887784
patch: this . increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 523
score: 98.84092881944444
patch: q CaMeL Ty = residuals ) ; }
rank: 523
score: 98.8408711751302
patch: q CaMeL Ty ( residuals , current , delta ) ;
rank: 523
score: 98.76846923828126
patch: q CaMeL Ty = q CaMeL Ty . }
rank: 524
score: 99.03094482421875
patch: q CaMeL Ty ( x CaMeL Norm , permutation ) ;
rank: 524
score: 99.02166193181819
patch: q CaMeL Ty ( residuals ) ; = 0 ;
rank: 524
score: 98.91483154296876
patch: q CaMeL Ty ( ) . ( ) ;
rank: 524
score: 98.84083862304688
patch: q CaMeL Ty ( residuals ) ; ; else
rank: 524
score: 98.84044189453125
patch: try { q CaMeL Ty ( residuals ) ;
rank: 524
score: 98.74990012428977
patch: q CaMeL Ty [ false ] ( residuals ) ;
rank: 525
score: 99.03077189127605
patch: delta delta = ( x CaMeL Norm == 0 ) ?
rank: 525
score: 99.02090219350961
patch: q CaMeL Ty ( ) ; x CaMeL Norm ( ) ;
rank: 525
score: 98.91441761363636
patch: q CaMeL Ty ( residuals ) ; continue ; }
rank: 525
score: 98.88031616210938
patch: double x CaMeL Norm = 0 . 0 ;
rank: 525
score: 98.83878950639205
patch: if ( ) { update CaMeL Jacobian ( ) ;
rank: 525
score: 98.76779513888889
patch: ( this , q CaMeL Ty ) ;
rank: 525
score: 98.74859008789062
patch: q CaMeL Ty = residuals residuals = residuals ;
rank: 526
score: 99.01803588867188
patch: q CaMeL Ty ( 0 , qr CaMeL Decomposition ) ;
rank: 526
score: 98.94943576388889
patch: = ( double [ ] ) previous ;
rank: 526
score: 98.91398315429687
patch: q CaMeL Ty ( ) ; * ) ;
rank: 526
score: 98.8793701171875
patch: = 1 ; qr CaMeL Decomposition ( ) ;
rank: 526
score: 98.83932834201389
patch: q CaMeL Ty ( 0 , ) ;
rank: 526
score: 98.83870849609374
patch: q CaMeL Ty ( 1 , objective ) ;
rank: 526
score: 98.74711778428819
patch: result = q CaMeL Ty ( ) ;
rank: 527
score: 99.02943929036458
patch: delta = new double [ rows ] ;
rank: 527
score: 99.01758829752605
patch: q CaMeL Ty ( residuals ) ; / * / /
rank: 527
score: 98.91304524739583
patch: : q CaMeL Ty ( residuals ) ;
rank: 527
score: 98.885498046875
patch: q CaMeL Ty ( System . out ) ;
rank: 527
score: 98.83927778764205
patch: else q CaMeL Ty ( residuals ( ) ) ;
rank: 527
score: 98.83740234375
patch: q CaMeL Ty ( residuals , work $NUMBER$ , 0 ) ;
rank: 527
score: 98.76527235243056
patch: ( q CaMeL Ty , residuals ) ;
rank: 527
score: 98.74580078125
patch: q CaMeL Ty = residuals ( ) ; }
rank: 528
score: 99.0293856534091
patch: double x CaMeL Norm = permutation [ 0 ] ;
rank: 528
score: 98.91279296875
patch: q CaMeL Ty ( residuals . get ) ;
rank: 528
score: 98.88533528645833
patch: q CaMeL Ty ( residuals 0 ) ;
rank: 528
score: 98.83881170099431
patch: q CaMeL Ty ( residuals ) ; residuals . else
rank: 528
score: 98.83713989257812
patch: ( ) ; update CaMeL Jacobian ( ) ;
rank: 529
score: 99.02889310396634
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous += current ;
rank: 529
score: 98.91275024414062
patch: = q CaMeL Ty [ 0 ] ; ;
rank: 529
score: 98.83869086371527
patch: q CaMeL Ty = residuals ; ) {
rank: 529
score: 98.8371249112216
patch: cleanup ( ) ; qr CaMeL Decomposition ( ) ;
rank: 529
score: 98.76468505859376
patch: q CaMeL Ty q CaMeL Ty q CaMeL Ty
rank: 530
score: 99.01491477272727
patch: q CaMeL Ty ( residuals ) ; = current ;
rank: 530
score: 98.91253662109375
patch: = q CaMeL Ty ( residuals residuals ) ;
rank: 530
score: 98.8844970703125
patch: q CaMeL Ty [ 1 ] = null ;
rank: 530
score: 98.83711073133681
patch: if ( first CaMeL Iteration ) continue ;
rank: 530
score: 98.76174587673611
patch: q CaMeL Ty += q CaMeL Ty ;
rank: 530
score: 98.74055786132813
patch: q CaMeL Ty = residuals ; return true ;
rank: 531
score: 99.02500563401442
patch: x CaMeL Norm = 0 ; x CaMeL Norm = 0 ;
rank: 531
score: 98.94378662109375
patch: q CaMeL Ty ( residuals ) ; delta = current ;
rank: 531
score: 98.91198120117187
patch: = residuals ( ) residuals ( residuals ) ;
rank: 531
score: 98.87541060014205
patch: = ( double [ ] ) diag CaMeL R ;
rank: 531
score: 98.83854166666667
patch: q CaMeL Ty ( ) ; ; }
rank: 531
score: 98.7389404296875
patch: q CaMeL Ty = residuals ; return residuals ;
rank: 532
score: 98.87141723632813
patch: Math . sqrt ( x CaMeL Norm ) ;
rank: 532
score: 98.83806818181819
patch: q CaMeL Ty ( residuals . - 0 ) ;
rank: 533
score: 99.02239520733173
patch: delta = Math . sqrt ( diag [ 0 ] ) ;
rank: 533
score: 99.01112874348958
patch: q CaMeL Ty ( residuals ) ; previous = false ;
rank: 533
score: 98.94094848632812
patch: q CaMeL Ty += jac CaMeL Norm [ 0 ] ;
rank: 533
score: 98.870849609375
patch: increment CaMeL Iterations CaMeL Counter ( ) ; ) ;
rank: 533
score: 98.8379150390625
patch: q CaMeL Ty ( ) ; ) ; ;
rank: 533
score: 98.83621978759766
patch: q CaMeL Ty ( residuals ) ?
rank: 533
score: 98.73670654296875
patch: q CaMeL Ty ( ) ; return true ;
rank: 534
score: 98.9094571200284
patch: = ) ; q CaMeL Ty ( residuals ) ;
rank: 534
score: 98.8825350674716
patch: q CaMeL Ty [ residuals ++ ] = current ;
rank: 534
score: 98.83781127929687
patch: q CaMeL Ty ( residuals ) ; ) /
rank: 534
score: 98.75819702148438
patch: finally { q CaMeL Ty ( ) ; }
rank: 534
score: 98.73641357421874
patch: q CaMeL Ty ( residuals ) = true ;
rank: 535
score: 99.0214510830966
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 535
score: 99.01050743689903
patch: q CaMeL Ty [ residuals ) ] = diag CaMeL R ;
rank: 535
score: 98.9092529296875
patch: q CaMeL Ty ( residuals * $NUMBER$ ) ;
rank: 535
score: 98.88243611653645
patch: = new double [ q CaMeL Ty . length ] ;
rank: 535
score: 98.8280029296875
patch: if ( ! update CaMeL Jacobian ( ) )
rank: 535
score: 98.73295288085937
patch: b = q CaMeL Ty ( residuals ) ;
rank: 536
score: 99.02128092447917
patch: q CaMeL Ty $NUMBER$ = new double [ cols ] ;
rank: 536
score: 98.93797718394886
patch: first CaMeL Iteration = new double [ cols ] ;
rank: 536
score: 98.9091463955966
patch: q CaMeL Ty ++ ; residuals ( ) ; ;
rank: 536
score: 98.86993963068181
patch: increment CaMeL Iterations CaMeL Counter ( ) ; } }
rank: 536
score: 98.83701782226562
patch: q CaMeL Ty ( residuals ) throws / /
rank: 536
score: 98.82672119140625
patch: q CaMeL Ty ( permutation ) ;
rank: 536
score: 98.75689019097223
patch: ( residuals , residuals , residuals ) ;
rank: 537
score: 99.02040608723958
patch: q CaMeL Ty ++ ; x CaMeL Norm = 0 ;
rank: 537
score: 98.93710561899039
patch: q CaMeL Ty ( ) ; lm CaMeL Par = $NUMBER$ ;
rank: 537
score: 98.86891682942708
patch: q CaMeL Ty ( ) ; / ;
rank: 537
score: 98.83580433238636
patch: q CaMeL Ty ( residuals ) ; return residuals }
rank: 537
score: 98.82416326349431
patch: m = current ; update CaMeL Jacobian ( ) ;
rank: 537
score: 98.73137817382812
patch: / * q CaMeL Ty ( residuals ) ;
rank: 538
score: 99.01981295072116
patch: = new Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 538
score: 98.93670099431819
patch: lm CaMeL Par ; qr CaMeL Decomposition ( ) ;
rank: 538
score: 98.90836791992187
patch: q CaMeL Ty [ residuals ) ] = ;
rank: 538
score: 98.8687411221591
patch: delta = current . update CaMeL Jacobian ( ) ;
rank: 538
score: 98.835498046875
patch: q CaMeL Ty = q CaMeL Ty . ;
rank: 538
score: 98.8233309659091
patch: q CaMeL Ty ( work $NUMBER$ , objective ) ;
rank: 538
score: 98.75586615668402
patch: q CaMeL Ty [ residuals ] ++ ;
rank: 538
score: 98.73126831054688
patch: $NUMBER$ = q CaMeL Ty ( residuals ) ;
rank: 539
score: 99.0086161295573
patch: q CaMeL Ty ( point , q CaMeL Ty ) ;
rank: 539
score: 98.935791015625
patch: q CaMeL Ty ( point , objective , work 1 ) ;
rank: 539
score: 98.90813654119319
patch: q CaMeL Ty = residuals ( ) / $NUMBER$ ;
rank: 539
score: 98.87900797526042
patch: q CaMeL Ty [ 0 ] = new int ) ;
rank: 539
score: 98.83484996448864
patch: q CaMeL Ty = residuals . ( 1 ) ;
rank: 539
score: 98.823046875
patch: q CaMeL Ty ( 1 , 0 ) ;
rank: 539
score: 98.75345458984376
patch: q CaMeL Ty = residuals ( this ) ;
rank: 539
score: 98.72880859375
patch: * * q CaMeL Ty ( residuals ) ;
rank: 540
score: 98.93531383167614
patch: ( x CaMeL Norm , point , objective ) ;
rank: 540
score: 98.87686767578126
patch: q CaMeL Ty [ ) ] = null ;
rank: 540
score: 98.86290147569444
patch: q CaMeL Ty ( residuals ] ) ;
rank: 540
score: 98.8345947265625
patch: q CaMeL Ty ( residuals . 0 ) ) ;
rank: 541
score: 99.00542449951172
patch: = qr CaMeL Decomposition ( ) ;
rank: 541
score: 98.83429509943181
patch: q CaMeL Ty ( residuals . null , residuals ;
rank: 541
score: 98.74850124782986
patch: q CaMeL Ty [ 0 ] ++ ;
rank: 542
score: 98.90590598366477
patch: q CaMeL Ty * q CaMeL Ty ( ) ;
rank: 542
score: 98.83372913707386
patch: q CaMeL Ty = residuals = q CaMeL Ty .
rank: 542
score: 98.8207120028409
patch: current = current ; qr CaMeL Decomposition ( ) ;
rank: 542
score: 98.74479370117187
patch: q CaMeL Ty [ 0 ] = $NUMBER$ ;
rank: 543
score: 99.01650766225961
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair = current ; }
rank: 543
score: 98.8610595703125
patch: double increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 543
score: 98.83296342329545
patch: q CaMeL Ty ( residuals ) ; / / else
rank: 543
score: 98.82041237571023
patch: if ( first CaMeL Iteration ) { / * /
rank: 543
score: 98.73843994140626
patch: [ 0 ] ( residuals , residuals ) ;
rank: 543
score: 98.72498168945313
patch: q CaMeL Ty [ length ] = residuals ;
rank: 544
score: 99.0153096516927
patch: double delta = ( x CaMeL Norm == 0 ) ?
rank: 544
score: 99.0037841796875
patch: q CaMeL Ty ( point , lm CaMeL Dir ) ;
rank: 544
score: 98.93409423828125
patch: q CaMeL Ty ( true , objective ) ;
rank: 544
score: 98.90520685369319
patch: q CaMeL Ty = residuals ( ) - 1 ;
rank: 544
score: 98.86094360351562
patch: q CaMeL Ty ( residuals ) ; } }
rank: 544
score: 98.8203125
patch: if ( first CaMeL Iteration && true )
rank: 544
score: 98.73489990234376
patch: q CaMeL Ty = new int ( ) ;
rank: 544
score: 98.72267659505208
patch: q CaMeL Ty ( true ) ; }
rank: 545
score: 99.01509602864583
patch: lm CaMeL Par = permutation * point [ 0 ] ;
rank: 545
score: 98.90489850725446
patch: q CaMeL Ty ++ ; ;
rank: 545
score: 98.8747225674716
patch: [ 0 ] = new double [ residuals ] ;
rank: 545
score: 98.81737518310547
patch: if ( residuals == 0 ) {
rank: 545
score: 98.73406304253473
patch: [ 0 ] [ 0 ] ++ ;
rank: 546
score: 99.01450602213542
patch: q CaMeL Ty = jac CaMeL Norm [ 0 ] ;
rank: 546
score: 99.0027324969952
patch: q CaMeL Ty ++ ; boolean first CaMeL Iteration = true ;
rank: 546
score: 98.9048095703125
patch: = q CaMeL Ty ( residuals ) ) ;
rank: 546
score: 98.83102756076389
patch: q CaMeL Ty ( ) ; System }
rank: 546
score: 98.81720525568181
patch: q CaMeL Ty ( ) ; while ( true )
rank: 546
score: 98.72215576171875
patch: q CaMeL Ty = true ; break ; }
rank: 547
score: 98.9043301669034
patch: = q CaMeL Ty ( residuals ) ; ) ;
rank: 547
score: 98.8575439453125
patch: = ( int [ ] ) solved CaMeL Cols ;
rank: 547
score: 98.81645063920455
patch: m = 0 ; qr CaMeL Decomposition ( ) ;
rank: 547
score: 98.73218451605902
patch: q CaMeL Ty ( residuals ) ; int
rank: 547
score: 98.72203369140625
patch: node . q CaMeL Ty ( residuals ) ;
rank: 548
score: 98.90410766601562
patch: ++ ; q CaMeL Ty ( residuals ) ;
rank: 548
score: 98.87336869673295
patch: q CaMeL Ty [ 0 ] = current ) ;
rank: 548
score: 98.722021484375
patch: q CaMeL Ty = residuals ) / false ;
rank: 549
score: 99.0120340983073
patch: q CaMeL Ty ( residuals , 0 . 0 ) ;
rank: 549
score: 99.00076998197116
patch: q CaMeL Ty ( ) ; old CaMeL Res = current ;
rank: 549
score: 98.9038418856534
patch: q CaMeL Ty ( residuals ) * / ) ;
rank: 549
score: 98.8713711825284
patch: q CaMeL Ty [ residuals 1 ] = null ;
rank: 549
score: 98.81414184570312
patch: q CaMeL Ty ( residuals ) = 0 ;
rank: 549
score: 98.72412719726563
patch: q CaMeL Ty += residuals [ 0 ] ;
rank: 549
score: 98.71915283203126
patch: q CaMeL Ty = ) q CaMeL Ty ;
rank: 550
score: 99.01123985877403
patch: q CaMeL Ty ( residuals ) [ 0 ] = current ;
rank: 550
score: 98.90220133463542
patch: * q CaMeL Ty ( residuals ) ;
rank: 550
score: 98.87000621448864
patch: q CaMeL Ty [ residuals 1 ] = current ;
rank: 550
score: 98.82664905894886
patch: q CaMeL Ty ( residuals ) ; ; ; }
rank: 550
score: 98.81353204900569
patch: m = current ; qr CaMeL Decomposition ( ) ;
rank: 550
score: 98.72265014648437
patch: q CaMeL Ty [ residuals ] = $NUMBER$ ;
rank: 550
score: 98.7183837890625
patch: [ 0 ] = residuals ( residuals ) ;
rank: 551
score: 98.99769005408653
patch: q CaMeL Ty ( ) boolean first CaMeL Iteration = true ;
rank: 551
score: 98.9017333984375
patch: q CaMeL Ty ( ) ; return current ; }
rank: 551
score: 98.86995072798295
patch: q CaMeL Ty [ residuals ] = residuals $NUMBER$ ;
rank: 551
score: 98.85261840820313
patch: lm CaMeL Par ( residuals , residuals ) ;
rank: 551
score: 98.82594604492188
patch: q CaMeL Ty = residuals . = ) ;
rank: 551
score: 98.8134765625
patch: flush ( ) ; qr CaMeL Decomposition ( ) ;
rank: 551
score: 98.72160121372768
patch: ( 0 . 0 ) ;
rank: 551
score: 98.717333984375
patch: q CaMeL Ty ( residuals ) = false ;
rank: 552
score: 99.00960693359374
patch: lm CaMeL Par = permutation [ 0 ] ;
rank: 552
score: 98.9975077311198
patch: q CaMeL Ty ( ) ; work 1 ( ) ;
rank: 552
score: 98.9287821451823
patch: if ( true ) { q CaMeL Ty ( ) ;
rank: 552
score: 98.90150035511364
patch: = q CaMeL Ty . residuals ( ) ; ;
rank: 552
score: 98.82521362304688
patch: q CaMeL Ty ( residuals , ; / /
rank: 552
score: 98.81325073242188
patch: try { update CaMeL Jacobian ( true ) ;
rank: 553
score: 99.00901285807292
patch: q CaMeL Ty = permutation * point [ cols ] ;
rank: 553
score: 98.99746704101562
patch: lm CaMeL Par = ( double [ ] ) current ;
rank: 553
score: 98.92850748697917
patch: = ( int [ ] ) current ;
rank: 553
score: 98.90071614583333
patch: = q CaMeL Ty ;
rank: 553
score: 98.8513427734375
patch: increment CaMeL Iterations CaMeL Counter ( cols ) ;
rank: 553
score: 98.82352905273437
patch: q CaMeL Ty = q CaMeL Ty ++ ;
rank: 553
score: 98.81264038085938
patch: q CaMeL Ty ( previous , objective ) ;
rank: 553
score: 98.71651882595486
patch: q CaMeL Ty ( false ) ; }
rank: 554
score: 99.00893147786458
patch: update CaMeL Residuals CaMeL And CaMeL Cost ( ) ; }
rank: 554
score: 98.90064086914063
patch: q CaMeL Ty . set ( residuals ) ;
rank: 554
score: 98.86685791015626
patch: q CaMeL Ty ( residuals , start ) ;
rank: 554
score: 98.82316589355469
patch: q CaMeL Ty = null ; ;
rank: 554
score: 98.81252219460227
patch: head = current ; update CaMeL Jacobian ( ) ;
rank: 555
score: 98.99569702148438
patch: q CaMeL Ty ( residuals ) ; current = cols ;
rank: 555
score: 98.927001953125
patch: x CaMeL Norm += jac CaMeL Norm [ 0 ] ;
rank: 555
score: 98.84966362847223
patch: = ( double [ ] ) 0 ;
rank: 555
score: 98.81218804253473
patch: m = qr CaMeL Decomposition ( ) ;
rank: 555
score: 98.71797688802083
patch: ( new Integer ( residuals ) ) ;
rank: 555
score: 98.71409301757812
patch: q CaMeL Ty = residuals residuals = true ;
rank: 556
score: 98.92657470703125
patch: = ( x CaMeL Norm == 0 ) ? this ;
rank: 556
score: 98.90035400390624
patch: super . q CaMeL Ty ( residuals ) ;
rank: 556
score: 98.8631258877841
patch: q CaMeL Ty [ 0 ] = - $NUMBER$ ;
rank: 556
score: 98.82210286458333
patch: q CaMeL Ty ( residuals + ) ;
rank: 556
score: 98.71257188585069
patch: q CaMeL Ty = residuals ; * /
rank: 557
score: 98.86283365885417
patch: = q CaMeL Ty [ 1 ] ;
rank: 557
score: 98.82172987196181
patch: q CaMeL Ty ( residuals ) ; throw
rank: 557
score: 98.70989227294922
patch: q CaMeL Ty = - 1 ;
rank: 558
score: 99.00686410757211
patch: q CaMeL Ty ++ ; if ( first CaMeL Iteration ) {
rank: 558
score: 98.89945845170455
patch: q CaMeL Ty [ residuals ) ] = ) ;
rank: 558
score: 98.86237127130681
patch: = 0 ; q CaMeL Ty ( residuals ) ;
rank: 558
score: 98.84312744140625
patch: delta = ( double ) 0 . 0 ;
rank: 558
score: 98.81870524088542
patch: q CaMeL Ty = residuals = null ;
rank: 558
score: 98.81085205078125
patch: q CaMeL Ty ( $NUMBER$ , 0 ) ;
rank: 558
score: 98.71187744140624
patch: q CaMeL Ty ( residuals , break ) ;
rank: 558
score: 98.709228515625
patch: else { q CaMeL Ty = residuals ) ;
rank: 559
score: 98.84181906960227
patch: x CaMeL Norm = 0 . 0 ; break ;
rank: 559
score: 98.81004028320312
patch: q CaMeL Ty ( current , 0 ) ;
rank: 559
score: 98.70537109375
patch: q CaMeL Ty ( false , true ) ;
rank: 560
score: 99.006103515625
patch: delta = x CaMeL Norm ( x CaMeL Norm ) ;
rank: 560
score: 98.8962069424716
patch: q CaMeL Ty * / residuals ( residuals ) ;
rank: 560
score: 98.80835723876953
patch: if ( ! first CaMeL Iteration )
rank: 560
score: 98.71077880859374
patch: ( ( int [ ] ) residuals ) ;
rank: 561
score: 98.91942420372597
patch: q CaMeL Ty ( ) ; / / current = current ;
rank: 561
score: 98.89612494574652
patch: q CaMeL Ty ++ residuals ( ) ;
rank: 561
score: 98.80782741970486
patch: Uq CaMeL Ty ( residuals ) ;
rank: 561
score: 98.70180053710938
patch: q CaMeL Ty = new int [ residuals ;
rank: 562
score: 98.99102783203125
patch: q CaMeL Ty ( residuals ) ; / * / ;
rank: 562
score: 98.89606267755681
patch: q CaMeL Ty = residuals ( ) * $NUMBER$ ;
rank: 562
score: 98.85776589133523
patch: q CaMeL Ty $NUMBER$ [ 0 ] = 0 ;
rank: 562
score: 98.807373046875
patch: repaint ( ) ; qr CaMeL Decomposition ( ) ;
rank: 562
score: 98.70545043945313
patch: tmp = q CaMeL Ty ( residuals ) ;
rank: 563
score: 98.91836547851562
patch: q CaMeL Ty ( residuals ) ; delta = 1 ;
rank: 563
score: 98.89569646661931
patch: q CaMeL Ty ( residuals ) ; * / /
rank: 563
score: 98.85776589133523
patch: q CaMeL Ty -= q CaMeL Ty . length ;
rank: 563
score: 98.80417306082589
patch: if ( cost != 0 )
rank: 563
score: 98.702197265625
patch: q CaMeL Ty = residuals ) = residuals ;
rank: 563
score: 98.701611328125
patch: builder . q CaMeL Ty ( residuals ) ;
rank: 564
score: 99.003955078125
patch: lm CaMeL Par = diag [ 0 ] ;
rank: 564
score: 98.98914591471355
patch: q CaMeL Ty ( ) ; work $NUMBER$ ( ) ;
rank: 564
score: 98.91539510091145
patch: q CaMeL Ty ( ) [ 0 ] = current ;
rank: 564
score: 98.89560275607639
patch: / q CaMeL Ty ( residuals ) ;
rank: 564
score: 98.80411529541016
patch: if ( current == 0 ) {
rank: 564
score: 98.70125579833984
patch: q CaMeL Ty [ 0 ] ;
rank: 565
score: 98.91477614182692
patch: q CaMeL Ty ( residuals , point [ 0 ] ) ;
rank: 565
score: 98.85589044744319
patch: q CaMeL Ty ( residuals 0 , residuals ) ;
rank: 565
score: 98.81103515625
patch: q CaMeL Ty ( residuals , round ) ;
rank: 565
score: 98.80233764648438
patch: q CaMeL Ty ( jacobian ) ;
rank: 566
score: 99.00218709309895
patch: q CaMeL Ty ( residuals ) ; / / * /
rank: 566
score: 98.89471990411931
patch: q CaMeL Ty ( residuals ) * residuals ) ;
rank: 566
score: 98.83720703125
patch: Qt . q CaMeL Ty ( residuals ) ;
rank: 566
score: 98.810791015625
patch: q CaMeL Ty ( residuals , abs ) ;
rank: 566
score: 98.70098266601562
patch: q CaMeL Ty = ( int ) $NUMBER$ ;
rank: 567
score: 99.00197531960227
patch: delta = 0 ; x CaMeL Norm = 0 ;
rank: 567
score: 98.91428444602273
patch: lm CaMeL Par = qr CaMeL Decomposition ( ) ;
rank: 567
score: 98.89441528320313
patch: q CaMeL Ty ( residuals ) * / ;
rank: 567
score: 98.69993286132812
patch: q CaMeL Ty = q CaMeL Ty -- ;
rank: 567
score: 98.69522094726562
patch: n = ( int [ ] ) residuals ;
rank: 568
score: 99.00140935724431
patch: q CaMeL Ty [ 0 ] = current ; }
rank: 568
score: 98.85524680397727
patch: q CaMeL Ty [ residuals ++ ] = null ;
rank: 568
score: 98.809326171875
patch: q CaMeL Ty ( residuals ) ) ; ;
rank: 568
score: 98.80006239149306
patch: this q CaMeL Ty ( residuals ) ;
rank: 568
score: 98.69646453857422
patch: q CaMeL Ty = new int ;
rank: 568
score: 98.69371948242187
patch: q CaMeL Ty = residuals ) / true ;
rank: 569
score: 98.99998121995192
patch: x CaMeL Norm = ( x CaMeL Norm == 0 ) ?
rank: 569
score: 98.9855487530048
patch: q CaMeL Ty ( residuals , lm CaMeL Dir , delta ,
rank: 569
score: 98.90992228190105
patch: delta = ( x CaMeL Norm == 0 ) ? 0
rank: 569
score: 98.8933993252841
patch: q CaMeL Ty [ 0 ) ] = residuals ;
rank: 569
score: 98.83392888849431
patch: q CaMeL Ty ( residuals ) ; / break ;
rank: 569
score: 98.79966905381944
patch: i = update CaMeL Jacobian ( ) ;
rank: 569
score: 98.69584655761719
patch: q CaMeL Ty = this ; ;
rank: 569
score: 98.69343872070313
patch: q CaMeL Ty ( in , residuals ) ;
rank: 570
score: 98.89190118963069
patch: q CaMeL Ty [ residuals ) ] = 0 ;
rank: 570
score: 98.852783203125
patch: q CaMeL Ty ( residuals , residuals . ) ;
rank: 570
score: 98.79862837357955
patch: i = current ; update CaMeL Jacobian ( ) ;
rank: 571
score: 98.99905160757211
patch: delta = ( x CaMeL Norm == 0 ) ? 0 ;
rank: 571
score: 98.90617231889205
patch: q CaMeL Ty ( ! first CaMeL Iteration ) ;
rank: 571
score: 98.89072487571023
patch: = new double [ q CaMeL Ty ++ ] ;
rank: 571
score: 98.83314344618056
patch: q CaMeL Ty ( ) ; / }
rank: 571
score: 98.80703396267361
patch: q CaMeL Ty = [ 1 ] ;
rank: 571
score: 98.79690551757812
patch: q CaMeL Ty ( residuals ) :
rank: 571
score: 98.69225463867187
patch: residuals = ( int [ ] ) residuals ;
rank: 572
score: 98.98528442382812
patch: q CaMeL Ty ( point , diag ) ;
rank: 572
score: 98.88973236083984
patch: q CaMeL Ty *= residuals ) ;
rank: 572
score: 98.85195090553977
patch: q CaMeL Ty ( residuals - residuals 1 ) ;
rank: 572
score: 98.83289794921875
patch: increment CaMeL Iterations CaMeL Counter ( point ) ;
rank: 572
score: 98.80582885742187
patch: q CaMeL Ty ( residuals != null ) ;
rank: 572
score: 98.79620361328125
patch: current = update CaMeL Jacobian ( ) ;
rank: 572
score: 98.69097290039062
patch: q CaMeL Ty = residuals ( current ) ;
rank: 572
score: 98.68730333116319
patch: q CaMeL Ty [ residuals ] -- ;
rank: 573
score: 98.83144802517361
patch: x CaMeL Norm += 0 . 0 ;
rank: 573
score: 98.80577392578125
patch: q CaMeL Ty ( ) ; ; / /
rank: 573
score: 98.688720703125
patch: q CaMeL Ty [ $NUMBER$ ] = true ;
rank: 573
score: 98.68460518973214
patch: ( this , residuals ) ;
rank: 574
score: 98.9832763671875
patch: q CaMeL Ty ( point , residuals ) ;
rank: 574
score: 98.88756646050348
patch: = residuals ( residuals , residuals ) ;
rank: 574
score: 98.80558471679687
patch: q CaMeL Ty ( ) ; return ) ;
rank: 574
score: 98.7893954190341
patch: q CaMeL Ty ( residuals ) ; return previous ;
rank: 574
score: 98.68213653564453
patch: q CaMeL Ty residuals = this ;
rank: 575
score: 98.88580322265625
patch: = q CaMeL Ty ( ) ; * /
rank: 575
score: 98.80437622070312
patch: q CaMeL Ty ( 1 + residuals ) ;
rank: 575
score: 98.787841796875
patch: if ( increment CaMeL Iterations CaMeL Counter < 0 )
rank: 575
score: 98.67942301432292
patch: finally { q CaMeL Ty ( ) ;
rank: 576
score: 98.99496459960938
patch: = new int [ cols ] ;
rank: 576
score: 98.97898356119792
patch: q CaMeL Ty ( residuals ) ; work $NUMBER$ ++ ;
rank: 576
score: 98.8998135653409
patch: = current . update CaMeL Jacobian ( residuals ) ;
rank: 576
score: 98.88507758246527
patch: = q CaMeL Ty ( current ) ;
rank: 576
score: 98.82867986505681
patch: = 0 ; if ( first CaMeL Iteration ) {
rank: 576
score: 98.80331759982639
patch: q CaMeL Ty ( residuals ) ; System
rank: 576
score: 98.78726535373264
patch: this . lm CaMeL Par = 0 ;
rank: 576
score: 98.67920600043402
patch: q CaMeL Ty residuals ( false ) ;
rank: 577
score: 98.99471028645833
patch: q CaMeL Ty ( residuals ) ; * * * /
rank: 577
score: 98.88469848632812
patch: q CaMeL Ty ( residuals ) / * /
rank: 577
score: 98.8272705078125
patch: delta = ( boolean [ ] ) current ;
rank: 577
score: 98.78233846028645
patch: while ( true ) {
rank: 577
score: 98.6857666015625
patch: . = q CaMeL Ty ( residuals ) ;
rank: 577
score: 98.67799377441406
patch: ( ( int ) residuals ) ;
rank: 578
score: 98.99444580078125
patch: q CaMeL Ty = new double [ cols ] ; }
rank: 578
score: 98.88148193359375
patch: = q CaMeL Ty [ residuals ) ] ;
rank: 578
score: 98.8269287109375
patch: increment CaMeL Iterations CaMeL Counter ( $STRING$ ) ;
rank: 578
score: 98.77941216362848
patch: if ( x CaMeL Norm == 0 )
rank: 578
score: 98.673583984375
patch: q CaMeL Ty = q CaMeL Ty [
rank: 579
score: 98.9934590657552
patch: delta = ( int [ ] ) first CaMeL Iteration ;
rank: 579
score: 98.8961514559659
patch: double max = jac CaMeL Norm [ 0 ] ;
rank: 579
score: 98.88079223632812
patch: -- ; q CaMeL Ty ( residuals ) ;
rank: 579
score: 98.84632568359375
patch: q CaMeL Ty [ residuals ] = 1 ;
rank: 579
score: 98.79914855957031
patch: q CaMeL Ty = residuals . ;
rank: 579
score: 98.6843994140625
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 579
score: 98.67305501302083
patch: q CaMeL Ty residuals = residuals ) ;
rank: 580
score: 98.9931171123798
patch: double x CaMeL Norm = permutation * point [ cols ] ;
rank: 580
score: 98.89500843394886
patch: = current ; boolean first CaMeL Iteration = true ;
rank: 580
score: 98.88048095703125
patch: q CaMeL Ty [ residuals ) ] ) ;
rank: 580
score: 98.82558865017361
patch: res q CaMeL Ty ( residuals ) ;
rank: 580
score: 98.797021484375
patch: q CaMeL Ty ( 0 , 1 ) ;
rank: 580
score: 98.77399359809027
patch: local q CaMeL Ty ( residuals ) ;
rank: 580
score: 98.68212280273437
patch: q CaMeL Ty += ( int ) residuals ;
rank: 580
score: 98.67241753472223
patch: q CaMeL Ty [ 0 ] -- ;
rank: 581
score: 98.79501681857639
patch: q CaMeL Ty = residuals ) ) ;
rank: 581
score: 98.77119445800781
patch: if ( residuals != 0 ) {
rank: 581
score: 98.68204345703126
patch: [ 0 ] ( q CaMeL Ty ) ;
rank: 582
score: 98.99285419170673
patch: q CaMeL Ty ( residuals [ 0 ] , permutation ) ;
rank: 582
score: 98.97637384588069
patch: q CaMeL Ty [ residuals ) ] = current ;
rank: 582
score: 98.877978515625
patch: = residuals ; q CaMeL Ty ( ) ;
rank: 582
score: 98.79466417100694
patch: q CaMeL Ty ( ) ; this }
rank: 582
score: 98.77073838975694
patch: vq CaMeL Ty ( residuals ) ;
rank: 582
score: 98.66452026367188
patch: q CaMeL Ty = ( ) ;
rank: 583
score: 98.9921366373698
patch: q CaMeL Ty [ 0 ] = first CaMeL Iteration ;
rank: 583
score: 98.97616577148438
patch: q CaMeL Ty ( residuals ) ; current = point ;
rank: 583
score: 98.87608642578125
patch: q CaMeL Ty * residuals ( residuals ) ;
rank: 583
score: 98.84397194602273
patch: q CaMeL Ty ( 0 , residuals $NUMBER$ ) ;
rank: 583
score: 98.76884629991319
patch: q CaMeL Ty ( residuals ) ; /
rank: 583
score: 98.66045379638672
patch: [ 0 ] = residuals ) ;
rank: 584
score: 98.99169921875
patch: delta = ( int [ ] ) lm CaMeL Par ;
rank: 584
score: 98.8427490234375
patch: q CaMeL Ty [ ) ] = current ;
rank: 584
score: 98.82333374023438
patch: increment CaMeL Iterations CaMeL Counter ( $NUMBER$ ) ;
rank: 584
score: 98.79437255859375
patch: else q CaMeL Ty ( residuals ) ; ;
rank: 584
score: 98.68010711669922
patch: q CaMeL Ty = true ; }
rank: 584
score: 98.65621948242188
patch: q CaMeL Ty residuals = null ;
rank: 585
score: 98.84181518554688
patch: q CaMeL Ty ( residuals + 1 ) ;
rank: 585
score: 98.82121058872768
patch: delta = 0 . 0 ;
rank: 585
score: 98.79295654296875
patch: q CaMeL Ty ( residuals ) ; current .
rank: 585
score: 98.76605224609375
patch: while ( ! first CaMeL Iteration ) {
rank: 585
score: 98.65482584635417
patch: ( 0 , 0 , residuals ) ;
rank: 586
score: 98.87337646484374
patch: q CaMeL Ty ( residuals && residuals ) ;
rank: 586
score: 98.84174138849431
patch: q CaMeL Ty [ 0 ] = 0 ; }
rank: 586
score: 98.8209228515625
patch: update CaMeL Jacobian ( true ) ;
rank: 586
score: 98.7925537109375
patch: q CaMeL Ty ( residuals ) ) ; }
rank: 586
score: 98.76439073350694
patch: Buffer q CaMeL Ty ( residuals ) ;
rank: 586
score: 98.67958577473958
patch: q CaMeL Ty = residuals ) break ;
rank: 586
score: 98.65443638392857
patch: ( q CaMeL Ty ) ;
rank: 587
score: 98.88994806463069
patch: ( x CaMeL Norm , first CaMeL Iteration ) ;
rank: 587
score: 98.87302652994792
patch: q CaMeL Ty ( residuals ) * ;
rank: 587
score: 98.83973999023438
patch: q CaMeL Ty ( residuals . this ) ;
rank: 587
score: 98.76272583007812
patch: while ( first CaMeL Iteration ) {
rank: 588
score: 98.99014282226562
patch: Vectorial CaMeL Point CaMeL Value CaMeL Pair previous -- ;
rank: 588
score: 98.97211248224431
patch: q CaMeL Ty ( ) ; break ; * /
rank: 588
score: 98.83957741477273
patch: q CaMeL Ty ( residuals $NUMBER$ residuals $NUMBER$ ) ;
rank: 588
score: 98.8195556640625
patch: q CaMeL Ty [ residuals ] = diag ;
rank: 588
score: 98.79192504882812
patch: q CaMeL Ty ( 1 ) ; ) ;
rank: 588
score: 98.75523376464844
patch: if ( current != null ) {
rank: 588
score: 98.64138454861111
patch: q CaMeL Ty [ ) * ) ;
rank: 589
score: 98.9866231282552
patch: q CaMeL Ty [ 0 ] = 0 . 0 ;
rank: 589
score: 98.97119140625
patch: q CaMeL Ty ( this , qr CaMeL Decomposition ) ;
rank: 589
score: 98.88887329101563
patch: q CaMeL Ty ( jac CaMeL Norm ) ;
rank: 589
score: 98.8707275390625
patch: = q CaMeL Ty [ ) ] ;
rank: 589
score: 98.79063720703125
patch: q CaMeL Ty ( residuals $NUMBER$ 0 ) ;
rank: 589
score: 98.75221761067708
patch: loop q CaMeL Ty ( residuals ) ;
rank: 589
score: 98.67416381835938
patch: q CaMeL Ty = ( residuals ) residuals ;
rank: 590
score: 98.98658243815105
patch: q CaMeL Ty ( new double [ ] { 0 ;
rank: 590
score: 98.97103271484374
patch: q CaMeL Ty ( 0 , diag ) ;
rank: 590
score: 98.86968383789062
patch: 0 . q CaMeL Ty ( residuals ) ;
rank: 590
score: 98.81929321289063
patch: double [ ] old CaMeL X = current ;
rank: 590
score: 98.79061279296874
patch: q CaMeL Ty = residuals ) ; ) {
rank: 590
score: 98.6739013671875
patch: q CaMeL Ty = residuals ) = null ;
rank: 590
score: 98.62696668836806
patch: [ 0 ] = residuals ( ) ;
rank: 591
score: 98.98395330255681
patch: delta += ( x CaMeL Norm == 0 ) ?
rank: 591
score: 98.88707139756944
patch: = ( boolean [ ] ) current ;
rank: 591
score: 98.86958618164063
patch: q CaMeL Ty , residuals ( residuals ) ;
rank: 591
score: 98.83811645507812
patch: q CaMeL Ty [ residuals ] = previous ;
rank: 591
score: 98.81798095703125
patch: delta = ( double [ ] ) point ;
rank: 591
score: 98.78890380859374
patch: / ; q CaMeL Ty ( residuals ) ;
rank: 591
score: 98.74813503689236
patch: result q CaMeL Ty ( residuals ) ;
rank: 591
score: 98.62592315673828
patch: ( ( int ) 0 ) ;
rank: 592
score: 98.88686794704861
patch: double [ ] work $NUMBER$ = current ;
rank: 592
score: 98.86851196289062
patch: = ; q CaMeL Ty ( residuals ) ;
rank: 592
score: 98.837890625
patch: q CaMeL Ty ( residuals $NUMBER$ ) ; }
rank: 592
score: 98.74466959635417
patch: else if ( first CaMeL Iteration ) {
rank: 592
score: 98.6251220703125
patch: q CaMeL Ty ; residuals = residuals ;
rank: 593
score: 98.88530939275569
patch: double max = jac CaMeL Norm [ point ] ;
rank: 593
score: 98.86821831597223
patch: = q CaMeL Ty ( 0 ) ;
rank: 593
score: 98.83745783025569
patch: q CaMeL Ty = new Double [ residuals ] ;
rank: 593
score: 98.81558227539062
patch: q CaMeL Ty ( this , diag ) ;
rank: 593
score: 98.787451171875
patch: q CaMeL Ty ( residuals 1 0 ) ;
rank: 593
score: 98.74459499782986
patch: q CaMeL Ty ( residuals ) ; {
rank: 593
score: 98.62400987413194
patch: q CaMeL Ty q CaMeL Ty ++ ;
rank: 594
score: 98.98301188151042
patch: = Vectorial CaMeL Point CaMeL Value CaMeL Pair current ;
rank: 594
score: 98.88530939275569
patch: q CaMeL Ty ( point , objective ) ; }
rank: 594
score: 98.86820068359376
patch: 0 = q CaMeL Ty ( residuals ) ;
rank: 594
score: 98.83735795454545
patch: q CaMeL Ty $NUMBER$ [ 0 ] = null ;
rank: 594
score: 98.74409484863281
patch: q CaMeL Ty ( ) ; else
rank: 594
score: 98.67090454101563
patch: q CaMeL Ty = residuals ) * false ;
rank: 594
score: 98.62392171223958
patch: q CaMeL Ty = q CaMeL Ty =
rank: 595
score: 98.86751302083333
patch: ? q CaMeL Ty ( residuals ) ;
rank: 595
score: 98.73841010199652
patch: state q CaMeL Ty ( residuals ) ;
rank: 595
score: 98.670751953125
patch: [ residuals ] = residuals ( residuals ) ;
rank: 596
score: 98.9822998046875
patch: double delta = new double [ cols ] ;
rank: 596
score: 98.9666239420573
patch: ( residuals ) ; boolean first CaMeL Iteration = true ;
rank: 596
score: 98.8356045809659
patch: q CaMeL Ty $NUMBER$ [ 0 ] = current ;
rank: 596
score: 98.81318495008681
patch: q CaMeL Ty ( , residuals ) ;
rank: 596
score: 98.78279418945313
patch: q CaMeL Ty ( $STRING$ + residuals ) ;
rank: 596
score: 98.73724365234375
patch: q CaMeL Ty ( ) ; else {
rank: 596
score: 98.62135145399306
patch: ( new int [ 0 ] ) ;
rank: 597
score: 98.86737738715277
patch: = new double [ residuals ] ; ;
rank: 597
score: 98.83516235351563
patch: q CaMeL Ty ( residuals , in ) ;
rank: 597
score: 98.8114501953125
patch: q CaMeL Ty ( residuals [ residuals ) ;
rank: 597
score: 98.78272840711806
patch: q CaMeL Ty ( residuals - ) ;
rank: 597
score: 98.73436821831598
patch: m . qr CaMeL Decomposition ( ) ;
rank: 597
score: 98.66324462890626
patch: q CaMeL Ty [ $NUMBER$ ] = false ;
rank: 597
score: 98.61710611979167
patch: q CaMeL Ty = q CaMeL Ty }
rank: 598
score: 98.96621704101562
patch: q CaMeL Ty ( residuals ) ; max = 0 ;
rank: 598
score: 98.86648898654514
patch: q CaMeL Ty += residuals ) ; ;
rank: 598
score: 98.83353271484376
patch: q CaMeL Ty ( residuals , list ) ;
rank: 598
score: 98.73351372612848
patch: else { qr CaMeL Decomposition ( ) ;
rank: 598
score: 98.66283501519098
patch: q CaMeL Ty = true ; break ;
rank: 598
score: 98.61387125651042
patch: q CaMeL Ty . q CaMeL Ty ;
rank: 599
score: 98.8798828125
patch: q CaMeL Ty $NUMBER$ [ residuals ] = current ;
rank: 599
score: 98.8104736328125
patch: update CaMeL Jacobian ( residuals , residuals ) ;
rank: 599
score: 98.78152804904514
patch: q CaMeL Ty ( residuals ) ; residuals
rank: 599
score: 98.73301696777344
patch: if ( cost > 0 ) {
rank: 599
score: 98.613525390625
patch: CaMeL ] ( residuals ) ;
rank: 600
score: 98.8658447265625
patch: q CaMeL Ty [ residuals ) ] ;
rank: 600
score: 98.80657958984375
patch: delta = 1 . 0 ;
rank: 600
score: 98.78035278320313
patch: ) ; q CaMeL Ty ( residuals ) ;
rank: 600
score: 98.73050944010417
patch: result = update CaMeL Jacobian ( ) ;
rank: 600
score: 98.66029663085938
patch: q CaMeL Ty = residuals ) = true ;
rank: 601
score: 98.96756591796876
patch: q CaMeL Ty = diag [ 0 ] ;
rank: 601
score: 98.86567993164063
patch: q CaMeL Ty ( residuals $NUMBER$ ) ; ;
rank: 601
score: 98.82927856445312
patch: q CaMeL Ty ( residuals $NUMBER$ * ) ;
rank: 601
score: 98.80498657226562
patch: = 1 ; update CaMeL Jacobian ( ) ;
rank: 601
score: 98.7781982421875
patch: q CaMeL Ty ; residuals ( ) ;
rank: 601
score: 98.72652859157986
patch: if ( first CaMeL Iteration && ) {
rank: 601
score: 98.61290147569444
patch: q CaMeL Ty ( ) ; for (
rank: 602
score: 98.96351114908855
patch: q CaMeL Ty ( residuals , x CaMeL Norm , }
rank: 602
score: 98.87326882102273
patch: = ( double [ ] ) jac CaMeL Norm ;
rank: 602
score: 98.86549207899306
patch: = q CaMeL Ty residuals ( ) ;
rank: 602
score: 98.8262606534091
patch: q CaMeL Ty [ residuals 1 ] = 0 ;
rank: 602
score: 98.80465698242188
patch: update CaMeL Jacobian ( false ) ;
rank: 602
score: 98.72415500217014
patch: block q CaMeL Ty ( residuals ) ;
rank: 602
score: 98.65984497070312
patch: q CaMeL Ty = residuals ) = false ;
rank: 602
score: 98.61106654575893
patch: ( $NUMBER$ , residuals ) ;
rank: 603
score: 98.96298217773438
patch: q CaMeL Ty ( residuals , solved CaMeL Cols ) ;
rank: 603
score: 98.865380859375
patch: q CaMeL Ty . residuals ( ) ) ;
rank: 603
score: 98.82549493963069
patch: q CaMeL Ty *= q CaMeL Ty ( ) ;
rank: 603
score: 98.804541015625
patch: = ( double [ ] ) work $NUMBER$ ;
rank: 603
score: 98.77609252929688
patch: else q CaMeL Ty ( ) ; ) ;
rank: 603
score: 98.65966033935547
patch: q CaMeL Ty = residuals ) }
rank: 603
score: 98.61102294921875
patch: q CaMeL Ty residuals ( this ) ;
rank: 604
score: 98.9639559659091
patch: [ 0 ] = new double [ cols ] ;
rank: 604
score: 98.86356608072917
patch: q CaMeL Ty [ residuals ] ) ;
rank: 604
score: 98.822998046875
patch: q CaMeL Ty = current . residuals ( ) ;
rank: 604
score: 98.77564348493304
patch: q CaMeL Ty = 1 ;
rank: 604
score: 98.72304280598958
patch: if ( ! x CaMeL Norm ) {
rank: 604
score: 98.65917358398437
patch: manager . q CaMeL Ty ( residuals ) ;
rank: 604
score: 98.60922580295139
patch: } q CaMeL Ty = residuals ) ;
rank: 605
score: 98.96111505681819
patch: q CaMeL Ty ( ) ; previous = 0 ;
rank: 605
score: 98.86336669921874
patch: = q CaMeL Ty [ residuals ] ; ;
rank: 605
score: 98.80288696289062
patch: q CaMeL Ty ( residuals . point ) ;
rank: 605
score: 98.72151692708333
patch: byte q CaMeL Ty ( residuals ) ;
rank: 605
score: 98.60826280381944
patch: [ 0 ] = q CaMeL Ty ;
rank: 606
score: 98.96253051757813
patch: q CaMeL Ty = permutation [ 0 ] ;
rank: 606
score: 98.86925159801136
patch: = new increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 606
score: 98.80197143554688
patch: q CaMeL Ty [ residuals ) ;
rank: 606
score: 98.77421264648437
patch: q CaMeL Ty ( residuals | residuals ) ;
rank: 606
score: 98.72144426618304
patch: q CaMeL Ty = current ;
rank: 606
score: 98.65137396918402
patch: q CaMeL Ty = residuals = true ;
rank: 606
score: 98.60792371961806
patch: q CaMeL Ty ( new ) ; ;
rank: 607
score: 98.96206665039062
patch: delta = x CaMeL Norm [ 0 ] ;
rank: 607
score: 98.86178927951389
patch: q CaMeL Ty ++ ( residuals ) ;
rank: 607
score: 98.80126274956598
patch: delta = qr CaMeL Decomposition ( ) ;
rank: 607
score: 98.774072265625
patch: q CaMeL Ty = ( ) / 1 ;
rank: 607
score: 98.71898057725694
patch: buf q CaMeL Ty ( residuals ) ;
rank: 607
score: 98.60748969184027
patch: q CaMeL Ty residuals ( null ) ;
rank: 608
score: 98.86107720269098
patch: q CaMeL Ty ( residuals * ) ;
rank: 608
score: 98.82099609375
patch: q CaMeL Ty [ 0 ] = $STRING$ ;
rank: 608
score: 98.79937744140625
patch: = 0 ; x CaMeL Norm = 0 ;
rank: 608
score: 98.77389962332589
patch: q CaMeL Ty = residuals .
rank: 608
score: 98.71540832519531
patch: q CaMeL Ty ( residuals ) .
rank: 608
score: 98.64861382378473
patch: q CaMeL Ty ( true , ) ;
rank: 609
score: 98.79914686414931
patch: q CaMeL Ty ( . residuals ) ;
rank: 609
score: 98.77210083007813
patch: q CaMeL Ty = residuals . = $NUMBER$ ;
rank: 609
score: 98.71468353271484
patch: else update CaMeL Jacobian ( ) ;
rank: 609
score: 98.64810519748264
patch: q CaMeL Ty = residuals residuals ; }
rank: 610
score: 98.95896606445312
patch: double max = new double [ cols ] ;
rank: 610
score: 98.82063432173295
patch: = q CaMeL Ty ( 0 , residuals ) ;
rank: 610
score: 98.79869384765625
patch: q CaMeL Ty ( 0 , point ) ;
rank: 610
score: 98.71066284179688
patch: { qr CaMeL Decomposition ( ) ;
rank: 610
score: 98.60580105251736
patch: q CaMeL Ty residuals ( $NUMBER$ ) ;
rank: 611
score: 98.7972412109375
patch: vector = new double [ cols ] ;
rank: 611
score: 98.77164306640626
patch: q CaMeL Ty ( ) ; ) ; else
rank: 611
score: 98.71057891845703
patch: if ( point != 0 ) {
rank: 611
score: 98.64506530761719
patch: q CaMeL Ty = null ; }
rank: 612
score: 98.79606323242187
patch: delta = ( double [ ] ) true ;
rank: 612
score: 98.71040852864583
patch: client q CaMeL Ty ( residuals ) ;
rank: 612
score: 98.64444986979167
patch: q CaMeL Ty ( false , ) ;
rank: 612
score: 98.60244411892361
patch: ( $STRING$ + q CaMeL Ty ) ;
rank: 613
score: 98.85398559570312
patch: q CaMeL Ty ( ) ; residuals ) ;
rank: 613
score: 98.70987277560764
patch: fq CaMeL Ty ( residuals ) ;
rank: 614
score: 98.9525634765625
patch: x CaMeL Norm = permutation [ 0 ] ;
rank: 614
score: 98.8538330078125
patch: q CaMeL Ty [ q CaMeL Ty ] ;
rank: 614
score: 98.81748657226562
patch: q CaMeL Ty ( residuals ^ residuals ) ;
rank: 614
score: 98.79375610351562
patch: = true ; qr CaMeL Decomposition ( ) ;
rank: 614
score: 98.70965576171875
patch: tmp . update CaMeL Jacobian ( ) ;
rank: 614
score: 98.63802083333333
patch: residuals = q CaMeL Ty ( ) ;
rank: 614
score: 98.60142686631944
patch: q CaMeL Ty [ residuals ] = (
rank: 615
score: 98.85151502821181
patch: q CaMeL Ty . ( residuals ) ;
rank: 615
score: 98.81660600142045
patch: q CaMeL Ty [ 0 ] = - 0 ;
rank: 615
score: 98.79203491210937
patch: = null ; qr CaMeL Decomposition ( ) ;
rank: 615
score: 98.70962863498264
patch: -- ; qr CaMeL Decomposition ( ) ;
rank: 615
score: 98.63788519965277
patch: q CaMeL Ty ( ) ) ; }
rank: 615
score: 98.596435546875
patch: ( new byte [ 0 ] ) ;
rank: 616
score: 98.9494873046875
patch: delta delta = new double [ cols ] ;
rank: 616
score: 98.93531383167614
patch: ( residuals ) ; update CaMeL Jacobian ( ) ;
rank: 616
score: 98.8623934659091
patch: delta = x CaMeL Norm += 0 . 0 ;
rank: 616
score: 98.84967041015625
patch: q CaMeL Ty ( ) ; * / ;
rank: 616
score: 98.81505737304687
patch: q CaMeL Ty ( residuals $NUMBER$ $NUMBER$ ) ;
rank: 616
score: 98.70941840277777
patch: p = update CaMeL Jacobian ( ) ;
rank: 616
score: 98.59467163085938
patch: q CaMeL Ty ;
rank: 617
score: 98.84872436523438
patch: q CaMeL Ty ( ) ; / * ;
rank: 617
score: 98.81489701704545
patch: q CaMeL Ty [ 0 ] = current ; ;
rank: 617
score: 98.79127807617188
patch: = initial CaMeL Step CaMeL Bound CaMeL Factor ;
rank: 617
score: 98.70802137586806
patch: buffer q CaMeL Ty ( residuals ) ;
rank: 617
score: 98.59429168701172
patch: q CaMeL Ty ( ) ; int
rank: 618
score: 98.93208451704545
patch: = current ; update CaMeL Jacobian ( residuals ) ;
rank: 618
score: 98.81488037109375
patch: q CaMeL Ty [ 1 ] = 0 ;
rank: 618
score: 98.70754665798611
patch: if ( first CaMeL Iteration == ) {
rank: 618
score: 98.62472195095486
patch: q CaMeL Ty = null ; break ;
rank: 618
score: 98.59319390190973
patch: ( 0 , residuals , true ) ;
rank: 619
score: 98.8443115234375
patch: q CaMeL Ty ( residuals residuals ) ) ;
rank: 619
score: 98.81424560546876
patch: q CaMeL Ty ( start , residuals ) ;
rank: 619
score: 98.78745524088542
patch: x CaMeL Norm = $NUMBER$ . 0 ;
rank: 619
score: 98.76715087890625
patch: q CaMeL Ty ( this + residuals ) ;
rank: 619
score: 98.70614963107639
patch: q CaMeL Ty ( residuals ) -- ;
rank: 619
score: 98.6220703125
patch: n = q CaMeL Ty ( ) ;
rank: 619
score: 98.59138319227431
patch: ( 0 . 0 , residuals ) ;
rank: 620
score: 98.85908647017045
patch: = 0 ; boolean first CaMeL Iteration = false ;
rank: 620
score: 98.84352620442708
patch: -- q CaMeL Ty ( residuals ) ;
rank: 620
score: 98.81105735085227
patch: q CaMeL Ty [ 0 ] = null ; ;
rank: 620
score: 98.70540618896484
patch: if ( delta != 0 ) {
rank: 620
score: 98.61604817708333
patch: q CaMeL Ty ( ) = null ;
rank: 621
score: 98.8575439453125
patch: boolean first CaMeL Iteration = false ;
rank: 621
score: 98.84333631727431
patch: q CaMeL Ty [ 0 ] ) ;
rank: 621
score: 98.7865966796875
patch: increment CaMeL Iterations CaMeL Counter ( current ) ;
rank: 621
score: 98.76626247829861
patch: q CaMeL Ty = - - 1 ;
rank: 621
score: 98.70387098524306
patch: req CaMeL Ty ( residuals ) ;
rank: 621
score: 98.61309051513672
patch: q CaMeL Ty = residuals ( ;
rank: 621
score: 98.58921983506944
patch: q CaMeL Ty residuals ( new ) ;
rank: 622
score: 98.92778986150569
patch: lm CaMeL Dir = new double [ rows ] ;
rank: 622
score: 98.8573330965909
patch: old CaMeL X = new double [ cols ] ;
rank: 622
score: 98.78565809461806
patch: = jac CaMeL Norm [ 0 ] ;
rank: 622
score: 98.76620144314236
patch: q CaMeL Ty ( 0 ) ; ;
rank: 622
score: 98.70262145996094
patch: if ( previous != 0 ) {
rank: 622
score: 98.61054992675781
patch: q CaMeL Ty = false ; }
rank: 622
score: 98.58829752604167
patch: ( $STRING$ , q CaMeL Ty ) ;
rank: 623
score: 98.94251844618056
patch: lm CaMeL Par = 0 . 0 ;
rank: 623
score: 98.85700017755681
patch: double delta = jac CaMeL Norm [ 0 ] ;
rank: 623
score: 98.842578125
patch: q CaMeL Ty ; residuals ( residuals ) ;
rank: 623
score: 98.7853515625
patch: q CaMeL Ty ( this , point ) ;
rank: 623
score: 98.60480414496527
patch: q CaMeL Ty ( ) ; continue ;
rank: 623
score: 98.58816189236111
patch: q CaMeL Ty q CaMeL Ty -- ;
rank: 624
score: 98.94251598011364
patch: q CaMeL Ty = new int [ rows ] ;
rank: 624
score: 98.84244537353516
patch: $NUMBER$ . residuals ( residuals ) ;
rank: 624
score: 98.76517062717014
patch: q CaMeL Ty ( residuals == ) ;
rank: 624
score: 98.70171440972223
patch: r = update CaMeL Jacobian ( ) ;
rank: 624
score: 98.60382758246527
patch: q CaMeL Ty = false ; break ;
rank: 624
score: 98.587890625
patch: q CaMeL Ty ; residuals = null ;
rank: 625
score: 98.94140625
patch: double q CaMeL Ty ( x CaMeL Norm ) ;
rank: 625
score: 98.8078125
patch: q CaMeL Ty ( residuals / residuals ) ;
rank: 625
score: 98.78319634331598
patch: function q CaMeL Ty ( residuals ) ;
rank: 625
score: 98.76228637695313
patch: q CaMeL Ty = residuals . null ; ;
rank: 625
score: 98.69903564453125
patch: { if ( first CaMeL Iteration ) {
rank: 625
score: 98.58439127604167
patch: [ 0 ] [ residuals ] ++ ;
rank: 626
score: 98.9410400390625
patch: delta = diag [ 0 ] ;
rank: 626
score: 98.83800659179687
patch: q CaMeL Ty ( residuals * / ) ;
rank: 626
score: 98.75946044921875
patch: q CaMeL Ty = ) ; ) {
rank: 626
score: 98.69849310980902
patch: try { lm CaMeL Par = 0 ;
rank: 626
score: 98.59672715928819
patch: q CaMeL Ty ( ) = true ;
rank: 627
score: 98.93687855113636
patch: x CaMeL Norm = new double [ rows ] ;
rank: 627
score: 98.85014204545455
patch: q CaMeL Ty ( ) ; delta = 0 ;
rank: 627
score: 98.8367919921875
patch: 1 . q CaMeL Ty ( ) ;
rank: 627
score: 98.78250732421876
patch: delta = Math . max ( diag ) ;
rank: 627
score: 98.75373670789931
patch: q CaMeL Ty ( ) ; current .
rank: 627
score: 98.69832356770833
patch: else { update CaMeL Jacobian ( ) ;
rank: 627
score: 98.5931396484375
patch: q CaMeL Ty = residuals residuals }
rank: 627
score: 98.58298068576389
patch: q CaMeL Ty -= q CaMeL Ty ;
rank: 628
score: 98.83613416883681
patch: = q CaMeL Ty ( ) ; }
rank: 628
score: 98.8062255859375
patch: q CaMeL Ty [ 0 ] = new ;
rank: 628
score: 98.75362396240234
patch: q CaMeL Ty = ) ) ;
rank: 629
score: 98.93414861505681
patch: q CaMeL Ty ( residuals [ permutation ] ) ;
rank: 629
score: 98.92217462713069
patch: ( ) ; boolean first CaMeL Iteration = true ;
rank: 629
score: 98.83495415581598
patch: = q CaMeL Ty ( residuals , ;
rank: 629
score: 98.804443359375
patch: q CaMeL Ty ( residuals ) ; if ;
rank: 629
score: 98.69437408447266
patch: { update CaMeL Jacobian ( ) ;
rank: 629
score: 98.58095974392361
patch: q CaMeL Ty [ 0 ] = (
rank: 630
score: 98.93363647460937
patch: delta = x CaMeL Norm == 0 ) ?
rank: 630
score: 98.84965376420455
patch: = new double [ cols ] [ cols ] ;
rank: 630
score: 98.8348876953125
patch: = new double [ residuals ) ] ; ;
rank: 630
score: 98.74808502197266
patch: q CaMeL Ty = 0 ; ;
rank: 630
score: 98.69321017795139
patch: return q CaMeL Ty ( residuals ) ;
rank: 630
score: 98.57947455512152
patch: q CaMeL Ty [ - 1 ] ;
rank: 631
score: 98.9334716796875
patch: x CaMeL Norm = new int [ cols ] ;
rank: 631
score: 98.84921875
patch: = point ; update CaMeL Jacobian ( ) ;
rank: 631
score: 98.80255681818181
patch: q CaMeL Ty [ 0 ] = new double ;
rank: 631
score: 98.78027954101563
patch: return x CaMeL Norm = 0 . 0 ;
rank: 631
score: 98.69276936848958
patch: q CaMeL Ty ( $STRING$ , ) ;
rank: 631
score: 98.58801947699652
patch: q CaMeL Ty ( residuals ) break ;
rank: 631
score: 98.57907443576389
patch: ( q CaMeL Ty ( ) ) ;
rank: 632
score: 98.84918823242188
patch: = point ; qr CaMeL Decomposition ( ) ;
rank: 632
score: 98.74624972873264
patch: q CaMeL Ty ( ) ; residuals ;
rank: 632
score: 98.69242350260417
patch: g . update CaMeL Jacobian ( ) ;
rank: 632
score: 98.58628845214844
patch: q CaMeL Ty += residuals ; }
rank: 633
score: 98.93266078404018
patch: delta = x CaMeL Norm ;
rank: 633
score: 98.8022705078125
patch: q CaMeL Ty [ ) ] = 0 ;
rank: 633
score: 98.77083740234374
patch: x CaMeL Norm = 1 . 0 ; }
rank: 633
score: 98.69174194335938
patch: if ( qr CaMeL Decomposition ) {
rank: 634
score: 98.83348999023437
patch: = residuals ) . get ( residuals ) ;
rank: 634
score: 98.770751953125
patch: = ( int [ ] ) 0 ;
rank: 634
score: 98.69168429904514
patch: final boolean first CaMeL Iteration = true ;
rank: 634
score: 98.58551897321429
patch: [ residuals ] = residuals ;
rank: 634
score: 98.57499186197917
patch: q CaMeL Ty = System . residuals ;
rank: 635
score: 98.9308749112216
patch: boolean first CaMeL Iteration = first CaMeL Iteration ) ;
rank: 635
score: 98.76634521484375
patch: increment CaMeL Iterations CaMeL Counter ( ) ; ;
rank: 635
score: 98.68850708007812
patch: if ( update CaMeL Jacobian ) {
rank: 635
score: 98.583251953125
patch: q CaMeL Ty = new ) ; }
rank: 635
score: 98.57437896728516
patch: q CaMeL Ty ( - ) ;
rank: 636
score: 98.91797984730114
patch: q CaMeL Ty ( residuals , x CaMeL Norm ,
rank: 636
score: 98.8443359375
patch: lm CaMeL Par ( point , objective ) ;
rank: 636
score: 98.79856567382812
patch: q CaMeL Ty ( float [ ] ) ;
rank: 636
score: 98.74011908637152
patch: q CaMeL Ty = residuals . 0 ;
rank: 636
score: 98.685791015625
patch: n = update CaMeL Jacobian ( ) ;
rank: 636
score: 98.58254568917411
patch: [ 1 ] = residuals ;
rank: 636
score: 98.57337103949652
patch: ( residuals , residuals , true ) ;
rank: 637
score: 98.73876274956598
patch: q CaMeL Ty = [ residuals ] ;
rank: 637
score: 98.68507215711806
patch: this . q CaMeL Ty ( ) ;
rank: 638
score: 98.83282470703125
patch: q CaMeL Ty 1 ( ) ;
rank: 638
score: 98.79711303710937
patch: q CaMeL Ty ( residuals $NUMBER$ residuals ) ;
rank: 638
score: 98.76427001953125
patch: delta = ( double [ ] ) $NUMBER$ ;
rank: 638
score: 98.73233371310764
patch: q CaMeL Ty = residuals ; ; ;
rank: 638
score: 98.67949083116319
patch: Maq CaMeL Ty ( residuals ) ;
rank: 638
score: 98.57111952039931
patch: ( 0 , residuals , false ) ;
rank: 639
score: 98.9290771484375
patch: x CaMeL Norm = diag [ 0 ] ;
rank: 639
score: 98.83272705078124
patch: = new double [ residuals - 1 ] ;
rank: 639
score: 98.72728814019098
patch: q CaMeL Ty ( residuals ) ; _
rank: 639
score: 98.67719184027777
patch: table q CaMeL Ty ( residuals ) ;
rank: 639
score: 98.57151285807292
patch: b = q CaMeL Ty ( ) ;
rank: 639
score: 98.56612396240234
patch: q CaMeL Ty residuals = ) ;
rank: 640
score: 98.92686157226562
patch: delta = permutation * point [ 0 ] ;
rank: 640
score: 98.83745727539062
patch: = current ; lm CaMeL Par = 0 ;
rank: 640
score: 98.83215942382813
patch: = new double [ residuals / $NUMBER$ ] ;
rank: 640
score: 98.67656707763672
patch: do CaMeL Optimize ( residuals ) ;
rank: 640
score: 98.56764729817708
patch: residuals = new Object [ residuals ] ;
rank: 641
score: 98.9259033203125
patch: x CaMeL Norm = x CaMeL Norm ;
rank: 641
score: 98.90687144886364
patch: q CaMeL Ty ( ) ; / * * /
rank: 641
score: 98.83200412326389
patch: = residuals ( residuals ) / $NUMBER$ ;
rank: 641
score: 98.78994411892361
patch: = old CaMeL X [ 0 ] ;
rank: 641
score: 98.76216430664063
patch: q CaMeL Ty ( 0 , permutation ) ;
rank: 641
score: 98.56732177734375
patch: q CaMeL Ty = ) . length ;
rank: 642
score: 98.9065829190341
patch: q CaMeL Ty ( ) ; lm CaMeL Par ;
rank: 642
score: 98.8349609375
patch: q CaMeL Ty ( ) ; / * / }
rank: 642
score: 98.830615234375
patch: q CaMeL Ty [ ) ] = ) ;
rank: 642
score: 98.67639838324652
patch: packet q CaMeL Ty ( residuals ) ;
rank: 642
score: 98.56699916294643
patch: [ $NUMBER$ ] = residuals ;
rank: 642
score: 98.54368591308594
patch: q CaMeL Ty = q CaMeL Ty
rank: 643
score: 98.83026885986328
patch: q CaMeL Ty ( get ) ;
rank: 643
score: 98.78642272949219
patch: [ 0 ] = - 1 ;
rank: 643
score: 98.67618136935764
patch: patq CaMeL Ty ( residuals ) ;
rank: 644
score: 98.92369495738636
patch: double [ ] = new double [ cols ] ;
rank: 644
score: 98.82987060546876
patch: q CaMeL Ty ( ) ( residuals ) ;
rank: 644
score: 98.7841064453125
patch: q CaMeL Ty ( 0 . 0 ) ;
rank: 644
score: 98.75889587402344
patch: delta = point [ 0 ] ;
rank: 644
score: 98.7134017944336
patch: q CaMeL Ty = residuals . }
rank: 644
score: 98.67587619357639
patch: ( update CaMeL Jacobian ( ) ) ;
rank: 644
score: 98.56507025824652
patch: ) q CaMeL Ty ( residuals ) ;
rank: 644
score: 98.53730773925781
patch: q CaMeL Ty = - ) ;
rank: 645
score: 98.90504760742188
patch: = ) ; qr CaMeL Decomposition ( ) ;
rank: 645
score: 98.78041381835938
patch: = 0 ; q CaMeL Ty ( ) ;
rank: 645
score: 98.70943196614583
patch: q CaMeL Ty = residuals = $NUMBER$ ;
rank: 645
score: 98.67453342013889
patch: apq CaMeL Ty ( residuals ) ;
rank: 645
score: 98.53378295898438
patch: q CaMeL Ty = - $NUMBER$ ;
rank: 646
score: 98.90343128551136
patch: lm CaMeL Dir = qr CaMeL Decomposition ( ) ;
rank: 646
score: 98.83195277622768
patch: ( x CaMeL Norm ) ;
rank: 646
score: 98.8273681640625
patch: q CaMeL Ty += residuals ) / $NUMBER$ ;
rank: 646
score: 98.77894287109375
patch: q CaMeL Ty ( residuals , min ) ;
rank: 646
score: 98.75009591238839
patch: lm CaMeL Dir = 0 ;
rank: 646
score: 98.705078125
patch: q CaMeL Ty ( 1 , ) ;
rank: 646
score: 98.67353057861328
patch: int first CaMeL Iteration = 0 ;
rank: 646
score: 98.53282470703125
patch: ( 0 ) ;
rank: 647
score: 98.92148659446023
patch: q CaMeL Ty ( ) ; diag ( ) ;
rank: 647
score: 98.82637023925781
patch: q CaMeL Ty $NUMBER$ ( ) ;
rank: 647
score: 98.77789306640625
patch: q CaMeL Ty [ 1 ] = ) ;
rank: 647
score: 98.74908447265625
patch: bound = new int [ cols ] ;
rank: 647
score: 98.70496283637152
patch: q CaMeL Ty = null ; ) ;
rank: 647
score: 98.67282104492188
patch: synchronized ( lm CaMeL Par ) {
rank: 648
score: 98.82649536132813
patch: q CaMeL Ty ( ) ; / / }
rank: 648
score: 98.82550048828125
patch: q CaMeL Ty ( ) . ) ;
rank: 648
score: 98.74747043185764
patch: q CaMeL Ty ( residuals true ) ;
rank: 648
score: 98.70488145616319
patch: ) ; q CaMeL Ty ( ) ;
rank: 648
score: 98.66654968261719
patch: if ( cost != null ) {
rank: 648
score: 98.56045193142361
patch: q CaMeL Ty = residuals . $NUMBER$ ;
rank: 648
score: 98.52791922433036
patch: ( $STRING$ , residuals ) ;
rank: 649
score: 98.92105441623264
patch: q CaMeL Ty ( new double [ ]
rank: 649
score: 98.82528076171874
patch: q CaMeL Ty -= q CaMeL Ty ) ;
rank: 649
score: 98.77730984157986
patch: q CaMeL Ty ( residuals / ) ;
rank: 649
score: 98.70479329427083
patch: / ; q CaMeL Ty ( ) ;
rank: 649
score: 98.65738677978516
patch: if ( previous == 0 ) {
rank: 649
score: 98.52632141113281
patch: q CaMeL Ty residuals = false ;
rank: 650
score: 98.92008833451705
patch: lm CaMeL Par = new int [ rows ] ;
rank: 650
score: 98.90044611150569
patch: q CaMeL Ty ( ) ; / * / /
rank: 650
score: 98.82586115056819
patch: int max = jac CaMeL Norm [ 0 ] ;
rank: 650
score: 98.73780653211806
patch: increment CaMeL Iterations CaMeL Counter = 0 ;
rank: 650
score: 98.70448303222656
patch: q CaMeL Ty = residuals . else
rank: 650
score: 98.65243530273438
patch: q CaMeL Ty ( max ) ;
rank: 650
score: 98.5239028930664
patch: Ty ( residuals , residuals ) ;
rank: 651
score: 98.8239013671875
patch: = new ; q CaMeL Ty ( ) ;
rank: 651
score: 98.70292833116319
patch: q CaMeL Ty = ( { ) ;
rank: 651
score: 98.65232849121094
patch: else qr CaMeL Decomposition ( ) ;
rank: 651
score: 98.55691528320312
patch: q CaMeL Ty ( in ) ;
rank: 651
score: 98.52222442626953
patch: q CaMeL Ty = System . ;
rank: 652
score: 98.8235107421875
patch: ; increment CaMeL Iterations CaMeL Counter ( ) ;
rank: 652
score: 98.73517523871527
patch: delta ; qr CaMeL Decomposition ( ) ;
rank: 652
score: 98.70111083984375
patch: q CaMeL Ty ( residuals ) ; this
rank: 652
score: 98.647705078125
patch: if ( cost != 1 ) {
rank: 652
score: 98.51975795200893
patch: q CaMeL Ty ) ; ;
rank: 653
score: 98.82278781467014
patch: $NUMBER$ . q CaMeL Ty ( ) ;
rank: 653
score: 98.7322006225586
patch: vector q CaMeL Ty ( ) ;
rank: 653
score: 98.69479031032986
patch: q CaMeL Ty ( ) = ) ;
rank: 653
score: 98.64712524414062
patch: q CaMeL Ty ( ) ; try
rank: 653
score: 98.54707845052083
patch: q CaMeL Ty = residuals ; continue ;
rank: 653
score: 98.51614379882812
patch: ( - 1 , residuals ) ;
rank: 654
score: 98.9171142578125
patch: / ( x CaMeL Norm == 0 ) ?
rank: 654
score: 98.77247314453125
patch: q CaMeL Ty ( residuals + $NUMBER$ ) ;
rank: 654
score: 98.72089301215277
patch: res = new double [ cols ] ;
rank: 654
score: 98.64459991455078
patch: q CaMeL Ty $NUMBER$ = current ;
rank: 654
score: 98.54658338758681
patch: q CaMeL Ty ( ) ; } }
rank: 654
score: 98.50755310058594
patch: q CaMeL Ty = this ) ;
rank: 655
score: 98.91608220880681
patch: delta = x CaMeL Norm = x CaMeL Norm ;
rank: 655
score: 98.82102457682292
patch: double q CaMeL Ty ( residuals ) ;
rank: 655
score: 98.82033962673611
patch: = q CaMeL Ty . residuals ) ;
rank: 655
score: 98.7718505859375
patch: = old CaMeL X [ residuals ] ;
rank: 655
score: 98.7175521850586
patch: delta = point [ cols ] ;
rank: 655
score: 98.693603515625
patch: q CaMeL Ty = [ $NUMBER$ ] ;
rank: 655
score: 98.54537624782986
patch: q CaMeL Ty = residuals ) ) }
rank: 655
score: 98.50731404622395
patch: Ty ( residuals ) ;
rank: 656
score: 98.82036590576172
patch: delta q CaMeL Ty ( ) ;
rank: 656
score: 98.77158813476562
patch: q CaMeL Ty ( residuals == residuals ) ;
rank: 656
score: 98.71337212456598
patch: = ( double [ ] ) cols ;
rank: 656
score: 98.69146050347223
patch: q CaMeL Ty ( residuals ) ) /
rank: 656
score: 98.64048767089844
patch: q CaMeL Ty ( out ) ;
rank: 657
score: 98.91591796875
patch: = ( x CaMeL Norm == 0 ) ?
rank: 657
score: 98.89169650607639
patch: = ( double [ ] ) point ;
rank: 657
score: 98.82006157769098
patch: diag = new double [ cols ] ;
rank: 657
score: 98.81739807128906
patch: q CaMeL Ty ( ) * /
rank: 657
score: 98.77149658203125
patch: = q CaMeL Ty ( residuals $NUMBER$ ) ;
rank: 657
score: 98.71233452690973
patch: x CaMeL Norm = diag CaMeL R ;
rank: 657
score: 98.69110785590277
patch: q CaMeL Ty = current . residuals ;
rank: 657
score: 98.63524627685547
patch: q CaMeL Ty ( residuals , {
rank: 657
score: 98.53941345214844
patch: q CaMeL Ty = true ; ;
rank: 657
score: 98.50074005126953
patch: ( ( int ) 1 ) ;
rank: 658
score: 98.81726752387152
patch: q CaMeL Ty ( $NUMBER$ ) ; ;
rank: 658
score: 98.6895751953125
patch: q CaMeL Ty = residuals . current ;
rank: 658
score: 98.62958526611328
patch: int first CaMeL Iteration = current ;
rank: 659
score: 98.8913907137784
patch: q CaMeL Ty ( ) ; previous = true ;
rank: 659
score: 98.8172607421875
patch: q CaMeL Ty $NUMBER$ residuals ( residuals ) ;
rank: 659
score: 98.815869140625
patch: double [ ] old CaMeL Res = current ;
rank: 659
score: 98.68916151258681
patch: q CaMeL Ty ( 1 ) ; ;
rank: 659
score: 98.624755859375
patch: if ( current != current ) {
rank: 659
score: 98.49510846819196
patch: q CaMeL Ty -= residuals ;
rank: 660
score: 98.8165283203125
patch: q CaMeL Ty ( residuals ) . ; ;
rank: 660
score: 98.81268310546875
patch: q CaMeL Ty ( $STRING$ , diag ) ;
rank: 660
score: 98.764697265625
patch: = new double [ residuals + 1 ] ;
rank: 660
score: 98.70718044704861
patch: x CaMeL Norm = jac CaMeL Norm ;
rank: 660
score: 98.68870713975694
patch: q CaMeL Ty ( ) ; current }
rank: 660
score: 98.53261990017361
patch: [ 0 ] = residuals ; break ;
rank: 660
score: 98.490478515625
patch: ( null , residuals ) ;
rank: 661
score: 98.8123779296875
patch: = ( int [ ] ) previous ;
rank: 661
score: 98.68814425998264
patch: q CaMeL Ty = 0 ; ) ;
rank: 661
score: 98.61970520019531
patch: if ( cost >= 0 ) {
rank: 661
score: 98.53251139322917
patch: q CaMeL Ty = residuals + residuals ;
rank: 662
score: 98.81630249023438
patch: = residuals q CaMeL Ty ( residuals ) ;
rank: 662
score: 98.76243286132812
patch: q CaMeL Ty [ residuals ] = start ;
rank: 662
score: 98.68781195746527
patch: q CaMeL Ty = null ; ) {
rank: 662
score: 98.61493682861328
patch: Object first CaMeL Iteration = current ;
rank: 662
score: 98.53013780381944
patch: $NUMBER$ = q CaMeL Ty ( ) ;
rank: 662
score: 98.48709542410714
patch: ( 1 , residuals ) ;
rank: 663
score: 98.8162841796875
patch: = new double [ residuals * ) ] ;
rank: 663
score: 98.76036987304687
patch: q CaMeL Ty ( [ 0 ] ) ;
rank: 663
score: 98.68633355034723
patch: q CaMeL Ty = residuals ; else ;
rank: 663
score: 98.61080932617188
patch: if ( cost <= 0 ) {
rank: 663
score: 98.52922058105469
patch: n [ 0 ] = residuals ;
rank: 663
score: 98.48661295572917
patch: residuals ( residuals ) ;
rank: 664
score: 98.81619873046876
patch: = residuals ( residuals ( residuals ) ) ;
rank: 664
score: 98.70347086588542
patch: = 0 . 0 ;
rank: 664
score: 98.68622504340277
patch: q CaMeL Ty ( residuals , residuals ;
rank: 664
score: 98.60847473144531
patch: q CaMeL Ty ( ) ; /
rank: 664
score: 98.52755398220486
patch: q CaMeL Ty ( $NUMBER$ , ) ;
rank: 665
score: 98.90706380208333
patch: delta = x CaMeL Norm = 0 ;
rank: 665
score: 98.88011585582386
patch: ( residuals ) ; first CaMeL Iteration = true ;
rank: 665
score: 98.815966796875
patch: q CaMeL Ty = residuals ) / $NUMBER$ ;
rank: 665
score: 98.70228407118056
patch: q CaMeL Ty ( this , ) ;
rank: 665
score: 98.60551452636719
patch: q CaMeL Ty $NUMBER$ = 0 ;
rank: 665
score: 98.52558051215277
patch: q CaMeL Ty ( residuals ) ) }
rank: 665
score: 98.48035430908203
patch: residuals ( residuals , residuals ) ;
rank: 666
score: 98.70045471191406
patch: delta = current [ 0 ] ;
rank: 666
score: 98.68414984809027
patch: q CaMeL Ty ( ) ; try /
rank: 666
score: 98.60427856445312
patch: finally { while ( true ) {
rank: 667
score: 98.81476440429688
patch: q CaMeL Ty ( ) ; } * /
rank: 667
score: 98.80733642578124
patch: delta = ( int [ ] ) previous ;
rank: 667
score: 98.69788953993056
patch: update CaMeL Jacobian ( ) ; * /
rank: 667
score: 98.68280029296875
patch: q CaMeL Ty ( ) ; else ;
rank: 667
score: 98.59905242919922
patch: synchronized ( qr CaMeL Decomposition ) {
rank: 667
score: 98.47537994384766
patch: q CaMeL Ty catch ( ) ;
rank: 668
score: 98.75253295898438
patch: = this . q CaMeL Ty ( ) ;
rank: 668
score: 98.69661458333333
patch: delta = do CaMeL Optimize ( ) ;
rank: 668
score: 98.67844645182292
patch: q CaMeL Ty = ( ) ) ;
rank: 668
score: 98.59791782924107
patch: q CaMeL Ty ( residuals ,
rank: 668
score: 98.51913113064236
patch: { q CaMeL Ty ( residuals ) ;
rank: 668
score: 98.47406005859375
patch: } q CaMeL Ty = ) ;
rank: 669
score: 98.90179443359375
patch: work $NUMBER$ = new double [ cols ] ;
rank: 669
score: 98.69283718532986
patch: x CaMeL Norm = 0 . 1 ;
rank: 669
score: 98.59762573242188
patch: int x CaMeL Norm = 0 ;
rank: 669
score: 98.51813422309027
patch: q CaMeL Ty ( ) = false ;
rank: 669
score: 98.47211456298828
patch: q CaMeL Ty [ ) * ;
rank: 670
score: 98.87345581054687
patch: q CaMeL Ty ( residuals ) ; / ?
rank: 670
score: 98.7496337890625
patch: q CaMeL Ty [ 0 ] = max ;
rank: 670
score: 98.51646592881944
patch: q CaMeL Ty ( residuals ) = (
rank: 670
score: 98.47188313802083
patch: q CaMeL Ty ; ;
rank: 671
score: 98.813134765625
patch: q CaMeL Ty [ residuals ] = $STRING$ ;
rank: 671
score: 98.68976508246527
patch: jacobian q CaMeL Ty ( residuals ) ;
rank: 671
score: 98.67550320095486
patch: else q CaMeL Ty ( ) ; ;
rank: 671
score: 98.46381378173828
patch: ( 0 , residuals ) ; ;
rank: 672
score: 98.81259155273438
patch: q CaMeL Ty [ residuals ] = ; ;
rank: 672
score: 98.749169921875
patch: q CaMeL Ty [ ) ] ( ) ;
rank: 672
score: 98.67526584201389
patch: q CaMeL Ty = residuals ; ; }
rank: 672
score: 98.59005737304688
patch: if ( cost < 0 ) {
rank: 672
score: 98.51527913411458
patch: q CaMeL Ty ( * residuals ) ;
rank: 673
score: 98.81182861328125
patch: q CaMeL Ty = residuals ) * $NUMBER$ ;
rank: 673
score: 98.68544006347656
patch: update CaMeL Jacobian ( null ) ;
rank: 673
score: 98.67508951822917
patch: q CaMeL Ty ( 0 ) ; }
rank: 673
score: 98.46041870117188
patch: q CaMeL Ty = false ; ;
rank: 674
score: 98.86875610351562
patch: increment CaMeL Iterations CaMeL Counter ( residuals ) ;
rank: 674
score: 98.81134711371527
patch: , q CaMeL Ty ( residuals ) ;
rank: 674
score: 98.80131022135417
patch: Value = new double [ cols ] ;
rank: 674
score: 98.68528238932292
patch: q CaMeL Ty ( residuals false ) ;
rank: 674
score: 98.67406548394098
patch: q CaMeL Ty ( ) + 1 ;
rank: 674
score: 98.58296203613281
patch: if ( lm CaMeL Par ) {
rank: 675
score: 98.81088692801339
patch: q CaMeL Ty ( residuals ;
rank: 675
score: 98.74683837890625
patch: q CaMeL Ty [ 0 ] = min ;
rank: 675
score: 98.68344116210938
patch: res q CaMeL Ty ( ) ;
rank: 675
score: 98.58198547363281
patch: q CaMeL Ty ( rows ) ;
rank: 675
score: 98.50251770019531
patch: ; q CaMeL Ty ( ) ;
rank: 675
score: 98.45652553013393
patch: CaMeL Number ( residuals ) ;
rank: 676
score: 98.8957275390625
patch: delta = permutation * point [ cols ] ;
rank: 676
score: 98.86771850585937
patch: q CaMeL Ty ( ) ; = current ;
rank: 676
score: 98.81041124131944
patch: -= q CaMeL Ty ( residuals ) ;
rank: 676
score: 98.79896763392857
patch: q CaMeL Ty ( ) .
rank: 676
score: 98.57918548583984
patch: q CaMeL Ty ( beta ) ;
rank: 676
score: 98.45584869384766
patch: q CaMeL Ty [ ) ) ;
rank: 677
score: 98.89512803819444
patch: q CaMeL Ty = x CaMeL Norm ;
rank: 677
score: 98.81037055121527
patch: * / q CaMeL Ty ( ) ;
rank: 677
score: 98.7445556640625
patch: = q CaMeL Ty $NUMBER$ [ 0 ] ;
rank: 677
score: 98.68130154079861
patch: = Math . max ( diag ) ;
rank: 677
score: 98.67252604166667
patch: q CaMeL Ty = residuals . ) ;
rank: 677
score: 98.57535552978516
patch: this q CaMeL Ty ( ) ;
rank: 678
score: 98.80709499782986
patch: q CaMeL Ty , residuals ( ) ;
rank: 678
score: 98.68081229073661
patch: lm CaMeL Par = current ;
rank: 678
score: 98.6722412109375
patch: q CaMeL Ty = residuals . -- ;
rank: 678
score: 98.57381766183036
patch: do CaMeL Optimize ( ) ;
rank: 678
score: 98.49722290039062
patch: q CaMeL Ty ( list ) ;
rank: 678
score: 98.45296478271484
patch: q CaMeL Ty residuals = 0 ;
rank: 679
score: 98.80330403645833
patch: q CaMeL Ty ( ) ) ; ;
rank: 679
score: 98.68021647135417
patch: = new double [ cols ] ; ;
rank: 679
score: 98.57054138183594
patch: if ( delta == 0 ) {
rank: 679
score: 98.49690246582031
patch: q CaMeL Ty += residuals residuals ;
rank: 679
score: 98.45236206054688
patch: q CaMeL Ty [ 1 ] ;
rank: 680
score: 98.88983154296875
patch: delta = residuals [ 0 ] ;
rank: 680
score: 98.7989501953125
patch: q CaMeL Ty += residuals ; ;
rank: 680
score: 98.56773376464844
patch: if ( residuals > 0 ) {
rank: 680
score: 98.48855590820312
patch: [ 0 ] = residuals ; }
rank: 681
score: 98.79709879557292
patch: = residuals ( ) ;
rank: 681
score: 98.74209594726562
patch: q CaMeL Ty [ ) ] = true ;
rank: 681
score: 98.66385904947917
patch: q CaMeL Ty = residuals ; System }
rank: 681
score: 98.56755065917969
patch: the update CaMeL Jacobian ( ) ;
rank: 681
score: 98.4859848022461
patch: q CaMeL Ty ( residuals ) }
rank: 681
score: 98.44900512695312
patch: q CaMeL Ty [ ) ] ;
rank: 682
score: 98.67782253689236
patch: dk q CaMeL Ty ( residuals ) ;
rank: 682
score: 98.66266547309027
patch: q CaMeL Ty = 0 ; ) {
rank: 682
score: 98.56684875488281
patch: finally { if ( true ) {
rank: 682
score: 98.44767543247768
patch: [ 0 ] ( ) ;
rank: 683
score: 98.8609130859375
patch: = ) ; update CaMeL Jacobian ( ) ;
rank: 683
score: 98.79208713107639
patch: q CaMeL Ty 0 ( residuals ) ;
rank: 683
score: 98.79161919487848
patch: * / qr CaMeL Decomposition ( ) ;
rank: 683
score: 98.7407958984375
patch: q CaMeL Ty [ 1 ] ( ) ;
rank: 683
score: 98.67563883463542
patch: q CaMeL Ty = jac CaMeL Norm ;
rank: 683
score: 98.66257052951389
patch: q CaMeL Ty ( this + ) ;
rank: 683
score: 98.56684112548828
patch: if ( point == 0 ) {
rank: 683
score: 98.4471206665039
patch: [ residuals ] ( residuals ) ;
rank: 684
score: 98.7911865234375
patch: q CaMeL Ty ( point . objective ) ;
rank: 684
score: 98.78787994384766
patch: = q CaMeL Ty ) ; ;
rank: 684
score: 98.7402587890625
patch: q CaMeL Ty ( 1 . 0 ) ;
rank: 684
score: 98.67411295572917
patch: x CaMeL Norm += 1 . 0 ;
rank: 684
score: 98.66000027126736
patch: q CaMeL Ty = residuals . max ;
rank: 684
score: 98.56428527832031
patch: if ( ( true ) ) {
rank: 685
score: 98.78630913628473
patch: q CaMeL Ty [ residuals ] ; ;
rank: 685
score: 98.7401123046875
patch: q CaMeL Ty [ $NUMBER$ ] = null ;
rank: 685
score: 98.65740966796875
patch: q CaMeL Ty ( 0 1 ) ;
rank: 685
score: 98.56218719482422
patch: q CaMeL Ty ( start ) ;
rank: 685
score: 98.44271850585938
patch: q CaMeL Ty residuals = $NUMBER$ ;
rank: 686
score: 98.78618706597223
patch: q CaMeL Ty ] ( residuals ) ;
rank: 686
score: 98.73995361328124
patch: = ( q CaMeL Ty ( ) ) ;
rank: 686
score: 98.67283121744792
patch: orthoq CaMeL Ty ( residuals ) ;
rank: 686
score: 98.43579864501953
patch: q CaMeL Ty [ $NUMBER$ ] ;
rank: 687
score: 98.78851318359375
patch: buf = new double [ cols ] ;
rank: 687
score: 98.78211127387152
patch: q CaMeL Ty [ 0 ] ; ;
rank: 687
score: 98.73805541992188
patch: = null ; q CaMeL Ty ( ) ;
rank: 687
score: 98.67182752821181
patch: point q CaMeL Ty ( residuals ) ;
rank: 687
score: 98.65469021267361
patch: q CaMeL Ty ( ; / / /
rank: 687
score: 98.55654907226562
patch: return update CaMeL Jacobian ( ) ;
rank: 687
score: 98.47193145751953
patch: q CaMeL Ty = residuals ; )
rank: 687
score: 98.43323516845703
patch: q CaMeL Ty = $NUMBER$ ; ;
rank: 688
score: 98.885302734375
patch: delta = diag * point [ 0 ] ;
rank: 688
score: 98.78592529296876
patch: lm CaMeL Par [ residuals ] = current ;
rank: 688
score: 98.77961561414931
patch: = q CaMeL Ty ( $NUMBER$ ) ;
rank: 688
score: 98.73580322265624
patch: q CaMeL Ty [ residuals += 1 ] ;
rank: 688
score: 98.67146606445313
patch: delta = 0 ;
rank: 688
score: 98.55455017089844
patch: try { while ( true ) {
rank: 688
score: 98.47154998779297
patch: result = residuals ( residuals ) ;
rank: 688
score: 98.43203735351562
patch: q CaMeL Ty residuals = true ;
rank: 689
score: 98.78184204101562
patch: = 0 ; lm CaMeL Par ( ) ;
rank: 689
score: 98.73438178168402
patch: q CaMeL Ty ( residuals ++ ) ;
rank: 689
score: 98.66916232638889
patch: R . q CaMeL Ty ( ) ;
rank: 689
score: 98.54930114746094
patch: if ( objective == 0 ) {
rank: 689
score: 98.46504211425781
patch: return ( q CaMeL Ty ) ;
rank: 689
score: 98.43133544921875
patch: q CaMeL Ty = default ) ;
rank: 690
score: 98.84844360351562
patch: q CaMeL Ty ( residuals ) ; this ;
rank: 690
score: 98.779736328125
patch: ( ) ; lm CaMeL Par = 0 ;
rank: 690
score: 98.77857123480902
patch: q CaMeL Ty ( residuals , ; }
rank: 690
score: 98.64971923828125
patch: q CaMeL Ty = null ; ; ;
rank: 690
score: 98.54788208007812
patch: return qr CaMeL Decomposition ( ) ;
rank: 690
score: 98.43012237548828
patch: [ 0 ] ( 0 ) ;
rank: 691
score: 98.66546630859375
patch: bound = new double [ rows ] ;
rank: 691
score: 98.64811876085069
patch: q CaMeL Ty ( residuals ) ; public
rank: 691
score: 98.54598999023438
patch: if ( current == current ) {
rank: 691
score: 98.427978515625
patch: q CaMeL Ty ) ; ) ;
rank: 692
score: 98.77629937065973
patch: q CaMeL Ty * residuals ( ) ;
rank: 692
score: 98.54078674316406
patch: synchronized ( lm CaMeL Dir ) {
rank: 692
score: 98.46131896972656
patch: n [ residuals ] = residuals ;
rank: 692
score: 98.4276351928711
patch: [ $NUMBER$ ] ( residuals ) ;
rank: 693
score: 98.88177490234375
patch: lm CaMeL Par = x CaMeL Norm ;
rank: 693
score: 98.64371744791667
patch: q CaMeL Ty ( ) + residuals ;
rank: 693
score: 98.54038783482143
patch: q CaMeL Ty ( residuals )
rank: 693
score: 98.45403180803571
patch: ( true , residuals ) ;
rank: 693
score: 98.42647879464286
patch: q CaMeL Ty ; break ;
rank: 694
score: 98.88021240234374
patch: double [ ] old CaMeL X = 0 ;
rank: 694
score: 98.77555338541667
patch: = q CaMeL Ty ( null ) ;
rank: 694
score: 98.65876600477431
patch: step q CaMeL Ty ( residuals ) ;
rank: 694
score: 98.64259168836806
patch: q CaMeL Ty ( residuals != ) ;
rank: 694
score: 98.53957693917411
patch: if ( current != 0 )
rank: 695
score: 98.77208116319444
patch: q CaMeL Ty [ ) ] = ;
rank: 695
score: 98.53491973876953
patch: if ( true ) { try {
rank: 695
score: 98.44908142089844
patch: residuals = residuals ( residuals ) ;
rank: 695
score: 98.42564392089844
patch: q CaMeL Ty = in ) ;
rank: 696
score: 98.77190290178571
patch: = q CaMeL Ty ; ;
rank: 696
score: 98.72573852539062
patch: q CaMeL Ty [ $NUMBER$ ] = current ;
rank: 696
score: 98.53262329101562
patch: Uq CaMeL Ty ( ) ;
rank: 696
score: 98.44279479980469
patch: q CaMeL Ty ( residuals ) {
rank: 696
score: 98.42486572265625
patch: q CaMeL Ty ( exp ) ;
rank: 697
score: 98.77413504464286
patch: ( point , objective ) ;
rank: 697
score: 98.65487331814236
patch: vector ; qr CaMeL Decomposition ( ) ;
rank: 697
score: 98.6300277709961
patch: q CaMeL Ty = residuals ) throws
rank: 697
score: 98.53186907087054
patch: if ( current == 0 )
rank: 697
score: 98.44248962402344
patch: * q CaMeL Ty ( ) ;
rank: 697
score: 98.42412567138672
patch: ( ( int ) $NUMBER$ ) ;
rank: 698
score: 98.87116156684027
patch: diag q CaMeL Ty ( residuals ) ;
rank: 698
score: 98.77353515625
patch: x CaMeL Norm += 0 . 0 ; }
rank: 698
score: 98.77156575520833
patch: ++ q CaMeL Ty ( residuals ) ;
rank: 698
score: 98.71089172363281
patch: q CaMeL Ty ( double ) ;
rank: 698
score: 98.65382215711806
patch: double delta = point [ 0 ] ;
rank: 698
score: 98.52977643694196
patch: first CaMeL Iteration = true ;
rank: 698
score: 98.44197082519531
patch: n [ $NUMBER$ ] = residuals ;
rank: 698
score: 98.42310333251953
patch: q CaMeL Ty [ residuals ] :
rank: 699
score: 98.87105712890624
patch: lm CaMeL Par = residuals [ cols ] ;
rank: 699
score: 98.77143012152777
patch: q CaMeL Ty ( ) . ; ;
rank: 699
score: 98.71037946428571
patch: [ 0 ] = current ;
rank: 699
score: 98.62043762207031
patch: q CaMeL Ty ( ) + ;
rank: 699
score: 98.5147705078125
patch: if ( true )
rank: 699
score: 98.42051478794643
patch: ( this . residuals ) ;
rank: 700
score: 98.64916229248047
patch: return q CaMeL Ty ( ) ;
rank: 700
score: 98.50469970703125
patch: ( first CaMeL Iteration ) ;
rank: 700
score: 98.43851470947266
patch: [ residuals ] = residuals ) ;
rank: 700
score: 98.41315569196429
patch: ( 0 , 0 ) ;
rank: 701
score: 98.7686538696289
patch: = q CaMeL Ty . ) ;
rank: 701
score: 98.7674560546875
patch: delta = x CaMeL Norm == 0 ;
rank: 701
score: 98.64862060546875
patch: delta = ( int ) 0 ;
rank: 701
score: 98.61397298177083
patch: q CaMeL Ty = ;
rank: 701
score: 98.40949358258929
patch: ( 0 . 1 ) ;
rank: 702
score: 98.86935763888889
patch: delta = new int [ rows ] ;
rank: 702
score: 98.8363265991211
patch: = update CaMeL Jacobian ( ) ;
rank: 702
score: 98.76671006944444
patch: = residuals ( residuals ) * $NUMBER$ ;
rank: 702
score: 98.69747924804688
patch: q CaMeL Ty ( length ) ;
rank: 702
score: 98.64559936523438
patch: update CaMeL Jacobian ( this ) ;
rank: 702
score: 98.61002349853516
patch: q CaMeL Ty q CaMeL Ty ;
rank: 702
score: 98.48696463448661
patch: if ( current != null )
rank: 702
score: 98.43529510498047
patch: n [ 1 ] = residuals ;
rank: 702
score: 98.40853445870536
patch: q CaMeL Ty residuals ) ;
rank: 703
score: 98.868359375
patch: delta = q CaMeL Ty ( residuals ) ;
rank: 703
score: 98.76634979248047
patch: q CaMeL Ty ( residuals ; ;
rank: 703
score: 98.69657135009766
patch: q CaMeL Ty ( ++ ) ;
rank: 703
score: 98.6447525024414
patch: update CaMeL Jacobian ( 0 ) ;
rank: 703
score: 98.48253522600446
patch: first CaMeL Iteration = current ;
rank: 703
score: 98.43167877197266
patch: [ [ 1 ] = residuals ;
rank: 703
score: 98.40803745814732
patch: q CaMeL Ty q CaMeL Ty
rank: 704
score: 98.76513671875
patch: . q CaMeL Ty ( ) ;
rank: 704
score: 98.75928412543402
patch: ( x CaMeL Norm , diag ) ;
rank: 704
score: 98.63622283935547
patch: lm CaMeL Dir ( residuals ) ;
rank: 704
score: 98.6088638305664
patch: q CaMeL Ty = ) ; }
rank: 704
score: 98.45998709542411
patch: if ( residuals == 0 )
rank: 704
score: 98.42935180664062
patch: q CaMeL Ty ( ;
rank: 704
score: 98.407958984375
patch: [ 1 ] ( residuals ) ;
rank: 705
score: 98.62065124511719
patch: lm CaMeL Par ( 0 ) ;
rank: 705
score: 98.44538225446429
patch: if ( cost == 0 )
rank: 705
score: 98.40634155273438
patch: q CaMeL Ty ( ) ; *
rank: 706
score: 98.86626586914062
patch: delta = ( x CaMeL Norm == 0 )
rank: 706
score: 98.76466878255208
patch: q CaMeL Ty ( ) ; * ;
rank: 706
score: 98.68681989397321
patch: [ 0 ] = null ;
rank: 706
score: 98.42879813058036
patch: if ( qr CaMeL Decomposition )
rank: 706
score: 98.40614827473958
patch: q CaMeL Ty residuals ;
rank: 707
score: 98.8650146484375
patch: delta = diag * point [ cols ] ;
rank: 707
score: 98.82567749023437
patch: q CaMeL Ty ( ) ; = 0 ;
rank: 707
score: 98.7645492553711
patch: 1 . residuals ( residuals ) ;
rank: 707
score: 98.75449625651042
patch: ( x CaMeL Norm , delta ) ;
rank: 707
score: 98.615966796875
patch: update CaMeL Jacobian ( $STRING$ ) ;
rank: 707
score: 98.60175323486328
patch: q CaMeL Ty ( abs ) ;
rank: 707
score: 98.42829241071429
patch: if ( update CaMeL Jacobian )
rank: 707
score: 98.4053955078125
patch: [ 0 ] [ 0 ] ;
rank: 708
score: 98.76441107855902
patch: = residuals ( residuals ) - 1 ;
rank: 708
score: 98.61477661132812
patch: x CaMeL Norm = 0 ; }
rank: 708
score: 98.41966901506696
patch: while ( first CaMeL Iteration )
rank: 708
score: 98.40350341796875
patch: q CaMeL Ty ) ; break ;
rank: 709
score: 98.86256239149306
patch: q CaMeL Ty ( - 0 ) ;
rank: 709
score: 98.76262071397569
patch: ( ) . residuals ( residuals ) ;
rank: 709
score: 98.75043402777777
patch: ( 0 , x CaMeL Norm ) ;
rank: 709
score: 98.61217498779297
patch: double delta = 0 . 0 ;
rank: 709
score: 98.59602355957031
patch: q CaMeL Ty = residuals = ;
rank: 709
score: 98.41780090332031
patch: q CaMeL Ty = ) ) }
rank: 709
score: 98.4163818359375
patch: ( qr CaMeL Decomposition ) ;
rank: 709
score: 98.39892578125
patch: q CaMeL Ty ; ) ;
rank: 710
score: 98.82085571289062
patch: = this ; qr CaMeL Decomposition ( ) ;
rank: 710
score: 98.61029924665179
patch: x CaMeL Norm = 1 ;
rank: 710
score: 98.5866470336914
patch: ( residuals [ 0 ] ) ;
rank: 710
score: 98.41428920200893
patch: if ( residuals != 0 )
rank: 710
score: 98.39837646484375
patch: [ 0 ] = ) ;
rank: 711
score: 98.75413682725694
patch: q CaMeL Ty += residuals ( ) ;
rank: 711
score: 98.58074951171875
patch: q CaMeL Ty ( ; / /
rank: 711
score: 98.39583042689732
patch: ( 0 , null ) ;
rank: 712
score: 98.85863647460937
patch: q CaMeL Ty ( diag , residuals ) ;
rank: 712
score: 98.81761474609375
patch: q CaMeL Ty ( point , delta ) ;
rank: 712
score: 98.75294325086806
patch: = residuals ( ) [ 0 ] ;
rank: 712
score: 98.67880588107639
patch: q CaMeL Ty = new double ) ;
rank: 712
score: 98.61022186279297
patch: q CaMeL Ty ( . ) ;
rank: 712
score: 98.58062744140625
patch: q CaMeL Ty ( ; ) ;
rank: 712
score: 98.38589041573661
patch: synchronized ( lm CaMeL Par )
rank: 712
score: 98.38211495535714
patch: ( 0 + residuals ) ;
rank: 713
score: 98.61015319824219
patch: delta ( x CaMeL Norm ) ;
rank: 713
score: 98.40457916259766
patch: q CaMeL Ty = residuals ; else
rank: 713
score: 98.38003104073661
patch: [ 0 ] = 0 ;
rank: 714
score: 98.749755859375
patch: q CaMeL Ty += residuals / $NUMBER$ ;
rank: 714
score: 98.73621961805556
patch: = ( boolean [ ] ) previous ;
rank: 714
score: 98.608642578125
patch: return ( x CaMeL Norm ) ;
rank: 714
score: 98.40165710449219
patch: ) q CaMeL Ty ( ) ;
rank: 714
score: 98.38002232142857
patch: q CaMeL Ty = start ;
rank: 715
score: 98.814013671875
patch: q CaMeL Ty [ 0 ] = point ;
rank: 715
score: 98.74876098632812
patch: = residuals ) ;
rank: 715
score: 98.7362060546875
patch: its q CaMeL Ty ( residuals ) ;
rank: 715
score: 98.67559814453125
patch: q CaMeL Ty ( name ) ;
rank: 715
score: 98.60330963134766
patch: double first CaMeL Iteration = 0 ;
rank: 715
score: 98.37632242838542
patch: ( - 1 ) ;
rank: 715
score: 98.36534423828125
patch: reset ( ) ;
rank: 716
score: 98.85509643554687
patch: delta = jac CaMeL Norm [ 0 ] ;
rank: 716
score: 98.81378784179688
patch: q CaMeL Ty ( point , jacobian ) ;
rank: 716
score: 98.74785698784723
patch: = current . residuals ( residuals ) ;
rank: 716
score: 98.73346710205078
patch: boolean first CaMeL Iteration = 0 ;
rank: 716
score: 98.67516411675348
patch: += q CaMeL Ty [ 0 ] ;
rank: 716
score: 98.59899030412946
patch: first CaMeL Iteration = 0 ;
rank: 716
score: 98.35850219726562
patch: ( this ) ;
rank: 717
score: 98.85399169921875
patch: lm CaMeL Par = residuals [ permutation ] ;
rank: 717
score: 98.74730088975694
patch: ++ ; q CaMeL Ty ( ) ;
rank: 717
score: 98.59527587890625
patch: qr CaMeL Decomposition ( true ) ;
rank: 717
score: 98.39305877685547
patch: [ - 1 ] = residuals ;
rank: 717
score: 98.35750906808036
patch: q CaMeL Ty += ) ;
rank: 717
score: 98.35688127790179
patch: q CaMeL Ty = previous ;
rank: 718
score: 98.85392456054687
patch: double max = new int [ cols ] ;
rank: 718
score: 98.81365356445312
patch: q CaMeL Ty ( 0 , jacobian ) ;
rank: 718
score: 98.56623077392578
patch: q CaMeL Ty residuals = residuals ;
rank: 718
score: 98.38863372802734
patch: [ 1 ] = residuals ) ;
rank: 718
score: 98.35601806640625
patch: ( $STRING$ + residuals ) ;
rank: 718
score: 98.35407366071429
patch: q CaMeL Ty += 0 ;
rank: 719
score: 98.74078369140625
patch: = residuals . residuals ( residuals ) ;
rank: 719
score: 98.73133002387152
patch: x CaMeL Norm = 0 . $NUMBER$ ;
rank: 719
score: 98.67159016927083
patch: = q CaMeL Ty [ $NUMBER$ ] ;
rank: 719
score: 98.59358978271484
patch: lm CaMeL Par = 0 ; }
rank: 719
score: 98.38766479492188
patch: q CaMeL Ty = (
rank: 719
score: 98.35205950055804
patch: q CaMeL Ty ( ) :
rank: 720
score: 98.73093668619792
patch: = jac CaMeL Norm [ point ] ;
rank: 720
score: 98.6697998046875
patch: q CaMeL Ty -- ;
rank: 720
score: 98.56265258789062
patch: q CaMeL Ty = start ) ;
rank: 720
score: 98.35105678013393
patch: try { current = current ;
rank: 721
score: 98.80880737304688
patch: q CaMeL Ty [ residuals ] = point ;
rank: 721
score: 98.738525390625
patch: and q CaMeL Ty ( residuals ) ;
rank: 721
score: 98.73048400878906
patch: / lm CaMeL Par = 0 ;
rank: 721
score: 98.3452657063802
patch: q CaMeL Ty = new
rank: 721
score: 98.33748081752232
patch: if ( previous != 0 )
rank: 722
score: 98.85136108398437
patch: double sum = new double [ cols ] ;
rank: 722
score: 98.7352294921875
patch: q CaMeL Ty ++ ) ;
rank: 722
score: 98.66796196831598
patch: q CaMeL Ty [ ( int ) ;
rank: 722
score: 98.58697509765625
patch: double q CaMeL Ty ( ) ;
rank: 722
score: 98.38166809082031
patch: ( * q CaMeL Ty ) ;
rank: 722
score: 98.33890206473214
patch: } q CaMeL Ty ) ;
rank: 722
score: 98.33553641183036
patch: m = first CaMeL Iteration ;
rank: 723
score: 98.73502604166667
patch: q CaMeL Ty -= residuals ) ; ;
rank: 723
score: 98.72906494140625
patch: ( point , x CaMeL Norm ) ;
rank: 723
score: 98.66679382324219
patch: q CaMeL Ty += residuals 1 ;
rank: 723
score: 98.58331298828125
patch: delta [ 0 ] = 0 ;
rank: 723
score: 98.55670928955078
patch: q CaMeL Ty = max ) ;
rank: 723
score: 98.38078308105469
patch: q CaMeL Ty = true ) ;
rank: 723
score: 98.33678327287946
patch: ( residuals , null ) ;
rank: 723
score: 98.33407592773438
patch: int max = 0 ;
rank: 724
score: 98.84715576171875
patch: lm CaMeL Par = residuals [ 1 ] ;
rank: 724
score: 98.73299831814236
patch: q CaMeL Ty $NUMBER$ residuals ( ) ;
rank: 724
score: 98.7261962890625
patch: this ; qr CaMeL Decomposition ( ) ;
rank: 724
score: 98.58306121826172
patch: update CaMeL Jacobian ( ) ; }
rank: 724
score: 98.37869262695312
patch: [ max ++ ] = residuals ;
rank: 724
score: 98.32425362723214
patch: if ( point != 0 )
rank: 725
score: 98.84456176757813
patch: q CaMeL Ty = residuals [ point ] ;
rank: 725
score: 98.73242950439453
patch: q CaMeL Ty , residuals ) ;
rank: 725
score: 98.72395155164931
patch: / ; qr CaMeL Decomposition ( ) ;
rank: 725
score: 98.546875
patch: q CaMeL Ty ( ) ; public
rank: 725
score: 98.37567901611328
patch: q CaMeL Ty = ( int ;
rank: 725
score: 98.32265799386161
patch: first CaMeL Iteration = false ;
rank: 726
score: 98.8066162109375
patch: q CaMeL Ty ( residuals , sum ) ;
rank: 726
score: 98.72787136501736
patch: = q CaMeL Ty . get ) ;
rank: 726
score: 98.37451934814453
patch: q CaMeL Ty = new float ;
rank: 726
score: 98.325927734375
patch: ( 0 . $NUMBER$ ) ;
rank: 726
score: 98.30731201171875
patch: if ( previous == 0 )
rank: 727
score: 98.84285888671874
patch: q CaMeL Ty [ 0 ] = diag ;
rank: 727
score: 98.80623779296874
patch: update CaMeL Jacobian ( ) ; / * /
rank: 727
score: 98.72785949707031
patch: = residuals ( residuals ) ; ;
rank: 727
score: 98.71866861979167
patch: / / lm CaMeL Par = 0 ;
rank: 727
score: 98.65775553385417
patch: q CaMeL Ty *= q CaMeL Ty ;
rank: 727
score: 98.57757568359375
patch: qr CaMeL Decomposition ( false ) ;
rank: 727
score: 98.53872680664062
patch: q CaMeL Ty ( ) / ;
rank: 727
score: 98.32339913504464
patch: q CaMeL Ty = new ;
rank: 728
score: 98.72740173339844
patch: = q CaMeL Ty . residuals ;
rank: 728
score: 98.5726318359375
patch: increment CaMeL Iterations CaMeL Counter ++ ;
rank: 728
score: 98.53793334960938
patch: q CaMeL Ty ( residuals ) Exception
rank: 728
score: 98.31475830078125
patch: ( false , residuals ) ;
rank: 728
score: 98.291845703125
patch: while ( true )
rank: 729
score: 98.84256591796876
patch: double delta = new int [ cols ] ;
rank: 729
score: 98.80531311035156
patch: ; qr CaMeL Decomposition ( ) ;
rank: 729
score: 98.72689480251736
patch: q CaMeL Ty 1 = residuals ) ;
rank: 729
score: 98.71462673611111
patch: pj q CaMeL Ty ( residuals ) ;
rank: 729
score: 98.5719985961914
patch: = new double [ permutation ] ;
rank: 729
score: 98.53368377685547
patch: q CaMeL Ty = current ) ;
rank: 729
score: 98.37105560302734
patch: [ $NUMBER$ ] = residuals ) ;
rank: 729
score: 98.31116739908855
patch: ( - residuals ) ;
rank: 729
score: 98.28855678013393
patch: q CaMeL Ty = point ;
rank: 730
score: 98.84242553710938
patch: delta delta = new int [ cols ] ;
rank: 730
score: 98.72595893012152
patch: + q CaMeL Ty ( residuals ) ;
rank: 730
score: 98.57179478236607
patch: lm CaMeL Dir = current ;
rank: 730
score: 98.53269958496094
patch: q CaMeL Ty ( residuals . ;
rank: 730
score: 98.36894226074219
patch: q CaMeL Ty = new long ;
rank: 730
score: 98.28750174386161
patch: q CaMeL Ty = $STRING$ ;
rank: 731
score: 98.72508409288194
patch: q CaMeL Ty ( ) . ; }
rank: 731
score: 98.56732177734375
patch: return new double [ cols ] ;
rank: 731
score: 98.36589813232422
patch: q CaMeL Ty = new Object ;
rank: 731
score: 98.30768694196429
patch: q CaMeL Ty [ ) ;
rank: 731
score: 98.28526088169643
patch: finally { if ( true )
rank: 732
score: 98.8363037109375
patch: delta = update CaMeL Jacobian ( ) ;
rank: 732
score: 98.7227783203125
patch: = q CaMeL Ty . ;
rank: 732
score: 98.64927673339844
patch: q CaMeL Ty = residuals 1 ;
rank: 732
score: 98.56697082519531
patch: bound q CaMeL Ty ( ) ;
rank: 732
score: 98.531005859375
patch: q CaMeL Ty = 1 ; ;
rank: 732
score: 98.30677286783855
patch: residuals ( new ) ;
rank: 732
score: 98.2753173828125
patch: m = 0 ;
rank: 733
score: 98.72271050347223
patch: = q CaMeL Ty ( ) . ;
rank: 733
score: 98.64772542317708
patch: [ 0 ] = old CaMeL X ;
rank: 733
score: 98.5667953491211
patch: = new double [ 0 ] ;
rank: 733
score: 98.35875701904297
patch: q CaMeL Ty = this ; }
rank: 733
score: 98.30257742745536
patch: ( 0 . residuals ) ;
rank: 733
score: 98.25867309570313
patch: if ( ) {
rank: 734
score: 98.72105577256944
patch: -- ; q CaMeL Ty ( ) ;
rank: 734
score: 98.70415581597223
patch: list q CaMeL Ty ( residuals ) ;
rank: 734
score: 98.56655883789062
patch: update CaMeL Jacobian ( point ) ;
rank: 734
score: 98.30210658482143
patch: ( 0 , this ) ;
rank: 734
score: 98.2442626953125
patch: if ( false ) {
rank: 735
score: 98.70378960503473
patch: = ( boolean [ ] ) 0 ;
rank: 735
score: 98.5175552368164
patch: q CaMeL Ty = current ; ;
rank: 735
score: 98.30194091796875
patch: Ty ( new ) ;
rank: 735
score: 98.23389282226563
patch: i = 0 ;
rank: 736
score: 98.81748453776042
patch: double delta = permutation [ 0 ] ;
rank: 736
score: 98.64310709635417
patch: = new double [ residuals 1 ] ;
rank: 736
score: 98.30104282924107
patch: ( 0 , $NUMBER$ ) ;
rank: 736
score: 98.23299153645833
patch: while ( false ) {
rank: 737
score: 98.81654188368056
patch: delta = new double [ 1 ] ;
rank: 737
score: 98.71724700927734
patch: = new Double ( residuals ) ;
rank: 737
score: 98.64167785644531
patch: = new int [ residuals ] ;
rank: 737
score: 98.56150817871094
patch: return do CaMeL Optimize ( ) ;
rank: 737
score: 98.51323699951172
patch: q CaMeL Ty = ) ; )
rank: 737
score: 98.34061104910714
patch: [ length ] = residuals ;
rank: 737
score: 98.2928466796875
patch: q CaMeL Ty ) ; }
rank: 737
score: 98.1976318359375
patch: reset ( residuals ) ;
rank: 738
score: 98.80929226345486
patch: = new double [ cols ] ; }
rank: 738
score: 98.71556939019098
patch: 1 = q CaMeL Ty ( ) ;
rank: 738
score: 98.64161682128906
patch: = new float [ residuals ] ;
rank: 738
score: 98.55901227678571
patch: lm CaMeL Par = true ;
rank: 738
score: 98.2846923828125
patch: ( new ) ;
rank: 738
score: 98.19112141927083
patch: translate ( residuals ) ;
rank: 739
score: 98.80734592013889
patch: ( x CaMeL Norm == 0 ) ?
rank: 739
score: 98.71544731987848
patch: q CaMeL Ty 1 ( ) ; ;
rank: 739
score: 98.69892035590277
patch: = ( int [ ] ) point ;
rank: 739
score: 98.64128960503473
patch: q CaMeL Ty ( ) ; return ;
rank: 739
score: 98.28450230189732
patch: ( 0 , 1 ) ;
rank: 739
score: 98.18623046875
patch: interrupt ( ) ;
rank: 740
score: 98.80634223090277
patch: Value q CaMeL Ty ( residuals ) ;
rank: 740
score: 98.71453179253473
patch: = new double [ residuals ] ; }
rank: 740
score: 98.69873725043402
patch: data q CaMeL Ty ( residuals ) ;
rank: 740
score: 98.63913302951389
patch: q CaMeL Ty ( work 1 ) ;
rank: 740
score: 98.55622863769531
patch: delta = ( double ) 0 ;
rank: 740
score: 98.5059585571289
patch: else q CaMeL Ty = ) ;
rank: 740
score: 98.28038678850446
patch: ( new int residuals ) ;
rank: 741
score: 98.69732666015625
patch: Qt . lm CaMeL Par = 0 ;
rank: 741
score: 98.63748508029514
patch: q CaMeL Ty ( residuals double ) ;
rank: 741
score: 98.50253295898438
patch: q CaMeL Ty ( ) ; System
rank: 741
score: 98.31919642857143
patch: result = residuals ( ) ;
rank: 741
score: 98.17576090494792
patch: double max = 0 ;
rank: 742
score: 98.80374145507812
patch: double x CaMeL Norm = 0 ;
rank: 742
score: 98.63625081380208
patch: q CaMeL Ty in residuals ( ) ;
rank: 742
score: 98.55111694335938
patch: = new double [ 1 ] ;
rank: 742
score: 98.30827985491071
patch: q CaMeL Ty |= residuals ;
rank: 742
score: 98.27873011997768
patch: ( 0 , true ) ;
rank: 742
score: 98.17568969726562
patch: loop ( residuals ) ;
rank: 743
score: 98.79665120442708
patch: q CaMeL Ty = 0 . 0 ;
rank: 743
score: 98.71102566189236
patch: = q CaMeL Ty ( 1 ) ;
rank: 743
score: 98.63542344835069
patch: q CaMeL Ty += residuals . length ;
rank: 743
score: 98.55002267020089
patch: lm CaMeL Par = $NUMBER$ ;
rank: 743
score: 98.30180140904018
patch: q CaMeL Ty += true ;
rank: 743
score: 98.27710832868304
patch: [ 0 ] [ ) ;
rank: 743
score: 98.17297973632813
patch: cleanup ( ) ;
rank: 744
score: 98.71095784505208
patch: $NUMBER$ q CaMeL Ty ( residuals ) ;
rank: 744
score: 98.63444010416667
patch: if q CaMeL Ty ( residuals ) ;
rank: 744
score: 98.54864501953125
patch: delta = point [ 1 ] ;
rank: 744
score: 98.46929931640625
patch: q CaMeL Ty = residuals )
rank: 744
score: 98.28264508928571
patch: result = q CaMeL Ty ;
rank: 744
score: 98.27619280133929
patch: q CaMeL Ty ; residuals ;
rank: 744
score: 98.17288208007812
patch: m = current ;
rank: 745
score: 98.79370880126953
patch: delta = permutation [ 0 ] ;
rank: 745
score: 98.71083577473958
patch: = q CaMeL Ty + residuals ) ;
rank: 745
score: 98.54586029052734
patch: function q CaMeL Ty ( ) ;
rank: 745
score: 98.28178187779018
patch: [ ) ] = residuals ;
rank: 745
score: 98.27509416852679
patch: [ 0 ] = false ;
rank: 745
score: 98.1703125
patch: flush ( ) ;
rank: 746
score: 98.70941162109375
patch: q CaMeL Ty ( ) * ) ;
rank: 746
score: 98.632080078125
patch: q CaMeL Ty += residuals $NUMBER$ ;
rank: 746
score: 98.54471588134766
patch: q CaMeL Ty ( break ) ;
rank: 746
score: 98.26820591517857
patch: ( residuals , this ) ;
rank: 746
score: 98.1632792154948
patch: int delta = 0 ;
rank: 747
score: 98.70751953125
patch: q CaMeL Ty *= residuals ;
rank: 747
score: 98.67629665798611
patch: = ( boolean [ ] ) point ;
rank: 747
score: 98.54139927455357
patch: = current [ 0 ] ;
rank: 747
score: 98.457275390625
patch: q CaMeL Ty = ) .
rank: 747
score: 98.26931326729911
patch: [ 0 ] = true ;
rank: 747
score: 98.15878295898438
patch: repaint ( ) ;
rank: 748
score: 98.70627848307292
patch: |= q CaMeL Ty ( residuals ) ;
rank: 748
score: 98.455078125
patch: ( residuals ) ; ) ;
rank: 748
score: 98.26531982421875
patch: q CaMeL Ty = new int
rank: 748
score: 98.25907679966518
patch: residuals = residuals ( ) ;
rank: 748
score: 98.1419189453125
patch: current = current ;
rank: 749
score: 98.78629557291667
patch: double max = permutation [ 0 ] ;
rank: 749
score: 98.76869032118056
patch: torial q CaMeL Ty ( residuals ) ;
rank: 749
score: 98.70097133091518
patch: = residuals ( ) ) ;
rank: 749
score: 98.67286512586806
patch: double [ ] work $NUMBER$ = null ;
rank: 749
score: 98.2552490234375
patch: ( residuals ) ; ;
rank: 749
score: 98.14158121744792
patch: if ( current ) {
rank: 750
score: 98.70075225830078
patch: q CaMeL Ty ++ ; ; ;
rank: 750
score: 98.62660047743056
patch: [ 0 ] = new double ) ;
rank: 750
score: 98.25160435267857
patch: q CaMeL Ty = exp ;
rank: 750
score: 98.24857003348214
patch: q CaMeL Ty ( ) ?
rank: 750
score: 98.14031982421875
patch: q CaMeL Ty ( )
rank: 751
score: 98.78459337022569
patch: = residuals * point [ 0 ] ;
rank: 751
score: 98.69915771484375
patch: = new residuals ( residuals ) ;
rank: 751
score: 98.62533569335938
patch: q CaMeL Ty . ( ) ;
rank: 751
score: 98.43906075613839
patch: q CaMeL Ty ( Math ;
rank: 751
score: 98.25156075613839
patch: ( residuals , true ) ;
rank: 751
score: 98.23789760044643
patch: n = q CaMeL Ty ;
rank: 751
score: 98.13517252604167
patch: AOM ( residuals ) ;
rank: 752
score: 98.66981506347656
patch: = 0 ;
rank: 752
score: 98.52899932861328
patch: = jac CaMeL Norm ( ) ;
rank: 752
score: 98.13412475585938
patch: repaint ( residuals ) ;
rank: 753
score: 98.77969021267361
patch: double delta = diag [ 0 ] ;
rank: 753
score: 98.69002532958984
patch: = new double [ $NUMBER$ ] ;
rank: 753
score: 98.66870880126953
patch: q CaMeL Ty ( cols ) ;
rank: 753
score: 98.52730560302734
patch: = current . residuals ( ) ;
rank: 753
score: 98.25115094866071
patch: ( this , null ) ;
rank: 753
score: 98.12435913085938
patch: if ( qr CaMeL Decomposition
rank: 754
score: 98.62068684895833
patch: q CaMeL Ty ( residuals in ) ;
rank: 754
score: 98.52703094482422
patch: delta ( 0 , 0 ) ;
rank: 754
score: 98.39881243024554
patch: q CaMeL Ty = start .
rank: 754
score: 98.25088936941964
patch: ( 0 , false ) ;
rank: 754
score: 98.23113141741071
patch: n = residuals ( ) ;
rank: 754
score: 98.1172587076823
patch: xform ( residuals ) ;
rank: 755
score: 98.6881332397461
patch: q CaMeL Ty |= residuals ) ;
rank: 755
score: 98.52677154541016
patch: = do CaMeL Optimize ( ) ;
rank: 755
score: 98.39855085100446
patch: q CaMeL Ty = list ;
rank: 755
score: 98.2453369140625
patch: ( $STRING$ ) ;
rank: 755
score: 98.11695353190105
patch: synchronized ( 0 ) {
rank: 756
score: 98.68295288085938
patch: += q CaMeL Ty ( ) ;
rank: 756
score: 98.66355895996094
patch: double q CaMeL Ty = 0 ;
rank: 756
score: 98.52262878417969
patch: delta = point [ permutation ] ;
rank: 756
score: 98.39399065290179
patch: q CaMeL Ty = ) )
rank: 756
score: 98.24527413504464
patch: q CaMeL Ty += $NUMBER$ ;
rank: 756
score: 98.22715541294643
patch: q CaMeL Ty += false ;
rank: 756
score: 98.11313883463542
patch: if ( previous ) {
rank: 757
score: 98.68203735351562
patch: q CaMeL Ty ( ) * ;
rank: 757
score: 98.61888122558594
patch: = new Object [ residuals ] ;
rank: 757
score: 98.52216339111328
patch: jacobian q CaMeL Ty ( ) ;
rank: 757
score: 98.24409702845982
patch: ( new int [ ] ;
rank: 757
score: 98.22508021763393
patch: residuals = q CaMeL Ty ;
rank: 757
score: 98.11265055338542
patch: * ( residuals ) ;
rank: 758
score: 98.68087768554688
patch: q CaMeL Ty -= residuals ; ;
rank: 758
score: 98.38277762276786
patch: q CaMeL Ty = Math ;
rank: 758
score: 98.10804239908855
patch: while ( true ) ;
rank: 759
score: 98.51933288574219
patch: = new int [ rows ] ;
rank: 759
score: 98.24062674386161
patch: ( $NUMBER$ , 0 ) ;
rank: 759
score: 98.20752825055804
patch: [ value ] = residuals ;
rank: 759
score: 98.102294921875
patch: cleanup ( residuals ) ;
rank: 760
score: 98.63883972167969
patch: Value [ 0 ] = current ;
rank: 760
score: 98.5172119140625
patch: delta = diag CaMeL R ;
rank: 760
score: 98.36579241071429
patch: q CaMeL Ty ) ) ;
rank: 760
score: 98.20308430989583
patch: layout ( residuals ) ;
rank: 760
score: 98.1018798828125
patch: i = current ;
rank: 761
score: 98.76732720269098
patch: q CaMeL Ty = first CaMeL Iteration ;
rank: 761
score: 98.65882873535156
patch: = residuals ( ) - 1 ;
rank: 761
score: 98.51511056082589
patch: lm CaMeL Par = null ;
rank: 761
score: 98.35450090680804
patch: q CaMeL Ty = max ;
rank: 761
score: 98.23858642578125
patch: q CaMeL Ty = in ;
rank: 761
score: 98.090478515625
patch: head = current ;
rank: 762
score: 98.65849304199219
patch: q CaMeL Ty *= residuals ; ;
rank: 762
score: 98.63491821289062
patch: = new boolean [ cols ] ;
rank: 762
score: 98.35376848493304
patch: q CaMeL Ty ; / /
rank: 762
score: 98.23850795200893
patch: q CaMeL Ty = this .
rank: 762
score: 98.0901387532552
patch: if ( ! ) {
rank: 763
score: 98.65845489501953
patch: q CaMeL Ty ++ ( ) ;
rank: 763
score: 98.51351165771484
patch: orthoq CaMeL Ty ( ) ;
rank: 763
score: 98.34682791573661
patch: q CaMeL Ty = length ;
rank: 763
score: 98.23735961914062
patch: ( false ) ;
rank: 763
score: 98.19097028459821
patch: residuals = residuals . length ;
rank: 763
score: 98.08938598632812
patch: synchronized ( this ) {
rank: 764
score: 98.72044542100694
patch: position q CaMeL Ty ( residuals ) ;
rank: 764
score: 98.59968566894531
patch: q CaMeL Ty ( sum ) ;
rank: 764
score: 98.51187133789062
patch: delta = ( int ) current ;
rank: 764
score: 98.23686000279018
patch: ( residuals , $NUMBER$ ) ;
rank: 764
score: 98.189697265625
patch: q CaMeL Ty = residuals (
rank: 764
score: 98.07962646484376
patch: loop = 0 ;
rank: 765
score: 98.71729871961806
patch: = qr CaMeL Decomposition ( residuals ) ;
rank: 765
score: 98.62958526611328
patch: break ( x CaMeL Norm ) ;
rank: 765
score: 98.29581996372768
patch: q CaMeL Ty = residuals q
rank: 765
score: 98.07333374023438
patch: if ( true ) ;
rank: 766
score: 98.76023356119792
patch: double max = diag [ 0 ] ;
rank: 766
score: 98.6291732788086
patch: append ( x CaMeL Norm ) ;
rank: 766
score: 98.5850830078125
patch: q CaMeL Ty ( chars ) ;
rank: 766
score: 98.5074462890625
patch: x CaMeL Norm = current ;
rank: 766
score: 98.29195731026786
patch: q CaMeL Ty = residuals residuals
rank: 766
score: 98.23029436383929
patch: q CaMeL Ty = value ;
rank: 766
score: 98.15970284598214
patch: residuals = this . residuals ;
rank: 766
score: 98.07147216796875
patch: float max = 0 ;
rank: 767
score: 98.645263671875
patch: . residuals ( residuals ) ;
rank: 767
score: 98.50699288504464
patch: lm CaMeL Par = 1 ;
rank: 767
score: 98.22767857142857
patch: ( residuals , 0 ) ;
rank: 767
score: 98.1548360188802
patch: ( residuals ) ; }
rank: 767
score: 98.07126871744792
patch: 32 ( residuals ) ;
rank: 768
score: 98.75483049665179
patch: delta = first CaMeL Iteration ;
rank: 768
score: 98.70079210069444
patch: Point q CaMeL Ty ( residuals ) ;
rank: 768
score: 98.5797348022461
patch: [ 0 ] = residuals 1 ;
rank: 768
score: 98.50653076171875
patch: lm CaMeL Par [ residuals ) ;
rank: 768
score: 98.27609688895089
patch: q CaMeL Ty ; ; ;
rank: 768
score: 98.22757393973214
patch: ( residuals , new ) ;
rank: 768
score: 98.15433959960937
patch: residuals = residuals ;
rank: 768
score: 98.0592041015625
patch: if ( residuals ) {
rank: 769
score: 98.75401475694444
patch: loop = new double [ cols ] ;
rank: 769
score: 98.63794708251953
patch: - q CaMeL Ty ( ) ;
rank: 769
score: 98.61660766601562
patch: lm CaMeL Par ( false ) ;
rank: 769
score: 98.50550188337054
patch: = point [ cols ] ;
rank: 769
score: 98.27418736049107
patch: else q CaMeL Ty ) ;
rank: 769
score: 98.22164481026786
patch: q CaMeL Ty >= 0 ;
rank: 769
score: 98.05763753255208
patch: q CaMeL Ty $NUMBER$ ;
rank: 770
score: 98.61592102050781
patch: assert ( first CaMeL Iteration ) ;
rank: 770
score: 98.50233459472656
patch: update CaMeL Jacobian ( 1 ) ;
rank: 770
score: 98.21780831473214
patch: q CaMeL Ty = delta ;
rank: 770
score: 98.14828055245536
patch: [ residuals ] = null ;
rank: 770
score: 98.05367279052734
patch: ( ) ;
rank: 771
score: 98.2677001953125
patch: q CaMeL Ty = name .
rank: 771
score: 98.21402413504464
patch: q CaMeL Ty $NUMBER$ ) ;
rank: 771
score: 98.0465799967448
patch: characters ( residuals ) ;
rank: 772
score: 98.74912516276042
patch: q CaMeL Ty ( new int [ ]
rank: 772
score: 98.63160705566406
patch: q CaMeL Ty + residuals ) ;
rank: 772
score: 98.57151794433594
patch: q CaMeL Ty = residuals $NUMBER$ ;
rank: 772
score: 98.26336669921875
patch: q CaMeL Ty ( ; ;
rank: 772
score: 98.2138671875
patch: [ 0 ] = this ;
rank: 772
score: 98.04595947265625
patch: play ( residuals ) ;
rank: 773
score: 98.74334038628473
patch: delta = ( x CaMeL Norm == 0
rank: 773
score: 98.68960910373264
patch: = old CaMeL Res [ 0 ] ;
rank: 773
score: 98.48959350585938
patch: delta = 1 ;
rank: 773
score: 98.2626953125
patch: q CaMeL Ty = current .
rank: 773
score: 98.21365792410714
patch: q CaMeL Ty = out .
rank: 773
score: 98.12939453125
patch: n = residuals ) ;
rank: 773
score: 98.031005859375
patch: int residuals = 0 ;
rank: 774
score: 98.68378557477679
patch: lm CaMeL Par = ) ;
rank: 774
score: 98.62521362304688
patch: = q CaMeL Ty . get ;
rank: 774
score: 98.56800079345703
patch: q CaMeL Ty -= residuals 1 ;
rank: 774
score: 98.47993774414063
patch: delta = current ;
rank: 774
score: 98.21334402901786
patch: ( residuals , false ) ;
rank: 774
score: 98.12914167131696
patch: n = residuals . length ;
rank: 774
score: 98.030810546875
patch: result = current ;
rank: 775
score: 98.68292236328125
patch: = update CaMeL Jacobian ( residuals ) ;
rank: 775
score: 98.62468719482422
patch: q CaMeL Ty ++ residuals ++ ;
rank: 775
score: 98.21333530970982
patch: ( 0 . null ) ;
rank: 775
score: 98.03031412760417
patch: int 0 = 0 ;
rank: 776
score: 98.59818267822266
patch: lm CaMeL Par ( true ) ;
rank: 776
score: 98.56440952845982
patch: q CaMeL Ty += 1 ;
rank: 776
score: 98.11888631184895
patch: residuals = null ; }
rank: 776
score: 98.03030395507812
patch: / ( residuals ) ;
rank: 777
score: 98.59810093470982
patch: ( lm CaMeL Par ) ;
rank: 777
score: 98.46055385044643
patch: lm CaMeL Dir ( ) ;
rank: 777
score: 98.11876424153645
patch: n ( residuals ) ;
rank: 777
score: 98.02897338867187
patch: j = 0 ;
rank: 778
score: 98.73124864366319
patch: delta = q CaMeL Ty ( ) ;
rank: 778
score: 98.6182861328125
patch: q CaMeL Ty ++ ; }
rank: 778
score: 98.59805297851562
patch: / q CaMeL Ty ( ) ;
rank: 778
score: 98.45637730189732
patch: delta = jac CaMeL Norm ;
rank: 778
score: 98.20424979073661
patch: Ty residuals ( residuals ) ;
rank: 778
score: 98.18806966145833
patch: ( ) ; ) ;
rank: 778
score: 98.11318359375
patch: residuals = null ;
rank: 778
score: 98.02418212890625
patch: stop ( ) ;
rank: 779
score: 98.73013644748264
patch: [ 0 ] = x CaMeL Norm ;
rank: 779
score: 98.59635162353516
patch: = x CaMeL Norm = 0 ;
rank: 779
score: 98.54874420166016
patch: [ 0 ] = residuals $NUMBER$ ;
rank: 779
score: 98.45127650669643
patch: lm CaMeL Par = false ;
rank: 779
score: 98.19955008370536
patch: ( this , this ) ;
rank: 779
score: 98.1541748046875
patch: } ( residuals ) ;
rank: 779
score: 98.11155192057292
patch: residuals = residuals ) ;
rank: 779
score: 98.02041625976562
patch: head = 0 ;
rank: 780
score: 98.61798095703125
patch: = q CaMeL Ty ) ; }
rank: 780
score: 98.45001220703125
patch: delta = $NUMBER$ . 0 ;
rank: 780
score: 98.19851248604911
patch: } int ( residuals ) ;
rank: 780
score: 98.1470438639323
patch: q CaMeL Ty ; {
rank: 780
score: 98.0161844889323
patch: int cost = 0 ;
rank: 781
score: 98.61461639404297
patch: = residuals residuals ( residuals ) ;
rank: 781
score: 98.5914077758789
patch: / qr CaMeL Decomposition ( ) ;
rank: 781
score: 98.44606236049107
patch: x CaMeL Norm += 0 ;
rank: 781
score: 98.19589233398438
patch: ( 0 . ) ;
rank: 781
score: 98.04937744140625
patch: n = residuals ;
rank: 781
score: 98.01584879557292
patch: terminate ( residuals ) ;
rank: 782
score: 98.71711730957031
patch: delta delta = x CaMeL Norm ;
rank: 782
score: 98.61326599121094
patch: q CaMeL Ty 0 ( ) ;
rank: 782
score: 98.59111022949219
patch: diag q CaMeL Ty ( ) ;
rank: 782
score: 98.53606414794922
patch: q CaMeL Ty ( gc ) ;
rank: 782
score: 98.44478934151786
patch: bound = 0 . 0 ;
rank: 782
score: 98.19301350911458
patch: q CaMeL Ty ; }
rank: 782
score: 98.04612223307292
patch: p ( residuals ) ;
rank: 782
score: 98.01566569010417
patch: int max = current ;
rank: 783
score: 98.6107406616211
patch: = q CaMeL Ty . ; ;
rank: 783
score: 98.53065490722656
patch: q CaMeL Ty ( value ) ;
rank: 783
score: 98.4427490234375
patch: = 1 . 0 ;
rank: 783
score: 98.19221714564732
patch: q CaMeL Ty [ this ;
rank: 783
score: 98.11180623372395
patch: ( residuals ) ) ;
rank: 783
score: 98.01107788085938
patch: if ( diag ) {
rank: 784
score: 98.70609283447266
patch: diag ( x CaMeL Norm ) ;
rank: 784
score: 98.42228480747768
patch: = ( int ) 0 ;
rank: 784
score: 98.18924386160714
patch: ( $NUMBER$ + residuals ) ;
rank: 784
score: 98.03013102213542
patch: residuals = residuals ; }
rank: 785
score: 98.60774230957031
patch: q CaMeL Ty ] = residuals ;
rank: 785
score: 98.58868408203125
patch: int q CaMeL Ty = 0 ;
rank: 785
score: 98.52698516845703
patch: q CaMeL Ty -= residuals $NUMBER$ ;
rank: 785
score: 98.18919881184895
patch: ( new 1 ) ;
rank: 785
score: 98.08852132161458
patch: q CaMeL Ty . ;
rank: 785
score: 98.02156372070313
patch: ( true ) ;
rank: 785
score: 98.0103047688802
patch: es ( residuals ) ;
rank: 786
score: 98.70062255859375
patch: delta = x CaMeL Norm ; }
rank: 786
score: 98.6047134399414
patch: q CaMeL Ty 1 = residuals ;
rank: 786
score: 98.41295514787946
patch: x CaMeL Norm = $NUMBER$ ;
rank: 786
score: 98.1832275390625
patch: ( null ) ;
rank: 786
score: 98.00863647460938
patch: gs ( residuals ) ;
rank: 787
score: 98.40797932942708
patch: = jac CaMeL Norm ;
rank: 787
score: 98.18184116908482
patch: q CaMeL Ty = float ;
rank: 787
score: 98.01336669921875
patch: ( ) = residuals ;
rank: 787
score: 98.00171915690105
patch: ( ) + ) ;
rank: 788
score: 98.69673156738281
patch: = new String [ cols ] ;
rank: 788
score: 98.58252716064453
patch: double [ ] current = current ;
rank: 788
score: 98.40554373604911
patch: qr CaMeL Decomposition = 0 ;
rank: 788
score: 98.18166678292411
patch: q CaMeL Ty [ 0 ;
rank: 788
score: 98.00506591796875
patch: q CaMeL Ty ( {
rank: 788
score: 98.00337727864583
patch: q CaMeL Ty [ ;
rank: 788
score: 97.99742635091145
patch: q CaMeL Ty ; throws
rank: 789
score: 98.59981536865234
patch: q CaMeL Ty ++ ) ; ;
rank: 789
score: 98.58122253417969
patch: ! q CaMeL Ty ( ) ;
rank: 789
score: 98.39916120256696
patch: bound = x CaMeL Norm ;
rank: 789
score: 98.17985316685268
patch: ( $NUMBER$ , null ) ;
rank: 789
score: 98.00288899739583
patch: stmt ( residuals ) ;
rank: 789
score: 97.99903361002605
patch: result = residuals ) ;
rank: 790
score: 98.5982894897461
patch: q CaMeL Ty . set ) ;
rank: 790
score: 98.58051300048828
patch: double [ ] diag = current ;
rank: 790
score: 98.52022552490234
patch: q CaMeL Ty ++ ; break ;
rank: 790
score: 98.00057983398438
patch: p = 0 ;
rank: 790
score: 97.9989522298177
patch: n = residuals ; }
rank: 790
score: 97.96016438802083
patch: else q CaMeL Ty ;
rank: 791
score: 98.59781646728516
patch: : q CaMeL Ty ( ) ;
rank: 791
score: 98.389892578125
patch: delta = 0 . 1 ;
rank: 791
score: 98.17471749441964
patch: CaMeL arraycopy ( residuals ) ;
rank: 791
score: 97.99995930989583
patch: 8 ( residuals ) ;
rank: 791
score: 97.96715291341145
patch: result = null ; }
rank: 791
score: 97.95930989583333
patch: q CaMeL Ty residuals =
rank: 792
score: 98.59272766113281
patch: = residuals ( residuals ) ) ;
rank: 792
score: 98.17462158203125
patch: value = q CaMeL Ty ;
rank: 792
score: 97.99857584635417
patch: ROWS ( residuals ) ;
rank: 792
score: 97.96650390625
patch: residuals ( ) ;
rank: 792
score: 97.9490458170573
patch: ( ) = ) ;
rank: 793
score: 98.68373107910156
patch: delta [ 0 ] = current ;
rank: 793
score: 98.59103393554688
patch: = q CaMeL Ty + residuals ;
rank: 793
score: 98.5736083984375
patch: Value ( x CaMeL Norm ) ;
rank: 793
score: 98.51659393310547
patch: q CaMeL Ty *= residuals $NUMBER$ ;
rank: 793
score: 98.38877650669643
patch: = 0 . 0 ; }
rank: 793
score: 98.17354910714286
patch: N = q CaMeL Ty ;
rank: 793
score: 97.99671427408855
patch: tables ( residuals ) ;
rank: 793
score: 97.95504760742188
patch: ( 0 , ) ;
rank: 794
score: 98.58807373046875
patch: q CaMeL Ty ++ ; ) ;
rank: 794
score: 98.51608276367188
patch: q CaMeL Ty ( ] ) ;
rank: 794
score: 98.38432965959821
patch: = current [ cols ] ;
rank: 794
score: 98.17323521205357
patch: q CaMeL Ty += null ;
rank: 794
score: 97.99502563476562
patch: m $NUMBER$ ( ) ;
rank: 794
score: 97.95204671223958
patch: start ( residuals ) ;
rank: 794
score: 97.94388834635417
patch: q CaMeL Ty ) throws
rank: 795
score: 98.68097686767578
patch: double ( x CaMeL Norm ) ;
rank: 795
score: 98.5909423828125
patch: ; update CaMeL Jacobian ( ) ;
rank: 795
score: 98.57005310058594
patch: it lm CaMeL Par = 0 ;
rank: 795
score: 98.38387625558036
patch: lm CaMeL Par = this ;
rank: 795
score: 98.1580301920573
patch: q CaMeL Ty ; else
rank: 795
score: 97.99402872721355
patch: points ( residuals ) ;
rank: 795
score: 97.95127360026042
patch: b ( residuals ) ;
rank: 795
score: 97.9222412109375
patch: ( ) + 0 ;
rank: 796
score: 98.68034362792969
patch: } x CaMeL Norm = 0 ;
rank: 796
score: 98.58523559570312
patch: q CaMeL Ty ( ) , ;
rank: 796
score: 98.5665054321289
patch: its q CaMeL Ty ( ) ;
rank: 796
score: 98.50723266601562
patch: q CaMeL Ty in ( ) ;
rank: 796
score: 98.37715657552083
patch: delta ( residuals ) ;
rank: 796
score: 97.94447835286458
patch: ( ) = null ;
rank: 796
score: 97.91400146484375
patch: q CaMeL Ty = }
rank: 797
score: 98.67745971679688
patch: = new long [ cols ] ;
rank: 797
score: 98.1480712890625
patch: [ 0 ] ++ ;
rank: 797
score: 97.99376220703125
patch: consume ( ) ;
rank: 797
score: 97.93984375
patch: layout ( ) ;
rank: 797
score: 97.90765380859375
patch: q CaMeL Ty = residuals
rank: 798
score: 98.67619323730469
patch: delta = x CaMeL Norm ) ;
rank: 798
score: 98.57595825195312
patch: = residuals ( residuals residuals ) ;
rank: 798
score: 98.56365966796875
patch: double [ ] previous = current ;
rank: 798
score: 98.14075724283855
patch: i ( residuals ) ;
rank: 798
score: 97.99039713541667
patch: synchronized ( current ) {
rank: 799
score: 98.56205749511719
patch: boolean first CaMeL Iteration = null ;
rank: 799
score: 98.49798583984375
patch: q CaMeL Ty ( float ) ;
rank: 799
score: 98.12886555989583
patch: residuals ( false ) ;
rank: 799
score: 97.99038696289062
patch: stop ( residuals ) ;
rank: 799
score: 97.9329833984375
patch: result ( residuals ) ;
rank: 799
score: 97.90014038085937
patch: q CaMeL Ty .
rank: 800
score: 98.55844116210938
patch: pj q CaMeL Ty ( ) ;
rank: 800
score: 98.36777169363839
patch: = point [ 0 ] ;
rank: 800
score: 98.12253824869792
patch: Ty ( false ) ;
rank: 800
score: 97.9884745279948
patch: int point = 0 ;
rank: 800
score: 97.92601928710937
patch: residuals = true ;
rank: 800
score: 97.8970438639323
patch: q CaMeL Ty ; )
rank: 801
score: 98.66498565673828
patch: double delta = 1 . 0 ;
rank: 801
score: 98.5701904296875
patch: $NUMBER$ ( residuals ) ;
rank: 801
score: 98.49703979492188
patch: q CaMeL Ty ( format ) ;
rank: 801
score: 97.9873758951823
patch: synchronized ( residuals ) {
rank: 801
score: 97.92561848958333
patch: ( residuals residuals ) ;
rank: 802
score: 98.6601333618164
patch: delta = residuals [ 1 ] ;
rank: 802
score: 98.55235290527344
patch: list q CaMeL Ty ( ) ;
rank: 802
score: 98.35956682477679
patch: x CaMeL Norm = $STRING$ ;
rank: 802
score: 98.11112467447917
patch: * * * ) ;
rank: 802
score: 97.9868896484375
patch: dispose ( ) ;
rank: 802
score: 97.92283121744792
patch: n = null ; }
rank: 802
score: 97.8867431640625
patch: Ty ( ) ;
rank: 803
score: 98.65781656901042
patch: diag ( residuals ) ;
rank: 803
score: 98.56997680664062
patch: = q CaMeL Ty . clone ;
rank: 803
score: 98.49574279785156
patch: = new Double [ residuals ] ;
rank: 803
score: 98.35813685825893
patch: Norm = 0 . 0 ;
rank: 803
score: 97.98592122395833
patch: println ( $STRING$ ) ;
rank: 803
score: 97.92113240559895
patch: CaMeL ] = residuals ;
rank: 804
score: 98.65628814697266
patch: q CaMeL Ty 1 = current ;
rank: 804
score: 98.54778289794922
patch: return x CaMeL Norm = 0 ;
rank: 804
score: 98.4915542602539
patch: = ( q CaMeL Ty ) ;
rank: 804
score: 97.98558553059895
patch: connect ( residuals ) ;
rank: 804
score: 97.88616943359375
patch: residuals ( 0 ) ;
rank: 805
score: 98.55884660993304
patch: q CaMeL Ty ( 0 ;
rank: 805
score: 98.54757690429688
patch: sqrt ( x CaMeL Norm ) ;
rank: 805
score: 98.49081420898438
patch: = new double ( residuals ) ;
rank: 805
score: 98.10337320963542
patch: end ( residuals ) ;
rank: 805
score: 97.98533935546875
patch: revalidate ( ) ;
rank: 805
score: 97.8973388671875
patch: f ( residuals ) ;
rank: 806
score: 98.65289306640625
patch: q CaMeL Ty = current ; }
rank: 806
score: 98.55814361572266
patch: 0 lm CaMeL Par = 0 ;
rank: 806
score: 98.34967912946429
patch: = current [ permutation ] ;
rank: 806
score: 98.10221354166667
patch: value ( residuals ) ;
rank: 806
score: 97.98129272460938
patch: Object current = current ;
rank: 806
score: 97.89404296875
patch: * * * * /
rank: 806
score: 97.8656717936198
patch: } ) ; ) ;
rank: 807
score: 98.65242004394531
patch: double diag = 1 . 0 ;
rank: 807
score: 98.56732177734375
patch: = q CaMeL Ty ( residuals ;
rank: 807
score: 98.53152029854911
patch: diag CaMeL R ( ) ;
rank: 807
score: 98.4892807006836
patch: q CaMeL Ty *= residuals 1 ;
rank: 807
score: 98.34930419921875
patch: delta ( 0 ) ;
rank: 807
score: 98.098876953125
patch: ( $NUMBER$ ) ;
rank: 807
score: 97.980126953125
patch: m = null ;
rank: 807
score: 97.89370727539062
patch: ( ) = true ;
rank: 807
score: 97.85926310221355
patch: j = residuals ) ;
rank: 808
score: 98.65159606933594
patch: q CaMeL Ty = work $NUMBER$ ;
rank: 808
score: 98.56714630126953
patch: q CaMeL Ty ++ ; * /
rank: 808
score: 98.48770904541016
patch: q CaMeL Ty ( min ) ;
rank: 808
score: 98.09739176432292
patch: catch ( $STRING$ ) {
rank: 808
score: 97.97745768229167
patch: head ( residuals ) ;
rank: 808
score: 97.89370727539062
patch: ( ) = false ;
rank: 809
score: 98.64904022216797
patch: delta = diag [ 1 ] ;
rank: 809
score: 98.51992361886161
patch: ( jac CaMeL Norm ) ;
rank: 809
score: 98.4866714477539
patch: q CaMeL Ty * ( ) ;
rank: 809
score: 98.34142049153645
patch: = diag CaMeL R ;
rank: 809
score: 97.88636271158855
patch: ( true , ) ;
rank: 809
score: 97.78710327148437
patch: } ( ) ;
rank: 810
score: 98.56179809570312
patch: q CaMeL Ty ( residuals residuals ;
rank: 810
score: 98.5167236328125
patch: first CaMeL Iteration = ) ;
rank: 810
score: 98.0887451171875
patch: ( residuals $NUMBER$ ) ;
rank: 810
score: 97.96909586588542
patch: double delta = 0 ;
rank: 810
score: 97.88313802083333
patch: m ( residuals ) ;
rank: 810
score: 97.77913818359374
patch: ( 1 ) ;
rank: 811
score: 98.56106567382812
patch: = residuals ( ) / $NUMBER$ ;
rank: 811
score: 98.4806137084961
patch: q CaMeL Ty ( continue ) ;
rank: 811
score: 98.3260498046875
patch: lm CaMeL Par = $STRING$ ;
rank: 811
score: 98.08824666341145
patch: residuals ( this ) ;
rank: 811
score: 97.96903686523437
patch: current = 0 ;
rank: 811
score: 97.88184204101563
patch: n += residuals ;
rank: 811
score: 97.76184692382813
patch: ( ) ) ;
rank: 812
score: 98.56083679199219
patch: -- q CaMeL Ty ( ) ;
rank: 812
score: 98.50888497488839
patch: first CaMeL Iteration ( ) ;
rank: 812
score: 98.07654825846355
patch: Ty ( this ) ;
rank: 812
score: 97.96723022460938
patch: r = 0 ;
rank: 812
score: 97.88077799479167
patch: ( $NUMBER$ , ) ;
rank: 813
score: 98.06778971354167
patch: N ( residuals ) ;
rank: 813
score: 97.96600341796875
patch: else if ( true )
rank: 813
score: 97.87473551432292
patch: b = null ; }
rank: 813
score: 97.75994873046875
patch: ( ) ; ;
rank: 814
score: 98.55918884277344
patch: $NUMBER$ ( residuals , residuals ) ;
rank: 814
score: 98.54228210449219
patch: torial q CaMeL Ty ( ) ;
rank: 814
score: 98.45592389787946
patch: q CaMeL Ty *= 0 ;
rank: 814
score: 98.04970296223958
patch: residuals ( null ) ;
rank: 814
score: 97.96376953125
patch: tmp = current ;
rank: 814
score: 97.87123616536458
patch: tmp ( residuals ) ;
rank: 814
score: 97.734765625
patch: j = ) ;
rank: 815
score: 98.53799002511161
patch: q CaMeL Ty -- ; ;
rank: 815
score: 98.04833984375
patch: ( residuals 1 ) ;
rank: 815
score: 97.9399169921875
patch: i = null ;
rank: 815
score: 97.8665059407552
patch: p = residuals ) ;
rank: 815
score: 97.68193969726562
patch: j = residuals ;
rank: 816
score: 98.53632463727679
patch: = residuals ( ) ; ;
rank: 816
score: 98.31427873883929
patch: delta = current * 0 ;
rank: 816
score: 98.04659016927083
patch: ( - $NUMBER$ ) ;
rank: 816
score: 97.93212890625
patch: j = current ;
rank: 817
score: 98.5322265625
patch: . set ( residuals ) ;
rank: 817
score: 98.45908900669643
patch: lm CaMeL Par = point ;
rank: 817
score: 98.31183733258929
patch: bound = 1 . 0 ;
rank: 817
score: 98.04525756835938
patch: } q CaMeL Ty ;
rank: 817
score: 97.92738037109375
patch: n = 0 ;
rank: 817
score: 97.8594970703125
patch: q CaMeL Ty ( residuals
rank: 818
score: 98.6318130493164
patch: = new short [ cols ] ;
rank: 818
score: 98.53076171875
patch: = q CaMeL Ty ( ;
rank: 818
score: 98.43582589285714
patch: q CaMeL Ty -= 1 ;
rank: 818
score: 98.30967494419643
patch: q CaMeL Ty ( this ;
rank: 818
score: 98.04294840494792
patch: Ty ( $NUMBER$ ) ;
rank: 818
score: 97.92581176757812
patch: connect ( ) ;
rank: 818
score: 97.85922241210938
patch: result = null ;
rank: 818
score: 97.6112548828125
patch: i ( ) ;
rank: 819
score: 98.63029479980469
patch: q CaMeL Ty = 0 ; }
rank: 819
score: 98.30756487165179
patch: x CaMeL Norm += 1 ;
rank: 819
score: 98.04278564453125
patch: Ty ( true ) ;
rank: 819
score: 97.92515258789062
patch: loop ( ) ;
rank: 819
score: 97.8583272298177
patch: sort ( residuals ) ;
rank: 819
score: 97.59988403320312
patch: ( ) .
rank: 820
score: 98.44563511439732
patch: ( residuals , objective ) ;
rank: 820
score: 98.3061014811198
patch: delta = 0 ; }
rank: 820
score: 98.04184977213542
patch: residuals ( true ) ;
rank: 820
score: 97.92005004882813
patch: finally ( ) ;
rank: 820
score: 97.85697428385417
patch: residuals = true ; }
rank: 820
score: 97.59352416992188
patch: / * ) ;
rank: 821
score: 98.52421569824219
patch: ( residuals ) ; / * /
rank: 821
score: 98.30599975585938
patch: jacobian ( residuals ) ;
rank: 821
score: 98.03989664713542
patch: CaMeL Number ( ) ;
rank: 821
score: 97.9142822265625
patch: logout ( ) ;
rank: 821
score: 97.85425821940105
patch: skip ( residuals ) ;
rank: 822
score: 98.49278913225446
patch: $NUMBER$ . residuals ( ) ;
rank: 822
score: 98.4095458984375
patch: [ 0 ] = 1 ;
rank: 822
score: 98.30431256975446
patch: first CaMeL Iteration = 1 ;
rank: 822
score: 97.90579833984376
patch: g = 0 ;
rank: 822
score: 97.84616088867188
patch: result = residuals ;
rank: 822
score: 97.5571533203125
patch: q CaMeL Ty =
rank: 823
score: 98.61878967285156
patch: println ( x CaMeL Norm ) ;
rank: 823
score: 98.30150495256696
patch: = current [ 1 ] ;
rank: 823
score: 97.887646484375
patch: close ( ) ;
rank: 823
score: 97.84562174479167
patch: b = residuals ) ;
rank: 824
score: 98.48493303571429
patch: q CaMeL Ty . ) ;
rank: 824
score: 98.42677525111607
patch: q CaMeL Ty ( point ,
rank: 824
score: 98.29335239955357
patch: first CaMeL Iteration = $NUMBER$ ;
rank: 824
score: 98.0375264485677
patch: ( 0 ) ; ;
rank: 824
score: 97.87815551757812
patch: n = current ;
rank: 824
score: 97.83788045247395
patch: $NUMBER$ = residuals ) ;
rank: 824
score: 97.5390625
patch: j = $NUMBER$ ;
rank: 825
score: 98.4210205078125
patch: = current ;
rank: 825
score: 98.03054809570312
patch: Ty ( $STRING$ ) ;
rank: 825
score: 97.87698364257812
patch: p = current ;
rank: 825
score: 97.83578491210938
patch: n += residuals ) ;
rank: 825
score: 97.53805541992188
patch: } ) ;
rank: 826
score: 98.51971435546875
patch: lm CaMeL Dir = this ;
rank: 826
score: 98.28816441127232
patch: delta = 1 . 1 ;
rank: 826
score: 98.02144368489583
patch: ( new int ) ;
rank: 826
score: 97.874951171875
patch: end = 0 ;
rank: 826
score: 97.83413696289062
patch: * * * * ;
rank: 826
score: 97.52861328125
patch: ( ) ; q
rank: 827
score: 98.41663614908855
patch: torial ( residuals ) ;
rank: 827
score: 98.01107788085938
patch: d ( residuals ) ;
rank: 827
score: 97.52296142578125
patch: j ( ) ;
rank: 828
score: 98.60614013671875
patch: double delta = x CaMeL Norm ;
rank: 828
score: 98.499267578125
patch: lm CaMeL Dir = ) ;
rank: 828
score: 98.46436418805804
patch: . q CaMeL Ty ++ ;
rank: 828
score: 98.24680582682292
patch: vector ( residuals ) ;
rank: 828
score: 98.00714111328125
patch: residuals ( $NUMBER$ ) ;
rank: 828
score: 97.86834716796875
patch: VM = 0 ;
rank: 828
score: 97.82314046223958
patch: residuals = new ) ;
rank: 829
score: 98.45875767299107
patch: = q CaMeL Ty [ ;
rank: 829
score: 98.40808977399554
patch: lm CaMeL Par = current .
rank: 829
score: 98.24369303385417
patch: dk ( residuals ) ;
rank: 829
score: 98.00630696614583
patch: Ty ( null ) ;
rank: 829
score: 97.86685791015626
patch: retval = 0 ;
rank: 829
score: 97.81900024414062
patch: s ( residuals ) ;
rank: 829
score: 97.51500701904297
patch: / ) ;
rank: 830
score: 98.46910749162946
patch: lm CaMeL Dir = null ;
rank: 830
score: 98.45719401041667
patch: 1 ( residuals ) ;
rank: 830
score: 98.37827845982143
patch: [ 0 ] = start ;
rank: 830
score: 98.00173950195312
patch: ( int 1 ) ;
rank: 830
score: 97.8612548828125
patch: quit ( ) ;
rank: 830
score: 97.50504150390626
patch: else ; ) ;
rank: 831
score: 98.60362025669643
patch: = residuals [ 0 ] ;
rank: 831
score: 98.45531354631696
patch: = q CaMeL Ty ; }
rank: 831
score: 98.2366943359375
patch: bound = 0 ;
rank: 831
score: 97.99746704101562
patch: ( * residuals ) ;
rank: 831
score: 97.86123046875
patch: play ( ) ;
rank: 831
score: 97.8145243326823
patch: result = residuals ; }
rank: 831
score: 97.49014892578126
patch: ( ) ; }
rank: 832
score: 98.45268031529018
patch: = q CaMeL Ty residuals ;
rank: 832
score: 98.23185221354167
patch: = $NUMBER$ . 0 ;
rank: 832
score: 97.99566650390625
patch: Ty ( 0 ) ;
rank: 832
score: 97.859326171875
patch: start ( ) ;
rank: 832
score: 97.81324259440105
patch: ( [ ] ) ;
rank: 832
score: 97.48668212890625
patch: / ) ) ;
rank: 833
score: 98.44678606305804
patch: - residuals ( residuals ) ;
rank: 833
score: 97.99171956380208
patch: N catch ( ) {
rank: 833
score: 97.85521240234375
patch: current = null ;
rank: 833
score: 97.81117757161458
patch: return ( residuals ) ;
rank: 833
score: 97.47520751953125
patch: iterator ( ) .
rank: 834
score: 98.21570841471355
patch: = x CaMeL Norm ;
rank: 834
score: 97.9869384765625
patch: ( residuals , ) ;
rank: 834
score: 97.85289306640625
patch: kill ( ) ;
rank: 834
score: 97.468359375
patch: ( ) . ;
rank: 835
score: 98.43402971540179
patch: lm CaMeL Dir = false ;
rank: 835
score: 98.42701939174107
patch: $NUMBER$ . ( residuals ) ;
rank: 835
score: 98.33413260323661
patch: q CaMeL Ty ( residuals }
rank: 835
score: 98.20806274414062
patch: jacobian ( ) ;
rank: 835
score: 97.98351033528645
patch: q CaMeL Ty ( (
rank: 835
score: 97.85242309570313
patch: retval = current ;
rank: 835
score: 97.80926513671875
patch: double length = residuals ;
rank: 835
score: 97.46655883789063
patch: / ( ) ;
rank: 836
score: 98.5635477701823
patch: delta delta = 0 ;
rank: 836
score: 98.42613002232143
patch: = q CaMeL Ty ; )
rank: 836
score: 98.33275495256696
patch: q CaMeL Ty *= ) ;
rank: 836
score: 98.20096842447917
patch: delta ( point ) ;
rank: 836
score: 97.850048828125
patch: r = current ;
rank: 836
score: 97.80678304036458
patch: o ( residuals ) ;
rank: 836
score: 97.46336669921875
patch: / ; ) ;
rank: 837
score: 98.43185860770089
patch: lm CaMeL Dir = true ;
rank: 837
score: 98.42054966517857
patch: 1 . residuals ( ) ;
rank: 837
score: 98.32332938058036
patch: q CaMeL Ty *= 1 ;
rank: 837
score: 97.84923095703125
patch: terminate ( ) ;
rank: 837
score: 97.80374145507812
patch: * residuals = residuals ;
rank: 837
score: 97.4615234375
patch: / ) ; ;
rank: 838
score: 98.54459926060268
patch: lm CaMeL Par = permutation ;
rank: 838
score: 98.18375651041667
patch: = 0 . 1 ;
rank: 838
score: 97.97714233398438
patch: residuals ( $STRING$ ) ;
rank: 838
score: 97.8455322265625
patch: invalidate ( ) ;
rank: 838
score: 97.80267333984375
patch: tmp = residuals ) ;
rank: 838
score: 97.4523681640625
patch: i = ) ;
rank: 839
score: 97.9768575032552
patch: ( new ) ; ;
rank: 839
score: 97.84373779296875
patch: println ( ) ;
rank: 839
score: 97.43287963867188
patch: / ) * ;
rank: 840
score: 98.4197285970052
patch: = lm CaMeL Dir ;
rank: 840
score: 98.41092354910714
patch: = q CaMeL Ty ++ ;
rank: 840
score: 98.17642211914062
patch: delta ( permutation ) ;
rank: 840
score: 97.84133911132812
patch: state = 0 ;
rank: 840
score: 97.79903564453124
patch: residuals = false ;
rank: 841
score: 98.31200299944196
patch: q CaMeL Ty [ residuals ;
rank: 841
score: 98.1691182454427
patch: delta ( 1 ) ;
rank: 841
score: 97.97238159179688
patch: num ( residuals ) ;
rank: 841
score: 97.84087524414062
patch: reload ( ) ;
rank: 841
score: 97.79777018229167
patch: q CaMeL Ty ( }
rank: 842
score: 98.40842982700893
patch: += q CaMeL Ty ) ;
rank: 842
score: 98.30841936383929
patch: [ 1 ] = current ;
rank: 842
score: 98.16602579752605
patch: return 0 . 0 ;
rank: 842
score: 97.96751912434895
patch: Returns ( residuals ) ;
rank: 842
score: 97.8394287109375
patch: l = 0 ;
rank: 842
score: 97.79750569661458
patch: ( true ) ; }
rank: 842
score: 97.411767578125
patch: j = 1 ;
rank: 843
score: 98.40066092354911
patch: ( residuals . residuals ) ;
rank: 843
score: 98.31337890625
patch: torial ( ) ;
rank: 843
score: 98.30457414899554
patch: [ 0 ] = previous ;
rank: 843
score: 98.16117350260417
patch: res ( residuals ) ;
rank: 843
score: 97.96531168619792
patch: catch ( $STRING$ ) ;
rank: 843
score: 97.83927001953126
patch: addr = 0 ;
rank: 843
score: 97.79490152994792
patch: += q CaMeL Ty ;
rank: 843
score: 97.38936767578124
patch: n ( ) ;
rank: 844
score: 98.40767124720982
patch: = q CaMeL Ty 1 ;
rank: 844
score: 98.39860316685268
patch: lm CaMeL Dir = point ;
rank: 844
score: 98.30014474051339
patch: q CaMeL Ty -= $NUMBER$ ;
rank: 844
score: 98.15177408854167
patch: return diag CaMeL R ;
rank: 844
score: 97.95973714192708
patch: position ( residuals ) ;
rank: 844
score: 97.83325805664063
patch: stmt = 0 ;
rank: 844
score: 97.7913818359375
patch: n = null ;
rank: 844
score: 97.38712768554687
patch: ) ; ) ;
rank: 845
score: 98.40399169921875
patch: = residuals ) * residuals ;
rank: 845
score: 97.83262329101562
patch: commit ( ) ;
rank: 845
score: 97.78032836914062
patch: . = residuals ;
rank: 845
score: 97.38410034179688
patch: ( residuals ) throws
rank: 846
score: 98.29679652622768
patch: q CaMeL Ty *= $NUMBER$ ;
rank: 846
score: 98.1446533203125
patch: delta = current ; }
rank: 846
score: 97.95782470703125
patch: ( false 1 ) ;
rank: 846
score: 97.82548828125
patch: dim = 0 ;
rank: 846
score: 97.77203369140625
patch: state = residuals ;
rank: 846
score: 97.3790283203125
patch: iterator ( ) ;
rank: 847
score: 98.40027727399554
patch: += residuals ( residuals ) ;
rank: 847
score: 98.12548828125
patch: dk ( ) ;
rank: 847
score: 97.95419311523438
patch: push ( residuals ) ;
rank: 847
score: 97.82539672851563
patch: abort ( ) ;
rank: 847
score: 97.75902709960937
patch: $NUMBER$ = residuals ;
rank: 847
score: 97.37806396484375
patch: * ) ) ;
rank: 848
score: 98.48478480747768
patch: = diag [ 0 ] ;
rank: 848
score: 98.39223807198661
patch: = q CaMeL Ty $NUMBER$ ;
rank: 848
score: 98.22036743164062
patch: read ( residuals ) ;
rank: 848
score: 98.11133829752605
patch: delta = 1 ; }
rank: 848
score: 97.9368387858073
patch: [ 0 ] -- ;
rank: 848
score: 97.82517700195312
patch: pos = 0 ;
rank: 848
score: 97.73311767578124
patch: p = residuals ;
rank: 848
score: 97.37166748046874
patch: residuals = 0 ;
rank: 849
score: 98.39091273716518
patch: -- residuals ( residuals ) ;
rank: 849
score: 98.10040283203125
patch: delta ( current ) ;
rank: 849
score: 97.82435913085938
patch: result = 0 ;
rank: 849
score: 97.729443359375
patch: b = null ;
rank: 849
score: 97.36503295898437
patch: residuals = ) ;
rank: 850
score: 98.2175537109375
patch: diag ( ) ;
rank: 850
score: 98.09738159179688
patch: return current ;
rank: 850
score: 97.93550618489583
patch: ( this ) ; ;
rank: 850
score: 97.82432861328125
patch: shutdown ( ) ;
rank: 850
score: 97.72920532226563
patch: b = residuals ;
rank: 850
score: 97.36302185058594
patch: q
rank: 851
score: 98.38211495535714
patch: q CaMeL Ty -- ) ;
rank: 851
score: 98.26609584263393
patch: q CaMeL Ty ( new ;
rank: 851
score: 98.2101338704427
patch: append ( diag ) ;
rank: 851
score: 98.0947265625
patch: = current * 0 ;
rank: 851
score: 97.93520100911458
patch: item ( residuals ) ;
rank: 851
score: 97.82021484375
patch: cursor = 0 ;
rank: 851
score: 97.72601318359375
patch: n = true ;
rank: 852
score: 98.26201520647321
patch: q CaMeL Ty -= ) ;
rank: 852
score: 98.209814453125
patch: ( objective ) ;
rank: 852
score: 98.0938720703125
patch: delta ( diag ) ;
rank: 852
score: 97.93307495117188
patch: scale ( residuals ) ;
rank: 852
score: 97.81796875
patch: cur = 0 ;
rank: 852
score: 97.33759765625
patch: j = null ;
rank: 853
score: 98.25750732421875
patch: q CaMeL Ty *= true ;
rank: 853
score: 98.08961995442708
patch: break ( 0 ) ;
rank: 853
score: 97.92818196614583
patch: q CaMeL Ty [ (
rank: 853
score: 97.81419067382812
patch: Connected ( ) ;
rank: 853
score: 97.33505859375
patch: / * * ;
rank: 854
score: 98.47141810825893
patch: delta = permutation * point ;
rank: 854
score: 98.37050374348958
patch: = residuals ) ; ;
rank: 854
score: 98.24822126116071
patch: [ 1 ] = null ;
rank: 854
score: 98.1903788248698
patch: permutation ( residuals ) ;
rank: 854
score: 98.08843383789062
patch: bound = true ;
rank: 854
score: 97.81361694335938
patch: dispatch ( ) ;
rank: 854
score: 97.7101318359375
patch: result = true ;
rank: 854
score: 97.3314453125
patch: * * ) ;
rank: 855
score: 98.47043282645089
patch: delta += x CaMeL Norm ;
rank: 855
score: 98.36865234375
patch: 1 . ( residuals ) ;
rank: 855
score: 98.1825663248698
patch: Pair ( residuals ) ;
rank: 855
score: 98.07991536458333
patch: ortho( residuals ) ;
rank: 855
score: 97.92635498046874
patch: catch ( ) {
rank: 855
score: 97.81293334960938
patch: out = 0 ;
rank: 855
score: 97.704248046875
patch: ( ) . }
rank: 855
score: 97.31817626953125
patch: * ) ;
rank: 856
score: 98.2423807779948
patch: [ 0 ] = ;
rank: 856
score: 98.18115234375
patch: double max = 1 ;
rank: 856
score: 98.07933959960937
patch: delta ( ) ;
rank: 856
score: 97.9249979654948
patch: size ( residuals ) ;
rank: 856
score: 97.81085815429688
patch: inst = 0 ;
rank: 856
score: 97.31190490722656
patch: CaMeL ) ;
rank: 857
score: 98.36574009486607
patch: = residuals residuals ( ) ;
rank: 857
score: 98.24034772600446
patch: q CaMeL Ty ++ ; )
rank: 857
score: 97.92491658528645
patch: contains ( residuals ) ;
rank: 857
score: 97.81014404296874
patch: logger = 0 ;
rank: 857
score: 97.6902587890625
patch: += residuals ) ;
rank: 857
score: 97.29116821289062
patch: / * ;
rank: 858
score: 98.36287144252232
patch: = residuals ) / $NUMBER$ ;
rank: 858
score: 98.3277587890625
patch: ( residuals , diag ) ;
rank: 858
score: 98.17409261067708
patch: = first CaMeL Iteration ;
rank: 858
score: 97.92442830403645
patch: ( $STRING$ 1 ) ;
rank: 858
score: 97.80986328125
patch: disconnect ( ) ;
rank: 858
score: 97.19912719726562
patch: ) ) ;
rank: 859
score: 98.45197405133929
patch: q CaMeL Ty = permutation ;
rank: 859
score: 98.32502092633929
patch: ( ) ; / * /
rank: 859
score: 98.15411376953125
patch: double max = max ;
rank: 859
score: 98.07044677734375
patch: = 0 ; }
rank: 859
score: 97.80885620117188
patch: AOM ( ) ;
rank: 859
score: 97.67293701171874
patch: * * * /
rank: 859
score: 97.19222259521484
patch: / ; ;
rank: 860
score: 98.45029994419643
patch: delta = diag * point ;
rank: 860
score: 98.34922572544643
patch: = residuals ) * $NUMBER$ ;
rank: 860
score: 98.06663004557292
patch: = 0 . $NUMBER$ ;
rank: 860
score: 97.91566975911458
patch: ( new $NUMBER$ ) ;
rank: 860
score: 97.80693359375
patch: position = 0 ;
rank: 860
score: 97.67108764648438
patch: end ( ) ;
rank: 860
score: 97.1859359741211
patch: / ) q
rank: 861
score: 98.34762137276786
patch: ( residuals ( ) ) ;
rank: 861
score: 97.80634155273438
patch: inst = current ;
rank: 861
score: 97.11822509765625
patch: / ) )
rank: 862
score: 98.20849609375
patch: q CaMeL Ty * /
rank: 862
score: 97.90730794270833
patch: ( this , ) ;
rank: 862
score: 97.79912109375
patch: m = true ;
rank: 862
score: 97.64753723144531
patch: += residuals ;
rank: 862
score: 97.11328887939453
patch: / * )
rank: 863
score: 98.4275614420573
patch: delta = - 0 ;
rank: 863
score: 97.9067891438802
patch: q CaMeL Ty ; *
rank: 863
score: 97.798291015625
patch: statement = current ;
rank: 863
score: 97.64098510742187
patch: n = false ;
rank: 863
score: 97.08287811279297
patch: = ) ;
rank: 864
score: 98.33284214564732
patch: q CaMeL Ty * ) ;
rank: 864
score: 97.90499877929688
patch: } int * ) ;
rank: 864
score: 97.79813842773437
patch: cancel ( ) ;
rank: 864
score: 97.63564453125
patch: result = false ;
rank: 864
score: 97.06503295898438
patch: = residuals ;
rank: 865
score: 98.17347208658855
patch: = new double ) ;
rank: 865
score: 98.044873046875
patch: res = current ;
rank: 865
score: 97.9021708170573
patch: } ( 1 ) ;
rank: 865
score: 97.7948974609375
patch: transaction = 0 ;
rank: 865
score: 97.62918701171876
patch: tmp = residuals ;
rank: 865
score: 97.04139709472656
patch: ; ) ;
rank: 866
score: 98.32638113839286
patch: q CaMeL Ty . ; ;
rank: 866
score: 98.14152018229167
patch: = old CaMeL X ;
rank: 866
score: 98.11033935546875
patch: Pair ( ) ;
rank: 866
score: 98.04209391276042
patch: = current . 0 ;
rank: 866
score: 97.90192260742188
patch: * * * ;
rank: 866
score: 97.7943603515625
patch: event = current ;
rank: 866
score: 97.04115295410156
patch: break ) ;
rank: 867
score: 98.14056396484375
patch: = null ;
rank: 867
score: 98.03299967447917
patch: double sum = 0 ;
rank: 867
score: 97.61017456054688
patch: j += residuals ;
rank: 867
score: 97.03086853027344
patch: else ; ;
rank: 868
score: 98.32326834542411
patch: = residuals ( ) ; }
rank: 868
score: 98.02923583984375
patch: q CaMeL Ty 1 ;
rank: 868
score: 97.90000406901042
patch: compare ( residuals ) ;
rank: 868
score: 97.78771362304687
patch: xform ( ) ;
rank: 868
score: 97.02923583984375
patch: Ty ) ;
rank: 869
score: 98.32157389322917
patch: = residuals ) ; }
rank: 869
score: 98.02606811523438
patch: res = 0 ;
rank: 869
score: 97.78563842773437
patch: director = 0 ;
rank: 869
score: 97.60016479492188
patch: current = residuals ;
rank: 869
score: 96.99752044677734
patch: residuals ) ;
rank: 870
score: 98.10941162109376
patch: = - 1 ;
rank: 870
score: 98.09879557291667
patch: double max = current ;
rank: 870
score: 98.02360229492187
patch: ( permutation ) ;
rank: 870
score: 97.89013671875
patch: [ 0 ] ) ;
rank: 870
score: 97.7845947265625
patch: block = current ;
rank: 870
score: 97.57767944335937
patch: residuals += residuals ;
rank: 870
score: 96.99005126953125
patch: i ) ;
rank: 871
score: 98.29439290364583
patch: . residuals ( ) ;
rank: 871
score: 98.01969401041667
patch: = 0 ; break ;
rank: 871
score: 97.88526407877605
patch: switch ( residuals ) {
rank: 871
score: 97.78386840820312
patch: cur = current ;
rank: 871
score: 96.97472127278645
patch: / ;
rank: 872
score: 98.29150390625
patch: 0 ( residuals ) ;
rank: 872
score: 98.29073660714286
patch: ( residuals ) ; * /
rank: 872
score: 98.07716878255208
patch: = System . out ;
rank: 872
score: 98.01497650146484
patch: = 1 ;
rank: 872
score: 97.8804423014323
patch: } * * ) ;
rank: 872
score: 97.7810287475586
patch: return 0 ;
rank: 872
score: 97.563427734375
patch: b = true ;
rank: 872
score: 96.97279357910156
patch: else ) ;
rank: 873
score: 98.07694498697917
patch: double ( residuals ) ;
rank: 873
score: 97.99640502929688
patch: ( point ) ;
rank: 873
score: 97.87760416666667
patch: q CaMeL Ty . }
rank: 873
score: 97.7795166015625
patch: r = null ;
rank: 873
score: 97.5605712890625
patch: += residuals ; }
rank: 873
score: 96.9682388305664
patch: / ; q
rank: 874
score: 98.28377859933036
patch: = ( double [ ] )
rank: 874
score: 98.24402872721355
patch: ( residuals ) * /
rank: 874
score: 97.77938232421874
patch: run ( ) ;
rank: 874
score: 97.55662841796875
patch: / * * /
rank: 874
score: 96.96322631835938
patch: / * /
rank: 875
score: 98.2794901529948
patch: = lm CaMeL Par ;
rank: 875
score: 97.98966471354167
patch: = current . this ;
rank: 875
score: 97.87291463216145
patch: ( / 1 ) ;
rank: 875
score: 97.77745971679687
patch: pop ( ) ;
rank: 875
score: 97.55409545898438
patch: p ( ) ;
rank: 875
score: 96.91439819335938
patch: return ) ;
rank: 876
score: 98.23241170247395
patch: - residuals ( ) ;
rank: 876
score: 97.98570760091145
patch: = current . current ;
rank: 876
score: 97.87183634440105
patch: } int ( ) ;
rank: 876
score: 97.77478637695313
patch: prev = current ;
rank: 876
score: 96.89260864257812
patch: / else ;
rank: 877
score: 98.08365885416667
patch: R ( residuals ) ;
rank: 877
score: 97.983984375
patch: delta = true ;
rank: 877
score: 97.87005004882812
patch: size ( ) ;
rank: 877
score: 97.77470703125
patch: stmt = current ;
rank: 877
score: 97.51422119140625
patch: tmp = null ;
rank: 878
score: 98.08046264648438
patch: push ( ) ;
rank: 878
score: 97.97066650390624
patch: bound = 1 ;
rank: 878
score: 97.8694559733073
patch: CaMeL ] ( ) ;
rank: 878
score: 97.77200927734376
patch: z = 0 ;
rank: 878
score: 97.5106689453125
patch: result = ) ;
rank: 878
score: 96.86665344238281
patch: ) ; ;
rank: 879
score: 98.0772705078125
patch: read ( ) ;
rank: 879
score: 97.96837158203125
patch: delta = point ;
rank: 879
score: 97.86642456054688
patch: Ty ( 1 ) ;
rank: 879
score: 97.77039184570313
patch: head = null ;
rank: 879
score: 97.50906372070312
patch: d = residuals ;
rank: 879
score: 96.85159301757812
patch: for ( {
rank: 880
score: 98.0760498046875
patch: q CaMeL Ty (
rank: 880
score: 97.86599731445312
patch: middle ( residuals ) ;
rank: 880
score: 97.76394653320312
patch: if ( false )
rank: 880
score: 97.506787109375
patch: n = ) ;
rank: 880
score: 96.84053039550781
patch: / ) /
rank: 881
score: 98.07190958658855
patch: = diag ( ) ;
rank: 881
score: 97.76246337890625
patch: start = 0 ;
rank: 881
score: 97.49786376953125
patch: p = null ;
rank: 881
score: 96.81050109863281
patch: return residuals ;
rank: 882
score: 98.19468383789062
patch: $NUMBER$ ( ) ;
rank: 882
score: 97.93782958984374
patch: 0 = 0 ;
rank: 882
score: 97.76177978515625
patch: node = current ;
rank: 882
score: 97.49710083007812
patch: result ( ) ;
rank: 882
score: 96.80573272705078
patch: * ) )
rank: 883
score: 98.19288330078125
patch: = residuals ; ;
rank: 883
score: 98.17338053385417
patch: = qr CaMeL Decomposition ;
rank: 883
score: 98.057080078125
patch: Value = current ;
rank: 883
score: 97.936962890625
patch: delta = $NUMBER$ ;
rank: 883
score: 97.76061401367187
patch: callback ( ) ;
rank: 883
score: 97.4944091796875
patch: ( ) * /
rank: 883
score: 96.80362701416016
patch: / ) *
rank: 884
score: 98.2709248860677
patch: double delta = 1 ;
rank: 884
score: 97.99095662434895
patch: list ( residuals ) ;
rank: 884
score: 97.92247314453125
patch: bound = ) ;
rank: 884
score: 97.7602783203125
patch: -- = 0 ;
rank: 884
score: 97.48848266601563
patch: tmp += residuals ;
rank: 884
score: 96.80116271972656
patch: -- ; q
rank: 885
score: 98.16771443684895
patch: $NUMBER$ . ( ) ;
rank: 885
score: 97.98766072591145
patch: int ( residuals ) ;
rank: 885
score: 97.9118896484375
patch: ortho( ) ;
rank: 885
score: 97.76600341796875
patch: [ 0 ] ;
rank: 885
score: 97.75699462890626
patch: validate ( ) ;
rank: 885
score: 97.48518676757813
patch: 1 = residuals ;
rank: 885
score: 96.78558349609375
patch: / ) }
rank: 886
score: 98.26934204101562
patch: delta = null ;
rank: 886
score: 98.0295166015625
patch: Value = 0 ;
rank: 886
score: 97.98557535807292
patch: = current . residuals ;
rank: 886
score: 97.910009765625
patch: = current ; }
rank: 886
score: 97.756982421875
patch: lock ( ) ;
rank: 886
score: 97.71748657226563
patch: value = null ;
rank: 886
score: 97.483349609375
patch: b = false ;
rank: 886
score: 96.77420043945312
patch: catch ( ]
rank: 887
score: 98.2658182779948
patch: delta = work $NUMBER$ ;
rank: 887
score: 97.904150390625
patch: bound = current ;
rank: 887
score: 97.75618896484374
patch: h = 0 ;
rank: 887
score: 97.7138671875
patch: ( value ) ;
rank: 887
score: 97.480908203125
patch: ) = null ;
rank: 887
score: 96.76271057128906
patch: * * ;
rank: 888
score: 97.75345458984376
patch: ae = 0 ;
rank: 888
score: 97.70921630859375
patch: ( current ) ;
rank: 888
score: 97.47611083984376
patch: j * * /
rank: 888
score: 96.75865173339844
patch: / ; )
rank: 889
score: 97.95701090494792
patch: long ( residuals ) ;
rank: 889
score: 97.75167846679688
patch: translate ( ) ;
rank: 889
score: 97.47183837890626
patch: tmp = true ;
rank: 889
score: 96.75751495361328
patch: * ) q
rank: 890
score: 98.12502034505208
patch: q CaMeL Ty , ;
rank: 890
score: 97.99503173828126
patch: ( diag ) ;
rank: 890
score: 97.9379374186198
patch: = null ; break ;
rank: 890
score: 97.8653076171875
patch: delta = ) ;
rank: 890
score: 97.70177001953125
patch: } * * ;
rank: 890
score: 97.47133178710938
patch: f = residuals ;
rank: 890
score: 96.75654602050781
patch: / residuals ;
rank: 891
score: 98.1232401529948
patch: -- residuals ( ) ;
rank: 891
score: 97.848876953125
patch: Norm = 0 ;
rank: 891
score: 97.74932861328125
patch: c = 0 ;
rank: 891
score: 97.679150390625
patch: ( exp ) ;
rank: 891
score: 97.46942138671875
patch: len = residuals ;
rank: 891
score: 96.74809265136719
patch: / / ;
rank: 892
score: 97.9759033203125
patch: Qt ( ) ;
rank: 892
score: 97.91834513346355
patch: q CaMeL Ty += ;
rank: 892
score: 97.84154663085937
patch: res ( ) ;
rank: 892
score: 97.7469482421875
patch: w = 0 ;
rank: 892
score: 97.46578369140624
patch: ) = residuals ;
rank: 892
score: 96.74222564697266
patch: ( ) q
rank: 893
score: 98.09644571940105
patch: += residuals ( ) ;
rank: 893
score: 97.91698201497395
patch: . ( residuals ) ;
rank: 893
score: 97.6751708984375
patch: ( in ) ;
rank: 893
score: 97.46248168945313
patch: version = residuals ;
rank: 893
score: 96.74139404296875
patch: ) ;
rank: 894
score: 98.22145589192708
patch: delta delta = 1 ;
rank: 894
score: 98.09541829427083
patch: 1 = residuals ) ;
rank: 894
score: 98.05509440104167
patch: = 0 ; * /
rank: 894
score: 97.96924438476563
patch: R ( ) ;
rank: 894
score: 97.742333984375
patch: resume ( ) ;
rank: 894
score: 97.672900390625
patch: ( out ) ;
rank: 894
score: 97.44639282226562
patch: retval = residuals ;
rank: 894
score: 96.73235321044922
patch: break ; ;
rank: 895
score: 98.21985880533855
patch: double diag = 0 ;
rank: 895
score: 98.08900960286458
patch: ( residuals ) . ;
rank: 895
score: 98.03085327148438
patch: q CaMeL Ty [ residuals
rank: 895
score: 97.91238403320312
patch: int ( 0 ) ;
rank: 895
score: 97.82756958007812
patch: initialize ( ) ;
rank: 895
score: 97.74219360351563
patch: g = current ;
rank: 895
score: 97.44052734375
patch: f ( ) ;
rank: 895
score: 96.72869110107422
patch: *= residuals ;
rank: 896
score: 98.08029174804688
patch: queue ( residuals ) ;
rank: 896
score: 97.94309692382812
patch: permutation ( ) ;
rank: 896
score: 97.87234497070312
patch: = this ;
rank: 896
score: 97.82653198242187
patch: lm CaMeL Par ;
rank: 896
score: 97.74190673828124
patch: delete ( ) ;
rank: 896
score: 97.43550415039063
patch: temp = residuals ;
rank: 896
score: 96.72583770751953
patch: -- ; ;
rank: 897
score: 98.2183837890625
patch: ( work $NUMBER$ ) ;
rank: 897
score: 98.0673319498698
patch: ++ ( residuals ) ;
rank: 897
score: 98.0253397623698
patch: ( ) ; * /
rank: 897
score: 97.939892578125
patch: ( cols ) ;
rank: 897
score: 97.84119262695313
patch: list ( ) ;
rank: 897
score: 97.81331787109374
patch: vector ( ) ;
rank: 897
score: 97.63790893554688
patch: ( start ) ;
rank: 897
score: 97.43077392578125
patch: r = residuals ;
rank: 897
score: 96.71228790283203
patch: ( ) /
rank: 898
score: 98.06392415364583
patch: $NUMBER$ ( ) ; ;
rank: 898
score: 97.9353759765625
patch: double ( ) ;
rank: 898
score: 97.79891357421874
patch: vector = current ;
rank: 898
score: 97.73438720703125
patch: delay = 0 ;
rank: 898
score: 97.42823486328125
patch: h = residuals ;
rank: 898
score: 96.70176188151042
patch: else ;
rank: 899
score: 98.06385294596355
patch: = residuals ) ) ;
rank: 899
score: 97.93465576171874
patch: diag = 0 ;
rank: 899
score: 97.79740600585937
patch: diagonal ( ) ;
rank: 899
score: 97.73432006835938
patch: loop = current ;
rank: 899
score: 96.69358825683594
patch: } else ;
rank: 900
score: 98.17445882161458
patch: delta = - 1 ;
rank: 900
score: 98.0580546061198
patch: = residuals ( residuals ;
rank: 900
score: 98.00579833984375
patch: = solved CaMeL Cols ;
rank: 900
score: 97.81256713867188
patch: = current ) ;
rank: 900
score: 97.79545288085937
patch: bound = $NUMBER$ ;
rank: 900
score: 97.73363037109375
patch: xform = 0 ;
rank: 900
score: 97.61454772949219
patch: * * *
rank: 900
score: 97.42072143554688
patch: $NUMBER$ = null ;
rank: 900
score: 96.68541717529297
patch: throw ) ;
rank: 901
score: 98.1690165201823
patch: = residuals * point ;
rank: 901
score: 97.9299560546875
patch: break ( ) ;
rank: 901
score: 97.7923095703125
patch: bound = null ;
rank: 901
score: 97.73309936523438
patch: local = 0 ;
rank: 901
score: 97.59287109375
patch: value = false ;
rank: 901
score: 97.41710205078125
patch: p = true ;
rank: 901
score: 96.68386840820312
patch: -- ) ;
rank: 902
score: 98.05049641927083
patch: 16 ( residuals ) ;
rank: 902
score: 97.78162231445313
patch: bound ( ) ;
rank: 902
score: 97.73306884765626
patch: previous = current ;
rank: 902
score: 96.68141174316406
patch: * ) /
rank: 903
score: 98.15615844726562
patch: double . = 0 ;
rank: 903
score: 98.04617309570312
patch: - ( residuals ) ;
rank: 903
score: 97.78577880859375
patch: = new ) ;
rank: 903
score: 97.7797119140625
patch: vector = 0 ;
rank: 903
score: 97.73004150390625
patch: exit ( ) ;
rank: 903
score: 97.41475219726563
patch: ( residuals ) }
rank: 903
score: 96.68058776855469
patch: j -- ;
rank: 904
score: 98.15011596679688
patch: = diag * point ;
rank: 904
score: 98.04337565104167
patch: residuals ( ) ; ;
rank: 904
score: 97.99025472005208
patch: = current = current ;
rank: 904
score: 97.906640625
patch: double = 0 ;
rank: 904
score: 97.76629638671875
patch: . ( ) ;
rank: 904
score: 97.5754638671875
patch: Ty = null ;
rank: 904
score: 96.67274475097656
patch: for ( )
rank: 905
score: 98.0350341796875
patch: q CaMeL Ty * ;
rank: 905
score: 97.7273681640625
patch: bounds = current ;
rank: 905
score: 97.5694091796875
patch: ( - ) ;
rank: 905
score: 97.40928955078125
patch: kind = residuals ;
rank: 905
score: 96.65360260009766
patch: / ( ;
rank: 906
score: 98.14881591796875
patch: = work $NUMBER$ ;
rank: 906
score: 98.0319315592448
patch: ] ( residuals ) ;
rank: 906
score: 97.97989908854167
patch: = old CaMeL Res ;
rank: 906
score: 97.76397705078125
patch: return current ; }
rank: 906
score: 97.75494995117188
patch: = residuals 1 ;
rank: 906
score: 97.72691650390625
patch: exception = current ;
rank: 906
score: 97.56435546875
patch: N = 0 ;
rank: 906
score: 97.4091064453125
patch: redraw ( ) ;
rank: 906
score: 96.63814290364583
patch: -- ;
rank: 907
score: 98.03051147460937
patch: -= residuals ) ;
rank: 907
score: 97.72619018554687
patch: packet = current ;
rank: 907
score: 97.55791625976562
patch: catch ( ) ;
rank: 907
score: 97.40687866210938
patch: m ( ) ;
rank: 907
score: 96.63555908203125
patch: / else q
rank: 908
score: 98.02561442057292
patch: &= residuals ( ) ;
rank: 908
score: 97.75927124023437
patch: R = 0 ;
rank: 908
score: 97.74183349609375
patch: = null ; }
rank: 908
score: 97.71966552734375
patch: statement = 0 ;
rank: 908
score: 97.55753173828126
patch: value = 0 ;
rank: 908
score: 97.40545043945312
patch: pos = residuals ;
rank: 908
score: 96.6327133178711
patch: = $NUMBER$ ;
rank: 909
score: 98.13466389973958
patch: Residuals ( residuals ) ;
rank: 909
score: 98.025146484375
patch: ++ residuals ( ) ;
rank: 909
score: 97.87275390625
patch: Value ( ) ;
rank: 909
score: 97.75905151367188
patch: bound = false ;
rank: 909
score: 97.7359375
patch: value = current ;
rank: 909
score: 97.71952514648437
patch: AXIS = 0 ;
rank: 909
score: 97.55722045898438
patch: ( final ) ;
rank: 909
score: 97.4010498046875
patch: 0 = residuals ;
rank: 909
score: 96.62994384765625
patch: catch ( ;
rank: 910
score: 98.02325439453125
patch: 1 . ( ) ;
rank: 910
score: 97.96370442708333
patch: Value ( residuals ) ;
rank: 910
score: 97.75861206054688
patch: delta = diag ;
rank: 910
score: 97.7156494140625
patch: cat = 0 ;
rank: 910
score: 97.55419921875
patch: } * * *
rank: 910
score: 97.3955078125
patch: * ) * /
rank: 910
score: 96.6280746459961
patch: * * )
rank: 911
score: 98.12919108072917
patch: double diag = 1 ;
rank: 911
score: 98.01995849609375
patch: 64 ( residuals ) ;
rank: 911
score: 97.86223754882812
patch: load ( ) ;
rank: 911
score: 97.71485595703125
patch: * ( ) ;
rank: 911
score: 97.5314453125
patch: N ( ) ;
rank: 911
score: 97.39304809570312
patch: i += residuals ;
rank: 911
score: 96.62626647949219
patch: catch ( +
rank: 912
score: 98.0106913248698
patch: -= q CaMeL Ty ;
rank: 912
score: 97.71442260742188
patch: iter = 0 ;
rank: 912
score: 97.69062042236328
patch: = true ;
rank: 912
score: 97.515234375
patch: Ty = this ;
rank: 912
score: 97.39217529296874
patch: b ( ) ;
rank: 912
score: 96.61488342285156
patch: += ) ;
rank: 913
score: 97.95679728190105
patch: return x CaMeL Norm ;
rank: 913
score: 97.73754272460937
patch: Q = 0 ;
rank: 913
score: 97.71168823242188
patch: install ( ) ;
rank: 913
score: 97.50786743164062
patch: value = true ;
rank: 913
score: 96.6049296061198
patch: / )
rank: 914
score: 98.10115966796874
patch: delta = false ;
rank: 914
score: 97.71098022460937
patch: finally = 0 ;
rank: 914
score: 97.6778076171875
patch: 0 ( ) ;
rank: 914
score: 97.50687255859376
patch: d = null ;
rank: 914
score: 97.39063110351563
patch: b += residuals ;
rank: 914
score: 96.60136413574219
patch: final ) ;
rank: 915
score: 97.99252319335938
patch: = residuals ( ;
rank: 915
score: 97.73330078125
patch: 0 = 1 ;
rank: 915
score: 97.71088256835938
patch: var = current ;
rank: 915
score: 97.50155639648438
patch: out = null ;
rank: 915
score: 96.59307861328125
patch: ( residuals ;
rank: 916
score: 97.99078369140625
patch: 1 ( ) ;
rank: 916
score: 97.93616943359375
patch: Decomposition ( ) ;
rank: 916
score: 97.72816162109375
patch: step = 0 ;
rank: 916
score: 97.70879516601562
patch: thread = 0 ;
rank: 916
score: 97.49923706054688
patch: N = false ;
rank: 916
score: 97.38570556640624
patch: expr = null ;
rank: 917
score: 97.98904418945312
patch: = residuals . ;
rank: 917
score: 97.70809936523438
patch: if ( )
rank: 917
score: 97.48759155273437
patch: N = null ;
rank: 917
score: 97.38474731445312
patch: retval = null ;
rank: 917
score: 96.58519744873047
patch: j ++ ;
rank: 918
score: 97.70634155273437
patch: try { try {
rank: 918
score: 97.63019409179688
patch: q CaMeL Ty }
rank: 918
score: 97.48494873046874
patch: } * * /
rank: 918
score: 97.3846435546875
patch: temp = null ;
rank: 918
score: 96.57617950439453
patch: = residuals .
rank: 919
score: 97.93551025390624
patch: = null ; ;
rank: 919
score: 97.82293701171875
patch: torial = 0 ;
rank: 919
score: 97.7062255859375
patch: forward ( ) ;
rank: 919
score: 97.48145751953125
patch: residuals = this ;
rank: 919
score: 96.57254028320312
patch: ; ; ;
rank: 920
score: 97.60848999023438
patch: int ( ) ;
rank: 920
score: 97.474755859375
patch: value ( ) ;
rank: 920
score: 97.38189697265625
patch: flags = residuals ;
rank: 920
score: 96.56716918945312
patch: / / q
rank: 921
score: 97.89983520507812
patch: = current . ;
rank: 921
score: 97.70364379882812
patch: Clear ( ) ;
rank: 921
score: 97.37970733642578
patch: result = (
rank: 921
score: 96.56355285644531
patch: ( ) *
rank: 922
score: 97.88550415039063
patch: $NUMBER$ . ) ;
rank: 922
score: 97.7008056640625
patch: z = current ;
rank: 922
score: 97.59081420898437
patch: = residuals $NUMBER$ ;
rank: 922
score: 97.46993408203124
patch: redo ( ) ;
rank: 922
score: 97.377490234375
patch: ( ) * ;
rank: 922
score: 96.55255126953125
patch: catch ( Exception
rank: 923
score: 98.00919799804687
patch: delta += 0 ;
rank: 923
score: 97.8746337890625
patch: = current ; ;
rank: 923
score: 97.81456298828125
patch: sort ( ) ;
rank: 923
score: 97.69676513671875
patch: = 1 ; }
rank: 923
score: 97.58499145507812
patch: += 1 ;
rank: 923
score: 97.46010131835938
patch: ( new int ;
rank: 923
score: 97.3739990234375
patch: list = null ;
rank: 923
score: 96.55194091796875
patch: / residuals q
rank: 924
score: 97.81146850585938
patch: = - $NUMBER$ ;
rank: 924
score: 97.69666748046875
patch: g = null ;
rank: 924
score: 97.69602661132812
patch: function = 0 ;
rank: 924
score: 97.37381591796876
patch: top = residuals ;
rank: 924
score: 96.54913330078125
patch: ( ) =
rank: 925
score: 97.9985107421875
patch: delta = previous ;
rank: 925
score: 97.3730712890625
patch: owner = residuals ;
rank: 925
score: 96.54498291015625
patch: iterator else ;
rank: 926
score: 97.69501953125
patch: preview ( ) ;
rank: 926
score: 96.5325419108073
patch: break ;
rank: 927
score: 97.9776123046875
patch: delta = max ;
rank: 927
score: 97.79051513671875
patch: jacobian = 0 ;
rank: 927
score: 97.43735961914062
patch: d ( ) ;
rank: 927
score: 96.52394104003906
patch: / ; }
rank: 928
score: 97.97113037109375
patch: delta = delta ;
rank: 928
score: 97.75875854492188
patch: = residuals ; }
rank: 928
score: 97.69251098632813
patch: 8 ( ) ;
rank: 928
score: 97.67857055664062
patch: gon( ) ;
rank: 928
score: 97.5460205078125
patch: = 0 ; ;
rank: 928
score: 97.36790466308594
patch: * * /
rank: 928
score: 97.36637573242187
patch: n * * /
rank: 928
score: 96.22578938802083
patch: / q
rank: 929
score: 97.784033203125
patch: ] = current ;
rank: 929
score: 97.758447265625
patch: *= residuals ) ;
rank: 929
score: 97.69235229492188
patch: l = current ;
rank: 929
score: 97.364501953125
patch: f = null ;
rank: 929
score: 96.15460205078125
patch: * ;
rank: 930
score: 97.6922607421875
patch: JREF = 0 ;
rank: 930
score: 97.6751953125
patch: / = 0 ;
rank: 930
score: 97.36323547363281
patch: } else {
rank: 930
score: 95.99344889322917
patch: ; ;
rank: 931
score: 97.7794921875
patch: xk ( ) ;
rank: 931
score: 97.69547119140626
patch: &= residuals ) ;
rank: 931
score: 97.69193115234376
patch: 32 ( ) ;
rank: 931
score: 97.67488403320313
patch: delta = $STRING$ ;
rank: 931
score: 97.3613037109375
patch: n = $NUMBER$ ;
rank: 931
score: 95.9650166829427
patch: residuals ;
rank: 932
score: 97.76878051757812
patch: = ( ) ;
rank: 932
score: 97.72782592773437
patch: Optimize ( ) ;
rank: 932
score: 97.69450073242187
patch: = ) ; ;
rank: 932
score: 97.69160766601563
patch: if ( current !=
rank: 932
score: 97.36027221679687
patch: res = residuals ;
rank: 932
score: 97.22575378417969
patch: case 0 ;
rank: 932
score: 95.903564453125
patch: }
rank: 933
score: 97.95017700195312
patch: delta = permutation ;
rank: 933
score: 97.6925537109375
patch: |= residuals ) ;
rank: 933
score: 97.68939819335938
patch: pack ( ) ;
rank: 933
score: 97.51402587890625
patch: [ ) * /
rank: 933
score: 97.35887451171875
patch: p += residuals ;
rank: 933
score: 95.88731892903645
patch: } ;
rank: 934
score: 97.76769409179687
patch: pj = 0 ;
rank: 934
score: 97.688818359375
patch: = new double ;
rank: 934
score: 97.68873291015625
patch: out ( ) ;
rank: 934
score: 97.65289916992188
patch: scale ( ) ;
rank: 934
score: 97.49766845703125
patch: = current 1 ;
rank: 934
score: 97.35560302734375
patch: node = null ;
rank: 934
score: 97.20429992675781
patch: } * *
rank: 934
score: 95.85328165690105
patch: ) q
rank: 935
score: 97.76766357421874
patch: buffer = current ;
rank: 935
score: 97.68851928710937
patch: local = current ;
rank: 935
score: 97.64512939453125
patch: = 0 ] ;
rank: 935
score: 95.77855428059895
patch: Ty ;
rank: 936
score: 97.76726684570312
patch: Qt = 0 ;
rank: 936
score: 97.68779296875
patch: ae = current ;
rank: 936
score: 97.6518798828125
patch: = residuals residuals ;
rank: 936
score: 97.48907470703125
patch: peek ( ) ;
rank: 936
score: 97.12345886230469
patch: } * ;
rank: 936
score: 95.77101643880208
patch: else {
rank: 937
score: 97.76724853515626
patch: c = current ;
rank: 937
score: 97.68699951171875
patch: stmt ( ) ;
rank: 937
score: 97.48350524902344
patch: = false ;
rank: 937
score: 95.75034586588542
patch: } q
rank: 938
score: 97.8904296875
patch: Residuals ( ) ;
rank: 938
score: 97.68421630859375
patch: op = 0 ;
rank: 938
score: 97.64078979492187
patch: $NUMBER$ . ; ;
rank: 938
score: 97.1551742553711
patch: -= residuals ;
rank: 938
score: 97.08726501464844
patch: * 0 ;
rank: 938
score: 95.70717366536458
patch: continue ;
rank: 939
score: 97.76397705078125
patch: fill ( ) ;
rank: 939
score: 97.681689453125
patch: ctor = 0 ;
rank: 939
score: 95.6949462890625
patch: ) )
rank: 940
score: 97.68134765625
patch: Iterator ( ) ;
rank: 940
score: 97.62588500976562
patch: ++ ( ) ;
rank: 940
score: 97.06836700439453
patch: CaMeL -- ;
rank: 940
score: 95.6842549641927
patch: ++ ;
rank: 941
score: 97.76016235351562
patch: ] = 0 ;
rank: 941
score: 97.67984619140626
patch: i = true ;
rank: 941
score: 97.62288665771484
patch: $NUMBER$ . ;
rank: 941
score: 97.6187255859375
patch: bound = $STRING$ ;
rank: 941
score: 95.68030802408855
patch: i ;
rank: 942
score: 97.67921752929688
patch: recalculate ( ) ;
rank: 942
score: 97.6127685546875
patch: - residuals ) ;
rank: 942
score: 97.02808380126953
patch: += 0 ;
rank: 942
score: 95.64422607421875
patch: * )
rank: 943
score: 97.84090576171874
patch: ( cost ) ;
rank: 943
score: 97.67637939453125
patch: addr = current ;
rank: 943
score: 97.45997314453125
patch: long ( ) ;
rank: 943
score: 97.06640625
patch: residuals = (
rank: 943
score: 95.56241861979167
patch: else q
rank: 944
score: 97.675439453125
patch: failed ( ) ;
rank: 944
score: 97.6575927734375
patch: sqrt ( ) ;
rank: 944
score: 97.01420593261719
patch: return this ;
rank: 944
score: 95.55410766601562
patch: System }
rank: 945
score: 97.752880859375
patch: diag = current ;
rank: 945
score: 97.67247314453125
patch: ex = 0 ;
rank: 945
score: 97.60380859375
patch: += residuals ; ;
rank: 945
score: 97.4827880859375
patch: = point ;
rank: 945
score: 97.41673278808594
patch: = start ;
rank: 945
score: 97.04075622558594
patch: b = (
rank: 945
score: 95.53481038411458
patch: iterator ;
rank: 946
score: 97.75243530273437
patch: array = current ;
rank: 946
score: 97.67241821289062
patch: doc = 0 ;
rank: 946
score: 97.38639831542969
patch: = previous ;
rank: 946
score: 97.02012634277344
patch: n = (
rank: 946
score: 96.99574279785156
patch: &= 0 ;
rank: 946
score: 95.49199676513672
patch: ;
rank: 947
score: 97.67109985351563
patch: chunk = current ;
rank: 947
score: 97.58504638671874
patch: 1 . ) ;
rank: 947
score: 97.33413696289062
patch: return null ;
rank: 947
score: 97.01948547363281
patch: tmp = (
rank: 947
score: 96.98524475097656
patch: case null ;
rank: 947
score: 95.41827392578125
patch: ( ;
rank: 948
score: 97.74948120117188
patch: evaluate ( ) ;
rank: 948
score: 97.66730346679688
patch: return ( ) ;
rank: 948
score: 97.4004898071289
patch: return 1 ;
rank: 948
score: 96.95307922363281
patch: -- * ;
rank: 948
score: 95.40480550130208
patch: iterator q
rank: 949
score: 97.82210693359374
patch: delta = cost ;
rank: 949
score: 97.74672241210938
patch: 0 = current ;
rank: 949
score: 97.66590576171875
patch: FFFF = 0 ;
rank: 949
score: 97.5665771484375
patch: -- ( ) ;
rank: 949
score: 97.23886108398438
patch: += $NUMBER$ ;
rank: 949
score: 96.94721221923828
patch: < 0 ;
rank: 949
score: 95.40444946289062
patch: iterator )
rank: 950
score: 97.66492309570313
patch: inst = null ;
rank: 950
score: 97.5413818359375
patch: ++ ; ;
rank: 950
score: 96.98249816894531
patch: break ; }
rank: 950
score: 96.92940521240234
patch: catch 0 .
rank: 950
score: 95.3988037109375
patch: / /
rank: 951
score: 97.66243286132813
patch: Dim = 0 ;
rank: 951
score: 97.63121337890625
patch: ( delta ) ;
rank: 951
score: 97.34194946289062
patch: return delta ;
rank: 951
score: 95.38826751708984
patch: /
rank: 952
score: 97.66206665039063
patch: prev = 0 ;
rank: 952
score: 97.28939056396484
patch: return diag ;
rank: 952
score: 97.1873779296875
patch: = new ;
rank: 952
score: 95.3709716796875
patch: sb }
rank: 953
score: 97.78843994140625
patch: q CaMeL Ty <
rank: 953
score: 97.73929443359376
patch: Value = previous ;
rank: 953
score: 97.662060546875
patch: schedule ( ) ;
rank: 953
score: 97.44659423828125
patch: q CaMeL Ty
rank: 953
score: 97.1497573852539
patch: *= $NUMBER$ ;
rank: 953
score: 96.96630096435547
patch: n -- ;
rank: 953
score: 95.36507161458333
patch: : ;
rank: 954
score: 97.09870910644531
patch: *= 1 ;
rank: 954
score: 96.90548706054688
patch: } * /
rank: 954
score: 95.35380045572917
patch: f ;
rank: 955
score: 97.66104125976562
patch: op = current ;
rank: 955
score: 97.33868408203125
patch: ++ ; }
rank: 955
score: 97.2451171875
patch: delta ;
rank: 955
score: 97.09014129638672
patch: -= 1 ;
rank: 955
score: 96.89928436279297
patch: } break ;
rank: 955
score: 94.77354431152344
patch: )
rank: 956
score: 97.33770751953125
patch: 1 . ;
rank: 956
score: 97.23832702636719
patch: = $STRING$ ;
rank: 956
score: 96.89419555664062
patch: N ++ ;
rank: 956
score: 94.46035766601562
patch: else
rank: 957
score: 97.7269775390625
patch: dk = 0 ;
rank: 957
score: 97.660546875
patch: t = 0 ;
rank: 957
score: 97.60848388671874
patch: cols ( ) ;
rank: 957
score: 97.21884155273438
patch: return true ;
rank: 957
score: 96.93355560302734
patch: ( ) ?
rank: 957
score: 96.8895034790039
patch: * out ;
rank: 957
score: 94.40327453613281
patch: iterator
rank: 958
score: 97.65933837890626
patch: bounds = 0 ;
rank: 958
score: 97.26496887207031
patch: -- ; }
rank: 958
score: 97.2107162475586
patch: return previous ;
rank: 958
score: 97.05028533935547
patch: [ 0 ;
rank: 958
score: 94.22560119628906
patch: _
rank: 959
score: 97.26093292236328
patch: = ; ;
rank: 959
score: 97.20185089111328
patch: = diag ;
rank: 959
score: 96.88585662841797
patch: j * /
rank: 959
score: 94.18406677246094
patch: index
rank: 960
score: 97.65778198242188
patch: con = 0 ;
rank: 960
score: 97.25023651123047
patch: ++ ) ;
rank: 960
score: 97.17636108398438
patch: return $NUMBER$ ;
rank: 960
score: 96.87063598632812
patch: >= 0 ;
rank: 960
score: 96.86709594726562
patch: |= residuals ;
rank: 960
score: 94.14159393310547
patch: CACHED
rank: 961
score: 97.75185546875
patch: for ( int )
rank: 961
score: 97.65528564453125
patch: meth = 0 ;
rank: 961
score: 96.96198272705078
patch: *= 0 ;
rank: 961
score: 96.86799621582031
patch: * * q
rank: 961
score: 96.82805633544922
patch: if ( ;
rank: 961
score: 94.03523254394531
patch: iter
rank: 962
score: 97.71691131591797
patch: = current .
rank: 962
score: 97.65479125976563
patch: complete ( ) ;
rank: 962
score: 96.958251953125
patch: . ) ;
rank: 962
score: 96.86497497558594
patch: * ; ;
rank: 962
score: 93.97697448730469
patch: System
rank: 963
score: 97.71663818359374
patch: delta = current .
rank: 963
score: 97.65459594726562
patch: log = 0 ;
rank: 963
score: 97.21863555908203
patch: $NUMBER$ ) ;
rank: 963
score: 96.80886840820312
patch: p = (
rank: 963
score: 93.95967864990234
patch: :
rank: 964
score: 97.7137451171875
patch: at ( ) ;
rank: 964
score: 97.654443359375
patch: if ( ! )
rank: 964
score: 97.06997680664062
patch: return point ;
rank: 964
score: 96.92030334472656
patch: += true ;
rank: 964
score: 96.84982299804688
patch: length -- ;
rank: 964
score: 96.80368041992188
patch: n ++ ;
rank: 964
score: 93.92341613769531
patch: this
rank: 965
score: 97.65302734375
patch: release ( ) ;
rank: 965
score: 97.46862030029297
patch: delta ++ ;
rank: 965
score: 97.06391143798828
patch: delta = (
rank: 965
score: 96.90886688232422
patch: [ ( ;
rank: 965
score: 96.8409652709961
patch: length ++ ;
rank: 965
score: 96.79043579101562
patch: n * /
rank: 965
score: 93.87462615966797
patch: list
rank: 966
score: 97.6525634765625
patch: else = 0 ;
rank: 966
score: 97.05479431152344
patch: = permutation ;
rank: 966
score: 96.90604400634766
patch: int ) ;
rank: 966
score: 96.82487487792969
patch: d ) ;
rank: 966
score: 93.846923828125
patch: sb
rank: 967
score: 97.64935302734375
patch: PREPROCESSOR = 0 ;
rank: 967
score: 97.2909927368164
patch: = cols ;
rank: 967
score: 97.14578247070312
patch: = ; }
rank: 967
score: 96.82144165039062
patch: case $NUMBER$ ;
rank: 967
score: 93.82524108886719
patch: id
rank: 968
score: 97.64664916992187
patch: head = true ;
rank: 968
score: 97.07991027832031
patch: = residuals )
rank: 968
score: 96.81492614746094
patch: N -- ;
rank: 968
score: 96.76219940185547
patch: result = ;
rank: 968
score: 93.80789184570312
patch: Math
rank: 969
score: 97.64620971679688
patch: gs ( ) ;
rank: 969
score: 97.2437744140625
patch: ( 0 ;
rank: 969
score: 96.9560546875
patch: R ;
rank: 969
score: 96.89071655273438
patch: [ ) ;
rank: 969
score: 96.80902099609375
patch: * / ;
rank: 969
score: 93.69552612304688
patch: Offset
rank: 970
score: 97.64557495117188
patch: edge = current ;
rank: 970
score: 97.1956787109375
patch: = delta ;
rank: 970
score: 97.06681823730469
patch: . * /
rank: 970
score: 96.87837727864583
patch: vector ;
rank: 970
score: 96.80290985107422
patch: out . ;
rank: 970
score: 96.75077056884766
patch: j * ;
rank: 970
score: 93.65681457519531
patch: starts
rank: 971
score: 97.70017700195312
patch: skip ( ) ;
rank: 971
score: 97.644287109375
patch: se = 0 ;
rank: 971
score: 96.80006408691406
patch: size -- ;
rank: 971
score: 96.74978637695312
patch: ( ) {
rank: 971
score: 93.54401397705078
patch: Sym
rank: 972
score: 97.64334106445312
patch: date = current ;
rank: 972
score: 96.87445068359375
patch: &= true ;
rank: 972
score: 96.79278564453125
patch: catch $NUMBER$ .
rank: 972
score: 93.51673889160156
patch: Buffer
rank: 973
score: 97.69505004882812
patch: ( rows ) ;
rank: 973
score: 97.6419921875
patch: expr = 0 ;
rank: 973
score: 97.01449584960938
patch: . ; ;
rank: 973
score: 96.79317220052083
patch: delta .
rank: 973
score: 96.79255676269531
patch: if 0 .
rank: 973
score: 93.5131607055664
patch: it
rank: 974
score: 97.64197998046875
patch: pos = current ;
rank: 974
score: 96.81689453125
patch: &= false ;
rank: 974
score: 96.78743743896484
patch: / 0 ;
rank: 974
score: 96.63697306315105
patch: this ;
rank: 974
score: 93.49739837646484
patch: i
rank: 975
score: 97.64149169921875
patch: score = 0 ;
rank: 975
score: 97.0057144165039
patch: -= $NUMBER$ ;
rank: 975
score: 96.81611633300781
patch: = ( ;
rank: 975
score: 96.30696614583333
patch: 0 ;
rank: 975
score: 93.471923828125
patch: symbol
rank: 976
score: 97.64091186523437
patch: expr = current ;
rank: 976
score: 97.21056365966797
patch: for * /
rank: 976
score: 96.97624206542969
patch: ? * /
rank: 976
score: 96.78349304199219
patch: catch ( )
rank: 976
score: 93.43905639648438
patch: bdd
rank: 977
score: 97.64037475585937
patch: block = 0 ;
rank: 977
score: 96.97608947753906
patch: - ) ;
rank: 977
score: 96.78296915690105
patch: * /
rank: 977
score: 96.41023763020833
patch: . }
rank: 977
score: 96.27951049804688
patch: Math ;
rank: 977
score: 93.33747863769531
patch: area
rank: 978
score: 97.63836669921875
patch: refresh ( ) ;
rank: 978
score: 97.18988037109375
patch: for ++ ;
rank: 978
score: 96.7841796875
patch: = length ;
rank: 978
score: 96.7802963256836
patch: / out ;
rank: 978
score: 96.27069091796875
patch: res .
rank: 978
score: 93.3239517211914
patch: qualifier
rank: 979
score: 97.636376953125
patch: time = 0 ;
rank: 979
score: 96.96163177490234
patch: : * /
rank: 979
score: 96.7803726196289
patch: [ residuals ;
rank: 979
score: 96.2525126139323
patch: try {
rank: 979
score: 93.31790161132812
patch: ?
rank: 980
score: 97.63525390625
patch: finally { try {
rank: 980
score: 96.86241149902344
patch: = rows ;
rank: 980
score: 96.68306477864583
patch: finally {
rank: 980
score: 93.29678344726562
patch: logger
rank: 981
score: 97.14942932128906
patch: = cost ;
rank: 981
score: 96.93827819824219
patch: -- * /
rank: 981
score: 96.76903533935547
patch: += start ;
rank: 981
score: 96.23978678385417
patch: res ;
rank: 981
score: 93.28665161132812
patch: .
rank: 982
score: 97.12425994873047
patch: double . ;
rank: 982
score: 96.923583984375
patch: assert ) ;
rank: 982
score: 93.28228759765625
patch: value
rank: 983
score: 96.76660919189453
patch: = max ;
rank: 983
score: 96.1971944173177
patch: bound ;
rank: 983
score: 96.12681070963542
patch: loop ;
rank: 983
score: 93.24675750732422
patch: left
rank: 984
score: 97.28970336914062
patch: if ( current
rank: 984
score: 96.7628173828125
patch: long ) ;
rank: 984
score: 96.42550659179688
patch: * *
rank: 984
score: 96.03092447916667
patch: ) {
rank: 984
score: 93.2466812133789
patch: array
rank: 985
score: 96.8898696899414
patch: ( residuals )
rank: 985
score: 96.09483846028645
patch: q CaMeL
rank: 985
score: 96.00230916341145
patch: ; }
rank: 985
score: 93.24339294433594
patch: item
rank: 986
score: 96.75617980957031
patch: *= ) ;
rank: 986
score: 96.42477416992188
patch: delta =
rank: 986
score: 96.08695475260417
patch: vector .
rank: 986
score: 96.03030395507812
patch: CaMeL ;
rank: 986
score: 93.19590759277344
patch: count
rank: 987
score: 96.75021362304688
patch: * / }
rank: 987
score: 96.3624267578125
patch: for (
rank: 987
score: 95.95037841796875
patch: = ;
rank: 987
score: 95.89097086588542
patch: ? ;
rank: 987
score: 93.18028259277344
patch: label
rank: 988
score: 97.18118286132812
patch: m ) ;
rank: 988
score: 96.84894561767578
patch: = get ;
rank: 988
score: 96.74057006835938
patch: *= true ;
rank: 988
score: 96.53458658854167
patch: if (
rank: 988
score: 96.07747395833333
patch: bound .
rank: 988
score: 95.88942464192708
patch: ) }
rank: 988
score: 93.17140197753906
patch: field
rank: 989
score: 96.73284912109375
patch: &= 1 ;
rank: 989
score: 96.11963907877605
patch: } }
rank: 989
score: 96.07337443033855
patch: ( )
rank: 989
score: 95.88002522786458
patch: / }
rank: 989
score: 93.16888427734375
patch: result
rank: 990
score: 96.05722045898438
patch: -- *
rank: 990
score: 95.85470581054688
patch: n }
rank: 990
score: 93.14591979980469
patch: sequence
rank: 991
score: 97.13402557373047
patch: m ++ ;
rank: 991
score: 96.03954060872395
patch: value ;
rank: 991
score: 95.84579467773438
patch: . ;
rank: 991
score: 95.80067952473958
patch: = current
rank: 991
score: 93.08729553222656
patch: bounds
rank: 992
score: 97.12413787841797
patch: if ( previous
rank: 992
score: 95.93335978190105
patch: / *
rank: 992
score: 95.83040364583333
patch: n ;
rank: 992
score: 93.07832336425781
patch: expression
rank: 993
score: 95.90464274088542
patch: ) .
rank: 993
score: 95.7545166015625
patch: return ;
rank: 993
score: 93.0317153930664
patch: data
rank: 994
score: 95.74403889973958
patch: length }
rank: 994
score: 95.0501708984375
patch: for
rank: 994
score: 94.7185287475586
patch: =
rank: 994
score: 93.02159881591797
patch: block
rank: 995
score: 96.17441813151042
patch: this .
rank: 995
score: 95.85514322916667
patch: [ ;
rank: 995
score: 94.69209289550781
patch: try
rank: 995
score: 92.99336242675781
patch: entry
rank: 996
score: 95.97171020507812
patch: $NUMBER$ ;
rank: 996
score: 95.78246053059895
patch: N ;
rank: 996
score: 92.99153137207031
patch: buffer
rank: 997
score: 95.68227132161458
patch: = q
rank: 997
score: 94.10308837890625
patch: (
rank: 997
score: 92.98860931396484
patch: words
rank: 998
score: 94.83808135986328
patch: {
rank: 998
score: 92.98790740966797
patch: we
rank: 999
score: 94.33809661865234
patch: double
rank: 999
score: 93.70704650878906
patch: CaMeL
rank: 999
score: 92.98306274414062
patch: string
rank: 1000
score: 94.63206481933594
patch: finally
rank: 1000
score: 94.30879211425781
patch: *
rank: 1000
score: 92.98013305664062
patch: key
