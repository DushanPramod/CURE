rank: 1
score: 99.85079193115234
patch: return true ;
rank: 1
score: 99.61241803850446
patch: return true ; return true ;
rank: 2
score: 99.67837524414062
patch: return false ;
rank: 2
score: 99.55616106305804
patch: return false ; return true ;
rank: 3
score: 99.55682927911931
patch: return is CaMeL Assignment CaMeL Op ( value ) ;
rank: 3
score: 99.49142116970486
patch: return true ; case Token . FUNCTION :
rank: 3
score: 99.46105085100446
patch: return true ; return false ;
rank: 3
score: 99.42428588867188
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 3
score: 99.3690518465909
patch: return is CaMeL Simple CaMeL Operator ( value ) ;
rank: 3
score: 99.33152770996094
patch: if ( true ) return true ;
rank: 3
score: 99.29859924316406
patch: return ; default : return false ;
rank: 4
score: 99.44375610351562
patch: return true ; return true ; ;
rank: 4
score: 99.40845743815105
patch: return is CaMeL Simple CaMeL Operator ? true : true ;
rank: 4
score: 99.34578857421874
patch: is CaMeL Simple CaMeL Operator ? return true ;
rank: 4
score: 99.32405853271484
patch: if ( true ) return false ;
rank: 4
score: 99.29435221354167
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 4
score: 99.28762817382812
patch: return ( true ) ;
rank: 4
score: 99.28762817382812
patch: return true ; } return false ;
rank: 5
score: 99.3908182779948
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 5
score: 99.37263319227431
patch: return false ; case Token . FUNCTION :
rank: 5
score: 99.32875569661458
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value
rank: 5
score: 99.26952015269886
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 5
score: 99.24921875
patch: return true ; }
rank: 5
score: 99.21182250976562
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 6
score: 99.40525817871094
patch: return false ; return true ; ;
rank: 6
score: 99.33733452690973
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 6
score: 99.28015899658203
patch: return true ; ; return true ;
rank: 6
score: 99.22531563895089
patch: return false ; return false ;
rank: 6
score: 99.162158203125
patch: if ( true )
rank: 7
score: 99.36137838924633
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ;
rank: 7
score: 99.24168565538194
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 7
score: 99.21710205078125
patch: return ; default : return true ;
rank: 7
score: 99.2103271484375
patch: return ; return true ;
rank: 7
score: 99.10011291503906
patch: return true ; case Token . ;
rank: 8
score: 99.35397518382354
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ;
rank: 8
score: 99.32834201388889
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 8
score: 99.30706176757812
patch: is CaMeL Simple CaMeL Operator ? return false ;
rank: 8
score: 99.23261176215277
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 8
score: 99.18824259440105
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 8
score: 99.17119598388672
patch: return false ; } return false ;
rank: 8
score: 99.12989044189453
patch: return true ; return - 1 ;
rank: 8
score: 99.08734130859375
patch: return Boolean . TRUE . equals ( true ;
rank: 9
score: 99.35276442307692
patch: return is CaMeL Assignment CaMeL Op ( value , locals ) ;
rank: 9
score: 99.31183624267578
patch: return true ; true return true ;
rank: 9
score: 99.30557454427084
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL
rank: 9
score: 99.17992485894098
patch: return true ; default : return false ;
rank: 9
score: 99.16390228271484
patch: return true ; else return false ;
rank: 9
score: 99.11164855957031
patch: return false ; ; return true ;
rank: 10
score: 99.31964789496527
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 10
score: 99.30096435546875
patch: switch ( value . get CaMeL Type ( ) ) {
rank: 10
score: 99.30010223388672
patch: return true ; return false ; ;
rank: 10
score: 99.14980740017361
patch: throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 10
score: 99.06971571180556
patch: return true ; case Token . true :
rank: 11
score: 99.3380126953125
patch: return is CaMeL Simple CaMeL Operator ( value , locals ) ;
rank: 11
score: 99.30491536458334
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 11
score: 99.28708367598684
patch: return locals . is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ;
rank: 11
score: 99.14235432942708
patch: throw new No CaMeL Such CaMeL Method CaMeL Exception ( ;
rank: 11
score: 99.10401916503906
patch: return true ; else return true ;
rank: 11
score: 99.05955810546875
patch: return Boolean . value CaMeL Of ( true ;
rank: 12
score: 99.33338120404412
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) ) ;
rank: 12
score: 99.28159051192434
patch: return locals . is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ;
rank: 12
score: 99.26576741536458
patch: return true ; return true ; true ;
rank: 12
score: 99.26329888237848
patch: throw new Illegal CaMeL State CaMeL Exception ( Illegal CaMeL State CaMeL Exception . ASSIGN ) ;
rank: 12
score: 99.19152153862848
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 12
score: 99.1381327311198
patch: throw new Illegal CaMeL Argument CaMeL Exception ( true ) ;
rank: 12
score: 99.0613021850586
patch: return ; return ; return true ;
rank: 13
score: 99.3314697265625
patch: return is CaMeL Simple CaMeL Operator ( ) ;
rank: 13
score: 99.28297932942708
patch: return value . get CaMeL Value ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 13
score: 99.27674211774554
patch: return call CaMeL Has CaMeL Local CaMeL Result ? true : true ;
rank: 13
score: 99.25420379638672
patch: return true ; true return false ;
rank: 13
score: 99.18050808376736
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 13
score: 99.13087972005208
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( true ) ;
rank: 13
score: 99.102294921875
patch: return true ; } return true ;
rank: 13
score: 99.0610122680664
patch: return true ; ; if true ;
rank: 13
score: 99.037060546875
patch: if ( true ) { return true ; }
rank: 14
score: 99.32358805338542
patch: return is CaMeL Assignment CaMeL Op ? true : true ;
rank: 14
score: 99.27941022600446
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value ) ;
rank: 14
score: 99.2763607627467
patch: return locals . is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) ) ;
rank: 14
score: 99.24833679199219
patch: return false ; return false ; ;
rank: 14
score: 99.1793212890625
patch: return value . is CaMeL Simple CaMeL Operator ( ) ;
rank: 14
score: 99.13037109375
patch: return true ; default : return true ;
rank: 14
score: 99.09379272460937
patch: return false ; }
rank: 14
score: 99.05789947509766
patch: return true ; ; return false ;
rank: 14
score: 99.0341084798177
patch: if ( true ) {
rank: 15
score: 99.30856323242188
patch: return is CaMeL Simple CaMeL Operator ? false : true ;
rank: 15
score: 99.27770385742187
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 15
score: 99.24586995442708
patch: return true ; true ;
rank: 15
score: 99.1673583984375
patch: return value . get CaMeL Token ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 15
score: 99.1146240234375
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 15
score: 99.0578857421875
patch: return true ; ;
rank: 15
score: 99.04454345703125
patch: { return true ;
rank: 15
score: 99.03189086914062
patch: throw new Runtime CaMeL Exception ( true ) ;
rank: 16
score: 99.30758666992188
patch: return is CaMeL Simple CaMeL Operator ? true : false ;
rank: 16
score: 99.26611328125
patch: return locals . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 16
score: 99.24514431423611
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Parent ( ) ) ;
rank: 16
score: 99.24158477783203
patch: return false ; true return true ;
rank: 16
score: 99.1640380859375
patch: return is CaMeL Simple CaMeL Operator ? true ;
rank: 16
score: 99.108642578125
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ;
rank: 16
score: 99.04397583007812
patch: { else { return true ; }
rank: 16
score: 99.04381103515625
patch: return true ; return true ; return true ;
rank: 16
score: 99.02288818359375
patch: return Boolean . TRUE . equals ( value ;
rank: 17
score: 99.30674833409927
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) ) ;
rank: 17
score: 99.24097789417614
patch: throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 17
score: 99.15420193142361
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 17
score: 99.10204060872395
patch: throw new Illegal CaMeL State CaMeL Exception ( true ) ;
rank: 17
score: 99.042236328125
patch: return false ; else return false ;
rank: 17
score: 99.02709197998047
patch: return ; return ; = true ;
rank: 17
score: 99.01895141601562
patch: return true ; case ;
rank: 18
score: 99.30256204044117
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Node ( ) ) ;
rank: 18
score: 99.26822238498264
patch: return true ; case Token . IN :
rank: 18
score: 99.25859723772321
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 18
score: 99.14916314019098
patch: return value . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 18
score: 99.10140380859374
patch: return true ; case Token . true : ;
rank: 18
score: 99.03401947021484
patch: return false ; } return true ;
rank: 18
score: 99.02030181884766
patch: return true ; return true ; }
rank: 18
score: 99.01400756835938
patch: if ( true ) return Boolean . TRUE ;
rank: 19
score: 99.30219582950367
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) ) ;
rank: 19
score: 99.23117065429688
patch: is CaMeL Simple CaMeL Operator && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 19
score: 99.21847873263889
patch: return false ; return true ; true ;
rank: 19
score: 99.14370388454861
patch: return value . get CaMeL Type ( ) . is CaMeL Immutable CaMeL Value ( ) ;
rank: 19
score: 99.02091217041016
patch: return false ; else return true ;
rank: 19
score: 99.01510184151786
patch: return true ; if true ;
rank: 20
score: 99.26608115748355
patch: return locals . is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) ) ;
rank: 20
score: 99.2461669921875
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 20
score: 99.22328096277573
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent CaMeL
rank: 20
score: 99.08372913707386
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;
rank: 20
score: 99.01734161376953
patch: . return true ; return false ;
rank: 20
score: 99.0126444498698
patch: true ; return true ;
rank: 20
score: 98.98861694335938
patch: return true ? Boolean . TRUE : true ;
rank: 21
score: 99.24201202392578
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value + $STRING$ ) ;
rank: 21
score: 99.0113525390625
patch: return true ; return false ; }
rank: 21
score: 99.00262451171875
patch: return true ; if return true ;
rank: 21
score: 98.97988891601562
patch: if ( ; return true ) ;
rank: 22
score: 99.2464111328125
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value , locals ) ;
rank: 22
score: 99.24108014787946
patch: return value . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 22
score: 99.22042846679688
patch: is CaMeL Simple CaMeL Operator = true ; return true ;
rank: 22
score: 99.18143717447917
patch: return false ; true ;
rank: 22
score: 99.13682047526042
patch: return value . get CaMeL Parent ( ) . is CaMeL Immutable CaMeL Value ( ) ;
rank: 22
score: 99.07069091796875
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ;
rank: 22
score: 99.00261773003473
patch: return true ; return ; return true ;
rank: 22
score: 98.9807861328125
patch: return return false ;
rank: 22
score: 98.97788492838542
patch: if ( ! true ) return false ;
rank: 23
score: 99.26614145132211
patch: return is CaMeL Assignment CaMeL Op ( value , value ) ;
rank: 23
score: 99.24280724158653
patch: return locals . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 23
score: 99.23812662760416
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 23
score: 99.22024739583334
patch: is CaMeL Simple CaMeL Operator ? return true ; case Token . FUNCTION :
rank: 23
score: 99.18016052246094
patch: return true ; return - true ;
rank: 23
score: 99.1349764737216
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ +
rank: 23
score: 99.0703633626302
patch: return ; case Token . true : case Token . ;
rank: 23
score: 98.99560546875
patch: return true ; return return true ;
rank: 23
score: 98.97532958984375
patch: if ( true ) { return false ; }
rank: 23
score: 98.96761322021484
patch: { else { return false ; }
rank: 24
score: 99.2421142578125
patch: return locals . equals ( value . get CaMeL Parent ( ) ) ;
rank: 24
score: 99.23673706054687
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 24
score: 99.20854635799633
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 24
score: 99.17933654785156
patch: return false ; true return false ;
rank: 24
score: 99.13298596833882
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 24
score: 99.04554332386364
patch: throw new Null CaMeL Pointer CaMeL Exception ( ) ;
rank: 24
score: 98.97642299107143
patch: return $STRING$ ; return true ;
rank: 24
score: 98.97501220703126
patch: throw new Assertion CaMeL Error ( $STRING$ ) ;
rank: 25
score: 99.26320237379808
patch: return is CaMeL Simple CaMeL Operator ( value , value ) ;
rank: 25
score: 99.2325927734375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Parent ( ) ) ;
rank: 25
score: 99.20741373697916
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 25
score: 99.17905680338542
patch: return true ; ; ;
rank: 25
score: 99.13277180989583
patch: return locals . is CaMeL Simple CaMeL Operator ( ) ;
rank: 25
score: 99.03857421875
patch: return return true ;
rank: 25
score: 98.96983991350446
patch: return true ; return ; {
rank: 25
score: 98.96881781684027
patch: return true ; case Token . NULL :
rank: 25
score: 98.9517822265625
patch: { return true ; }
rank: 26
score: 99.2393798828125
patch: return value . get CaMeL Type ( ) . equals ( Token . FUNCTION ) ;
rank: 26
score: 99.17015991210937
patch: return true ; true
rank: 26
score: 99.12671576605902
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 26
score: 99.03847249348958
patch: return ;
rank: 26
score: 98.94599914550781
patch: { return true ; return false ;
rank: 27
score: 99.23771587171052
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 27
score: 99.22989595853366
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 27
score: 99.2037124633789
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 27
score: 99.16889953613281
patch: return false ; ; return false ;
rank: 27
score: 99.1224365234375
patch: return value . is CaMeL Assignment CaMeL Op ( ) ;
rank: 27
score: 99.03514515269886
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;
rank: 28
score: 99.25142415364583
patch: return locals . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 28
score: 99.23659261067708
patch: return true ; case Token . ASSIGN :
rank: 28
score: 99.19303624770221
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 28
score: 99.16172960069444
patch: return true ; true ; return true ;
rank: 28
score: 99.12023111979167
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value + $STRING$ +
rank: 28
score: 98.96221923828125
patch: return true ; return ;
rank: 28
score: 98.94200303819444
patch: throw new Runtime CaMeL Exception return true ;
rank: 28
score: 98.9232177734375
patch: if ( ! true )
rank: 29
score: 99.23591694078948
patch: return is CaMeL Assignment CaMeL Op ( value , call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 29
score: 99.22842407226562
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Name ( ) ) ;
rank: 29
score: 99.19117838541666
patch: is CaMeL Simple CaMeL Operator ? return false ; case Token . FUNCTION :
rank: 29
score: 99.14854736328125
patch: return false ; ;
rank: 29
score: 99.11922200520833
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 29
score: 99.03244357638889
patch: return ; default : return false ; }
rank: 29
score: 98.95787353515625
patch: return true ; return true ; if true ;
rank: 29
score: 98.9381815592448
patch: { if return true ;
rank: 29
score: 98.91783142089844
patch: return Boolean . TRUE . true ;
rank: 30
score: 99.23233642578126
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 30
score: 99.22657267252605
patch: is CaMeL Simple CaMeL Operator ( value ) return true ;
rank: 30
score: 99.18973117404514
patch: return true ; case Token . REGEXP :
rank: 30
score: 99.13953508649554
patch: return true ; return null ;
rank: 30
score: 99.11183675130208
patch: return ( false ) ;
rank: 30
score: 99.0283915201823
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + ;
rank: 30
score: 98.95768737792969
patch: return return true ; return true ;
rank: 30
score: 98.937890625
patch: . return true ;
rank: 31
score: 99.24109604779412
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Value ( ) ) ;
rank: 31
score: 99.1851298014323
patch: is CaMeL Simple CaMeL Operator = false ; return true ;
rank: 31
score: 99.13514539930556
patch: return true ; try { return true ;
rank: 31
score: 99.11056357935855
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 31
score: 99.02579752604167
patch: throw new Null CaMeL Pointer CaMeL Exception ( true ) ;
rank: 31
score: 98.95628356933594
patch: true ; return ; = true ;
rank: 31
score: 98.93494415283203
patch: return ; * * * * /
rank: 31
score: 98.90771484375
patch: return Boolean . TRUE ;
rank: 32
score: 99.23978678385417
patch: return ! is CaMeL Simple CaMeL Operator ( value ) ;
rank: 32
score: 99.18479410807292
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . to CaMeL String ( ) ) ;
rank: 32
score: 99.12917073567708
patch: return true ; return false ; true ;
rank: 32
score: 99.10365804036458
patch: System . out . println ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 32
score: 99.02520141601562
patch: return true ; default : return false ; }
rank: 32
score: 98.9454116821289
patch: return true ; return * true ;
rank: 32
score: 98.93233235677083
patch: return true ; } else return false ;
rank: 32
score: 98.90694173177083
patch: return Boolean . TRUE . equals ( ;
rank: 33
score: 99.23232852711396
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Value ( ) ) ;
rank: 33
score: 99.22345581054688
patch: return value . get CaMeL Node ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 33
score: 99.11702473958333
patch: return false ; true ; return true ;
rank: 33
score: 99.10032145182292
patch: return value . is CaMeL Simple CaMeL Operator ? true ;
rank: 33
score: 99.0181376139323
patch: return ; case Token . NULL : case Token . ;
rank: 33
score: 98.941796875
patch: return true ; return true ; return false ;
rank: 33
score: 98.92924499511719
patch: return false ; return false ; }
rank: 33
score: 98.90453229631696
patch: if ( ! true ) {
rank: 34
score: 99.22367640904018
patch: return value . get CaMeL Type ( ) == Token . ASSIGN ;
rank: 34
score: 99.22314453125
patch: throw new Illegal CaMeL State CaMeL Exception ( Token . ASSIGN ) ;
rank: 34
score: 99.18116590711806
patch: return false ; case Token . IN :
rank: 34
score: 99.11189778645833
patch: return false ; ; ;
rank: 34
score: 99.08886040581598
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . is CaMeL Simple CaMeL Operator ( ) ;
rank: 34
score: 98.92534790039062
patch: { return false ;
rank: 34
score: 98.92499542236328
patch: return false ; return - 1 ;
rank: 34
score: 98.904296875
patch: return false ; case Token . ;
rank: 35
score: 99.22819967830883
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Token ( ) ) ;
rank: 35
score: 99.21946207682292
patch: return true ; case Token . FUNCTION : return true ;
rank: 35
score: 99.18071746826172
patch: is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? return true ;
rank: 35
score: 99.08846706814236
patch: return value . get CaMeL Token ( ) . is CaMeL Immutable CaMeL Value ( ) ;
rank: 35
score: 99.01312934027777
patch: if ( true ) { return true ;
rank: 35
score: 98.91855875651042
patch: . return true ; } return false ;
rank: 35
score: 98.91846575055804
patch: return ; { return true ;
rank: 35
score: 98.894970703125
patch: if ( true ) return Boolean . FALSE ;
rank: 36
score: 99.22800580193015
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Token ( ) ) ;
rank: 36
score: 99.2198994954427
patch: return $STRING$ + value . get CaMeL Parent ( ) ;
rank: 36
score: 99.21661376953125
patch: is CaMeL Simple CaMeL Operator || is CaMeL Simple CaMeL Operator ? return true ;
rank: 36
score: 99.10319519042969
patch: if return true ; return true ;
rank: 36
score: 99.088134765625
patch: switch ( value . get CaMeL Type ( ) )
rank: 36
score: 98.9991455078125
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ;
rank: 36
score: 98.91823032924107
patch: return true ; return $STRING$ ;
rank: 36
score: 98.91555447048611
patch: { if ( true ; return false ;
rank: 36
score: 98.88426513671875
patch: return true ; break ; case Token . ;
rank: 37
score: 99.21772112165179
patch: return call CaMeL Has CaMeL Local CaMeL Result ? true : false ;
rank: 37
score: 99.21627371651786
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 37
score: 99.17787080652573
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Local CaMeL
rank: 37
score: 99.08519829644098
patch: return value . to CaMeL String ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 37
score: 98.99693603515625
patch: return true ; default : return true ; }
rank: 37
score: 98.91422526041667
patch: return ; = true ;
rank: 37
score: 98.91089630126953
patch: return true ; true * * /
rank: 37
score: 98.88054741753473
patch: return false ; case Token . true :
rank: 38
score: 99.22137451171875
patch: return ! is CaMeL Assignment CaMeL Op ( value ) ;
rank: 38
score: 99.21617296006944
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? true : true ;
rank: 38
score: 99.10165405273438
patch: return false ; return - true ;
rank: 38
score: 99.08015950520833
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 38
score: 98.99418131510417
patch: return true ; case Token . true : return false ;
rank: 38
score: 98.91227891710069
patch: return true ; return ; if true ;
rank: 38
score: 98.90593126085069
patch: . if return true ; return false ;
rank: 38
score: 98.8720703125
patch: if ( ! true ) return true ;
rank: 39
score: 99.21571109169408
patch: return is CaMeL Assignment CaMeL Op ( value , value . get CaMeL Parent ( ) ) ;
rank: 39
score: 99.21202392578125
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 39
score: 99.1727783203125
patch: is CaMeL Simple CaMeL Operator ? return true ; case Token . IN :
rank: 39
score: 99.07981363932292
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) :
rank: 39
score: 98.99373372395833
patch: return true ; case Token . true : return true ;
rank: 39
score: 98.91163940429688
patch: return false ; return true ; return true ;
rank: 40
score: 99.21919555664063
patch: return is CaMeL Assignment CaMeL Op ( ) ;
rank: 40
score: 99.17108154296875
patch: is CaMeL Simple CaMeL Operator || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 40
score: 99.09436798095703
patch: return false ; return return true ;
rank: 40
score: 99.07767740885417
patch: return value . get CaMeL Node ( ) . is CaMeL Immutable CaMeL Value ( ) ;
rank: 40
score: 98.91115897042411
patch: return 0 ; return true ;
rank: 40
score: 98.89044952392578
patch: { return true ; } else {
rank: 40
score: 98.86855740017361
patch: return false ; default : return false ;
rank: 41
score: 99.2102559407552
patch: return value . get CaMeL Parent ( ) != null ;
rank: 41
score: 99.20405796595982
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ? true : true ;
rank: 41
score: 99.16846466064453
patch: is CaMeL Simple CaMeL Operator && is CaMeL Assignment CaMeL Op ( value ) ;
rank: 41
score: 99.09188503689236
patch: return this . true ; return true ;
rank: 41
score: 98.88874816894531
patch: return return false ; return false ;
rank: 41
score: 98.86467827690973
patch: if ( true true ) return false ;
rank: 42
score: 99.21099384014423
patch: return ( is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 42
score: 99.16806640625
patch: return true ; case Token . ARRAYLIT :
rank: 42
score: 99.08474392361111
patch: return false ; try { return true ;
rank: 42
score: 99.07527240953948
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( $STRING$ ) ;
rank: 42
score: 98.98471069335938
patch: return ; case Token . TARGET : case Token . ;
rank: 42
score: 98.88124302455357
patch: return ; * * * /
rank: 42
score: 98.861328125
patch: System . out . println ( $STRING$ ) ;
rank: 43
score: 99.20720757378473
patch: return value . get CaMeL Name ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 43
score: 99.16496007582721
patch: throw ( Illegal CaMeL State CaMeL Exception ) value . get CaMeL Parent ( ) ;
rank: 43
score: 99.08281114366319
patch: return true ; return true ; true *
rank: 43
score: 99.07402886284723
patch: return value . get CaMeL Next ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 43
score: 98.98350524902344
patch: return ; case Token . true :
rank: 43
score: 98.90532575334821
patch: return this ; return true ;
rank: 43
score: 98.87923855251736
patch: { return true ; } return false ;
rank: 43
score: 98.86083306206598
patch: return Boolean . value CaMeL Of ( ;
rank: 44
score: 99.20608956473214
patch: return call CaMeL Has CaMeL Local CaMeL Result ? false : true ;
rank: 44
score: 99.07968139648438
patch: if return true ; return false ;
rank: 44
score: 99.07251993815105
patch: return locals . is CaMeL Simple CaMeL Operator ? true ;
rank: 44
score: 98.98268636067708
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ + ;
rank: 44
score: 98.90040418836806
patch: return true ; return true ; break ;
rank: 44
score: 98.87920270647321
patch: return true ; true * /
rank: 44
score: 98.85565185546875
patch: parameters . put ( value , true ) ;
rank: 45
score: 99.2030029296875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ,
rank: 45
score: 99.07152642144098
patch: System . err . println ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 45
score: 98.98233371310764
patch: return ; case Token . true : ;
rank: 45
score: 98.89994594029018
patch: return true ; return 1 ;
rank: 45
score: 98.87403700086806
patch: return true ; this . return true ;
rank: 45
score: 98.85355377197266
patch: return true ? true : true ;
rank: 46
score: 99.20388997395834
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 46
score: 99.2012875205592
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value . get CaMeL Parent ( ) ) ;
rank: 46
score: 99.197998046875
patch: return true ; is CaMeL Simple CaMeL Operator ? return true ;
rank: 46
score: 99.07711791992188
patch: return false ; true
rank: 46
score: 99.0683529502467
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 46
score: 98.98186577690973
patch: return ; default : return true ; }
rank: 46
score: 98.87186104910714
patch: return ; } return false ;
rank: 46
score: 98.84664916992188
patch: parameters . put ( true , true ) ;
rank: 47
score: 99.2032406455592
patch: return is CaMeL Simple CaMeL Operator ( value ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 47
score: 99.20090738932292
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Value ( ) ;
rank: 47
score: 99.19793294270833
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( true ) ;
rank: 47
score: 99.16017061121323
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL First CaMeL
rank: 47
score: 99.07083468967014
patch: return false ; return false ; true ;
rank: 47
score: 99.06771511501736
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . is CaMeL Simple CaMeL Operator ? true ;
rank: 47
score: 98.97594105113636
patch: return ; case Token . true : return true ;
rank: 47
score: 98.89895968967014
patch: return true ; ; if return true ;
rank: 47
score: 98.86946105957031
patch: { if return true ; break ;
rank: 47
score: 98.84149169921875
patch: if ( true ) break ;
rank: 48
score: 99.2003662109375
patch: return locals . equals ( value . get CaMeL Type ( ) ) ;
rank: 48
score: 99.06196594238281
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , true ) ;
rank: 48
score: 98.97498668323864
patch: return ; case Token . true : return false ;
rank: 48
score: 98.897509765625
patch: return true ; if true ; return true ;
rank: 48
score: 98.86876085069444
patch: throw new Runtime CaMeL Exception return false ;
rank: 48
score: 98.83518676757812
patch: throw new Runtime CaMeL Exception ( $STRING$ + ;
rank: 49
score: 99.20030799278847
patch: return ( is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 49
score: 99.1996337890625
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 49
score: 99.19391190378289
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ;
rank: 49
score: 99.15904744466145
patch: is CaMeL Simple CaMeL Operator = true ; return false ;
rank: 49
score: 99.06184387207031
patch: return true ; return null ; ;
rank: 49
score: 99.05958387586806
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) :
rank: 49
score: 98.97268676757812
patch: throw new Illegal CaMeL State CaMeL Exception ( ;
rank: 49
score: 98.89747619628906
patch: return - 1 ; return true ;
rank: 49
score: 98.86865234375
patch: return false ; return true ; }
rank: 49
score: 98.8350341796875
patch: throw new Assertion CaMeL Error ( true ) ;
rank: 50
score: 99.19830001027961
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) ) ;
rank: 50
score: 99.19207404641544
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 50
score: 99.15559387207031
patch: is CaMeL Simple CaMeL Operator || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 50
score: 99.05788010817308
patch: return switch ( value . get CaMeL Type ( ) ) {
rank: 50
score: 98.892822265625
patch: return $STRING$ ;
rank: 50
score: 98.86728922526042
patch: { if ( true ) return false ;
rank: 50
score: 98.83402506510417
patch: if ( true true ) return true ;
rank: 51
score: 99.1969706217448
patch: call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 51
score: 99.18937174479167
patch: return true ; case Token . IN : return true ;
rank: 51
score: 99.05914306640625
patch: return false ; return true ; return false ;
rank: 51
score: 99.0562274639423
patch: return ( ! call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 51
score: 98.96902465820312
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + ;
rank: 51
score: 98.88984510633681
patch: return ; = true ; return true ;
rank: 51
score: 98.86090850830078
patch: . return true ; return true ;
rank: 51
score: 98.83387974330357
patch: return true ; case true :
rank: 52
score: 99.19351900540866
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value ) ;
rank: 52
score: 99.18791060014205
patch: case Token . FUNCTION : case Token . REGEXP :
rank: 52
score: 99.055517578125
patch: return $STRING$ . equals ( value . get CaMeL Parent ( ) ) ;
rank: 52
score: 98.96522105823864
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 52
score: 98.88777465820313
patch: return true ; return false ; return true ;
rank: 52
score: 98.83263397216797
patch: if ( true ; return true ;
rank: 53
score: 99.19287109375
patch: return is CaMeL Assignment CaMeL Op ( value ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 53
score: 99.18575032552083
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( $STRING$ ) ;
rank: 53
score: 99.05508761935764
patch: return value . get CaMeL Next ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 53
score: 99.05445692274306
patch: return false ; return true ; true *
rank: 53
score: 98.96506754557292
patch: return true ? Boolean . TRUE : Boolean . FALSE ;
rank: 53
score: 98.8848876953125
patch: if true ; return true ;
rank: 53
score: 98.8275146484375
patch: return Boolean . TRUE == Boolean . FALSE ;
rank: 54
score: 99.19228001644737
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 54
score: 99.19052303538604
patch: return value . get CaMeL Type ( ) . equals ( Token . ASSIGN ) ;
rank: 54
score: 99.14189453125
patch: is CaMeL Simple CaMeL Operator ? return false ; case Token . IN :
rank: 54
score: 99.05387739701705
patch: return call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 54
score: 99.0450439453125
patch: return true ; ; ; return true ;
rank: 54
score: 98.95835367838542
patch: return Boolean . TRUE . boolean CaMeL Value ( ) ;
rank: 54
score: 98.8825454711914
patch: return true ; return true ; else
rank: 54
score: 98.85881042480469
patch: { if ; return true ; }
rank: 54
score: 98.82400512695312
patch: log . error ( $STRING$ + true ) ;
rank: 55
score: 99.1922543174342
patch: return locals . is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) ) ;
rank: 55
score: 99.18942100123355
patch: return is CaMeL Assignment CaMeL Op ( value , value . get CaMeL Type ( ) ) ;
rank: 55
score: 99.18399047851562
patch: return true ; case Token . REGEXP : return true ;
rank: 55
score: 98.95416259765625
patch: ? return true ;
rank: 55
score: 98.87578473772321
patch: return null ; return true ;
rank: 55
score: 98.8583755493164
patch: { if ; * * * /
rank: 55
score: 98.8204345703125
patch: return true ; case Token . EMPTY :
rank: 56
score: 99.18568420410156
patch: return this . call CaMeL Has CaMeL Local CaMeL Result ? true : true ;
rank: 56
score: 99.18338448660714
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 56
score: 99.1386947631836
patch: is CaMeL Simple CaMeL Operator ? return true ; case Token . ARRAYLIT :
rank: 56
score: 99.05164337158203
patch: return value . type ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 56
score: 99.03241729736328
patch: return true ; return - $STRING$ ;
rank: 56
score: 98.9536641438802
patch: return ; case Token . FUNCTION : case Token . ;
rank: 56
score: 98.87528991699219
patch: return false ; ; if true ;
rank: 56
score: 98.85806274414062
patch: return return true ; return false ;
rank: 56
score: 98.81705729166667
patch: return true ; case Token . STRING :
rank: 57
score: 99.18616739908855
patch: return is CaMeL Assignment CaMeL Op ? false : true ;
rank: 57
score: 99.18421223958333
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . to CaMeL
rank: 57
score: 99.1831287202381
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 57
score: 99.13815307617188
patch: is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? return false ;
rank: 57
score: 99.03109741210938
patch: return true ; return - $STRING$ {
rank: 57
score: 98.9534024325284
patch: return true ; case Token . true : true :
rank: 57
score: 98.87388102213542
patch: return ; return true ; return true ;
rank: 57
score: 98.85706329345703
patch: return null ;
rank: 58
score: 99.1845344094669
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Class ( ) ) ;
rank: 58
score: 99.04740905761719
patch: break ; case Token . FUNCTION :
rank: 58
score: 98.95247802734374
patch: return ; case Token . true : true :
rank: 58
score: 98.87376573350694
patch: return true ; return ; = true ;
rank: 58
score: 98.81259155273438
patch: return Collections . singleton CaMeL List ( true ;
rank: 59
score: 99.1834247295673
patch: return locals . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 59
score: 99.1824462890625
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 59
score: 99.13418918185764
patch: return false ; case Token . REGEXP :
rank: 59
score: 99.04381561279297
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ?
rank: 59
score: 99.02007378472223
patch: return true ; true ? return true ;
rank: 59
score: 98.94999186197917
patch: throw new No CaMeL Such CaMeL Method CaMeL Exception ( )
rank: 59
score: 98.8720703125
patch: return true ; return ; return ;
rank: 59
score: 98.84809112548828
patch: return true ; while ( true ;
rank: 59
score: 98.81205444335937
patch: return Boolean . TRUE == Boolean . TRUE ;
rank: 60
score: 99.1828677528783
patch: return locals . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 60
score: 99.17817518446181
patch: throw new Runtime CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 60
score: 99.13180202907986
patch: throw new Illegal CaMeL State CaMeL Exception ( Illegal CaMeL State CaMeL Exception . REGEXP ) ;
rank: 60
score: 99.040283203125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value + $STRING$
rank: 60
score: 99.02001953125
patch: return true ; true ; ; ;
rank: 60
score: 98.94777425130208
patch: ? switch ( value . get CaMeL Type ( ) )
rank: 60
score: 98.845458984375
patch: . return false ; return false ;
rank: 60
score: 98.81173095703124
patch: Arrays . as CaMeL List ( true ) ;
rank: 61
score: 99.1825927734375
patch: return $STRING$ . equals ( value . get CaMeL Type ( ) ) ;
rank: 61
score: 99.17757161458333
patch: case Token . FUNCTION : return true ;
rank: 61
score: 99.13078477647569
patch: is CaMeL Simple CaMeL Operator ? switch ( value . get CaMeL Type ( ) ) {
rank: 61
score: 99.03701985677084
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value , true ) ;
rank: 61
score: 99.01351492745536
patch: return false ; return null ;
rank: 61
score: 98.94369506835938
patch: this . return true ;
rank: 61
score: 98.84281412760417
patch: . if ( true ; return false ;
rank: 61
score: 98.80724487304687
patch: return Boolean . TRUE . equals ( true )
rank: 62
score: 99.17970784505208
patch: return is CaMeL Assignment CaMeL Op ? true : false ;
rank: 62
score: 99.17557198660714
patch: return value . get CaMeL Type ( ) == Token . FUNCTION ;
rank: 62
score: 99.00761413574219
patch: return true ; return true ; true
rank: 62
score: 98.93949381510417
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ; ;
rank: 62
score: 98.86496407645089
patch: return true ; return 0 ;
rank: 62
score: 98.84061431884766
patch: { return false ; return false ;
rank: 62
score: 98.806640625
patch: if ( true true )
rank: 63
score: 99.17954388786765
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Name ( ) ) ;
rank: 63
score: 99.17356962316177
patch: return value . get CaMeL Type ( ) . equals ( Token . REGEXP ) ;
rank: 63
score: 99.03443400065105
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value
rank: 63
score: 99.00583224826389
patch: return false ; ; ; return true ;
rank: 63
score: 98.93834339488636
patch: return Boolean . TRUE . equals ( value ) ;
rank: 63
score: 98.83909098307292
patch: { return false ; }
rank: 63
score: 98.8047607421875
patch: return Boolean . FALSE . equals ( true ;
rank: 64
score: 99.17329487047698
patch: return value . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 64
score: 99.12959798177083
patch: is CaMeL Simple CaMeL Operator ? return true ; case Token . REGEXP :
rank: 64
score: 99.03441443810097
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value +
rank: 64
score: 99.00021362304688
patch: return true ; return - 0 ;
rank: 64
score: 98.93476019965277
patch: return false ; default : return true ;
rank: 64
score: 98.85902404785156
patch: return true ; ; = true ;
rank: 64
score: 98.83907741970486
patch: { if return true ; return false ;
rank: 64
score: 98.80431365966797
patch: if ( ; return false ) ;
rank: 65
score: 99.17907036675348
patch: return locals . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 65
score: 99.172607421875
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 65
score: 99.12856820913461
patch: case Token . ARRAYLIT : case Token . ARRAYLIT :
rank: 65
score: 99.0343246459961
patch: return value . type ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 65
score: 98.99886067708333
patch: return true ; true ; return false ;
rank: 65
score: 98.83873155381944
patch: return false ; } else return false ;
rank: 65
score: 98.79942626953125
patch: parameters . add CaMeL All ( true ) ;
rank: 66
score: 99.1766716452206
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Class ( ) ) ;
rank: 66
score: 99.17333221435547
patch: return value . get CaMeL Type ( ) . is CaMeL Local ( ) ;
rank: 66
score: 99.03322882401316
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? return true ;
rank: 66
score: 98.98497009277344
patch: return true ; true ; * ;
rank: 66
score: 98.91951127485795
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ;
rank: 66
score: 98.85749816894531
patch: true ; return ; return true ;
rank: 66
score: 98.79343668619792
patch: if ( true ) { return false ;
rank: 67
score: 99.17308407738095
patch: return value . get CaMeL Node ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 67
score: 99.17122395833333
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Type ( ) ;
rank: 67
score: 99.1269061748798
patch: else switch ( value . get CaMeL Type ( ) ) {
rank: 67
score: 99.03246392144098
patch: return value . get CaMeL Next ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 67
score: 98.98352813720703
patch: return false ; return true ; true
rank: 67
score: 98.91836547851562
patch: return ; default : System . out . println ( ;
rank: 67
score: 98.85707092285156
patch: return * true ; return true ;
rank: 67
score: 98.83628845214844
patch: throw new Runtime CaMeL Exception true ;
rank: 67
score: 98.79244384765624
patch: throw new Internal CaMeL Error ( $STRING$ ) ;
rank: 68
score: 99.17269558376736
patch: throw new Illegal CaMeL State CaMeL Exception ( Illegal CaMeL State CaMeL Exception . class ) ;
rank: 68
score: 99.17159329927884
patch: return is CaMeL Simple CaMeL Operator ? return true : true ;
rank: 68
score: 99.16990902549342
patch: return value . is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ;
rank: 68
score: 99.1265157063802
patch: case Token . FUNCTION : case Token . ARRAYLIT :
rank: 68
score: 99.03153268914474
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? return true ;
rank: 68
score: 98.98331705729167
patch: return true ; true if return true ;
rank: 68
score: 98.85527801513672
patch: return true ; return - false ;
rank: 68
score: 98.83546956380208
patch: return true ; break ;
rank: 68
score: 98.78894721137152
patch: return false ; case Token . NULL :
rank: 69
score: 99.17263997395834
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 69
score: 99.12527286305146
patch: is CaMeL Simple CaMeL Operator ? throw ( Illegal CaMeL State CaMeL Exception ) value ;
rank: 69
score: 99.02705213758681
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) :
rank: 69
score: 98.98086547851562
patch: return return false ; return true ;
rank: 69
score: 98.9145174893466
patch: return ; case Token . NULL : return false ;
rank: 69
score: 98.83415222167969
patch: return ; * * return true ;
rank: 69
score: 98.78214111328126
patch: switch ( value . get CaMeL Type ( ;
rank: 70
score: 99.16806030273438
patch: return ( call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 70
score: 99.16701146175987
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Parent ( ) ) ;
rank: 70
score: 99.12490844726562
patch: is CaMeL Simple CaMeL Operator = false ; return false ;
rank: 70
score: 99.02646213107639
patch: return value . to CaMeL String ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 70
score: 98.98032633463542
patch: return true ; return true ; ; ;
rank: 70
score: 98.90884399414062
patch: return false ; case Token . true : ;
rank: 70
score: 98.84866333007812
patch: return ; return ; if true ;
rank: 70
score: 98.82716878255208
patch: . if ( true ) return false ;
rank: 71
score: 99.17114868164063
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Value ( ) ) ;
rank: 71
score: 99.16551449424342
patch: return value . is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) ) ;
rank: 71
score: 99.16301413143383
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Name ( ) ) ;
rank: 71
score: 99.124755859375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value ) ;
rank: 71
score: 99.02553304036458
patch: return locals . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 71
score: 98.90181477864583
patch: return ; case Token . READ : case Token . ;
rank: 71
score: 98.82388305664062
patch: return true ; for return true ;
rank: 71
score: 98.77960883246527
patch: if ( true ) return true ; ;
rank: 72
score: 99.02549913194444
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) :
rank: 72
score: 98.97598266601562
patch: return false ; return null ; ;
rank: 72
score: 98.90155584161931
patch: return ; case Token . NULL : return true ;
rank: 72
score: 98.84489610460069
patch: return false ; return ; return true ;
rank: 72
score: 98.82357352120536
patch: throw new Runtime CaMeL Exception ;
rank: 72
score: 98.77871704101562
patch: this . true = true ; return true ;
rank: 73
score: 99.16099789268092
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( $STRING$ ) ;
rank: 73
score: 98.84273681640624
patch: return true ; return ; { return true ;
rank: 73
score: 98.82286834716797
patch: return false ; true * * /
rank: 73
score: 98.77779812282986
patch: return true ; case Token . UNKNOWN :
rank: 74
score: 99.16108842329545
patch: return is CaMeL Simple CaMeL Operator ( locals ) ;
rank: 74
score: 99.15984700520833
patch: return value . get CaMeL Name ( ) . equals ( $STRING$ ) ;
rank: 74
score: 98.82108306884766
patch: return true ; if return false ;
rank: 74
score: 98.7762451171875
patch: return true ; case Token . code :
rank: 75
score: 99.1597567471591
patch: result . throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 75
score: 99.11910671657986
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Type ( ) ) ;
rank: 75
score: 99.02347005208334
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value + $STRING$ +
rank: 75
score: 98.9738540649414
patch: return false ; true ; ; ;
rank: 75
score: 98.83853912353516
patch: return false ; if return true ;
rank: 75
score: 98.82025146484375
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 75
score: 98.77566528320312
patch: return true ? false : true ;
rank: 76
score: 99.11902727399554
patch: throw new Illegal CaMeL State CaMeL Exception ( Token . REGEXP ) ;
rank: 76
score: 99.02287074497768
patch: return ( locals . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 76
score: 98.97288004557292
patch: return true ; ; true return true ;
rank: 76
score: 98.89394124348958
patch: System . out . println ( $STRING$ ; return true ;
rank: 76
score: 98.83208465576172
patch: return ; = ; return true ;
rank: 76
score: 98.77322387695312
patch: return Boolean . value CaMeL Of ( true )
rank: 77
score: 99.15702550551471
patch: return value . get CaMeL Type ( ) . equals ( Token . IN ) ;
rank: 77
score: 99.02121206430289
patch: return is CaMeL Assignment CaMeL Op ( value , true ) ;
rank: 77
score: 98.97244601779514
patch: return super . true ; return true ;
rank: 77
score: 98.89281209309895
patch: return ; case Token . true : case Token . :
rank: 77
score: 98.83181423611111
patch: return true ; true ; if true ;
rank: 77
score: 98.81820678710938
patch: return ; * / return true ;
rank: 77
score: 98.77303466796874
patch: return false ? Boolean . TRUE : true ;
rank: 78
score: 99.15625871930804
patch: return value . is CaMeL Assignment CaMeL Op ( ) : false ;
rank: 78
score: 99.15497504340277
patch: return value . get CaMeL Type ( ) . equals ( Token . ARRAYLIT ) ;
rank: 78
score: 99.11798095703125
patch: return false ; case Token . ARRAYLIT :
rank: 78
score: 99.02084689670139
patch: return true ; case Token . FUNCTION _
rank: 78
score: 98.88766479492188
patch: return ; case Token . LABEL : case Token . ;
rank: 78
score: 98.82912190755208
patch: return ; return false ;
rank: 78
score: 98.81649780273438
patch: return ; } else return false ;
rank: 78
score: 98.76866912841797
patch: if ( true ; return false ;
rank: 79
score: 99.16348266601562
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 79
score: 99.11764865451389
patch: is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? return true : true ;
rank: 79
score: 98.97035725911458
patch: return false ; true ? return true ;
rank: 79
score: 98.88687133789062
patch: return Collections . EMPTY _ LIST . contains ( value ;
rank: 79
score: 98.82407924107143
patch: return true ; return / ;
rank: 79
score: 98.81588309151786
patch: { if return true ; }
rank: 79
score: 98.76766357421874
patch: return Boolean . value CaMeL Of ( value ;
rank: 80
score: 99.15542166573661
patch: return value . get CaMeL Type ( ) != Token . ASSIGN ;
rank: 80
score: 99.1506411903783
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Type ( ) ) ;
rank: 80
score: 99.11710851332721
patch: is CaMeL Simple CaMeL Operator ? return is CaMeL Simple CaMeL Operator ( value ) ;
rank: 80
score: 98.88518732244319
patch: return Boolean . TRUE . equals ( true ) ;
rank: 80
score: 98.82167053222656
patch: return true ; } if true ;
rank: 80
score: 98.81495666503906
patch: return true ; this . true ;
rank: 80
score: 98.766796875
patch: if ( true ;
rank: 81
score: 99.15440609580592
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value . get CaMeL Type ( ) ) ;
rank: 81
score: 99.14900287828948
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 81
score: 99.11639404296875
patch: is CaMeL Simple CaMeL Operator ? case Token . FUNCTION : case Token . ARRAYLIT :
rank: 81
score: 99.01637098524306
patch: return value . get CaMeL Name ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 81
score: 98.9678466796875
patch: return true ; return false ; return false ;
rank: 81
score: 98.88341267903645
patch: return ; default : System . err . println ( ;
rank: 81
score: 98.82144927978516
patch: return true ; true ; return ;
rank: 82
score: 99.15309053308823
patch: call CaMeL Has CaMeL Local CaMeL Result ? return true ; case Token . FUNCTION :
rank: 82
score: 99.11429036458334
patch: if ( value . get CaMeL Type ( ) == Token . FUNCTION )
rank: 82
score: 99.01478407118056
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? false ;
rank: 82
score: 98.96129608154297
patch: return true ; return - $NUMBER$ ;
rank: 82
score: 98.88192749023438
patch: return Collections . empty CaMeL List ( ) ;
rank: 82
score: 98.80978393554688
patch: { return true ; return true ;
rank: 82
score: 98.76609293619792
patch: return true ; case Token . YES :
rank: 83
score: 99.1597900390625
patch: return value . get CaMeL Type ( ) != Token . FUNCTION ;
rank: 83
score: 99.1529312133789
patch: return this . call CaMeL Has CaMeL Local CaMeL Result ? false : true ;
rank: 83
score: 98.9603271484375
patch: return true ; true * * ;
rank: 83
score: 98.81903839111328
patch: return return true ; if true ;
rank: 83
score: 98.7653564453125
patch: report CaMeL Error ( $STRING$ + true ) ;
rank: 84
score: 99.15289916992188
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) : false ;
rank: 84
score: 99.01255289713542
patch: return value . get CaMeL Method ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 84
score: 98.95928192138672
patch: return false ; return return false ;
rank: 84
score: 98.8790771484375
patch: return true ; case Token . NULL : ;
rank: 84
score: 98.81857299804688
patch: return true ; ; return $STRING$ ;
rank: 84
score: 98.80506727430556
patch: this . return true ; return false ;
rank: 85
score: 99.15472412109375
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator CaMeL Type ( ) ;
rank: 85
score: 99.14305355674342
patch: return ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ) ;
rank: 85
score: 98.95750427246094
patch: return true ; while return true ;
rank: 85
score: 98.87196044921875
patch: return ; case ; case Token . true :
rank: 85
score: 98.81461334228516
patch: return ; if ; return true ;
rank: 85
score: 98.80314127604167
patch: return ; * * * * * /
rank: 86
score: 99.14992850167411
patch: return call CaMeL Has CaMeL Local CaMeL Result ? false : false ;
rank: 86
score: 99.1108642578125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL
rank: 86
score: 99.01206568667763
patch: return is CaMeL Assignment CaMeL Op ( value ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 86
score: 98.95449829101562
patch: return true ; true ; true ;
rank: 86
score: 98.86823064630681
patch: throw new Illegal CaMeL Argument CaMeL Exception ( true ;
rank: 86
score: 98.80782063802083
patch: return true ; return true ; return ;
rank: 86
score: 98.76359049479167
patch: return true ; case Token . TARGET :
rank: 87
score: 99.1528564453125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Node ( ) ) ;
rank: 87
score: 99.14983258928571
patch: return value . get CaMeL Type ( ) == Token . REGEXP ;
rank: 87
score: 99.14162279211956
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) . get CaMeL Type ( ) ) ;
rank: 87
score: 99.01064046223958
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 87
score: 98.95399475097656
patch: return true ; true ; ; true
rank: 87
score: 98.86624484592014
patch: return ; default : throw new true ;
rank: 87
score: 98.80780029296875
patch: return true ; true ; if return true ;
rank: 87
score: 98.80032958984376
patch: } return false ;
rank: 88
score: 99.14966498480902
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Name ( ) ) ;
rank: 88
score: 99.11009979248047
patch: is CaMeL Simple CaMeL Operator ? return false ; case Token . ARRAYLIT :
rank: 88
score: 98.95174153645833
patch: return true ; else { return true ;
rank: 88
score: 98.86611599392361
patch: return ; default : throw new ; }
rank: 88
score: 98.804833984375
patch: return false ; return true ; if true ;
rank: 88
score: 98.79875946044922
patch: { return false ; } else {
rank: 88
score: 98.76010131835938
patch: return Boolean . FALSE ;
rank: 89
score: 99.14856538318452
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( value . get CaMeL Parent ( ) ) ;
rank: 89
score: 99.13849840666118
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ;
rank: 89
score: 99.10919189453125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( )
rank: 89
score: 98.94963243272569
patch: return true ; return false ; true *
rank: 89
score: 98.86599731445312
patch: throw new No CaMeL Such CaMeL Method CaMeL Error ( ;
rank: 89
score: 98.80443464006696
patch: return false ; if true ;
rank: 89
score: 98.79456438337054
patch: return true ; break ; }
rank: 90
score: 99.14808872767857
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ( ) ;
rank: 90
score: 99.14781358506944
patch: case Token . IN : return true ;
rank: 90
score: 99.1379638671875
patch: return is CaMeL Assignment CaMeL Op ( value ) || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 90
score: 98.94713677300348
patch: return false ; return true ; ; ;
rank: 90
score: 98.8658447265625
patch: return ; default : throw true ;
rank: 90
score: 98.80061848958333
patch: return ; return 0 ;
rank: 90
score: 98.75636596679688
patch: return true ; return Boolean . TRUE . ;
rank: 91
score: 99.14781358506944
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Parent ( ) ;
rank: 91
score: 99.14752518503289
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 91
score: 99.13668823242188
patch: return is CaMeL Simple CaMeL Operator ? false : false ;
rank: 91
score: 99.00598822699652
patch: return value . get CaMeL Method ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 91
score: 98.94625244140624
patch: return this . true ; ; return false ;
rank: 91
score: 98.79945373535156
patch: return - true ; return true ;
rank: 91
score: 98.79334174262152
patch: throw new Illegal CaMeL State CaMeL Exception ;
rank: 91
score: 98.75575561523438
patch: return true ? Boolean . FALSE : true ;
rank: 92
score: 99.147216796875
patch: return value . is CaMeL Assignment CaMeL Op ( ) : true ;
rank: 92
score: 99.13634723165761
patch: return locals . get ( value . get CaMeL Parent ( ) ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 92
score: 99.10504150390625
patch: is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? return false : true ;
rank: 92
score: 99.00535753038194
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? false ;
rank: 92
score: 98.94525146484375
patch: return false ; true ; return false ;
rank: 92
score: 98.86447579520089
patch: return ; case Token . ;
rank: 92
score: 98.797900390625
patch: return true ; ; return ; = true ;
rank: 92
score: 98.79293387276786
patch: return true ; } return ;
rank: 92
score: 98.75475396050348
patch: try { return true ; } catch ;
rank: 93
score: 99.145361328125
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) : true ;
rank: 93
score: 99.13592888327206
patch: return is CaMeL Simple CaMeL Operator ( locals . get CaMeL Type ( ) ) ;
rank: 93
score: 99.10310363769531
patch: is CaMeL Simple CaMeL Operator || is CaMeL Simple CaMeL Operator ? return false ;
rank: 93
score: 98.94510904947917
patch: return true ; true *
rank: 93
score: 98.86385091145833
patch: return ; case Token . NEW : case Token . ;
rank: 93
score: 98.79761505126953
patch: return ; return true ; break ;
rank: 93
score: 98.79259381975446
patch: return false ; true * /
rank: 93
score: 98.7541259765625
patch: return Boolean . TRUE . true ( ) ;
rank: 94
score: 99.10071518841912
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Current CaMeL
rank: 94
score: 98.9388427734375
patch: return false ; return - 0 ;
rank: 94
score: 98.86356201171876
patch: throw new Null CaMeL Pointer CaMeL Exception ( ;
rank: 94
score: 98.75137939453126
patch: System . out . println ( true ) ;
rank: 95
score: 99.0996826171875
patch: is CaMeL Simple CaMeL Operator ? return false ; case Token . REGEXP :
rank: 95
score: 99.00478108723958
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Local ( ) ;
rank: 95
score: 98.93757629394531
patch: return true ; ; true * ;
rank: 95
score: 98.86188422309027
patch: return ; case Token . NULL : ;
rank: 95
score: 98.78959437779018
patch: { if ; return true ;
rank: 95
score: 98.75128173828125
patch: System . err . println ( $STRING$ ) ;
rank: 96
score: 99.14364858774039
patch: return $STRING$ . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 96
score: 99.14222717285156
patch: return ( value . get CaMeL Type ( ) == Token . FUNCTION ) ;
rank: 96
score: 99.13337925502232
patch: return this . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 96
score: 99.00433819110577
patch: if ( is CaMeL Assignment CaMeL Op ( value ) ) {
rank: 96
score: 98.93690999348958
patch: return true ; ; ? return true ;
rank: 96
score: 98.86141531808036
patch: if ( ; return true ;
rank: 96
score: 98.78664143880208
patch: return false ; this . return true ;
rank: 96
score: 98.78443908691406
patch: return $STRING$ ; ; return true ;
rank: 96
score: 98.74869210379464
patch: if ( true true ) {
rank: 97
score: 99.14207628038194
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Name ( ) ;
rank: 97
score: 99.13266823508523
patch: this . throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 97
score: 99.09521484375
patch: return true ; case Token . FUNCTION : return false ;
rank: 97
score: 99.00371759588069
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ +
rank: 97
score: 98.93365478515625
patch: return false ; return false ; return true ;
rank: 97
score: 98.86083984375
patch: switch ( value . get CaMeL Type ( ) ;
rank: 97
score: 98.78627014160156
patch: { if ( true ; * /
rank: 97
score: 98.74851684570312
patch: synchronized ( true ) { return true ; }
rank: 98
score: 99.14354032628677
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( < Node > ) ;
rank: 98
score: 99.14107666015624
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) : false ;
rank: 98
score: 99.09511311848958
patch: is CaMeL Simple CaMeL Operator || is CaMeL Simple CaMeL Operator ? return true : true ;
rank: 98
score: 98.92730712890625
patch: if return false ; return true ;
rank: 98
score: 98.85957845052083
patch: return ; case Token . STRING : case Token . ;
rank: 98
score: 98.77803178267045
patch: return true ; ; if true ; return true ;
rank: 98
score: 98.74789767795139
patch: if ( true ) return false ; ;
rank: 99
score: 99.14242553710938
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 99
score: 99.14080047607422
patch: return this . call CaMeL Has CaMeL Local CaMeL Result ? true : false ;
rank: 99
score: 99.00286310369319
patch: return is CaMeL Immutable CaMeL Value ( value ) ;
rank: 99
score: 98.92597198486328
patch: return false ; true ; * ;
rank: 99
score: 98.8590799967448
patch: return ; case Token . BLOCK : case Token . ;
rank: 99
score: 98.78539360894098
patch: { return false ; } return false ;
rank: 99
score: 98.74673461914062
patch: return false ; case ;
rank: 100
score: 99.14232235863095
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( true ) ;
rank: 100
score: 99.1401611328125
patch: return is CaMeL Simple CaMeL Operator ? call CaMeL Has CaMeL Local CaMeL Result ? true : true ;
rank: 100
score: 99.0916748046875
patch: if ( value . get CaMeL Type ( ) == Token . REGEXP )
rank: 100
score: 99.00249837239583
patch: return value . to CaMeL String ( ) . equals ( $STRING$ ) ;
rank: 100
score: 98.92544894748264
patch: return this . true ; return false ;
rank: 100
score: 98.85537380642361
patch: ? if ( true ) return true ;
rank: 100
score: 98.78385162353516
patch: return true ; return return false ;
rank: 100
score: 98.77662963867188
patch: return true ; return ; if return true ;
rank: 100
score: 98.74662017822266
patch: if ( true ) throw true ;
rank: 101
score: 99.14066314697266
patch: return ( value . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ) ;
rank: 101
score: 99.13964080810547
patch: return value . get CaMeL Parent ( ) . get CaMeL Type ( ) ;
rank: 101
score: 99.12950375205592
patch: return locals . is CaMeL Simple CaMeL Operator ( value . get CaMeL Value ( ) ) ;
rank: 101
score: 99.0912726907169
patch: is CaMeL Simple CaMeL Operator ? throw ( Illegal CaMeL State CaMeL Exception ) true ;
rank: 101
score: 98.9251708984375
patch: return true ; ; true
rank: 101
score: 98.85382634943181
patch: throw new Illegal CaMeL State CaMeL Exception ( true ;
rank: 101
score: 98.78282819475446
patch: { else return true ; }
rank: 101
score: 98.7764892578125
patch: return true ; ; return ;
rank: 101
score: 98.74575805664062
patch: log . error ( $STRING$ ; return false ;
rank: 102
score: 99.14054565429687
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . to CaMeL String ( ) ) ;
rank: 102
score: 99.13916733685662
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result )
rank: 102
score: 99.0904541015625
patch: is CaMeL Simple CaMeL Operator ? return is CaMeL Assignment CaMeL Op ( value ) ;
rank: 102
score: 98.92513020833333
patch: return true ; ; ; return false ;
rank: 102
score: 98.8522440592448
patch: return ; case Token . NAME : case Token . ;
rank: 102
score: 98.782421875
patch: } return true ;
rank: 102
score: 98.74444580078125
patch: return true ? true : false ;
rank: 103
score: 99.1394904641544
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( Token . REGEXP ) ;
rank: 103
score: 99.13916015625
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( $STRING$ ) ;
rank: 103
score: 99.12704949629934
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Node ( ) ) ;
rank: 103
score: 99.08904351128473
patch: is CaMeL Simple CaMeL Operator ? case Token . REGEXP : case Token . ARRAYLIT :
rank: 103
score: 98.99787055121527
patch: return locals . get CaMeL Token ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 103
score: 98.92494201660156
patch: return false ; return - $STRING$ ;
rank: 103
score: 98.84988403320312
patch: if ( true ) System . out . println ( ;
rank: 103
score: 98.78192138671875
patch: { if ; * * /
rank: 103
score: 98.77421739366319
patch: return ; return true ; if true ;
rank: 104
score: 99.138916015625
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( $STRING$ ) ;
rank: 104
score: 99.13796515213816
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 104
score: 99.12420654296875
patch: return || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 104
score: 99.08894856770833
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 104
score: 98.92373996310764
patch: return true ; return null ; true ;
rank: 104
score: 98.77408175998264
patch: return ; return true ; return false ;
rank: 104
score: 98.74312744140624
patch: return Boolean . TRUE != Boolean . TRUE ;
rank: 105
score: 99.13832310267857
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( true ) ;
rank: 105
score: 99.13690185546875
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 105
score: 99.12371504934211
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) ) ;
rank: 105
score: 99.08762494255515
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Simple CaMeL
rank: 105
score: 98.922607421875
patch: return false ; return false ; return false ;
rank: 105
score: 98.7756576538086
patch: { if true ; return false ;
rank: 105
score: 98.77374822443181
patch: return true ; return true ; if return true ;
rank: 106
score: 99.12314240828805
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) . get CaMeL Type ( ) ) ;
rank: 106
score: 98.9955695657169
patch: return $STRING$ . equals ( value . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 106
score: 98.92030164930556
patch: return false ; true if return true ;
rank: 106
score: 98.77496337890625
patch: { if ( true ; return true ;
rank: 106
score: 98.74058024088542
patch: return true ; case Token . TRUE :
rank: 107
score: 99.1361796061198
patch: return value . get CaMeL Parent ( ) == null ;
rank: 107
score: 99.12294699928977
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 107
score: 98.99526742788461
patch: return is CaMeL Simple CaMeL Operator ( value , true ) ;
rank: 107
score: 98.84431966145833
patch: return true ; case Token . NULL : return false ;
rank: 107
score: 98.77445475260417
patch: return true ; true } return false ;
rank: 107
score: 98.77141723632812
patch: return true ; return false ; if true ;
rank: 107
score: 98.74027099609376
patch: if ; return true ; case Token . ;
rank: 108
score: 99.13512573242187
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Type ( ) ) ;
rank: 108
score: 99.135009765625
patch: switch ( value . get CaMeL Parent ( ) ) {
rank: 108
score: 99.12293590198864
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) + $STRING$ ) ;
rank: 108
score: 99.08465576171875
patch: is CaMeL Simple CaMeL Operator ? is CaMeL Assignment CaMeL Op ? return true ;
rank: 108
score: 98.91504669189453
patch: return true ; true / * ;
rank: 108
score: 98.84417724609375
patch: ? switch ( value . get CaMeL Type ( ) ;
rank: 108
score: 98.73547973632813
patch: return false ; break ; case Token . ;
rank: 109
score: 99.11899928042763
patch: return ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ) ;
rank: 109
score: 98.99296489514802
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( 1 ) ;
rank: 109
score: 98.91413879394531
patch: return null ; return true ; ;
rank: 109
score: 98.84413655598958
patch: return true ; default :
rank: 109
score: 98.77285766601562
patch: return true ; while return false ;
rank: 109
score: 98.76930236816406
patch: return true ; ; return 0 ;
rank: 109
score: 98.73309326171875
patch: Collections . sort ( true , true ) ;
rank: 110
score: 99.13399832589286
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( value . get CaMeL Parent ( ) ) ;
rank: 110
score: 99.11678413722827
patch: return locals . get ( value . get CaMeL Type ( ) ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 110
score: 99.08440755208333
patch: throw new Illegal CaMeL State CaMeL Exception ( Token . ARRAYLIT ) ;
rank: 110
score: 98.91343688964844
patch: return false ; return - $STRING$ {
rank: 110
score: 98.84379069010417
patch: return ; default : throw new Runtime CaMeL Exception ( ;
rank: 110
score: 98.7721176147461
patch: } else { return false ; }
rank: 110
score: 98.76656087239583
patch: return true ; return ; return false ;
rank: 110
score: 98.73263888888889
patch: throw new Assertion CaMeL Error ( ) ;
rank: 111
score: 99.13320025275735
patch: return locals . get ( value ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 111
score: 99.131396484375
patch: return locals . contains ( value . get CaMeL Parent ( ) ) ;
rank: 111
score: 99.11609564887152
patch: return ! is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ;
rank: 111
score: 99.08415004185268
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , $STRING$ ) ;
rank: 111
score: 98.99115862165179
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 111
score: 98.91335720486111
patch: return false ; ; true return true ;
rank: 111
score: 98.77088080512152
patch: . return true ; } return true ;
rank: 111
score: 98.76236979166667
patch: return ; if true ; return true ;
rank: 111
score: 98.73171997070312
patch: return Boolean . TRUE != Boolean . FALSE ;
rank: 112
score: 99.13224792480469
patch: return is CaMeL Simple CaMeL Operator ? Token . FUNCTION : Token . REGEXP ;
rank: 112
score: 99.13114711216518
patch: return value . get CaMeL Type ( ) . next ( ) ;
rank: 112
score: 99.11560872395833
patch: return locals . equals ( value . get CaMeL Node ( ) ) ;
rank: 112
score: 98.91261291503906
patch: return true ; true ; / ;
rank: 112
score: 98.84255981445312
patch: System . out . println ( $STRING$ ; return false ;
rank: 112
score: 98.77006530761719
patch: * * * * return true ;
rank: 112
score: 98.76166449652777
patch: true ; return true ; if true ;
rank: 112
score: 98.7303237915039
patch: if ( false ) return false ;
rank: 113
score: 99.12970377604167
patch: return locals . equals ( call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 113
score: 99.113037109375
patch: return is CaMeL Simple CaMeL Operator ( value , locals . get CaMeL Type ( ) ) ;
rank: 113
score: 98.99081600413604
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , true ) ;
rank: 113
score: 98.91241455078125
patch: return false ; return false ; true *
rank: 113
score: 98.84246215820312
patch: return ; default : throw System . err ;
rank: 113
score: 98.76929473876953
patch: { else if return true ; }
rank: 113
score: 98.76101684570312
patch: return false ; if true ; return true ;
rank: 113
score: 98.73026529947917
patch: return true ; case Token . NONE :
rank: 114
score: 99.1286288174716
patch: case Token . IN : case Token . REGEXP :
rank: 114
score: 99.12704467773438
patch: return value . get CaMeL Value ( ) != null ;
rank: 114
score: 99.11244895241477
patch: return is CaMeL Assignment CaMeL Op ( locals ) ;
rank: 114
score: 99.07947591145833
patch: return value . get CaMeL Type ( ) == Token . ARRAYLIT :
rank: 114
score: 98.99051920572917
patch: return Node CaMeL Util . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 114
score: 98.91195339626736
patch: return true ; return true ; ; *
rank: 114
score: 98.84150695800781
patch: return ; default : throw new ;
rank: 114
score: 98.75962829589844
patch: true ; if ; = true ;
rank: 114
score: 98.72896575927734
patch: value = true ; return true ;
rank: 115
score: 99.1253153483073
patch: return call CaMeL Has CaMeL Local CaMeL Result ( ) ;
rank: 115
score: 98.98897298177083
patch: throw new Illegal CaMeL Argument CaMeL Exception ( value . get CaMeL Parent ( ) ) ;
rank: 115
score: 98.91193389892578
patch: return false ; true * * ;
rank: 115
score: 98.8409423828125
patch: if ( true ) ; return true ;
rank: 115
score: 98.76754421657986
patch: . if return true ; return true ;
rank: 115
score: 98.75877162388393
patch: return value ; return true ;
rank: 115
score: 98.712646484375
patch: return Collections . singleton ( true ) ;
rank: 116
score: 99.1224609375
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result . return true ;
rank: 116
score: 99.07848103841145
patch: case Token . REGEXP : case Token . ARRAYLIT :
rank: 116
score: 98.90987396240234
patch: return true ; true ; true {
rank: 116
score: 98.83665882457386
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( true ;
rank: 116
score: 98.76624891493056
patch: { return true ; } return true ;
rank: 116
score: 98.75732421875
patch: return true ; ; if ; return true ;
rank: 116
score: 98.71204376220703
patch: body = true ; return true ;
rank: 117
score: 99.12483520507813
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( true ) ;
rank: 117
score: 99.11046832540761
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) . get CaMeL Type ( ) ) ;
rank: 117
score: 98.98823765345982
patch: return ( value . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 117
score: 98.90914577907986
patch: return true ; true { return true ;
rank: 117
score: 98.8345458984375
patch: return false ; default : return true ; }
rank: 117
score: 98.7658920288086
patch: return ; * * return false ;
rank: 117
score: 98.75713433159723
patch: return true ; return true + true ;
rank: 117
score: 98.70686340332031
patch: if ( false ) return true ;
rank: 118
score: 99.1102294921875
patch: return || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 118
score: 99.07671760110294
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Max CaMeL
rank: 118
score: 98.90837266710069
patch: return true ; true else return true ;
rank: 118
score: 98.8323974609375
patch: return true ; default : throw new true ;
rank: 119
score: 99.12340494791667
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( 1 ) ;
rank: 119
score: 99.11845397949219
patch: return value . get CaMeL Type ( ) . length ( ) > 0 ;
rank: 119
score: 99.109619140625
patch: return is CaMeL Simple CaMeL Operator ( true ) ;
rank: 119
score: 99.07574821920956
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Int CaMeL
rank: 119
score: 98.76313612196181
patch: . if ( true ; return true ;
rank: 119
score: 98.70565032958984
patch: if ( true ) { true ;
rank: 120
score: 99.1180419921875
patch: return false ; case Token . ASSIGN :
rank: 120
score: 98.98416137695312
patch: return value . type ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 120
score: 98.90734100341797
patch: return false ; while return true ;
rank: 120
score: 98.83013916015625
patch: return ; case Token . NULL :
rank: 120
score: 98.76017761230469
patch: } else { return true ; }
rank: 120
score: 98.75637478298611
patch: return false ; ; if return true ;
rank: 120
score: 98.70327419704861
patch: throw new Assertion CaMeL Error ( $STRING$ ;
rank: 121
score: 99.12215169270833
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Assignment CaMeL Op ? true : true ;
rank: 121
score: 99.11691623263889
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) {
rank: 121
score: 99.10951741536458
patch: return is CaMeL Assignment CaMeL Op ( value ) ; }
rank: 121
score: 99.0719482421875
patch: if ( value . get CaMeL Type ( ) == Token . IN )
rank: 121
score: 98.9840087890625
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ) ;
rank: 121
score: 98.90696716308594
patch: return false ; true ; true ;
rank: 121
score: 98.82867986505681
patch: this . return true ; default : return false ;
rank: 121
score: 98.75863986545139
patch: { if ; * * * * /
rank: 121
score: 98.75436401367188
patch: return ; return ; return false ;
rank: 121
score: 98.70215521918402
patch: return true ; case Token . OTHER :
rank: 122
score: 99.1167984008789
patch: return value . get CaMeL Type ( ) != Token . FUNCTION : false ;
rank: 122
score: 99.07176298253677
patch: throw ( Illegal CaMeL State CaMeL Exception ) value . get CaMeL Type ( ) ;
rank: 122
score: 98.9032211303711
patch: return false ; true ; ; true
rank: 122
score: 98.82575017755681
patch: if ( true ) return true ; return true ;
rank: 122
score: 98.7548828125
patch: . if return true ;
rank: 122
score: 98.75359235491071
patch: return true ; ; true ;
rank: 122
score: 98.69822862413194
patch: return Boolean . TRUE . & true ;
rank: 123
score: 99.12120768229167
patch: case Token . FUNCTION : is CaMeL Simple CaMeL Operator ? return true ;
rank: 123
score: 99.11585286458333
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value , value ) ;
rank: 123
score: 99.10940551757812
patch: is CaMeL Simple CaMeL Operator ( value ) return false ;
rank: 123
score: 98.98118760850694
patch: return value . to CaMeL String ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 123
score: 98.90245225694444
patch: return false ; else { return true ;
rank: 123
score: 98.82321506076389
patch: return ; case true : return true ;
rank: 123
score: 98.75432671440973
patch: . return return true ; return false ;
rank: 123
score: 98.74973842075893
patch: return false ; return ; {
rank: 123
score: 98.69721984863281
patch: return Boolean . TRUE . equals ;
rank: 124
score: 99.12093098958333
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 124
score: 99.11393519810268
patch: return true ; case Token . FUNCTION : case Token . REGEXP :
rank: 124
score: 99.10870768229167
patch: if ( is CaMeL Assignment CaMeL Op ( value ) ) return true ;
rank: 124
score: 99.07122039794922
patch: if ( value . get CaMeL Type ( ) == Token . ARRAYLIT )
rank: 124
score: 98.97900390625
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ?
rank: 124
score: 98.90233764648437
patch: return this . true ; ; return true ;
rank: 124
score: 98.74894714355469
patch: return return 1 ; return true ;
rank: 125
score: 99.1188720703125
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 125
score: 99.1138916015625
patch: return this . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 125
score: 98.8992919921875
patch: return true ; true ; ;
rank: 125
score: 98.8186279296875
patch: return true ; case Token . true : true
rank: 125
score: 98.7529525756836
patch: return true ; break ; true ;
rank: 125
score: 98.74786376953125
patch: return ; if ; = true ;
rank: 125
score: 98.69033377511161
patch: return true ; case Token ;
rank: 126
score: 99.11842447916666
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( 0 ) ;
rank: 126
score: 98.97887073863636
patch: return ( is CaMeL Assignment CaMeL Op ( value )
rank: 126
score: 98.89422607421875
patch: return true ; true true * ;
rank: 126
score: 98.81727600097656
patch: return true ; default : throw ;
rank: 126
score: 98.75267028808594
patch: return true ; } else return ;
rank: 126
score: 98.74781145368304
patch: return 1 ; return true ;
rank: 127
score: 99.11299213610198
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) +
rank: 127
score: 99.06890869140625
patch: return value . get CaMeL Type ( ) == Token . IN :
rank: 127
score: 98.97806803385417
patch: return locals . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 127
score: 98.81449584960937
patch: synchronized ( this ) { return true ; }
rank: 127
score: 98.75164794921875
patch: return ; * * /
rank: 127
score: 98.74441528320312
patch: return false ; return * true ;
rank: 127
score: 98.68927873883929
patch: return Boolean . TRUE . ;
rank: 128
score: 99.11669921875
patch: return is CaMeL Simple CaMeL Operator ? return true ;
rank: 128
score: 99.11295358758224
patch: return value . get CaMeL Value ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 128
score: 99.10690174932066
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) . get CaMeL Type ( ) ) ;
rank: 128
score: 99.06832885742188
patch: is CaMeL Simple CaMeL Operator && is CaMeL Simple CaMeL Operator ? return true ;
rank: 128
score: 98.97652859157986
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ?
rank: 128
score: 98.89141845703125
patch: return true ; ; *
rank: 128
score: 98.81380208333333
patch: this . return false ;
rank: 128
score: 98.74318625710227
patch: return true ; return - 1 ; return true ;
rank: 128
score: 98.68858506944444
patch: return true ; case Token . VOID :
rank: 129
score: 99.11556203741776
patch: throw Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 129
score: 99.11293431332237
patch: return locals . is CaMeL Assignment CaMeL Op ( value . get CaMeL Node ( ) ) ;
rank: 129
score: 99.06689453125
patch: return false ; case Token . FUNCTION : return true ;
rank: 129
score: 98.89085388183594
patch: if return false ; return false ;
rank: 129
score: 98.81346546519886
patch: return ; case Token . true : ; break ;
rank: 129
score: 98.74276123046874
patch: return ; if return true ; return true ;
rank: 129
score: 98.68743896484375
patch: if ; return true ;
rank: 130
score: 99.11165073939732
patch: call CaMeL Has CaMeL Local CaMeL Result = true ; return true ;
rank: 130
score: 99.10396321614583
patch: return $STRING$ . equals ( value . get CaMeL Node ( ) ) ;
rank: 130
score: 99.0662841796875
patch: throw ( Illegal CaMeL State CaMeL Exception ) is CaMeL Simple CaMeL Operator ( ) ;
rank: 130
score: 98.89014350043402
patch: return true ; try { return false ;
rank: 130
score: 98.8116455078125
patch: synchronized ( this ) { return true ;
rank: 130
score: 98.68650817871094
patch: if ( ; else return true ;
rank: 131
score: 99.11439424402573
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( Token . FUNCTION ) ;
rank: 131
score: 99.1108169555664
patch: return value . get CaMeL Type ( ) == Token . FUNCTION : false ;
rank: 131
score: 99.10021441915761
patch: return locals . get ( value . get CaMeL Node ( ) ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 131
score: 99.06472439236111
patch: is CaMeL Simple CaMeL Operator ( value ) is CaMeL Simple CaMeL Operator ( value ) ;
rank: 131
score: 98.88751898871527
patch: return true ; return true ; true {
rank: 131
score: 98.74894496372768
patch: return null ; return false ;
rank: 131
score: 98.74254014756944
patch: return false ; return true ; break ;
rank: 131
score: 98.68628801618304
patch: if ( true ) true ;
rank: 132
score: 99.11000061035156
patch: return this . call CaMeL Has CaMeL Local CaMeL Result ? false : false ;
rank: 132
score: 99.10007838199013
patch: return ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) ) ) ;
rank: 132
score: 99.06447347005208
patch: call CaMeL Has CaMeL Local CaMeL Result ? return false ;
rank: 132
score: 98.88740234375
patch: return true ; true * / return false ;
rank: 132
score: 98.74592590332031
patch: return true ; true / * /
rank: 132
score: 98.741943359375
patch: return true ; return - 1 + true ;
rank: 133
score: 99.1095703125
patch: if ( call CaMeL Has CaMeL Local CaMeL Result ) { return true ;
rank: 133
score: 99.09995680588942
patch: return value . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 133
score: 98.88637288411458
patch: return false ; true *
rank: 133
score: 98.8028231534091
patch: if ( true ) { return true ; } ;
rank: 133
score: 98.7457784016927
patch: return return false ; }
rank: 133
score: 98.74166531032986
patch: return false ; return ; if true ;
rank: 133
score: 98.67913140190973
patch: return true ; case Token . FALSE :
rank: 134
score: 99.10933430989583
patch: return false ; call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 134
score: 99.06430951286765
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Last CaMeL
rank: 134
score: 98.97368028428819
patch: return locals . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 134
score: 98.88330841064453
patch: return false ; return - $NUMBER$ ;
rank: 134
score: 98.80061645507813
patch: return true ; case Token . TARGET : ;
rank: 134
score: 98.74542236328125
patch: . return false ; } return false ;
rank: 134
score: 98.73951416015625
patch: return true ; ; return ; return true ;
rank: 134
score: 98.66851128472223
patch: if ( true ) { true ; }
rank: 135
score: 99.11324055989583
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( ( Node ) value ) ;
rank: 135
score: 99.108935546875
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) : false ;
rank: 135
score: 99.09760485197368
patch: return is CaMeL Assignment CaMeL Op ( value , locals . get CaMeL Type ( ) ) ;
rank: 135
score: 99.06331089564732
patch: return value . get CaMeL Type ( ) == Token . FUNCTION :
rank: 135
score: 98.97201538085938
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , false ) ;
rank: 135
score: 98.88067626953125
patch: return true ; ; true { return false ;
rank: 135
score: 98.74336242675781
patch: return true ; for return false ;
rank: 135
score: 98.66707356770833
patch: return true ; case Token . DEFAULT :
rank: 136
score: 99.09726186899039
patch: return is CaMeL Simple CaMeL Operator CaMeL Type ( value ) ;
rank: 136
score: 99.062158203125
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value . get CaMeL
rank: 136
score: 98.97039473684211
patch: return locals . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 136
score: 98.88050537109375
patch: return true ; true else { return false ;
rank: 136
score: 98.79383850097656
patch: return ; default : break ; }
rank: 136
score: 98.74302673339844
patch: { return ; } return false ;
rank: 136
score: 98.66400909423828
patch: if ( true ) throw new ;
rank: 137
score: 99.10758463541667
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ( value ) ;
rank: 137
score: 99.0621566772461
patch: is CaMeL Simple CaMeL Operator ? is CaMeL Assignment CaMeL Op ? return false ;
rank: 137
score: 98.97032165527344
patch: return value . get CaMeL Parent ( ) . is CaMeL Local ( ) ;
rank: 137
score: 98.88023376464844
patch: return true ; ; return null ;
rank: 137
score: 98.79174126519098
patch: return true ; default : throw true ;
rank: 137
score: 98.66130828857422
patch: return true ? false : false ;
rank: 138
score: 99.11173502604167
patch: return value . get CaMeL Node ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( $STRING$ ) ;
rank: 138
score: 99.10715157645089
patch: return value . get CaMeL Parent ( ) . next ( ) ;
rank: 138
score: 99.0958740234375
patch: return ( value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 138
score: 99.06187947591145
patch: switch ( locals . get CaMeL Type ( ) ) {
rank: 138
score: 98.96842687270221
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ) ;
rank: 138
score: 98.88003540039062
patch: return true ; true ; ; return false ;
rank: 138
score: 98.79052124023437
patch: return true ; default : throw new ; }
rank: 138
score: 98.73740844726562
patch: return true ; if true ; return false ;
rank: 138
score: 98.65934753417969
patch: return Boolean . TRUE == true ;
rank: 139
score: 99.11118570963542
patch: return true ; case Token . ASSIGN : return true ;
rank: 139
score: 99.1064682006836
patch: if ( call CaMeL Has CaMeL Local CaMeL Result ) { return true ; }
rank: 139
score: 99.09571373980978
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ;
rank: 139
score: 99.06174045138889
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Node ( ) ) ;
rank: 139
score: 98.878759765625
patch: return this . true ; return true ; ;
rank: 139
score: 98.78965541294643
patch: if ( ; return false ;
rank: 139
score: 98.74103461371527
patch: . return true ; else return false ;
rank: 139
score: 98.6580581665039
patch: return false ? true : true ;
rank: 140
score: 99.10549490792411
patch: return ( value . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 140
score: 99.09342193603516
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , value ) ;
rank: 140
score: 98.87824249267578
patch: return true ; ; / * ;
rank: 140
score: 98.7867431640625
patch: return ; case ; default : return true ;
rank: 140
score: 98.74089050292969
patch: return ; * / return false ;
rank: 140
score: 98.73512486049107
patch: return true ; return * ;
rank: 140
score: 98.65798950195312
patch: return true ; if ( true )
rank: 141
score: 99.1103283110119
patch: return value . get CaMeL Node ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( true ) ;
rank: 141
score: 99.10494290865384
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 141
score: 99.09202816611842
patch: return is CaMeL Assignment CaMeL Op ( value , value . get CaMeL Node ( ) ) ;
rank: 141
score: 98.96534946986607
patch: return value . get CaMeL Parent CaMeL Node ( ) != null ;
rank: 141
score: 98.87759738498264
patch: return false ; return true ; ; *
rank: 141
score: 98.78636169433594
patch: return ; default : if ( ;
rank: 141
score: 98.73990207248264
patch: return true ; } } return false ;
rank: 141
score: 98.73506927490234
patch: return ; true ; return true ;
rank: 142
score: 99.10404205322266
patch: return value . get CaMeL Parent ( ) . get CaMeL Value ( ) ;
rank: 142
score: 99.05984157986111
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Parent ( ) ) ;
rank: 142
score: 98.96382863898026
patch: return return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 142
score: 98.7852783203125
patch: return false ; default : return false ; }
rank: 142
score: 98.73960367838542
patch: return true ; true * * * /
rank: 142
score: 98.73422241210938
patch: return ; if true ;
rank: 142
score: 98.65736897786458
patch: . if ( true ) return true ;
rank: 143
score: 99.10955810546875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Id ( ) ) ;
rank: 143
score: 99.10397518382354
patch: return is CaMeL Immutable CaMeL Value ( value . get CaMeL Parent ( ) ) ;
rank: 143
score: 99.09181043836806
patch: return ! is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) ) ;
rank: 143
score: 99.05939797794117
patch: is CaMeL Simple CaMeL Operator ? throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 143
score: 98.96343994140625
patch: call CaMeL Has CaMeL Local CaMeL Result ) return true ;
rank: 143
score: 98.8736572265625
patch: return return true ; ;
rank: 143
score: 98.78417290581598
patch: synchronized ( true ) { return true ;
rank: 143
score: 98.73370361328125
patch: return true ; if true ; break ;
rank: 143
score: 98.65509033203125
patch: for ( Node node : true )
rank: 144
score: 99.1038818359375
patch: return value . get CaMeL Parent ( ) == 0 ;
rank: 144
score: 99.091796875
patch: return is CaMeL Simple CaMeL Operator ( value ) ; }
rank: 144
score: 99.05934053308823
patch: is CaMeL Simple CaMeL Operator = true ; is CaMeL Simple CaMeL Operator = true ;
rank: 144
score: 98.96309621710526
patch: return return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 144
score: 98.87335205078125
patch: return true ; true * / return true ;
rank: 144
score: 98.78370250355114
patch: return true ; case ; case Token . true :
rank: 144
score: 98.73359510633681
patch: return true ; return - - 1 ;
rank: 144
score: 98.65228949652777
patch: return true ; case Token . BLOCK :
rank: 145
score: 99.10927512428977
patch: case Token . REGEXP : case Token . REGEXP :
rank: 145
score: 99.10385131835938
patch: return new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 145
score: 99.05658428485577
patch: return is CaMeL Simple CaMeL Operator ( locals , value ) ;
rank: 145
score: 98.87312316894531
patch: return false ; ; true * ;
rank: 145
score: 98.78315565321181
patch: Collections . empty CaMeL List ( ) ;
rank: 145
score: 98.73825509207589
patch: return true ; else return ;
rank: 145
score: 98.73348236083984
patch: true return true ; return true ;
rank: 145
score: 98.65121459960938
patch: parameters . add ( true ) ;
rank: 146
score: 99.10881958007812
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Token ( ) ) ;
rank: 146
score: 99.10255737304688
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 146
score: 99.05490112304688
patch: case Token . IN : case Token . ARRAYLIT :
rank: 146
score: 98.78271484375
patch: return true ; ; case Token . true :
rank: 146
score: 98.73442840576172
patch: * * * * * * /
rank: 146
score: 98.73247528076172
patch: true ; if ; return true ;
rank: 146
score: 98.64718967013889
patch: return true ; case Token . NAME :
rank: 147
score: 99.10167236328125
patch: return is CaMeL Simple CaMeL Operator ? call CaMeL Has CaMeL Local CaMeL Result ? true : false ;
rank: 147
score: 99.0536247702206
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , value ) ;
rank: 147
score: 98.96105278862848
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) {
rank: 147
score: 98.87154388427734
patch: return true ; ; true ; ;
rank: 147
score: 98.78086159446023
patch: this . return true ; default : return true ;
rank: 147
score: 98.73379516601562
patch: return true ; } else if ;
rank: 147
score: 98.73213026258681
patch: return true ; return * return true ;
rank: 147
score: 98.64593505859375
patch: return true ; default : throw new ;
rank: 148
score: 99.10158284505208
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Length ( ) ;
rank: 148
score: 98.96029324001736
patch: return value . get CaMeL Token ( ) . is CaMeL Assignment CaMeL Op ( ) :
rank: 148
score: 98.8709945678711
patch: return true ; true ; * /
rank: 148
score: 98.77913208007813
patch: return return true ; default : return false ;
rank: 148
score: 98.73173692491319
patch: throw new Illegal CaMeL Argument CaMeL Exception ;
rank: 148
score: 98.73128255208333
patch: return true ; ; return true ; ;
rank: 148
score: 98.64329698350694
patch: if ( ! true ; return true ;
rank: 149
score: 99.10787963867188
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + name . get CaMeL Parent ( ) ) ;
rank: 149
score: 99.10042572021484
patch: return ( value . get CaMeL Type ( ) == Token . ASSIGN ) ;
rank: 149
score: 99.08779568142361
patch: return is CaMeL Simple CaMeL Operator ( is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 149
score: 99.05328728170956
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Parent CaMeL
rank: 149
score: 98.87039184570312
patch: return false ; true / * ;
rank: 149
score: 98.77797241210938
patch: return ; case Token . NULL : true :
rank: 149
score: 98.73118082682292
patch: return true ; break ; return false ;
rank: 149
score: 98.73063151041667
patch: return true ; return this . true ;
rank: 149
score: 98.63551161024306
patch: return true ; case Token . READ :
rank: 150
score: 99.10762532552083
patch: is CaMeL Simple CaMeL Operator ? return is CaMeL Simple CaMeL Operator ? true : true ;
rank: 150
score: 99.0992431640625
patch: return value . get CaMeL Type ( ) . contains ( $STRING$ ) ;
rank: 150
score: 99.08734893798828
patch: return is CaMeL Simple CaMeL Operator ( value , < locals . length ) ;
rank: 150
score: 99.05074055989583
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( value , value ) ;
rank: 150
score: 98.95922173394098
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . is CaMeL Assignment CaMeL Op ( ) ;
rank: 150
score: 98.77738813920455
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ )
rank: 150
score: 98.73025173611111
patch: return true ; } else return true ;
rank: 151
score: 99.10706787109375
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 151
score: 99.05045942826705
patch: throw ( Illegal CaMeL State CaMeL Exception ) value ;
rank: 151
score: 98.95905897352431
patch: return value . get CaMeL Class ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 151
score: 98.86827256944444
patch: return false ; ; ? return true ;
rank: 151
score: 98.72715250651042
patch: return true ; if ; return true ;
rank: 151
score: 98.63492257254464
patch: if ( ! true true )
rank: 152
score: 99.10550944010417
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Class ( ) ) ;
rank: 152
score: 99.09903114720395
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( $STRING$ ) ;
rank: 152
score: 99.04848225911458
patch: return false ; case Token . FUNCTION : return false ;
rank: 152
score: 98.77577903053977
patch: this . return true ; case Token . true :
rank: 152
score: 98.72697448730469
patch: return ; return true ; return ;
rank: 152
score: 98.72638702392578
patch: return false ; while ( true ;
rank: 152
score: 98.63233184814453
patch: if ( ! true true ) {
rank: 153
score: 99.09899139404297
patch: return value . get CaMeL Type ( ) == Token . FUNCTION : true ;
rank: 153
score: 99.047119140625
patch: return true ; case Token . ARRAYLIT : return true ;
rank: 153
score: 98.95821804470486
patch: return locals . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 153
score: 98.86448838975694
patch: return false ; return true ; true {
rank: 153
score: 98.77366638183594
patch: if ( ! ; return true ;
rank: 153
score: 98.72552490234375
patch: return false ; return ;
rank: 153
score: 98.72423553466797
patch: { if true ; return true ;
rank: 153
score: 98.6318359375
patch: return false ; case Token . EMPTY :
rank: 154
score: 99.1043701171875
patch: throw new Illegal CaMeL State CaMeL Exception ( Node . ASSIGN ) ;
rank: 154
score: 99.08439636230469
patch: return is CaMeL Assignment CaMeL Op ( value , < locals . length ) ;
rank: 154
score: 98.95697342722039
patch: } return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 154
score: 98.8622817993164
patch: return true ; true return null ;
rank: 154
score: 98.72492133246527
patch: return true ; ; if true * /
rank: 154
score: 98.72252400716145
patch: return return true ; }
rank: 154
score: 98.62943267822266
patch: log . error ( $STRING$ ) ;
rank: 155
score: 99.09828287760416
patch: return value . get CaMeL Type ( ) . equals ( $STRING$ ) ;
rank: 155
score: 99.08396402994792
patch: result = is CaMeL Assignment CaMeL Op ( value ) ;
rank: 155
score: 99.04049862132354
patch: case Token . FUNCTION : switch ( value . get CaMeL Type ( ) ) {
rank: 155
score: 98.95585801866319
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ( ) :
rank: 155
score: 98.86192491319444
patch: return true ; ; true return false ;
rank: 155
score: 98.767626953125
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( )
rank: 155
score: 98.72371419270833
patch: true ; return true ; return true ;
rank: 155
score: 98.72118377685547
patch: if ; * * * * /
rank: 156
score: 99.09759521484375
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 156
score: 99.08391723632812
patch: return is CaMeL Simple CaMeL Operator ( value , < locals . get CaMeL Type ( ) ) ;
rank: 156
score: 98.8616714477539
patch: return true ; ; ; ; ;
rank: 156
score: 98.7232998934659
patch: return true ; ; return true ; return true ;
rank: 156
score: 98.72007921006944
patch: . return true ; return false ; }
rank: 156
score: 98.62818739149306
patch: return false ; case Token . STRING :
rank: 157
score: 99.0966567993164
patch: return value . get CaMeL Type ( ) . get CaMeL Value ( ) ;
rank: 157
score: 99.08360706676136
patch: || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 157
score: 99.0401252297794
patch: is CaMeL Simple CaMeL Operator = false ; is CaMeL Simple CaMeL Operator = true ;
rank: 157
score: 98.95418294270833
patch: return switch ( value . get CaMeL Type ( ) )
rank: 157
score: 98.76683349609375
patch: return ; case ; default : return false ;
rank: 157
score: 98.72290802001953
patch: return 0 ; ; return true ;
rank: 157
score: 98.7197265625
patch: return false ; this . true ;
rank: 157
score: 98.62632242838542
patch: throw new Runtime CaMeL Exception ( true ;
rank: 158
score: 99.10172729492187
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Class ( ) ) ;
rank: 158
score: 99.0964864095052
patch: return value . get CaMeL Parent ( ) == false ;
rank: 158
score: 98.9534200032552
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . true ;
rank: 158
score: 98.85748291015625
patch: return false ; true ; / ;
rank: 158
score: 98.76618303571429
patch: return ; } return true ;
rank: 158
score: 98.71946716308594
patch: * * * / return true ;
rank: 158
score: 98.62423366970486
patch: return true ; case Token . GLOBAL :
rank: 159
score: 99.10035536024306
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( ( Node ) value ) ;
rank: 159
score: 99.09561767578126
patch: return ( value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 159
score: 99.08250025699013
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ( value ) : true ;
rank: 159
score: 98.85746002197266
patch: return true ; true / / ;
rank: 159
score: 98.76579145951705
patch: return false ; case Token . true : true :
rank: 159
score: 98.72122628348214
patch: return ; return true ; ;
rank: 159
score: 98.71906280517578
patch: { return false ; return true ;
rank: 160
score: 99.09552323190789
patch: return value . get CaMeL Type ( ) . has CaMeL Type ( Token . FUNCTION ) ;
rank: 160
score: 99.0809814453125
patch: return is CaMeL Simple CaMeL Operator ( value ) || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 160
score: 98.85531277126736
patch: return false ; ; ; return false ;
rank: 160
score: 98.7191162109375
patch: return ; return ; return 0 ;
rank: 160
score: 98.62210422092014
patch: return TRUE . equals ( true ) ;
rank: 161
score: 99.09968118106617
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( < Token > ) ;
rank: 161
score: 99.08066628196023
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Qualified CaMeL Name ( ) ) ;
rank: 161
score: 99.03777606670673
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value ;
rank: 161
score: 98.9520263671875
patch: return is CaMeL Assignment CaMeL Op ( value , false ) ;
rank: 161
score: 98.8538818359375
patch: return true ; ; ?
rank: 161
score: 98.7603988647461
patch: return true ; default : break ;
rank: 161
score: 98.71891479492187
patch: return true ; ; if ; = true ;
rank: 161
score: 98.6207275390625
patch: if ( ; else return false ;
rank: 162
score: 99.09966169084821
patch: return value . get CaMeL Type ( ) != Token . REGEXP ;
rank: 162
score: 99.09423149956598
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( )
rank: 162
score: 98.85198974609375
patch: return false ; true else return true ;
rank: 162
score: 98.75901963975694
patch: return true ; / * return true ;
rank: 162
score: 98.71812438964844
patch: true ; return true ; break ;
rank: 162
score: 98.71725027901786
patch: * * * * * /
rank: 162
score: 98.61691720145089
patch: if ( true ) continue ;
rank: 163
score: 99.09408408717105
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ,
rank: 163
score: 99.07865397135417
patch: result = is CaMeL Simple CaMeL Operator ( value ) ;
rank: 163
score: 99.03728889016544
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Base CaMeL
rank: 163
score: 98.84922485351562
patch: return false ; true * / return false ;
rank: 163
score: 98.75841175426136
patch: if ( true ) return true ; return false ;
rank: 163
score: 98.71802867542614
patch: return true ; if return true ; return true ;
rank: 163
score: 98.71417236328125
patch: { return true ; return false ; }
rank: 164
score: 99.09915364583334
patch: case Token . IN : is CaMeL Simple CaMeL Operator ? return true ;
rank: 164
score: 99.09345160590277
patch: return value . get CaMeL Parent ( ) . get CaMeL Value ( ) != null ;
rank: 164
score: 99.03701602711396
patch: is CaMeL Simple CaMeL Operator = true ; is CaMeL Simple CaMeL Operator = false ;
rank: 164
score: 98.75782359730114
patch: if ( true ) return false ; return true ;
rank: 164
score: 98.71692657470703
patch: return true ; ; return 1 ;
rank: 164
score: 98.71358235677083
patch: { return false ; } return true ;
rank: 164
score: 98.61525472005208
patch: Hash CaMeL Set < Node > true ;
rank: 165
score: 99.0983657836914
patch: return value . is CaMeL Simple CaMeL Operator ( ) ? true : true ;
rank: 165
score: 99.09312528722427
patch: return ( call CaMeL Has CaMeL Local CaMeL Result ) ; case Token . FUNCTION :
rank: 165
score: 99.07725941051136
patch: return is CaMeL Assignment CaMeL Op ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 165
score: 99.03688401442308
patch: throw new $STRING$ + value . get CaMeL Parent ( ) ;
rank: 165
score: 98.95036235608552
patch: { return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 165
score: 98.84850463867187
patch: return this . true ; true return false ;
rank: 165
score: 98.71626790364583
patch: return true ; return false ; break ;
rank: 165
score: 98.71269226074219
patch: return ; / * return true ;
rank: 165
score: 98.6131591796875
patch: return true ; break ; case ;
rank: 166
score: 99.07712273848684
patch: return is CaMeL Simple CaMeL Operator ( ) || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 166
score: 99.03628540039062
patch: return true . is CaMeL Simple CaMeL Operator ( ) ;
rank: 166
score: 98.95022101151316
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ? return true ;
rank: 166
score: 98.84821912977431
patch: return true ; true ? return false ;
rank: 166
score: 98.75308990478516
patch: return true ; default : return ;
rank: 166
score: 98.71250915527344
patch: return this ;
rank: 166
score: 98.61259629991319
patch: return true ; default : break false ;
rank: 167
score: 99.09295043945312
patch: return ( value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 167
score: 99.07695569490132
patch: return ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) ) ) ;
rank: 167
score: 98.84801567925348
patch: return true ; return false ; ; ;
rank: 167
score: 98.75281524658203
patch: return ; default ; return false ;
rank: 167
score: 98.71216430664063
patch: return true ; return true ; return $STRING$ ;
rank: 167
score: 98.61200823102679
patch: this . true = true ;
rank: 168
score: 99.09568956163194
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Message ( ) ) ;
rank: 168
score: 99.09215545654297
patch: return value . get CaMeL Type ( ) != Token . FUNCTION : true ;
rank: 168
score: 99.07655736019737
patch: return locals . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 168
score: 99.03568761488971
patch: is CaMeL Simple CaMeL Operator ? case Token . FUNCTION : case Token . REGEXP :
rank: 168
score: 98.9495490579044
patch: return $STRING$ . starts CaMeL With ( value . get CaMeL Parent ( ) ) ;
rank: 168
score: 98.84664577907986
patch: return false ; try { return false ;
rank: 168
score: 98.75171915690105
patch: / * return true ;
rank: 168
score: 98.71074676513672
patch: return false ; return true ; else
rank: 168
score: 98.61027308872768
patch: if ( true && true )
rank: 169
score: 99.09163992745536
patch: return value . is CaMeL Simple CaMeL Operator ( ) : false ;
rank: 169
score: 99.07620442708334
patch: return is CaMeL Simple CaMeL Operator ( value , Token . FUNCTION ) ;
rank: 169
score: 99.03500705295139
patch: is CaMeL Simple CaMeL Operator = true ;
rank: 169
score: 98.94852701822917
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value , false ) ;
rank: 169
score: 98.84528350830078
patch: return false ; true ; true {
rank: 169
score: 98.750732421875
patch: return ; default : return false ; ;
rank: 169
score: 98.71050153459821
patch: return $NUMBER$ ; return true ;
rank: 169
score: 98.70906066894531
patch: return false ; for return true ;
rank: 169
score: 98.60739135742188
patch: if ( true true ;
rank: 170
score: 99.09461030505952
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( $STRING$ ) ;
rank: 170
score: 99.0757344563802
patch: return is CaMeL Simple CaMeL Operator ( value , ) ;
rank: 170
score: 99.03491928998162
patch: is CaMeL Simple CaMeL Operator ? throw new Illegal CaMeL State CaMeL Exception ( $STRING$ +
rank: 170
score: 98.94848022460937
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$
rank: 170
score: 98.8439208984375
patch: return false ; true ; ; return false ;
rank: 170
score: 98.7502685546875
patch: return true ; default : return false ; ;
rank: 170
score: 98.70946155894886
patch: return true ; return true ; ; return true ;
rank: 170
score: 98.60601806640625
patch: if ( value != null ) {
rank: 171
score: 99.09073638916016
patch: return value . get CaMeL Parent ( ) . get CaMeL Name ( ) ;
rank: 171
score: 99.07561848958333
patch: if ( is CaMeL Simple CaMeL Operator ( value ) ) return true ;
rank: 171
score: 99.03450150923295
patch: throw ( Illegal CaMeL State CaMeL Exception ) true ;
rank: 171
score: 98.94774518694196
patch: return $STRING$ + value . get CaMeL Parent CaMeL Node ( ) ;
rank: 171
score: 98.84382847377232
patch: return false ; true ; ;
rank: 171
score: 98.7090087890625
patch: return ; return true ; if return true ;
rank: 171
score: 98.70748901367188
patch: . return false ;
rank: 171
score: 98.60594346788194
patch: Set < Node > true = true ;
rank: 172
score: 99.09312133789062
patch: is CaMeL Simple CaMeL Operator : return true ;
rank: 172
score: 99.03438313802083
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Parent CaMeL
rank: 172
score: 98.94746668198529
patch: throw super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , true ) ;
rank: 172
score: 98.84366455078126
patch: return true ; true else { return true ;
rank: 172
score: 98.74971147017045
patch: System . out . println ( $STRING$ + value ;
rank: 172
score: 98.70879255022321
patch: return true ; return ; ;
rank: 172
score: 98.706787109375
patch: return ; / * * * /
rank: 172
score: 98.60587565104167
patch: try { return true ; } finally {
rank: 173
score: 99.0724628155048
patch: return is CaMeL Simple CaMeL Operator ? return false : true ;
rank: 173
score: 99.03286563648896
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( value , value ) ;
rank: 173
score: 98.842041015625
patch: return true ; return true ; ; true
rank: 173
score: 98.74971147017045
patch: return ; case Token . NONE : return false ;
rank: 173
score: 98.70857543945313
patch: return true ; return * / return true ;
rank: 173
score: 98.70655653211806
patch: { if return true ; return true ;
rank: 174
score: 99.07112943209134
patch: return is CaMeL Assignment CaMeL Op ? return true : true ;
rank: 174
score: 99.03285845588235
patch: is CaMeL Simple CaMeL Operator ? switch ( value . get CaMeL Type ( ) )
rank: 174
score: 98.94727918836806
patch: return value . get CaMeL Result ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 174
score: 98.74871826171875
patch: if ( true ) return ;
rank: 174
score: 98.70752825055804
patch: return true ; return this ;
rank: 174
score: 98.7055892944336
patch: return ; } else return true ;
rank: 174
score: 98.60374450683594
patch: if ( ! true ) break ;
rank: 175
score: 99.09105727251838
patch: return value . get CaMeL Value ( ) . equals ( Token . FUNCTION ) ;
rank: 175
score: 99.07021658761161
patch: if ( value . get CaMeL Type ( ) == Token . FUNCTION
rank: 175
score: 99.03166961669922
patch: is CaMeL Simple CaMeL Operator ? throw new Illegal CaMeL State CaMeL Exception ( $STRING$
rank: 175
score: 98.74583851207386
patch: return ; case Token . NONE : return true ;
rank: 175
score: 98.70665825737848
patch: true ; if true ; return true ;
rank: 175
score: 98.7051010131836
patch: . return false ; return true ;
rank: 175
score: 98.60364786783855
patch: if ( true ) ;
rank: 176
score: 98.94618626644737
patch: return value . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( $STRING$ ) ;
rank: 176
score: 98.84081420898437
patch: return true ; ; true { return true ;
rank: 176
score: 98.74396623883929
patch: return ; default : break ;
rank: 176
score: 98.70576695033482
patch: return $STRING$ ; return false ;
rank: 176
score: 98.60167100694444
patch: return true ; case Token . CONTINUE :
rank: 177
score: 99.08982220818015
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( Node . FUNCTION ) ;
rank: 177
score: 99.08843122209821
patch: return value . get CaMeL Type ( ) . close ( ) ;
rank: 177
score: 99.07010323660714
patch: return $STRING$ . equals ( value . get CaMeL Parent ( ) . get CaMeL Type ( ) ) ;
rank: 177
score: 99.03061092601104
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent (
rank: 177
score: 98.9455925436581
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ) ;
rank: 177
score: 98.84027777777777
patch: if return true ; return true ; ;
rank: 177
score: 98.7432352701823
patch: try { return true ;
rank: 177
score: 98.705322265625
patch: true ; if return true ; return true ;
rank: 177
score: 98.70162624782986
patch: return false ; true } return false ;
rank: 177
score: 98.60104709201389
patch: return true ; case Token . mode :
rank: 178
score: 99.08943899054276
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Assignment CaMeL Op ( value ) : true ;
rank: 178
score: 99.08806501116071
patch: if ( call CaMeL Has CaMeL Local CaMeL Result ) return true ;
rank: 178
score: 99.07002563476563
patch: return is CaMeL Simple CaMeL Operator ( value , < value . get CaMeL Type ( ) ) ;
rank: 178
score: 99.03057861328125
patch: case Token . ARRAYLIT : case Token . REGEXP :
rank: 178
score: 98.94539602179276
patch: return is CaMeL Assignment CaMeL Op ( value ) . is CaMeL Immutable CaMeL Value ( ) ;
rank: 178
score: 98.83912658691406
patch: return false ; true true * ;
rank: 178
score: 98.7413818359375
patch: initial CaMeL Value = true ; return true ;
rank: 178
score: 98.70395729758523
patch: return true ; return true ; } return true ;
rank: 178
score: 98.70144314236111
patch: return true ; } if return true ;
rank: 178
score: 98.60016547309027
patch: return Boolean . FALSE . equals ( ;
rank: 179
score: 99.08668348524306
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Number ( ) ;
rank: 179
score: 99.0693359375
patch: return value . is CaMeL Simple CaMeL Operator ? true : false ;
rank: 179
score: 98.94510904947917
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Assignment CaMeL Op (
rank: 179
score: 98.83892144097223
patch: return true ; true true return true ;
rank: 179
score: 98.703857421875
patch: return true ; return - 1 - true ;
rank: 179
score: 98.70073106553819
patch: return ; * * * return true ;
rank: 180
score: 99.08853853665866
patch: return false ; is CaMeL Simple CaMeL Operator ? return true ;
rank: 180
score: 99.086669921875
patch: return value . get CaMeL Name ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 180
score: 99.0289776141827
patch: case Token . ARRAYLIT : case Token . OBJECTLIT :
rank: 180
score: 98.94475446428571
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value + $STRING$
rank: 180
score: 98.83877563476562
patch: return this . true ; true return true ;
rank: 180
score: 98.73908025568181
patch: return Collections . EMPTY _ LIST . contains ( ;
rank: 180
score: 98.70333523220486
patch: return false ; return ; = true ;
rank: 180
score: 98.69810485839844
patch: return false ; if return false ;
rank: 180
score: 98.59861924913194
patch: return true ; case Token . TYPE :
rank: 181
score: 99.06879069010417
patch: case Token . FUNCTION : case Token . ARRAYLIT : return true ;
rank: 181
score: 99.02880859375
patch: return value . get CaMeL Type ( ) == Token . REGEXP :
rank: 181
score: 98.94449655633224
patch: return return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 181
score: 98.83846028645833
patch: return false ; return null ; true ;
rank: 181
score: 98.70267333984376
patch: return true ; return true ; return 1 ;
rank: 181
score: 98.69788360595703
patch: return ; * * * * ;
rank: 181
score: 98.59854465060764
patch: return true ; case Token . OR :
rank: 182
score: 99.08739556206598
patch: case Token . REGEXP : return true ;
rank: 182
score: 99.06748046875
patch: return ( value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 182
score: 98.94251773231908
patch: return return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 182
score: 98.83788045247395
patch: return false ; ; true
rank: 182
score: 98.737060546875
patch: return return true ; case Token . true :
rank: 182
score: 98.70201764787946
patch: return ; if return true ;
rank: 182
score: 98.69770812988281
patch: } else { if return true ;
rank: 182
score: 98.59844970703125
patch: boolean true = false ; return true ;
rank: 183
score: 99.08636005108173
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 183
score: 99.08557846966912
patch: return ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) )
rank: 183
score: 99.02735188802083
patch: return value . get CaMeL Type ( ) != Token . ARRAYLIT :
rank: 183
score: 98.94222861842105
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( )
rank: 183
score: 98.83616943359375
patch: return false ; true else { return false ;
rank: 183
score: 98.73683860085227
patch: return true ; default : throw System . err ;
rank: 183
score: 98.69860076904297
patch: return true ; ; return ; {
rank: 183
score: 98.69441986083984
patch: return ; * * * * :
rank: 184
score: 99.08606635199652
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Name ( ) ) ;
rank: 184
score: 99.08550415039062
patch: return $STRING$ + value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 184
score: 99.06549431295956
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ; return true ;
rank: 184
score: 98.93963944284539
patch: { return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 184
score: 98.83544921875
patch: return true ; return false ; true
rank: 184
score: 98.73649597167969
patch: return ; case Token . TARGET :
rank: 184
score: 98.69825962611607
patch: true true ; return true ;
rank: 184
score: 98.69302707248264
patch: . if ; * * * * /
rank: 184
score: 98.5976333618164
patch: if ( true ) return TRUE ;
rank: 185
score: 99.08577473958333
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Exception ( ) ) ;
rank: 185
score: 99.08526252297794
patch: return value . get CaMeL Type ( ) . equals ( Node . IN ) ;
rank: 185
score: 99.06510416666667
patch: return is CaMeL Simple CaMeL Operator ( is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 185
score: 99.02577311197916
patch: if ( value . get CaMeL Type ( ) != Token . FUNCTION )
rank: 185
score: 98.93959397536058
patch: return value . set CaMeL Type ( Token . ASSIGN ) ;
rank: 185
score: 98.83497924804688
patch: return false ; ; true { return false ;
rank: 185
score: 98.69821166992188
patch: return true + true ;
rank: 185
score: 98.68948025173611
patch: { if ( true ) return true ;
rank: 185
score: 98.59748670789931
patch: return true ; case Token . WINDOW :
rank: 186
score: 99.085205078125
patch: / / call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 186
score: 99.08486328125
patch: return true . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 186
score: 99.06510202508224
patch: return is CaMeL Simple CaMeL Operator ? true : is CaMeL Simple CaMeL Operator ( value ) ;
rank: 186
score: 99.02564194623162
patch: is CaMeL Simple CaMeL Operator || is CaMeL Simple CaMeL Operator ? true : true ;
rank: 186
score: 98.93820529513889
patch: System . out . println ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 186
score: 98.83338623046875
patch: return false ; true * / return true ;
rank: 186
score: 98.73296564275569
patch: throw new Null CaMeL Pointer CaMeL Exception ( true ;
rank: 186
score: 98.69819859095982
patch: return false ; return $STRING$ ;
rank: 186
score: 98.68634033203125
patch: { if ; return false ; }
rank: 187
score: 99.084130859375
patch: case Token . REGEXP : is CaMeL Simple CaMeL Operator ? return true ;
rank: 187
score: 99.06400299072266
patch: if ( value . get CaMeL Type ( ) . equals ( Token . FUNCTION
rank: 187
score: 99.02522786458333
patch: if ( is CaMeL Simple CaMeL Operator ( value ) )
rank: 187
score: 98.9378597861842
patch: { return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 187
score: 98.8325424194336
patch: return false ; return - false ;
rank: 187
score: 98.69798278808594
patch: return true ; return ; true ;
rank: 187
score: 98.68522135416667
patch: . return true ; }
rank: 187
score: 98.5968017578125
patch: return false ; case true :
rank: 188
score: 99.08345301011029
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result ?
rank: 188
score: 99.08316379123264
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Runtime ( ) ) ;
rank: 188
score: 99.06328938802083
patch: return is CaMeL Assignment CaMeL Op ( value , Token . FUNCTION ) ;
rank: 188
score: 99.02509099786931
patch: is CaMeL Simple CaMeL Operator ? return true ; }
rank: 188
score: 98.93733723958333
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? $STRING$ ;
rank: 188
score: 98.83140055338542
patch: return false ; true { return true ;
rank: 188
score: 98.69792175292969
patch: return 0 ;
rank: 188
score: 98.68509928385417
patch: return true ; true * return false ;
rank: 188
score: 98.5945536295573
patch: if ( ! true ;
rank: 189
score: 99.08280436197917
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ( ) ;
rank: 189
score: 99.08247593470982
patch: return value . is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 189
score: 99.02456665039062
patch: is CaMeL Simple CaMeL Operator ? return is CaMeL Simple CaMeL Operator ( ) ;
rank: 189
score: 98.93638209292763
patch: return value . get CaMeL Next ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 189
score: 98.83112335205078
patch: return true ; return true ; case
rank: 189
score: 98.69771902901786
patch: return true ; return name ;
rank: 189
score: 98.68456353081598
patch: { else { return true ; } }
rank: 189
score: 98.59441460503473
patch: boolean true = true ; return true ;
rank: 190
score: 99.08262803819444
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Value ( ) ) ;
rank: 190
score: 99.0623779296875
patch: return && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 190
score: 99.02455767463235
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Qualified CaMeL
rank: 190
score: 98.93623860677083
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ? false ;
rank: 190
score: 98.82984415690105
patch: return true ; true ?
rank: 190
score: 98.730224609375
patch: return ; case Token . true : true : ;
rank: 190
score: 98.69546169704861
patch: return ; = true ; return false ;
rank: 190
score: 98.59429931640625
patch: sb . append ( true ) ;
rank: 191
score: 99.08228895399306
patch: return value . get CaMeL Parent ( ) . get CaMeL Name ( ) . equals (
rank: 191
score: 99.08194173177084
patch: return children . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 191
score: 99.02310180664062
patch: if ( is CaMeL Assignment CaMeL Op ( value ) )
rank: 191
score: 98.93571641710069
patch: return locals . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 191
score: 98.82918875558036
patch: return true ; ; ; ;
rank: 191
score: 98.72894287109375
patch: return ; default : throw Context . ; }
rank: 191
score: 98.6944808959961
patch: return ; return true ; true ;
rank: 191
score: 98.68350655691964
patch: return false ; } return ;
rank: 191
score: 98.59377712673611
patch: return true ; case Token . ; ;
rank: 192
score: 99.08175048828124
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ? true : true ;
rank: 192
score: 99.08090389476104
patch: return false ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result )
rank: 192
score: 99.06203099300987
patch: return is CaMeL Assignment CaMeL Op ( ) || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 192
score: 99.022705078125
patch: return false . is CaMeL Simple CaMeL Operator ( ) ;
rank: 192
score: 98.9350521689967
patch: { return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 192
score: 98.72817993164062
patch: if ( true ) { return ;
rank: 192
score: 98.694189453125
patch: return true ; ; if true + true ;
rank: 192
score: 98.68331909179688
patch: { if ( true ; break ;
rank: 192
score: 98.59334564208984
patch: if ( ! true && true )
rank: 193
score: 99.08062065972223
patch: return value . get CaMeL Type ( ) . equals ( Node . ARRAYLIT ) ;
rank: 193
score: 99.02177734375
patch: is CaMeL Simple CaMeL Operator ? return true ; case Token . ASSIGN :
rank: 193
score: 98.82902308872768
patch: throw false ; return true ;
rank: 193
score: 98.69381374782986
patch: return true ; ; return - 1 ;
rank: 193
score: 98.68329535590277
patch: return super . true ; return false ;
rank: 193
score: 98.59279959542411
patch: for ( Node ; ; )
rank: 194
score: 99.08072238498264
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Value ( ) ) ;
rank: 194
score: 99.07950592041016
patch: return ( value . get CaMeL Type ( ) != Token . FUNCTION ) ;
rank: 194
score: 99.0615478515625
patch: return is CaMeL Assignment CaMeL Op ( value , < locals . get CaMeL Type ( ) ) ;
rank: 194
score: 98.93471808182566
patch: } return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 194
score: 98.8281021118164
patch: return false ; ; / * ;
rank: 194
score: 98.72718505859375
patch: return ; case Token . true : true ;
rank: 194
score: 98.69325561523438
patch: return true ; return / ; return true ;
rank: 194
score: 98.59080674913194
patch: if ( true ) { break ; }
rank: 195
score: 99.0792236328125
patch: return $STRING$ + value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 195
score: 99.06153157552083
patch: return locals . equals ( value . get CaMeL Value ( ) ) ;
rank: 195
score: 98.93158922697368
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 195
score: 98.827880859375
patch: return true ; true * ; ;
rank: 195
score: 98.69144112723214
patch: true ; if return true ;
rank: 195
score: 98.68196614583333
patch: return false ; } else return true ;
rank: 195
score: 98.59063720703125
patch: return true ; case Token . class :
rank: 196
score: 99.08008422851563
patch: return is CaMeL Simple CaMeL Operator ? evaluates CaMeL To CaMeL Local CaMeL Value ? true : true ;
rank: 196
score: 99.0792172080592
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) +
rank: 196
score: 98.93150916466347
patch: return call CaMeL Has CaMeL Local CaMeL Result ( true ) ;
rank: 196
score: 98.82660590277777
patch: return true ; true * return true ;
rank: 196
score: 98.72616916232639
patch: if ( true ) ; return false ;
rank: 196
score: 98.69118923611111
patch: return true ; ; return true ; }
rank: 196
score: 98.68189493815105
patch: return false ; break ;
rank: 196
score: 98.59052191840277
patch: Arrays . as CaMeL List ( true )
rank: 197
score: 99.07929920014881
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 197
score: 99.07901000976562
patch: return value . get CaMeL Type ( ) . length ( ) == 0 ;
rank: 197
score: 99.0609842936198
patch: return && is CaMeL Assignment CaMeL Op ( value ) ;
rank: 197
score: 99.02065604073661
patch: break ; case Token . FUNCTION : case Token . ARRAYLIT :
rank: 197
score: 98.7259188565341
patch: return ; case Token . TARGET : return true ;
rank: 197
score: 98.69064767020089
patch: return true ; return * /
rank: 197
score: 98.68128313337054
patch: } else if return false ;
rank: 197
score: 98.59029134114583
patch: return true ; == Boolean . TRUE ;
rank: 198
score: 99.07887776692708
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Result ( ) ;
rank: 198
score: 99.06066080729167
patch: if ( is CaMeL Assignment CaMeL Op ( value ) ) return false ;
rank: 198
score: 99.0205437155331
patch: return ( value . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ) ;
rank: 198
score: 98.93074544270833
patch: return value . get CaMeL Method ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 198
score: 98.82460327148438
patch: return this . return true ; return false ;
rank: 198
score: 98.72432454427083
patch: return ; case Token . TARGET : ;
rank: 198
score: 98.690478515625
patch: return false ; return ; { return true ;
rank: 198
score: 98.67987060546875
patch: return true ; break ; break ;
rank: 198
score: 98.58905707465277
patch: ? if ( true ) return false ;
rank: 199
score: 99.07917336856617
patch: return this . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 199
score: 99.06057400173611
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 199
score: 99.01876627604166
patch: return true ; evaluates CaMeL To CaMeL Local CaMeL Value ? return true ;
rank: 199
score: 98.93003934972427
patch: return value CaMeL Of ( value ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 199
score: 98.82243347167969
patch: if return true ; return null ;
rank: 199
score: 98.71799538352273
patch: return ; case Token . true : case Token ;
rank: 199
score: 98.69021606445312
patch: return ; = true ; return ;
rank: 199
score: 98.67758178710938
patch: { return true ; break ; }
rank: 199
score: 98.58883327907986
patch: return true ; case Token . WARNING :
rank: 200
score: 99.07891167534723
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Type ( ) ) ;
rank: 200
score: 99.07837785993304
patch: / * call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 200
score: 99.0603759765625
patch: return $STRING$ . equals ( value . get CaMeL Value ( ) ) ;
rank: 200
score: 99.01811667049633
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Local CaMeL
rank: 200
score: 98.92892937911184
patch: return value . get CaMeL Type ( ) ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 200
score: 98.822119140625
patch: return true ; true / * return false ;
rank: 200
score: 98.68931579589844
patch: return ; return ; + true ;
rank: 200
score: 98.67726135253906
patch: { if ( true ) true ;
rank: 200
score: 98.58870697021484
patch: return false ? false : true ;
rank: 201
score: 99.0787841796875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Root ( ) ) ;
rank: 201
score: 99.07793719951923
patch: return call CaMeL Has CaMeL Local CaMeL Result ( $STRING$ ) ;
rank: 201
score: 99.01740579044117
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( value , true ) ;
rank: 201
score: 98.92877518503289
patch: return value . get CaMeL Type ( ) ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 201
score: 98.82194519042969
patch: throw false ; return true ; ;
rank: 201
score: 98.71629638671875
patch: return return true ; default : return true ;
rank: 201
score: 98.68712615966797
patch: return - 1 ; return false ;
rank: 201
score: 98.58856964111328
patch: parameters . add ( value ) ;
rank: 202
score: 99.07819680606617
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( value , value ) ;
rank: 202
score: 99.07752990722656
patch: return value . get CaMeL Value ( ) . get CaMeL Parent ( ) ;
rank: 202
score: 99.01683631310097
patch: return is CaMeL Assignment CaMeL Op ( locals , value ) ;
rank: 202
score: 98.92831260279605
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( 1 ) ;
rank: 202
score: 98.82084825303819
patch: return return true ; ; return true ;
rank: 202
score: 98.7156494140625
patch: return true ; case Token . FUNCTION : ;
rank: 202
score: 98.68710327148438
patch: return null ; ; return true ;
rank: 202
score: 98.58684539794922
patch: value = true ; return false ;
rank: 203
score: 99.07774658203125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Scope ( ) ) ;
rank: 203
score: 99.07743835449219
patch: return value . get CaMeL Type ( ) . get CaMeL Type ( ) ;
rank: 203
score: 99.01660874310662
patch: is CaMeL Simple CaMeL Operator = false ; is CaMeL Simple CaMeL Operator = false ;
rank: 203
score: 98.92754163240132
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( $NUMBER$ ) ;
rank: 203
score: 98.81884765625
patch: } return true ; return true ;
rank: 203
score: 98.7149325284091
patch: if ( value . get CaMeL Type ( ) ;
rank: 203
score: 98.68709564208984
patch: return false ; ; = true ;
rank: 203
score: 98.67472839355469
patch: . return null ; return false ;
rank: 204
score: 99.07738240559895
patch: return value . get CaMeL Value ( ) == null ;
rank: 204
score: 99.07671828497024
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( value , value . get CaMeL Parent ( ) ) ;
rank: 204
score: 99.01617431640625
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . size ( ) ) ;
rank: 204
score: 98.92682206003289
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( 1 ) ;
rank: 204
score: 98.81799994574652
patch: if return true ; return false ; ;
rank: 204
score: 98.68494524274554
patch: return this ; return false ;
rank: 204
score: 98.67394341362848
patch: this . return true ; return true ;
rank: 204
score: 98.58418273925781
patch: report CaMeL Error ( $STRING$ ) ;
rank: 205
score: 99.07589721679688
patch: return is CaMeL Simple CaMeL Operator ? Token . FUNCTION : Token . FUNCTION ;
rank: 205
score: 99.05801552220395
patch: return ( value . get CaMeL Type ( ) . equals ( Token . FUNCTION ) ) ;
rank: 205
score: 99.01442583869485
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . equals ( value . get CaMeL
rank: 205
score: 98.92652239118304
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value ) ;
rank: 205
score: 98.816259765625
patch: return true ; try { if return true ;
rank: 205
score: 98.71286843039773
patch: return ; case Token . true : ; true :
rank: 205
score: 98.684619140625
patch: true ; return true ; if return true ;
rank: 205
score: 98.67339409722223
patch: } if ( true ; return false ;
rank: 205
score: 98.58400472005208
patch: return false ; case Token . code :
rank: 206
score: 99.07661743164063
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? false : true ;
rank: 206
score: 99.07494399126838
patch: return value . get CaMeL Value ( ) . equals ( Token . REGEXP ) ;
rank: 206
score: 98.92624918619792
patch: return value . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( ) :
rank: 206
score: 98.81625366210938
patch: return false ; ; true ; ;
rank: 206
score: 98.71144104003906
patch: try { return true ; } ;
rank: 206
score: 98.68400573730469
patch: return true ; return return 1 ;
rank: 206
score: 98.67259216308594
patch: / * * * return true ;
rank: 206
score: 98.58348931206598
patch: return false ; case Token . UNKNOWN :
rank: 207
score: 99.07649739583333
patch: return value . equals ( value . get CaMeL Parent ( ) ) ;
rank: 207
score: 99.07446967230902
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . get CaMeL Name ( ) ) ;
rank: 207
score: 99.05729166666667
patch: return ! is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ;
rank: 207
score: 99.01376953125
patch: case Token . ARRAYLIT : return true ;
rank: 207
score: 98.92620490579044
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( )
rank: 207
score: 98.71094512939453
patch: return true ; case ; default :
rank: 207
score: 98.68316650390625
patch: return true ; return ++ true ;
rank: 207
score: 98.67200385199652
patch: return true ; } catch return false ;
rank: 207
score: 98.58321707589286
patch: if ( true ) { ;
rank: 208
score: 99.07305297851562
patch: is CaMeL Assignment CaMeL Op ? return true ;
rank: 208
score: 99.05705915178571
patch: return locals . get CaMeL Type ( ) == Token . FUNCTION ;
rank: 208
score: 98.92610248766448
patch: return locals . get CaMeL Token ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 208
score: 98.81405639648438
patch: return false ; true / * /
rank: 208
score: 98.71000453404018
patch: ? * / return true ;
rank: 208
score: 98.68242645263672
patch: return false ; return ; return ;
rank: 208
score: 98.67152404785156
patch: return true ; * * * /
rank: 208
score: 98.58279854910714
patch: if ( true true true )
rank: 209
score: 99.07611083984375
patch: return is CaMeL Simple CaMeL Operator ? call CaMeL Has CaMeL Local CaMeL Result ? false : true ;
rank: 209
score: 99.05535333806819
patch: return is CaMeL Simple CaMeL Operator ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 209
score: 98.92489963107639
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value + $STRING$ + value ) ;
rank: 209
score: 98.81375732421876
patch: return true ; return true ; true ; ;
rank: 209
score: 98.70987548828126
patch: return true ; default : return true ; ;
rank: 209
score: 98.58216094970703
patch: for ( Node n : true )
rank: 210
score: 99.07220458984375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + $STRING$ ) ;
rank: 210
score: 99.0545654296875
patch: return is CaMeL Assignment CaMeL Op ( value , < value . get CaMeL Type ( ) ) ;
rank: 210
score: 98.92481231689453
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op (
rank: 210
score: 98.81228976779514
patch: return return || true ; return true ;
rank: 210
score: 98.70977228338069
patch: return ; case ; case Token . true : ;
rank: 210
score: 98.67110188802083
patch: } if ( true ) return false ;
rank: 210
score: 98.57818603515625
patch: return Boolean . value CaMeL Of ;
rank: 211
score: 99.07207892922794
patch: return is CaMeL Simple CaMeL Operator ? Token . FUNCTION : Token . ARRAYLIT ;
rank: 211
score: 99.05398077713816
patch: return is CaMeL Simple CaMeL Operator ( value is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 211
score: 98.92474006204044
patch: return value . to CaMeL String ( ) . starts CaMeL With ( $STRING$ ) ;
rank: 211
score: 98.81187438964844
patch: return false ; ; ; ; ;
rank: 211
score: 98.70947875976563
patch: return true ; ; default : return false ;
rank: 211
score: 98.67839813232422
patch: return true ; return -- true ;
rank: 211
score: 98.67032623291016
patch: return true ; } return null ;
rank: 211
score: 98.57797580295139
patch: System . out . println ( $STRING$ ;
rank: 212
score: 99.07567596435547
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result
rank: 212
score: 99.07173919677734
patch: return is CaMeL Simple CaMeL Operator ? Token . ASSIGN : Token . REGEXP ;
rank: 212
score: 99.05372256324405
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 212
score: 99.01036879595588
patch: case Token . IN : switch ( value . get CaMeL Type ( ) ) {
rank: 212
score: 98.92427785773026
patch: return evaluates CaMeL To CaMeL Local CaMeL Value . is CaMeL Simple CaMeL Operator ( $STRING$ ) ;
rank: 212
score: 98.81043090820313
patch: return true ; true ; ; return true ;
rank: 212
score: 98.70800103081598
patch: return ; default : throw true ; }
rank: 212
score: 98.6702880859375
patch: / * * / return true ;
rank: 212
score: 98.57771809895833
patch: return false ; case Token . YES :
rank: 213
score: 99.0751708984375
patch: return locals . contains ( value . get CaMeL Type ( ) ) ;
rank: 213
score: 99.07111150568181
patch: case Token . FUNCTION : case Token . FUNCTION :
rank: 213
score: 99.05322265625
patch: return is CaMeL Assignment CaMeL Op ( value , ) ;
rank: 213
score: 98.92412366365132
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 213
score: 98.70779418945312
patch: try { return true ; } catch ( ;
rank: 213
score: 98.67557373046876
patch: return true ; if true ; if true ;
rank: 213
score: 98.57333713107639
patch: return true ; case Token . SIZE :
rank: 214
score: 99.05276254507211
patch: return this . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 214
score: 99.00821358816964
patch: try { switch ( value . get CaMeL Type ( ) ) {
rank: 214
score: 98.6744384765625
patch: return false ; true ; if return true ;
rank: 214
score: 98.66922760009766
patch: return false ; } else return ;
rank: 214
score: 98.57171630859375
patch: return true ; case Token . ERROR :
rank: 215
score: 99.07003580729166
patch: return $STRING$ . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 215
score: 99.00818684895833
patch: if ( value . get CaMeL Type ( ) != Token . REGEXP )
rank: 215
score: 98.9234619140625
patch: return value . is CaMeL Assignment CaMeL Op ( Token . FUNCTION :
rank: 215
score: 98.80709838867188
patch: return false ; true ; * /
rank: 215
score: 98.7029296875
patch: return true ; default : throw true ; }
rank: 215
score: 98.67417689732143
patch: return true ; return $NUMBER$ ;
rank: 215
score: 98.66895294189453
patch: break true ; } return false ;
rank: 216
score: 99.07453264508929
patch: return false ; call CaMeL Has CaMeL Local CaMeL Result ( ) ;
rank: 216
score: 99.0518863075658
patch: return ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Node ( ) ) ) ;
rank: 216
score: 99.00809420072116
patch: return false ; case Token . ARRAYLIT : return true ;
rank: 216
score: 98.69420166015625
patch: return ; case Token . NULL : true ;
rank: 216
score: 98.67328559027777
patch: return ; return 0 ; return true ;
rank: 216
score: 98.66886901855469
patch: { return true ; } finally {
rank: 216
score: 98.56934271918402
patch: return false ; case Token . TARGET :
rank: 217
score: 99.07390594482422
patch: return value . get CaMeL Type ( ) . size ( ) > 0 ;
rank: 217
score: 99.06774291992187
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 217
score: 99.05169208233173
patch: return ! value . is CaMeL Simple CaMeL Operator ( ) ;
rank: 217
score: 98.92286265980114
patch: return ( is CaMeL Simple CaMeL Operator ( value )
rank: 217
score: 98.80677032470703
patch: return true ; ; true / ;
rank: 217
score: 98.67317962646484
patch: return true ; return false ; else
rank: 217
score: 98.66848754882812
patch: { / * * return true ;
rank: 217
score: 98.56734212239583
patch: if ( true ; return true ) ;
rank: 218
score: 99.073828125
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) : false ;
rank: 218
score: 99.06733630952381
patch: return value . get CaMeL Node ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 218
score: 99.05107189360119
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ; }
rank: 218
score: 99.00775146484375
patch: is CaMeL Simple CaMeL Operator ? return true ; default :
rank: 218
score: 98.92188856336806
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) {
rank: 218
score: 98.8057149251302
patch: return false ; ; *
rank: 218
score: 98.67259979248047
patch: return true ; ; if return ;
rank: 218
score: 98.66770426432292
patch: . return true ; else return true ;
rank: 218
score: 98.56727600097656
patch: v = true ; return true ;
rank: 219
score: 99.07208610983456
patch: return value . is CaMeL Assignment CaMeL Op ( ) ; case Token . FUNCTION :
rank: 219
score: 99.06690979003906
patch: return is CaMeL Simple CaMeL Operator ? Token . ASSIGN : Token . FUNCTION ;
rank: 219
score: 99.050048828125
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) , value ) ;
rank: 219
score: 99.00770568847656
patch: is CaMeL Simple CaMeL Operator && is CaMeL Simple CaMeL Operator ? return false ;
rank: 219
score: 98.92123074001736
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) {
rank: 219
score: 98.80426025390625
patch: return true ; return true ; true /
rank: 219
score: 98.69186401367188
patch: return true ; } else { return true ;
rank: 219
score: 98.67047729492188
patch: return true ; return * ; return true ;
rank: 219
score: 98.66768973214286
patch: return true ; } else {
rank: 219
score: 98.56654866536458
patch: Arrays . as CaMeL List ( true ;
rank: 220
score: 99.07162475585938
patch: return false ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result . return true ;
rank: 220
score: 99.0665771484375
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( type ) ;
rank: 220
score: 99.04950714111328
patch: return ( value . get CaMeL Type ( ) == Token . REGEXP ) ;
rank: 220
score: 99.0075912475586
patch: is CaMeL Simple CaMeL Operator ? return true ; case Token . OBJECTLIT :
rank: 220
score: 98.92064412434895
patch: return call CaMeL Has CaMeL Local CaMeL Result ? true ;
rank: 220
score: 98.803955078125
patch: } return true ; return false ;
rank: 220
score: 98.69119698660714
patch: return ; default : throw ;
rank: 220
score: 98.66921997070312
patch: return - 1 ; if true ;
rank: 220
score: 98.66766357421875
patch: return null ; } return false ;
rank: 220
score: 98.5657958984375
patch: body = true ; return false ;
rank: 221
score: 99.07128295898437
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) : true ;
rank: 221
score: 99.04940795898438
patch: if ( is CaMeL Simple CaMeL Operator ( value ) ) { return true ;
rank: 221
score: 98.92025052584134
patch: return switch ( value . get CaMeL Parent ( ) ) {
rank: 221
score: 98.80316840277777
patch: return false ; return false ; ; ;
rank: 221
score: 98.68931274414062
patch: return true ; case Token . true true :
rank: 221
score: 98.66775512695312
patch: if true true ; return true ;
rank: 221
score: 98.66661919487848
patch: return false ; return this . true ;
rank: 221
score: 98.56407928466797
patch: if ( success ) return false ;
rank: 222
score: 99.07124837239583
patch: return $STRING$ + value . get CaMeL Type ( ) ;
rank: 222
score: 99.06472778320312
patch: return $STRING$ ? true : true ;
rank: 222
score: 99.04876387746711
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ;
rank: 222
score: 98.91980919471153
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value +
rank: 222
score: 98.80306243896484
patch: return false ; true / / ;
rank: 222
score: 98.68876139322917
patch: synchronized ( ; ) { return true ;
rank: 222
score: 98.66743687220982
patch: return false ; return 1 ;
rank: 222
score: 98.66643524169922
patch: return ; this . return true ;
rank: 222
score: 98.56385633680556
patch: return true ; case Token . COMMA :
rank: 223
score: 99.07115478515625
patch: return $STRING$ + value . get CaMeL Parent CaMeL Node ( ) . get CaMeL Value ( ) ;
rank: 223
score: 99.06437852647569
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Parent ( ) ) ;
rank: 223
score: 99.04867350260416
patch: return is CaMeL Simple CaMeL Operator ( value , Token . REGEXP ) ;
rank: 223
score: 99.00547880284927
patch: call CaMeL Has CaMeL Local CaMeL Result ? return false ; case Token . FUNCTION :
rank: 223
score: 98.80204772949219
patch: return true ; true ++ true ;
rank: 223
score: 98.68831380208333
patch: return ; case ; default : break ;
rank: 223
score: 98.66712951660156
patch: return ; return true + true ;
rank: 223
score: 98.56279754638672
patch: type = true ; return true ;
rank: 224
score: 99.07080796185662
patch: return value . get CaMeL Type ( ) . equals ( Node . ASSIGN ) ;
rank: 224
score: 99.0483462685033
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Node ( ) , locals ) ;
rank: 224
score: 98.80173950195312
patch: return true ; ; * / return false ;
rank: 224
score: 98.68724975585937
patch: return true ; default : case Token . ;
rank: 224
score: 98.66665649414062
patch: return true ; return ; if ;
rank: 225
score: 99.06410569411058
patch: return true ; is CaMeL Assignment CaMeL Op ? return true ;
rank: 225
score: 99.04825846354167
patch: return $STRING$ . equals ( value . get CaMeL Node ( ) . get CaMeL Type ( ) ) ;
rank: 225
score: 99.00427964154412
patch: is CaMeL Simple CaMeL Operator || is CaMeL Simple CaMeL Operator ? true : false ;
rank: 225
score: 98.80131700303819
patch: return false ; return true ; ; true
rank: 225
score: 98.686474609375
patch: synchronized ( ; ) { return true ; }
rank: 225
score: 98.66605050223214
patch: return count ; return true ;
rank: 225
score: 98.6644287109375
patch: { else return true ;
rank: 225
score: 98.56128692626953
patch: if ( true true true ) {
rank: 226
score: 99.07011583116319
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Node ( ) ;
rank: 226
score: 99.063427734375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Name ( ) ) ;
rank: 226
score: 99.04805131392045
patch: return is CaMeL Simple CaMeL Operator ( $STRING$ ) ;
rank: 226
score: 99.00373077392578
patch: if ( value . get CaMeL Type ( ) != Token . ARRAYLIT :
rank: 226
score: 98.80119493272569
patch: return true ; return true ; ; /
rank: 226
score: 98.68544311523438
patch: return ; default :
rank: 226
score: 98.6648193359375
patch: return $STRING$ ; return true ; return true ;
rank: 226
score: 98.66378348214286
patch: { else return false ; }
rank: 227
score: 99.0633544921875
patch: return false ; case Token . IN : return true ;
rank: 227
score: 99.04793548583984
patch: case Token . ARRAYLIT : case Token . ARRAYLIT : return true ;
rank: 227
score: 99.00356876148896
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Next CaMeL
rank: 227
score: 98.91759381975446
patch: return ( value . get CaMeL Parent ( ) != null ) ;
rank: 227
score: 98.80009155273437
patch: return false ; true else { return true ;
rank: 227
score: 98.68423122829861
patch: return ; default : return true ; ;
rank: 227
score: 98.6645278930664
patch: return true ; return ; break ;
rank: 227
score: 98.66301133897569
patch: return value . equals ( true ) ;
rank: 227
score: 98.55912950303819
patch: ? return true ; case Token . ;
rank: 228
score: 99.06955135569854
patch: return value . get CaMeL Type ( ) . equals ( Node . FUNCTION ) ;
rank: 228
score: 99.04726690995066
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) , locals ) ;
rank: 228
score: 99.003173828125
patch: return true ; super . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 228
score: 98.91567993164062
patch: call CaMeL Has CaMeL Local CaMeL Result . return true ;
rank: 228
score: 98.79893663194444
patch: return true ; true return true ; ;
rank: 228
score: 98.68402862548828
patch: if ( ! ; return false ;
rank: 228
score: 98.66437530517578
patch: return * * / return true ;
rank: 228
score: 98.66267903645833
patch: { else { if return true ; }
rank: 228
score: 98.55903843470982
patch: for ( node : true )
rank: 229
score: 99.06871273643092
patch: throw new Illegal CaMeL State CaMeL Exception ( String . get CaMeL String ( $STRING$ ) ) ;
rank: 229
score: 99.04591128700658
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Value ( ) ) ;
rank: 229
score: 99.00236002604167
patch: if ( value . get CaMeL Type ( ) == Token . ASSIGN )
rank: 229
score: 98.91566975911458
patch: return locals . is CaMeL Assignment CaMeL Op ( ) ;
rank: 229
score: 98.79764556884766
patch: return false ; return false ; true
rank: 229
score: 98.68297467912946
patch: if ( ; return true )
rank: 229
score: 98.66258021763393
patch: } else if return true ;
rank: 230
score: 99.06869741586539
patch: return value . get CaMeL Type ( ) == Token . FUNCTION
rank: 230
score: 99.0454334077381
patch: return $STRING$ . equals ( value . get CaMeL Type ( ) . get CaMeL Name ( ) ) ;
rank: 230
score: 99.0020751953125
patch: case Token . IN : case Token . FUNCTION :
rank: 230
score: 98.91566467285156
patch: return ( value . get CaMeL Parent CaMeL Node ( ) != null ) ;
rank: 230
score: 98.79743787977431
patch: return return true ; return true ; ;
rank: 230
score: 98.68274536132813
patch: return ; case Token . true : case ;
rank: 230
score: 98.66204071044922
patch: throw new Runtime CaMeL Exception ; }
rank: 230
score: 98.55811903211806
patch: if ( ! true ; return false ;
rank: 231
score: 99.06737342247597
patch: { switch ( value . get CaMeL Type ( ) ) {
rank: 231
score: 99.06175740559895
patch: return false ; case Token . REGEXP : return true ;
rank: 231
score: 99.04532470703126
patch: return is CaMeL Assignment CaMeL Op ( value ) && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 231
score: 98.68176879882813
patch: ? return false ;
rank: 231
score: 98.66184779575893
patch: return false ; break ; }
rank: 231
score: 98.55767059326172
patch: return Boolean . FALSE . true ;
rank: 232
score: 99.06660461425781
patch: return value . get CaMeL Type ( ) . has CaMeL Type ( ) ;
rank: 232
score: 99.04512329101563
patch: return locals . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 232
score: 98.91416302849265
patch: return value . get CaMeL Parent CaMeL Node ( ) . equals ( value ) ;
rank: 232
score: 98.79696994357639
patch: return true ; ; * return true ;
rank: 232
score: 98.68170166015625
patch: return ; ; case Token . true : ;
rank: 232
score: 98.66142442491319
patch: return false ; true * * * /
rank: 232
score: 98.55709838867188
patch: if ( success ) return true ;
rank: 233
score: 99.06065673828125
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 233
score: 99.04497612847223
patch: return ! is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) ) ;
rank: 233
score: 99.00077311197917
patch: is CaMeL Simple CaMeL Operator ? case Token . FUNCTION :
rank: 233
score: 98.91413031684027
patch: return value . type ( ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 233
score: 98.79683227539063
patch: return false ; ; true { return true ;
rank: 233
score: 98.68111572265624
patch: ? if ( true ) { return true ;
rank: 233
score: 98.66062927246094
patch: { return true ; } * /
rank: 233
score: 98.66057671440973
patch: return false ; return true ; return ;
rank: 233
score: 98.55708143446181
patch: boolean true = true ; return false ;
rank: 234
score: 99.06604766845703
patch: return value . get CaMeL Type ( ) . get CaMeL Name ( ) ;
rank: 234
score: 99.05966421274039
patch: return true ; is CaMeL Assignment CaMeL Op ( value ) ;
rank: 234
score: 99.04404168379934
patch: return is CaMeL Simple CaMeL Operator ? true : is CaMeL Assignment CaMeL Op ( value ) ;
rank: 234
score: 98.91339470358456
patch: switch ( value . get CaMeL Type ( ) ) { case Token . FUNCTION :
rank: 234
score: 98.79595184326172
patch: return true ; return || true ;
rank: 234
score: 98.68080647786458
patch: return true ; ; case Token . ;
rank: 234
score: 98.66056993272569
patch: return ; = 0 ; return true ;
rank: 234
score: 98.55676947699652
patch: return false ; case Token . NONE :
rank: 235
score: 99.05936976841518
patch: case Token . FUNCTION : case Token . REGEXP : return true ;
rank: 235
score: 98.99998982747395
patch: return true . is CaMeL Assignment CaMeL Op ( ) ;
rank: 235
score: 98.91338752297794
patch: return value CaMeL Of ( value ) . is CaMeL Assignment CaMeL Op ( ) ;
rank: 235
score: 98.79542371961806
patch: return true ; true return return true ;
rank: 235
score: 98.67992553710937
patch: return false ; case Token . NULL : ;
rank: 235
score: 98.66027153862848
patch: true ; return true ; return false ;
rank: 235
score: 98.66014099121094
patch: return ; / * return false ;
rank: 235
score: 98.55595567491319
patch: return true ; case Token . Void :
rank: 236
score: 99.05921020507813
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Source ( ) ) ;
rank: 236
score: 99.04238409745066
patch: return ( value . get CaMeL Type ( ) . equals ( Token . REGEXP ) ) ;
rank: 236
score: 98.99983978271484
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . length ( ) ) ;
rank: 236
score: 98.91326545266544
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? true
rank: 236
score: 98.795166015625
patch: return false ; ; true return false ;
rank: 236
score: 98.67717633928571
patch: return ; default return false ;
rank: 236
score: 98.65999603271484
patch: return ; = ; = true ;
rank: 236
score: 98.65933227539062
patch: } if return true ;
rank: 236
score: 98.55482482910156
patch: node = true ; return true ;
rank: 237
score: 99.06412506103516
patch: return value . get CaMeL Node ( ) . get CaMeL Type ( ) ;
rank: 237
score: 99.05896759033203
patch: return is CaMeL Simple CaMeL Operator ? Token . REGEXP : Token . REGEXP ;
rank: 237
score: 99.0422299033717
patch: return is CaMeL Assignment CaMeL Op ( value , is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 237
score: 98.99957744891827
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 237
score: 98.91322157118056
patch: switch ( value . get CaMeL Parent ( ) . get CaMeL Type ( ) ) {
rank: 237
score: 98.79490831163194
patch: return false ; true ? return false ;
rank: 237
score: 98.65957641601562
patch: return true ; return + true ;
rank: 237
score: 98.65882219587054
patch: . if ; return true ;
rank: 237
score: 98.55467393663194
patch: return true ; case Token . DELIMITER :
rank: 238
score: 99.06386431525735
patch: case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 238
score: 99.05880737304688
patch: return locals . is CaMeL Simple CaMeL Operator ( ) ? true : true ;
rank: 238
score: 98.99789225260416
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( locals , locals ) ;
rank: 238
score: 98.91260443793402
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ?
rank: 238
score: 98.67555745442708
patch: * / return true ;
rank: 238
score: 98.65866088867188
patch: return true ; else if true ;
rank: 238
score: 98.55380588107639
patch: return false ; case Token . TRUE :
rank: 239
score: 99.06337890625
patch: return value . get CaMeL Parent ( ) . equals ( value ) ;
rank: 239
score: 98.99758731617646
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Default CaMeL
rank: 239
score: 98.79359436035156
patch: return true ; return true true ;
rank: 239
score: 98.675341796875
patch: . return true ; default : return false ;
rank: 239
score: 98.65757533482143
patch: return true ; return value ;
rank: 239
score: 98.65627712673611
patch: { if return true ; break ; }
rank: 239
score: 98.55326334635417
patch: if ( true true ; return true ;
rank: 240
score: 98.99747721354167
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( locals , value ) ;
rank: 240
score: 98.90953911675348
patch: return value . get CaMeL Result ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 240
score: 98.79330444335938
patch: return true ; ; * / return true ;
rank: 240
score: 98.67423706054687
patch: return ; case ; case Token . NULL :
rank: 240
score: 98.65676879882812
patch: return * return ; return true ;
rank: 240
score: 98.65618218315973
patch: return return true ; } return false ;
rank: 241
score: 99.06329345703125
patch: return value . get CaMeL Type ( ) . get CaMeL Name ( ) . equals (
rank: 241
score: 99.05621744791667
patch: return this . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 241
score: 98.79307725694444
patch: return true ; else { return false ;
rank: 241
score: 98.673583984375
patch: return ; default : case Token . true :
rank: 241
score: 98.65665435791016
patch: return false ; true ; return ;
rank: 241
score: 98.55008697509766
patch: if ( ! true ) true ;
rank: 242
score: 99.06243896484375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + this . get CaMeL Parent ( ) ) ;
rank: 242
score: 99.05542710248162
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( true , locals ) ;
rank: 242
score: 99.0413882606908
patch: return is CaMeL Assignment CaMeL Op ? is CaMeL Simple CaMeL Operator ( value ) : true ;
rank: 242
score: 98.90731107271634
patch: return is CaMeL Immutable CaMeL Value ( value , true ) ;
rank: 242
score: 98.6728271484375
patch: ? return true ; case Token . true :
rank: 242
score: 98.65425109863281
patch: return true ; if ( true ;
rank: 242
score: 98.5496826171875
patch: throw new Runtime CaMeL Exception ( ;
rank: 243
score: 99.06155556126645
patch: return value . get CaMeL Name ( ) . is CaMeL Assignment CaMeL Op ( $STRING$ ) ;
rank: 243
score: 98.996337890625
patch: return true ; case Token . ARRAYLIT : return false ;
rank: 243
score: 98.90479193793402
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? $STRING$ ;
rank: 243
score: 98.79168701171875
patch: return true ; ; else return true ;
rank: 243
score: 98.65562744140625
patch: return false ; ; return ; = true ;
rank: 243
score: 98.65423583984375
patch: { if return true ; } else {
rank: 243
score: 98.54965209960938
patch: buffer . append ( true ) ;
rank: 244
score: 99.06118774414062
patch: return value . get CaMeL Parent ( ) . get CaMeL Result ( ) ;
rank: 244
score: 99.05430908203125
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 244
score: 98.99555315290179
patch: throw new Illegal CaMeL State CaMeL Exception ( Token . ARRAYLIT :
rank: 244
score: 98.90474446614583
patch: System . err . println ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 244
score: 98.79097747802734
patch: return return $NUMBER$ ; return true ;
rank: 244
score: 98.67229546440973
patch: if ( true ) throw new true ;
rank: 244
score: 98.6550064086914
patch: return true ; return true ; try
rank: 244
score: 98.54937065972223
patch: boolean true = false ; return false ;
rank: 245
score: 99.06092593544408
patch: return value . get CaMeL Type ( ) . has CaMeL Type ( Token . REGEXP ) ;
rank: 245
score: 99.05417887369792
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? true : false ;
rank: 245
score: 99.0398013466283
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Node ( ) , value ) ;
rank: 245
score: 98.995361328125
patch: return true ; case Token . IN : return false ;
rank: 245
score: 98.7905517578125
patch: return super . true ; return true ; ;
rank: 245
score: 98.6707763671875
patch: return true ; default ; return false ;
rank: 245
score: 98.65395682198661
patch: return ; return return true ;
rank: 245
score: 98.65193394252232
patch: = true ; return false ;
rank: 245
score: 98.54828752790179
patch: finally { return false ; }
rank: 246
score: 99.05283610026042
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Type ( ) ) ;
rank: 246
score: 98.99502766927084
patch: if ( value . get CaMeL Type ( ) != Token . IN )
rank: 246
score: 98.90255033052884
patch: return is CaMeL Simple CaMeL Operator ( value , false ) ;
rank: 246
score: 98.78999633789063
patch: if return true ;
rank: 246
score: 98.6693115234375
patch: return ; case ; case Token . TARGET :
rank: 246
score: 98.6536636352539
patch: return false ; } if true ;
rank: 246
score: 98.65141950334821
patch: * * * return true ;
rank: 246
score: 98.54798126220703
patch: report CaMeL Error ( true ) ;
rank: 247
score: 99.05270046657986
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + to CaMeL String ( ) ) ;
rank: 247
score: 98.99480124080883
patch: is CaMeL Simple CaMeL Operator ? case Token . IN : case Token . REGEXP :
rank: 247
score: 98.78952365451389
patch: return false ; true * return true ;
rank: 247
score: 98.66884358723958
patch: return ; case ; : return true ;
rank: 247
score: 98.65363103693181
patch: return true ; return true ; return - 1 ;
rank: 247
score: 98.65079171316964
patch: { return true ; } }
rank: 247
score: 98.54630279541016
patch: if ( true && true ) {
rank: 248
score: 99.06059265136719
patch: return value . get CaMeL Type ( ) . length ( ) != 0 ;
rank: 248
score: 99.0526123046875
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? false : true ;
rank: 248
score: 98.9942267922794
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value . get CaMeL Parent CaMeL
rank: 248
score: 98.90180121527777
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ?
rank: 248
score: 98.78841145833333
patch: return true ; return - true ; ;
rank: 248
score: 98.65284729003906
patch: return this ; ; return true ;
rank: 248
score: 98.65007019042969
patch: break true ; else return false ;
rank: 248
score: 98.54568142361111
patch: try { return true ; } catch true
rank: 249
score: 99.06003981370192
patch: return ; case Token . FUNCTION : case Token . REGEXP :
rank: 249
score: 99.05193014705883
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( [ 0 ] ) ;
rank: 249
score: 98.99363080193015
patch: if ( value . get CaMeL Type ( ) . is CaMeL Local ( ) )
rank: 249
score: 98.90177648207721
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , false ) ;
rank: 249
score: 98.78801133897569
patch: return true ; value { return true ;
rank: 249
score: 98.66731092664931
patch: return true ; ; } return false ;
rank: 249
score: 98.65149688720703
patch: return true ; return * / ;
rank: 249
score: 98.64947509765625
patch: return true ; else
rank: 250
score: 99.05950317382812
patch: return value . get CaMeL Name ( ) . is CaMeL Assignment CaMeL Op ( ) : false ;
rank: 250
score: 99.05168151855469
patch: return value . is CaMeL Assignment CaMeL Op ( ) ? true : true ;
rank: 250
score: 99.03819515830592
patch: return ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) ) ) ;
rank: 250
score: 98.99345846737133
patch: return super . evaluates CaMeL To CaMeL Local CaMeL Value ( locals , value ) ;
rank: 250
score: 98.78778076171875
patch: return true ; true true ; ;
rank: 250
score: 98.66689627511161
patch: if ; ; return true ;
rank: 250
score: 98.65146309988839
patch: return ; = return true ;
rank: 250
score: 98.64854431152344
patch: } else if ; return true ;
rank: 250
score: 98.54265679253473
patch: if ( return true ) return false ;
rank: 251
score: 99.05152587890625
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Constructor ( ) ) ;
rank: 251
score: 99.03792027064732
patch: if ( value . get CaMeL Type ( ) != Token . FUNCTION
rank: 251
score: 98.99338600852273
patch: is CaMeL Simple CaMeL Operator ? return false ; }
rank: 251
score: 98.90147569444444
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator = true ;
rank: 251
score: 98.66630249023437
patch: return ; case ; case Token . FUNCTION :
rank: 251
score: 98.65009901258681
patch: return true ; if true ; return ;
rank: 251
score: 98.64789581298828
patch: { if return true ; * /
rank: 251
score: 98.54227023654514
patch: return true ; case Token . NEW :
rank: 252
score: 99.05902709960938
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( ) : false ;
rank: 252
score: 99.03706868489583
patch: case Token . REGEXP : case Token . ARRAYLIT : return true ;
rank: 252
score: 98.99223776424633
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Global CaMeL
rank: 252
score: 98.78651258680556
patch: return true ; ; ? return false ;
rank: 252
score: 98.66623942057292
patch: return true ; default : if ( ;
rank: 252
score: 98.65006510416667
patch: return true ; true ; return / ;
rank: 252
score: 98.64668782552083
patch: throw new Runtime CaMeL Exception ( Exception ;
rank: 252
score: 98.540771484375
patch: return false ? true : false ;
rank: 253
score: 99.05838012695312
patch: return true ; case Token . IN : call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 253
score: 99.03700764973958
patch: is CaMeL Simple CaMeL Operator ( value , locals ) ;
rank: 253
score: 98.99211120605469
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent
rank: 253
score: 98.9010009765625
patch: throw super . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 253
score: 98.64976917613636
patch: return false ; return true ; if return true ;
rank: 253
score: 98.6459732055664
patch: return ; ( return false ) ;
rank: 253
score: 98.54051378038194
patch: return true ; case Token . RESET :
rank: 254
score: 99.03658896998355
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) , locals ) ;
rank: 254
score: 98.90084134615384
patch: if ( is CaMeL Simple CaMeL Operator ( value ) ) {
rank: 254
score: 98.78544398716518
patch: return true ; while true ;
rank: 254
score: 98.66097412109374
patch: return true ; } else { return false ;
rank: 254
score: 98.6493252840909
patch: return ; return ; = true ; return true ;
rank: 254
score: 98.64541286892361
patch: return return false ; } return false ;
rank: 254
score: 98.54039171006944
patch: if ( true ) { return ; }
rank: 255
score: 99.05076688878677
patch: return true . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 255
score: 99.03597005208333
patch: return is CaMeL Assignment CaMeL Op ( value , Token . REGEXP ) ;
rank: 255
score: 98.99091796875
patch: is CaMeL Simple CaMeL Operator ? return false ; case Token . ASSIGN :
rank: 255
score: 98.66005452473958
patch: return ; case Token . true : true
rank: 255
score: 98.64927978515625
patch: return true ; return 0 ; return true ;
rank: 255
score: 98.54022894965277
patch: return true ; case Token . Byte :
rank: 256
score: 99.05706787109375
patch: return locals . is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) )
rank: 256
score: 99.05016371783088
patch: return is CaMeL Simple CaMeL Operator ? Token . REGEXP : Token . OBJECTLIT ;
rank: 256
score: 99.03587849934895
patch: return value . get CaMeL Node ( ) != null ;
rank: 256
score: 98.990673828125
patch: break ; case Token . ARRAYLIT : case Token . ARRAYLIT :
rank: 256
score: 98.78482666015626
patch: return true ; ; / * return false ;
rank: 256
score: 98.64903913225446
patch: return 0 ; return false ;
rank: 256
score: 98.64475504557292
patch: * * * * * return true ;
rank: 256
score: 98.54000854492188
patch: if ( ;
rank: 257
score: 99.05629272460938
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 257
score: 99.050048828125
patch: return is CaMeL Simple CaMeL Operator ? true : is CaMeL Simple CaMeL Operator ? true ;
rank: 257
score: 98.89615631103516
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator CaMeL
rank: 257
score: 98.7845703125
patch: return false ; true / * return false ;
rank: 257
score: 98.65853881835938
patch: return true ; case Token . CONTINUE : ;
rank: 257
score: 98.64794921875
patch: return false ; ; if true ; return true ;
rank: 257
score: 98.64434814453125
patch: { if true ; return false ; }
rank: 257
score: 98.53984069824219
patch: if ( true true ) break ;
rank: 258
score: 99.05628159466912
patch: call CaMeL Has CaMeL Local CaMeL Result ) return true ; case Token . FUNCTION :
rank: 258
score: 99.0500255766369
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( false ) ;
rank: 258
score: 99.03527250744048
patch: return $STRING$ . equals ( value . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ;
rank: 258
score: 98.99030618106617
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Stack CaMeL
rank: 258
score: 98.89527045355902
patch: return false ; case Token . FUNCTION _
rank: 258
score: 98.78453063964844
patch: return false ; true * ; ;
rank: 258
score: 98.64783477783203
patch: return true ; ; throw true ;
rank: 258
score: 98.64413113064236
patch: return ; * * * * * ;
rank: 258
score: 98.53959655761719
patch: expr = true ; return true ;
rank: 259
score: 99.04986931295956
patch: return value . get CaMeL Value ( ) . equals ( Token . ASSIGN ) ;
rank: 259
score: 99.03409423828126
patch: return is CaMeL Simple CaMeL Operator ( value , is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 259
score: 98.9900261374081
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL First CaMeL
rank: 259
score: 98.64730834960938
patch: if true ; if return true ;
rank: 259
score: 98.64411078559027
patch: return ; * * / return true ;
rank: 259
score: 98.53957112630208
patch: * / return false ;
rank: 260
score: 99.04959106445312
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 260
score: 99.03384399414062
patch: return is CaMeL Assignment CaMeL Op ( value ) || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 260
score: 98.9899432842548
patch: x = $STRING$ + value . get CaMeL Parent ( ) ;
rank: 260
score: 98.89418029785156
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ?
rank: 260
score: 98.78191460503473
patch: return null ; return true ; true ;
rank: 260
score: 98.65474853515624
patch: return ; case true : case Token . ;
rank: 260
score: 98.64719460227273
patch: return true ; return ; return ; return true ;
rank: 260
score: 98.53734588623047
patch: return true ; true = true ;
rank: 261
score: 99.0555191040039
patch: return ( value . get CaMeL Type ( ) != Token . ASSIGN ) ;
rank: 261
score: 99.04917689732143
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( value , value . get CaMeL Type ( ) ) ;
rank: 261
score: 98.98980305989583
patch: return is CaMeL Simple CaMeL Operator ( ) ; case Token . FUNCTION :
rank: 261
score: 98.78139919704861
patch: return true ; else if return true ;
rank: 261
score: 98.65445556640626
patch: ? return true ; default : return false ;
rank: 261
score: 98.64710693359375
patch: if true ; return true ; return true ;
rank: 261
score: 98.6427001953125
patch: } if ; return true ;
rank: 261
score: 98.53721788194444
patch: for ( Node ; ; ) { ;
rank: 262
score: 99.0484619140625
patch: case Token . IN : case Token . REGEXP : return true ;
rank: 262
score: 99.03319149925595
patch: return $STRING$ . equals ( value . get CaMeL Node ( ) . get CaMeL Value ( ) ) ;
rank: 262
score: 98.892919921875
patch: return is CaMeL Immutable CaMeL Value ( ) ;
rank: 262
score: 98.78098551432292
patch: return true ; try ; return true ;
rank: 262
score: 98.64704895019531
patch: return ; return 0 + true ;
rank: 262
score: 98.53685167100694
patch: return true ; case Token . RETURN :
rank: 263
score: 99.05512237548828
patch: return value . get CaMeL Name ( ) . length ( ) > 0 ;
rank: 263
score: 99.04822387695313
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Instance ( ) ) ;
rank: 263
score: 99.03305199032738
patch: return $STRING$ . equals ( value . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 263
score: 98.98967428768383
patch: case Token . REGEXP : switch ( value . get CaMeL Type ( ) ) {
rank: 263
score: 98.89247041590073
patch: return value CaMeL Of ( value ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 263
score: 98.779541015625
patch: return false ; true ; ; return true ;
rank: 263
score: 98.64974539620536
patch: return ; default : true ;
rank: 263
score: 98.64547390407986
patch: return true ; return this + true ;
rank: 263
score: 98.63984680175781
patch: return true ; true * * ?
rank: 264
score: 99.05505981445313
patch: return $STRING$ + value . get CaMeL Parent CaMeL Node ( ) . get CaMeL Type ( ) ;
rank: 264
score: 99.03249686104911
patch: return ( is CaMeL Simple CaMeL Operator ? true : true ) ;
rank: 264
score: 98.9886983235677
patch: return false . is CaMeL Assignment CaMeL Op ( ) ;
rank: 264
score: 98.89237467447917
patch: return Node CaMeL Util . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 264
score: 98.77876281738281
patch: return true ; ; * * ;
rank: 264
score: 98.64920043945312
patch: return true ; case Token . NONE : ;
rank: 264
score: 98.64467366536458
patch: return true ; return $STRING$ + true ;
rank: 264
score: 98.53510393415179
patch: return true ( true ) ;
rank: 265
score: 99.05504692925348
patch: return locals . is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) )
rank: 265
score: 99.03217163085938
patch: return ( value . get CaMeL Value ( ) . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 265
score: 98.77864990234374
patch: return true ; ; else { return false ;
rank: 265
score: 98.64845106336806
patch: return return true ; case Token . ;
rank: 265
score: 98.64463806152344
patch: return $STRING$ ; return - 1 ;
rank: 265
score: 98.63908555772569
patch: if ; * * * * * /
rank: 265
score: 98.53468153211806
patch: return true ; case Token . LABEL :
rank: 266
score: 99.05478515625
patch: return value . get CaMeL Parent ( ) . equals ( $STRING$ ) ;
rank: 266
score: 99.04756433823529
patch: return is CaMeL Simple CaMeL Operator ? Token . FUNCTION : Token . OBJECTLIT ;
rank: 266
score: 99.03175455729166
patch: if ( is CaMeL Simple CaMeL Operator ( value ) ) return false ;
rank: 266
score: 98.98789284446023
patch: case Token . IN : case Token . IN :
rank: 266
score: 98.89125569661458
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator = true ;
rank: 266
score: 98.7783711751302
patch: return return false ; ;
rank: 266
score: 98.64802856445313
patch: if ( true ) System . out . ;
rank: 266
score: 98.64401245117188
patch: true ; return false ;
rank: 266
score: 98.6390609741211
patch: throw new Error ( false ) ;
rank: 266
score: 98.53370496961806
patch: return true ; case Token . INCLUDE :
rank: 267
score: 99.04603794642857
patch: return value . get CaMeL Type ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( this ) ;
rank: 267
score: 99.03154754638672
patch: if ( value . get CaMeL Type ( ) . equals ( Token . REGEXP
rank: 267
score: 98.98684692382812
patch: throw $STRING$ + value . get CaMeL Parent ( ) ;
rank: 267
score: 98.89079733455883
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( )
rank: 267
score: 98.77835845947266
patch: return true ; true ; false ;
rank: 267
score: 98.64650472005208
patch: return ; case true : return false ;
rank: 267
score: 98.64401245117188
patch: return ; return ; = 0 ;
rank: 267
score: 98.63899230957031
patch: = true ; } return false ;
rank: 267
score: 98.5336201985677
patch: return this . true ;
rank: 268
score: 99.05412023207721
patch: return ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) )
rank: 268
score: 99.04556613498264
patch: is CaMeL Simple CaMeL Operator ( value ) is CaMeL Simple CaMeL Operator ? return true ;
rank: 268
score: 99.03153268914474
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) , value ) ;
rank: 268
score: 98.98650045955883
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + this . value . get CaMeL
rank: 268
score: 98.89004516601562
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL
rank: 268
score: 98.77798461914062
patch: return true ; value return true ;
rank: 268
score: 98.64619140625
patch: this . return true ; case Token . ;
rank: 268
score: 98.6439208984375
patch: return true ; return true ; return true ; }
rank: 268
score: 98.63884735107422
patch: { else if ; return true ;
rank: 269
score: 99.05380045572916
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result . return true ;
rank: 269
score: 99.04496256510417
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Class ( ) ) ;
rank: 269
score: 99.03130139802632
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) , value ) ;
rank: 269
score: 98.77763366699219
patch: return true ; ; true * /
rank: 269
score: 98.64368785511364
patch: return true ; true ; if ; return true ;
rank: 269
score: 98.63853624131944
patch: return true ; true / * * /
rank: 269
score: 98.53237915039062
patch: if ; return true ; case ;
rank: 270
score: 99.05302124023437
patch: return value . get CaMeL Value ( ) . is CaMeL Assignment CaMeL Op ( ) : false ;
rank: 270
score: 99.03071032072368
patch: return is CaMeL Assignment CaMeL Op ( value is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 270
score: 98.98459879557292
patch: else switch ( value . get CaMeL Type ( ) )
rank: 270
score: 98.77666625976562
patch: return false ; return true ; true ; ;
rank: 270
score: 98.64422607421875
patch: return true ; case true : return true ;
rank: 270
score: 98.64289994673295
patch: return true ; return true ; else return true ;
rank: 270
score: 98.5323715209961
patch: if ( value == null ) {
rank: 271
score: 99.05283610026042
patch: return value . get CaMeL Parent ( ) == true ;
rank: 271
score: 98.88913399832589
patch: return locals . is CaMeL Assignment CaMeL Op ( Token . FUNCTION :
rank: 271
score: 98.64244995117187
patch: if ( true ) return true ; true ;
rank: 271
score: 98.63575744628906
patch: { if return true ; } }
rank: 271
score: 98.53146701388889
patch: return true ; case Token . PREFIX :
rank: 272
score: 99.05282931857639
patch: return value . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ;
rank: 272
score: 99.030029296875
patch: return is CaMeL Assignment CaMeL Op ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 272
score: 98.98426106770833
patch: return false ; evaluates CaMeL To CaMeL Local CaMeL Value ? return true ;
rank: 272
score: 98.8888272372159
patch: if ( value . get CaMeL Type ( ) )
rank: 272
score: 98.64219360351562
patch: return true ; ; default : return true ;
rank: 272
score: 98.6417007446289
patch: return ; return ; return $STRING$ ;
rank: 272
score: 98.63572474888393
patch: return ; / * * /
rank: 273
score: 99.04310825892857
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( 0 ) ;
rank: 273
score: 99.02925931490384
patch: return is CaMeL Simple CaMeL Operator ? return true : false ;
rank: 273
score: 98.98361002604166
patch: is CaMeL Assignment CaMeL Op ? return true ; case Token . FUNCTION :
rank: 273
score: 98.77547878689236
patch: return false ; true true return true ;
rank: 273
score: 98.6415771484375
patch: return true ; return 1 ; return true ;
rank: 273
score: 98.63915405273437
patch: return true ; default : throw code . ;
rank: 273
score: 98.63563537597656
patch: { if return true ; true ;
rank: 273
score: 98.53081403459821
patch: finally { return true ; }
rank: 274
score: 99.04221801757812
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Count ( ) ) ;
rank: 274
score: 98.98303940716912
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Child CaMeL
rank: 274
score: 98.7751235961914
patch: return true ; ; ; true ;
rank: 274
score: 98.64092254638672
patch: true ; return ; if true ;
rank: 274
score: 98.6378173828125
patch: if ( true ; ; return true ;
rank: 274
score: 98.63549041748047
patch: return false ; while return false ;
rank: 274
score: 98.53077528211806
patch: if ( true true ; return false ;
rank: 275
score: 99.0518798828125
patch: return value . get CaMeL Type ( ) . trim ( ) ;
rank: 275
score: 99.04220145089286
patch: return value . get CaMeL Parent ( ) . evaluates CaMeL To CaMeL Local CaMeL Value ( 1 ) ;
rank: 275
score: 99.028173828125
patch: return ( value . get CaMeL Type ( ) . equals ( Token . ARRAYLIT ) ) ;
rank: 275
score: 98.7741470336914
patch: return false ; true return null ;
rank: 275
score: 98.64060465494792
patch: return true ; ; if return false ;
rank: 275
score: 98.63776397705078
patch: if ( true ) { ; }
rank: 275
score: 98.63539632161458
patch: return false ; } if return true ;
rank: 275
score: 98.52916124131944
patch: Collection < Node > true = true ;
rank: 276
score: 99.05136108398438
patch: return value . get CaMeL Name ( ) . is CaMeL Local ( ) ;
rank: 276
score: 99.02805689761513
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) , value ) ;
rank: 276
score: 98.98198699951172
patch: if ( value . get CaMeL Type ( ) != Token . ARRAYLIT )
rank: 276
score: 98.77393188476563
patch: return false ; try { if return true ;
rank: 276
score: 98.64021606445313
patch: return true ; return true ; return 0 ;
rank: 276
score: 98.63758850097656
patch: return ; default ; return true ;
rank: 276
score: 98.63508823939732
patch: } else { return false ;
rank: 276
score: 98.52897813585069
patch: return true ; case Token . RIGHT :
rank: 277
score: 99.04166259765626
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( false ) ;
rank: 277
score: 99.02803861177884
patch: return . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 277
score: 98.98176125919117
patch: call CaMeL Has CaMeL Local CaMeL Result ? return true ; case Token . IN :
rank: 277
score: 98.88442095588235
patch: throw super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 277
score: 98.77385118272569
patch: return true ; return true ; try {
rank: 277
score: 98.63920288085937
patch: return true ; return true ; = true ;
rank: 277
score: 98.63628540039062
patch: if ( ; else { return true ; }
rank: 277
score: 98.63481140136719
patch: { else * * * * /
rank: 278
score: 99.05120849609375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Length ( ) ) ;
rank: 278
score: 99.04030474494485
patch: return children . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 278
score: 98.98009381975446
patch: is CaMeL Simple CaMeL Operator return true ; case Token . FUNCTION :
rank: 278
score: 98.773681640625
patch: return true ; while true ; ;
rank: 278
score: 98.63706970214844
patch: return ; * ; return true ;
rank: 278
score: 98.6358642578125
patch: return ; ; case Token . true :
rank: 278
score: 98.63407135009766
patch: return false ; } else if ;
rank: 278
score: 98.52750941685268
patch: if ( ! true ) ;
rank: 279
score: 99.0509262084961
patch: return $STRING$ + value . get CaMeL Parent ( ) . length ( ) ;
rank: 279
score: 99.02783203125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) , $STRING$ ) ;
rank: 279
score: 98.97972005208334
patch: return true ; evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 279
score: 98.88416883680556
patch: return value . get CaMeL Name ( ) . is CaMeL Simple CaMeL Operator ? true ;
rank: 279
score: 98.77362823486328
patch: return true ; true ; false {
rank: 279
score: 98.63657836914062
patch: return true ; if true ; = true ;
rank: 279
score: 98.63401963975694
patch: { super . true ; return false ;
rank: 279
score: 98.633642578125
patch: return true ; case Token . STRING : ;
rank: 279
score: 98.52664523654514
patch: return true ; case Token . START :
rank: 280
score: 99.05067749023438
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result . return false ;
rank: 280
score: 99.02765251608456
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ; return false ;
rank: 280
score: 98.88397216796875
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ? false ;
rank: 280
score: 98.77332221137152
patch: return false ; true return return true ;
rank: 280
score: 98.63641357421875
patch: return true + true ; return true ;
rank: 280
score: 98.63314819335938
patch: this . true ; return false ;
rank: 280
score: 98.52615966796876
patch: return ! true ;
rank: 281
score: 99.04957490808823
patch: return true ; case Token . IN : call CaMeL Has CaMeL Local CaMeL Result )
rank: 281
score: 99.03996725643383
patch: return is CaMeL Simple CaMeL Operator ? Token . REGEXP : Token . ARRAYLIT ;
rank: 281
score: 99.02742513020833
patch: return is CaMeL Assignment CaMeL Op ? is CaMeL Simple CaMeL Operator ? true : true ;
rank: 281
score: 98.97934857536765
patch: is CaMeL Simple CaMeL Operator ? case Token . FUNCTION : case Token . IN :
rank: 281
score: 98.88396747295673
patch: return ( locals . is CaMeL Simple CaMeL Operator ? true ;
rank: 281
score: 98.635498046875
patch: return return 1 ; if true ;
rank: 281
score: 98.63177490234375
patch: return true ; true }
rank: 281
score: 98.63115234375
patch: return ; case Token . TARGET : true :
rank: 281
score: 98.52404106987848
patch: return true ; case Token . ALL :
rank: 282
score: 99.04939350328948
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ? call CaMeL Has CaMeL Local CaMeL Result
rank: 282
score: 99.02715594951923
patch: return is CaMeL Simple CaMeL Operator ( Node . FUNCTION ) ;
rank: 282
score: 98.88374597886029
patch: return value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( )
rank: 282
score: 98.63151719835069
patch: { return true ; else return false ;
rank: 282
score: 98.6310806274414
patch: String name = ; return true ;
rank: 283
score: 99.03889973958333
patch: return locals . get ( value . get CaMeL Parent ( ) ) . evaluates CaMeL To CaMeL Local CaMeL
rank: 283
score: 99.02714538574219
patch: case Token . ARRAYLIT : case Token . OBJECTLIT : return true ;
rank: 283
score: 98.97911161534927
patch: return ( value . get CaMeL Type ( ) == Token . ARRAYLIT ) ;
rank: 283
score: 98.88307020399306
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL Operator CaMeL
rank: 283
score: 98.77212524414062
patch: return true ; true true / ;
rank: 283
score: 98.633447265625
patch: return false ; return ; if return true ;
rank: 283
score: 98.63102891710069
patch: return false ; } } return false ;
rank: 283
score: 98.5238265991211
patch: throw new Error ( $STRING$ ) ;
rank: 284
score: 99.0480712890625
patch: return true ; case Token . IN : call CaMeL Has CaMeL Local CaMeL Result . return true ;
rank: 284
score: 99.03841552734374
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Offset ( ) ) ;
rank: 284
score: 98.97898864746094
patch: is CaMeL Simple CaMeL Operator ? return false ; case Token . OBJECTLIT :
rank: 284
score: 98.88290841238839
patch: return value . is CaMeL Simple CaMeL Operator ( ) ? true ;
rank: 284
score: 98.772021484375
patch: return true ; ; else { return true ;
rank: 284
score: 98.63328552246094
patch: return ; { return - 1 ;
rank: 284
score: 98.62670288085937
patch: return ; default : { return true ; }
rank: 284
score: 98.52341037326389
patch: return true ; case Token . VAR :
rank: 285
score: 99.04772135416667
patch: return value . equals ( value . get CaMeL Type ( ) ) ;
rank: 285
score: 99.03769818474265
patch: return value . get CaMeL Value ( ) . equals ( Token . IN ) ;
rank: 285
score: 99.02690972222223
patch: return is CaMeL Simple CaMeL Operator ( value is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 285
score: 98.8827392578125
patch: return value . is CaMeL Assignment CaMeL Op ( Token . ASSIGN ) ;
rank: 285
score: 98.63301595052083
patch: return true ; return ; return 0 ;
rank: 285
score: 98.63011338975694
patch: return true ; } if return false ;
rank: 285
score: 98.62628173828125
patch: return true ; default : throw System . ;
rank: 286
score: 99.04742072610294
patch: return this . call CaMeL Has CaMeL Local CaMeL Result ( value , locals ) ;
rank: 286
score: 99.03714328342014
patch: throw ( Illegal CaMeL State CaMeL Exception ) is CaMeL Simple CaMeL Operator ( value ) ;
rank: 286
score: 99.02687766335227
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) + $STRING$ ) ;
rank: 286
score: 98.97843170166016
patch: is CaMeL Simple CaMeL Operator ? case Token . ARRAYLIT : return true ;
rank: 286
score: 98.8824462890625
patch: throw super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , value ) ;
rank: 286
score: 98.63249067826705
patch: return true ; return false ; if return true ;
rank: 286
score: 98.63003200954861
patch: . return true ; return true ; }
rank: 286
score: 98.6245849609375
patch: return ; case Token . true : default :
rank: 286
score: 98.52268763950893
patch: return true ; case ; ;
rank: 287
score: 99.0467041015625
patch: return value . get CaMeL Name ( ) . is CaMeL Assignment CaMeL Op ( ) : true ;
rank: 287
score: 99.02686831825658
patch: return is CaMeL Simple CaMeL Operator ? false : is CaMeL Simple CaMeL Operator ( value ) ;
rank: 287
score: 98.97837201286765
patch: is CaMeL Simple CaMeL Operator ? case Token . FUNCTION : case Token . FUNCTION :
rank: 287
score: 98.88045828683036
patch: switch ( value . get CaMeL Parent CaMeL Node ( ) ) {
rank: 287
score: 98.77113647460938
patch: return true ; return null ; return true ;
rank: 287
score: 98.63191441127232
patch: return false ; return 0 ;
rank: 287
score: 98.62890625
patch: return true ; true else return false ;
rank: 287
score: 98.62152777777777
patch: throw new Interrupted CaMeL Exception ( ) ;
rank: 287
score: 98.5215835571289
patch: n = true ; return true ;
rank: 288
score: 99.04627075195313
patch: return is CaMeL Simple CaMeL Operator ? call CaMeL Has CaMeL Local CaMeL Result ? false : false ;
rank: 288
score: 99.02682156032986
patch: return is CaMeL Assignment CaMeL Op ? is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 288
score: 98.88025716145833
patch: return value . get CaMeL Token ( ) . equals ( $STRING$ ) ;
rank: 288
score: 98.77056121826172
patch: return true ; return null true ;
rank: 288
score: 98.63160923549107
patch: return true ; return start ;
rank: 288
score: 98.62086317274306
patch: return ; default : System . true ;
rank: 288
score: 98.52149115668402
patch: if ( return true ) return true ;
rank: 289
score: 99.04616185238487
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( this ) ;
rank: 289
score: 99.03617350260417
patch: is CaMeL Simple CaMeL Operator ? throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 289
score: 99.025830078125
patch: return is CaMeL Assignment CaMeL Op ( value , is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 289
score: 98.97693589154412
patch: is CaMeL Simple CaMeL Operator ? case Token . REGEXP : case Token . REGEXP :
rank: 289
score: 98.88021850585938
patch: return ( locals . is CaMeL Simple CaMeL Operator ( ) || true ) ;
rank: 289
score: 98.77034759521484
patch: return true ; ; true ; true
rank: 289
score: 98.63124593098958
patch: return false ; true ; if true ;
rank: 289
score: 98.52072482638889
patch: return true ; case Token . eof :
rank: 290
score: 99.04604867788461
patch: return call CaMeL Has CaMeL Local CaMeL Result ( locals ) ;
rank: 290
score: 98.97676304408482
patch: break ; case Token . REGEXP : case Token . ARRAYLIT :
rank: 290
score: 98.87933349609375
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ( ) :
rank: 290
score: 98.77029854910714
patch: return true ; ; true {
rank: 290
score: 98.6312026977539
patch: return false ; ; return $STRING$ ;
rank: 290
score: 98.62843322753906
patch: { else return true ; } }
rank: 290
score: 98.61740112304688
patch: return ; case Token . NULL : case ;
rank: 290
score: 98.52009412977431
patch: return true ; case Token . AND :
rank: 291
score: 99.04599609375
patch: return false ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 291
score: 99.02522786458333
patch: x = is CaMeL Assignment CaMeL Op ( value ) ;
rank: 291
score: 98.97628079927884
patch: return true ; is CaMeL Simple CaMeL Operator ( value ) ;
rank: 291
score: 98.87899780273438
patch: return ( is CaMeL Simple CaMeL Operator ) ;
rank: 291
score: 98.77003479003906
patch: return true ; return $NUMBER$ ; ;
rank: 291
score: 98.63064575195312
patch: return ; true ; if true ;
rank: 291
score: 98.62717982700893
patch: { else if return true ;
rank: 292
score: 99.04564208984375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Line ( ) ) ;
rank: 292
score: 99.03480224609375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Code ( ) ) ;
rank: 292
score: 99.02505493164062
patch: if ( is CaMeL Assignment CaMeL Op ( value ) ) { return true ;
rank: 292
score: 98.87773132324219
patch: return value . get CaMeL Token ( ) . is CaMeL Local ( ) ;
rank: 292
score: 98.63017134232955
patch: true ; return ; = true ; return true ;
rank: 292
score: 98.62545776367188
patch: return false ; break ; true ;
rank: 293
score: 99.04543585526316
patch: return is CaMeL Simple CaMeL Operator ? call CaMeL Has CaMeL Local CaMeL Result ) : true ;
rank: 293
score: 99.03456333705357
patch: return value . get CaMeL Type ( ) != Token . IN ;
rank: 293
score: 99.0250179893092
patch: return is CaMeL Simple CaMeL Operator ( value , is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 293
score: 98.97572954963235
patch: return value . is CaMeL Simple CaMeL Operator ( ) ; case Token . FUNCTION :
rank: 293
score: 98.76898871527777
patch: return this . true ; ; true {
rank: 293
score: 98.62850341796874
patch: return true ; return ; { return false ;
rank: 293
score: 98.62468126085069
patch: if return true ; } return false ;
rank: 293
score: 98.61629813058036
patch: return ; case ; default :
rank: 293
score: 98.51212310791016
patch: * / if ( true ) {
rank: 294
score: 99.034375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + locals . get CaMeL Parent ( ) ) ;
rank: 294
score: 98.9754638671875
patch: is CaMeL Simple CaMeL Operator ? case Token . FUNCTION : return true ;
rank: 294
score: 98.7686767578125
patch: return false ; ; ; ;
rank: 294
score: 98.62844509548611
patch: return ; return true ; while true ;
rank: 294
score: 98.6162109375
patch: return true ; case Token . TRUE : ;
rank: 294
score: 98.51210021972656
patch: for ( Node ; ; ; )
rank: 295
score: 99.04527064732143
patch: call CaMeL Has CaMeL Local CaMeL Result = true ; return false ;
rank: 295
score: 99.03271484375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Modifiers ( ) ) ;
rank: 295
score: 99.02359713040866
patch: return true . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 295
score: 98.97529740767045
patch: case Token . FUNCTION : case Token . IN :
rank: 295
score: 98.87637668185764
patch: throw new Illegal CaMeL State CaMeL Exception ( this . get CaMeL Parent ( ) ) ;
rank: 295
score: 98.62757219587054
patch: return super ; return true ;
rank: 295
score: 98.62395562065973
patch: { if true ; return true ; }
rank: 295
score: 98.511962890625
patch: return false ; case Token . OTHER :
rank: 296
score: 99.04521179199219
patch: return value . get CaMeL Parent ( ) . size ( ) > 0 ;
rank: 296
score: 99.02350323016827
patch: return ! is CaMeL Simple CaMeL Operator ? true : true ;
rank: 296
score: 98.97465963924633
patch: return true ; evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 296
score: 98.76756795247395
patch: return super . true ;
rank: 296
score: 98.6267977627841
patch: return true ; return ; if ; return true ;
rank: 296
score: 98.62385389539931
patch: * * * * / return true ;
rank: 296
score: 98.61526489257812
patch: return false ; case Token . true : true
rank: 296
score: 98.51184760199652
patch: return true ; case ; return true ;
rank: 297
score: 99.04519653320312
patch: return value . get CaMeL Node ( ) . get CaMeL Value ( ) ;
rank: 297
score: 99.02312677556819
patch: result . throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 297
score: 98.97453090122768
patch: is CaMeL Simple CaMeL Operator return false ; case Token . FUNCTION :
rank: 297
score: 98.87562662760416
patch: return value . is CaMeL Assignment CaMeL Op ( Token . FUNCTION ) ;
rank: 297
score: 98.76748657226562
patch: if return true ; return true ; true ;
rank: 297
score: 98.6267318725586
patch: true ; return ; = 0 ;
rank: 297
score: 98.62381744384766
patch: { else { if return true ;
rank: 297
score: 98.51085069444444
patch: return true ; case Token . ADD :
rank: 298
score: 99.02309744698661
patch: return locals . get CaMeL Type ( ) == Token . REGEXP ;
rank: 298
score: 98.97429950420673
patch: x = $STRING$ + value . get CaMeL Type ( ) ;
rank: 298
score: 98.87514241536458
patch: System . out . println ( $STRING$ + value . to CaMeL String ( ) ) ;
rank: 298
score: 98.76725938585069
patch: return true ; return - 1 ; ;
rank: 298
score: 98.62660047743056
patch: return ; return false ; return true ;
rank: 298
score: 98.6238021850586
patch: } return false ; return false ;
rank: 298
score: 98.61421712239583
patch: System . out . ; return true ;
rank: 299
score: 99.02268629807692
patch: try { return is CaMeL Assignment CaMeL Op ( value ) ;
rank: 299
score: 98.97421875
patch: x = value . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 299
score: 98.87491861979167
patch: return value . get CaMeL Next ( ) . is CaMeL Simple CaMeL Operator ( ) :
rank: 299
score: 98.76705932617188
patch: return true ; try {
rank: 299
score: 98.62613525390626
patch: return false ; ; if ; return true ;
rank: 299
score: 98.62378946940105
patch: } else return false ;
rank: 299
score: 98.61417643229167
patch: if ; return false ;
rank: 299
score: 98.50874546595982
patch: if ( value == null )
rank: 300
score: 99.0447265625
patch: return value . get CaMeL Value ( ) . is CaMeL Assignment CaMeL Op ( ) : true ;
rank: 300
score: 99.02945963541667
patch: return true ; case Token . REGEXP : return false ;
rank: 300
score: 99.02255249023438
patch: return is CaMeL Assignment CaMeL Op ( value , is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 300
score: 98.97294108072917
patch: is CaMeL Simple CaMeL Operator ? return false ; default :
rank: 300
score: 98.87489149305556
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ( ) ?
rank: 300
score: 98.76674397786458
patch: return false ; return true ; true /
rank: 300
score: 98.62610626220703
patch: return ; / ; return true ;
rank: 300
score: 98.61408233642578
patch: if ( ; ; return true ;
rank: 300
score: 98.50860595703125
patch: if ( ; return true true ) ;
rank: 301
score: 99.04463704427083
patch: return value . get CaMeL Type ( ) . get CaMeL Value ( ) != null ;
rank: 301
score: 99.02913665771484
patch: return $STRING$ . is CaMeL Simple CaMeL Operator ( ) ? true : true ;
rank: 301
score: 99.02224892064145
patch: return is CaMeL Simple CaMeL Operator ( value is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 301
score: 98.97263746995192
patch: is CaMeL Simple CaMeL Operator break ; case Token . FUNCTION :
rank: 301
score: 98.8748779296875
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL
rank: 301
score: 98.62595912388393
patch: return true ; return break ;
rank: 301
score: 98.62230767144098
patch: } if return true ; return false ;
rank: 301
score: 98.61406860351562
patch: . return true ; default : return true ;
rank: 301
score: 98.50831604003906
patch: if ( true ) break true ;
rank: 302
score: 99.0289665670956
patch: return $STRING$ . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ;
rank: 302
score: 98.97062174479167
patch: is CaMeL Assignment CaMeL Op = true ; return true ;
rank: 302
score: 98.87464096966912
patch: return ( value . to CaMeL String ( ) . equals ( $STRING$ ) ) ;
rank: 302
score: 98.76628112792969
patch: return true ; true ; * *
rank: 302
score: 98.62591552734375
patch: return true ; return 1 + true ;
rank: 302
score: 98.62156168619792
patch: return return && true ;
rank: 302
score: 98.61331176757812
patch: ? return true ; default : return true ;
rank: 302
score: 98.50830078125
patch: return false ; case Token . VOID :
rank: 303
score: 99.04132690429688
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) : false ;
rank: 303
score: 98.87371826171875
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? ) ;
rank: 303
score: 98.76390923394098
patch: return false ; return true ; ; /
rank: 303
score: 98.62498474121094
patch: return $STRING$ ; ; if true ;
rank: 303
score: 98.62141248914931
patch: { return true ; return true ; }
rank: 303
score: 98.50656467013889
patch: if ( true ) return false ; }
rank: 304
score: 99.0406429893092
patch: return locals . is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) {
rank: 304
score: 99.02128092447917
patch: return boolean is CaMeL Simple CaMeL Operator ( value ) ;
rank: 304
score: 98.969970703125
patch: throw new Illegal CaMeL State CaMeL Exception ( value ) ;
rank: 304
score: 98.8734130859375
patch: return switch ( value . get CaMeL Parent ( ) )
rank: 304
score: 98.62437744140625
patch: return true ; ; return ; if true ;
rank: 304
score: 98.6196060180664
patch: return true ; else return null ;
rank: 304
score: 98.50654432508681
patch: if ( true ) return true ; }
rank: 305
score: 99.0208984375
patch: case Token . ARRAYLIT : case Token . FUNCTION : return true ;
rank: 305
score: 98.96954345703125
patch: else { switch ( value . get CaMeL Type ( ) ) {
rank: 305
score: 98.87325286865234
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator CaMeL
rank: 305
score: 98.76304796006944
patch: / * return true ; return true ;
rank: 305
score: 98.62413787841797
patch: return ; if true ; break ;
rank: 305
score: 98.61943817138672
patch: { return ; } return true ;
rank: 305
score: 98.61028289794922
patch: ? else { return true ; }
rank: 305
score: 98.50559997558594
patch: if ( ; if ( true )
rank: 306
score: 99.0208407315341
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + this . value . get CaMeL Parent ( ) ) ;
rank: 306
score: 98.96950276692708
patch: is CaMeL Simple CaMeL Operator = false ;
rank: 306
score: 98.87289225260416
patch: return ( value . get CaMeL Type ( ) . is CaMeL Simple CaMeL
rank: 306
score: 98.76272243923611
patch: return false ; ; else return true ;
rank: 306
score: 98.623779296875
patch: return false ; return / ;
rank: 306
score: 98.61890326605902
patch: * * * * * * * /
rank: 306
score: 98.61026763916016
patch: return ; case Token . NONE :
rank: 306
score: 98.50531005859375
patch: Collections . sort ( true ) ;
rank: 307
score: 99.04008178710937
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? false : false ;
rank: 307
score: 99.01991102430556
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Value ( $STRING$ ) ) ;
rank: 307
score: 98.96858723958333
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + name . get CaMeL
rank: 307
score: 98.87245686848958
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , Token . ASSIGN ) ;
rank: 307
score: 98.76270294189453
patch: return false ; ; return null ;
rank: 307
score: 98.62302652994792
patch: return true ; return true ; if ;
rank: 307
score: 98.50502014160156
patch: val = true ; return true ;
rank: 308
score: 99.0400634765625
patch: return true ; case Token . FUNCTION : }
rank: 308
score: 99.02623291015625
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Type CaMeL Name ( ) ) ;
rank: 308
score: 98.87189079733456
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ) ;
rank: 308
score: 98.62239379882813
patch: return true ; return true ; throw true ;
rank: 308
score: 98.61880154079861
patch: { if ( false ; return false ;
rank: 308
score: 98.60910034179688
patch: return ; default : switch ( value . ;
rank: 308
score: 98.50346544053819
patch: return true ; case Token . FORMAT :
rank: 309
score: 99.04004720052083
patch: return value . get CaMeL Type ( ) == Token . ARRAYLIT ;
rank: 309
score: 99.01956979851974
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Name ( ) ) ;
rank: 309
score: 98.87169300426136
patch: return . is CaMeL Simple CaMeL Operator ( ) ;
rank: 309
score: 98.76188354492187
patch: return true ; true ; if return false ;
rank: 309
score: 98.6216552734375
patch: return 0 ; return true ; return true ;
rank: 309
score: 98.50272369384766
patch: return false ; if ( true )
rank: 310
score: 99.03997395833333
patch: return false ; call CaMeL Has CaMeL Local CaMeL Result ( value ) ;
rank: 310
score: 99.02611586626838
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( type , locals ) ;
rank: 310
score: 98.96773274739583
patch: case Token . ARRAYLIT : case Token . FUNCTION :
rank: 310
score: 98.76184844970703
patch: return true ; true * / {
rank: 310
score: 98.62127007378473
patch: return true ; break ; if true ;
rank: 310
score: 98.61817932128906
patch: return true ; } throw null ;
rank: 310
score: 98.60794067382812
patch: return ; case Token . true : ; ;
rank: 310
score: 98.50159454345703
patch: return value != null && true ;
rank: 311
score: 99.03983989514802
patch: return is CaMeL Assignment CaMeL Op ( value , value . get CaMeL Value ( ) ) ;
rank: 311
score: 99.01796177455357
patch: return is CaMeL Simple CaMeL Operator ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 311
score: 98.96717122395833
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL First CaMeL
rank: 311
score: 98.86997357536765
patch: return Node CaMeL Util . is CaMeL Assignment CaMeL Op ( value , true ) ;
rank: 311
score: 98.7616195678711
patch: return this . true ; ; ;
rank: 311
score: 98.62095947265625
patch: return true ; return - 1 ; break ;
rank: 311
score: 98.6165542602539
patch: return true ; break ; false ;
rank: 311
score: 98.49973551432292
patch: return true ; case Token . LP :
rank: 312
score: 99.03950500488281
patch: return value . get CaMeL Parent ( ) . length ( ) > 0 ;
rank: 312
score: 99.0250244140625
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Types ( ) ) ;
rank: 312
score: 99.01787366365132
patch: return locals . get CaMeL Node ( value . get CaMeL Type ( ) ) != null ;
rank: 312
score: 98.96713256835938
patch: switch ( value . get CaMeL Value ( ) ) {
rank: 312
score: 98.86997357536765
patch: return value . get CaMeL Name ( ) . starts CaMeL With ( $STRING$ ) ;
rank: 312
score: 98.76116943359375
patch: return true ; true * ; return false ;
rank: 312
score: 98.62090192522321
patch: return true ; ; if ;
rank: 312
score: 98.61636691623264
patch: . return true ; return false ; ;
rank: 312
score: 98.49945068359375
patch: * / if ( true )
rank: 313
score: 99.03917738970588
patch: return call CaMeL Has CaMeL Local CaMeL Result ( ) ; case Token . FUNCTION :
rank: 313
score: 99.02492065429688
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ , value . get CaMeL Parent ( ) ) ;
rank: 313
score: 99.01776123046875
patch: return is CaMeL Simple CaMeL Operator ( ( Node ) value ) ;
rank: 313
score: 98.9666748046875
patch: is CaMeL Simple CaMeL Operator ? case Token . ARRAYLIT :
rank: 313
score: 98.86990176930146
patch: throw super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , false ) ;
rank: 313
score: 98.76084594726562
patch: return false ; ; else { return false ;
rank: 313
score: 98.61560821533203
patch: return true ; while ( false ;
rank: 313
score: 98.60382080078125
patch: if ( true ) return ; ;
rank: 313
score: 98.49886745876736
patch: return true ; if ( true ) {
rank: 314
score: 99.01627390008224
patch: return is CaMeL Simple CaMeL Operator ( locals , value . get CaMeL Parent ( ) ) ;
rank: 314
score: 98.61554827008929
patch: { if ; return false ;
rank: 314
score: 98.60344102647569
patch: if ( true ) return true true ;
rank: 314
score: 98.49819946289062
patch: this . return ( true ) ;
rank: 315
score: 99.0243896484375
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) & true ;
rank: 315
score: 98.86917453342014
patch: return value . get CaMeL Token ( ) . is CaMeL Simple CaMeL Operator ( ) {
rank: 315
score: 98.75884331597223
patch: return true ; finally { return true ;
rank: 315
score: 98.620361328125
patch: return true ; return ; return ; = true ;
rank: 315
score: 98.61549886067708
patch: return true ; break ; return true ;
rank: 315
score: 98.49799346923828
patch: Thread . sleep ( true ) ;
rank: 316
score: 99.03892008463542
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Type ( ) +
rank: 316
score: 98.75863308376736
patch: return false ; ; return return true ;
rank: 316
score: 98.62004258897569
patch: return ; = false ; return true ;
rank: 316
score: 98.61447143554688
patch: { if ; return return true ;
rank: 316
score: 98.60133870442708
patch: return true ; ; } return true ;
rank: 316
score: 98.497802734375
patch: return true ; * /
rank: 317
score: 98.96514892578125
patch: case Token . ARRAYLIT : case Token . IN :
rank: 317
score: 98.86870978860294
patch: return value . type ( ) . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 317
score: 98.75840250651042
patch: return true ; return false ; ; *
rank: 317
score: 98.61998901367187
patch: return true ; return $STRING$ ; return true ;
rank: 317
score: 98.61436631944444
patch: return false ; true * return false ;
rank: 317
score: 98.60054524739583
patch: return true ; default ;
rank: 318
score: 99.0386962890625
patch: return value . get CaMeL Length ( ) > 0 ;
rank: 318
score: 99.02350174753289
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , locals ) ; return true ;
rank: 318
score: 99.01580341045673
patch: return is CaMeL Simple CaMeL Operator ( value , < ) ;
rank: 318
score: 98.86787923177083
patch: return switch ( value . get CaMeL Parent CaMeL Node ( ) ) {
rank: 318
score: 98.75748901367187
patch: return true ; true ; true return false ;
rank: 318
score: 98.61992853338069
patch: return true ; return * true ; return true ;
rank: 318
score: 98.61409505208333
patch: return false ; break ; return false ;
rank: 318
score: 98.49720764160156
patch: ret = true ; return true ;
rank: 319
score: 99.02312622070312
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + node . get CaMeL Parent ( ) ) ;
rank: 319
score: 99.01579145951705
patch: return is CaMeL Assignment CaMeL Op ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 319
score: 98.96370755709134
patch: case Token . OBJECTLIT : case Token . ARRAYLIT :
rank: 319
score: 98.86771065848214
patch: return locals . is CaMeL Simple CaMeL Operator ( ) ? true ;
rank: 319
score: 98.75693359375
patch: return false ; ; else { return true ;
rank: 319
score: 98.61991119384766
patch: if return 1 ; return true ;
rank: 319
score: 98.5964126586914
patch: if ; true : return true ;
rank: 319
score: 98.49681091308594
patch: return default ? true : true ;
rank: 320
score: 99.03797822840073
patch: return value . get CaMeL Type ( ) . equals ( Type . FUNCTION ) ;
rank: 320
score: 99.02257622612848
patch: throw new Runtime CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 320
score: 99.0157406455592
patch: return is CaMeL Assignment CaMeL Op ( value is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 320
score: 98.96343994140625
patch: is CaMeL Simple CaMeL Operator = true ; case Token . FUNCTION :
rank: 320
score: 98.8664321899414
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value + $STRING$ ) ;
rank: 320
score: 98.75646362304687
patch: return true ; ; ; ; return false ;
rank: 320
score: 98.61954956054687
patch: return true ; ; if return return true ;
rank: 320
score: 98.59614562988281
patch: return true ; default : true ;
rank: 320
score: 98.49681091308594
patch: finally { if ( true ) {
rank: 321
score: 99.03707725123355
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 321
score: 99.02248247931985
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( 0 , locals ) ;
rank: 321
score: 99.01524593955592
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) , locals ) ;
rank: 321
score: 98.96131480823864
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ,
rank: 321
score: 98.86603190104167
patch: return ( locals . is CaMeL Assignment CaMeL Op ( value . get CaMeL
rank: 321
score: 98.754931640625
patch: return true ; try { return return true ;
rank: 321
score: 98.61300659179688
patch: return true ; for ; true ;
rank: 321
score: 98.49602593315973
patch: if ( ; true ) return false ;
rank: 322
score: 99.03699602399554
patch: return false ; case Token . FUNCTION : case Token . REGEXP :
rank: 322
score: 99.02241821289063
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + value . get CaMeL Name ( ) ) ;
rank: 322
score: 99.01523659446023
patch: || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 322
score: 98.96095581054688
patch: return true ; case Token . OBJECTLIT :
rank: 322
score: 98.86591254340277
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? true }
rank: 322
score: 98.75483703613281
patch: return true ; return $STRING$ ; ;
rank: 322
score: 98.61903076171875
patch: return true ; ; true ; return true ;
rank: 322
score: 98.61278533935547
patch: . return null ; return true ;
rank: 322
score: 98.5953369140625
patch: throw new ; case Token . true :
rank: 322
score: 98.49529266357422
patch: success = true ; return true ;
rank: 323
score: 99.03670247395833
patch: return value . get CaMeL Value ( ) . equals ( $STRING$ ) ;
rank: 323
score: 98.96087036132812
patch: is CaMeL Assignment CaMeL Op ? return false ;
rank: 323
score: 98.61851671006944
patch: return true ; true ; return ; {
rank: 323
score: 98.61233520507812
patch: break ; return true ;
rank: 323
score: 98.49510955810547
patch: return Boolean . TRUE != true ;
rank: 324
score: 99.0136006673177
patch: x = is CaMeL Simple CaMeL Operator ( value ) ;
rank: 324
score: 98.95592322716347
patch: return false ; case Token . ARRAYLIT : return false ;
rank: 324
score: 98.8648681640625
patch: return ( is CaMeL Simple CaMeL Operator ? true ;
rank: 324
score: 98.6168212890625
patch: return true ; true ; return ; return true ;
rank: 324
score: 98.61182512555804
patch: return true ; * * /
rank: 324
score: 98.59060232979911
patch: return ; default return true ;
rank: 324
score: 98.49463762555804
patch: this . true = false ;
rank: 325
score: 99.03657082950367
patch: return value . get CaMeL Type ( ) . is CaMeL Local ( value ) ;
rank: 325
score: 99.01332600911458
patch: return is CaMeL Assignment CaMeL Op ? false : false ;
rank: 325
score: 98.95456368582589
patch: break ; case Token . IN : case Token . ARRAYLIT :
rank: 325
score: 98.86459350585938
patch: return value . get CaMeL Parent ( ) == $STRING$ ;
rank: 325
score: 98.75413208007812
patch: return false ; ; * / return false ;
rank: 325
score: 98.61659240722656
patch: true ; return ; return false ;
rank: 325
score: 98.61119842529297
patch: throw new Runtime CaMeL Exception return ;
rank: 325
score: 98.58963351779514
patch: if ( ; true ) return true ;
rank: 325
score: 98.49069552951389
patch: if ( true ; this . true )
rank: 326
score: 99.03652472245066
patch: if ( value . get CaMeL Type ( ) . get CaMeL Name ( ) . equals (
rank: 326
score: 99.01324932391827
patch: return is CaMeL Simple CaMeL Operator ( Token . FUNCTION ) ;
rank: 326
score: 98.86366489955357
patch: return value . get CaMeL Parent CaMeL Node ( ) == 0 ;
rank: 326
score: 98.75375705295139
patch: return true ; true if return false ;
rank: 326
score: 98.61651000976562
patch: return this ; return true ; return true ;
rank: 326
score: 98.61021423339844
patch: return false ; for return false ;
rank: 326
score: 98.58742850167411
patch: = true ; return true ;
rank: 326
score: 98.4903793334961
patch: return true ; return ! true ;
rank: 327
score: 99.03628058182566
patch: return value . get CaMeL Parent ( ) . get CaMeL Type ( ) . length 0 ;
rank: 327
score: 98.9518534342448
patch: throw new Illegal CaMeL State CaMeL Exception ( ) ; }
rank: 327
score: 98.86225237165179
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL
rank: 327
score: 98.75280151367187
patch: return true ; true / * return true ;
rank: 327
score: 98.61583862304687
patch: return true ; ; ; if return true ;
rank: 327
score: 98.6097640991211
patch: return ; ( return true ) ;
rank: 327
score: 98.58708190917969
patch: return true ; case Token ; :
rank: 327
score: 98.49007415771484
patch: Thread . sleep ( $NUMBER$ ) ;
rank: 328
score: 99.0362060546875
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ? call CaMeL Has CaMeL Local CaMeL Result ;
rank: 328
score: 99.02061703330592
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ? return true : true ;
rank: 328
score: 98.95095825195312
patch: switch ( value . get CaMeL Node ( ) ) {
rank: 328
score: 98.86180877685547
patch: return value . get CaMeL Node ( ) . is CaMeL Local ( ) ;
rank: 328
score: 98.75225067138672
patch: return true ; value = true ;
rank: 328
score: 98.61564497514205
patch: return true ; return true ; } if true ;
rank: 328
score: 98.6095682779948
patch: return true ; } }
rank: 328
score: 98.58675130208333
patch: return ; case Token . TRUE : ;
rank: 328
score: 98.48916965060764
patch: return false ; case Token . FALSE :
rank: 329
score: 99.02044677734375
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? true : false ;
rank: 329
score: 99.01158905029297
patch: return value . equals ( is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 329
score: 98.9508944424716
patch: switch ( value ) { case Token . FUNCTION :
rank: 329
score: 98.7519022623698
patch: return false ; true ?
rank: 329
score: 98.61543273925781
patch: return true ; ; if ; {
rank: 329
score: 98.6076889038086
patch: / * * * * * /
rank: 329
score: 98.58648681640625
patch: return true ; default ; return true ;
rank: 330
score: 99.03528703962054
patch: switch ( value . is CaMeL Assignment CaMeL Op ( ) ) {
rank: 330
score: 99.0203369140625
patch: return locals . is CaMeL Assignment CaMeL Op ( value , locals ) ;
rank: 330
score: 99.01127697172619
patch: return $STRING$ . equals ( value . get CaMeL Type ( ) . get CaMeL Type ( ) ) ;
rank: 330
score: 98.94757080078125
patch: return false ; case Token . IN : return false ;
rank: 330
score: 98.75122833251953
patch: return true ; true return 0 ;
rank: 330
score: 98.61502838134766
patch: true ; if true ; break ;
rank: 330
score: 98.60751342773438
patch: throw new true ; return true ;
rank: 330
score: 98.58574761284723
patch: return false ; / * return true ;
rank: 330
score: 98.48660278320312
patch: return Boolean . true ;
rank: 331
score: 99.0346743935033
patch: return locals . is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) {
rank: 331
score: 99.01116943359375
patch: return boolean is CaMeL Assignment CaMeL Op ( value ) ;
rank: 331
score: 98.94674682617188
patch: case Token . FUNCTION : case Token . OBJECTLIT :
rank: 331
score: 98.61372593470982
patch: return * ; return true ;
rank: 331
score: 98.60742950439453
patch: . if ; * * * /
rank: 331
score: 98.58574676513672
patch: return ; case Token . FUNCTION :
rank: 332
score: 99.03450833834134
patch: return false ; call CaMeL Has CaMeL Local CaMeL Result ) ;
rank: 332
score: 99.01116622121711
patch: return locals . get CaMeL Node ( value . get CaMeL Parent ( ) ) != null ;
rank: 332
score: 98.85997099034927
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? true
rank: 332
score: 98.75022888183594
patch: return true ; true ; true *
rank: 332
score: 98.61314697265625
patch: return true ; return true ; while true ;
rank: 332
score: 98.58485717773438
patch: return true true ;
rank: 332
score: 98.48597935267857
patch: if ( scope != null )
rank: 333
score: 99.03446451822917
patch: return value . get CaMeL Type ( ) == Token . FUNCTION ) ;
rank: 333
score: 99.01864013671874
patch: throw new Illegal CaMeL Access CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 333
score: 99.00997924804688
patch: return . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 333
score: 98.94610040838069
patch: return is CaMeL Assignment CaMeL Op ( true ) ;
rank: 333
score: 98.85960286458334
patch: return ( ! value . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 333
score: 98.7497787475586
patch: return false ; return true ; case
rank: 333
score: 98.61287689208984
patch: return true ; return / * /
rank: 333
score: 98.60702950613839
patch: . return true ; true ;
rank: 333
score: 98.58464050292969
patch: return true ; default : if ;
rank: 334
score: 99.01823120117187
patch: return is CaMeL Simple CaMeL Operator ? true : is CaMeL Simple CaMeL Operator ? true : true ;
rank: 334
score: 98.94565993088942
patch: switch ( value . get CaMeL Type ( ) ) { }
rank: 334
score: 98.8585564108456
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( )
rank: 334
score: 98.74934387207031
patch: return true ; return 1 ; ;
rank: 334
score: 98.61026000976562
patch: return true ; true ; if ;
rank: 334
score: 98.60578918457031
patch: throw new true ; return false ;
rank: 334
score: 98.48467145647321
patch: if true ? return true ;
rank: 335
score: 99.0339111328125
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ? return false ;
rank: 335
score: 99.01815185546874
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Node ( ) ) ;
rank: 335
score: 99.00923237047698
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent ( ) , locals ) ;
rank: 335
score: 98.85851332720588
patch: return value . get CaMeL Parent CaMeL Node ( ) . equals ( $STRING$ ) ;
rank: 335
score: 98.74904378255208
patch: return return false ; ; return true ;
rank: 335
score: 98.61006303267045
patch: return true ; return - 1 ; if true ;
rank: 335
score: 98.58419036865234
patch: if ( true ) break ; ;
rank: 335
score: 98.48309326171875
patch: cached = true ; return true ;
rank: 336
score: 99.033203125
patch: return value . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( ) : false ;
rank: 336
score: 99.01761024876645
patch: return locals . get ( value ) . is CaMeL Simple CaMeL Operator ? true : true ;
rank: 336
score: 98.94388521634616
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value _
rank: 336
score: 98.85823567708333
patch: return locals . is CaMeL Assignment CaMeL Op ( Token . FUNCTION ) ;
rank: 336
score: 98.7490234375
patch: return false ; ; / * return false ;
rank: 336
score: 98.6098403930664
patch: return 0 ; return - 1 ;
rank: 336
score: 98.60547553168402
patch: { return false ; return false ; }
rank: 336
score: 98.58359781901042
patch: return ; case Token . NONE : ;
rank: 336
score: 98.48114776611328
patch: if ( true ) return FALSE ;
rank: 337
score: 98.9434814453125
patch: is CaMeL Simple CaMeL Operator ? return true ; } return true ;
rank: 337
score: 98.8580551147461
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ;
rank: 337
score: 98.74881320529514
patch: return false ; ; return true ; ;
rank: 337
score: 98.609375
patch: return true ; return true ; return * true ;
rank: 337
score: 98.60539415147569
patch: return true ; } else { return ;
rank: 337
score: 98.48067220052083
patch: return true ; case Token . SWITCH :
rank: 338
score: 99.0087028952206
patch: return ( ( Node ) value ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 338
score: 98.94307084517045
patch: is CaMeL Simple CaMeL Operator ? return true ; ;
rank: 338
score: 98.85804748535156
patch: return ( locals . is CaMeL Simple CaMeL Operator ? true : true ) ;
rank: 338
score: 98.74842834472656
patch: return true ; ; / * /
rank: 338
score: 98.60852922712054
patch: return name ; return true ;
rank: 338
score: 98.60504150390625
patch: * * * * true * /
rank: 338
score: 98.58175320095486
patch: return ; default : case Token . ;
rank: 338
score: 98.47964477539062
patch: if ( ! true true true )
rank: 339
score: 99.0318359375
patch: return value . get CaMeL Node ( ) . is CaMeL Assignment CaMeL Op ( ) : true ;
rank: 339
score: 99.00815301192434
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent ( ) , locals ) ;
rank: 339
score: 98.85623168945312
patch: return ( value . get CaMeL Parent CaMeL Node ( ) == 0 ) ;
rank: 339
score: 98.60686645507812
patch: return ; return ; return ; = true ;
rank: 339
score: 98.60438842773438
patch: return ; * /
rank: 339
score: 98.58112928602431
patch: return ; default : if ( true ;
rank: 339
score: 98.47860378689236
patch: return true ; case Token . INSTANCEOF :
rank: 340
score: 99.03166647518383
patch: return $STRING$ + value . get CaMeL Parent ( ) . get CaMeL Type ( )
rank: 340
score: 99.00799091045673
patch: return null . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 340
score: 98.85591634114583
patch: return ( value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL
rank: 340
score: 98.74833679199219
patch: return null ; true return true ;
rank: 340
score: 98.606591796875
patch: return ; return true ; ; return true ;
rank: 340
score: 98.60411071777344
patch: return ; true ; return false ;
rank: 340
score: 98.5809326171875
patch: return Collections . EMPTY _ LIST ;
rank: 340
score: 98.47847493489583
patch: return true ; case Token . CATCH :
rank: 341
score: 99.03155517578125
patch: return $STRING$ + value . get CaMeL Parent CaMeL Node ( ) . get CaMeL Name ( ) ;
rank: 341
score: 99.00792236328125
patch: return is CaMeL Simple CaMeL Operator ( value , is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 341
score: 98.94155883789062
patch: else throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 341
score: 98.85516357421875
patch: if ( ! call CaMeL Has CaMeL Local CaMeL Result )
rank: 341
score: 98.74759928385417
patch: return true ; true return false ; ;
rank: 341
score: 98.60612487792969
patch: return ( true ; return true ;
rank: 341
score: 98.60387420654297
patch: return null ; else return true ;
rank: 341
score: 98.57754177517361
patch: return ; ; default : return false ;
rank: 341
score: 98.47757720947266
patch: fail ( $STRING$ + true ) ;
rank: 342
score: 99.00771859975961
patch: return locals . is CaMeL Simple CaMeL Operator ( $STRING$ ) ;
rank: 342
score: 98.8540751139323
patch: return ( is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 342
score: 98.74757215711806
patch: return true ; ; return false ; ;
rank: 342
score: 98.6057373046875
patch: return true ; ; return true + true ;
rank: 342
score: 98.47749837239583
patch: return true ; case Token . NOT :
rank: 343
score: 99.00771262428977
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . value . get CaMeL Parent ( ) ) ;
rank: 343
score: 98.74724663628473
patch: return true ; true ; ; true {
rank: 343
score: 98.60324096679688
patch: return ; , * * * /
rank: 343
score: 98.47665744357639
patch: return true ; case Token . GT :
rank: 344
score: 99.03103637695312
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 344
score: 99.0155029296875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Value ( ) ) ;
rank: 344
score: 99.00755896935097
patch: return false . is CaMeL Assignment CaMeL Op ( value ) ;
rank: 344
score: 98.94053344726562
patch: case Token . ARRAYLIT : return false ;
rank: 344
score: 98.74666922433036
patch: return true ; true * ;
rank: 344
score: 98.60530090332031
patch: return ; return 0 ; break ;
rank: 344
score: 98.60163879394531
patch: } else if ; return false ;
rank: 344
score: 98.57249620225694
patch: return ; default : return false true ;
rank: 345
score: 99.030859375
patch: return true ; case Token . ASSIGN : call CaMeL Has CaMeL Local CaMeL Result . return true ;
rank: 345
score: 99.00639262952302
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Simple CaMeL Operator ( value ) : false ;
rank: 345
score: 98.85264677159927
patch: return ( value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Simple CaMeL
rank: 345
score: 98.74485778808594
patch: return true ; return ( true ;
rank: 345
score: 98.6046142578125
patch: return ; = return true ; return true ;
rank: 345
score: 98.60135226779514
patch: { else { return false ; } }
rank: 345
score: 98.57166399274554
patch: return ; default : return ;
rank: 345
score: 98.47261555989583
patch: return TRUE ; case Token . true :
rank: 346
score: 99.00636693050987
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Token ( ) ) ;
rank: 346
score: 98.94012920673077
patch: else case Token . FUNCTION : case Token . ARRAYLIT :
rank: 346
score: 98.85240827287946
patch: return ( node . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 346
score: 98.74449920654297
patch: return true ; ; ; true {
rank: 346
score: 98.60426635742188
patch: return false ; ; return ; return true ;
rank: 346
score: 98.60021100725446
patch: . return ; return true ;
rank: 346
score: 98.57160295758929
patch: return true ; default : ;
rank: 346
score: 98.47221374511719
patch: ( ( Node ) true ) ;
rank: 347
score: 99.03028779871323
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ( value , locals ) ;
rank: 347
score: 99.01271362304688
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Symbol ( ) ) ;
rank: 347
score: 99.00620727539062
patch: return is CaMeL Simple CaMeL Operator ( value , < value . get CaMeL Parent ( ) ) ;
rank: 347
score: 98.93995496961806
patch: case Token . FUNCTION : return false ;
rank: 347
score: 98.85236065204327
patch: return $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 347
score: 98.744140625
patch: return true ; return && true ;
rank: 347
score: 98.60420365767045
patch: return true ; ; return true ; if true ;
rank: 347
score: 98.5997314453125
patch: return true ; if ; return false ;
rank: 347
score: 98.57124837239583
patch: return ; } else { return true ;
rank: 347
score: 98.47178649902344
patch: return false ? false : false ;
rank: 348
score: 99.0302505493164
patch: return value . get CaMeL Name ( ) . get CaMeL Parent ( ) ;
rank: 348
score: 99.0061922940341
patch: is CaMeL Simple CaMeL Operator ( ) return true ;
rank: 348
score: 98.93946329752605
patch: is CaMeL Simple CaMeL Operator ? case Token . REGEXP :
rank: 348
score: 98.74375915527344
patch: return true ; ; return $NUMBER$ ;
rank: 348
score: 98.60418701171875
patch: return true ; return ; * /
rank: 348
score: 98.59964328342014
patch: { return ; } else return false ;
rank: 348
score: 98.57048797607422
patch: if ( ; ; return false ;
rank: 348
score: 98.47163391113281
patch: if ( used ) return true ;
rank: 349
score: 99.02999114990234
patch: return value . get CaMeL Parent ( ) . get CaMeL Type ( ) {
rank: 349
score: 99.01237657335069
patch: case Token . ASSIGN : return true ;
rank: 349
score: 98.93765024038461
patch: return false ; is CaMeL Simple CaMeL Operator ( value ) ;
rank: 349
score: 98.85210104549633
patch: switch ( value . get CaMeL Parent ( ) . get CaMeL Type ( ) )
rank: 349
score: 98.74335394965277
patch: return false ; ; * return true ;
rank: 349
score: 98.60411376953125
patch: return true ; return true ; return ; {
rank: 349
score: 98.59783935546875
patch: throw null ; return true ;
rank: 349
score: 98.56973605685764
patch: if ( true ) return return true ;
rank: 349
score: 98.47117784288194
patch: return false ; default : throw new ;
rank: 350
score: 99.01228637695313
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Key ( ) ) ;
rank: 350
score: 99.0052490234375
patch: return is CaMeL Simple CaMeL Operator ( locals , value . get CaMeL Type ( ) ) ;
rank: 350
score: 98.93702915736607
patch: throw ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 350
score: 98.74317932128906
patch: return $STRING$ ; return true ; ;
rank: 350
score: 98.60395951704545
patch: return true ; true ; return ; = true ;
rank: 350
score: 98.5972900390625
patch: return true ; else return return false ;
rank: 350
score: 98.56869942801339
patch: if true ; return false ;
rank: 351
score: 99.0277099609375
patch: return true ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result return true ;
rank: 351
score: 99.01211751302084
patch: case Token . ARRAYLIT : case Token . IN : return true ;
rank: 351
score: 98.93515249399039
patch: throw new Runtime CaMeL Exception ( $STRING$ + value . get CaMeL
rank: 351
score: 98.85182407924107
patch: return ( value . get CaMeL Parent ( ) == 0 ) ;
rank: 351
score: 98.6026944247159
patch: return false ; ; return true ; return true ;
rank: 351
score: 98.59728325737848
patch: return false ; } catch return false ;
rank: 351
score: 98.46959771050348
patch: return true ; case Token . LOCAL :
rank: 352
score: 99.02744750976562
patch: return ( value . get CaMeL Parent ( ) . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 352
score: 99.01181512129934
patch: return ( ( Node ) value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 352
score: 99.00417073567708
patch: / * is CaMeL Simple CaMeL Operator ? return true ;
rank: 352
score: 98.934814453125
patch: switch ( value . get CaMeL Token ( ) ) {
rank: 352
score: 98.85137469951923
patch: return return locals . is CaMeL Simple CaMeL Operator ( ) ;
rank: 352
score: 98.74264526367188
patch: return true ; ; true ; return false ;
rank: 352
score: 98.60245971679687
patch: return true ; ; if true ; break ;
rank: 352
score: 98.59652709960938
patch: . return return true ;
rank: 352
score: 98.56784057617188
patch: return true ; default return false ;
rank: 352
score: 98.46948920355902
patch: if ( true ) return ! true ;
rank: 353
score: 99.01148223876953
patch: return value . get CaMeL Type ( ) == Token . IN : true ;
rank: 353
score: 99.00406044407895
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Node ( ) , value ) ;
rank: 353
score: 98.93458909254808
patch: break ; case Token . FUNCTION : case Token . REGEXP :
rank: 353
score: 98.85136144301471
patch: switch ( value . get CaMeL Type ( ) ) { case Token . ASSIGN :
rank: 353
score: 98.742626953125
patch: return false ; ; * / return true ;
rank: 353
score: 98.60190158420139
patch: return true ; return ; return 1 ;
rank: 353
score: 98.5963134765625
patch: return true ; } catch ;
rank: 353
score: 98.56484646267361
patch: return ; case Token . FUNCTION : ;
rank: 353
score: 98.46782684326172
patch: for ( ; ; ) { ;
rank: 354
score: 98.93369547526042
patch: is CaMeL Assignment CaMeL Op = false ; return true ;
rank: 354
score: 98.74247911241319
patch: return true ; return super . true ;
rank: 354
score: 98.60179138183594
patch: return - true ; return false ;
rank: 354
score: 98.59497942243304
patch: / * * return true ;
rank: 354
score: 98.46769883897569
patch: if ( true ) return false ; else
rank: 355
score: 99.01137084960938
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Depth ( ) ) ;
rank: 355
score: 99.00344509548611
patch: return is CaMeL Assignment CaMeL Op ( value is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 355
score: 98.93149239676339
patch: is CaMeL Simple CaMeL Operator return true ; case Token . IN :
rank: 355
score: 98.85076497395833
patch: System . out . println ( $STRING$ + value . get CaMeL Parent CaMeL
rank: 355
score: 98.74215698242188
patch: return false ; return true true ;
rank: 355
score: 98.60104370117188
patch: true return true ; return false ;
rank: 355
score: 98.46578543526786
patch: if ( value != null )
rank: 356
score: 99.02628173828126
patch: return value . get CaMeL Parent ( ) . is CaMeL Simple CaMeL Operator ? true : false ;
rank: 356
score: 98.93077741350446
patch: is CaMeL Simple CaMeL Operator = false ; case Token . FUNCTION :
rank: 356
score: 98.8504997702206
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ? ;
rank: 356
score: 98.74196370442708
patch: return false ; ; ?
rank: 356
score: 98.60072157118056
patch: return true ; return false ; return ;
rank: 356
score: 98.59440612792969
patch: return true ; n = true ;
rank: 356
score: 98.56368679470486
patch: return ; ; default : return true ;
rank: 356
score: 98.46426391601562
patch: if ( ! true || true )
rank: 357
score: 99.02627563476562
patch: return value . get CaMeL Parent ( ) . get CaMeL Type ( ) . next ( ) ;
rank: 357
score: 99.01107627467105
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + . get CaMeL Name ( ) ) ;
rank: 357
score: 99.00276264391448
patch: return is CaMeL Simple CaMeL Operator ( ) || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 357
score: 98.92850748697917
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + name
rank: 357
score: 98.85001046316964
patch: return ( value . get CaMeL Parent ( ) == $STRING$ ) ;
rank: 357
score: 98.74031066894531
patch: return return true ; return null ;
rank: 357
score: 98.60066986083984
patch: return this ; return - 1 ;
rank: 357
score: 98.59295654296875
patch: return true ; } * /
rank: 357
score: 98.5607401529948
patch: return ; case true :
rank: 357
score: 98.46358816964286
patch: return false ( true ) ;
rank: 358
score: 99.01089680989584
patch: case Token . FUNCTION : is CaMeL Assignment CaMeL Op ? return true ;
rank: 358
score: 99.0027087983631
patch: return ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent CaMeL Node ( ) ) ) ;
rank: 358
score: 98.84933706430289
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL
rank: 358
score: 98.73918914794922
patch: return false ; ; true / ;
rank: 358
score: 98.60063934326172
patch: return ; int n = true ;
rank: 358
score: 98.5915756225586
patch: break ; true } return false ;
rank: 358
score: 98.46240234375
patch: success = true ; return false ;
rank: 359
score: 99.02583530970982
patch: try { call CaMeL Has CaMeL Local CaMeL Result ? return true ;
rank: 359
score: 99.01088303786058
patch: return true ; is CaMeL Simple CaMeL Operator ? return false ;
rank: 359
score: 99.00230916341145
patch: / / is CaMeL Simple CaMeL Operator ? return true ;
rank: 359
score: 98.92690805288461
patch: is CaMeL Simple CaMeL Operator ? return true ; return true ;
rank: 359
score: 98.84900774274554
patch: return ( locals . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 359
score: 98.73916965060764
patch: return false ; true return true ; ;
rank: 359
score: 98.59060668945312
patch: return true ; else throw null ;
rank: 359
score: 98.45952497209821
patch: return false ; case Token ;
rank: 360
score: 99.01084498355263
patch: throw ( Illegal CaMeL State CaMeL Exception ) is CaMeL Simple CaMeL Operator ? true : true ;
rank: 360
score: 98.92664591471355
patch: is CaMeL Simple CaMeL Operator ? return false : true ;
rank: 360
score: 98.73908148871527
patch: return true ; true { return false ;
rank: 360
score: 98.60049002511161
patch: return true ; return type ;
rank: 360
score: 98.59010314941406
patch: return true ; true * * :
rank: 360
score: 98.5595703125
patch: return ; default : throw Context . ;
rank: 360
score: 98.45919036865234
patch: code = true ; return true ;
rank: 361
score: 99.02565630744485
patch: return value . get CaMeL Parent ( ) . is CaMeL Local ( value ) ;
rank: 361
score: 99.0103759765625
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( value , < Node > ) ;
rank: 361
score: 99.00172008167614
patch: this . throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 361
score: 98.9261474609375
patch: is CaMeL Simple CaMeL Operator ? return true : true ;
rank: 361
score: 98.84637044270833
patch: return ( ! value . is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 361
score: 98.73826768663194
patch: return false ; try ; return true ;
rank: 361
score: 98.6001309481534
patch: return true ; ; return true ; return false ;
rank: 361
score: 98.55644226074219
patch: return false ; default : return ;
rank: 361
score: 98.45680236816406
patch: if ( true true ) true ;
rank: 362
score: 99.00914655412946
patch: return value . get CaMeL Type ( ) == Token . IN ;
rank: 362
score: 99.001708984375
patch: return is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Class ( ) ) ;
rank: 362
score: 98.84625244140625
patch: return locals . is CaMeL Simple CaMeL Operator ( ) : true ;
rank: 362
score: 98.73798217773438
patch: return true ; try { return true ; ;
rank: 362
score: 98.599853515625
patch: return false ; if return true ; return true ;
rank: 362
score: 98.58940887451172
patch: . if return true ; break ;
rank: 362
score: 98.55597686767578
patch: short type = ; return true ;
rank: 362
score: 98.45633697509766
patch: if ( true true || true )
rank: 363
score: 99.00111897786458
patch: return null . is CaMeL Simple CaMeL Operator ( ) ;
rank: 363
score: 98.92529296875
patch: else throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value
rank: 363
score: 98.84588623046875
patch: return value . get CaMeL Parent CaMeL Node ( ) . is CaMeL Local CaMeL
rank: 363
score: 98.73741149902344
patch: return false ; return || true ;
rank: 363
score: 98.58913845486111
patch: . * * * * * * /
rank: 363
score: 98.45626395089286
patch: if ( ! true true ;
rank: 364
score: 99.02510986328124
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ? call CaMeL Has CaMeL Local CaMeL Result ?
rank: 364
score: 99.00045955882354
patch: return locals . get ( value . get CaMeL Parent ( ) ) != null ;
rank: 364
score: 98.92469200721153
patch: return false ; is CaMeL Assignment CaMeL Op ( value ) ;
rank: 364
score: 98.73680114746094
patch: return false ; true true ; ;
rank: 364
score: 98.58888753255208
patch: return ; * * * * * :
rank: 364
score: 98.55471462673611
patch: return true ; * / return true ;
rank: 365
score: 99.02431815011161
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result = true ;
rank: 365
score: 98.999755859375
patch: return ( ( Token ) value ) . is CaMeL Simple CaMeL Operator ( ) ;
rank: 365
score: 98.92452566964286
patch: is CaMeL Simple CaMeL Operator return false ; case Token . IN :
rank: 365
score: 98.73670111762152
patch: return false ; else if return true ;
rank: 365
score: 98.59872775607639
patch: return true ; true ; return 1 ;
rank: 365
score: 98.58877563476562
patch: return return null ; return false ;
rank: 365
score: 98.55449761284723
patch: return ; case Token . STRING : ;
rank: 365
score: 98.4546127319336
patch: return false ; return ! true ;
rank: 366
score: 99.02289225260417
patch: return value . get CaMeL Parent ( ) . contains ( value ) ;
rank: 366
score: 98.598388671875
patch: return ; return ; = false ;
rank: 366
score: 98.58875274658203
patch: return true ; } * * /
rank: 366
score: 98.55423312717014
patch: short type = true ; return true ;
rank: 366
score: 98.45398966471355
patch: for ( ; ; )
rank: 367
score: 99.02239990234375
patch: return value . get CaMeL Type ( ) == Token . ASSIGN : false ;
rank: 367
score: 98.99866303943452
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) + $STRING$ +
rank: 367
score: 98.92408243815105
patch: case Token . REGEXP : case Token . OBJECTLIT :
rank: 367
score: 98.84482709099265
patch: return ( locals . is CaMeL Assignment CaMeL Op ( Token . FUNCTION ) ) ;
rank: 367
score: 98.73661804199219
patch: return false ; true ++ true ;
rank: 367
score: 98.58760833740234
patch: return true ; / * * /
rank: 367
score: 98.55347442626953
patch: return ; case Token . TRUE :
rank: 368
score: 99.02130485983456
patch: return false ; case Token . FUNCTION : call CaMeL Has CaMeL Local CaMeL Result ?
rank: 368
score: 99.0081298828125
patch: case Token . IN : case Token . ARRAYLIT : return true ;
rank: 368
score: 98.99821391858552
patch: return is CaMeL Simple CaMeL Operator ( value , locals . get CaMeL Parent ( ) ) ;
rank: 368
score: 98.7359619140625
patch: if return true ; return false ; true ;
rank: 368
score: 98.5979736328125
patch: return ; = true ; ; return true ;
rank: 368
score: 98.5870361328125
patch: return true ; super . true ;
rank: 368
score: 98.5527114868164
patch: synchronized ( this ) return true ;
rank: 368
score: 98.45140838623047
patch: if ( options != null ) {
rank: 369
score: 99.0201416015625
patch: return value . get CaMeL Type ( ) == Token . REGEXP : true ;
rank: 369
score: 99.00801225142045
patch: case Token . ASSIGN : case Token . REGEXP :
rank: 369
score: 98.99745686848958
patch: return ( is CaMeL Assignment CaMeL Op ( value ) ;
rank: 369
score: 98.92179361979167
patch: return is CaMeL Simple CaMeL Operator ( value ) ; ;
rank: 369
score: 98.84404440487133
patch: return ( locals . to CaMeL String ( ) . equals ( $STRING$ ) ) ;
rank: 369
score: 98.59784698486328
patch: true return true ; if true ;
rank: 369
score: 98.58650207519531
patch: { if ( true ; return ;
rank: 369
score: 98.55177815755208
patch: return ; default : if ( true )
rank: 369
score: 98.449462890625
patch: if ; else return true ;
rank: 370
score: 98.92022235576923
patch: return is CaMeL Simple CaMeL Operator ( value , ASSIGN ) ;
rank: 370
score: 98.8427022298177
patch: return children . is CaMeL Simple CaMeL Operator ( ) ;
rank: 370
score: 98.7349853515625
patch: return true ; return true ; return null ;
rank: 370
score: 98.59778941761364
patch: return true ; return true ; } return false ;
rank: 370
score: 98.58649444580078
patch: { if ; / * * /
rank: 370
score: 98.44932556152344
patch: sb . append ( $STRING$ ) ;
rank: 371
score: 98.8413314819336
patch: return value . get CaMeL Type ( ) . is CaMeL Constructor ( ) ;
rank: 371
score: 98.73493787977431
patch: return false ; value { return true ;
rank: 371
score: 98.5973388671875
patch: return true ; if return 1 - true ;
rank: 371
score: 98.58617401123047
patch: return true ; return false true ;
rank: 371
score: 98.55087619357639
patch: synchronized ( this ) ; return true ;
rank: 371
score: 98.44898986816406
patch: ( ( Node ) true ) .
rank: 372
score: 99.0176025390625
patch: return value . get CaMeL Type ( ) ;
rank: 372
score: 98.91859788161058
patch: return is CaMeL Simple CaMeL Operator ( locals , locals ) ;
rank: 372
score: 98.84120871803977
patch: switch ( value . get CaMeL Parent ( ) )
rank: 372
score: 98.73493109809027
patch: return false ; else { return false ;
rank: 372
score: 98.59653049045139
patch: return false ; return true + true ;
rank: 372
score: 98.55084991455078
patch: return false ; default : throw ;
rank: 372
score: 98.44793701171875
patch: if ( true || true )
rank: 373
score: 99.00765380859374
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + id . get CaMeL Parent ( ) ) ;
rank: 373
score: 98.99628649259868
patch: return is CaMeL Simple CaMeL Operator ( value , locals . get CaMeL Token ( ) ) ;
rank: 373
score: 98.9177490234375
patch: is CaMeL Simple CaMeL Operator : return false ;
rank: 373
score: 98.84077453613281
patch: System . println ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 373
score: 98.73466796875
patch: return true ; true * * return false ;
rank: 373
score: 98.59629991319444
patch: return true ; true ; return * ;
rank: 373
score: 98.58574676513672
patch: { if return true ; } else
rank: 373
score: 98.54843139648438
patch: do { return true ;
rank: 373
score: 98.44764927455357
patch: return ( true true ) ;
rank: 374
score: 98.99625651041667
patch: return is CaMeL Simple CaMeL Operator ( , value ) ;
rank: 374
score: 98.58431570870536
patch: } else { return true ;
rank: 374
score: 98.54787868923611
patch: return ; case Token . LABEL : ;
rank: 374
score: 98.44760131835938
patch: parameters . remove ( value ) ;
rank: 375
score: 99.00705135569854
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( 0 , value ) ;
rank: 375
score: 98.99608357747395
patch: return is CaMeL Assignment CaMeL Op ( value ) ; ;
rank: 375
score: 98.83932495117188
patch: return is CaMeL Simple CaMeL Operator ? true ? true ;
rank: 375
score: 98.73447672526042
patch: return return true ; ; return false ;
rank: 375
score: 98.59601384943181
patch: return true ; ; = true ; return true ;
rank: 375
score: 98.58346993582589
patch: return false ; } else {
rank: 375
score: 98.4443588256836
patch: if ( true ) break false ;
rank: 376
score: 99.01393345424107
patch: return value . get CaMeL Type ( ) == Node . ASSIGN ;
rank: 376
score: 99.00673217773438
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL State ( ) ) ;
rank: 376
score: 98.99537489149306
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Value ( $STRING$ ) ) ;
rank: 376
score: 98.91231282552083
patch: is CaMeL Simple CaMeL Operator ? case Token . IN :
rank: 376
score: 98.83828735351562
patch: { return is CaMeL Assignment CaMeL Op ( value ) ;
rank: 376
score: 98.5958251953125
patch: return ; return ; return ; return true ;
rank: 376
score: 98.58330535888672
patch: { if ( true ) break ;
rank: 376
score: 98.54697672526042
patch: if ( code == Token . true )
rank: 376
score: 98.43893432617188
patch: return true ; case Node . ;
rank: 377
score: 99.01374053955078
patch: return value . get CaMeL Type ( ) == Token . REGEXP : false ;
rank: 377
score: 99.00650634765626
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ? true : false ;
rank: 377
score: 98.9952392578125
patch: return locals . get CaMeL Node ( value . get CaMeL Parent ( ) ) == null ;
rank: 377
score: 98.9114990234375
patch: case Token . IN : case Token . OBJECTLIT :
rank: 377
score: 98.73398263113839
patch: return false ; while true ;
rank: 377
score: 98.59518432617188
patch: true ; if true ;
rank: 377
score: 98.58223724365234
patch: return true ; else { return ;
rank: 377
score: 98.54640197753906
patch: return ; default : throw ; }
rank: 378
score: 99.00630268297698
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ; case Token . FUNCTION :
rank: 378
score: 98.99441528320312
patch: return is CaMeL Simple CaMeL Operator ( value ) && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 378
score: 98.91058959960938
patch: return value . is CaMeL Local ( ) ;
rank: 378
score: 98.83755929129464
patch: return ( node . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 378
score: 98.59508514404297
patch: return ; return ; return 1 ;
rank: 378
score: 98.58163452148438
patch: = true ; } return true ;
rank: 378
score: 98.43756866455078
patch: if ( used ) return false ;
rank: 379
score: 99.01336669921875
patch: return value . get CaMeL Type ( ) == Token . ASSIGN : true ;
rank: 379
score: 98.99396306818181
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Stack CaMeL Trace ( ) ) ;
rank: 379
score: 98.9089111328125
patch: return false ; case Token . OBJECTLIT :
rank: 379
score: 98.8372314453125
patch: return $STRING$ . equals ( value . to CaMeL String ( ) ) ;
rank: 379
score: 98.73320855034723
patch: return true ; true catch return true ;
rank: 379
score: 98.54376898871527
patch: synchronized ( true ) { return false ;
rank: 379
score: 98.43754577636719
patch: return TRUE ; case Token . ;
rank: 380
score: 99.01279703776042
patch: return value . get CaMeL Value ( ) == 0 ;
rank: 380
score: 99.00449829101562
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( $STRING$ ) ;
rank: 380
score: 98.90858811598558
patch: return true && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 380
score: 98.73223114013672
patch: return false ; while true ; ;
rank: 380
score: 98.59454345703125
patch: return true ; return false + true ;
rank: 380
score: 98.58090209960938
patch: throw new return ( true ) ;
rank: 380
score: 98.54298400878906
patch: return ; ; case Token . ;
rank: 380
score: 98.43753051757812
patch: ret = true ; return false ;
rank: 381
score: 99.0126953125
patch: return value . get CaMeL Type ( ) . length ( ) > 1 ;
rank: 381
score: 99.00419921875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Module ( ) ) ;
rank: 381
score: 98.99343390213816
patch: return is CaMeL Assignment CaMeL Op ( value , locals . get CaMeL Token ( ) ) ;
rank: 381
score: 98.90752704326923
patch: break ; case Token . FUNCTION : case Token . FUNCTION :
rank: 381
score: 98.83509172712054
patch: if ( value . is CaMeL Assignment CaMeL Op ( ) ) {
rank: 381
score: 98.73193359375
patch: return 0 ; return true ; ;
rank: 381
score: 98.59434204101562
patch: return $STRING$ ; return true ; if true ;
rank: 381
score: 98.53955756293402
patch: return true ; default : break ; }
rank: 381
score: 98.4375228881836
patch: if ( scope != null ) {
rank: 382
score: 99.0109151204427
patch: return value . get CaMeL Parent ( ) instanceof Node ;
rank: 382
score: 98.99327674278847
patch: try { return is CaMeL Simple CaMeL Operator ( value ) ;
rank: 382
score: 98.90628756009616
patch: return false && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 382
score: 98.83491346571181
patch: throw new Illegal CaMeL State CaMeL Exception (
rank: 382
score: 98.73046875
patch: return true ; true ; *
rank: 382
score: 98.5942138671875
patch: return false ; return false ; if true ;
rank: 382
score: 98.57985142299107
patch: / * * * * /
rank: 382
score: 98.53936089409723
patch: synchronized ( this ) { return false ;
rank: 382
score: 98.43707275390625
patch: exp = true ; return true ;
rank: 383
score: 98.99317278180804
patch: if ( value . get CaMeL Type ( ) == Token . IN
rank: 383
score: 98.9057147686298
patch: throw new $STRING$ + value . get CaMeL Type ( ) ;
rank: 383
score: 98.83478190104167
patch: return locals . add ( value . get CaMeL Parent ( ) ) ;
rank: 383
score: 98.73045349121094
patch: return true ; true true * /
rank: 383
score: 98.59326171875
patch: return ; { return false ;
rank: 383
score: 98.57981363932292
patch: return true ; * * * * /
rank: 383
score: 98.53779820033482
patch: if ; ; return false ;
rank: 384
score: 98.99292805989583
patch: return ( is CaMeL Assignment CaMeL Op ( value , locals ) ) ;
rank: 384
score: 98.90500710227273
patch: is CaMeL Simple CaMeL Operator ? return false ; ;
rank: 384
score: 98.73023071289063
patch: return true ; ; / * return true ;
rank: 384
score: 98.593017578125
patch: return null ; return true ; return true ;
rank: 384
score: 98.57954237196181
patch: return ; / * * * * /
rank: 385
score: 99.00901576450893
patch: return ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 385
score: 99.00275621916118
patch: return ( ( Token ) value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ;
rank: 385
score: 98.99269612630208
patch: return is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 385
score: 98.90419358473558
patch: / case Token . FUNCTION : case Token . ARRAYLIT :
rank: 385
score: 98.83280944824219
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op (
rank: 385
score: 98.72979736328125
patch: return true ; true / ; ;
rank: 385
score: 98.5926513671875
patch: return ; = true ; break ;
rank: 385
score: 98.43583679199219
patch: type = true ; return false ;
rank: 386
score: 99.0027214499081
patch: return ( value . evaluates CaMeL To CaMeL Local CaMeL Value ( $STRING$ ) ) ;
rank: 386
score: 98.99197823660714
patch: if ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ) return true ;
rank: 386
score: 98.9026348407452
patch: return is CaMeL Simple CaMeL Operator ( true , value ) ;
rank: 386
score: 98.59109836154514
patch: return false ; return ; return false ;
rank: 386
score: 98.53590901692708
patch: if ( true ; ; return false ;
rank: 386
score: 98.43524169921875
patch: val = true ; return false ;
rank: 387
score: 99.00807407924107
patch: return true ; case Token . FUNCTION : case Token . FUNCTION :
rank: 387
score: 99.00265502929688
patch: return value . get CaMeL Type ( ) != Token . REGEXP : true ;
rank: 387
score: 98.9918212890625
patch: if ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ) { return true ;
rank: 387
score: 98.89887029474431
patch: case Token . REGEXP : case Token . IN :
rank: 387
score: 98.72921316964286
patch: return true ; ; true *
rank: 387
score: 98.59101867675781
patch: return ; { if return true ;
rank: 387
score: 98.57814534505208
patch: { return true ; } else return ;
rank: 387
score: 98.53573269314236
patch: return false ; default : throw true ;
rank: 387
score: 98.43436431884766
patch: for ( ; ) return true ;
rank: 388
score: 99.00260925292969
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value , value ) ;
rank: 388
score: 98.89849243164062
patch: return false ; case Token . FUNCTION : }
rank: 388
score: 98.83138020833333
patch: if ( call CaMeL Has CaMeL Local CaMeL Result ) {
rank: 388
score: 98.7291259765625
patch: return true ; return 0 ; ;
rank: 388
score: 98.59006958007812
patch: return false ; if true ; return false ;
rank: 388
score: 98.53567165798611
patch: return true ; case Token . Branch :
rank: 388
score: 98.4325942993164
patch: return Collections . singleton ( true ;
rank: 389
score: 98.99088134765626
patch: return is CaMeL Assignment CaMeL Op ( value || is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 389
score: 98.89694213867188
patch: return false ; case Token . REGEXP : return false ;
rank: 389
score: 98.83060128348214
patch: return locals . is CaMeL Simple CaMeL Operator ( ) || true ;
rank: 389
score: 98.72853088378906
patch: return true ; true ; else {
rank: 389
score: 98.58981323242188
patch: return new true ; return true ;
rank: 389
score: 98.57801818847656
patch: throw return false ; return false ;
rank: 389
score: 98.53529357910156
patch: if ( true ) true ; ;
rank: 389
score: 98.43219757080078
patch: if ( ! true && true ;
rank: 390
score: 99.00166829427083
patch: case Token . ARRAYLIT : switch ( value . get CaMeL Type ( ) ) {
rank: 390
score: 98.99037475585938
patch: return ( locals . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 390
score: 98.82970252403847
patch: return value . is CaMeL Simple CaMeL Operator ? return true ;
rank: 390
score: 98.72818756103516
patch: return null ; return false ; ;
rank: 390
score: 98.58929443359375
patch: return true ; if true ; return 1 ;
rank: 390
score: 98.5771484375
patch: if ( false ; return false ;
rank: 390
score: 98.43146514892578
patch: if ( ! true ) continue ;
rank: 391
score: 99.00609334309895
patch: return value . get CaMeL Length ( ) == 0 ;
rank: 391
score: 99.00070672286184
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( value , < Node > ) ;
rank: 391
score: 98.9901835123698
patch: return is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 391
score: 98.89455344460227
patch: return true ; case Token . FUNCTION : break ;
rank: 391
score: 98.82970081676136
patch: case Token . FUNCTION : case Token . REGEXP _
rank: 391
score: 98.72813415527344
patch: return true ; ; ; / ;
rank: 391
score: 98.43077087402344
patch: resolved = true ; return true ;
rank: 392
score: 99.0006436434659
patch: is CaMeL Simple CaMeL Operator ( value , locals )
rank: 392
score: 98.98976828835227
patch: return is CaMeL Simple CaMeL Operator ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( locals ) ;
rank: 392
score: 98.89341905381944
patch: return true ; case Node . FUNCTION :
rank: 392
score: 98.82792663574219
patch: return value . get CaMeL Node ( ) . is CaMeL Simple CaMeL Operator ?
rank: 392
score: 98.72793918185764
patch: return false ; return - true ; ;
rank: 392
score: 98.58869171142578
patch: return * true ; if true ;
rank: 392
score: 98.57634819878473
patch: } if ( true ; return true ;
rank: 392
score: 98.53464181082589
patch: return return true ; default :
rank: 392
score: 98.4300765991211
patch: buffer . append ( $STRING$ ) ;
rank: 393
score: 99.00499471028645
patch: switch ( value . get CaMeL Name ( ) ) {
rank: 393
score: 98.98976236979166
patch: return ( true || is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 393
score: 98.89129638671875
patch: else throw new Illegal CaMeL State CaMeL Exception ( $STRING$ +
rank: 393
score: 98.58660278320312
patch: return true ; return true ; return / ;
rank: 393
score: 98.57566324869792
patch: { if true ; } return false ;
rank: 394
score: 99.0000228881836
patch: throw new Runtime CaMeL Exception ( value . get CaMeL Parent ( ) ) ;
rank: 394
score: 98.72764587402344
patch: return true ; true if true ;
rank: 394
score: 98.58598022460937
patch: return ; { return true ; return true ;
rank: 394
score: 98.57557896205357
patch: return ; else return false ;
rank: 394
score: 98.53417205810547
patch: ? if ( true ) break ;
rank: 394
score: 98.428955078125
patch: if ( options == null )
rank: 395
score: 98.98873098273026
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Value ( ) , locals ) ;
rank: 395
score: 98.8839999112216
patch: ( ( Token ) locals ) . return true ;
rank: 395
score: 98.72670288085938
patch: return true ; return null ; return false ;
rank: 395
score: 98.58533325195313
patch: return false ; ; if ; = true ;
rank: 395
score: 98.57518768310547
patch: return ; true * * * /
rank: 395
score: 98.53347439236111
patch: return return false ; } return true ;
rank: 395
score: 98.42716761997768
patch: if ( options != null )
rank: 396
score: 99.00334821428571
patch: return value . get CaMeL Parent ( ) . trim ( ) ;
rank: 396
score: 98.99945678710938
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Property ( ) ) ;
rank: 396
score: 98.98804873511905
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) + $STRING$ ;
rank: 396
score: 98.88209117542614
patch: return case Token . ARRAYLIT : return true ;
rank: 396
score: 98.82569986979166
patch: return ( value . get CaMeL Token ( ) . is CaMeL Simple CaMeL
rank: 396
score: 98.72637176513672
patch: return false ; true ; false ;
rank: 396
score: 98.58497450086806
patch: return false ; if true ; break ;
rank: 396
score: 98.57503836495536
patch: { return true ; true ;
rank: 396
score: 98.53285217285156
patch: return true ; / * return ;
rank: 396
score: 98.4267578125
patch: if ( values != null ) {
rank: 397
score: 99.00144856770834
patch: return is CaMeL Assignment CaMeL Op ( ) ; case Token . FUNCTION :
rank: 397
score: 98.8802490234375
patch: case Token . REGEXP : case Token . FUNCTION :
rank: 397
score: 98.82554524739584
patch: return ( value . set CaMeL Type ( Token . ASSIGN ) ) ;
rank: 397
score: 98.72624206542969
patch: return true ; ; / / ;
rank: 397
score: 98.57462310791016
patch: return false ; if ( true ;
rank: 397
score: 98.53158569335938
patch: ? if ( ; return true )
rank: 397
score: 98.42523193359375
patch: return default : return false ;
rank: 398
score: 98.98760665090461
patch: throw new Illegal CaMeL State CaMeL Exception ( value . get CaMeL Parent ( ) . get CaMeL
rank: 398
score: 98.87818492542614
patch: is CaMeL Simple CaMeL Operator ? { return true ;
rank: 398
score: 98.7256851196289
patch: return this . true ; true ;
rank: 398
score: 98.57456970214844
patch: { else return return true ; }
rank: 398
score: 98.42499651227679
patch: if ( scope == null )
rank: 399
score: 98.99779459635417
patch: return value . get CaMeL Name ( ) . contains ( $STRING$ ) ;
rank: 399
score: 98.98757934570312
patch: return is CaMeL Assignment CaMeL Op ( value , < value . get CaMeL Parent ( ) ) ;
rank: 399
score: 98.87739562988281
patch: x = true ; return true ;
rank: 399
score: 98.82251915564903
patch: log . case Token . FUNCTION : case Token . REGEXP :
rank: 399
score: 98.7256088256836
patch: return true ; return true ; *
rank: 399
score: 98.5744857788086
patch: { return true ; } catch ;
rank: 399
score: 98.5304183959961
patch: ? if ( ; return false ;
rank: 399
score: 98.42437744140625
patch: return true && true ;
rank: 400
score: 98.99756469726563
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) && true ;
rank: 400
score: 98.9969482421875
patch: return value . get CaMeL Parent CaMeL Node ( ) == null ;
rank: 400
score: 98.98733956473214
patch: return ( is CaMeL Simple CaMeL Operator ( ) || is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 400
score: 98.87513316761364
patch: return locals . is CaMeL Local ( value ) ;
rank: 400
score: 98.7255859375
patch: return true ; true : return true ;
rank: 400
score: 98.573486328125
patch: { / * * * /
rank: 400
score: 98.52902560763889
patch: return ; default : return true true ;
rank: 400
score: 98.42135184151786
patch: return true ; if ( ;
rank: 401
score: 98.99703640407986
patch: throw new Security CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ;
rank: 401
score: 98.9966153231534
patch: return true ; case Token . Token . FUNCTION :
rank: 401
score: 98.87451782226563
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ;
rank: 401
score: 98.82188415527344
patch: break ; case Token . IN :
rank: 401
score: 98.72540893554688
patch: return false ; true * ; return false ;
rank: 401
score: 98.58446044921875
patch: return ; return - 1 ; return true ;
rank: 401
score: 98.57235281808036
patch: return ; ? return false ;
rank: 402
score: 98.9964130108173
patch: return is CaMeL Immutable CaMeL Value ( value , locals ) ;
rank: 402
score: 98.98692562705592
patch: return ( value . get CaMeL Type ( ) . equals ( Token . ASSIGN ) ) ;
rank: 402
score: 98.8724365234375
patch: throw ( Illegal CaMeL State CaMeL Exception ) false ;
rank: 402
score: 98.72499389648438
patch: return false ; true ; if return false ;
rank: 402
score: 98.58401828342014
patch: return false ; if ; return true ;
rank: 402
score: 98.57206895616319
patch: { if ( true ; break ; }
rank: 402
score: 98.52608235677083
patch: return false ; ; } return true ;
rank: 402
score: 98.41682739257813
patch: value = true ;
rank: 403
score: 98.99616241455078
patch: return value . get CaMeL Type ( ) != Token . IN : true ;
rank: 403
score: 98.98671311598558
patch: return is CaMeL Assignment CaMeL Op ( value , < ) ;
rank: 403
score: 98.72459411621094
patch: return false ; ; ; true ;
rank: 403
score: 98.58379364013672
patch: return true ; true ; break ;
rank: 403
score: 98.57160101996527
patch: return true ; while ( true true ;
rank: 403
score: 98.52530246310764
patch: return return true ; } return true ;
rank: 403
score: 98.40864780970982
patch: try { if ( true )
rank: 404
score: 98.99595424107143
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ? true :
rank: 404
score: 98.98590642755681
patch: if ( value . get CaMeL Type ( ) . equals ( Token . FUNCTION ) ) { return true ;
rank: 404
score: 98.8703369140625
patch: return case Token . FUNCTION : return true ;
rank: 404
score: 98.82071358816964
patch: return ( value . get CaMeL Parent ( ) == false ) ;
rank: 404
score: 98.72427029079861
patch: return true ; return false ; true {
rank: 404
score: 98.58378601074219
patch: return return 1 ; return false ;
rank: 404
score: 98.57156808035714
patch: } if ; return false ;
rank: 404
score: 98.52497016059027
patch: return ; case Token . EMPTY : ;
rank: 404
score: 98.406494140625
patch: synchronized ( true ) {
rank: 405
score: 98.820556640625
patch: return is CaMeL Simple CaMeL Operator ? true ? true : true ;
rank: 405
score: 98.72418212890625
patch: / return true ; return true ;
rank: 405
score: 98.58346121651786
patch: return ; ; return true ;
rank: 405
score: 98.57125515407986
patch: return true ; } return return false ;
rank: 405
score: 98.52373504638672
patch: return true ; case Token ; ;
rank: 406
score: 98.99535260881696
patch: return $STRING$ ? is CaMeL Simple CaMeL Operator ? true : true ;
rank: 406
score: 98.98583984375
patch: return ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Token ( ) ) ) ;
rank: 406
score: 98.82026890345982
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value , ) ;
rank: 406
score: 98.72417449951172
patch: boolean return false ; return true ;
rank: 406
score: 98.58345031738281
patch: return true ; return ; / ;
rank: 406
score: 98.57093641493056
patch: return ; / * * return true ;
rank: 406
score: 98.52351888020833
patch: return true ; case Token . ; :
rank: 406
score: 98.40510777064732
patch: if true ? return false ;
rank: 407
score: 98.9949886924342
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + . get CaMeL Parent ( ) ) ;
rank: 407
score: 98.99148123604911
patch: return value . get CaMeL Name ( ) . next ( ) ;
rank: 407
score: 98.8620938387784
patch: is CaMeL Simple CaMeL Operator ? else return true ;
rank: 407
score: 98.81938032670455
patch: return . is CaMeL Simple CaMeL Operator ? true ;
rank: 407
score: 98.72376251220703
patch: return true ; ; ; * ;
rank: 407
score: 98.58311244419643
patch: return false ; ; return ;
rank: 407
score: 98.5233154296875
patch: ? if ( ; return true ;
rank: 407
score: 98.40361676897321
patch: parameters . clear ( ) ;
rank: 408
score: 98.99472384982639
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Value ( ) ) ;
rank: 408
score: 98.99065692608173
patch: return value . is CaMeL Assignment CaMeL Op ( $STRING$ ) ;
rank: 408
score: 98.98500462582237
patch: return ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Token ( ) ) ) ;
rank: 408
score: 98.86151123046875
patch: case Token . IN : return false ;
rank: 408
score: 98.81932654747597
patch: return ( value . get CaMeL Parent ( ) . get CaMeL
rank: 408
score: 98.72357855902777
patch: return return false ; return true ; ;
rank: 408
score: 98.58241271972656
patch: return * true ; return false ;
rank: 408
score: 98.57051849365234
patch: return null ; } return true ;
rank: 408
score: 98.52280099051339
patch: ? * / return false ;
rank: 408
score: 98.39592633928571
patch: * * / return true ;
rank: 409
score: 98.9942138671875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + parent . get CaMeL Parent ( ) ) ;
rank: 409
score: 98.98981119791667
patch: return this . is CaMeL Assignment CaMeL Op ( value , locals ) ;
rank: 409
score: 98.98460629111842
patch: return is CaMeL Simple CaMeL Operator ( value , locals . get CaMeL Node ( ) ) ;
rank: 409
score: 98.85976340553977
patch: is CaMeL Simple CaMeL Operator ( ) return false ;
rank: 409
score: 98.8192608173077
patch: return is CaMeL Assignment CaMeL Op ( value ) ? true ;
rank: 409
score: 98.7219970703125
patch: return false ; ; ; ; return false ;
rank: 409
score: 98.5821533203125
patch: return * / return true ;
rank: 409
score: 98.57047271728516
patch: { / * * * * /
rank: 409
score: 98.39506312779018
patch: if ( true == true )
rank: 410
score: 98.99390411376953
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + name + $STRING$ ) ;
rank: 410
score: 98.98963341346153
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value ,
rank: 410
score: 98.98427862870066
patch: return is CaMeL Simple CaMeL Operator ( value , locals . get CaMeL Value ( ) ) ;
rank: 410
score: 98.85510932074652
patch: is CaMeL Simple CaMeL Operator return true ;
rank: 410
score: 98.72090657552083
patch: return true ; return - return true ;
rank: 410
score: 98.58213500976562
patch: return $STRING$ ; if true ; return true ;
rank: 410
score: 98.5700454711914
patch: . if true ; return false ;
rank: 410
score: 98.52159118652344
patch: return ; case Token . LABEL :
rank: 410
score: 98.39167131696429
patch: if ( true true true ;
rank: 411
score: 98.99366519325658
patch: return value . evaluates CaMeL To CaMeL Local CaMeL Value ( ) ; case Token . REGEXP :
rank: 411
score: 98.98935171274039
patch: return value . get CaMeL Type ( ) != Token . FUNCTION
rank: 411
score: 98.81820678710938
patch: } return is CaMeL Assignment CaMeL Op ( value ) ;
rank: 411
score: 98.5814208984375
patch: return n ; return true ;
rank: 411
score: 98.52072579520089
patch: ? if ; return true ;
rank: 411
score: 98.39111328125
patch: if ( true && true ;
rank: 412
score: 98.99349365234374
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Method ( ) ) ;
rank: 412
score: 98.98722330729167
patch: return call CaMeL Has CaMeL Local CaMeL Result ( value , $STRING$ ) ;
rank: 412
score: 98.85169566761364
patch: return false ; case Token . FUNCTION : break ;
rank: 412
score: 98.71898057725694
patch: return return true ; return false ; ;
rank: 412
score: 98.58131917317708
patch: return true ; return ; return / ;
rank: 412
score: 98.56917572021484
patch: { if ; true * * /
rank: 412
score: 98.5193862915039
patch: break ; default : return false ;
rank: 413
score: 98.99340057373047
patch: return new ? true : true ;
rank: 413
score: 98.983447265625
patch: return is CaMeL Assignment CaMeL Op ( value ) . is CaMeL Simple CaMeL Operator ( value ) ;
rank: 413
score: 98.8496426669034
patch: else is CaMeL Simple CaMeL Operator ? return true ;
rank: 413
score: 98.81756184895833
patch: super . evaluates CaMeL To CaMeL Local CaMeL Value ( value , ) ;
rank: 413
score: 98.58031463623047
patch: return $STRING$ ; if return true ;
rank: 413
score: 98.51902940538194
patch: int type = true ; return true ;
rank: 413
score: 98.38888113839286
patch: do { return true ; }
rank: 414
score: 98.99322509765625
patch: case Token . REGEXP : case Token . REGEXP : return true ;
rank: 414
score: 98.98316040039063
patch: return is CaMeL Simple CaMeL Operator ( value ) || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 414
score: 98.848974609375
patch: return true ; case Token . REGEXP : }
rank: 414
score: 98.81716086647727
patch: if ( is CaMeL Assignment CaMeL Op ( value )
rank: 414
score: 98.71853637695312
patch: return false ; ; * * ;
rank: 414
score: 98.58006286621094
patch: if true ; return - 1 ;
rank: 414
score: 98.56771850585938
patch: return return ! true ;
rank: 414
score: 98.38168770926339
patch: if ( true true ) ;
rank: 415
score: 98.99322509765625
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + name . to CaMeL String ( ) ) ;
rank: 415
score: 98.84664916992188
patch: return true ; case Token . IN : }
rank: 415
score: 98.71776123046875
patch: return this . true ; return false ; ;
rank: 415
score: 98.57998046875
patch: return false ; return - 1 + true ;
rank: 415
score: 98.5674560546875
patch: return return null ;
rank: 415
score: 98.51844024658203
patch: String name = ; return false ;
rank: 415
score: 98.37830607096355
patch: if ( true ; ;
rank: 416
score: 98.98487345377605
patch: return value . get CaMeL Value ( ) == false ;
rank: 416
score: 98.98141276041666
patch: return value . get CaMeL Type ( ) . equals ( Token . FUNCTION
rank: 416
score: 98.84540473090277
patch: is CaMeL Simple CaMeL Operator return false ;
rank: 416
score: 98.71757507324219
patch: result return true ; return true ;
rank: 416
score: 98.57994842529297
patch: true true ; if return true ;
rank: 416
score: 98.56741333007812
patch: result = true ; return false ;
rank: 416
score: 98.51776123046875
patch: / * return true * /
rank: 417
score: 98.99301629317434
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 417
score: 98.9807598407452
patch: return is CaMeL Simple CaMeL Operator ( value + $STRING$ ) ;
rank: 417
score: 98.84312855113636
patch: switch ( value ) { case Token . IN :
rank: 417
score: 98.81400844029018
patch: return value . get CaMeL Parent CaMeL Node ( ) == false ;
rank: 417
score: 98.71747504340277
patch: return false ; ; ? return false ;
rank: 417
score: 98.57964324951172
patch: return ; { return true ; }
rank: 417
score: 98.56623186383929
patch: return false ; else return ;
rank: 417
score: 98.37313406808036
patch: if ( true ; true )
rank: 418
score: 98.99223022460937
patch: return locals . evaluates CaMeL To CaMeL Local CaMeL Value ( ( Node ) value , locals ) ;
rank: 418
score: 98.98011997767857
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ; ;
rank: 418
score: 98.813720703125
patch: return switch ( value . get CaMeL Parent CaMeL Node ( ) )
rank: 418
score: 98.7169189453125
patch: throw true ; return true ;
rank: 418
score: 98.57963053385417
patch: true ; return true ; while true ;
rank: 418
score: 98.56497192382812
patch: return true ; this . return ;
rank: 418
score: 98.51582845052083
patch: throws No CaMeL Such CaMeL Method CaMeL Exception
rank: 418
score: 98.37256731305804
patch: if ( true == false )
rank: 419
score: 98.9919942220052
patch: return false ; case Token . ASSIGN : return true ;
rank: 419
score: 98.97767740885416
patch: return is CaMeL Assignment CaMeL Op ( value , value , locals ) ;
rank: 419
score: 98.84157104492188
patch: return true ; ; case Token . FUNCTION :
rank: 419
score: 98.81290690104167
patch: System . err . println ( $STRING$ + value . get CaMeL Parent CaMeL
rank: 419
score: 98.71676974826389
patch: return null ; true ; return true ;
rank: 419
score: 98.57904730902777
patch: return false ; ; if true * /
rank: 419
score: 98.56481061662946
patch: return this . return true ;
rank: 419
score: 98.5157979329427
patch: ? * return true ;
rank: 419
score: 98.37189592633929
patch: if ( true , true )
rank: 420
score: 98.97963169642857
patch: return true ; case Token . IN : case Token . FUNCTION :
rank: 420
score: 98.9775634765625
patch: return ( is CaMeL Simple CaMeL Operator ( value , locals ) ) ;
rank: 420
score: 98.84011501736111
patch: return false ; case Node . FUNCTION :
rank: 420
score: 98.81241048177084
patch: return ( locals . is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 420
score: 98.71640625
patch: return true ; true return super . true ;
rank: 420
score: 98.57866668701172
patch: true ; return ; = false ;
rank: 420
score: 98.56354522705078
patch: return return false ; } else {
rank: 420
score: 98.37063598632812
patch: return false ; default :
rank: 421
score: 98.97701590401786
patch: return ( is CaMeL Assignment CaMeL Op ( ) || is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 421
score: 98.83916015625
patch: throw new Runtime CaMeL Exception ( $STRING$ + value
rank: 421
score: 98.81223842075893
patch: return value . is CaMeL Simple CaMeL Operator ? true ? true ;
rank: 421
score: 98.71612548828125
patch: return this . return true ; ;
rank: 421
score: 98.57841491699219
patch: return true ; return * ; /
rank: 421
score: 98.56328582763672
patch: * * * * * * ;
rank: 421
score: 98.51412200927734
patch: return ; default : switch ( ;
rank: 421
score: 98.36948067801339
patch: Set < Node > true ;
rank: 422
score: 98.97686360677083
patch: return ( true || is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 422
score: 98.8379794034091
patch: return Boolean . false ; case Token . FUNCTION :
rank: 422
score: 98.57838439941406
patch: return - $NUMBER$ ; return true ;
rank: 422
score: 98.5628662109375
patch: return true ; } / * /
rank: 423
score: 98.99085908777573
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Template CaMeL
rank: 423
score: 98.97630208333334
patch: case Token . FUNCTION : case Token . ARRAYLIT : return false ;
rank: 423
score: 98.83662553267045
patch: is CaMeL Simple CaMeL Operator ? ? return true ;
rank: 423
score: 98.57769775390625
patch: return true ; return true / ;
rank: 423
score: 98.51029459635417
patch: return ; default : ;
rank: 423
score: 98.36342366536458
patch: return true . true ;
rank: 424
score: 98.97920735677083
patch: return value . get CaMeL Parent ( ) == 1 ;
rank: 424
score: 98.97576497395833
patch: return is CaMeL Simple CaMeL Operator ( value , Node . FUNCTION ) ;
rank: 424
score: 98.8352938565341
patch: is CaMeL Simple CaMeL Operator ? { return false ;
rank: 424
score: 98.71483612060547
patch: throw true ; return true ; ;
rank: 424
score: 98.57672991071429
patch: return true ; return return ;
rank: 424
score: 98.50971221923828
patch: return ; case Token . STRING :
rank: 424
score: 98.36288888113839
patch: if ; else return false ;
rank: 425
score: 98.990380859375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Next ( ) ) ;
rank: 425
score: 98.97564697265625
patch: return value . get CaMeL Node ( ) == null ;
rank: 425
score: 98.8092792217548
patch: return is CaMeL Immutable CaMeL Value ( value , false ) ;
rank: 425
score: 98.71480015345982
patch: try { return true ; ;
rank: 425
score: 98.57670762803819
patch: return true ; return * / true ;
rank: 425
score: 98.56060028076172
patch: { true * * * * /
rank: 425
score: 98.50707135881696
patch: / * ; return true ;
rank: 425
score: 98.36125837053571
patch: if ( ! true ; ;
rank: 426
score: 98.98993530273438
patch: is CaMeL Simple CaMeL Operator ? throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value ) ;
rank: 426
score: 98.97853190104166
patch: if ( call CaMeL Has CaMeL Local CaMeL Result ) { return false ;
rank: 426
score: 98.97540283203125
patch: return ( ( Node ) value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( value ) ;
rank: 426
score: 98.83402709960937
patch: is CaMeL Simple CaMeL Operator && return true ;
rank: 426
score: 98.71455383300781
patch: return true ; ; ; ; true
rank: 426
score: 98.57670084635417
patch: return return true ; if return true ;
rank: 426
score: 98.50475202287946
patch: return true ; default true ;
rank: 426
score: 98.36067708333333
patch: ? if ( true )
rank: 427
score: 98.98977661132812
patch: return value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) & true ;
rank: 427
score: 98.97665201822916
patch: return locals . is CaMeL Assignment CaMeL Op ( value ) : true ;
rank: 427
score: 98.97517533735795
patch: result . throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Name ( ) ) ;
rank: 427
score: 98.83218383789062
patch: else return true ; case Token . FUNCTION :
rank: 427
score: 98.80801156850961
patch: return call CaMeL Has CaMeL Local CaMeL Result ) ? true ;
rank: 427
score: 98.71453857421875
patch: return false ; ; true ; true
rank: 427
score: 98.55956268310547
patch: return true ; } * * :
rank: 427
score: 98.35900006975446
patch: do { return false ; }
rank: 428
score: 98.98974609375
patch: return evaluates CaMeL To CaMeL Local CaMeL Value ( ( Node ) value ) ;
rank: 428
score: 98.97565307617188
patch: return return true ; case Token . FUNCTION :
rank: 428
score: 98.828662109375
patch: case Token . OBJECTLIT : return true ;
rank: 428
score: 98.80714111328125
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$
rank: 428
score: 98.714404296875
patch: return true ; true ; return true ; ;
rank: 428
score: 98.57506646050348
patch: return ; return true ; return 1 ;
rank: 428
score: 98.55728912353516
patch: { if true ; break ; }
rank: 428
score: 98.5030746459961
patch: return true ; case true : ;
rank: 428
score: 98.35675048828125
patch: fail ( true ) ;
rank: 429
score: 98.97446695963542
patch: return value . get CaMeL Parent ( ) != 0 ;
rank: 429
score: 98.82844848632813
patch: return case Token . FUNCTION : return false ;
rank: 429
score: 98.8070068359375
patch: return ( value . get CaMeL Type ( ) == Token . FUNCTION :
rank: 429
score: 98.713818359375
patch: return true ; true return true ; true ;
rank: 429
score: 98.57375081380208
patch: return true ; return ; return ; {
rank: 429
score: 98.55723063151042
patch: break ; return false ;
rank: 429
score: 98.35366385323661
patch: * * / return false ;
rank: 430
score: 98.98830694901316
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Name ( ) ;
rank: 430
score: 98.97430013020833
patch: return false ; call CaMeL Has CaMeL Local CaMeL Result ? return false ;
rank: 430
score: 98.973974609375
patch: return is CaMeL Simple CaMeL Operator ( value , < locals . ) ;
rank: 430
score: 98.8282803622159
patch: return case Token . ARRAYLIT : return false ;
rank: 430
score: 98.80687537560097
patch: if ( ! call CaMeL Has CaMeL Local CaMeL Result ) {
rank: 430
score: 98.71354166666667
patch: return true ; true true
rank: 430
score: 98.57367553710938
patch: return true ; if true ; return $STRING$ ;
rank: 430
score: 98.55610656738281
patch: { return false ; break ; }
rank: 430
score: 98.49726104736328
patch: return false ; default : break ;
rank: 430
score: 98.35011800130208
patch: * * return true ;
rank: 431
score: 98.97279575892857
patch: if ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ) return true ;
rank: 431
score: 98.9727783203125
patch: return $STRING$ + value . get CaMeL Type ( ) + $STRING$ ;
rank: 431
score: 98.8266934481534
patch: return Boolean . true ; case Token . FUNCTION :
rank: 431
score: 98.80660574776786
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + this ) ;
rank: 431
score: 98.5736328125
patch: return ; return true ; while return true ;
rank: 431
score: 98.55604553222656
patch: return false ; return false ; else
rank: 431
score: 98.4925537109375
patch: return ; case Token . EMPTY :
rank: 432
score: 98.98726806640624
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Token ( ) ) ;
rank: 432
score: 98.97273763020833
patch: return $STRING$ + value . get CaMeL Value ( ) ;
rank: 432
score: 98.97271173650569
patch: if ( value . get CaMeL Type ( ) . equals ( Token . REGEXP ) ) { return true ;
rank: 432
score: 98.71329074435764
patch: return true ; return true ; true true
rank: 432
score: 98.57267252604167
patch: return true ; return / + true ;
rank: 432
score: 98.5560073852539
patch: { return false ; } finally {
rank: 432
score: 98.48846435546875
patch: synchronized ( this ; return true ;
rank: 432
score: 98.34899030412946
patch: try { return true ; }
rank: 433
score: 98.82224731445312
patch: return value . size ( ) > 0 ;
rank: 433
score: 98.80615234375
patch: if ( is CaMeL Simple CaMeL Operator ( ) ) {
rank: 433
score: 98.71327209472656
patch: return true ; return - ; ;
rank: 433
score: 98.572509765625
patch: return true ; return - 1 = true ;
rank: 433
score: 98.55586242675781
patch: return false ; break ; break ;
rank: 433
score: 98.48548126220703
patch: synchronized ( this ) { return ;
rank: 433
score: 98.34486607142857
patch: finally { if ( true )
rank: 434
score: 98.98671177455357
patch: case Token . FUNCTION : case Token . IN : return true ;
rank: 434
score: 98.97183082217262
patch: return is CaMeL Simple CaMeL Operator ( value . get CaMeL Parent CaMeL Node ( ) , value ) ;
rank: 434
score: 98.971728515625
patch: return value . get CaMeL Type ( ) != Token . FUNCTION ) ;
rank: 434
score: 98.81916947798295
patch: switch ( value ) { case Token . REGEXP :
rank: 434
score: 98.7131576538086
patch: return false ; true true / ;
rank: 434
score: 98.57234700520833
patch: return true ; ; else if true ;
rank: 434
score: 98.55501556396484
patch: . * * * * * /
rank: 434
score: 98.48381805419922
patch: if ; true : return false ;
rank: 434
score: 98.34073311941964
patch: final Node node = true ;
rank: 435
score: 98.9863037109375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Function CaMeL Name ( ) ) ;
rank: 435
score: 98.97156778971355
patch: return this . is CaMeL Simple CaMeL Operator ( ) ;
rank: 435
score: 98.97078450520833
patch: return value . get CaMeL Length ( ) != 0 ;
rank: 435
score: 98.8184814453125
patch: case Token . ASSIGN : case Token . FUNCTION :
rank: 435
score: 98.80457356770833
patch: return value . is CaMeL Simple CaMeL Operator ( ) : return true ;
rank: 435
score: 98.71295844184027
patch: return true ; true true return false ;
rank: 435
score: 98.5722885131836
patch: return true ; if true ; else
rank: 435
score: 98.48284040178571
patch: this . return true ; ;
rank: 436
score: 98.98588344029018
patch: case Token . IN : case Token . IN : return true ;
rank: 436
score: 98.96786063058036
patch: return true ; case Token . ASSIGN : case Token . FUNCTION :
rank: 436
score: 98.81826782226562
patch: is CaMeL Simple CaMeL Operator || return true ;
rank: 436
score: 98.80441284179688
patch: return $STRING$ + value . to CaMeL String ( ) ;
rank: 436
score: 98.71268717447917
patch: return false ; return false ; ; *
rank: 436
score: 98.55491638183594
patch: { return true ; true ; }
rank: 436
score: 98.33849487304687
patch: * return true ;
rank: 437
score: 98.71255493164062
patch: return false ; ; true * /
rank: 437
score: 98.57188415527344
patch: return ; * / if true ;
rank: 437
score: 98.55484771728516
patch: * * * true * * /
rank: 437
score: 98.48026275634766
patch: synchronized ( ; ) return true ;
rank: 438
score: 98.98384399414063
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + get CaMeL Qualified CaMeL Name ( ) ) ;
rank: 438
score: 98.9707919034091
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) , value ) ;
rank: 438
score: 98.712158203125
patch: return false ; return super . true ;
rank: 438
score: 98.57119750976562
patch: return true ; ; return true ; break ;
rank: 438
score: 98.5545425415039
patch: return true ; else = true ;
rank: 438
score: 98.47875213623047
patch: ? if ( true ) return ;
rank: 438
score: 98.33665248325893
patch: if ( true ; break ;
rank: 439
score: 98.9838134765625
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) & true ;
rank: 439
score: 98.81205240885417
patch: case Token . FUNCTION :
rank: 439
score: 98.71095581054688
patch: return false ; try { return return true ;
rank: 439
score: 98.57090759277344
patch: return true ; ; if true ?
rank: 439
score: 98.55328369140625
patch: if ; * * * /
rank: 439
score: 98.4773178100586
patch: return ; default : throw null ;
rank: 440
score: 98.96497691761364
patch: call CaMeL Has CaMeL Local CaMeL Result return true ;
rank: 440
score: 98.81104625355114
patch: is CaMeL Simple CaMeL Operator = true ; break ;
rank: 440
score: 98.79955182756696
patch: if ( value . is CaMeL Simple CaMeL Operator ( ) ) {
rank: 440
score: 98.71072387695312
patch: return false ; true ; true return false ;
rank: 440
score: 98.57087925502232
patch: return start ; return true ;
rank: 440
score: 98.55296325683594
patch: return true ; } catch return ;
rank: 440
score: 98.47616577148438
patch: throw ; default : return false ;
rank: 440
score: 98.3290303548177
patch: finally { return true ;
rank: 441
score: 98.96793619791667
patch: return ( is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Parent ( ) ) ) ;
rank: 441
score: 98.80998091264205
patch: break ; case Token . FUNCTION : return true ;
rank: 441
score: 98.799267578125
patch: return ( value . get CaMeL Type ( ) == Token . FUNCTION ;
rank: 441
score: 98.71067301432292
patch: return true ; return || return true ;
rank: 441
score: 98.57064819335938
patch: return true ; return ? true ;
rank: 441
score: 98.55206298828125
patch: break true ; else return true ;
rank: 441
score: 98.47457122802734
patch: this ; default : return true ;
rank: 441
score: 98.32832845052083
patch: boolean true = false ;
rank: 442
score: 98.98261369977679
patch: return true ? is CaMeL Simple CaMeL Operator ? true : true ;
rank: 442
score: 98.96782977764423
patch: return is CaMeL Simple CaMeL Operator ( value , 1 ) ;
rank: 442
score: 98.9603740985577
patch: return ( is CaMeL Assignment CaMeL Op ( value , locals )
rank: 442
score: 98.71039428710938
patch: return false ; true / * return true ;
rank: 442
score: 98.57040066189236
patch: return true ; return ; return $STRING$ ;
rank: 442
score: 98.5516128540039
patch: { if return return true ; }
rank: 442
score: 98.4733657836914
patch: synchronized ( true ) return true ;
rank: 442
score: 98.32007707868304
patch: ? if ( true ) {
rank: 443
score: 98.98208778782895
patch: return is CaMeL Simple CaMeL Operator ? is CaMeL Assignment CaMeL Op ( value ) : false ;
rank: 443
score: 98.96729387555804
patch: case Token . FUNCTION : case Token . FUNCTION : return true ;
rank: 443
score: 98.95772705078124
patch: { return true ; case Token . FUNCTION :
rank: 443
score: 98.8072509765625
patch: else case Token . FUNCTION : return true ;
rank: 443
score: 98.570166015625
patch: return true ; return ; = return true ;
rank: 443
score: 98.54830932617188
patch: { else if ; * * /
rank: 443
score: 98.47319030761719
patch: / * return true * / ;
rank: 443
score: 98.31639099121094
patch: return TRUE ;
rank: 444
score: 98.98187662760417
patch: case Token . ARRAYLIT : case Token . REGEXP : return true ;
rank: 444
score: 98.9669189453125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Name ( ) + $STRING$ ) ;
rank: 444
score: 98.79731096540179
patch: finally { switch ( value . get CaMeL Type ( ) ) {
rank: 444
score: 98.70968627929688
patch: return super . true ; true ;
rank: 444
score: 98.56990814208984
patch: return true ; ; return value ;
rank: 444
score: 98.5482177734375
patch: return false ; true * * ?
rank: 444
score: 98.47257232666016
patch: if ( true ; true ) {
rank: 444
score: 98.31550816127232
patch: return true ( false ) ;
rank: 445
score: 98.98166375411184
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ; ;
rank: 445
score: 98.96647505326705
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parameter CaMeL Type ( ) ) ;
rank: 445
score: 98.95362345377605
patch: return value . get CaMeL Value ( ) == true ;
rank: 445
score: 98.79661342075893
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + 0 ) ;
rank: 445
score: 98.70913260323661
patch: return true ; true * *
rank: 445
score: 98.56942138671874
patch: return ; return ; * / return true ;
rank: 445
score: 98.54805501302083
patch: { return true ; ;
rank: 445
score: 98.47103881835938
patch: return ; case Token . READ :
rank: 445
score: 98.31522042410714
patch: if ( code != null )
rank: 446
score: 98.96609262319711
patch: return is CaMeL Assignment CaMeL Op ( value , 1 ) ;
rank: 446
score: 98.80433238636364
patch: return true ; case Token . IN : break ;
rank: 446
score: 98.79613444010417
patch: return ( value . to CaMeL String ( ) . is CaMeL Simple CaMeL
rank: 446
score: 98.70834689670139
patch: return true ; ; catch return true ;
rank: 446
score: 98.56882149832589
patch: return false ; ; true ;
rank: 446
score: 98.54778180803571
patch: return ; * return true ;
rank: 446
score: 98.46841430664062
patch: ? else { return false ; }
rank: 446
score: 98.31453159877232
patch: ? return true ; case ;
rank: 447
score: 98.96553178267045
patch: if ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ) { return false ;
rank: 447
score: 98.80103759765625
patch: return false ; case Token . REGEXP : }
rank: 447
score: 98.7950439453125
patch: if ( value . get CaMeL Type ( ) ) {
rank: 447
score: 98.70823974609375
patch: return return true ; true ; return true ;
rank: 447
score: 98.56791687011719
patch: return true ; return / / ;
rank: 447
score: 98.54744466145833
patch: . { return true ;
rank: 447
score: 98.46800231933594
patch: break ; default : return true ;
rank: 447
score: 98.31387329101562
patch: return false ; * /
rank: 448
score: 98.96512276785714
patch: return ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent CaMeL Node ( ) ) ) ;
rank: 448
score: 98.80071343315973
patch: return locals . equals ( value ) ;
rank: 448
score: 98.70814514160156
patch: return true ; true ; true true
rank: 448
score: 98.56700134277344
patch: return 1 ; ; return true ;
rank: 448
score: 98.54623413085938
patch: return true ; else { if ;
rank: 448
score: 98.46685791015625
patch: return ; case Token . REGEXP :
rank: 449
score: 98.97834858141448
patch: throw Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type ( ) ) ;
rank: 449
score: 98.96501813616071
patch: return ( value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 449
score: 98.95222778320313
patch: return value . get CaMeL Value ( ) ;
rank: 449
score: 98.7968017578125
patch: return false ; case Token . IN : }
rank: 449
score: 98.79457310267857
patch: return locals . is CaMeL Simple CaMeL Operator ? true ? true ;
rank: 449
score: 98.70752631293402
patch: return true ; true ; ; true *
rank: 449
score: 98.56678118024554
patch: return type ; return true ;
rank: 449
score: 98.54493204752605
patch: { else return false ;
rank: 449
score: 98.309814453125
patch: return default : return true ;
rank: 450
score: 98.96470424107143
patch: if ( is CaMeL Simple CaMeL Operator ( value . get CaMeL Type ( ) ) ) return false ;
rank: 450
score: 98.9520751953125
patch: return locals . size ( ) > 0 ;
rank: 450
score: 98.79642486572266
patch: x = true ; return false ;
rank: 450
score: 98.70748901367188
patch: return return true ; ; ; return true ;
rank: 450
score: 98.54440307617188
patch: . return true ; true * /
rank: 450
score: 98.4654541015625
patch: / * return true ; ;
rank: 450
score: 98.30909075055804
patch: if ( count == 0 )
rank: 451
score: 98.97659912109376
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Properties ( ) ) ;
rank: 451
score: 98.96460899939903
patch: return ! is CaMeL Assignment CaMeL Op ? true : true ;
rank: 451
score: 98.79401245117188
patch: return true ; case Token . FUNCTION : {
rank: 451
score: 98.70745849609375
patch: return true ; true * ; return true ;
rank: 451
score: 98.5661865234375
patch: return true ; return start ; return true ;
rank: 451
score: 98.54232788085938
patch: return true ; } catch true ;
rank: 451
score: 98.46372985839844
patch: ? if ( true ) true ;
rank: 451
score: 98.30462646484375
patch: if ( ; return false )
rank: 452
score: 98.97583879743304
patch: return is CaMeL Assignment CaMeL Op ( value , < 0 ) ;
rank: 452
score: 98.79296875
patch: return ( value . get CaMeL Parent CaMeL Node ( ) . get CaMeL
rank: 452
score: 98.56614685058594
patch: true ; if ; = 0 ;
rank: 452
score: 98.54231480189732
patch: return ; ? return true ;
rank: 452
score: 98.4625244140625
patch: return true ; case ; default ;
rank: 452
score: 98.30457414899554
patch: if ( values == null )
rank: 453
score: 98.97494988692434
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) ; ;
rank: 453
score: 98.96415201822917
patch: return locals . get CaMeL Value ( ) != null ;
rank: 453
score: 98.78833770751953
patch: x = false ; return true ;
rank: 453
score: 98.70669555664062
patch: return super . true ; ; ;
rank: 453
score: 98.565185546875
patch: return value ; ; return true ;
rank: 453
score: 98.541748046875
patch: if ( false ; return true ;
rank: 453
score: 98.30392456054688
patch: boolean true = true ;
rank: 454
score: 98.9749267578125
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( 0 ) ;
rank: 454
score: 98.94769287109375
patch: return value . get CaMeL Type ( ) instanceof Node ;
rank: 454
score: 98.78616333007812
patch: return false ; ; case Token . FUNCTION :
rank: 454
score: 98.70643920898438
patch: return return true ; return true ; true ;
rank: 454
score: 98.56480102539062
patch: return - 1 ;
rank: 454
score: 98.54078020368304
patch: . { return true ; }
rank: 454
score: 98.45921325683594
patch: this ; default : return false ;
rank: 454
score: 98.30385335286458
patch: if ( false ) {
rank: 455
score: 98.97487182617188
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Exception ( ) ) ;
rank: 455
score: 98.96337890625
patch: return ( is CaMeL Simple CaMeL Operator ( value , value . get CaMeL Type ( ) ) ) ;
rank: 455
score: 98.94716389973958
patch: return value . get CaMeL Value ( ) == $STRING$ ;
rank: 455
score: 98.79169573102679
patch: return $STRING$ + value . get CaMeL Parent ( ) + $STRING$ ;
rank: 455
score: 98.78527221679687
patch: return case Token . IN : return true ;
rank: 455
score: 98.70551300048828
patch: return return true ; true * ;
rank: 455
score: 98.56436157226562
patch: true ; true ; return true ;
rank: 455
score: 98.54058837890625
patch: break ; * * * * /
rank: 455
score: 98.4592056274414
patch: return true ; default : continue ;
rank: 456
score: 98.96306501116071
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) + ) ;
rank: 456
score: 98.9464111328125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + to CaMeL
rank: 456
score: 98.78476291232639
patch: case Token . REGEXP : return false ;
rank: 456
score: 98.7054443359375
patch: return false ; true * / {
rank: 456
score: 98.56397705078125
patch: return false ; return true ; return $STRING$ ;
rank: 456
score: 98.53965759277344
patch: throw new Runtime CaMeL Exception ; ;
rank: 456
score: 98.45791625976562
patch: return ( true ) return true ;
rank: 456
score: 98.303466796875
patch: initial CaMeL Value = true ;
rank: 457
score: 98.9748046875
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + key . get CaMeL Parent ( ) ) ;
rank: 457
score: 98.962646484375
patch: return is CaMeL Assignment CaMeL Op ( value , call CaMeL Has CaMeL Local CaMeL Result , locals ) ;
rank: 457
score: 98.7886474609375
patch: return is CaMeL Assignment CaMeL Op ( value ) ? true : true ;
rank: 457
score: 98.70526123046875
patch: } return false ; return true ;
rank: 457
score: 98.56390380859375
patch: return true ; return * return ;
rank: 457
score: 98.53915405273438
patch: return true ; break ; * /
rank: 457
score: 98.4573974609375
patch: return ; default ;
rank: 457
score: 98.30016217912946
patch: parameters * / return true ;
rank: 458
score: 98.9747314453125
patch: return value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) || true ;
rank: 458
score: 98.96210588727679
patch: if ( value . get CaMeL Type ( ) != Token . IN
rank: 458
score: 98.78836495535714
patch: return value . is CaMeL Assignment CaMeL Op ( ) ? true ;
rank: 458
score: 98.705078125
patch: return true ; ; return true ; true ;
rank: 458
score: 98.56377495659723
patch: return true ; true ; if ; {
rank: 458
score: 98.53834751674107
patch: return ; ; return false ;
rank: 458
score: 98.45704650878906
patch: return false ; case ; default :
rank: 458
score: 98.29799107142857
patch: Collection < Node > true ;
rank: 459
score: 98.97471313476562
patch: return locals . get ( value ) . evaluates CaMeL To CaMeL Local CaMeL Value ( 1 ) ;
rank: 459
score: 98.78819783528645
patch: switch ( node . get CaMeL Type ( ) ) {
rank: 459
score: 98.78026665581598
patch: return true ; case Node . IN :
rank: 459
score: 98.70408799913194
patch: return true ; true return - true ;
rank: 459
score: 98.56287231445313
patch: return false ; return * / return true ;
rank: 459
score: 98.53718566894531
patch: return return true ; } else {
rank: 459
score: 98.45675048828124
patch: : return true ;
rank: 459
score: 98.29754638671875
patch: return false ; case ; ;
rank: 460
score: 98.9617411295573
patch: return ( is CaMeL Simple CaMeL Operator ( value ) ;
rank: 460
score: 98.94382731119792
patch: return value . get CaMeL Number ( ) > 0 ;
rank: 460
score: 98.78810471754808
patch: switch ( value . get CaMeL Parent CaMeL Node ( ) )
rank: 460
score: 98.77765570746527
patch: return true ; case Type . FUNCTION :
rank: 460
score: 98.70381164550781
patch: return false ; value return true ;
rank: 460
score: 98.5628662109375
patch: return ; = 0 ;
rank: 460
score: 98.534912109375
patch: return ; return true ; }
rank: 460
score: 98.29541015625
patch: Collection < ; return true ;
rank: 461
score: 98.97322998046874
patch: return value . get CaMeL Value ( ) . is CaMeL Simple CaMeL Operator ( ) == true ;
rank: 461
score: 98.961669921875
patch: return is CaMeL Assignment CaMeL Op ( value . get CaMeL Parent CaMeL Node ( ) , value ) ;
rank: 461
score: 98.77346801757812
patch: else case Token . FUNCTION : return false ;
rank: 461
score: 98.70338439941406
patch: return false ; true = true ;
rank: 461
score: 98.56275634765625
patch: return true ; return ; ; return true ;
rank: 461
score: 98.5343246459961
patch: return true ; type = true ;
rank: 461
score: 98.29508754185268
patch: parameters . add ( value ;
rank: 462
score: 98.96119035993304
patch: return is CaMeL Assignment CaMeL Op ( value , < locals ) ;
rank: 462
score: 98.94232177734375
patch: return value . get CaMeL Name ( ) != null ;
rank: 462
score: 98.76905653211806
patch: return true ; case Node . REGEXP :
rank: 462
score: 98.70278930664062
patch: return true ; true {
rank: 462
score: 98.56253814697266
patch: return ; return - - 1 ;
rank: 462
score: 98.53369140625
patch: return true ; else * /
rank: 462
score: 98.29426792689732
patch: return true ; == true ?
rank: 463
score: 98.9610595703125
patch: return is CaMeL Assignment CaMeL Op ? return false : true ;
rank: 463
score: 98.78661092122395
patch: return return is CaMeL Assignment CaMeL Op ( value ) ;
rank: 463
score: 98.76685248480902
patch: return value . equals ( value ) ;
rank: 463
score: 98.70272827148438
patch: return false ; value = true ;
rank: 463
score: 98.53364562988281
patch: } else * * * * /
rank: 463
score: 98.45331573486328
patch: int type = ; return true ;
rank: 463
score: 98.29335239955357
patch: return Boolean . TRUE ; ;
rank: 464
score: 98.97261352539063
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + type . get CaMeL Parent ( ) ) ;
rank: 464
score: 98.96055385044643
patch: return ( ! is CaMeL Assignment CaMeL Op ( value ) ) ;
rank: 464
score: 98.94178185096153
patch: return ; case Token . FUNCTION : case Token . FUNCTION :
rank: 464
score: 98.78459028764205
patch: return ! is CaMeL Simple CaMeL Operator ? true ;
rank: 464
score: 98.7025146484375
patch: return true ; true true ; true
rank: 464
score: 98.53356061662946
patch: return ; return return false ;
rank: 464
score: 98.45198822021484
patch: return ; case Token . NEW :
rank: 464
score: 98.29227120535714
patch: for ( ; ; ; )
rank: 465
score: 98.97257080078126
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) {
rank: 465
score: 98.96031605113636
patch: if ( value . get CaMeL Type ( ) . is CaMeL Assignment CaMeL Op ( ) ) return true ;
rank: 465
score: 98.784326171875
patch: return ( locals . to CaMeL String ( ) . is CaMeL Simple CaMeL
rank: 465
score: 98.76431274414062
patch: x = true ;
rank: 465
score: 98.70246039496527
patch: return true ; true } return true ;
rank: 465
score: 98.56111653645833
patch: return true ; if return true ; ;
rank: 465
score: 98.53218841552734
patch: return false ; * * * /
rank: 465
score: 98.45134735107422
patch: return true ; default return true ;
rank: 465
score: 98.28400530133929
patch: return Boolean . FALSE . ;
rank: 466
score: 98.972412109375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Version ( ) ) ;
rank: 466
score: 98.9599942294034
patch: if ( value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ) return true ;
rank: 466
score: 98.78260216346153
patch: return ( value . is CaMeL Simple CaMeL Operator ? true ;
rank: 466
score: 98.76281127929687
patch: return $STRING$ . length ( ) > 0 ;
rank: 466
score: 98.70218505859376
patch: return false ; return null ; return true ;
rank: 466
score: 98.56110975477431
patch: return true ; return - - $NUMBER$ ;
rank: 466
score: 98.53178405761719
patch: { if return true ; return ;
rank: 466
score: 98.45041910807292
patch: default : return true ;
rank: 466
score: 98.2838134765625
patch: if ( props == null )
rank: 467
score: 98.95909534801136
patch: return is CaMeL Simple CaMeL Operator ? return false ;
rank: 467
score: 98.78128756009616
patch: return ( value . get CaMeL Token ( ) . get CaMeL
rank: 467
score: 98.7021484375
patch: return false ; finally { return true ;
rank: 467
score: 98.560986328125
patch: true return true ;
rank: 467
score: 98.53169468470982
patch: return true ; } finally {
rank: 467
score: 98.45013427734375
patch: throw ; default : return true ;
rank: 467
score: 98.28317260742188
patch: return false . true ;
rank: 468
score: 98.97127075195313
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ . to CaMeL String ( ) + $STRING$ ) ;
rank: 468
score: 98.95847389914773
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Type CaMeL Name ( ) ) ;
rank: 468
score: 98.77814190204327
patch: return ( is CaMeL Immutable CaMeL Value ( value ) ) ;
rank: 468
score: 98.76200561523437
patch: / case Token . FUNCTION : return true ;
rank: 468
score: 98.70177459716797
patch: return false ; true ; false {
rank: 468
score: 98.56088595920139
patch: return false ; return * return true ;
rank: 468
score: 98.44957624162946
patch: return true ; default : {
rank: 468
score: 98.28300258091518
patch: if ( out == null )
rank: 469
score: 98.97119140625
patch: return $STRING$ . is CaMeL Assignment CaMeL Op ( ) ;
rank: 469
score: 98.9581631747159
patch: return is CaMeL Simple CaMeL Operator ( name ) ;
rank: 469
score: 98.7580322265625
patch: return case Token . IN : return false ;
rank: 469
score: 98.70172119140625
patch: return false ; return true ; try {
rank: 469
score: 98.56088595920139
patch: return true ; return ; / * /
rank: 469
score: 98.53133719308036
patch: return ; * return false ;
rank: 469
score: 98.44918387276786
patch: return ; case true : ;
rank: 470
score: 98.97117309570312
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Message ( ) ) ;
rank: 470
score: 98.77622633713942
patch: return return locals . is CaMeL Simple CaMeL Operator ? true ;
rank: 470
score: 98.75719604492187
patch: is CaMeL Simple CaMeL Operator || return false ;
rank: 470
score: 98.70150146484374
patch: return false ; ; true ; return false ;
rank: 470
score: 98.5608642578125
patch: if true ; if true ; return true ;
rank: 470
score: 98.44908142089844
patch: ? * return true : true ;
rank: 470
score: 98.28106689453125
patch: initialize ( true ) ;
rank: 471
score: 98.97032470703125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Number ( ) ) ;
rank: 471
score: 98.77617938701923
patch: throw new Runtime CaMeL Exception ( $STRING$ + value + $STRING$ +
rank: 471
score: 98.7571533203125
patch: else return false ; case Token . FUNCTION :
rank: 471
score: 98.70136260986328
patch: return true ; true * * *
rank: 471
score: 98.5296859741211
patch: { * * * return true ;
rank: 471
score: 98.4487533569336
patch: return ; case ; default : ;
rank: 471
score: 98.27972412109375
patch: return value . true ;
rank: 472
score: 98.96972045898437
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + locals . get CaMeL Type ( ) ) ;
rank: 472
score: 98.95673479352679
patch: return is CaMeL Simple CaMeL Operator ( value , < locals ) ;
rank: 472
score: 98.77515587439903
patch: return ( locals . get CaMeL Token ( ) . get CaMeL
rank: 472
score: 98.7565185546875
patch: return true ; ; case Token . IN :
rank: 472
score: 98.70115443638393
patch: return false ; ; true {
rank: 472
score: 98.56038665771484
patch: return true ; return / true ;
rank: 472
score: 98.52894592285156
patch: return true ; true } return ;
rank: 472
score: 98.44834899902344
patch: if ; true ; return true ;
rank: 472
score: 98.27958984375
patch: return false true ;
rank: 473
score: 98.95670572916667
patch: return is CaMeL Assignment CaMeL Op ( value , call CaMeL Has CaMeL Local CaMeL Result , value ) ;
rank: 473
score: 98.93918863932292
patch: return true ; call CaMeL Has CaMeL Local CaMeL Result ?
rank: 473
score: 98.77515258789063
patch: return value . get CaMeL Next ( ) ;
rank: 473
score: 98.7553955078125
patch: return return false ; case Token . FUNCTION :
rank: 473
score: 98.70072937011719
patch: return true ; return true ; while
rank: 473
score: 98.55856323242188
patch: return - 1 ; return 1 ;
rank: 473
score: 98.52677154541016
patch: { return true ; } return ;
rank: 473
score: 98.27688598632812
patch: init ( true ) ;
rank: 474
score: 98.968994140625
patch: is CaMeL Simple CaMeL Operator ( value ) ; return true ;
rank: 474
score: 98.95624334161931
patch: return ! is CaMeL Simple CaMeL Operator ( ) ;
rank: 474
score: 98.77475210336539
patch: if ( is CaMeL Immutable CaMeL Value ( value ) ) {
rank: 474
score: 98.75455147879464
patch: case Token . ARRAYLIT :
rank: 474
score: 98.5582046508789
patch: return false ; ; return 0 ;
rank: 474
score: 98.52677154541016
patch: { if ; * return true ;
rank: 474
score: 98.44556427001953
patch: ? * return false : true ;
rank: 474
score: 98.27627127511161
patch: else { return true ; }
rank: 475
score: 98.9554443359375
patch: return is CaMeL Simple CaMeL Operator ( value , type ) ;
rank: 475
score: 98.70053100585938
patch: return true ; true / out {
rank: 475
score: 98.52434430803571
patch: return return && return true ;
rank: 475
score: 98.44520568847656
patch: return ; case ; case ; :
rank: 475
score: 98.27570452008929
patch: if ( options == true )
rank: 476
score: 98.96728515625
patch: return is CaMeL Simple CaMeL Operator ? $STRING$ : $STRING$ ;
rank: 476
score: 98.95539994673295
patch: if ( is CaMeL Assignment CaMeL Op ( value . get CaMeL Type ( ) ) ) { return true ;
rank: 476
score: 98.77122497558594
patch: return ( value != null ) ;
rank: 476
score: 98.74754638671875
patch: return locals . is CaMeL Local ( ) ;
rank: 476
score: 98.7004623413086
patch: return false ; true ; * *
rank: 476
score: 98.55740966796876
patch: return ; { if true ; return true ;
rank: 476
score: 98.52424621582031
patch: { return true ; } true ;
rank: 476
score: 98.2738037109375
patch: if ( this . true )
rank: 477
score: 98.96568298339844
patch: result = true ; return true ;
rank: 477
score: 98.74561157226563
patch: return case Token . REGEXP : return true ;
rank: 477
score: 98.70001220703125
patch: return true ; ; return ! true ;
rank: 477
score: 98.55698852539062
patch: return false ; ; if true + true ;
rank: 477
score: 98.52423095703125
patch: return true ; true } if ;
rank: 478
score: 98.96555873325893
patch: return new ? is CaMeL Simple CaMeL Operator ? true : true ;
rank: 478
score: 98.95355779474431
patch: return is CaMeL Assignment CaMeL Op ( $STRING$ ) ;
rank: 478
score: 98.76930930397727
patch: if ( is CaMeL Simple CaMeL Operator ( ) )
rank: 478
score: 98.74501342773438
patch: is CaMeL Simple CaMeL Operator ? return null ;
rank: 478
score: 98.55641682942708
patch: return ; return ; = true ; ;
rank: 478
score: 98.52392578125
patch: { return return true ; }
rank: 478
score: 98.44392395019531
patch: return ; case Token . CONTINUE :
rank: 478
score: 98.27196248372395
patch: return true = true ;
rank: 479
score: 98.96507917131696
patch: case Token . REGEXP : case Token . IN : return true ;
rank: 479
score: 98.95301164899554
patch: return is CaMeL Simple CaMeL Operator ( value , < 1 ) ;
rank: 479
score: 98.92967810997597
patch: return is CaMeL Assignment CaMeL Op ( value , type ) ;
rank: 479
score: 98.76576741536458
patch: return value . get CaMeL Parent ( ) == value ;
rank: 479
score: 98.7437744140625
patch: case Token . OBJECTLIT : return false ;
rank: 479
score: 98.55582275390626
patch: return true ; ; if return + true ;
rank: 479
score: 98.52316284179688
patch: = true ; return false ; }
rank: 479
score: 98.27174886067708
patch: finally { return false ;
rank: 480
score: 98.95284598214286
patch: return ! ( value . get CaMeL Type ( ) . is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 480
score: 98.92914496527777
patch: return value ; case Token . FUNCTION :
rank: 480
score: 98.74369506835937
patch: return false ; case Token . FUNCTION : {
rank: 480
score: 98.69947645399306
patch: if return true ; ; return true ;
rank: 480
score: 98.55548967633929
patch: true ; return true ; ;
rank: 480
score: 98.52311706542969
patch: . if ; return true ; }
rank: 480
score: 98.43528238932292
patch: return true return true ;
rank: 480
score: 98.27132742745536
patch: return true ; == false ?
rank: 481
score: 98.96184430803571
patch: return is CaMeL Simple CaMeL Operator ( value , < 0 ) ;
rank: 481
score: 98.95203575721153
patch: return true || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 481
score: 98.92913818359375
patch: return ( is CaMeL Assignment CaMeL Op ( ) ) ;
rank: 481
score: 98.76483154296875
patch: return is CaMeL Simple CaMeL Operator ? true || true ;
rank: 481
score: 98.69944932725694
patch: return true ; return false ; ; true
rank: 481
score: 98.5553955078125
patch: return true ; return name ; return true ;
rank: 481
score: 98.520751953125
patch: * * * * /
rank: 481
score: 98.43446858723958
patch: this ; return true ;
rank: 481
score: 98.26886858258929
patch: if ( vars == null )
rank: 482
score: 98.95148259943181
patch: if ( value . get CaMeL Type ( ) . equals ( Token . FUNCTION ) ) { return false ;
rank: 482
score: 98.92859996448864
patch: return true ; default : case Token . FUNCTION :
rank: 482
score: 98.74199829101562
patch: return return true ; case Token . IN :
rank: 482
score: 98.69921264648437
patch: return false ; true * * return false ;
rank: 482
score: 98.55506591796875
patch: return true ; ; return $STRING$ + true ;
rank: 482
score: 98.52022094726563
patch: return false ; else
rank: 482
score: 98.42949567522321
patch: ? if ; return false ;
rank: 482
score: 98.26764678955078
patch: if true ;
rank: 483
score: 98.95094992897727
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Last CaMeL Value ( ) ) ;
rank: 483
score: 98.92750901442308
patch: { switch ( value . get CaMeL Parent ( ) ) {
rank: 483
score: 98.74095458984375
patch: is CaMeL Simple CaMeL Operator && return false ;
rank: 483
score: 98.69909057617187
patch: return true ; try { return true ; }
rank: 483
score: 98.55457899305556
patch: return * return true ; return true ;
rank: 483
score: 98.26705496651786
patch: if ( return true ) {
rank: 484
score: 98.95972618689903
patch: return false ; is CaMeL Assignment CaMeL Op ? return true ;
rank: 484
score: 98.92713341346153
patch: case Token . OBJECTLIT : case Token . OBJECTLIT :
rank: 484
score: 98.73993530273438
patch: is CaMeL Simple CaMeL Operator { return true ;
rank: 484
score: 98.6988525390625
patch: return true ; try { if true ;
rank: 484
score: 98.55300564236111
patch: return false ; return - - 1 ;
rank: 484
score: 98.51969909667969
patch: return true ; } if return ;
rank: 484
score: 98.42720540364583
patch: return ; default true ;
rank: 484
score: 98.26609293619792
patch: double true = true ;
rank: 485
score: 98.94950727982955
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Parent ( ) ) ; break ;
rank: 485
score: 98.92455115685097
patch: return is CaMeL Assignment CaMeL Op ( name , locals ) ;
rank: 485
score: 98.73877970377605
patch: case Token . REGEXP :
rank: 485
score: 98.69820556640624
patch: return true ; true true { return false ;
rank: 485
score: 98.55296495225694
patch: return ; if return true ; break ;
rank: 485
score: 98.51968383789062
patch: { if return ; return true ;
rank: 485
score: 98.41887555803571
patch: return true ; / * ;
rank: 485
score: 98.26518031529018
patch: fail ( true true ) ;
rank: 486
score: 98.9493408203125
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Base CaMeL Type ( ) ) ;
rank: 486
score: 98.75801304408482
patch: return case Token . FUNCTION :
rank: 486
score: 98.73759765625
patch: else return true ; case Token . IN :
rank: 486
score: 98.6978759765625
patch: return true ; return - $STRING$ : true ;
rank: 486
score: 98.55283610026042
patch: return true ; ; return true ; else
rank: 486
score: 98.51924641927083
patch: return false ; true }
rank: 486
score: 98.41808210100446
patch: if ( true ) throw ;
rank: 486
score: 98.26471819196429
patch: finally { if ( ; }
rank: 487
score: 98.95720966045673
patch: return true && is CaMeL Assignment CaMeL Op ( value ) ;
rank: 487
score: 98.94651576450893
patch: return ( value . get CaMeL Type ( ) == Token . FUNCTION
rank: 487
score: 98.92293607271634
patch: return ; case Token . IN : case Token . FUNCTION :
rank: 487
score: 98.75726318359375
patch: return value . get CaMeL Parent CaMeL Node ( ) .
rank: 487
score: 98.73632202148437
patch: return true ; case Node . ARRAYLIT :
rank: 487
score: 98.55277506510417
patch: return true ; return 0 + true ;
rank: 487
score: 98.51832580566406
patch: { if ; if return true ;
rank: 488
score: 98.95718383789062
patch: is CaMeL Simple CaMeL Operator ( locals ) return true ;
rank: 488
score: 98.75615900213069
patch: if ( call CaMeL Has CaMeL Local CaMeL Result )
rank: 488
score: 98.73548583984375
patch: case Token . FUNCTION : { return true ;
rank: 488
score: 98.69678412543402
patch: return true ; ; return return true ;
rank: 488
score: 98.55194091796875
patch: return ; = true ; ;
rank: 488
score: 98.51810128348214
patch: * * * * * ;
rank: 488
score: 98.41277204241071
patch: ? / * return true ;
rank: 489
score: 98.95647321428571
patch: case Token . IN : case Token . FUNCTION : return true ;
rank: 489
score: 98.94562322443181
patch: this . throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL Name ( ) ) ;
rank: 489
score: 98.69673665364583
patch: return false ; return - 1 ; ;
rank: 489
score: 98.551806640625
patch: return true ; return 1 ; if true ;
rank: 489
score: 98.51805114746094
patch: return true ; else * * /
rank: 489
score: 98.26312255859375
patch: return false = true ;
rank: 490
score: 98.94549560546875
patch: return ! is CaMeL Simple CaMeL Operator ( value , locals ) ;
rank: 490
score: 98.9193359375
patch: return value . get CaMeL Parent ( ) ;
rank: 490
score: 98.75457208806819
patch: boolean is CaMeL Simple CaMeL Operator ? return true ;
rank: 490
score: 98.73462524414063
patch: is CaMeL Simple CaMeL Operator = return true ;
rank: 490
score: 98.69647216796875
patch: return false ; true ; true *
rank: 490
score: 98.55144653320312
patch: return $STRING$ ; return true ; return false ;
rank: 490
score: 98.51768493652344
patch: return true ; true } else {
rank: 490
score: 98.2606201171875
patch: . * / return true ;
rank: 491
score: 98.94545200892857
patch: return ( is CaMeL Assignment CaMeL Op ? true : true ) ;
rank: 491
score: 98.75234153053977
patch: if ( is CaMeL Simple CaMeL Operator ( value )
rank: 491
score: 98.73407592773438
patch: is CaMeL Simple CaMeL Operator = true ; }
rank: 491
score: 98.5502197265625
patch: return ; = true ; if return true ;
rank: 491
score: 98.51708984375
patch: break ;
rank: 491
score: 98.25985717773438
patch: synchronized ( this ) {
rank: 492
score: 98.95457240513393
patch: return true ; case Token . IN : case Token . REGEXP :
rank: 492
score: 98.9181377704327
patch: return is CaMeL Assignment CaMeL Op ( value ) : true ;
rank: 492
score: 98.73108673095703
patch: return value ? true : true ;
rank: 492
score: 98.69617919921875
patch: return true ; true else if return false ;
rank: 492
score: 98.54920654296875
patch: return this ; return true ; if true ;
rank: 492
score: 98.51634979248047
patch: return ; / * * * ;
rank: 492
score: 98.41135660807292
patch: ? ? return true ;
rank: 492
score: 98.2592529296875
patch: body = true ;
rank: 493
score: 98.94498116629464
patch: return ( ! is CaMeL Simple CaMeL Operator ( value ) ) ;
rank: 493
score: 98.7515536221591
patch: return ( is CaMeL Immutable CaMeL Value ( value )
rank: 493
score: 98.5479248046875
patch: return true ; return true ; return this ;
rank: 494
score: 98.94367009943181
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ , value . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 494
score: 98.91737874348958
patch: return true ; case Token . ASSIGN : return false ;
rank: 494
score: 98.69560411241319
patch: return return true ; true return true ;
rank: 494
score: 98.51436360677083
patch: } else return true ;
rank: 494
score: 98.40237862723214
patch: return ; default : throw {
rank: 494
score: 98.25874546595982
patch: if ( true true ; ;
rank: 495
score: 98.95125034877232
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + name ) ;
rank: 495
score: 98.72829182942708
patch: return false ; case Type . FUNCTION :
rank: 495
score: 98.69524383544922
patch: return true ; true / * true
rank: 495
score: 98.54764133029514
patch: return true ; true ; if return ;
rank: 495
score: 98.5142593383789
patch: { else { return ; } }
rank: 495
score: 98.40224783761161
patch: return true ; default ; ;
rank: 496
score: 98.95084054129464
patch: case Token . ASSIGN : case Token . REGEXP : return true ;
rank: 496
score: 98.74958939985795
patch: return is CaMeL Immutable CaMeL Value ( true ) ;
rank: 496
score: 98.69468994140625
patch: return false ; try { return true ; ;
rank: 496
score: 98.54756469726563
patch: return ; return return true ; return true ;
rank: 496
score: 98.51407296316964
patch: return ; * * * ;
rank: 496
score: 98.40174211774554
patch: return ; : return true ;
rank: 496
score: 98.25837053571429
patch: for ( ; ; ) {
rank: 497
score: 98.94240315755208
patch: return is CaMeL Simple CaMeL Operator ? true : $STRING$ ;
rank: 497
score: 98.72709147135417
patch: break ; case Token . ARRAYLIT :
rank: 497
score: 98.69384765625
patch: return true ; ? return true ;
rank: 497
score: 98.54754638671875
patch: return ; return ; = return true ;
rank: 497
score: 98.51318359375
patch: { else if return false ; }
rank: 497
score: 98.25746372767857
patch: Set < ; return true ;
rank: 498
score: 98.9504727450284
patch: return true ; case Token . FUNCTION : / /
rank: 498
score: 98.9421053799716
patch: if ( value . get CaMeL Type ( ) . equals ( Token . REGEXP ) ) { return false ;
rank: 498
score: 98.74778238932292
patch: call CaMeL Has CaMeL Local CaMeL Result )
rank: 498
score: 98.7235107421875
patch: return false ; case Node . IN :
rank: 498
score: 98.54700385199652
patch: return true + true ; return false ;
rank: 498
score: 98.51289367675781
patch: { else return false ; } }
rank: 498
score: 98.39839390345982
patch: ? this . return true ;
rank: 498
score: 98.25666155133929
patch: this . if ( true )
rank: 499
score: 98.94944545200893
patch: return true ; case Token . REGEXP : case Token . REGEXP :
rank: 499
score: 98.94173583984374
patch: is CaMeL Simple CaMeL Operator ( value ) ;
rank: 499
score: 98.72245279947917
patch: is CaMeL Simple CaMeL Operator || true ;
rank: 499
score: 98.69276936848958
patch: / * return true ; return false ;
rank: 499
score: 98.54695638020833
patch: return true ; ; return ; * /
rank: 499
score: 98.51255798339844
patch: { else * * * / }
rank: 500
score: 98.94877406529018
patch: return is CaMeL Simple CaMeL Operator ( ) ? true : true ;
rank: 500
score: 98.73314208984375
patch: return is CaMeL Simple CaMeL Operator ? false ;
rank: 500
score: 98.72145298549107
patch: is CaMeL Simple CaMeL Operator ?
rank: 500
score: 98.69230651855469
patch: return false ; ; / * /
rank: 500
score: 98.54619683159723
patch: return true ; ; { return true ;
rank: 500
score: 98.51238250732422
patch: return Collections . TRUE . true ;
rank: 500
score: 98.25442940848214
patch: if ( code == true )
rank: 501
score: 98.72508409288194
patch: return $STRING$ . equals ( value ) ;
rank: 501
score: 98.71555786132812
patch: else return true ;
rank: 501
score: 98.69218614366319
patch: return false ; ; return false ; ;
rank: 501
score: 98.50968170166016
patch: { return false ; } * /
rank: 501
score: 98.25363595145089
patch: return ( ! true ) ;
rank: 502
score: 98.9075215657552
patch: return $STRING$ + value . get CaMeL Parent ( ) +
rank: 502
score: 98.71525065104167
patch: case Token . IN :
rank: 502
score: 98.69195556640625
patch: return false ; true * ;
rank: 502
score: 98.54590521918402
patch: return * true ; if return true ;
rank: 502
score: 98.50959995814732
patch: throw null ; return false ;
rank: 502
score: 98.39153180803571
patch: this . return false ; ;
rank: 502
score: 98.25361851283482
patch: if ( scope == true )
rank: 503
score: 98.9070536295573
patch: return name . is CaMeL Assignment CaMeL Op ( ) ;
rank: 503
score: 98.72388916015625
patch: return ( value . get CaMeL Type ( )
rank: 503
score: 98.71370442708333
patch: return false ; case Node . REGEXP :
rank: 503
score: 98.69119262695312
patch: return true ; return true ; true * ;
rank: 503
score: 98.54586181640624
patch: return true ; true ; { return true ;
rank: 503
score: 98.50946044921875
patch: return ; * * * return ;
rank: 503
score: 98.3833719889323
patch: / * return false ;
rank: 504
score: 98.94339693509616
patch: break ; case Token . IN : case Token . REGEXP :
rank: 504
score: 98.93828790838069
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + value . get CaMeL By CaMeL Name ( ) ) ;
rank: 504
score: 98.71067301432292
patch: return children . equals ( value ) ;
rank: 504
score: 98.69093017578125
patch: return true ; else { if return true ;
rank: 504
score: 98.54539659288194
patch: true ; if return true ; break ;
rank: 504
score: 98.50938415527344
patch: { if ( true ) * /
rank: 504
score: 98.38193184988839
patch: return true ; ; default :
rank: 505
score: 98.93765963040866
patch: return boolean is CaMeL Simple CaMeL Operator ? true : true ;
rank: 505
score: 98.71819513494319
patch: return is CaMeL Assignment CaMeL Op ( value ) {
rank: 505
score: 98.70840454101562
patch: x = false ; return false ;
rank: 505
score: 98.69077555338542
patch: if true return true ; return true ;
rank: 505
score: 98.54511854383681
patch: return true ; return * / break ;
rank: 505
score: 98.50923156738281
patch: return true ; } } return ;
rank: 505
score: 98.25039236886161
patch: |= true ; return true ;
rank: 506
score: 98.7148770419034
patch: return ( is CaMeL Simple CaMeL Operator ? false ;
rank: 506
score: 98.69881863064236
patch: is CaMeL Assignment CaMeL Op = true ;
rank: 506
score: 98.6905517578125
patch: return true ; return - FALSE ;
rank: 506
score: 98.54507107204861
patch: return true ; ; if return 1 ;
rank: 506
score: 98.50917053222656
patch: throw null ;
rank: 506
score: 98.37735421316964
patch: cfw . ; return true ;
rank: 506
score: 98.24934895833333
patch: if ( ; true )
rank: 507
score: 98.94090857872597
patch: return throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 507
score: 98.93763224283855
patch: / * is CaMeL Simple CaMeL Operator ? return false ;
rank: 507
score: 98.89882590553977
patch: return false ; case Token . Token . FUNCTION :
rank: 507
score: 98.71377563476562
patch: return value . to CaMeL String ( ) ;
rank: 507
score: 98.69765218098958
patch: return value . equals ( $STRING$ ) ;
rank: 507
score: 98.69022216796876
patch: return true ; return false ; true ; ;
rank: 507
score: 98.54437866210938
patch: return false ; return / ; return true ;
rank: 507
score: 98.50835418701172
patch: return true ; true * return ;
rank: 507
score: 98.37643868582589
patch: ? else { return true ;
rank: 507
score: 98.24748011997768
patch: else { return false ; }
rank: 508
score: 98.93700232872597
patch: result = is CaMeL Simple CaMeL Operator ? true : true ;
rank: 508
score: 98.89844859730114
patch: return is CaMeL Assignment CaMeL Op ( name ) ;
rank: 508
score: 98.71334838867188
patch: break ; case Token . ASSIGN :
rank: 508
score: 98.68965911865234
patch: return true ; true -- true ;
rank: 508
score: 98.68945990668402
patch: case Token . ASSIGN : return false ;
rank: 508
score: 98.54429796006944
patch: return true ; true ; return * /
rank: 508
score: 98.50827026367188
patch: return false ; for ; true ;
rank: 508
score: 98.37642124720982
patch: return ; default : if ;
rank: 508
score: 98.24632917131696
patch: if ; if ( true )
rank: 509
score: 98.93625895182292
patch: / / is CaMeL Simple CaMeL Operator ? return false ;
rank: 509
score: 98.68960571289062
patch: return true ; true ; true return true ;
rank: 509
score: 98.68759494357639
patch: call CaMeL Has CaMeL Local CaMeL Result ?
rank: 509
score: 98.54383544921875
patch: return false ; return true ; return 1 ;
rank: 509
score: 98.5078125
patch: { return false ; } }
rank: 510
score: 98.70882415771484
patch: return ( value == null ) ;
rank: 510
score: 98.6895751953125
patch: return return || true ; return false ;
rank: 510
score: 98.543701171875
patch: return false ; return false ; break ;
rank: 510
score: 98.50607299804688
patch: return ; * * ? * /
rank: 510
score: 98.36924525669643
patch: return return true return true ;
rank: 510
score: 98.24302455357143
patch: return true ; ; case ;
rank: 511
score: 98.93738810221355
patch: evaluates CaMeL To CaMeL Local CaMeL Value ? return true ;
rank: 511
score: 98.93483323317308
patch: return is CaMeL Assignment CaMeL Op ( value ) ; default :
rank: 511
score: 98.68942599826389
patch: return false ; return false ; true {
rank: 511
score: 98.50556945800781
patch: return null ; return true ; }
rank: 511
score: 98.36534881591797
patch: return ; ;
rank: 511
score: 98.24298095703125
patch: = false ; return true ;
rank: 512
score: 98.93601637620192
patch: return true ; case Token . OBJECTLIT : return true ;
rank: 512
score: 98.54231770833333
patch: return true ; true ; return 0 ;
rank: 512
score: 98.50364685058594
patch: { * * * * * /
rank: 512
score: 98.2411600748698
patch: parameters . return true ;
rank: 513
score: 98.93372599283855
patch: is CaMeL Simple CaMeL Operator ( value , value ) ;
rank: 513
score: 98.93264770507812
patch: is CaMeL Assignment CaMeL Op ( value ) return true ;
rank: 513
score: 98.68910047743056
patch: return false ; true ; ; true {
rank: 513
score: 98.6757583618164
patch: return $STRING$ ? false : true ;
rank: 513
score: 98.54179551866319
patch: return ; return ; if return true ;
rank: 513
score: 98.50347028459821
patch: break ; } return false ;
rank: 513
score: 98.3608907063802
patch: this ; return false ;
rank: 513
score: 98.23973737444196
patch: if ( values != null )
rank: 514
score: 98.93370643028847
patch: return is CaMeL Simple CaMeL Operator ( value , $STRING$ ) ;
rank: 514
score: 98.93165001502403
patch: return $STRING$ && is CaMeL Assignment CaMeL Op ( value ) ;
rank: 514
score: 98.688232421875
patch: return false ; ; / * return true ;
rank: 514
score: 98.67473008897569
patch: is CaMeL Assignment CaMeL Op return false ;
rank: 514
score: 98.54178292410714
patch: return value ; return false ;
rank: 514
score: 98.50320870535714
patch: return true ; break ; else
rank: 514
score: 98.3607686360677
patch: return true return false ;
rank: 515
score: 98.87854682074652
patch: return true ; case Token . FUNCTION ?
rank: 515
score: 98.69852023654514
patch: return ) ; case Token . FUNCTION :
rank: 515
score: 98.67405700683594
patch: return true ; ) return true ;
rank: 515
score: 98.54066975911458
patch: return false ; ; return true ; }
rank: 515
score: 98.50264195033482
patch: return false ; } catch ;
rank: 515
score: 98.36029052734375
patch: ? if ( true ;
rank: 515
score: 98.22471110026042
patch: if ( return true )
rank: 516
score: 98.9320068359375
patch: return null || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 516
score: 98.878125
patch: return value . length ( ) > 0 ;
rank: 516
score: 98.698095703125
patch: return is CaMeL Assignment CaMeL Op ( value ,
rank: 516
score: 98.6880111694336
patch: return true ; true * ; true
rank: 516
score: 98.6739501953125
patch: is CaMeL Assignment CaMeL Op return true ;
rank: 516
score: 98.53932698567708
patch: return true ; return / ; break ;
rank: 516
score: 98.35814557756696
patch: this . return true true ;
rank: 516
score: 98.22403971354167
patch: . if ( true )
rank: 517
score: 98.93199573863636
patch: return is CaMeL Simple CaMeL Operator ( node ) ;
rank: 517
score: 98.692626953125
patch: return boolean CaMeL Value = true ;
rank: 517
score: 98.67390950520833
patch: return true ; default : throw $STRING$ ;
rank: 517
score: 98.53926391601563
patch: return false ; return - 1 - true ;
rank: 517
score: 98.50189208984375
patch: if return false ;
rank: 517
score: 98.35762241908482
patch: ? if ( true ) ;
rank: 517
score: 98.22355143229167
patch: for ( Node ; )
rank: 518
score: 98.68762817382813
patch: return true ; ; ; ; return true ;
rank: 518
score: 98.68585205078125
patch: return { case Token . FUNCTION :
rank: 518
score: 98.501708984375
patch: { if return false ;
rank: 518
score: 98.22348022460938
patch: body . return true ;
rank: 519
score: 98.68755425347223
patch: return false ; return return true ; ;
rank: 519
score: 98.68154296875
patch: return call CaMeL Has CaMeL Local CaMeL Result ;
rank: 519
score: 98.66937934027777
patch: return true ; case Type . REGEXP :
rank: 519
score: 98.50150299072266
patch: { else { return ; ; }
rank: 519
score: 98.21331787109375
patch: Tree true = true ;
rank: 520
score: 98.92626953125
patch: break ; case Token . REGEXP : case Token . REGEXP :
rank: 520
score: 98.8690185546875
patch: return is CaMeL Immutable CaMeL Value ( locals ) ;
rank: 520
score: 98.68754069010417
patch: return false ; true else return false ;
rank: 520
score: 98.67964002821181
patch: throw new Illegal CaMeL Argument CaMeL Exception (
rank: 520
score: 98.66862487792969
patch: break ; case Token . REGEXP :
rank: 520
score: 98.53914184570313
patch: return true ; return true ; return break ;
rank: 520
score: 98.50142124720982
patch: . if ; * * /
rank: 520
score: 98.35060628255208
patch: return true ; ; }
rank: 520
score: 98.2133076985677
patch: final ; return true ;
rank: 521
score: 98.92777193509616
patch: return is CaMeL Simple CaMeL Operator ( value ) ; default :
rank: 521
score: 98.68733045789931
patch: return false ; true catch return true ;
rank: 521
score: 98.6779052734375
patch: System . out . println ( $STRING$ + value
rank: 521
score: 98.667236328125
patch: is CaMeL Simple CaMeL Operator && true ;
rank: 521
score: 98.539013671875
patch: return true ; true ; return * true ;
rank: 521
score: 98.50054931640625
patch: . throw new Runtime CaMeL Exception ;
rank: 521
score: 98.35009765625
patch: ? if ( ;
rank: 521
score: 98.21305338541667
patch: * true . * /
rank: 522
score: 98.68604871961806
patch: return false ; return return ! true ;
rank: 522
score: 98.49969482421875
patch: return true ; break ; return ;
rank: 522
score: 98.34783935546875
patch: if ( true ; true ;
rank: 522
score: 98.21117146809895
patch: return true - true ;
rank: 523
score: 98.9267578125
patch: return is CaMeL Assignment CaMeL Op ( value ) ; break ;
rank: 523
score: 98.68595886230469
patch: throw false ; return false ; ;
rank: 523
score: 98.66422119140626
patch: result = true ;
rank: 523
score: 98.53809204101563
patch: return true ; break ; if return true ;
rank: 523
score: 98.49724469866071
patch: . if ; return false ;
rank: 523
score: 98.21019287109375
patch: for ( ; )
rank: 524
score: 98.85987684461806
patch: return $STRING$ ; case Token . FUNCTION :
rank: 524
score: 98.68580627441406
patch: return false ; return && true ;
rank: 524
score: 98.66639200846355
patch: return Boolean . false ;
rank: 524
score: 98.66089739118304
patch: return return ( true ) ;
rank: 524
score: 98.53773193359375
patch: return true ; ; return 0 + true ;
rank: 524
score: 98.34318237304687
patch: return ; case ;
rank: 524
score: 98.2002461751302
patch: short true = true ;
rank: 525
score: 98.9261944110577
patch: return is CaMeL Assignment CaMeL Op ( value + $STRING$ ) ;
rank: 525
score: 98.68564453125
patch: return true ; ; * ; return false ;
rank: 525
score: 98.66379801432292
patch: return null ; case Token . FUNCTION :
rank: 525
score: 98.66007690429687
patch: throw new Assertion CaMeL Error ( $STRING$ + value
rank: 525
score: 98.53751627604167
patch: return true ; ; if true * ;
rank: 525
score: 98.49577331542969
patch: . return ; * * * /
rank: 525
score: 98.34254673549107
patch: ? return true ; default :
rank: 525
score: 98.19947306315105
patch: do { return false ;
rank: 526
score: 98.92596905048077
patch: return true || is CaMeL Assignment CaMeL Op ( value ) ;
rank: 526
score: 98.85598754882812
patch: return value . get CaMeL Type ( ) {
rank: 526
score: 98.68514578683036
patch: throw false ; return false ;
rank: 526
score: 98.66272650824652
patch: return true ; case Token . value :
rank: 526
score: 98.53733317057292
patch: return true ; return ; { return ;
rank: 526
score: 98.49573771158855
patch: return true ; while ;
rank: 526
score: 98.33983503069196
patch: return ; default : continue ;
rank: 526
score: 98.19933064778645
patch: return value != null ;
rank: 527
score: 98.68471069335938
patch: return false ; return true ; true * /
rank: 527
score: 98.53680419921875
patch: return ; return true ; return / ;
rank: 527
score: 98.49556187220982
patch: return true ; true ; }
rank: 527
score: 98.1984151204427
patch: short type = true ;
rank: 528
score: 98.92572490985577
patch: return null && is CaMeL Simple CaMeL Operator ( value ) ;
rank: 528
score: 98.6841049194336
patch: return true ; true = false ;
rank: 528
score: 98.65660942925348
patch: return true ; case Type . IN :
rank: 528
score: 98.53677029079861
patch: return true ; if true + true ;
rank: 528
score: 98.33701578776042
patch: ? return true ; ;
rank: 528
score: 98.19530232747395
patch: Object true = true ;
rank: 529
score: 98.9245135967548
patch: return false || is CaMeL Simple CaMeL Operator ( value ) ;
rank: 529
score: 98.85106811523437
patch: return true ; case Token . FUNCTION : else
rank: 529
score: 98.68397352430556
patch: return false ; true return false ; ;
rank: 529
score: 98.65164184570312
patch: is CaMeL Simple CaMeL Operator break ;
rank: 529
score: 98.643896484375
patch: return ( locals . length > 0 ) ;
rank: 529
score: 98.53552924262152
patch: return true ; return - 1 / ;
rank: 529
score: 98.49330139160156
patch: return true ; true * break ;
rank: 529
score: 98.18855590820313
patch: ret = true ;
rank: 530
score: 98.68390570746527
patch: return false ; true if return false ;
rank: 530
score: 98.53537326388889
patch: return true ; return true || true ;
rank: 530
score: 98.49280657087054
patch: break ; return true ; }
rank: 531
score: 98.92395958533653
patch: return is CaMeL Simple CaMeL Operator ( value ) || true ;
rank: 531
score: 98.90732828776042
patch: return ( evaluates CaMeL To CaMeL Local CaMeL Value ) ;
rank: 531
score: 98.68385314941406
patch: return return true ; true * /
rank: 531
score: 98.64258422851563
patch: return value . get CaMeL Parent ( ) ==
rank: 531
score: 98.53536648220486
patch: true ; if true ; return false ;
rank: 531
score: 98.49267578125
patch: if ( true ) return null ;
rank: 531
score: 98.183935546875
patch: if ( false )
rank: 532
score: 98.9239169034091
patch: return locals . get ( value ) != null ;
rank: 532
score: 98.90714888139205
patch: return true ; case Token . IN : / /
rank: 532
score: 98.64154730902777
patch: return is CaMeL Simple CaMeL Operator ) ;
rank: 532
score: 98.5337890625
patch: return ; = - 1 ; return true ;
rank: 532
score: 98.49208068847656
patch: / * * * true * /
rank: 532
score: 98.33050537109375
patch: return ; case Token ;
rank: 532
score: 98.18198649088542
patch: compiler . return false ;
rank: 533
score: 98.68302408854167
patch: return false ; try {
rank: 533
score: 98.64625379774306
patch: case Node . FUNCTION : return true ;
rank: 533
score: 98.640869140625
patch: break ; case Token . FUNCTION _
rank: 533
score: 98.53322347005208
patch: return true ; return ; if return ;
rank: 533
score: 98.49207305908203
patch: return true ; if ( false ;
rank: 533
score: 98.32735770089286
patch: if ; return true ; ;
rank: 533
score: 98.18063354492188
patch: return true || true ;
rank: 534
score: 98.9056396484375
patch: is CaMeL Simple CaMeL Operator . return true ;
rank: 534
score: 98.84327281605114
patch: return true ; case Token . Token . ASSIGN :
rank: 534
score: 98.68136596679688
patch: return false ; true / ; ;
rank: 534
score: 98.64598253038194
patch: return true ; default : throw null ;
rank: 534
score: 98.637939453125
patch: return ( ) ;
rank: 534
score: 98.53318956163194
patch: return true ; return ; return $NUMBER$ ;
rank: 534
score: 98.49139404296875
patch: { if ; * /
rank: 534
score: 98.32529994419643
patch: return ; : return false ;
rank: 535
score: 98.92328435724431
patch: return . is CaMeL Assignment CaMeL Op ( ) ;
rank: 535
score: 98.68101806640625
patch: return false ; true ; return true ; ;
rank: 535
score: 98.6336669921875
patch: return locals . case Token . FUNCTION :
rank: 535
score: 98.53303358289931
patch: true true ; return ; = true ;
rank: 535
score: 98.49081420898438
patch: { else { return true ; ;
rank: 536
score: 98.83942260742188
patch: { return false ; case Token . FUNCTION :
rank: 536
score: 98.680615234375
patch: return true ; true else if return true ;
rank: 536
score: 98.63361358642578
patch: return ( locals != null ) ;
rank: 536
score: 98.53246392144098
patch: if ; = true ; return true ;
rank: 536
score: 98.49072265625
patch: if ; / * * * /
rank: 536
score: 98.16363525390625
patch: compiler . return true ;
rank: 537
score: 98.83661443536931
patch: return false ; default : case Token . FUNCTION :
rank: 537
score: 98.53122287326389
patch: return true ; return - 1 ; else
rank: 537
score: 98.49031284877232
patch: return true ; } break ;
rank: 537
score: 98.32113211495536
patch: if ( true ; return ;
rank: 537
score: 98.15928955078125
patch: v = true ;
rank: 538
score: 98.91668146306819
patch: return is CaMeL Assignment CaMeL Op ? return true ;
rank: 538
score: 98.68008083767361
patch: if return false ; return true ; ;
rank: 538
score: 98.62542724609375
patch: return $STRING$ + value + $STRING$ ;
rank: 538
score: 98.53111921037946
patch: return false ; return * ;
rank: 538
score: 98.48931884765625
patch: return ; ( return false ;
rank: 538
score: 98.32008870442708
patch: that . return true ;
rank: 539
score: 98.89707253196023
patch: return true ; case Token . REGEXP : break ;
rank: 539
score: 98.83381791548295
patch: return $STRING$ + value . get CaMeL Type ( )
rank: 539
score: 98.67991638183594
patch: true return false ; return true ;
rank: 539
score: 98.62368435329861
patch: throw instanceof Illegal CaMeL State CaMeL Exception ;
rank: 539
score: 98.53109741210938
patch: return true ; return ; return return true ;
rank: 539
score: 98.48921966552734
patch: return false ; true * * :
rank: 539
score: 98.31620570591518
patch: return true ; } true ;
rank: 539
score: 98.15885416666667
patch: return TRUE ; case ;
rank: 540
score: 98.91584916548295
patch: return < value . get CaMeL Type ( ) ;
rank: 540
score: 98.82843572443181
patch: return true ; default : case Token . IN :
rank: 540
score: 98.63121880425348
patch: is CaMeL Assignment CaMeL Op = false ;
rank: 540
score: 98.62069702148438
patch: return ) ;
rank: 540
score: 98.5309326171875
patch: return true ; return type ; return true ;
rank: 540
score: 98.4889907836914
patch: { return ; return true ; }
rank: 540
score: 98.31026785714286
patch: / * / return true ;
rank: 540
score: 98.1551513671875
patch: return true & true ;
rank: 541
score: 98.53061930338542
patch: if true ; return ; return true ;
rank: 541
score: 98.48873138427734
patch: . { if return true ; }
rank: 541
score: 98.30984061104911
patch: if true : return true ;
rank: 541
score: 98.15397135416667
patch: return node . true ;
rank: 542
score: 98.90526234019886
patch: return is CaMeL Assignment CaMeL Op ( node ) ;
rank: 542
score: 98.82533569335938
patch: return true ; case Token . ASSIGN : }
rank: 542
score: 98.67911783854167
patch: return false ; ; catch return true ;
rank: 542
score: 98.62491607666016
patch: return is CaMeL Simple CaMeL Operator ;
rank: 542
score: 98.52984619140625
patch: return true ; ; if true ; return ;
rank: 542
score: 98.48783111572266
patch: return false ; super . true ;
rank: 542
score: 98.30519612630208
patch: try { return false ;
rank: 542
score: 98.15261840820312
patch: env . return true ;
rank: 543
score: 98.8915786743164
patch: return true ; { return true ;
rank: 543
score: 98.824755859375
patch: return value . length ( ) == 0 ;
rank: 543
score: 98.61968315972223
patch: throw new Runtime CaMeL Exception ( $STRING$ +
rank: 543
score: 98.61922878689236
patch: return false ; default : throw $STRING$ ;
rank: 543
score: 98.52815755208333
patch: true ; return ; = true ; ;
rank: 543
score: 98.15191650390625
patch: synchronized ( true )
rank: 544
score: 98.89056951349431
patch: return true ; case Token . REGEXP : / /
rank: 544
score: 98.67908477783203
patch: return true ; true * * {
rank: 544
score: 98.61684163411458
patch: is CaMeL Immutable CaMeL Value = true ;
rank: 544
score: 98.52784559461806
patch: return ; if true ; return false ;
rank: 544
score: 98.48636300223214
patch: { if return return true ;
rank: 544
score: 98.30191040039062
patch: default : return false ;
rank: 544
score: 98.15071614583333
patch: parameters . put ( ;
rank: 545
score: 98.8973388671875
patch: return is CaMeL Simple CaMeL Operator ( type ) ;
rank: 545
score: 98.82254028320312
patch: return value . get CaMeL Name ( ) ;
rank: 545
score: 98.61756727430556
patch: return value CaMeL Of ( true ) ;
rank: 545
score: 98.61576843261719
patch: ( ( Token ) locals ) .
rank: 545
score: 98.52772827148438
patch: return true ; ; true ; = true ;
rank: 545
score: 98.48550415039062
patch: return true ; * * * :
rank: 545
score: 98.30098179408482
patch: : * / return true ;
rank: 545
score: 98.14922485351562
patch: if ( ; ;
rank: 546
score: 98.61539713541667
patch: return false ; case Type . REGEXP :
rank: 546
score: 98.52771674262152
patch: if true return 0 ; return true ;
rank: 546
score: 98.48546491350446
patch: return ; , * * /
rank: 546
score: 98.30032784598214
patch: / * return true : ;
rank: 546
score: 98.14805094401042
patch: if ( true && ;
rank: 547
score: 98.89253373579545
patch: return is CaMeL Simple CaMeL Operator ( n ) ;
rank: 547
score: 98.67867702907986
patch: return return 1 ; ; return true ;
rank: 547
score: 98.61518096923828
patch: return value ? false : true ;
rank: 547
score: 98.6086654663086
patch: return ( true || true ) ;
rank: 547
score: 98.52760823567708
patch: return ; return $STRING$ ;
rank: 547
score: 98.48534284319196
patch: } else if ( true ;
rank: 547
score: 98.29985700334821
patch: node . ; return true ;
rank: 547
score: 98.14765625
patch: type = true ;
rank: 548
score: 98.67856852213542
patch: return return && true ; return true ;
rank: 548
score: 98.61488172743056
patch: return locals . add ( value ) ;
rank: 548
score: 98.52750244140626
patch: return true ; ; else if return true ;
rank: 548
score: 98.48406219482422
patch: { if ; return true ; ;
rank: 549
score: 98.67841796875
patch: return true ; ; finally { return false ;
rank: 549
score: 98.61259629991319
patch: return true ; case Token . locals :
rank: 549
score: 98.52736206054688
patch: return true ; ; if ; return false ;
rank: 549
score: 98.48321533203125
patch: . * * * * /
rank: 549
score: 98.29894147600446
patch: return ; default ; true ;
rank: 549
score: 98.13812255859375
patch: * return false ;
rank: 550
score: 98.8880948153409
patch: return is CaMeL Simple CaMeL Operator ( 0 ) ;
rank: 550
score: 98.67811279296875
patch: return true ; return true ; true * /
rank: 550
score: 98.608642578125
patch: return false ; ) return true ;
rank: 550
score: 98.527197265625
patch: return 0 ; return true ; if true ;
rank: 550
score: 98.48287527901786
patch: { return true ; } else
rank: 550
score: 98.29486955915179
patch: if ( true ) ; ;
rank: 550
score: 98.13795979817708
patch: Collections . return true ;
rank: 551
score: 98.67806396484374
patch: return true ; true true ; return false ;
rank: 551
score: 98.60838012695312
patch: x = false ;
rank: 551
score: 98.52593315972223
patch: return true ; return - 1 ; }
rank: 551
score: 98.48193359375
patch: { this . return true ; }
rank: 551
score: 98.29466552734375
patch: if ( ! ;
rank: 552
score: 98.88465465198864
patch: || is CaMeL Simple CaMeL Operator ? return true ;
rank: 552
score: 98.87425648082386
patch: is CaMeL Simple CaMeL Operator ( value , value )
rank: 552
score: 98.677685546875
patch: return false ; return true ; true * ;
rank: 552
score: 98.60822211371527
patch: return false ; case Token . value :
rank: 552
score: 98.52530924479167
patch: return true ; return ; return null ;
rank: 552
score: 98.29441324869792
patch: / ; return true ;
rank: 552
score: 98.13589477539062
patch: body . return false ;
rank: 553
score: 98.80919189453125
patch: return locals . size ( ) == 0 ;
rank: 553
score: 98.67710876464844
patch: return false ; true ; else {
rank: 553
score: 98.5250244140625
patch: return true ; return 1 ; return false ;
rank: 553
score: 98.29404122488839
patch: / * return true * ;
rank: 553
score: 98.13466389973958
patch: * ; return true ;
rank: 554
score: 98.67708333333333
patch: return true ; return - 1 true ;
rank: 554
score: 98.6067886352539
patch: return $STRING$ ? true : false ;
rank: 554
score: 98.52498372395833
patch: return * return 0 ; return true ;
rank: 554
score: 98.47935267857143
patch: * * * true * /
rank: 554
score: 98.13388061523438
patch: log ; return false ;
rank: 555
score: 98.865478515625
patch: is CaMeL Simple CaMeL Operator ( value )
rank: 555
score: 98.79962158203125
patch: return locals . size ( ) > 1 ;
rank: 555
score: 98.67702026367188
patch: return true ; ; * * return false ;
rank: 555
score: 98.52427842881944
patch: return true ; return return - 1 ;
rank: 555
score: 98.47920989990234
patch: { if ; ; return true ;
rank: 555
score: 98.29035295758929
patch: . . . return true ;
rank: 556
score: 98.8794278231534
patch: return is CaMeL Simple CaMeL Operator ( false ) ;
rank: 556
score: 98.67649841308594
patch: boolean return true ; return true ;
rank: 556
score: 98.60268147786458
patch: is CaMeL Simple CaMeL Operator ? break ;
rank: 556
score: 98.52393798828125
patch: return ; return true ; for return true ;
rank: 556
score: 98.47889055524554
patch: return ; this . true ;
rank: 556
score: 98.29014369419643
patch: / * return return true ;
rank: 556
score: 98.12746175130208
patch: repaint ( true ) ;
rank: 557
score: 98.876953125
patch: return locals . size ( ) != 0 ;
rank: 557
score: 98.7919921875
patch: return value . get CaMeL Result ( ) ;
rank: 557
score: 98.67584228515625
patch: return false ; return ( true ;
rank: 557
score: 98.60237884521484
patch: return true ; ) return false ;
rank: 557
score: 98.47769601004464
patch: . return ; return false ;
rank: 557
score: 98.28768484933036
patch: this . return false true ;
rank: 557
score: 98.12540690104167
patch: return false && true ;
rank: 558
score: 98.67513275146484
patch: result return true ; return false ;
rank: 558
score: 98.60192192925348
patch: return false ; case Type . IN :
rank: 558
score: 98.56910705566406
patch: state . return ( true ) ;
rank: 558
score: 98.4771728515625
patch: return return || true ;
rank: 558
score: 98.2868143717448
patch: boolean ; return true ;
rank: 558
score: 98.1239990234375
patch: return true false ;
rank: 559
score: 98.7907470703125
patch: return value . length ( ) != 0 ;
rank: 559
score: 98.60177951388889
patch: return $STRING$ . equals ( $STRING$ ) ;
rank: 559
score: 98.56876373291016
patch: return ( locals == null ) ;
rank: 559
score: 98.52219848632812
patch: return false ; return * ; return true ;
rank: 559
score: 98.47676304408482
patch: break true ; return false ;
rank: 559
score: 98.28622872488839
patch: return ; } return null ;
rank: 559
score: 98.12350463867188
patch: log ; return true ;
rank: 560
score: 98.85795454545455
patch: is CaMeL Simple CaMeL Operator * / return true ;
rank: 560
score: 98.7889404296875
patch: return ( type == Token . FUNCTION ) ;
rank: 560
score: 98.67455291748047
patch: return false ; ; ; / ;
rank: 560
score: 98.56568739149306
patch: return 0 ; case Token . FUNCTION :
rank: 560
score: 98.52171020507812
patch: return true ; if ; { return true ;
rank: 560
score: 98.47356305803571
patch: return return false ; true ;
rank: 560
score: 98.1212158203125
patch: return false = false ;
rank: 561
score: 98.87323552911931
patch: return is CaMeL Simple CaMeL Operator ( this ) ;
rank: 561
score: 98.674365234375
patch: return true ; true ? if return true ;
rank: 561
score: 98.56541612413194
patch: throw null ; case Token . FUNCTION :
rank: 561
score: 98.52101643880208
patch: return ; = true ; return 1 ;
rank: 561
score: 98.4725341796875
patch: . return null ;
rank: 561
score: 98.28517368861607
patch: < Token > return true ;
rank: 561
score: 98.11991373697917
patch: * / if ( ;
rank: 562
score: 98.87082741477273
patch: return is CaMeL Simple CaMeL Operator ( ) ; }
rank: 562
score: 98.85443793402777
patch: return Token . FUNCTION : return true ;
rank: 562
score: 98.67378234863281
patch: return false ; true true * /
rank: 562
score: 98.58917236328125
patch: else return false ;
rank: 562
score: 98.5625712076823
patch: return true ? true ;
rank: 562
score: 98.5204345703125
patch: return true ; return count ; return true ;
rank: 562
score: 98.46963065011161
patch: { return ; return true ;
rank: 562
score: 98.28485107421875
patch: return ( ( Node ) ;
rank: 562
score: 98.11767578125
patch: Type type = true ;
rank: 563
score: 98.86960671164773
patch: return is CaMeL Simple CaMeL Operator ( null ) ;
rank: 563
score: 98.8520263671875
patch: is CaMeL Assignment CaMeL Op : return true ;
rank: 563
score: 98.67378065321181
patch: return true ; return - ! true ;
rank: 563
score: 98.52025146484375
patch: return 0 ; if true ; return true ;
rank: 563
score: 98.46895054408482
patch: return ; true * * /
rank: 563
score: 98.28345598493304
patch: for true : return true ;
rank: 563
score: 98.11617024739583
patch: return true = false ;
rank: 564
score: 98.86549682617188
patch: return value . boolean CaMeL Value ( ) ;
rank: 564
score: 98.78263549804687
patch: return true ; this . value = value ;
rank: 564
score: 98.67369995117187
patch: return true ; ; true if return true ;
rank: 564
score: 98.51909528459821
patch: return $STRING$ ; if true ;
rank: 564
score: 98.46796526227679
patch: { * * * * /
rank: 564
score: 98.283203125
patch: / * return true true ;
rank: 564
score: 98.11299641927083
patch: form . return true ;
rank: 565
score: 98.67340766059027
patch: if return true ; if return true ;
rank: 565
score: 98.55726114908855
patch: return value == true ;
rank: 565
score: 98.51890869140625
patch: return true ; return - 1 && true ;
rank: 565
score: 98.46650041852679
patch: return ; , return false ;
rank: 565
score: 98.28193882533482
patch: . return ( true ) ;
rank: 565
score: 98.11273193359375
patch: return false - true ;
rank: 566
score: 98.86301491477273
patch: return is CaMeL Assignment CaMeL Op ( type ) ;
rank: 566
score: 98.8465576171875
patch: return value . equals ( Token . FUNCTION ) ;
rank: 566
score: 98.67318725585938
patch: return true ; true return 1 ;
rank: 566
score: 98.51857212611607
patch: return return ; return true ;
rank: 566
score: 98.46641322544643
patch: if return true ; break ;
rank: 566
score: 98.28146362304688
patch: || ( true ) ;
rank: 566
score: 98.11001586914062
patch: return compiler . true ;
rank: 567
score: 98.84619750976563
patch: is CaMeL Constructor = true ; return true ;
rank: 567
score: 98.67304992675781
patch: return true ; true return $STRING$ ;
rank: 567
score: 98.56283569335938
patch: return value ? true : false ;
rank: 567
score: 98.55055236816406
patch: state ( ) . return true ;
rank: 567
score: 98.51854858398437
patch: return ; return ; if ; return true ;
rank: 567
score: 98.46500651041667
patch: . return false ; }
rank: 567
score: 98.28103201729911
patch: this true : return true ;
rank: 567
score: 98.10641479492188
patch: * /
rank: 568
score: 98.85808771306819
patch: boolean is CaMeL Simple CaMeL Operator ? return false ;
rank: 568
score: 98.6727294921875
patch: return false ; return true ; true true
rank: 568
score: 98.55853271484375
patch: switch ( value ) {
rank: 568
score: 98.51798793247768
patch: return ; return ; * /
rank: 568
score: 98.10594685872395
patch: return TRUE . true ;
rank: 569
score: 98.85762162642045
patch: return is CaMeL Assignment CaMeL Op ( null ) ;
rank: 569
score: 98.84557495117187
patch: case Token . IN : { return true ;
rank: 569
score: 98.67185974121094
patch: return false ; return true ; *
rank: 569
score: 98.54471164279514
patch: return locals . contains ( value ) ;
rank: 569
score: 98.51795789930556
patch: return true ; return / / * /
rank: 569
score: 98.46483503069196
patch: = false ; return false ;
rank: 569
score: 98.27845982142857
patch: ? return false : true ;
rank: 569
score: 98.10373942057292
patch: return true ; } else
rank: 570
score: 98.84379438920455
patch: case Node . FUNCTION : case Token . REGEXP :
rank: 570
score: 98.67183685302734
patch: else return true ; return true ;
rank: 570
score: 98.55699811662946
patch: return true ; / * /
rank: 570
score: 98.54264068603516
patch: return locals . clear ( ) ;
rank: 570
score: 98.51758490668402
patch: return true ; ; if true ; else
rank: 570
score: 98.46425374348958
patch: return false ; } }
rank: 570
score: 98.27797444661458
patch: return true ; } ;
rank: 570
score: 98.09602864583333
patch: helper . return true ;
rank: 571
score: 98.85662286931819
patch: return is CaMeL Assignment CaMeL Op ( this ) ;
rank: 571
score: 98.6714859008789
patch: return true ; ; * ; ;
rank: 571
score: 98.55599212646484
patch: result = false ; return true ;
rank: 571
score: 98.51734270368304
patch: return 1 ; return false ;
rank: 571
score: 98.46220179966518
patch: { else { return true ;
rank: 571
score: 98.27751813616071
patch: return return true ; default ;
rank: 572
score: 98.67137451171875
patch: return false ; true * ; return true ;
rank: 572
score: 98.55441284179688
patch: throw ( Token . ASSIGN ) ;
rank: 572
score: 98.53753662109375
patch: return $STRING$ + value ;
rank: 572
score: 98.51688639322917
patch: return true ; ; return ; break ;
rank: 572
score: 98.4613037109375
patch: return false ; * * /
rank: 572
score: 98.27659388950893
patch: ? this . return false ;
rank: 572
score: 98.08946736653645
patch: env . return false ;
rank: 573
score: 98.85175115411931
patch: return is CaMeL Simple CaMeL Name ( value ) ;
rank: 573
score: 98.8391357421875
patch: return case Token . ASSIGN : return true ;
rank: 573
score: 98.6713623046875
patch: return true ; return true ; true ; true
rank: 573
score: 98.53629557291667
patch: return true ; case Token . REGEXP _
rank: 573
score: 98.51661987304688
patch: return this ; return true ; return false ;
rank: 573
score: 98.46070207868304
patch: { return true ; } ;
rank: 573
score: 98.27519008091518
patch: return ; default : ; ;
rank: 574
score: 98.67108917236328
patch: return false ; true if true ;
rank: 574
score: 98.55055236816406
patch: continue ; case Token . FUNCTION :
rank: 574
score: 98.51654924665179
patch: return true ; true ; {
rank: 574
score: 98.46019635881696
patch: { return false ; true ;
rank: 574
score: 98.27345493861607
patch: ? Token . true : ;
rank: 574
score: 98.08790079752605
patch: Exp true = true ;
rank: 575
score: 98.83378462357955
patch: break ; case Token . IN : return true ;
rank: 575
score: 98.51574028862848
patch: true ; if true ; if true ;
rank: 575
score: 98.45853097098214
patch: throw new Error ( $STRING$ ;
rank: 575
score: 98.27025495256696
patch: node . ; return false ;
rank: 575
score: 98.08658854166667
patch: if ( return true ;
rank: 576
score: 98.83212280273438
patch: is CaMeL Assignment CaMeL Op . return true ;
rank: 576
score: 98.67041015625
patch: return true ; ; return ) ;
rank: 576
score: 98.54882049560547
patch: return true ; { return false ;
rank: 576
score: 98.514599609375
patch: return true ; ; return 1 + true ;
rank: 576
score: 98.4546407063802
patch: { if ( true ;
rank: 576
score: 98.0853271484375
patch: val = true ;
rank: 577
score: 98.67020089285714
patch: return true ; true true ;
rank: 577
score: 98.54637145996094
patch: return false ; ) return false ;
rank: 577
score: 98.52591705322266
patch: return ( true , true ) ;
rank: 577
score: 98.51424560546874
patch: return 0 ; return true ; return false ;
rank: 577
score: 98.45345633370536
patch: return true ; } if ;
rank: 577
score: 98.26808384486607
patch: ? Token ; return true ;
rank: 578
score: 98.66910807291667
patch: return true ; ; else return false ;
rank: 578
score: 98.52537706163194
patch: call CaMeL Has CaMeL Local CaMeL Result .
rank: 578
score: 98.51392822265625
patch: return true ; return - ; return true ;
rank: 578
score: 98.45272391183036
patch: . return return true ; }
rank: 578
score: 98.26780482700893
patch: cfw . ; return false ;
rank: 579
score: 98.84509887695313
patch: return boolean CaMeL Value ? true : true ;
rank: 579
score: 98.82941436767578
patch: return true ; : return true ;
rank: 579
score: 98.66888427734375
patch: return false ; ; ; true {
rank: 579
score: 98.54415893554688
patch: return false ; { return true ;
rank: 579
score: 98.52208709716797
patch: return ( true || false ) ;
rank: 579
score: 98.51337890625
patch: return false ; if true ; = true ;
rank: 579
score: 98.45220947265625
patch: return false ; } * /
rank: 579
score: 98.26714215959821
patch: ? * ; return true ;
rank: 580
score: 98.8445712002841
patch: return is CaMeL Assignment CaMeL Op ? return false ;
rank: 580
score: 98.66878255208333
patch: return true ; return false ; true /
rank: 580
score: 98.54256439208984
patch: return value . run ( ) ;
rank: 580
score: 98.51295776367188
patch: return true ; return return ; return true ;
rank: 580
score: 98.44935825892857
patch: . set ; return false ;
rank: 580
score: 98.26503208705357
patch: . this . return true ;
rank: 580
score: 98.0787353515625
patch: code . return true ;
rank: 581
score: 98.82433471679687
patch: return Token . ASSIGN ? true : true ;
rank: 581
score: 98.66844177246094
patch: boolean return false ; return false ;
rank: 581
score: 98.51743570963542
patch: { break ; case Token . FUNCTION :
rank: 581
score: 98.51253662109374
patch: if true ; return true ; if true ;
rank: 581
score: 98.44849650065105
patch: { return return true ;
rank: 581
score: 98.26302664620536
patch: : / * return true ;
rank: 581
score: 98.0752665201823
patch: code . return false ;
rank: 582
score: 98.82248757102273
patch: break ; case Token . REGEXP : return true ;
rank: 582
score: 98.75506591796875
patch: return true ; case Token . Definition :
rank: 582
score: 98.66838836669922
patch: return false ; return $NUMBER$ ; ;
rank: 582
score: 98.51229858398438
patch: true ; return ; return ; = true ;
rank: 582
score: 98.51220703125
patch: return ( true ) ? true ;
rank: 582
score: 98.26150076729911
patch: this ; ; return true ;
rank: 582
score: 98.07366943359375
patch: Collection < Node > ;
rank: 583
score: 98.84181906960227
patch: return is CaMeL Assignment CaMeL Op ( n ) ;
rank: 583
score: 98.82183283025569
patch: case Token . ASSIGN : case Token . IN :
rank: 583
score: 98.75487603081598
patch: return false ; case Token . FUNCTION ?
rank: 583
score: 98.66837158203126
patch: return true ; boolean true ( true ) ;
rank: 583
score: 98.53379313151042
patch: else { return true ;
rank: 583
score: 98.51179809570313
patch: return true ; if return true ; break ;
rank: 583
score: 98.07216389973958
patch: int true = true ;
rank: 584
score: 98.8402099609375
patch: return is CaMeL Simple CaMeL Operator ( ) ) ;
rank: 584
score: 98.8210782137784
patch: return false ; case Token . FUNCTION : / /
rank: 584
score: 98.66835021972656
patch: return true ; return false ; case
rank: 584
score: 98.51173618861607
patch: return false ; return this ;
rank: 584
score: 98.5099868774414
patch: boolean is CaMeL Simple CaMeL Operator ?
rank: 584
score: 98.26121012369792
patch: return false ; default ;
rank: 584
score: 98.07110595703125
patch: value . return true ;
rank: 585
score: 98.75444793701172
patch: return locals . length > 0 ;
rank: 585
score: 98.66824001736111
patch: return true ; return - ; true ;
rank: 585
score: 98.52252197265625
patch: return null ? true : true ;
rank: 585
score: 98.51144409179688
patch: return value ; return true ; return true ;
rank: 585
score: 98.50775146484375
patch: return value == false ;
rank: 585
score: 98.44736735026042
patch: return return - 1 ;
rank: 585
score: 98.07051595052083
patch: return false + true ;
rank: 586
score: 98.6678237915039
patch: return false ; ; ; * ;
rank: 586
score: 98.51101684570312
patch: return true ; return $STRING$ ; if true ;
rank: 586
score: 98.5074462890625
patch: state . return true ;
rank: 586
score: 98.44673374720982
patch: . if return true ; }
rank: 587
score: 98.83929998224431
patch: || is CaMeL Assignment CaMeL Op ? return true ;
rank: 587
score: 98.81245727539063
patch: is CaMeL Simple CaMeL Operator ) return true ;
rank: 587
score: 98.66764526367187
patch: return false ; ; ; ; return true ;
rank: 587
score: 98.52118682861328
patch: return 0 ? true : true ;
rank: 587
score: 98.51097412109375
patch: return true ; if return ; return true ;
rank: 587
score: 98.44580950055804
patch: return true ; else break ;
rank: 587
score: 98.25927734375
patch: return ; default ; ;
rank: 587
score: 98.06769409179688
patch: n = true ;
rank: 588
score: 98.8381680575284
patch: return is CaMeL Simple CaMeL Operator ( id ) ;
rank: 588
score: 98.66728210449219
patch: return false ; ; / / ;
rank: 588
score: 98.50579071044922
patch: return ( Node . true ) ;
rank: 588
score: 98.44383021763393
patch: . { return false ; }
rank: 588
score: 98.25826009114583
patch: super . return true ;
rank: 588
score: 98.06754557291667
patch: return true ^ true ;
rank: 589
score: 98.79591369628906
patch: return true ; default : / /
rank: 589
score: 98.73731825086806
patch: return false ; case Token . NAME :
rank: 589
score: 98.66704711914062
patch: return true ; true ; * return false ;
rank: 589
score: 98.51476287841797
patch: return value . close ( ) ;
rank: 589
score: 98.51084594726562
patch: return false ; if true ; if true ;
rank: 589
score: 98.50447845458984
patch: exception = true ; return true ;
rank: 589
score: 98.44178989955357
patch: { this . return true ;
rank: 589
score: 98.25721086774554
patch: this . ; return true ;
rank: 589
score: 98.06644897460937
patch: if true true ;
rank: 590
score: 98.82388916015626
patch: return boolean . size ( ) > 0 ;
rank: 590
score: 98.78619384765625
patch: case Token . REGEXP : { return true ;
rank: 590
score: 98.66692352294922
patch: return true ; true ; ; *
rank: 590
score: 98.5119857788086
patch: return $STRING$ ? false : false ;
rank: 590
score: 98.51008911132813
patch: return ; if return true ; if true ;
rank: 590
score: 98.50283813476562
patch: true . return ( true ) ;
rank: 590
score: 98.44065638950893
patch: return ; else return true ;
rank: 590
score: 98.06615193684895
patch: if ( ; else {
rank: 591
score: 98.66691080729167
patch: try { return true ; return true ;
rank: 591
score: 98.51003011067708
patch: return false ; ; return - 1 ;
rank: 591
score: 98.50257873535156
patch: log . case Token . FUNCTION :
rank: 591
score: 98.43989780970982
patch: { return true ; break ;
rank: 591
score: 98.06569417317708
patch: Tree ; return true ;
rank: 592
score: 98.72870635986328
patch: return locals . length == 0 ;
rank: 592
score: 98.66663275824652
patch: return false ; true ; ; true *
rank: 592
score: 98.51094818115234
patch: is CaMeL Simple CaMeL Operator -- ;
rank: 592
score: 98.50960286458333
patch: return ; return 1 ;
rank: 592
score: 98.50204467773438
patch: return ( n == 0 ) ;
rank: 592
score: 98.43954467773438
patch: { return false ; ;
rank: 592
score: 98.06569417317708
patch: int n = true ;
rank: 593
score: 98.50921630859375
patch: return false ; ; if return return true ;
rank: 593
score: 98.50160435267857
patch: return ( value . get CaMeL
rank: 593
score: 98.43950544084821
patch: . { if return true ;
rank: 593
score: 98.25520833333333
patch: loop : return true ;
rank: 593
score: 98.06416829427083
patch: reset ( true ) ;
rank: 594
score: 98.81982421875
patch: return $STRING$ . length ( ) == 0 ;
rank: 594
score: 98.77668762207031
patch: return ) ? true : true ;
rank: 594
score: 98.72407362196181
patch: return true ; default : / * /
rank: 594
score: 98.66598171657986
patch: return true ; return false ; ; /
rank: 594
score: 98.509765625
patch: return true ; default : }
rank: 594
score: 98.50892944335938
patch: return - true ;
rank: 594
score: 98.50095621744792
patch: return boolean CaMeL Value ( true ) ;
rank: 594
score: 98.06385294596355
patch: if true return false ;
rank: 595
score: 98.66582573784723
patch: if ( return true ; return true ;
rank: 595
score: 98.50900268554688
patch: is CaMeL Simple CaMeL Operator ? ;
rank: 595
score: 98.50872802734375
patch: return true ; return true ; break ; ;
rank: 595
score: 98.49831136067708
patch: return ) ; case Token . FUNCTION _
rank: 595
score: 98.43634905133929
patch: return true ; } else ;
rank: 595
score: 98.24192301432292
patch: return return true true ;
rank: 595
score: 98.06251017252605
patch: value . return false ;
rank: 596
score: 98.81748046875
patch: return value . size ( ) == 0 ;
rank: 596
score: 98.71775987413194
patch: return true ; case Token . PARAMETER :
rank: 596
score: 98.66566162109375
patch: return false ; ; return true ; true ;
rank: 596
score: 98.5085205078125
patch: return ; return return true ; if true ;
rank: 596
score: 98.49675750732422
patch: state = true ; return true ;
rank: 596
score: 98.43499755859375
patch: } if ( true ;
rank: 596
score: 98.05996704101562
patch: return false & true ;
rank: 597
score: 98.8161865234375
patch: return value . size ( ) != 0 ;
rank: 597
score: 98.76642456054688
patch: is CaMeL Simple CaMeL Operator ; return true ;
rank: 597
score: 98.66550699869792
patch: return false ; try { if true ;
rank: 597
score: 98.50811767578125
patch: return true ; return ; return * ;
rank: 597
score: 98.49240451388889
patch: if ( type == Token . FUNCTION )
rank: 597
score: 98.43375941685268
patch: { / * return true ;
rank: 597
score: 98.23817952473958
patch: try ; return true ;
rank: 597
score: 98.05967203776042
patch: Utils . return true ;
rank: 598
score: 98.71576605902777
patch: return true ; case Token . IN ?
rank: 598
score: 98.66491021050348
patch: return true ; true / return true ;
rank: 598
score: 98.50789642333984
patch: ( ( Node ) locals ) .
rank: 598
score: 98.50765555245536
patch: return true ; return count ;
rank: 598
score: 98.49070231119792
patch: return ( locals . get CaMeL Node (
rank: 598
score: 98.43367309570313
patch: { if true ;
rank: 598
score: 98.23744710286458
patch: http : return true ;
rank: 598
score: 98.05906168619792
patch: if true && true )
rank: 599
score: 98.71572536892361
patch: return true ; case Token . FUNCTION ;
rank: 599
score: 98.66438293457031
patch: return true ; true return $NUMBER$ ;
rank: 599
score: 98.507080078125
patch: result = false ; return false ;
rank: 599
score: 98.48944091796875
patch: return switch ( value ) {
rank: 599
score: 98.43317522321429
patch: break ; else return false ;
rank: 599
score: 98.23590087890625
patch: final return true ;
rank: 599
score: 98.0582275390625
patch: * ; return false ;
rank: 600
score: 98.8114990234375
patch: return is CaMeL Assignment CaMeL Op ? true ;
rank: 600
score: 98.66427176339286
patch: return true ; ; * /
rank: 600
score: 98.50679931640624
patch: return true ; return true ; return value ;
rank: 600
score: 98.43296595982143
patch: return false ; } finally {
rank: 600
score: 98.05800374348958
patch: if true return true ;
rank: 601
score: 98.75335693359375
patch: result = true ; case Token . FUNCTION :
rank: 601
score: 98.66410319010417
patch: return false ; return || return true ;
rank: 601
score: 98.50672743055556
patch: return $STRING$ ; ; if return true ;
rank: 601
score: 98.49545288085938
patch: if ( locals != null ) {
rank: 601
score: 98.48603651258681
patch: return ) ; case Token . IN :
rank: 601
score: 98.22921752929688
patch: return ; case ; ;
rank: 601
score: 98.05633544921875
patch: float true = true ;
rank: 602
score: 98.75320434570312
patch: case Token . ASSIGN : { return true ;
rank: 602
score: 98.71394856770833
patch: return true ; case Token . NO :
rank: 602
score: 98.66390228271484
patch: return null ; true return false ;
rank: 602
score: 98.50646294487848
patch: return true ; return return true ; ;
rank: 602
score: 98.49233572823661
patch: return false ; / * /
rank: 602
score: 98.48491753472223
patch: System . out . println ( ) ;
rank: 602
score: 98.43129185267857
patch: return return ! return true ;
rank: 602
score: 98.22888793945313
patch: this return true ;
rank: 602
score: 98.05598958333333
patch: double value = true ;
rank: 603
score: 98.794580078125
patch: is CaMeL Simple CaMeL Operator . return false ;
rank: 603
score: 98.66365814208984
patch: return false ; return null true ;
rank: 603
score: 98.5063720703125
patch: return false ; return true ; = true ;
rank: 603
score: 98.49230085100446
patch: else case Token . FUNCTION :
rank: 603
score: 98.42892020089286
patch: return * * return true ;
rank: 603
score: 98.0554911295573
patch: if ( true ) }
rank: 604
score: 98.66365559895833
patch: if return ! true ; return true ;
rank: 604
score: 98.5063232421875
patch: return ; return true ; return - 1 ;
rank: 604
score: 98.4908218383789
patch: return ( value == false ) ;
rank: 604
score: 98.47955322265625
patch: return Token . true ;
rank: 604
score: 98.42788260323661
patch: { if ( true ) {
rank: 604
score: 98.22249348958333
patch: synchronized ( true ; ;
rank: 604
score: 98.0537821451823
patch: return true == false ;
rank: 605
score: 98.66344604492187
patch: return return true ; ; ; return false ;
rank: 605
score: 98.50623779296875
patch: return true ; return false ; return $STRING$ ;
rank: 605
score: 98.47891235351562
patch: return locals == true ;
rank: 605
score: 98.2106221516927
patch: it . return true ;
rank: 605
score: 98.0533447265625
patch: loop * return true ;
rank: 606
score: 98.71088324652777
patch: return value ; case Token . IN :
rank: 606
score: 98.66328125
patch: return true ; true * * return true ;
rank: 606
score: 98.50613742404514
patch: return true ; true ; return $NUMBER$ ;
rank: 606
score: 98.48872375488281
patch: return false ; { return false ;
rank: 606
score: 98.47871398925781
patch: return ( false , true ) ;
rank: 606
score: 98.42708333333333
patch: . { return false ;
rank: 606
score: 98.20670572916667
patch: synchronized ( this ; ;
rank: 606
score: 98.05328369140625
patch: code = true ;
rank: 607
score: 98.78562622070312
patch: return Boolean . size ( ) > 0 ;
rank: 607
score: 98.6629867553711
patch: value return true ; return true ;
rank: 607
score: 98.50562744140625
patch: return true ; return true ; if ; {
rank: 607
score: 98.48800659179688
patch: if ( return ) return true ;
rank: 607
score: 98.47836642795139
patch: return is CaMeL Simple CaMeL Operator ? true
rank: 607
score: 98.42667933872768
patch: . return false ; true ;
rank: 607
score: 98.20519002278645
patch: false : return true ;
rank: 607
score: 98.0513407389323
patch: if true = true ;
rank: 608
score: 98.6627685546875
patch: return true ; true return false ; true ;
rank: 608
score: 98.5054931640625
patch: return false ; return ; ;
rank: 608
score: 98.47380719866071
patch: return return ( false ) ;
rank: 608
score: 98.20347086588542
patch: ? return true true ;
rank: 608
score: 98.05111694335938
patch: return true == true ;
rank: 609
score: 98.66206665039063
patch: return false ; ; true ; return true ;
rank: 609
score: 98.50547281901042
patch: return true ; return * ; break ;
rank: 609
score: 98.47122192382812
patch: return switch ( value . get CaMeL
rank: 609
score: 98.1986796061198
patch: Util . return true ;
rank: 609
score: 98.0499979654948
patch: long value = true ;
rank: 610
score: 98.66179741753473
patch: return true ; ; * return false ;
rank: 610
score: 98.50533447265624
patch: return ; return true ; return * true ;
rank: 610
score: 98.48419952392578
patch: case Token . FUNCTION : break ;
rank: 610
score: 98.42069789341518
patch: . return true ; break ;
rank: 611
score: 98.7039794921875
patch: return false ; case Token . TYPE :
rank: 611
score: 98.50516967773437
patch: return true ; return true ; return name ;
rank: 611
score: 98.46985541449652
patch: System . out . println ( $STRING$ +
rank: 611
score: 98.42032296316964
patch: { if return true ; ;
rank: 611
score: 98.19153442382813
patch: : return false ;
rank: 611
score: 98.0491455078125
patch: expr = true ;
rank: 612
score: 98.69902886284723
patch: return locals . equals ( $STRING$ ) ;
rank: 612
score: 98.66065673828125
patch: return true ; ; true if return false ;
rank: 612
score: 98.50503976004464
patch: return ; return - 1 ;
rank: 612
score: 98.46890258789062
patch: return ) ? true ;
rank: 612
score: 98.41974748883929
patch: return false ; true ; }
rank: 612
score: 98.18827311197917
patch: ? * return false ;
rank: 612
score: 98.04872639973958
patch: node . return true ;
rank: 613
score: 98.76986083984374
patch: return $STRING$ . length ( ) != 0 ;
rank: 613
score: 98.66004638671875
patch: return false ; true return true ; true ;
rank: 613
score: 98.50503200954861
patch: return true ; return ; int * /
rank: 613
score: 98.46884155273438
patch: return Node . true ;
rank: 613
score: 98.41842651367188
patch: return true ? false ;
rank: 613
score: 98.18477376302083
patch: return false return true ;
rank: 613
score: 98.04793294270833
patch: body ; return true ;
rank: 614
score: 98.65909152560764
patch: return true ; return 1 ; true ;
rank: 614
score: 98.50383843315973
patch: return - 1 ; if return true ;
rank: 614
score: 98.4679667154948
patch: return ( 1 ) ;
rank: 614
score: 98.41701834542411
patch: return ; * * * :
rank: 614
score: 98.17577107747395
patch: ? ; return true ;
rank: 614
score: 98.04252115885417
patch: expr . return true ;
rank: 615
score: 98.69646453857422
patch: return true ; case Token . FUNCTION
rank: 615
score: 98.65842982700893
patch: return false ; return $NUMBER$ ;
rank: 615
score: 98.50339762369792
patch: return ; = false ;
rank: 615
score: 98.46384102957589
patch: x = $STRING$ + value ;
rank: 615
score: 98.4630126953125
patch: return ( true || value . get CaMeL
rank: 615
score: 98.41684395926339
patch: return true ; true / ;
rank: 615
score: 98.17313639322917
patch: Set < Node > ;
rank: 615
score: 98.0384521484375
patch: ( ( Node ) ;
rank: 616
score: 98.767431640625
patch: case Token . FUNCTION : { return false ;
rank: 616
score: 98.7138900756836
patch: return true ; . return true ;
rank: 616
score: 98.65835910373264
patch: return false ; return - return true ;
rank: 616
score: 98.50325520833333
patch: return * return true ;
rank: 616
score: 98.4630126953125
patch: / / case Token . FUNCTION :
rank: 616
score: 98.46293131510417
patch: return ( value . get CaMeL Local CaMeL
rank: 616
score: 98.4149678548177
patch: throw new true ; }
rank: 616
score: 98.17286173502605
patch: if ; true * /
rank: 616
score: 98.03809611002605
patch: return true ; if ;
rank: 617
score: 98.69598388671875
patch: return true ; case Token . STATEMENT :
rank: 617
score: 98.6580810546875
patch: if return true ; else return true ;
rank: 617
score: 98.50295584542411
patch: return true ; return ; else
rank: 617
score: 98.46293131510417
patch: else { return false ;
rank: 617
score: 98.4615478515625
patch: switch ( value . type ) {
rank: 617
score: 98.41484723772321
patch: return return ; return false ;
rank: 617
score: 98.16785685221355
patch: ? else return true ;
rank: 617
score: 98.03739420572917
patch: return boolean CaMeL Value ;
rank: 618
score: 98.76443481445312
patch: if ( value != null ) return true ;
rank: 618
score: 98.69090270996094
patch: return ; case Token . IN :
rank: 618
score: 98.65713500976562
patch: return false ; try { return true ; }
rank: 618
score: 98.50271267361111
patch: return ; return true ; return ; {
rank: 618
score: 98.41414969308036
patch: { if ; true * /
rank: 619
score: 98.65706176757813
patch: return true ; ; return false ; true ;
rank: 619
score: 98.50181884765625
patch: true true ; if true ; return true ;
rank: 619
score: 98.46143341064453
patch: x = ( String ) value ;
rank: 619
score: 98.45874895368304
patch: return locals . return true ;
rank: 619
score: 98.41407993861607
patch: * / if return true ;
rank: 619
score: 98.0362548828125
patch: if true ? * /
rank: 620
score: 98.7593994140625
patch: return value . size ( ) > 1 ;
rank: 620
score: 98.70864529079861
patch: return Token . IN : return true ;
rank: 620
score: 98.65653076171876
patch: return true ; ; * ; return true ;
rank: 620
score: 98.50135633680556
patch: return true ; return n / 1 ;
rank: 620
score: 98.45865631103516
patch: consume ( Token . FUNCTION ) ;
rank: 620
score: 98.41299002511161
patch: return false ; else * /
rank: 620
score: 98.03495279947917
patch: return filter . true ;
rank: 621
score: 98.70518663194444
patch: case Node . IN : return true ;
rank: 621
score: 98.68901231553819
patch: return is CaMeL Simple CaMeL Operator null ;
rank: 621
score: 98.65521240234375
patch: return true ; return $STRING$ ; true ;
rank: 621
score: 98.45985412597656
patch: x = value ; return true ;
rank: 621
score: 98.45857747395833
patch: return locals . true ;
rank: 621
score: 98.03355712890625
patch: of return true ;
rank: 622
score: 98.68514675564236
patch: return locals ; case Token . FUNCTION :
rank: 622
score: 98.6548095703125
patch: return false ; true true { return false ;
rank: 622
score: 98.50072021484375
patch: return 1 ; return true ; return true ;
rank: 622
score: 98.4582748413086
patch: return ( Token . FUNCTION ) ;
rank: 622
score: 98.41091918945312
patch: } if return false ;
rank: 622
score: 98.15533447265625
patch: Object ; return true ;
rank: 623
score: 98.75015597873264
patch: return boolean CaMeL Value ( value ) ;
rank: 623
score: 98.7007064819336
patch: case Token . FUNCTION : / /
rank: 623
score: 98.50046793619792
patch: return true ; ; return false ; }
rank: 623
score: 98.45450592041016
patch: ( ( Token ) value ) .
rank: 623
score: 98.41045270647321
patch: { if ; break ; }
rank: 623
score: 98.0284423828125
patch: out . return false ;
rank: 624
score: 98.67900933159723
patch: return true ; case Token . IF :
rank: 624
score: 98.65437825520833
patch: return false ; true { return false ;
rank: 624
score: 98.50028076171876
patch: true ; if true ; if return true ;
rank: 624
score: 98.40985979352679
patch: { else { return false ;
rank: 624
score: 98.15406290690105
patch: . return true ; ;
rank: 624
score: 98.02717895507813
patch: cached = true ;
rank: 625
score: 98.65410020616319
patch: return true ; return 0 ; true ;
rank: 625
score: 98.499853515625
patch: return ; return ; = true + true ;
rank: 626
score: 98.69535997178819
patch: return Token . ASSIGN : return true ;
rank: 626
score: 98.6537353515625
patch: return false ; return true ; return null ;
rank: 626
score: 98.49969482421875
patch: return false ; return * /
rank: 626
score: 98.0247294108073
patch: return false ; } else
rank: 627
score: 98.73527018229167
patch: return locals == null ;
rank: 627
score: 98.69413926866319
patch: return < 0 ? true : true ;
rank: 627
score: 98.65344916449652
patch: return false ; return return return true ;
rank: 627
score: 98.4996826171875
patch: true ; return true ; while return true ;
rank: 627
score: 98.44934953962054
patch: case Token . OBJECTLIT :
rank: 627
score: 98.44330705915179
patch: return case Token . IN :
rank: 627
score: 98.40770612444196
patch: { else if return false ;
rank: 627
score: 98.14748128255208
patch: ? if ( ; ;
rank: 627
score: 98.0243631998698
patch: parser . return true ;
rank: 628
score: 98.67147064208984
patch: return locals . length != 0 ;
rank: 628
score: 98.65255301339286
patch: return false ; true ; *
rank: 628
score: 98.49945068359375
patch: return true ; return 0 ; return false ;
rank: 628
score: 98.40639822823661
patch: throw true ; return false ;
rank: 628
score: 98.14017740885417
patch: that . return false ;
rank: 629
score: 98.7322998046875
patch: return locals != null ;
rank: 629
score: 98.65227399553571
patch: return false ; ; true *
rank: 629
score: 98.49927978515625
patch: return true ; return * / return false ;
rank: 629
score: 98.44607543945312
patch: return is CaMeL Assignment CaMeL Op ;
rank: 629
score: 98.43822479248047
patch: return ( ( Token . FUNCTION :
rank: 629
score: 98.40628487723214
patch: this . return true ; }
rank: 629
score: 98.13814290364583
patch: node ; return true ;
rank: 630
score: 98.73027886284723
patch: return - 1 ? true : true ;
rank: 630
score: 98.65203857421875
patch: return null ; return true ; return false ;
rank: 630
score: 98.4989501953125
patch: return true ; return - $NUMBER$ + true ;
rank: 630
score: 98.44477081298828
patch: x = ( Node ) value ;
rank: 630
score: 98.4376220703125
patch: true . return true ;
rank: 630
score: 98.40536934988839
patch: { return return false ; }
rank: 630
score: 98.1370340983073
patch: ? ? return false ;
rank: 630
score: 98.0230000813802
patch: return Collections . true ;
rank: 631
score: 98.6702880859375
patch: return value ; case Token . ASSIGN :
rank: 631
score: 98.49876573350694
patch: return true ; return start ; break ;
rank: 631
score: 98.43501790364583
patch: return ( 0 ) ;
rank: 631
score: 98.40485491071429
patch: return return true ; true ;
rank: 632
score: 98.72690158420139
patch: return is CaMeL Empty ( value ) ;
rank: 632
score: 98.67805989583333
patch: return < 1 ? true : true ;
rank: 632
score: 98.65162489149306
patch: return true ; if return ! true ;
rank: 632
score: 98.4978271484375
patch: return true ; if return 1 + true ;
rank: 632
score: 98.44095284598214
patch: return false ; default : }
rank: 632
score: 98.4347915649414
patch: state = false ; return true ;
rank: 632
score: 98.40407017299107
patch: return return this . true ;
rank: 632
score: 98.13475545247395
patch: return false : true ;
rank: 632
score: 98.02200317382812
patch: int type = true ;
rank: 633
score: 98.65791829427083
patch: return false ; case Token . locals :
rank: 633
score: 98.65138753255208
patch: return false ; ; return ! true ;
rank: 633
score: 98.49603881835938
patch: return true ; return true ; return * ;
rank: 633
score: 98.43470764160156
patch: return ( n != null ) ;
rank: 633
score: 98.40395682198661
patch: { else * * * /
rank: 633
score: 98.1342061360677
patch: . . return true ;
rank: 633
score: 98.01871744791667
patch: List < Node > ;
rank: 634
score: 98.65648057725694
patch: return is CaMeL Assignment CaMeL Op ) ;
rank: 634
score: 98.65041097005208
patch: return true ; return - - true ;
rank: 634
score: 98.49586791992188
patch: return true ; return - 1 || true ;
rank: 634
score: 98.43293108258929
patch: result = true ; break ;
rank: 634
score: 98.4029541015625
patch: break ; * * * /
rank: 634
score: 98.13356526692708
patch: ? return return true ;
rank: 635
score: 98.71552870008681
patch: return value . contains ( value ) ;
rank: 635
score: 98.65545654296875
patch: return 1 ; case Token . FUNCTION :
rank: 635
score: 98.49558715820312
patch: return true ; return true ; return start ;
rank: 635
score: 98.43818882533482
patch: / case Token . FUNCTION :
rank: 635
score: 98.39968436104911
patch: return return || return true ;
rank: 635
score: 98.13057454427083
patch: return false : false ;
rank: 636
score: 98.66191864013672
patch: x = $STRING$ ; return true ;
rank: 636
score: 98.65483940972223
patch: return true ; case Token . SET :
rank: 636
score: 98.6500244140625
patch: return true ; return true ; throw false ;
rank: 636
score: 98.494775390625
patch: return true ; if true ; return 0 ;
rank: 636
score: 98.39923967633929
patch: } / * * * /
rank: 637
score: 98.70817057291667
patch: return Boolean . next ( value ) ;
rank: 637
score: 98.66165161132812
patch: return false ; : return true ;
rank: 637
score: 98.6486572265625
patch: return false ; ; finally { return false ;
rank: 637
score: 98.49373168945313
patch: return true ; if true ; return null ;
rank: 637
score: 98.4358901977539
patch: else case Token . ARRAYLIT :
rank: 637
score: 98.43156433105469
patch: return ( ( Token . FUNCTION )
rank: 637
score: 98.3980712890625
patch: . set ; return true ;
rank: 637
score: 98.12757364908855
patch: Set < Token > ;
rank: 638
score: 98.64879608154297
patch: return true ; . return false ;
rank: 638
score: 98.6484130859375
patch: return false ; return null ; return false ;
rank: 638
score: 98.49335588727679
patch: return true ; ; break ;
rank: 638
score: 98.4308369954427
patch: return false ? true ;
rank: 638
score: 98.39588419596355
patch: / * * * /
rank: 638
score: 98.12747192382812
patch: p ; return true ;
rank: 639
score: 98.66115993923611
patch: return is CaMeL Simple CaMeL Operator ? ;
rank: 639
score: 98.64837646484375
patch: return true ; return - 1 ; true ;
rank: 639
score: 98.64760335286458
patch: return false ; case Token . NOT :
rank: 639
score: 98.49332885742187
patch: return true ; return true ; return $NUMBER$ ;
rank: 639
score: 98.12481689453125
patch: ? return false ; ;
rank: 640
score: 98.65985785590277
patch: return false ; * / return true ;
rank: 640
score: 98.64830186631944
patch: return true ; true return ! true ;
rank: 640
score: 98.64727020263672
patch: return ( value == 0 ) ;
rank: 640
score: 98.49244384765625
patch: true ; if return true ; if true ;
rank: 640
score: 98.42823137555804
patch: { return ( true ) ;
rank: 640
score: 98.12178548177083
patch: boolean ; return false ;
rank: 640
score: 98.01136271158855
patch: body ; return false ;
rank: 641
score: 98.65624321831598
patch: return Token . FUNCTION : return false ;
rank: 641
score: 98.64801025390625
patch: return true ; true ; true
rank: 641
score: 98.49183349609375
patch: return false ; return 0 ; return true ;
rank: 641
score: 98.42969621930804
patch: / * / return false ;
rank: 641
score: 98.42706298828125
patch: return ( true ) ; default :
rank: 641
score: 98.01076049804688
patch: body return true ;
rank: 642
score: 98.64782036675348
patch: if return false ; return false ; ;
rank: 642
score: 98.491162109375
patch: return true ; return * / = true ;
rank: 642
score: 98.4260009765625
patch: break ; default :
rank: 642
score: 98.39248221261161
patch: / * * return false ;
rank: 642
score: 98.11629638671874
patch: throw new true ;
rank: 643
score: 98.65458848741319
patch: return true ; default : return ) ;
rank: 643
score: 98.64667426215277
patch: return false ; return false ; ; true
rank: 643
score: 98.64459228515625
patch: return locals . next ( ) ;
rank: 643
score: 98.48903198242188
patch: return true ; true ; return - 1 ;
rank: 643
score: 98.39188058035714
patch: } if return ! true ;
rank: 643
score: 98.1156005859375
patch: return false ; ; }
rank: 643
score: 98.00693969726562
patch: node = true ;
rank: 644
score: 98.64655151367188
patch: return false ; return true ; true ; true
rank: 644
score: 98.64398193359375
patch: return $NUMBER$ ; case Token . FUNCTION :
rank: 644
score: 98.48848266601563
patch: return ; return false ; if return true ;
rank: 644
score: 98.41717529296875
patch: ret = true ; break ;
rank: 644
score: 98.41553606305804
patch: return case Token . REGEXP :
rank: 644
score: 98.39165387834821
patch: } else * * * /
rank: 644
score: 98.00579833984375
patch: Expr true = true ;
rank: 645
score: 98.64641655815973
patch: return true ; return return ! true ;
rank: 645
score: 98.64116668701172
patch: return ) ? false : true ;
rank: 645
score: 98.48795166015626
patch: return true ; ; / ; return true ;
rank: 645
score: 98.41529192243304
patch: is CaMeL Simple CaMeL Operator .
rank: 645
score: 98.4123764038086
patch: return ( ( value . get CaMeL
rank: 645
score: 98.39149693080357
patch: . return true ; return ;
rank: 645
score: 98.00443522135417
patch: return Type . true ;
rank: 646
score: 98.64865451388889
patch: case Node . ASSIGN : return true ;
rank: 646
score: 98.64553833007812
patch: return true ; true ? if return false ;
rank: 646
score: 98.48695068359375
patch: return true ; ; return ; + true ;
rank: 646
score: 98.41209411621094
patch: return ( true , false ) ;
rank: 646
score: 98.39100864955357
patch: break ; else return true ;
rank: 646
score: 98.11483764648438
patch: return false return false ;
rank: 647
score: 98.6981201171875
patch: return is CaMeL Declaration ( value ) ;
rank: 647
score: 98.64633517795139
patch: return Token . REGEXP : return true ;
rank: 647
score: 98.6453369140625
patch: return return false ; ; ; return true ;
rank: 647
score: 98.63881429036458
patch: return locals . equals ( name ) ;
rank: 647
score: 98.4869384765625
patch: return false ; ; ; if return true ;
rank: 647
score: 98.39037214006696
patch: { true * * * /
rank: 647
score: 98.11383056640625
patch: AOM . return true ;
rank: 647
score: 98.0034891764323
patch: double true = false ;
rank: 648
score: 98.64451768663194
patch: return false ; true true return false ;
rank: 648
score: 98.64134216308594
patch: return new ? true : false ;
rank: 648
score: 98.63860405815973
patch: return true ; case Token . MIN :
rank: 648
score: 98.48668212890625
patch: return true ; return * ; = true ;
rank: 648
score: 98.40534210205078
patch: res = true ; return true ;
rank: 648
score: 98.39841134207589
patch: else case Token . REGEXP :
rank: 648
score: 98.38775634765625
patch: . if return return true ;
rank: 648
score: 98.10934448242188
patch: / * return ;
rank: 648
score: 98.00319417317708
patch: if ( value . ;
rank: 649
score: 98.64422607421875
patch: return true ; true / ; return false ;
rank: 649
score: 98.63798014322917
patch: return true ; case Node . ASSIGN :
rank: 649
score: 98.48605346679688
patch: return true ; ; if true = true ;
rank: 649
score: 98.39724731445312
patch: return return return true ;
rank: 649
score: 98.39717407226563
patch: result = false ;
rank: 649
score: 98.38748168945312
patch: return ; / * /
rank: 649
score: 98.1084493001302
patch: add ; return true ;
rank: 649
score: 98.00240071614583
patch: for ( ; true )
rank: 650
score: 98.63749186197917
patch: return false ; case Token . Definition :
rank: 650
score: 98.63687896728516
patch: is CaMeL Simple CaMeL Operator ( )
rank: 650
score: 98.4857177734375
patch: return true ; return true ; break ; }
rank: 650
score: 98.39560953776042
patch: found . return true ;
rank: 650
score: 98.38701520647321
patch: return ; ( return true ;
rank: 650
score: 98.10810546875
patch: return ; ; ;
rank: 650
score: 98.00187174479167
patch: if ( false true )
rank: 651
score: 98.64359741210937
patch: return false ; true ; true return true ;
rank: 651
score: 98.38574981689453
patch: return ( true ) ; break ;
rank: 651
score: 98.38318743024554
patch: * * * ? * /
rank: 651
score: 98.10797119140625
patch: synchronized ( this )
rank: 651
score: 98.00140380859375
patch: Object value = true ;
rank: 652
score: 98.68857828776042
patch: return is CaMeL Interface ( value ) ;
rank: 652
score: 98.48455810546875
patch: return true ; return 0 ; if true ;
rank: 652
score: 98.38441685267857
patch: return ( locals . ) ;
rank: 652
score: 98.38303048270089
patch: * * * return false ;
rank: 652
score: 98.00059000651042
patch: factory . return true ;
rank: 653
score: 98.64297146267361
patch: return true ; return false ; try {
rank: 653
score: 98.63263617621527
patch: return value ; case Token . REGEXP :
rank: 653
score: 98.48372192382813
patch: return ; / / * / return true ;
rank: 653
score: 98.38275146484375
patch: { else if ; * /
rank: 653
score: 98.37818254743304
patch: return ( boolean ) true ;
rank: 653
score: 98.10214233398438
patch: check ; return true ;
rank: 653
score: 98.00050862630208
patch: return true * true ;
rank: 654
score: 98.64246826171875
patch: return false ; ; * ; return false ;
rank: 654
score: 98.63114166259766
patch: case Token . IN : / /
rank: 654
score: 98.4831787109375
patch: return false ; return true ; return 0 ;
rank: 654
score: 98.3817138671875
patch: return return ! return false ;
rank: 654
score: 98.38169352213542
patch: case Token . ASSIGN :
rank: 654
score: 98.10103352864583
patch: load ; return true ;
rank: 654
score: 98.0000712076823
patch: parameters ; return true ;
rank: 655
score: 98.64169650607639
patch: return true ; true / * ; /
rank: 655
score: 98.63119845920139
patch: return $STRING$ ; case Token . IN :
rank: 655
score: 98.62818060980902
patch: return true ; static : return true ;
rank: 655
score: 98.48276192801339
patch: return false ; return name ;
rank: 655
score: 98.38106863839286
patch: { if return false ; }
rank: 655
score: 98.37448120117188
patch: return ( false ) ? true ;
rank: 655
score: 98.10045166015625
patch: return ( true ;
rank: 655
score: 97.99493408203125
patch: Boolean true = true ;
rank: 656
score: 98.64159545898437
patch: return true ; ; finally { return true ;
rank: 656
score: 98.48255004882813
patch: return true ; return * / if true ;
rank: 656
score: 98.37357875279018
patch: throw new Throwable ( ) {
rank: 656
score: 98.09659830729167
patch: loop ; return true ;
rank: 657
score: 98.64143202039931
patch: return false ; true : return true ;
rank: 657
score: 98.48214111328124
patch: return true ; ; return - - 1 ;
rank: 657
score: 98.37961251395089
patch: return return true ; break ;
rank: 657
score: 98.37323760986328
patch: return ( value == true ) ;
rank: 657
score: 98.36978149414062
patch: return value != false ;
rank: 657
score: 98.09482828776042
patch: : * return true ;
rank: 657
score: 97.99245198567708
patch: if true = false ;
rank: 658
score: 98.68071153428819
patch: return value . equals ( locals ) ;
rank: 658
score: 98.64137573242188
patch: return false ; return false ; true ; ;
rank: 658
score: 98.48173217773437
patch: return true ; return true ; } return ;
rank: 658
score: 98.37899344308036
patch: . / * * * /
rank: 658
score: 98.372802734375
patch: exception = false ; return true ;
rank: 658
score: 98.09366861979167
patch: if ( ! ; ;
rank: 658
score: 97.9922383626302
patch: Enumeration < Node > ;
rank: 659
score: 98.64088745117188
patch: return false ; true else if return false ;
rank: 659
score: 98.62641737196181
patch: case Token . EMPTY : return true ;
rank: 659
score: 98.48135375976562
patch: return true ; ; if ; = 0 ;
rank: 659
score: 98.37887137276786
patch: { if ; / * /
rank: 659
score: 98.36447579520089
patch: case Token . FUNCTION : }
rank: 659
score: 98.0931905110677
patch: ? if ( ! ;
rank: 659
score: 97.99039713541667
patch: int ; return true ;
rank: 660
score: 98.62556966145833
patch: case Token . FUNCTION : / / /
rank: 660
score: 98.48046003069196
patch: return n ; = true ;
rank: 660
score: 98.37876674107143
patch: return return false ; break ;
rank: 660
score: 98.3706283569336
patch: return ( true ) || true ;
rank: 660
score: 98.36356608072917
patch: return ) return true ;
rank: 660
score: 97.98504638671875
patch: throw true ;
rank: 661
score: 98.64074096679687
patch: return false ; else { if return true ;
rank: 661
score: 98.48028564453125
patch: return ; return ; return ; if true ;
rank: 661
score: 98.36962127685547
patch: return ( false , false ) ;
rank: 661
score: 98.3595682779948
patch: result . return true ;
rank: 661
score: 97.9848124186198
patch: |= Boolean . TRUE ;
rank: 662
score: 98.61982727050781
patch: return false ; default : / /
rank: 662
score: 98.60991559709821
patch: return true ; default : else
rank: 662
score: 98.37828572591145
patch: } return return true ;
rank: 662
score: 98.36660766601562
patch: return ( n > 0 ) ;
rank: 662
score: 97.9843241373698
patch: for true = true ;
rank: 663
score: 98.64002821180556
patch: return true ; return && return true ;
rank: 663
score: 98.4795654296875
patch: return true ; return true ; println true ;
rank: 663
score: 98.37816510881696
patch: return return ! true ; }
rank: 663
score: 98.35166713169643
patch: / case Token . REGEXP :
rank: 663
score: 98.0890401204427
patch: boolean ; if ( ;
rank: 663
score: 97.98377482096355
patch: synchronized ( true true )
rank: 664
score: 98.63978407118056
patch: return true ; finally { return false ;
rank: 664
score: 98.60610525948661
patch: return true ; case FUNCTION :
rank: 664
score: 98.47952880859376
patch: return true ; ; if return - true ;
rank: 664
score: 98.37784249441964
patch: { if ( true true ;
rank: 664
score: 98.36576625279018
patch: return ( return true ) ;
rank: 664
score: 97.982666015625
patch: success = true ;
rank: 665
score: 98.6373291015625
patch: return true ; return null return true ;
rank: 665
score: 98.6148681640625
patch: case Token . REGEXP : / /
rank: 665
score: 98.47949829101563
patch: return true ; return ; return * true ;
rank: 665
score: 98.37677001953125
patch: break ; return false ; }
rank: 665
score: 98.36510358537946
patch: state = Token . ASSIGN ;
rank: 665
score: 98.33921595982143
patch: else case Token . IN :
rank: 665
score: 97.98000081380208
patch: Type true = true ;
rank: 666
score: 98.63707624162946
patch: return false ; true * *
rank: 666
score: 98.47860717773438
patch: return true ; return - 1 : true ;
rank: 666
score: 98.33598981584821
patch: return ? true : true ;
rank: 666
score: 97.97775268554688
patch: long true = true ;
rank: 667
score: 98.66388617621527
patch: case Node . FUNCTION : return false ;
rank: 667
score: 98.63526746961806
patch: / * return false ; return true ;
rank: 667
score: 98.61337619357639
patch: return < true ? true : true ;
rank: 667
score: 98.60069274902344
patch: return ( value == $STRING$ ) ;
rank: 667
score: 98.47824096679688
patch: return true ; return - - - 1 ;
rank: 667
score: 98.37374877929688
patch: return true ; false ;
rank: 667
score: 98.36055501302083
patch: return ( $NUMBER$ ) ;
rank: 667
score: 98.33305140904018
patch: else switch ( value ) {
rank: 667
score: 98.08334350585938
patch: return ; case ; :
rank: 667
score: 97.9772237141927
patch: Tree true = false ;
rank: 668
score: 98.63383653428819
patch: return return - true ; return true ;
rank: 668
score: 98.61304389105902
patch: return < false ? true : true ;
rank: 668
score: 98.47730712890625
patch: return - 1 ; break ; return true ;
rank: 668
score: 98.35675048828125
patch: throw new Error ( $STRING$ + value
rank: 668
score: 98.3298848470052
patch: x = return true ;
rank: 668
score: 98.07711791992188
patch: ( ; return true ;
rank: 668
score: 97.97707112630208
patch: if ( ! success )
rank: 669
score: 98.63334825303819
patch: return true ; ; ++ return true ;
rank: 669
score: 98.59519958496094
patch: return ; case Token . ASSIGN :
rank: 669
score: 98.47631225585937
patch: return * ; return true ; return true ;
rank: 669
score: 98.35663604736328
patch: return value != null ? true ;
rank: 669
score: 98.0770263671875
patch: if ( ; ; ;
rank: 669
score: 97.97660319010417
patch: Class type = true ;
rank: 670
score: 98.66132269965277
patch: return ! value . run ( ) ;
rank: 670
score: 98.63307698567708
patch: return false ; true true
rank: 670
score: 98.60792371961806
patch: / * is CaMeL Simple CaMeL Operator ?
rank: 670
score: 98.47564086914062
patch: return true + true ; if return true ;
rank: 670
score: 98.35139973958333
patch: false . return true ;
rank: 670
score: 98.32369995117188
patch: return ) return false ;
rank: 670
score: 98.07545166015625
patch: || return true ;
rank: 670
score: 97.9757588704427
patch: Obj true = true ;
rank: 671
score: 98.63232421875
patch: if true return true ; return false ;
rank: 671
score: 98.59077453613281
patch: return true ; default / * /
rank: 671
score: 98.4734619140625
patch: return true ; return - 1 * true ;
rank: 671
score: 98.36805943080357
patch: return false ; break ; else
rank: 671
score: 98.35093688964844
patch: return ( false || true ) ;
rank: 671
score: 97.97340901692708
patch: short true = false ;
rank: 672
score: 98.63041856553819
patch: return 0 ; return true ; true ;
rank: 672
score: 98.59015655517578
patch: return true ; ? return false ;
rank: 672
score: 98.4728515625
patch: return true ; return false ; return 1 ;
rank: 672
score: 98.34676361083984
patch: return ( n == 1 ) ;
rank: 672
score: 98.31931849888393
patch: is CaMeL Assignment CaMeL Op ?
rank: 672
score: 98.07239786783855
patch: init ; return true ;
rank: 672
score: 97.97272338867188
patch: if true * /
rank: 673
score: 98.5894775390625
patch: return false ; ? return true ;
rank: 673
score: 98.471240234375
patch: return true ; ; if return true ; ;
rank: 673
score: 98.34512329101562
patch: exception . return true ;
rank: 673
score: 97.97208658854167
patch: long type = true ;
rank: 674
score: 98.62832980685764
patch: return true ; ; true ; true *
rank: 674
score: 98.36684744698661
patch: return true ; break ; ;
rank: 674
score: 98.31499481201172
patch: return value ;
rank: 674
score: 98.0711161295573
patch: return ; default : {
rank: 674
score: 97.97144775390625
patch: so return true ;
rank: 675
score: 98.628173828125
patch: return true ; return $NUMBER$ ; true ;
rank: 675
score: 98.6026102701823
patch: return true ; / /
rank: 675
score: 98.47018432617188
patch: return count ; if true ; return true ;
rank: 675
score: 98.3663818359375
patch: throw return false ;
rank: 675
score: 98.34162902832031
patch: return ( 1 == value ) ;
rank: 675
score: 98.31386893136161
patch: x = true ; break ;
rank: 675
score: 98.0710957845052
patch: / ; return false ;
rank: 675
score: 97.96499633789062
patch: fail true = true ;
rank: 676
score: 98.62815348307292
patch: return $STRING$ ; return true ; true ;
rank: 676
score: 98.46982421875
patch: return false ; ; return ; if true ;
rank: 676
score: 98.34152221679688
patch: return true ; break ; default :
rank: 676
score: 98.31230817522321
patch: is CaMeL Empty = true ;
rank: 676
score: 98.06404622395833
patch: synchronized ( true ; )
rank: 676
score: 97.96434529622395
patch: return is CaMeL Empty ;
rank: 677
score: 98.62791612413194
patch: return return false ; return false ; ;
rank: 677
score: 98.60022735595703
patch: case Token . IN : break ;
rank: 677
score: 98.57416534423828
patch: return locals . length > 1 ;
rank: 677
score: 98.46982421875
patch: return true ; true ; if true * /
rank: 677
score: 98.36553083147321
patch: return return $NUMBER$ == true ;
rank: 677
score: 98.31201171875
patch: return ! ( true ) ;
rank: 677
score: 98.06256103515625
patch: String ; return true ;
rank: 678
score: 98.62676323784723
patch: return true ; return true ; true :
rank: 678
score: 98.46979631696429
patch: return - 1 ; break ;
rank: 678
score: 98.36498151506696
patch: } if ; * * /
rank: 678
score: 98.33643798828125
patch: exception = true ;
rank: 678
score: 98.31138392857143
patch: return $STRING$ ? return true ;
rank: 678
score: 98.0618408203125
patch: synchronized ( ; )
rank: 678
score: 97.96324666341145
patch: if ( ; break ;
rank: 679
score: 98.63766140407986
patch: return is CaMeL Constructor ( value ) ;
rank: 679
score: 98.62627495659723
patch: return true ; true / * true /
rank: 679
score: 98.57069396972656
patch: return ) ? false : false ;
rank: 679
score: 98.46810477120536
patch: return true ; if ; {
rank: 679
score: 98.36089215959821
patch: { return false ; } else
rank: 679
score: 98.06016031901042
patch: return true ; continue ;
rank: 680
score: 98.62540011935764
patch: boolean true return true ; return true ;
rank: 680
score: 98.59278106689453
patch: return ) * / return true ;
rank: 680
score: 98.56404113769531
patch: return locals . length == 1 ;
rank: 680
score: 98.466552734375
patch: return $NUMBER$ ; return false ;
rank: 680
score: 98.35984293619792
patch: ( return true ) ;
rank: 680
score: 98.33504813058036
patch: switch ( value . get CaMeL
rank: 680
score: 98.30943952287946
patch: return true : return true ;
rank: 680
score: 97.9619140625
patch: String value = true ;
rank: 681
score: 98.62289767795139
patch: boolean true return true ; return false ;
rank: 681
score: 98.56369018554688
patch: return ) ? true : false ;
rank: 681
score: 98.46521606445313
patch: return ; if true ; if return true ;
rank: 681
score: 98.3558349609375
patch: System . out . println ;
rank: 681
score: 98.30926513671875
patch: / case Token . IN :
rank: 681
score: 98.0596415201823
patch: return false ; } ;
rank: 681
score: 97.95748901367188
patch: return ! true ; ;
rank: 682
score: 98.46428833007812
patch: return true ; ; if true / * /
rank: 682
score: 98.0575663248698
patch: return true ; / ;
rank: 683
score: 98.62164984809027
patch: return true ; ; return ) true ;
rank: 683
score: 98.56240844726562
patch: return true ; default : else {
rank: 683
score: 98.46322021484374
patch: return true ; return true ; ; true ;
rank: 683
score: 98.35479736328125
patch: { if return ! true ;
rank: 683
score: 98.33074951171875
patch: return locals != null ? true ;
rank: 683
score: 98.05750274658203
patch: return ; }
rank: 683
score: 97.9560038248698
patch: validate ( true ) ;
rank: 684
score: 98.62102593315973
patch: throw false ; return true ; true ;
rank: 684
score: 98.56230163574219
patch: return true ; default ( ) ;
rank: 684
score: 98.35463169642857
patch: return ; return false ; }
rank: 684
score: 98.33000183105469
patch: return ( value instanceof Node ) ;
rank: 685
score: 98.62982855902777
patch: return $STRING$ . contains ( value ) ;
rank: 685
score: 98.62073432074652
patch: return true ; true return true ; true
rank: 685
score: 98.56172180175781
patch: return false ; case Token . FUNCTION
rank: 685
score: 98.4623046875
patch: return false ; return true ; return ; {
rank: 685
score: 98.32864815848214
patch: } return ( true ) ;
rank: 685
score: 98.30153111049107
patch: is CaMeL Simple CaMeL Operator :
rank: 685
score: 98.0558369954427
patch: = ; return true ;
rank: 685
score: 97.95133056640626
patch: resolved = true ;
rank: 686
score: 98.62911987304688
patch: / / return true ;
rank: 686
score: 98.62035454644098
patch: return false ; return false ; true /
rank: 686
score: 98.46159057617187
patch: return true ; return true ; / * /
rank: 686
score: 98.35359409877232
patch: return null ; true * /
rank: 686
score: 98.32472737630208
patch: return locals != false ;
rank: 686
score: 98.29988316127232
patch: switch ( value ) { }
rank: 686
score: 98.05350748697917
patch: return return false true ;
rank: 687
score: 98.62017822265625
patch: return true ; return true ; ; ?
rank: 687
score: 98.57754516601562
patch: return true ; : return false ;
rank: 687
score: 98.46094970703125
patch: return true ; return ; return true ; }
rank: 687
score: 98.35201590401786
patch: / * * true * /
rank: 687
score: 98.2987060546875
patch: return false : return true ;
rank: 687
score: 97.94398193359375
patch: synchronized ( true ;
rank: 688
score: 98.62869262695312
patch: return is CaMeL Empty ( ) ;
rank: 688
score: 98.4603759765625
patch: return true ; return name ; if true ;
rank: 688
score: 98.35196358816964
patch: return false ; } else ;
rank: 688
score: 98.32276000976563
patch: state = true ;
rank: 688
score: 98.29713657924107
patch: if ( locals == null )
rank: 688
score: 98.04838053385417
patch: ? return true ; }
rank: 688
score: 97.93716430664062
patch: ? * /
rank: 689
score: 98.62565782335069
patch: case Type . FUNCTION : return true ;
rank: 689
score: 98.61982945033482
patch: return true ; true else {
rank: 689
score: 98.5719706217448
patch: return true : true ;
rank: 689
score: 98.4600341796875
patch: return true ; return - $NUMBER$ - true ;
rank: 689
score: 98.32020568847656
patch: return ( false ) ; default :
rank: 689
score: 98.04750569661458
patch: set ; return true ;
rank: 689
score: 97.9366455078125
patch: if ( ; else
rank: 690
score: 98.61867850167411
patch: return false ; true true ;
rank: 690
score: 98.4600341796875
patch: return true ; ; if ; if true ;
rank: 690
score: 98.34945242745536
patch: { return false ; } ;
rank: 690
score: 98.29484340122768
patch: is CaMeL Simple CaMeL Operator ;
rank: 690
score: 98.04746500651042
patch: ? : return true ;
rank: 690
score: 97.93414306640625
patch: = true ;
rank: 691
score: 98.61678059895833
patch: is CaMeL Simple CaMeL Operator ( ) ;
rank: 691
score: 98.57078552246094
patch: default = true ; return true ;
rank: 691
score: 98.54632568359375
patch: return ? false : true ;
rank: 691
score: 98.45991821289063
patch: return true ; ; if ; return 0 ;
rank: 691
score: 98.34851946149554
patch: * * * * true /
rank: 691
score: 98.31890869140625
patch: return ) || true ;
rank: 691
score: 98.29353550502232
patch: if ( ) return true ;
rank: 691
score: 97.92974243164062
patch: if ( return ;
rank: 692
score: 98.61752658420139
patch: return false ; return false ; ; /
rank: 692
score: 98.45977783203125
patch: return * return - 1 ; return true ;
rank: 692
score: 98.34796142578125
patch: return true ; for true ;
rank: 692
score: 98.28912353515625
patch: return true ; / *
rank: 692
score: 97.92177734375
patch: switch ( true )
rank: 693
score: 98.45924682617188
patch: return false ; ; if true ; break ;
rank: 693
score: 98.347900390625
patch: if ( true ; * /
rank: 693
score: 98.31526692708333
patch: return ( null ) ;
rank: 693
score: 98.28617350260417
patch: return value == null ;
rank: 693
score: 98.04311116536458
patch: null : return true ;
rank: 694
score: 98.61385091145833
patch: return true ; return true ; value ;
rank: 694
score: 98.45906982421874
patch: return true ; return ; return - 1 ;
rank: 694
score: 98.34727260044643
patch: this . true return true ;
rank: 694
score: 98.04306030273438
patch: Collections . sort ( ;
rank: 695
score: 98.61371527777777
patch: return true ; else return true ; ;
rank: 695
score: 98.5624008178711
patch: return $NUMBER$ ? true : true ;
rank: 695
score: 98.45891723632812
patch: return ; return 0 ; if return true ;
rank: 695
score: 98.34559122721355
patch: { if ; break ;
rank: 695
score: 98.28079223632812
patch: result . return false ;
rank: 695
score: 98.04292805989583
patch: final ; return false ;
rank: 695
score: 97.90618896484375
patch: t = true ;
rank: 696
score: 98.61229112413194
patch: return true ; true ; / * /
rank: 696
score: 98.60317654079861
patch: case Token . ARRAYLIT : break ;
rank: 696
score: 98.34445626395089
patch: if ; return true ; }
rank: 696
score: 98.27930559430804
patch: is CaMeL Simple CaMeL Operator &&
rank: 696
score: 98.04252115885417
patch: . ; return true ;
rank: 696
score: 97.90577697753906
patch: return FALSE ;
rank: 697
score: 98.6107177734375
patch: return true ; else {
rank: 697
score: 98.60265435112848
patch: if ( false ) { return true ;
rank: 697
score: 98.5577621459961
patch: return ( true , locals ) ;
rank: 697
score: 98.45730154854911
patch: return ; return ; return ;
rank: 697
score: 98.34154256184895
patch: return false ; while ;
rank: 697
score: 98.27796282087054
patch: return ( true ) ; }
rank: 697
score: 98.04239908854167
patch: Iterator < Node > ;
rank: 698
score: 98.6107177734375
patch: return true ; return null ; ; ;
rank: 698
score: 98.55718231201172
patch: return ( true , value ) ;
rank: 698
score: 98.45643920898438
patch: return null ; return true ; if true ;
rank: 698
score: 98.34084647042411
patch: } else { if true ;
rank: 698
score: 98.04236450195313
patch: this . return ;
rank: 698
score: 97.89268798828125
patch: false = true ;
rank: 699
score: 98.61066545758929
patch: return true ; ; * ;
rank: 699
score: 98.30992126464844
patch: return true ; default : / :
rank: 699
score: 97.888818359375
patch: will return false ;
rank: 700
score: 98.61015489366319
patch: return true ; return true ; else {
rank: 700
score: 98.45358276367188
patch: return false ; return - 1 ; break ;
rank: 700
score: 98.33991350446429
patch: * * * / * /
rank: 700
score: 98.30940755208333
patch: e . return true ;
rank: 700
score: 98.04018147786458
patch: synchronized ; return true ;
rank: 700
score: 97.88591003417969
patch: return success ;
rank: 701
score: 98.60883246527777
patch: return true ; true ; case true :
rank: 701
score: 98.45183454241071
patch: true true ; return false ;
rank: 701
score: 98.33957345145089
patch: return return && true ; }
rank: 701
score: 98.30813598632812
patch: return value . get CaMeL Local CaMeL
rank: 701
score: 98.26259068080357
patch: is CaMeL Empty = false ;
rank: 701
score: 98.0385233561198
patch: . return true true ;
rank: 701
score: 97.885302734375
patch: return value . ;
rank: 702
score: 98.60816107855902
patch: return false ; true / return true ;
rank: 702
score: 98.52558135986328
patch: return true ; default : finally {
rank: 702
score: 98.4509033203125
patch: true true ; return true ; if true ;
rank: 702
score: 98.33914620535714
patch: return true ; true false ;
rank: 702
score: 98.3068339029948
patch: return locals == false ;
rank: 702
score: 98.25899251302083
patch: return is CaMeL Local ;
rank: 702
score: 98.03713989257812
patch: if ; true ; ;
rank: 703
score: 98.60751681857639
patch: return true ; return - $STRING$ ; ;
rank: 703
score: 98.54345703125
patch: result = $STRING$ ; return true ;
rank: 703
score: 98.44962158203126
patch: return true ; ; if true - * /
rank: 703
score: 98.33614095052083
patch: return false ? false ;
rank: 703
score: 98.30572509765625
patch: throw new Runtime CaMeL Exception ( $STRING$
rank: 703
score: 98.25801304408482
patch: case Token . REGEXP : }
rank: 703
score: 97.87888793945312
patch: body return false ;
rank: 704
score: 98.60744222005208
patch: return true ; ; /
rank: 704
score: 98.58833312988281
patch: return 1 ? true : true ;
rank: 704
score: 98.53848266601562
patch: return false ; . return true ;
rank: 704
score: 98.52437591552734
patch: return ( value != 0 ) ;
rank: 704
score: 98.44569614955357
patch: return true ; true ; else
rank: 704
score: 98.30532836914062
patch: ret = false ; return true ;
rank: 704
score: 98.25477818080357
patch: return ( return false ) ;
rank: 704
score: 97.87180786132812
patch: so return false ;
rank: 705
score: 98.52320098876953
patch: return false ; . return false ;
rank: 705
score: 98.33472696940105
patch: { return return false ;
rank: 705
score: 97.87032470703124
patch: return false false ;
rank: 706
score: 98.60601806640625
patch: return true ; true ? if true {
rank: 706
score: 98.5371322631836
patch: return ( true . true ) ;
rank: 706
score: 98.51973724365234
patch: return true ; default : * /
rank: 706
score: 98.44304547991071
patch: return true ; return ? ;
rank: 706
score: 98.3341573079427
patch: . return return false ;
rank: 706
score: 98.30393981933594
patch: return ( n >= 0 ) ;
rank: 706
score: 98.0352274576823
patch: that ; return true ;
rank: 706
score: 97.86663208007812
patch: will return true ;
rank: 707
score: 98.60550944010417
patch: return null ; return false ; true ;
rank: 707
score: 98.44113159179688
patch: return ; {
rank: 707
score: 98.33375040690105
patch: return ; * * ;
rank: 707
score: 98.30183410644531
patch: retval = true ; return true ;
rank: 707
score: 98.24766322544643
patch: return false ( false ) ;
rank: 707
score: 98.03309122721355
patch: target ; return true ;
rank: 707
score: 97.8646484375
patch: ret = false ;
rank: 708
score: 98.60477023654514
patch: return true ; true / * true {
rank: 708
score: 98.44074358258929
patch: return true ; ; / ;
rank: 708
score: 98.33223470052083
patch: ( return false ) ;
rank: 708
score: 98.29783412388393
patch: { return ( false ) ;
rank: 708
score: 98.24759347098214
patch: throw case Token . FUNCTION :
rank: 708
score: 97.8552001953125
patch: super . true ;
rank: 709
score: 98.60418023003473
patch: return false ; true / * ; /
rank: 709
score: 98.5354512532552
patch: return Token . ASSIGN ;
rank: 709
score: 98.43947056361607
patch: return false ; return value ;
rank: 709
score: 98.295654296875
patch: System . finally = true ;
rank: 709
score: 98.2462158203125
patch: return - 1 . false ;
rank: 709
score: 98.03118896484375
patch: if ( ; return ;
rank: 709
score: 97.85347900390624
patch: loop return true ;
rank: 710
score: 98.60413275824652
patch: boolean return ( true ; return true ;
rank: 710
score: 98.436279296875
patch: return 1 ;
rank: 710
score: 98.29493931361607
patch: state = Token . FUNCTION ;
rank: 710
score: 98.24463907877605
patch: return value != true ;
rank: 710
score: 97.85131225585937
patch: return TRUE ; ;
rank: 711
score: 98.603515625
patch: return true ; ; / return true ;
rank: 711
score: 98.32454427083333
patch: if ; * * /
rank: 711
score: 98.29248046875
patch: return } return true ;
rank: 711
score: 98.02694702148438
patch: return ; != null ;
rank: 712
score: 98.28944614955357
patch: return case Token . FUNCTION _
rank: 712
score: 98.24313790457589
patch: case Token . IN : }
rank: 712
score: 97.8448974609375
patch: exp = true ;
rank: 713
score: 98.60238986545139
patch: return true ; return - 0 ; ;
rank: 713
score: 98.43252127511161
patch: return false ; return break ;
rank: 713
score: 98.319921875
patch: return return $NUMBER$ ;
rank: 713
score: 98.23919677734375
patch: return children == null ;
rank: 714
score: 98.51983642578125
patch: throw new Exception ( $STRING$ ) ;
rank: 714
score: 98.49517059326172
patch: return true ; default : default :
rank: 714
score: 98.43166097005208
patch: true ; return 0 ;
rank: 714
score: 98.31713256835937
patch: . throw null ;
rank: 714
score: 98.28898402622768
patch: return case Token . ASSIGN :
rank: 714
score: 98.23809204101562
patch: return < false ;
rank: 714
score: 97.84291381835938
patch: if ( success )
rank: 715
score: 98.51949310302734
patch: return new ? false : true ;
rank: 715
score: 98.43141392299107
patch: return false ; ; if ;
rank: 715
score: 98.23695882161458
patch: case Node . FUNCTION :
rank: 715
score: 97.83980712890624
patch: return Boolean . ;
rank: 716
score: 98.59690348307292
patch: return true ; return true ; n ;
rank: 716
score: 98.55111694335938
patch: return boolean . next ( ) ;
rank: 716
score: 98.51837921142578
patch: case Token . REGEXP : break ;
rank: 716
score: 98.49097551618304
patch: return ? true : false ;
rank: 716
score: 98.4312744140625
patch: true ; ; return true ;
rank: 716
score: 98.3138936360677
patch: return true true ; }
rank: 716
score: 98.23619588216145
patch: result : return true ;
rank: 716
score: 98.02074178059895
patch: do ; return true ;
rank: 716
score: 97.83582763671875
patch: and return true ;
rank: 717
score: 98.59515380859375
patch: return false ; return true ; ; ?
rank: 717
score: 98.4241943359375
patch: return ; return null ;
rank: 717
score: 98.3135986328125
patch: return ; || true ;
rank: 717
score: 98.23086547851562
patch: x = value ;
rank: 717
score: 98.01675415039062
patch: Util . return false ;
rank: 718
score: 98.59401157924107
patch: return ; true return true ;
rank: 718
score: 98.48200988769531
patch: return locals . length != 1 ;
rank: 718
score: 98.41792515345982
patch: return false ; return start ;
rank: 718
score: 98.22760009765625
patch: return true ; {
rank: 718
score: 98.01505533854167
patch: m ; return true ;
rank: 718
score: 97.83290405273438
patch: the return true ;
rank: 719
score: 98.59344482421875
patch: return return true ; ; ;
rank: 719
score: 98.5422592163086
patch: return TRUE ? true : true ;
rank: 719
score: 98.41632952008929
patch: if true ; return 1 ;
rank: 719
score: 98.31024169921875
patch: return ; true ;
rank: 719
score: 98.01485188802083
patch: . : return true ;
rank: 719
score: 97.83148193359375
patch: if ;
rank: 720
score: 98.59335666232639
patch: return true ; else { if true ;
rank: 720
score: 98.41492571149554
patch: true ; return true ; }
rank: 720
score: 98.29800415039062
patch: } return return false ;
rank: 720
score: 98.0148213704427
patch: return true true ; ;
rank: 720
score: 97.8279800415039
patch: * * /
rank: 721
score: 98.41453334263393
patch: return 0 ; if true ;
rank: 721
score: 98.21683756510417
patch: x = return false ;
rank: 721
score: 98.01460774739583
patch: t ; return true ;
rank: 721
score: 97.82601928710938
patch: success = false ;
rank: 722
score: 98.5919189453125
patch: return return 1 ; return true ; ;
rank: 722
score: 98.47504425048828
patch: return false ; ? return false ;
rank: 722
score: 98.41341727120536
patch: return true ; return ; /
rank: 722
score: 98.29026489257812
patch: return null ; }
rank: 722
score: 98.2757568359375
patch: continue ; return true ;
rank: 722
score: 98.01218668619792
patch: my ; return true ;
rank: 722
score: 97.82430419921874
patch: $ return true ;
rank: 723
score: 98.59166802300348
patch: return true ; true ; ; true ;
rank: 723
score: 98.41322544642857
patch: return false ; return return ;
rank: 723
score: 98.27304077148438
patch: break ? return true ;
rank: 723
score: 98.2097676595052
patch: return children != null ;
rank: 723
score: 98.0114034016927
patch: ? ; return false ;
rank: 723
score: 97.81915893554688
patch: then return true ;
rank: 724
score: 98.5914306640625
patch: return true ; true ; / true {
rank: 724
score: 98.49937438964844
patch: return ( true && true ) ;
rank: 724
score: 98.46931457519531
patch: return false ; default / * /
rank: 724
score: 98.41234479631696
patch: return count ; return false ;
rank: 724
score: 98.28292846679688
patch: return return == 0 ;
rank: 724
score: 98.27076067243304
patch: return ( Token . FUNCTION :
rank: 724
score: 98.20779418945312
patch: result = return true ;
rank: 724
score: 98.0075439453125
patch: ; return true ;
rank: 724
score: 97.81854248046875
patch: if ( ; }
rank: 725
score: 98.58673095703125
patch: return false ; true ; true
rank: 725
score: 98.46323067801339
patch: return false ; default : else
rank: 725
score: 98.41197713216145
patch: return * return 0 ;
rank: 725
score: 98.20530192057292
patch: return true ; true :
rank: 725
score: 98.00674438476562
patch: case Token . true :
rank: 725
score: 97.81036376953125
patch: switch ( value )
rank: 726
score: 98.45825958251953
patch: switch ( value . length ) {
rank: 726
score: 98.40826416015625
patch: return $STRING$ + true ;
rank: 726
score: 98.2791035970052
patch: * * * * ;
rank: 726
score: 98.2031758626302
patch: return * / true ;
rank: 726
score: 97.8101806640625
patch: |= true ;
rank: 727
score: 98.52210235595703
patch: return null ? false : true ;
rank: 727
score: 98.40785435267857
patch: true ; return - 1 ;
rank: 727
score: 98.27414957682292
patch: return return * true ;
rank: 727
score: 98.26529947916667
patch: ret = return true ;
rank: 727
score: 98.20299275716145
patch: else return true ; }
rank: 727
score: 98.00130208333333
patch: true : return true ;
rank: 727
score: 97.8045166015625
patch: * / break ;
rank: 728
score: 98.58294677734375
patch: return false ; ; * /
rank: 728
score: 98.4932861328125
patch: Predicate < Node > return true ;
rank: 728
score: 98.45623016357422
patch: if ( ) { return true ;
rank: 728
score: 98.40570940290179
patch: return ; = - 1 ;
rank: 728
score: 98.2725830078125
patch: if return true ; }
rank: 728
score: 98.20287475585937
patch: return < null ;
rank: 728
score: 97.80241088867187
patch: of return false ;
rank: 729
score: 98.58225504557292
patch: return false ; true {
rank: 729
score: 98.40271868024554
patch: return true ; return key ;
rank: 729
score: 98.25978597005208
patch: return false || true ;
rank: 729
score: 98.20163981119792
patch: is CaMeL Simple CaMeL Operator
rank: 729
score: 97.99949137369792
patch: boolean success = true ;
rank: 729
score: 97.79866943359374
patch: key = true ;
rank: 730
score: 98.58153424944196
patch: try { return false ; ;
rank: 730
score: 98.40010288783482
patch: return this ; if true ;
rank: 730
score: 98.2560323079427
patch: return children . true ;
rank: 730
score: 98.200146484375
patch: return < 0 ;
rank: 730
score: 97.9970703125
patch: update ; return true ;
rank: 730
score: 97.79461669921875
patch: throw true false ;
rank: 731
score: 98.58111572265625
patch: return true ; true /
rank: 731
score: 98.5091323852539
patch: return locals . length < 0 ;
rank: 731
score: 98.45414225260417
patch: return Token . FUNCTION :
rank: 731
score: 98.39889962332589
patch: true ; return return true ;
rank: 731
score: 98.2696533203125
patch: return ; true * /
rank: 731
score: 98.25316365559895
patch: case Token . FUNCTION _
rank: 731
score: 97.79312133789062
patch: parameters = true ;
rank: 732
score: 98.48605346679688
patch: case Token . ASSIGN : / /
rank: 732
score: 98.45336042131696
patch: return false ; case FUNCTION :
rank: 732
score: 98.26864624023438
patch: return return == true ;
rank: 732
score: 98.19964599609375
patch: return false ; / *
rank: 732
score: 97.99264526367188
patch: invoke ; return true ;
rank: 733
score: 98.48371887207031
patch: return true ; / / * /
rank: 733
score: 98.39375523158482
patch: return super . return true ;
rank: 733
score: 98.26441446940105
patch: if return ! true ;
rank: 733
score: 98.19815063476562
patch: result ? return true ;
rank: 733
score: 97.99135335286458
patch: for ; ; ; )
rank: 733
score: 97.79087524414062
patch: value return true ;
rank: 734
score: 98.57058279854911
patch: try { return return true ;
rank: 734
score: 98.5069351196289
patch: || ( value != null ) ;
rank: 734
score: 98.44428362165179
patch: return true ; default * /
rank: 734
score: 98.39348493303571
patch: return true ; return n ;
rank: 734
score: 97.78880004882812
patch: expression = true ;
rank: 735
score: 98.47867584228516
patch: value = $STRING$ ; return true ;
rank: 735
score: 98.43927873883929
patch: return ? false : false ;
rank: 735
score: 98.39205496651786
patch: if ; { return true ;
rank: 735
score: 98.26087443033855
patch: throw this . true ;
rank: 735
score: 97.9906514485677
patch: while ( true ; )
rank: 735
score: 97.78331298828125
patch: expected = true ;
rank: 736
score: 98.38946533203125
patch: return true ; return super ;
rank: 736
score: 98.26015218098958
patch: return ; && true ;
rank: 736
score: 98.2469482421875
patch: return ? true ;
rank: 736
score: 97.98508707682292
patch: / * return true :
rank: 736
score: 97.78274536132812
patch: name = true ;
rank: 737
score: 98.25941162109375
patch: * * * /
rank: 737
score: 98.191357421875
patch: return < true ;
rank: 737
score: 97.9846903483073
patch: node ; return false ;
rank: 737
score: 97.7820068359375
patch: $ return false ;
rank: 738
score: 98.49665832519531
patch: return boolean equals ( value ) ;
rank: 738
score: 98.47254943847656
patch: Predicate < Token > return true ;
rank: 738
score: 98.41307721819196
patch: return false ; default : {
rank: 738
score: 98.38656180245536
patch: return ; return true ; else
rank: 738
score: 98.25930786132812
patch: } else if true ;
rank: 738
score: 98.18701171875
patch: in . return true ;
rank: 738
score: 97.9818623860677
patch: p . return true ;
rank: 738
score: 97.78179931640625
patch: if true ?
rank: 739
score: 98.38643391927083
patch: return true ; ; else
rank: 739
score: 98.18553670247395
patch: return < - 1 ;
rank: 739
score: 97.9727783203125
patch: if ; true ;
rank: 739
score: 97.78146362304688
patch: . * /
rank: 740
score: 98.55946568080357
patch: / else { return true ;
rank: 740
score: 98.40635463169643
patch: return true ; default : :
rank: 740
score: 98.24114990234375
patch: return locals != true ;
rank: 740
score: 97.778564453125
patch: This return true ;
rank: 741
score: 98.47106170654297
patch: try { return ( true ) ;
rank: 741
score: 98.23922293526786
patch: return ( value == null ;
rank: 741
score: 97.7783935546875
patch: target = true ;
rank: 742
score: 98.2512715657552
patch: throw return false ; }
rank: 742
score: 98.23539225260417
patch: queue . return true ;
rank: 742
score: 97.96192932128906
patch: return return ;
rank: 742
score: 97.777197265625
patch: this . true ;
rank: 743
score: 98.55291748046875
patch: return true ; true true *
rank: 743
score: 98.4649887084961
patch: return true ; * / break ;
rank: 743
score: 98.23070417131696
patch: return ( = true ) ;
rank: 743
score: 98.16726684570312
patch: / / return false ;
rank: 743
score: 97.95855712890625
patch: synchronized ( this ;
rank: 743
score: 97.761962890625
patch: form return true ;
rank: 744
score: 98.55101667131696
patch: return true ; true true {
rank: 744
score: 98.38225446428571
patch: return NOT : return true ;
rank: 744
score: 98.38072858537946
patch: return ; return false ; ;
rank: 744
score: 98.25071207682292
patch: return false true ; }
rank: 744
score: 98.22897774832589
patch: } return ( false ) ;
rank: 745
score: 98.55045863560268
patch: return true ; ; else {
rank: 745
score: 98.48673248291016
patch: result . add ( value ) ;
rank: 745
score: 98.4449462890625
patch: return true ; / / /
rank: 745
score: 98.38005719866071
patch: return false ; return type ;
rank: 745
score: 98.25062052408855
patch: . if return false ;
rank: 745
score: 98.22832380022321
patch: return ( - 1 ) ;
rank: 745
score: 97.75895385742187
patch: ) return true ;
rank: 746
score: 98.5499267578125
patch: return false ; true else {
rank: 746
score: 98.48429870605469
patch: return boolean CaMeL Value ( ) ;
rank: 746
score: 98.41985212053571
patch: return ( < 0 ) ;
rank: 746
score: 98.37071010044643
patch: return EMPTY : return true ;
rank: 746
score: 98.25022583007812
patch: return return 1 ;
rank: 746
score: 97.92620849609375
patch: for ; ; )
rank: 746
score: 97.75458374023438
patch: , return true ;
rank: 747
score: 98.3768539428711
patch: return $NUMBER$ ;
rank: 747
score: 98.25020345052083
patch: return return return false ;
rank: 747
score: 98.22793579101562
patch: return $NUMBER$ ? true ;
rank: 747
score: 97.75152587890625
patch: collection = true ;
rank: 748
score: 98.54861886160714
patch: break ; return true ; ;
rank: 748
score: 98.36660766601562
patch: if true return 0 ;
rank: 748
score: 98.24972534179688
patch: return return == 1 ;
rank: 748
score: 98.22700805664063
patch: state = false ;
rank: 748
score: 98.15636189778645
patch: x = true ; }
rank: 748
score: 97.74881591796876
patch: if ( false ;
rank: 749
score: 98.54592459542411
patch: / * if return true ;
rank: 749
score: 98.47891235351562
patch: return locals . length < 1 ;
rank: 749
score: 98.36353556315105
patch: return this + true ;
rank: 749
score: 98.24789428710938
patch: { if ( true )
rank: 749
score: 98.15174560546875
patch: return false ; {
rank: 750
score: 98.47843170166016
patch: return is CaMeL Constructor ( ) ;
rank: 750
score: 98.41017368861607
patch: return < * / true ;
rank: 750
score: 98.35459391276042
patch: return ; return ; {
rank: 750
score: 98.24788411458333
patch: return ; , * /
rank: 750
score: 98.2215576171875
patch: return ) + true ;
rank: 750
score: 98.14608154296874
patch: return true ) ;
rank: 750
score: 97.89286499023437
patch: this return false ;
rank: 750
score: 97.74666748046874
patch: namespace = true ;
rank: 751
score: 98.5396728515625
patch: int * / return true ;
rank: 751
score: 98.47819519042969
patch: return ( value == 1 ) ;
rank: 751
score: 98.21764264787946
patch: return ( true || ) ;
rank: 751
score: 98.1414082845052
patch: return true . false ;
rank: 751
score: 97.74515991210937
patch: p = true ;
rank: 752
score: 98.53948974609375
patch: return false ; ; * ;
rank: 752
score: 98.33980305989583
patch: return ; return ; /
rank: 752
score: 98.2470194498698
patch: . if ; * /
rank: 752
score: 98.2136739095052
patch: se . return true ;
rank: 752
score: 97.88319702148438
patch: try { return ;
rank: 753
score: 98.24393717447917
patch: { / * * /
rank: 753
score: 98.21359252929688
patch: return ( $STRING$ ) ;
rank: 753
score: 98.1392822265625
patch: return false ) ;
rank: 753
score: 97.74320068359376
patch: * true * /
rank: 754
score: 98.39773123604911
patch: return ) ? return true ;
rank: 754
score: 98.33709716796875
patch: return ; return ; ;
rank: 754
score: 98.13741048177083
patch: case Node . REGEXP :
rank: 754
score: 97.87578735351562
patch: synchronized ( ; ;
rank: 754
score: 97.74231567382813
patch: cfw . return ;
rank: 755
score: 98.47261810302734
patch: return ( value instanceof Token ) ;
rank: 755
score: 98.3352559407552
patch: return NOT : true ;
rank: 755
score: 98.21045939127605
patch: return switch ( value )
rank: 755
score: 98.13724772135417
patch: result : return false ;
rank: 755
score: 97.74198608398437
patch: if ( value ;
rank: 756
score: 98.31983439127605
patch: return ; = null ;
rank: 756
score: 98.239892578125
patch: { return ; }
rank: 756
score: 98.13539632161458
patch: return false . false ;
rank: 757
score: 98.53335135323661
patch: return true ; true ++ ;
rank: 757
score: 98.23971557617188
patch: break return false ; }
rank: 757
score: 98.20827229817708
patch: return 0 ? true ;
rank: 757
score: 97.85166625976562
patch: / return true ;
rank: 757
score: 97.74129028320313
patch: false = false ;
rank: 758
score: 98.3241475423177
patch: return Token . IN :
rank: 758
score: 98.30242919921875
patch: return ; return $NUMBER$ ;
rank: 758
score: 97.84832763671875
patch: return ( ;
rank: 758
score: 97.73804321289063
patch: fail ( ) ;
rank: 759
score: 98.53208414713542
patch: return false ; ; /
rank: 759
score: 98.30079142252605
patch: return n != 0 ;
rank: 759
score: 98.2377421061198
patch: . if ( true ;
rank: 759
score: 98.20549665178571
patch: return ( locals . get CaMeL
rank: 759
score: 97.83858642578124
patch: default return true ;
rank: 760
score: 98.524169921875
patch: boolean true return true ;
rank: 760
score: 98.43233235677083
patch: return boolean != true ;
rank: 760
score: 98.29965209960938
patch: if ; = true ;
rank: 760
score: 98.23722330729167
patch: { for return true ;
rank: 760
score: 97.83197021484375
patch: while ( true )
rank: 760
score: 97.72891235351562
patch: This return false ;
rank: 761
score: 98.23280843098958
patch: return ; break ; }
rank: 761
score: 98.20401000976562
patch: state . return false ;
rank: 761
score: 97.8277099609375
patch: switch ( value ;
rank: 761
score: 97.7286865234375
patch: id = true ;
rank: 762
score: 98.31793212890625
patch: return ( boolean ) false ;
rank: 762
score: 98.23213704427083
patch: set ; return false ;
rank: 762
score: 98.12643432617188
patch: return false ; true :
rank: 762
score: 97.82659149169922
patch: if ; ;
rank: 762
score: 97.7225570678711
patch: throw new ;
rank: 763
score: 98.52175903320312
patch: return return 1 ; ;
rank: 763
score: 98.31254069010417
patch: return { return true ;
rank: 763
score: 98.29522705078125
patch: return return + true ;
rank: 763
score: 98.2298828125
patch: return ; * ;
rank: 763
score: 98.19979858398438
patch: context . return true ;
rank: 763
score: 97.825146484375
patch: if ; true :
rank: 763
score: 97.72164306640624
patch: filter = true ;
rank: 764
score: 98.51713053385417
patch: return false ; true /
rank: 764
score: 98.36789957682292
patch: return false ; / /
rank: 764
score: 98.29509887695312
patch: return ; return ;
rank: 764
score: 98.22611490885417
patch: return true ; else }
rank: 764
score: 98.19972737630208
patch: return children == true ;
rank: 764
score: 97.82501220703125
patch: if ; return ;
rank: 765
score: 98.3651631673177
patch: return Token . FUNCTION ;
rank: 765
score: 98.29293212890624
patch: return * true ;
rank: 765
score: 98.22393188476562
patch: break true ; }
rank: 765
score: 98.1982421875
patch: exception = return true ;
rank: 765
score: 97.82006225585937
patch: * / return ;
rank: 765
score: 97.71851806640625
patch: in return true ;
rank: 766
score: 98.28541056315105
patch: true ; = true ;
rank: 766
score: 98.11857096354167
patch: return true ; / :
rank: 766
score: 97.7170654296875
patch: b = true ;
rank: 767
score: 98.51493326822917
patch: return false ; else {
rank: 767
score: 98.37677001953125
patch: return boolean = true ;
rank: 767
score: 98.2199198404948
patch: return ; * / }
rank: 767
score: 98.11605834960938
patch: x ? return true ;
rank: 767
score: 97.816259765625
patch: = true ; ;
rank: 767
score: 97.716259765625
patch: if ( used )
rank: 768
score: 98.34593854631696
patch: return < 1 : true ;
rank: 768
score: 98.30819702148438
patch: cfw . return true ;
rank: 768
score: 98.28312174479167
patch: return ; = 1 ;
rank: 768
score: 98.21584065755208
patch: return return null ; }
rank: 768
score: 98.11434936523438
patch: in . return false ;
rank: 768
score: 97.80288696289062
patch: . if ( ;
rank: 768
score: 97.7145263671875
patch: var = true ;
rank: 769
score: 98.34462193080357
patch: return true } return true ;
rank: 769
score: 98.3065185546875
patch: return false ; default * /
rank: 769
score: 98.27893676757813
patch: return $STRING$ ; ;
rank: 769
score: 98.18905639648438
patch: return Result . true ;
rank: 769
score: 98.11136881510417
patch: / ? return true ;
rank: 769
score: 97.80234985351562
patch: ; return false ;
rank: 769
score: 97.71348266601562
patch: throw true true ;
rank: 770
score: 98.51095145089286
patch: / * return true ; true
rank: 770
score: 98.18780517578125
patch: if ( value . get CaMeL
rank: 770
score: 98.11055501302083
patch: / : return true ;
rank: 770
score: 97.71270141601562
patch: thread = true ;
rank: 771
score: 98.50714111328125
patch: return false ; ; else {
rank: 771
score: 98.2678934733073
patch: return ; return ; *
rank: 771
score: 98.21315511067708
patch: return false ; false ;
rank: 771
score: 98.18771362304688
patch: sb . return true ;
rank: 771
score: 98.10592651367188
patch: return true ; true .
rank: 771
score: 97.79729614257812
patch: default return false ;
rank: 771
score: 97.7107421875
patch: it = true ;
rank: 772
score: 98.50624593098958
patch: return return true ; true
rank: 772
score: 98.26563517252605
patch: return ; = n ;
rank: 772
score: 98.18604387555804
patch: result = false ; break ;
rank: 772
score: 98.10309448242188
patch: x = $STRING$ ;
rank: 772
score: 97.795947265625
patch: null return true ;
rank: 772
score: 97.70942993164063
patch: cond = true ;
rank: 773
score: 98.33706229073661
patch: return / * / true ;
rank: 773
score: 98.28557477678571
patch: return { return true ; }
rank: 773
score: 98.2635498046875
patch: return this ; return ;
rank: 773
score: 98.18289184570312
patch: return value = true ;
rank: 773
score: 98.10226440429688
patch: return $STRING$ && true ;
rank: 773
score: 97.79561157226563
patch: final return false ;
rank: 773
score: 97.70816650390626
patch: value return false ;
rank: 774
score: 98.34541538783482
patch: return / * return true ;
rank: 774
score: 98.25937906901042
patch: return $STRING$ ; true ;
rank: 774
score: 98.20949300130208
patch: break ; * * /
rank: 774
score: 98.1828104654948
patch: return ) ; default :
rank: 774
score: 98.1012674967448
patch: System . return true ;
rank: 774
score: 97.79151000976563
patch: return this . ;
rank: 774
score: 97.70511474609376
patch: parameters return true ;
rank: 775
score: 98.27671305338542
patch: return NOT : false ;
rank: 775
score: 98.2552490234375
patch: return ; return / ;
rank: 775
score: 98.1803487141927
patch: params . return true ;
rank: 775
score: 98.09743245442708
patch: else return false ; }
rank: 775
score: 97.70262451171875
patch: resolved = false ;
rank: 776
score: 98.32883126395089
patch: return true ? return true ;
rank: 776
score: 98.2543436686198
patch: return ; return value ;
rank: 776
score: 98.20595703125
patch: { return null ;
rank: 776
score: 97.78641357421876
patch: | return true ;
rank: 776
score: 97.702294921875
patch: clazz = true ;
rank: 777
score: 98.48673502604167
patch: result { return true ;
rank: 777
score: 98.32856096540179
patch: return switch ( value ) ;
rank: 777
score: 98.26859741210937
patch: return true ; )
rank: 777
score: 98.2023213704427
patch: throw return true ; }
rank: 777
score: 97.7018310546875
patch: if ( success ;
rank: 778
score: 98.2513427734375
patch: return true ; return true
rank: 778
score: 98.20161946614583
patch: return return && false ;
rank: 778
score: 98.17239379882812
patch: return value . get CaMeL
rank: 778
score: 97.78065185546875
patch: || return false ;
rank: 778
score: 97.69922485351563
patch: q = true ;
rank: 779
score: 98.46988932291667
patch: return null ; true ;
rank: 779
score: 98.32634626116071
patch: return < $NUMBER$ : true ;
rank: 779
score: 98.26145426432292
patch: return true ; default {
rank: 779
score: 98.25118001302083
patch: return ; = $STRING$ ;
rank: 779
score: 98.17238943917411
patch: return ( >= 1 ) ;
rank: 779
score: 98.09496459960937
patch: throw new Illegal CaMeL
rank: 779
score: 97.77937316894531
patch: ? return ;
rank: 779
score: 97.69813842773438
patch: env = true ;
rank: 780
score: 98.32020060221355
patch: return $STRING$ == value ;
rank: 780
score: 98.24766031901042
patch: true true return true ;
rank: 780
score: 98.20052083333333
patch: return false ; if ;
rank: 780
score: 98.17176310221355
patch: state : return true ;
rank: 780
score: 98.09006754557292
patch: return Boolean . false :
rank: 780
score: 97.774267578125
patch: return ( ( ;
rank: 780
score: 97.69573364257812
patch: retval = true ;
rank: 781
score: 98.46636962890625
patch: } return true ; ;
rank: 781
score: 98.33648681640625
patch: case Node . ARRAYLIT :
rank: 781
score: 98.1993896484375
patch: if ; * /
rank: 781
score: 98.16839599609375
patch: return new ? true ;
rank: 781
score: 98.08970133463542
patch: return * / false ;
rank: 781
score: 97.695361328125
patch: type return true ;
rank: 782
score: 98.24022420247395
patch: return * return 1 ;
rank: 782
score: 98.19853515625
patch: throw return true ;
rank: 782
score: 98.1675537109375
patch: res = true ;
rank: 782
score: 97.693310546875
patch: match return true ;
rank: 783
score: 98.31564767020089
patch: return false ; } break ;
rank: 783
score: 98.2388407389323
patch: return ; return ; :
rank: 783
score: 97.764501953125
patch: / * ; ;
rank: 783
score: 97.69183349609375
patch: if true false ;
rank: 784
score: 98.45803833007812
patch: return true ; true else
rank: 784
score: 98.30574253627232
patch: return true ; * / /
rank: 784
score: 98.23541259765625
patch: return 0 + true ;
rank: 784
score: 98.19556884765625
patch: } if true ;
rank: 784
score: 98.16119384765625
patch: break ; } return true ;
rank: 784
score: 98.0802001953125
patch: children . return true ;
rank: 784
score: 97.7638916015625
patch: super . return ;
rank: 784
score: 97.68353881835938
patch: qualifier = true ;
rank: 785
score: 98.4485371907552
patch: result { return false ;
rank: 785
score: 98.22610473632812
patch: return ; { true ;
rank: 785
score: 98.19490051269531
patch: break true ;
rank: 785
score: 98.1585693359375
patch: finished . return true ;
rank: 785
score: 97.763525390625
patch: ? * / ;
rank: 785
score: 97.68279418945312
patch: access return true ;
rank: 786
score: 98.32190958658855
patch: return boolean == true ;
rank: 786
score: 98.22511800130208
patch: return ; return return ;
rank: 786
score: 98.15731375558036
patch: return ( ) ? true ;
rank: 786
score: 97.6818359375
patch: cached = false ;
rank: 787
score: 98.44809977213542
patch: int true return true ;
rank: 787
score: 98.2061055501302
patch: return * return false ;
rank: 787
score: 98.15650431315105
patch: vars . return true ;
rank: 787
score: 98.07567749023437
patch: return < 1 ;
rank: 787
score: 97.76193237304688
patch: return super . ;
rank: 787
score: 97.68120727539062
patch: ok = true ;
rank: 788
score: 98.29513113839286
patch: return - * / true ;
rank: 788
score: 98.1976826985677
patch: return ; { return ;
rank: 788
score: 98.15473284040179
patch: throw new Throwable ( ) ;
rank: 788
score: 98.07149251302083
patch: result = return false ;
rank: 788
score: 97.75753021240234
patch: . return ;
rank: 788
score: 97.67747802734375
patch: direct = true ;
rank: 789
score: 98.19612630208333
patch: return - - 1 ;
rank: 789
score: 98.18208821614583
patch: = true ; break ;
rank: 789
score: 98.15441022600446
patch: return ( locals . get (
rank: 789
score: 97.67654418945312
patch: head = true ;
rank: 790
score: 98.43778483072917
patch: boolean true return false ;
rank: 790
score: 98.1944580078125
patch: true ; return ; ;
rank: 790
score: 98.19386800130208
patch: out . return true ;
rank: 790
score: 97.67173461914062
patch: iter = true ;
rank: 791
score: 98.43668619791667
patch: true return true ; ;
rank: 791
score: 98.29029192243304
patch: return true . return true ;
rank: 791
score: 98.19368489583333
patch: similar . return true ;
rank: 791
score: 98.19216918945312
patch: return n == 0 ;
rank: 791
score: 98.1512451171875
patch: ret = ( true ) ;
rank: 791
score: 98.06777954101562
patch: return < $NUMBER$ ;
rank: 791
score: 97.73890380859375
patch: return ; } ;
rank: 792
score: 98.43483479817708
patch: value { return true ;
rank: 792
score: 98.18711344401042
patch: true ; return ; {
rank: 792
score: 98.17903645833333
patch: { else return ; }
rank: 792
score: 98.150634765625
patch: return true && false ;
rank: 792
score: 98.0676778157552
patch: result ? return false ;
rank: 792
score: 97.67034301757812
patch: break ; case ;
rank: 793
score: 98.17879231770833
patch: { if ; * ;
rank: 793
score: 98.14994594029018
patch: return ( false ) ; }
rank: 793
score: 98.0675557454427
patch: x : return true ;
rank: 793
score: 97.73465576171876
patch: if ( code ;
rank: 793
score: 97.66658325195313
patch: arg = true ;
rank: 794
score: 98.18668619791667
patch: return ; return start ;
rank: 794
score: 98.14919607979911
patch: return return false ; default :
rank: 794
score: 98.06748453776042
patch: switch ( locals ) {
rank: 794
score: 97.66645050048828
patch: result * /
rank: 795
score: 98.29852294921875
patch: result return true ;
rank: 795
score: 98.06414794921875
patch: case Node . IN :
rank: 795
score: 97.72220611572266
patch: this ; ;
rank: 795
score: 97.66585693359374
patch: signature = true ;
rank: 796
score: 98.4176737467448
patch: return return - true ;
rank: 796
score: 98.18355102539063
patch: true return false ;
rank: 796
score: 98.1741231282552
patch: } else return null ;
rank: 796
score: 98.14508928571429
patch: return ( : true ) ;
rank: 796
score: 97.72151489257813
patch: that return true ;
rank: 796
score: 97.66517333984375
patch: decl = true ;
rank: 797
score: 98.29446411132812
patch: return boolean != false ;
rank: 797
score: 98.27292306082589
patch: return < 1 || true ;
rank: 797
score: 98.17978922526042
patch: return this ; true ;
rank: 797
score: 98.17205810546875
patch: if return return true ;
rank: 797
score: 98.16145833333333
patch: true ? return true ;
rank: 797
score: 98.14475504557292
patch: return value == $STRING$ ;
rank: 797
score: 98.06043090820313
patch: x = null ;
rank: 798
score: 98.17847696940105
patch: true ; return null ;
rank: 798
score: 98.14120483398438
patch: return locals . false ;
rank: 798
score: 98.05687459309895
patch: case Type . FUNCTION :
rank: 798
score: 97.710546875
patch: try return true ;
rank: 798
score: 97.663671875
patch: if ; else {
rank: 799
score: 98.40943400065105
patch: return return $NUMBER$ ; ;
rank: 799
score: 98.28273228236607
patch: / / / return true ;
rank: 799
score: 98.17591349283855
patch: return n != true ;
rank: 799
score: 98.17051188151042
patch: return true - 1 ;
rank: 799
score: 97.7100830078125
patch: && return true ;
rank: 799
score: 97.662890625
patch: return true * /
rank: 800
score: 98.26613362630208
patch: return ) : true ;
rank: 800
score: 98.152587890625
patch: return this . value ;
rank: 801
score: 98.40574137369792
patch: return null ; ; ;
rank: 801
score: 98.17376708984375
patch: if ; return 0 ;
rank: 801
score: 98.16738891601562
patch: return ; } return ;
rank: 801
score: 97.70257568359375
patch: found = true ;
rank: 801
score: 97.66045532226562
patch: then return false ;
rank: 802
score: 98.17374674479167
patch: return count ; break ;
rank: 802
score: 98.16651407877605
patch: ; if return true ;
rank: 802
score: 98.14776611328125
patch: return value == 0 ;
rank: 802
score: 98.13954671223958
patch: return ( ! ) ;
rank: 802
score: 98.04408772786458
patch: ret ? return true ;
rank: 802
score: 97.69454345703124
patch: return true ; default
rank: 802
score: 97.65813598632812
patch: flags = true ;
rank: 803
score: 98.1685791015625
patch: return name ;
rank: 803
score: 98.16616821289062
patch: break ; true * /
rank: 803
score: 97.65615234375
patch: return & true ;
rank: 804
score: 98.39552815755208
patch: boolean value = true ;
rank: 804
score: 98.1660664876302
patch: if true return 1 ;
rank: 804
score: 98.16482543945312
patch: return return && return ;
rank: 804
score: 98.04207356770833
patch: Token . ARRAYLIT :
rank: 804
score: 97.68530883789063
patch: # return true ;
rank: 804
score: 97.65556640625
patch: catch ( true )
rank: 805
score: 98.16578165690105
patch: return 0 ; true ;
rank: 805
score: 98.16434326171876
patch: return return 0 ;
rank: 805
score: 98.04144287109375
patch: return false ; / :
rank: 805
score: 97.68426513671875
patch: ? if true ;
rank: 806
score: 98.24205525716145
patch: return Node . ASSIGN ;
rank: 806
score: 98.16548665364583
patch: return new return true ;
rank: 806
score: 98.16407267252605
patch: return Collections . TRUE ;
rank: 806
score: 98.12572224934895
patch: switch ( type ) {
rank: 806
score: 98.0380147298177
patch: return false == true ;
rank: 806
score: 97.67838134765626
patch: t return true ;
rank: 806
score: 97.65386962890625
patch: removed = true ;
rank: 807
score: 98.39241536458333
patch: value { return false ;
rank: 807
score: 98.1630859375
patch: } else { if ;
rank: 807
score: 98.1624755859375
patch: true ; return $STRING$ ;
rank: 807
score: 98.1357421875
patch: return Assignment . false ;
rank: 807
score: 98.12499389648437
patch: exception = false ;
rank: 807
score: 98.03800455729167
patch: Other . return true ;
rank: 807
score: 97.6524169921875
patch: if true ; ;
rank: 808
score: 98.38938395182292
patch: boolean * return true ;
rank: 808
score: 98.2381083170573
patch: return $STRING$ || true ;
rank: 808
score: 98.16260782877605
patch: return ; true ; }
rank: 808
score: 98.15897623697917
patch: return true + 0 ;
rank: 808
score: 98.13400268554688
patch: cfw . return false ;
rank: 808
score: 98.0378173828125
patch: return - 0 ;
rank: 808
score: 97.673876953125
patch: short type = ;
rank: 809
score: 98.38720703125
patch: return return false ; true
rank: 809
score: 98.24008178710938
patch: return value == 1 ;
rank: 809
score: 98.16148885091145
patch: . ; return false ;
rank: 809
score: 98.15866088867188
patch: return false ; ; else
rank: 809
score: 98.11879272460938
patch: state return true ;
rank: 809
score: 97.66939086914063
patch: = return true ;
rank: 809
score: 97.64969482421876
patch: s = true ;
rank: 810
score: 98.234423828125
patch: x return true ;
rank: 810
score: 98.16107177734375
patch: return true ; null ;
rank: 810
score: 98.15606689453125
patch: if true ; break ;
rank: 810
score: 98.03273518880208
patch: x = false ; }
rank: 811
score: 98.23392740885417
patch: Op . return true ;
rank: 811
score: 98.16091918945312
patch: } else if ;
rank: 811
score: 98.1234130859375
patch: TODO : return true ;
rank: 811
score: 98.11773681640625
patch: state = return true ;
rank: 811
score: 97.64319458007813
patch: used = true ;
rank: 812
score: 98.2313944498698
patch: return boolean = false ;
rank: 812
score: 98.1595458984375
patch: return parent . true ;
rank: 812
score: 98.15310668945312
patch: return true ; ; {
rank: 812
score: 98.12266031901042
patch: return Result . ASSIGN ;
rank: 812
score: 97.642919921875
patch: reference = true ;
rank: 813
score: 98.15919799804688
patch: return return ) ;
rank: 813
score: 98.15182495117188
patch: return ; return ; ?
rank: 813
score: 98.1217753092448
patch: return ( value != null
rank: 813
score: 98.1086934407552
patch: return locals = true ;
rank: 813
score: 98.0243428548177
patch: result = true ; }
rank: 813
score: 97.66251220703126
patch: : if ( ;
rank: 813
score: 97.64246826171875
patch: if ( short )
rank: 814
score: 98.15135701497395
patch: return * true ; /
rank: 814
score: 98.1029561360677
patch: return children = true ;
rank: 814
score: 97.65877075195313
patch: if ; ; ;
rank: 814
score: 97.64146728515625
patch: condition = true ;
rank: 815
score: 98.36879475911458
patch: return return ) true ;
rank: 815
score: 98.22508748372395
patch: result ; return true ;
rank: 815
score: 98.15763346354167
patch: { ; return true ;
rank: 815
score: 98.10172526041667
patch: return locals . TRUE ;
rank: 815
score: 97.6537841796875
patch: return ; ; }
rank: 815
score: 97.63909912109375
patch: priority = true ;
rank: 816
score: 98.36855061848958
patch: return false ; true else
rank: 816
score: 98.15731811523438
patch: return return ( true ;
rank: 816
score: 98.14680989583333
patch: return new return 0 ;
rank: 816
score: 98.02211507161458
patch: return false ; true .
rank: 816
score: 97.65359497070312
patch: this . ;
rank: 816
score: 97.63844604492188
patch: ( true ) .
rank: 817
score: 98.36376953125
patch: return false true ; ;
rank: 817
score: 98.20419311523438
patch: return static = true ;
rank: 817
score: 98.1540018717448
patch: throw return && true ;
rank: 817
score: 98.14541625976562
patch: return true . break ;
rank: 817
score: 98.10599772135417
patch: false ; return true ;
rank: 817
score: 98.09873453776042
patch: return ) ; break ;
rank: 817
score: 97.6380615234375
patch: values = true ;
rank: 818
score: 98.36336263020833
patch: if return true ; ;
rank: 818
score: 98.14312744140625
patch: true ; return 1 ;
rank: 818
score: 98.09493001302083
patch: return ? return true ;
rank: 818
score: 97.651318359375
patch: it return true ;
rank: 818
score: 97.63600463867188
patch: tc = true ;
rank: 819
score: 98.35809326171875
patch: return return null ; ;
rank: 819
score: 98.21516927083333
patch: return ) & true ;
rank: 819
score: 98.14969889322917
patch: . throw new true ;
rank: 819
score: 98.1393330891927
patch: if true ; return ;
rank: 819
score: 98.02071126302083
patch: x . return true ;
rank: 819
score: 97.65104675292969
patch: || true ;
rank: 819
score: 97.63215637207031
patch: parameters * /
rank: 820
score: 98.3526123046875
patch: return null ; ;
rank: 820
score: 98.19512939453125
patch: case Node . ASSIGN :
rank: 820
score: 98.14803059895833
patch: throw ; return true ;
rank: 820
score: 98.1392822265625
patch: return n ; break ;
rank: 820
score: 98.10342407226562
patch: return name != null ;
rank: 820
score: 98.08003743489583
patch: return ( locals ) ;
rank: 820
score: 98.01955159505208
patch: return true ; / ?
rank: 820
score: 97.64893798828125
patch: return node . ;
rank: 820
score: 97.62911987304688
patch: for ; )
rank: 821
score: 98.14785766601562
patch: { if ; return ;
rank: 821
score: 98.1372782389323
patch: return ; return this ;
rank: 821
score: 98.01814778645833
patch: return Boolean . null ;
rank: 821
score: 97.64248046875
patch: return ; continue ;
rank: 821
score: 97.62508544921874
patch: item = true ;
rank: 822
score: 98.14762369791667
patch: continue ; return false ;
rank: 822
score: 98.1356689453125
patch: return this ; ;
rank: 822
score: 98.07809448242188
patch: match ( value ) ;
rank: 822
score: 98.0102030436198
patch: allowed . return true ;
rank: 822
score: 97.61860961914063
patch: tag = true ;
rank: 823
score: 98.146240234375
patch: * * return false ;
rank: 823
score: 98.12872314453125
patch: return super ;
rank: 823
score: 98.09975179036458
patch: return Assignment . true ;
rank: 823
score: 98.00918579101562
patch: true . return false ;
rank: 823
score: 97.63240966796874
patch: ? * return ;
rank: 823
score: 97.61354370117188
patch: body = false ;
rank: 824
score: 98.33749389648438
patch: boolean return false ; ;
rank: 824
score: 98.14263916015625
patch: return true - 0 ;
rank: 824
score: 98.12638092041016
patch: return type ;
rank: 824
score: 98.0972188313802
patch: return } return false ;
rank: 824
score: 98.00501708984375
patch: A = true ;
rank: 824
score: 97.63217163085938
patch: ? if ; ;
rank: 824
score: 97.61087646484376
patch: if ; break ;
rank: 825
score: 98.17266845703125
patch: return value == value ;
rank: 825
score: 98.12520345052083
patch: return $STRING$ ; return ;
rank: 825
score: 98.09493001302083
patch: return false ; default {
rank: 825
score: 98.0755615234375
patch: return $STRING$ ? true ;
rank: 825
score: 98.0030029296875
patch: return true ; .
rank: 826
score: 98.14173380533855
patch: break return true ; }
rank: 826
score: 98.09390258789062
patch: return { return false ;
rank: 826
score: 98.06246948242188
patch: return $STRING$ + $STRING$ ;
rank: 826
score: 98.0018819173177
patch: x ? return false ;
rank: 826
score: 97.62714233398438
patch: fail ( $STRING$ ;
rank: 826
score: 97.60521850585937
patch: fail ( true )
rank: 827
score: 98.32790120442708
patch: boolean return return true ;
rank: 827
score: 98.19618733723958
patch: return true != true ;
rank: 827
score: 98.16751098632812
patch: return ( value ) ;
rank: 827
score: 98.13909912109375
patch: { } return true ;
rank: 827
score: 98.12320556640626
patch: return 0 ; ;
rank: 827
score: 98.09322102864583
patch: check . return true ;
rank: 827
score: 98.06159057617188
patch: break ; break ;
rank: 827
score: 98.00179036458333
patch: / : return false ;
rank: 827
score: 97.6263671875
patch: Collections return true ;
rank: 827
score: 97.60038757324219
patch: false * /
rank: 828
score: 98.32456461588542
patch: return - true ; ;
rank: 828
score: 98.19359334309895
patch: return true : false ;
rank: 828
score: 98.13865966796875
patch: { else return ;
rank: 828
score: 98.12240600585938
patch: return * + true ;
rank: 828
score: 98.00126139322917
patch: return value && true ;
rank: 828
score: 97.62543334960938
patch: return ! ( ;
rank: 828
score: 97.60018310546874
patch: c = true ;
rank: 829
score: 98.13839721679688
patch: { else return null ;
rank: 829
score: 98.1223653157552
patch: return - 1 ; ;
rank: 829
score: 98.0910135904948
patch: return EMPTY : true ;
rank: 829
score: 97.99798583984375
patch: x = ( 0 )
rank: 829
score: 97.58868408203125
patch: * true ;
rank: 830
score: 98.322265625
patch: throw false ; true ;
rank: 830
score: 98.14995727539062
patch: result return false ;
rank: 830
score: 98.1345703125
patch: break return false ;
rank: 830
score: 98.12211608886719
patch: return count ;
rank: 830
score: 97.5746826171875
patch: parameters . put ;
rank: 831
score: 98.32069905598958
patch: / else return true ;
rank: 831
score: 98.18587239583333
patch: return true ; ) ;
rank: 831
score: 98.12180582682292
patch: return type ; break ;
rank: 831
score: 98.0802714029948
patch: return Token . REGEXP :
rank: 831
score: 97.9960693359375
patch: return - $NUMBER$ ;
rank: 831
score: 97.61856689453126
patch: loaded = true ;
rank: 831
score: 97.57357788085938
patch: * / if ;
rank: 832
score: 98.131103515625
patch: . return false ; ;
rank: 832
score: 98.0780029296875
patch: return false ; )
rank: 832
score: 97.61632080078125
patch: answer = true ;
rank: 832
score: 97.5694351196289
patch: = false ;
rank: 833
score: 98.31897989908855
patch: true return false ; ;
rank: 833
score: 98.1388651529948
patch: return null || true ;
rank: 833
score: 98.11578369140625
patch: return n return true ;
rank: 833
score: 98.04677327473958
patch: return true ; finally {
rank: 833
score: 97.98848470052083
patch: return < < 0 ;
rank: 833
score: 97.611474609375
patch: m return true ;
rank: 833
score: 97.52937316894531
patch: loop * /
rank: 834
score: 98.10853576660156
patch: true true ;
rank: 834
score: 97.98726196289063
patch: x = 0 ;
rank: 834
score: 97.609765625
patch: cfw . add ;
rank: 835
score: 98.31613159179688
patch: return true ; * ;
rank: 835
score: 98.17453002929688
patch: return ) && true ;
rank: 835
score: 98.12143961588542
patch: return ! return true ;
rank: 835
score: 98.11716918945312
patch: } else * /
rank: 835
score: 97.6062744140625
patch: protected return true ;
rank: 835
score: 97.50579071044922
patch: fail true ;
rank: 836
score: 98.31602478027344
patch: throw false ;
rank: 836
score: 98.12078857421875
patch: case Type . ASSIGN :
rank: 836
score: 98.113330078125
patch: . if true ;
rank: 836
score: 98.07308959960938
patch: ret . return true ;
rank: 836
score: 98.0382080078125
patch: return ( false ;
rank: 836
score: 97.4962158203125
patch: for true ;
rank: 837
score: 98.31253051757812
patch: / return true ; ;
rank: 837
score: 98.07091064453125
patch: return . false ;
rank: 837
score: 98.03797403971355
patch: check ( value ) ;
rank: 837
score: 97.48484293619792
patch: * ;
rank: 838
score: 98.31190999348958
patch: int true return false ;
rank: 838
score: 98.11806233723958
patch: return , return true ;
rank: 838
score: 98.10350341796875
patch: / * * /
rank: 838
score: 98.0867919921875
patch: return new true ;
rank: 838
score: 98.031591796875
patch: true = true ;
rank: 838
score: 97.935400390625
patch: x = $NUMBER$ ;
rank: 838
score: 97.60182189941406
patch: return ! ;
rank: 838
score: 97.46643829345703
patch: &= true ;
rank: 839
score: 98.16331990559895
patch: return $STRING$ != value ;
rank: 839
score: 98.0140625
patch: return true ; :
rank: 839
score: 97.60147705078126
patch: return ( ; ;
rank: 839
score: 97.42252349853516
patch: for true ,
rank: 840
score: 98.30767822265625
patch: } return false ; ;
rank: 840
score: 98.11588541666667
patch: return boolean == false ;
rank: 840
score: 98.09073486328126
patch: return true true }
rank: 840
score: 98.03861999511719
patch: return ; *
rank: 840
score: 97.92938232421875
patch: throw new $STRING$ ;
rank: 840
score: 97.42196655273438
patch: return Boolean ;
rank: 841
score: 98.30731201171875
patch: return true ; value {
rank: 841
score: 98.06646728515625
patch: false ? return true ;
rank: 841
score: 97.594189453125
patch: / ; ; ;
rank: 841
score: 97.41116333007812
patch: if true )
rank: 842
score: 98.30116780598958
patch: ret { return true ;
rank: 842
score: 98.0079345703125
patch: return true ; try
rank: 842
score: 97.92025146484374
patch: a = true ;
rank: 842
score: 97.59288940429687
patch: default : return ;
rank: 842
score: 97.3978271484375
patch: default * /
rank: 843
score: 98.08226318359375
patch: } return null ;
rank: 843
score: 97.96594848632813
patch: false return true ;
rank: 843
score: 97.913232421875
patch: return false ; .
rank: 843
score: 97.59263916015625
patch: / * true ;
rank: 843
score: 97.39092254638672
patch: if ; else
rank: 844
score: 98.29148356119792
patch: int * return true ;
rank: 844
score: 98.11246744791667
patch: g . return true ;
rank: 844
score: 97.90733642578125
patch: A = false ;
rank: 844
score: 97.59107055664063
patch: if ( exp ;
rank: 845
score: 98.29103597005208
patch: ret { return false ;
rank: 845
score: 98.07494506835937
patch: throw null ; }
rank: 845
score: 97.95912475585938
patch: rv = true ;
rank: 845
score: 97.3390121459961
patch: for true .
rank: 846
score: 98.13515218098958
patch: return Token . REGEXP ;
rank: 846
score: 98.10331217447917
patch: return boolean . TRUE ;
rank: 846
score: 98.07000732421875
patch: ( return false ;
rank: 846
score: 98.05469512939453
patch: return locals ;
rank: 846
score: 97.98904418945312
patch: return start ;
rank: 846
score: 97.88089599609376
patch: literal = true ;
rank: 846
score: 97.58770141601562
patch: null return false ;
rank: 846
score: 97.33345031738281
patch: -- true ;
rank: 847
score: 98.1306884765625
patch: return . true ;
rank: 847
score: 98.10188802083333
patch: return ! ! true ;
rank: 847
score: 98.05309041341145
patch: return value ; default :
rank: 847
score: 97.97906494140625
patch: return n true ;
rank: 847
score: 97.95614013671874
patch: res = false ;
rank: 847
score: 97.583349609375
patch: switch ( true ;
rank: 847
score: 97.32913208007812
patch: double true ;
rank: 848
score: 98.05503540039062
patch: throw true ; }
rank: 848
score: 97.9775146484375
patch: return value ; ;
rank: 848
score: 97.95439453125
patch: expr = false ;
rank: 848
score: 97.8638671875
patch: return < value ;
rank: 848
score: 97.582177734375
patch: return true . ;
rank: 848
score: 97.29325103759766
patch: if true ,
rank: 849
score: 98.28318481445312
patch: return null ; true
rank: 849
score: 98.0968729654948
patch: return static != null ;
rank: 849
score: 98.05265045166016
patch: { return ;
rank: 849
score: 98.05074055989583
patch: return ( value == null
rank: 849
score: 97.97331237792969
patch: return * ;
rank: 849
score: 97.85140380859374
patch: x = 1 ;
rank: 849
score: 97.58199462890624
patch: helper return true ;
rank: 849
score: 97.2926025390625
patch: final Node ;
rank: 850
score: 98.0468017578125
patch: { else * /
rank: 850
score: 97.94775390625
patch: minor = true ;
rank: 850
score: 97.84923706054687
patch: operator = true ;
rank: 850
score: 97.2921142578125
patch: return match ;
rank: 851
score: 98.04432373046875
patch: return ; break ;
rank: 851
score: 97.28807067871094
patch: ( true )
rank: 852
score: 98.111865234375
patch: return || true ;
rank: 852
score: 97.9418701171875
patch: true ; return ;
rank: 852
score: 97.93763427734375
patch: VM = true ;
rank: 852
score: 97.56539306640624
patch: loop : true ;
rank: 852
score: 97.28620147705078
patch: return changed ;
rank: 853
score: 98.26926676432292
patch: return return 1 ; ?
rank: 853
score: 98.1029561360677
patch: return < - $NUMBER$ ;
rank: 853
score: 98.03896484375
patch: } else return ;
rank: 853
score: 97.56250610351563
patch: while ( ; )
rank: 853
score: 97.27566528320312
patch: loop true ;
rank: 854
score: 98.26590983072917
patch: true return true ; true
rank: 854
score: 98.0404561360677
patch: ) { return true ;
rank: 854
score: 98.03378295898438
patch: return ; false ;
rank: 854
score: 97.92765808105469
patch: return ; /
rank: 854
score: 97.9246337890625
patch: return = true ;
rank: 854
score: 97.83427734375
patch: return - * /
rank: 854
score: 97.26697540283203
patch: log true ;
rank: 855
score: 98.2647705078125
patch: result return true ; ;
rank: 855
score: 98.0953369140625
patch: return ) . true ;
rank: 855
score: 98.0843994140625
patch: x return false ;
rank: 855
score: 98.027734375
patch: set return true ;
rank: 855
score: 97.90903930664062
patch: node = false ;
rank: 855
score: 97.8247314453125
patch: result = value ;
rank: 856
score: 98.2618916829427
patch: / true return true ;
rank: 856
score: 98.08289591471355
patch: x = - 1 ;
rank: 856
score: 97.91288248697917
patch: true ;
rank: 856
score: 97.90714111328126
patch: abort ( ) ;
rank: 856
score: 97.55567016601563
patch: factory return true ;
rank: 856
score: 97.24298095703125
patch: synchronized ( ;
rank: 857
score: 97.9045166015625
patch: exception return true ;
rank: 857
score: 97.89881591796875
patch: return 1 ; ;
rank: 857
score: 97.55421142578125
patch: loop : * /
rank: 857
score: 97.23932647705078
patch: true * /
rank: 858
score: 98.25632731119792
patch: boolean return true ; ;
rank: 858
score: 98.03880818684895
patch: return Node . FUNCTION :
rank: 858
score: 97.54632568359375
patch: this ;
rank: 858
score: 97.23008728027344
patch: ++ true ;
rank: 859
score: 98.01322021484376
patch: * * * ;
rank: 859
score: 97.89149169921875
patch: e . break ;
rank: 859
score: 97.86279296875
patch: return - false ;
rank: 859
score: 97.542724609375
patch: / ; ;
rank: 859
score: 97.2190933227539
patch: if true :
rank: 860
score: 98.25377400716145
patch: Node true return true ;
rank: 860
score: 98.07755533854167
patch: return Boolean . EMPTY ;
rank: 860
score: 98.03200276692708
patch: return true ; default ?
rank: 860
score: 98.0098876953125
patch: return false true }
rank: 860
score: 97.89061279296875
patch: impl = true ;
rank: 860
score: 97.8196533203125
patch: result = $STRING$ ;
rank: 860
score: 97.52349090576172
patch: / * ;
rank: 861
score: 98.0074951171875
patch: throw new Runtime ;
rank: 861
score: 97.8583251953125
patch: if return 1 ;
rank: 861
score: 97.81877136230469
patch: / * /
rank: 861
score: 97.49267578125
patch: * / ;
rank: 862
score: 98.25304158528645
patch: ; return true ; ;
rank: 862
score: 98.02147420247395
patch: return Result . FUNCTION :
rank: 862
score: 97.99518432617188
patch: return 0 ; }
rank: 862
score: 97.88421630859375
patch: e = true ;
rank: 862
score: 97.853271484375
patch: return -- true ;
rank: 862
score: 97.49156188964844
patch: || ( ;
rank: 862
score: 97.20645141601562
patch: static * /
rank: 863
score: 97.99063110351562
patch: return ; true }
rank: 863
score: 97.84198608398438
patch: true ; true ;
rank: 863
score: 97.80577392578125
patch: re = true ;
rank: 863
score: 97.20101928710938
patch: Tree true ;
rank: 864
score: 98.06862386067708
patch: return locals < 0 ;
rank: 864
score: 98.06272379557292
patch: Predicate > return true ;
rank: 864
score: 98.02067057291667
patch: check . return false ;
rank: 864
score: 97.83773193359374
patch: return $NUMBER$ ; ;
rank: 864
score: 97.79973754882812
patch: return / * /
rank: 864
score: 97.1952896118164
patch: if ; true
rank: 865
score: 98.06727091471355
patch: return value == n ;
rank: 865
score: 97.98776245117188
patch: return null true ;
rank: 865
score: 97.79940795898438
patch: value = $STRING$ ;
rank: 865
score: 97.19137573242188
patch: throw true false
rank: 866
score: 98.01463826497395
patch: true { return true ;
rank: 866
score: 97.88031005859375
patch: interrupt ( ) ;
rank: 866
score: 97.79678955078126
patch: value = value ;
rank: 866
score: 97.37118530273438
patch: this true ;
rank: 866
score: 97.18881225585938
patch: |= false ;
rank: 867
score: 98.01206461588542
patch: return EMPTY : false ;
rank: 867
score: 97.87755737304687
patch: state = null ;
rank: 867
score: 97.78897705078126
patch: x = FALSE ;
rank: 867
score: 97.37104797363281
patch: * return ;
rank: 867
score: 97.18727111816406
patch: body * /
rank: 868
score: 97.97175598144531
patch: continue true ;
rank: 868
score: 97.796142578125
patch: return name ; ;
rank: 868
score: 97.78460083007812
patch: result . break ;
rank: 868
score: 97.34580993652344
patch: ? Token ;
rank: 868
score: 97.18324279785156
patch: parameters true ;
rank: 869
score: 98.00757853190105
patch: return $STRING$ ; default :
rank: 869
score: 97.9677734375
patch: { if return ;
rank: 869
score: 97.85842895507812
patch: state = 1 ;
rank: 869
score: 97.78276977539062
patch: return ; = ;
rank: 869
score: 97.18061065673828
patch: field * /
rank: 870
score: 98.04977416992188
patch: case Token . FUNCTION ;
rank: 870
score: 97.9654052734375
patch: . = true ;
rank: 870
score: 97.85762939453124
patch: return : true ;
rank: 870
score: 97.78150024414063
patch: true return 0 ;
rank: 870
score: 97.30836486816406
patch: && true ;
rank: 870
score: 97.15989685058594
patch: short true ;
rank: 871
score: 98.16923828125
patch: boolean return false ;
rank: 871
score: 98.05218505859375
patch: return value != 0 ;
rank: 871
score: 98.00527954101562
patch: info . return true ;
rank: 871
score: 97.96072387695312
patch: set return false ;
rank: 871
score: 97.85316162109375
patch: state = 0 ;
rank: 871
score: 97.77474975585938
patch: return true .
rank: 871
score: 97.28584289550781
patch: ? ; ;
rank: 871
score: 97.15422821044922
patch: ? if ;
rank: 872
score: 97.84910888671875
patch: return { break ;
rank: 872
score: 97.7767578125
patch: return < ) ;
rank: 872
score: 97.77143859863281
patch: return n ;
rank: 872
score: 97.15409851074219
patch: * * ;
rank: 873
score: 98.14945068359376
patch: for return true ;
rank: 873
score: 97.95512084960937
patch: { return ; ;
rank: 873
score: 97.84893798828125
patch: return > 1 ;
rank: 873
score: 97.153564453125
patch: if true false
rank: 874
score: 98.141357421875
patch: throw false ; ;
rank: 874
score: 97.846337890625
patch: throw null ) ;
rank: 874
score: 97.7646484375
patch: ) return false ;
rank: 874
score: 97.764599609375
patch: return return $STRING$ ;
rank: 874
score: 97.1491470336914
patch: body true ;
rank: 875
score: 98.01084391276042
patch: return 0 . null ;
rank: 875
score: 97.9486312866211
patch: } return ;
rank: 875
score: 97.83395385742188
patch: break || true ;
rank: 875
score: 97.14537048339844
patch: && true )
rank: 876
score: 97.83264770507813
patch: return ( locals .
rank: 876
score: 97.76307373046875
patch: g = true ;
rank: 876
score: 97.24188995361328
patch: : return ;
rank: 877
score: 97.82847900390625
patch: break return true ;
rank: 877
score: 97.75098876953125
patch: tmp = true ;
rank: 877
score: 97.7464111328125
patch: return ; / ;
rank: 877
score: 97.24046325683594
patch: cfw . ;
rank: 877
score: 97.12187194824219
patch: return do ;
rank: 878
score: 97.99657185872395
patch: case Token . NAME :
rank: 878
score: 97.82736206054688
patch: return ( ( Node
rank: 878
score: 97.74978637695312
patch: / / break ;
rank: 878
score: 97.744921875
patch: true true ; ;
rank: 878
score: 97.22915649414062
patch: || ; ;
rank: 878
score: 97.11588287353516
patch: if true true
rank: 879
score: 98.0704833984375
patch: boolean return true ;
rank: 879
score: 97.93309326171875
patch: if return null ;
rank: 879
score: 97.73875122070312
patch: return false ; try
rank: 879
score: 97.11470031738281
patch: finally { ;
rank: 880
score: 97.99505004882812
patch: return true ; ?
rank: 880
score: 97.74774169921875
patch: l = true ;
rank: 880
score: 97.73866577148438
patch: return type ; ;
rank: 880
score: 97.10597229003906
patch: ? * ;
rank: 881
score: 97.9287109375
patch: = true ; }
rank: 881
score: 97.74491577148437
patch: x = this ;
rank: 881
score: 97.7349609375
patch: return count ; ;
rank: 881
score: 97.21791585286458
patch: throw ;
rank: 881
score: 97.10408782958984
patch: If true ;
rank: 882
score: 98.06176147460937
patch: Node return true ;
rank: 882
score: 97.92664337158203
patch: { else {
rank: 882
score: 97.82109985351562
patch: ex = true ;
rank: 882
score: 97.741748046875
patch: a = value ;
rank: 882
score: 97.73320922851562
patch: true return null ;
rank: 882
score: 97.21483612060547
patch: ( ; ;
rank: 882
score: 97.09750366210938
patch: Exp true ;
rank: 883
score: 97.92056274414062
patch: } if ;
rank: 883
score: 97.20111083984375
patch: / true ;
rank: 883
score: 97.09317016601562
patch: * true .
rank: 884
score: 97.8135986328125
patch: f = true ;
rank: 884
score: 97.72789764404297
patch: return key ;
rank: 884
score: 97.19818115234375
patch: return ; :
rank: 885
score: 98.04969482421875
patch: / return false ;
rank: 885
score: 98.03533935546875
patch: return Token . IN ;
rank: 885
score: 97.80616455078125
patch: b = false ;
rank: 885
score: 97.73504638671875
patch: Token . REGEXP :
rank: 885
score: 97.72276000976562
patch: return $STRING$ ; }
rank: 885
score: 97.19757080078125
patch: final return ;
rank: 885
score: 97.07328796386719
patch: do * /
rank: 886
score: 98.04721069335938
patch: return true ; *
rank: 886
score: 97.90041097005208
patch: continue ;
rank: 886
score: 97.80422973632812
patch: continue ; break ;
rank: 886
score: 97.17182922363281
patch: loop : ;
rank: 886
score: 97.06867980957031
patch: for true ?
rank: 887
score: 98.04512939453124
patch: ret return true ;
rank: 887
score: 97.8962158203125
patch: ( return true ;
rank: 887
score: 97.80277099609376
patch: se = true ;
rank: 887
score: 97.17074584960938
patch: fail ( ;
rank: 887
score: 96.99222819010417
patch: / ;
rank: 888
score: 97.8929931640625
patch: , return false ;
rank: 888
score: 97.79984741210937
patch: check = true ;
rank: 888
score: 97.71970825195312
patch: x = locals ;
rank: 888
score: 97.68875122070312
patch: true ; ;
rank: 888
score: 97.16535949707031
patch: : * /
rank: 889
score: 98.02339680989583
patch: x ; return true ;
rank: 889
score: 98.01904907226563
patch: throw false ; true
rank: 889
score: 97.89019165039062
patch: . throw true ;
rank: 889
score: 97.78822631835938
patch: retval = false ;
rank: 889
score: 97.71100463867188
patch: in = true ;
rank: 889
score: 97.66277313232422
patch: return parent ;
rank: 889
score: 97.162353515625
patch: callback . ;
rank: 889
score: 96.90660603841145
patch: . ;
rank: 890
score: 97.87996826171874
patch: . return ; }
rank: 890
score: 97.71092529296875
patch: return value ; }
rank: 890
score: 96.87295532226562
patch: final ;
rank: 891
score: 97.87899169921874
patch: continue true ; }
rank: 891
score: 97.78701171875
patch: VM = false ;
rank: 891
score: 97.61068725585938
patch: return ; else
rank: 891
score: 97.15702819824219
patch: final ; ;
rank: 891
score: 96.86138916015625
patch: false ;
rank: 892
score: 97.91809692382813
patch: return ! false ;
rank: 892
score: 97.60000610351562
patch: return / ;
rank: 892
score: 97.15290832519531
patch: & true :
rank: 892
score: 96.84934488932292
patch: try {
rank: 893
score: 97.78165893554687
patch: return ) ) ;
rank: 893
score: 97.70487670898437
patch: literal = false ;
rank: 893
score: 97.59800720214844
patch: return ; _
rank: 893
score: 97.14691162109375
patch: loop ; ;
rank: 893
score: 96.8478291829427
patch: Tree ;
rank: 894
score: 97.86141357421874
patch: { if ; ;
rank: 894
score: 97.77780151367188
patch: ex = false ;
rank: 894
score: 97.5859146118164
patch: return * /
rank: 894
score: 97.14289855957031
patch: return ; default
rank: 894
score: 96.84739176432292
patch: it .
rank: 895
score: 98.00897216796875
patch: return $STRING$ : true ;
rank: 895
score: 97.86881713867187
patch: return $STRING$ ) ;
rank: 895
score: 97.85823974609374
patch: break ; * /
rank: 895
score: 97.77662963867188
patch: expr return true ;
rank: 895
score: 97.69984741210938
patch: ++ return true ;
rank: 895
score: 97.52715301513672
patch: return $STRING$ .
rank: 895
score: 96.83778889973958
patch: parameters ;
rank: 896
score: 98.00892130533855
patch: return true ; case ?
rank: 896
score: 97.856640625
patch: { / * /
rank: 896
score: 97.69979248046874
patch: return && true ;
rank: 896
score: 97.52108764648438
patch: return code ;
rank: 896
score: 97.13090515136719
patch: do { ;
rank: 896
score: 96.82733154296875
patch: do {
rank: 897
score: 98.00459798177083
patch: case Token . TYPE :
rank: 897
score: 97.69801635742188
patch: is CaMeL Simple CaMeL
rank: 897
score: 97.12883758544922
patch: * ; ;
rank: 897
score: 96.81529744466145
patch: log ;
rank: 898
score: 97.97072143554688
patch: return 0 ; true
rank: 898
score: 97.8424560546875
patch: return ; ) ;
rank: 898
score: 97.77068481445312
patch: minor = false ;
rank: 898
score: 97.697607421875
patch: a = $STRING$ ;
rank: 898
score: 97.12689208984375
patch: || ;
rank: 898
score: 96.77459716796875
patch: body ;
rank: 899
score: 97.9545654296875
patch: return false ; *
rank: 899
score: 97.87421875
patch: m = true ;
rank: 899
score: 97.84229736328125
patch: { if ; }
rank: 899
score: 97.69669799804687
patch: re = false ;
rank: 899
score: 97.49656677246094
patch: return false .
rank: 899
score: 97.10958862304688
patch: ? ;
rank: 899
score: 96.75120035807292
patch: result ;
rank: 900
score: 97.949462890625
patch: Object return true ;
rank: 900
score: 97.86326904296875
patch: return < n ;
rank: 900
score: 97.83603515625
patch: return return ; }
rank: 900
score: 97.75418701171876
patch: this . break ;
rank: 900
score: 97.48831939697266
patch: return list ;
rank: 900
score: 97.09648895263672
patch: return ; true
rank: 900
score: 96.74172973632812
patch: ( ;
rank: 901
score: 97.97388305664063
patch: default = true ;
rank: 901
score: 97.8322509765625
patch: { throw null ;
rank: 901
score: 97.75301513671874
patch: Uninterruptible = true ;
rank: 901
score: 97.6918212890625
patch: operator = false ;
rank: 901
score: 97.48661041259766
patch: return node ;
rank: 901
score: 96.73351033528645
patch: http :
rank: 902
score: 97.4610595703125
patch: return break ;
rank: 902
score: 96.73152669270833
patch: compiler .
rank: 903
score: 97.946337890625
patch: throw true ; ;
rank: 903
score: 97.8290283203125
patch: break true ; else
rank: 903
score: 97.74693603515625
patch: return false ; :
rank: 903
score: 97.6910400390625
patch: aliased = true ;
rank: 903
score: 97.46064758300781
patch: return true /
rank: 903
score: 97.0860824584961
patch: && ( ;
rank: 904
score: 97.94454345703124
patch: finally return true ;
rank: 904
score: 97.82720947265625
patch: continue return false ;
rank: 904
score: 97.74690551757813
patch: expr = 0 ;
rank: 904
score: 97.44810485839844
patch: if ; {
rank: 904
score: 97.07947540283203
patch: return default :
rank: 904
score: 96.68986002604167
patch: do ;
rank: 905
score: 97.94423217773438
patch: for return false ;
rank: 905
score: 97.8537841796875
patch: return boolean null ;
rank: 905
score: 97.80796508789062
patch: return false ; default
rank: 905
score: 97.42143249511719
patch: return next ;
rank: 905
score: 97.07752227783203
patch: @ Override ;
rank: 905
score: 96.67910766601562
patch: Type ;
rank: 906
score: 97.7443115234375
patch: } return ) ;
rank: 906
score: 97.679541015625
patch: r = true ;
rank: 906
score: 97.41497039794922
patch: return end ;
rank: 906
score: 97.06915283203125
patch: return exp ;
rank: 906
score: 96.66573079427083
patch: in ;
rank: 907
score: 97.82356262207031
patch: break ; }
rank: 907
score: 97.787060546875
patch: return false ; ?
rank: 907
score: 97.73927001953125
patch: return 0 ) ;
rank: 907
score: 97.41133117675781
patch: return ; ?
rank: 907
score: 97.06356048583984
patch: Object ; ;
rank: 907
score: 96.66319783528645
patch: false .
rank: 908
score: 97.82275390625
patch: { return 0 ;
rank: 908
score: 97.776904296875
patch: value = false ;
rank: 908
score: 97.7385986328125
patch: flush ( ) ;
rank: 908
score: 97.39398193359375
patch: return out ;
rank: 908
score: 96.64219156901042
patch: value ;
rank: 909
score: 97.9193359375
patch: f return true ;
rank: 909
score: 97.8197021484375
patch: break ; return ;
rank: 909
score: 97.38379669189453
patch: return ; try
rank: 909
score: 97.04605102539062
patch: n = ;
rank: 909
score: 96.63950602213542
patch: this .
rank: 910
score: 97.81637573242188
patch: { else if ;
rank: 910
score: 97.80821533203125
patch: return < $STRING$ ;
rank: 910
score: 97.73701782226563
patch: v return true ;
rank: 910
score: 97.6626220703125
patch: return < locals ;
rank: 910
score: 97.35565948486328
patch: return size ;
rank: 910
score: 97.03976440429688
patch: protected Node ;
rank: 910
score: 96.63815307617188
patch: fail ;
rank: 911
score: 97.81228637695312
patch: { break ; }
rank: 911
score: 97.80433959960938
patch: case Token . FUNCTION
rank: 911
score: 97.73587646484376
patch: flag = true ;
rank: 911
score: 97.66085205078124
patch: Token . FUNCTION :
rank: 911
score: 97.35554504394531
patch: return ALL ;
rank: 911
score: 96.63421630859375
patch: m ;
rank: 912
score: 97.81108093261719
patch: . if ;
rank: 912
score: 97.76513671875
patch: check = false ;
rank: 912
score: 97.3475570678711
patch: return Math ;
rank: 912
score: 97.02093505859375
patch: synchronized ; ;
rank: 912
score: 96.63167317708333
patch: if true
rank: 913
score: 97.90440673828125
patch: m return false ;
rank: 913
score: 97.81162109375
patch: return ) true ;
rank: 913
score: 97.81023559570312
patch: break ; true ;
rank: 913
score: 97.33927917480469
patch: return ; void
rank: 913
score: 96.62626139322917
patch: / *
rank: 914
score: 97.90040893554688
patch: catch return true ;
rank: 914
score: 97.73094482421875
patch: binding = true ;
rank: 914
score: 97.32694244384766
patch: true ; else
rank: 914
score: 97.01838684082031
patch: , true ;
rank: 914
score: 96.62610880533855
patch: This ;
rank: 915
score: 97.89938354492188
patch: catch return false ;
rank: 915
score: 97.72921752929688
patch: match = true ;
rank: 915
score: 97.64635009765625
patch: ! return true ;
rank: 916
score: 97.79119873046875
patch: throw new Error ;
rank: 916
score: 97.72789916992187
patch: v = false ;
rank: 916
score: 97.3185043334961
patch: return index ;
rank: 916
score: 96.60577392578125
patch: body .
rank: 917
score: 97.722705078125
patch: context = false ;
rank: 917
score: 97.64210205078125
patch: g = false ;
rank: 917
score: 97.30754089355469
patch: return Integer ;
rank: 917
score: 97.01055145263672
patch: || true :
rank: 917
score: 96.56920369466145
patch: my ;
rank: 918
score: 97.8769287109375
patch: throw true ; true
rank: 918
score: 97.7893798828125
patch: parent return true ;
rank: 918
score: 97.72252807617187
patch: return = false ;
rank: 918
score: 97.30311584472656
patch: return Arrays ;
rank: 918
score: 96.56699625651042
patch: check ;
rank: 919
score: 97.8725830078125
patch: boolean return null ;
rank: 919
score: 97.78905029296875
patch: if ; * ;
rank: 919
score: 97.72059326171875
patch: se = false ;
rank: 919
score: 97.64008178710938
patch: Token . IN :
rank: 919
score: 97.29322814941406
patch: return scope ;
rank: 919
score: 96.55950927734375
patch: compile ;
rank: 920
score: 97.86752319335938
patch: synchronized return true ;
rank: 920
score: 97.78872680664062
patch: / * * ;
rank: 920
score: 97.71881103515625
patch: e = false ;
rank: 920
score: 97.29238891601562
patch: return max ;
rank: 920
score: 96.99394226074219
patch: that ; ;
rank: 920
score: 96.55018107096355
patch: * true
rank: 921
score: 97.8647216796875
patch: throw false true ;
rank: 921
score: 97.77750244140626
patch: return ! 0 ;
rank: 921
score: 97.7179931640625
patch: finished = true ;
rank: 921
score: 97.28752136230469
patch: return default ;
rank: 921
score: 96.99102020263672
patch: node . ;
rank: 921
score: 96.541748046875
patch: Obj ;
rank: 922
score: 97.862939453125
patch: Node return false ;
rank: 922
score: 97.78426513671874
patch: return signum true ;
rank: 922
score: 97.71494140625
patch: expr = null ;
rank: 922
score: 97.6346435546875
patch: in = false ;
rank: 922
score: 97.26380920410156
patch: return NULL ;
rank: 922
score: 96.99079132080078
patch: init ( ;
rank: 922
score: 96.50797526041667
patch: code ;
rank: 923
score: 97.7135498046875
patch: context = true ;
rank: 923
score: 97.683447265625
patch: do = true ;
rank: 923
score: 97.24838256835938
patch: true ; {
rank: 923
score: 96.98757934570312
patch: factory . ;
rank: 923
score: 96.5078837076823
patch: emit ;
rank: 924
score: 97.84166259765625
patch: while return true ;
rank: 924
score: 97.78134765625
patch: return null ; else
rank: 924
score: 97.71266479492188
patch: { return ) ;
rank: 924
score: 97.68056030273438
patch: System . * /
rank: 924
score: 97.2403335571289
patch: ; true ;
rank: 924
score: 96.98685455322266
patch: default true ;
rank: 924
score: 96.49783325195312
patch: type ;
rank: 925
score: 97.83861694335937
patch: throw null ; ;
rank: 925
score: 97.75946655273438
patch: return boolean true ;
rank: 925
score: 97.71056518554687
patch: init ( ) ;
rank: 925
score: 97.22503662109375
patch: return true {
rank: 925
score: 96.98165893554688
patch: this return ;
rank: 925
score: 96.49688720703125
patch: Hash ;
rank: 926
score: 97.75711059570312
patch: return != null ;
rank: 926
score: 97.71405029296875
patch: } else {
rank: 926
score: 97.70742797851562
patch: code = null ;
rank: 926
score: 96.97698211669922
patch: || return ;
rank: 926
score: 96.49454752604167
patch: expr ;
rank: 927
score: 97.8350830078125
patch: d return true ;
rank: 927
score: 97.70732879638672
patch: break ; ;
rank: 927
score: 97.70396728515625
patch: consume ( ) ;
rank: 927
score: 97.6450439453125
patch: { return $STRING$ ;
rank: 927
score: 97.21890258789062
patch: return ; String
rank: 927
score: 96.97154998779297
patch: default ; ;
rank: 927
score: 96.47556559244792
patch: ? else
rank: 928
score: 97.834423828125
patch: String return true ;
rank: 928
score: 97.69740295410156
patch: . break ;
rank: 928
score: 97.52397155761719
patch: return false :
rank: 928
score: 97.2042465209961
patch: true ; true
rank: 928
score: 96.96476745605469
patch: = ; ;
rank: 928
score: 96.46846516927083
patch: it ;
rank: 929
score: 97.83402099609376
patch: return true ; Token
rank: 929
score: 97.698828125
patch: context = null ;
rank: 929
score: 97.49700927734375
patch: return true :
rank: 929
score: 96.96356964111328
patch: the ; ;
rank: 929
score: 96.45706176757812
patch: Class ;
rank: 930
score: 97.6946533203125
patch: bad = true ;
rank: 930
score: 96.95784759521484
patch: ? / ;
rank: 930
score: 96.4532470703125
patch: ?
rank: 931
score: 97.62735748291016
patch: return ASSIGN ;
rank: 931
score: 97.1932144165039
patch: return error ;
rank: 931
score: 96.95075988769531
patch: invoke ; ;
rank: 931
score: 96.45116170247395
patch: for true
rank: 932
score: 97.6465835571289
patch: { else ;
rank: 932
score: 97.18933868408203
patch: true return ;
rank: 932
score: 96.95021057128906
patch: . ; ;
rank: 933
score: 97.72050170898437
patch: return == true ;
rank: 933
score: 97.70182800292969
patch: break ; true
rank: 933
score: 97.17637634277344
patch: throw this ;
rank: 934
score: 97.17195892333984
patch: return line ;
rank: 934
score: 96.44390869140625
patch: Node ;
rank: 935
score: 97.69229125976562
patch: boolean true ;
rank: 935
score: 97.61748046875
patch: Literals . IN :
rank: 935
score: 97.56150817871094
patch: { break ;
rank: 935
score: 97.41082763671875
patch: return true }
rank: 935
score: 97.1700210571289
patch: return System ;
rank: 935
score: 96.93673706054688
patch: loop ;
rank: 935
score: 96.43705240885417
patch: t .
rank: 936
score: 97.6107177734375
patch: out = true ;
rank: 936
score: 97.54973602294922
patch: { if ;
rank: 936
score: 97.34786987304688
patch: throw $STRING$ ;
rank: 936
score: 97.14759826660156
patch: return ; .
rank: 936
score: 96.4343770345052
patch: default :
rank: 937
score: 97.70711669921874
patch: return ! 1 ;
rank: 937
score: 97.54395294189453
patch: } break ;
rank: 937
score: 97.33998107910156
patch: return false }
rank: 937
score: 97.13604736328125
patch: return filter ;
rank: 937
score: 96.69618733723958
patch: default ;
rank: 937
score: 96.4152323404948
patch: catch ;
rank: 938
score: 97.5456771850586
patch: int * ;
rank: 938
score: 97.51564025878906
patch: return ) {
rank: 938
score: 96.41454060872395
patch: parameters .
rank: 939
score: 97.60863037109375
patch: return Token . FUNCTION
rank: 939
score: 97.5439224243164
patch: int true ;
rank: 939
score: 97.48908996582031
patch: } else ;
rank: 939
score: 97.13166809082031
patch: if true .
rank: 939
score: 96.60809326171875
patch: && ;
rank: 940
score: 97.69880981445313
patch: return != true ;
rank: 940
score: 97.54090118408203
patch: boolean * ;
rank: 940
score: 97.45127360026042
patch: return {
rank: 940
score: 97.27185821533203
patch: return false {
rank: 940
score: 97.1159896850586
patch: return logger ;
rank: 940
score: 96.41278076171875
patch: the ;
rank: 941
score: 97.69666748046875
patch: return || false ;
rank: 941
score: 97.44813537597656
patch: log . :
rank: 941
score: 97.25921630859375
patch: return children ;
rank: 941
score: 97.11299133300781
patch: return NONE ;
rank: 941
score: 96.58646647135417
patch: loop :
rank: 941
score: 96.4124043782552
patch: thread .
rank: 942
score: 97.6923095703125
patch: m = $STRING$ ;
rank: 942
score: 97.63653564453125
patch: / * / /
rank: 942
score: 97.53168487548828
patch: int * /
rank: 942
score: 97.2439193725586
patch: throw value ;
rank: 942
score: 97.11248779296875
patch: return Collections ;
rank: 942
score: 96.41184488932292
patch: int ;
rank: 943
score: 97.40187072753906
patch: . continue ;
rank: 943
score: 97.24229431152344
patch: # break ;
rank: 943
score: 97.1036148071289
patch: return id ;
rank: 943
score: 96.41041056315105
patch: Object ;
rank: 944
score: 97.22091674804688
patch: else break ;
rank: 944
score: 97.09503936767578
patch: return Double ;
rank: 944
score: 96.54144287109375
patch: : ;
rank: 944
score: 96.40716552734375
patch: t ;
rank: 945
score: 97.6886474609375
patch: return true ; ,
rank: 945
score: 97.41790771484375
patch: boolean * /
rank: 945
score: 97.37689971923828
patch: if return ;
rank: 945
score: 97.21986897786458
patch: result .
rank: 945
score: 97.0936279296875
patch: return false /
rank: 945
score: 96.50384521484375
patch: ; ;
rank: 945
score: 96.39248657226562
patch: A ;
rank: 946
score: 97.62666015625
patch: return $STRING$ true ;
rank: 946
score: 97.21815490722656
patch: ++ locals ;
rank: 946
score: 97.08289337158203
patch: return current ;
rank: 946
score: 96.38907877604167
patch: of ;
rank: 947
score: 97.68238525390625
patch: true = false ;
rank: 947
score: 97.36114501953125
patch: break ; else
rank: 947
score: 97.18437194824219
patch: x = ;
rank: 947
score: 97.0672607421875
patch: return length ;
rank: 948
score: 97.35621643066406
patch: . set ;
rank: 948
score: 97.28714752197266
patch: return EMPTY :
rank: 948
score: 97.18383026123047
patch: / / /
rank: 948
score: 96.37333170572917
patch: short ;
rank: 949
score: 97.05661010742188
patch: return content ;
rank: 949
score: 96.37105305989583
patch: match ;
rank: 950
score: 97.3194808959961
patch: return $STRING$ :
rank: 950
score: 97.31498718261719
patch: . * ;
rank: 950
score: 97.20858001708984
patch: return NO :
rank: 950
score: 97.04417419433594
patch: return ; ,
rank: 950
score: 96.44163004557292
patch: = ;
rank: 950
score: 96.36834716796875
patch: finally {
rank: 951
score: 96.4259033203125
patch: n ;
rank: 951
score: 96.3635965983073
patch: T ;
rank: 952
score: 97.23615264892578
patch: LOG . :
rank: 952
score: 97.02660369873047
patch: true / ;
rank: 952
score: 96.40395100911458
patch: invoke ;
rank: 952
score: 96.35992431640625
patch: type .
rank: 953
score: 97.23008728027344
patch: if ( )
rank: 953
score: 97.10551452636719
patch: ++ value ;
rank: 953
score: 97.02020263671875
patch: return return true
rank: 953
score: 96.35902913411458
patch: String ;
rank: 954
score: 97.6562255859375
patch: return is CaMeL Assignment
rank: 954
score: 97.28410339355469
patch: { synchronized ;
rank: 954
score: 97.21998596191406
patch: state break ;
rank: 954
score: 97.08976745605469
patch: return evaluates CaMeL
rank: 954
score: 97.01646423339844
patch: return WARNING ;
rank: 954
score: 96.35835266113281
patch: .
rank: 955
score: 97.27851867675781
patch: throw return ;
rank: 955
score: 97.21772766113281
patch: return value .
rank: 955
score: 97.08968353271484
patch: / / .
rank: 955
score: 97.01300048828125
patch: return ; System
rank: 955
score: 96.35408528645833
patch: false ,
rank: 956
score: 97.35648345947266
patch: return new ;
rank: 956
score: 97.29549407958984
patch: int * *
rank: 956
score: 97.2111587524414
patch: System . :
rank: 956
score: 96.78456115722656
patch: true
rank: 956
score: 96.3459981282552
patch: |= ;
rank: 957
score: 97.26986694335938
patch: return sum ;
rank: 957
score: 97.07794189453125
patch: return continue ;
rank: 957
score: 96.34568277994792
patch: , ;
rank: 957
score: 96.34407552083333
patch: fail true
rank: 958
score: 96.91715494791667
patch: return }
rank: 958
score: 96.61281331380208
patch: true true
rank: 958
score: 96.3416035970052
patch: loaded ;
rank: 958
score: 96.34011840820312
patch: env ;
rank: 959
score: 97.2501220703125
patch: = null ;
rank: 959
score: 97.24311065673828
patch: / / ;
rank: 959
score: 96.91343180338542
patch: return (
rank: 959
score: 96.33713785807292
patch: null ;
rank: 959
score: 96.32534790039062
patch: cached ;
rank: 960
score: 97.24921417236328
patch: return signum ;
rank: 960
score: 97.21420288085938
patch: return )
rank: 960
score: 97.07461547851562
patch: || false ;
rank: 960
score: 96.89837646484375
patch: true .
rank: 960
score: 96.70133463541667
patch: System .
rank: 960
score: 96.38083902994792
patch: return true
rank: 960
score: 96.32462565104167
patch: param ;
rank: 960
score: 96.32041422526042
patch: | ;
rank: 961
score: 97.23515319824219
patch: / ; true
rank: 961
score: 96.88187662760417
patch: break ?
rank: 961
score: 96.31888834635417
patch: . .
rank: 961
score: 96.31654866536458
patch: that ;
rank: 961
score: 96.05921427408855
patch: System ;
rank: 962
score: 97.23550415039062
patch: break false ;
rank: 962
score: 97.15463256835938
patch: return locals .
rank: 962
score: 96.82670084635417
patch: found .
rank: 962
score: 96.65370686848958
patch: / /
rank: 962
score: 96.31406656901042
patch: get ;
rank: 962
score: 96.31260172526042
patch: init ;
rank: 963
score: 97.22158813476562
patch: return true true
rank: 963
score: 97.22105916341145
patch: } else
rank: 963
score: 97.15336608886719
patch: return $STRING$ )
rank: 963
score: 96.65199788411458
patch: else {
rank: 963
score: 96.29703776041667
patch: add ;
rank: 963
score: 95.86004638671875
patch: return false
rank: 964
score: 97.21803283691406
patch: / else {
rank: 964
score: 97.05206298828125
patch: ! false ;
rank: 964
score: 96.3052266438802
patch: field ;
rank: 964
score: 96.28475952148438
patch: -- ;
rank: 965
score: 97.21439361572266
patch: Iterator * ;
rank: 965
score: 96.7360331217448
patch: e .
rank: 965
score: 96.47440592447917
patch: children .
rank: 965
score: 96.30140177408855
patch: ret ;
rank: 966
score: 97.2940673828125
patch: return / /
rank: 966
score: 97.21055603027344
patch: boolean true ?
rank: 966
score: 96.4375
patch: x .
rank: 966
score: 96.29341634114583
patch: Expr ;
rank: 966
score: 96.2598368326823
patch: we ;
rank: 967
score: 96.64634195963542
patch: for (
rank: 967
score: 96.62705485026042
patch: exception .
rank: 967
score: 96.29334513346355
patch: and ;
rank: 967
score: 95.69841003417969
patch: /
rank: 968
score: 97.21080017089844
patch: { * /
rank: 968
score: 96.62237548828125
patch: return value
rank: 968
score: 95.64610290527344
patch: ;
rank: 969
score: 97.19488525390625
patch: boolean * *
rank: 969
score: 96.40708414713542
patch: ( )
rank: 969
score: 96.31931559244792
patch: / :
rank: 969
score: 96.2885233561198
patch: form .
rank: 969
score: 96.21405029296875
patch: direct ;
rank: 969
score: 95.32888793945312
patch: throw
rank: 970
score: 97.20231628417969
patch: return mode ;
rank: 970
score: 97.15576171875
patch: / * true
rank: 970
score: 96.58266194661458
patch: break {
rank: 970
score: 96.284912109375
patch: process ;
rank: 970
score: 96.27691650390625
patch: is CaMeL
rank: 970
score: 96.18878173828125
patch: # ;
rank: 970
score: 95.10963439941406
patch: try
rank: 971
score: 97.20088195800781
patch: break ; null
rank: 971
score: 97.15409851074219
patch: return EQ ;
rank: 971
score: 96.28116861979167
patch: has ;
rank: 971
score: 96.27315266927083
patch: if (
rank: 971
score: 95.03530883789062
patch: 
rank: 972
score: 97.12989807128906
patch: is CaMeL Assignment
rank: 972
score: 96.87269083658855
patch: / true
rank: 972
score: 96.31519571940105
patch: return EMPTY
rank: 972
score: 96.27318318684895
patch: node ;
rank: 972
score: 96.2062479654948
patch: Asserts .
rank: 972
score: 94.73271179199219
patch: {
rank: 973
score: 97.07670084635417
patch: { else
rank: 973
score: 96.5118916829427
patch: true )
rank: 973
score: 96.3125
patch: return $STRING$
rank: 973
score: 96.26932779947917
patch: Psi ;
rank: 973
score: 96.19610595703125
patch: call CaMeL
rank: 973
score: 96.12564086914062
patch: then ;
rank: 973
score: 94.65975952148438
patch: }
rank: 974
score: 96.96133422851562
patch: { ;
rank: 974
score: 96.44790649414062
patch: throw {
rank: 974
score: 96.26810709635417
patch: and true
rank: 974
score: 96.12144978841145
patch: create ;
rank: 974
score: 94.34736633300781
patch: result
rank: 975
score: 96.87489827473958
patch: set ;
rank: 975
score: 96.26595052083333
patch: thread ;
rank: 975
score: 96.23453776041667
patch: return NOT
rank: 975
score: 96.1638692220052
patch: state .
rank: 975
score: 96.10079956054688
patch: bad ;
rank: 975
score: 94.22761535644531
patch: else
rank: 976
score: 96.84883626302083
patch: . {
rank: 976
score: 96.59060668945312
patch: return ,
rank: 976
score: 96.43658447265625
patch: false )
rank: 976
score: 96.15102132161458
patch: x =
rank: 976
score: 96.09208170572917
patch: protected ;
rank: 976
score: 94.16203308105469
patch: *
rank: 977
score: 96.50112915039062
patch: / finally
rank: 977
score: 96.26064046223958
patch: loop true
rank: 977
score: 96.14131673177083
patch: ret .
rank: 977
score: 96.08843994140625
patch: target ;
rank: 977
score: 94.03727722167969
patch: check
rank: 978
score: 96.41086832682292
patch: state :
rank: 978
score: 96.25467936197917
patch: static ;
rank: 978
score: 96.1561279296875
patch: { }
rank: 978
score: 96.114013671875
patch: x ;
rank: 978
score: 94.01676940917969
patch: return
rank: 979
score: 96.40628051757812
patch: check CaMeL
rank: 979
score: 96.24607340494792
patch: Py .
rank: 979
score: 96.10873413085938
patch: in .
rank: 979
score: 96.07669067382812
patch: public ;
rank: 979
score: 93.93070983886719
patch: set
rank: 980
score: 96.24454752604167
patch: update ;
rank: 980
score: 96.0753173828125
patch: result :
rank: 980
score: 96.0725809733073
patch: ? ?
rank: 980
score: 93.899658203125
patch: System
rank: 981
score: 96.37717692057292
patch: state )
rank: 981
score: 96.24192301432292
patch: code .
rank: 981
score: 96.10109456380208
patch: return evaluates
rank: 981
score: 96.07127888997395
patch: boolean ;
rank: 981
score: 96.05748494466145
patch: return <
rank: 981
score: 93.80024719238281
patch: this
rank: 982
score: 96.37696329752605
patch: new ?
rank: 982
score: 96.36649576822917
patch: int true
rank: 982
score: 96.2380879720052
patch: expression ;
rank: 982
score: 96.05393473307292
patch: Predicate .
rank: 982
score: 93.74252319335938
patch: ret
rank: 983
score: 96.23203531901042
patch: long ;
rank: 983
score: 93.47527313232422
patch: LOG
rank: 984
score: 96.23164876302083
patch: v ;
rank: 984
score: 96.04117838541667
patch: bug ;
rank: 984
score: 95.77789306640625
patch: )
rank: 984
score: 93.37910461425781
patch: String
rank: 985
score: 96.35324096679688
patch: VM :
rank: 985
score: 96.22704060872395
patch: * *
rank: 985
score: 95.91672770182292
patch: Predicate >
rank: 985
score: 93.37123107910156
patch: out
rank: 986
score: 96.35084025065105
patch: finished .
rank: 986
score: 95.22539520263672
patch: :
rank: 986
score: 93.30928802490234
patch: value
rank: 987
score: 96.34881591796875
patch: } ;
rank: 987
score: 96.34232584635417
patch: return locals
rank: 987
score: 96.21354166666667
patch: boolean true
rank: 987
score: 96.0213623046875
patch: internal ;
rank: 987
score: 93.23448181152344
patch: boolean
rank: 988
score: 96.30995686848958
patch: this )
rank: 988
score: 96.19368489583333
patch: / else
rank: 988
score: 96.17836507161458
patch: throw new
rank: 988
score: 96.0175272623698
patch: outer ;
rank: 988
score: 95.04736328125
patch: #
rank: 988
score: 93.20304870605469
patch: Assert
rank: 989
score: 96.30991617838542
patch: f ;
rank: 989
score: 96.30209350585938
patch: continue ?
rank: 989
score: 95.99934895833333
patch: while ;
rank: 989
score: 93.18108367919922
patch: logger
rank: 990
score: 96.30106608072917
patch: se .
rank: 990
score: 93.14501953125
patch: do
rank: 991
score: 96.29817708333333
patch: state ?
rank: 991
score: 95.98459879557292
patch: p ;
rank: 991
score: 95.06427764892578
patch: finally
rank: 991
score: 93.12944030761719
patch: default
rank: 992
score: 96.25394694010417
patch: break :
rank: 992
score: 95.97219848632812
patch: & ;
rank: 992
score: 94.99209594726562
patch: false
rank: 992
score: 94.36636352539062
patch: !
rank: 992
score: 93.01228332519531
patch: public
rank: 993
score: 96.23915608723958
patch: } }
rank: 993
score: 95.96378580729167
patch: IAST ;
rank: 993
score: 92.99169921875
patch: Error
rank: 994
score: 96.23342895507812
patch: synchronized ;
rank: 994
score: 95.96148681640625
patch: found ;
rank: 994
score: 94.72172546386719
patch: x
rank: 994
score: 92.95543670654297
patch: start
rank: 995
score: 95.95809936523438
patch: new ;
rank: 995
score: 94.83541107177734
patch: with
rank: 995
score: 94.29785919189453
patch: +
rank: 995
score: 94.14456176757812
patch: children
rank: 995
score: 93.96514892578125
patch: ,
rank: 995
score: 92.91246795654297
patch: error
rank: 996
score: 95.94366455078125
patch: ^ ;
rank: 996
score: 94.81074523925781
patch: and
rank: 996
score: 94.53843688964844
patch: state
rank: 996
score: 94.13272857666016
patch: $STRING$
rank: 996
score: 92.89208984375
patch: sb
rank: 997
score: 94.74006652832031
patch: parameters
rank: 997
score: 94.32244873046875
patch: Node
rank: 997
score: 93.99882507324219
patch: evaluates
rank: 997
score: 93.95852661132812
patch: ++
rank: 997
score: 92.890380859375
patch: Logger
rank: 998
score: 94.56402587890625
patch: method
rank: 998
score: 94.52606201171875
patch: $
rank: 998
score: 93.65654754638672
patch: is
rank: 998
score: 92.87425994873047
patch: code
rank: 999
score: 93.94358825683594
patch: case
rank: 999
score: 92.86687469482422
patch: count
rank: 1000
score: 94.10246276855469
patch: Object
rank: 1000
score: 92.82035064697266
patch: @
